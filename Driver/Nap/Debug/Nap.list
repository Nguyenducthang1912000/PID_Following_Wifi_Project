
Nap.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f488  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c50  0800f628  0800f628  0001f628  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010278  08010278  00030248  2**0
                  CONTENTS
  4 .ARM          00000008  08010278  08010278  00020278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010280  08010280  00030248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010280  08010280  00020280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010284  08010284  00020284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000248  20000000  08010288  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000508  20000248  080104d0  00030248  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000750  080104d0  00030750  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030248  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024645  00000000  00000000  00030278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f47  00000000  00000000  000548bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016d0  00000000  00000000  00058808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015a8  00000000  00000000  00059ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b926  00000000  00000000  0005b480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d4df  00000000  00000000  00076da6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0a53  00000000  00000000  00094285  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00134cd8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007650  00000000  00000000  00134d2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000248 	.word	0x20000248
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f610 	.word	0x0800f610

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000024c 	.word	0x2000024c
 80001dc:	0800f610 	.word	0x0800f610

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a4 	b.w	8000ff8 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468c      	mov	ip, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	f040 8083 	bne.w	8000e4a <__udivmoddi4+0x116>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d947      	bls.n	8000dda <__udivmoddi4+0xa6>
 8000d4a:	fab2 f282 	clz	r2, r2
 8000d4e:	b142      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	f1c2 0020 	rsb	r0, r2, #32
 8000d54:	fa24 f000 	lsr.w	r0, r4, r0
 8000d58:	4091      	lsls	r1, r2
 8000d5a:	4097      	lsls	r7, r2
 8000d5c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d60:	4094      	lsls	r4, r2
 8000d62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d66:	0c23      	lsrs	r3, r4, #16
 8000d68:	fbbc f6f8 	udiv	r6, ip, r8
 8000d6c:	fa1f fe87 	uxth.w	lr, r7
 8000d70:	fb08 c116 	mls	r1, r8, r6, ip
 8000d74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d78:	fb06 f10e 	mul.w	r1, r6, lr
 8000d7c:	4299      	cmp	r1, r3
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x60>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d86:	f080 8119 	bcs.w	8000fbc <__udivmoddi4+0x288>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 8116 	bls.w	8000fbc <__udivmoddi4+0x288>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b2a4      	uxth	r4, r4
 8000d98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000da0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	d909      	bls.n	8000dc0 <__udivmoddi4+0x8c>
 8000dac:	193c      	adds	r4, r7, r4
 8000dae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db2:	f080 8105 	bcs.w	8000fc0 <__udivmoddi4+0x28c>
 8000db6:	45a6      	cmp	lr, r4
 8000db8:	f240 8102 	bls.w	8000fc0 <__udivmoddi4+0x28c>
 8000dbc:	3802      	subs	r0, #2
 8000dbe:	443c      	add	r4, r7
 8000dc0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc4:	eba4 040e 	sub.w	r4, r4, lr
 8000dc8:	2600      	movs	r6, #0
 8000dca:	b11d      	cbz	r5, 8000dd4 <__udivmoddi4+0xa0>
 8000dcc:	40d4      	lsrs	r4, r2
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	b902      	cbnz	r2, 8000dde <__udivmoddi4+0xaa>
 8000ddc:	deff      	udf	#255	; 0xff
 8000dde:	fab2 f282 	clz	r2, r2
 8000de2:	2a00      	cmp	r2, #0
 8000de4:	d150      	bne.n	8000e88 <__udivmoddi4+0x154>
 8000de6:	1bcb      	subs	r3, r1, r7
 8000de8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dec:	fa1f f887 	uxth.w	r8, r7
 8000df0:	2601      	movs	r6, #1
 8000df2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000df6:	0c21      	lsrs	r1, r4, #16
 8000df8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dfc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e00:	fb08 f30c 	mul.w	r3, r8, ip
 8000e04:	428b      	cmp	r3, r1
 8000e06:	d907      	bls.n	8000e18 <__udivmoddi4+0xe4>
 8000e08:	1879      	adds	r1, r7, r1
 8000e0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e0e:	d202      	bcs.n	8000e16 <__udivmoddi4+0xe2>
 8000e10:	428b      	cmp	r3, r1
 8000e12:	f200 80e9 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e16:	4684      	mov	ip, r0
 8000e18:	1ac9      	subs	r1, r1, r3
 8000e1a:	b2a3      	uxth	r3, r4
 8000e1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e28:	fb08 f800 	mul.w	r8, r8, r0
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	d907      	bls.n	8000e40 <__udivmoddi4+0x10c>
 8000e30:	193c      	adds	r4, r7, r4
 8000e32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x10a>
 8000e38:	45a0      	cmp	r8, r4
 8000e3a:	f200 80d9 	bhi.w	8000ff0 <__udivmoddi4+0x2bc>
 8000e3e:	4618      	mov	r0, r3
 8000e40:	eba4 0408 	sub.w	r4, r4, r8
 8000e44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e48:	e7bf      	b.n	8000dca <__udivmoddi4+0x96>
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d909      	bls.n	8000e62 <__udivmoddi4+0x12e>
 8000e4e:	2d00      	cmp	r5, #0
 8000e50:	f000 80b1 	beq.w	8000fb6 <__udivmoddi4+0x282>
 8000e54:	2600      	movs	r6, #0
 8000e56:	e9c5 0100 	strd	r0, r1, [r5]
 8000e5a:	4630      	mov	r0, r6
 8000e5c:	4631      	mov	r1, r6
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	fab3 f683 	clz	r6, r3
 8000e66:	2e00      	cmp	r6, #0
 8000e68:	d14a      	bne.n	8000f00 <__udivmoddi4+0x1cc>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d302      	bcc.n	8000e74 <__udivmoddi4+0x140>
 8000e6e:	4282      	cmp	r2, r0
 8000e70:	f200 80b8 	bhi.w	8000fe4 <__udivmoddi4+0x2b0>
 8000e74:	1a84      	subs	r4, r0, r2
 8000e76:	eb61 0103 	sbc.w	r1, r1, r3
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	468c      	mov	ip, r1
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	d0a8      	beq.n	8000dd4 <__udivmoddi4+0xa0>
 8000e82:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e86:	e7a5      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e90:	4097      	lsls	r7, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e9a:	40d9      	lsrs	r1, r3
 8000e9c:	4330      	orrs	r0, r6
 8000e9e:	0c03      	lsrs	r3, r0, #16
 8000ea0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ea4:	fa1f f887 	uxth.w	r8, r7
 8000ea8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000eac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eb0:	fb06 f108 	mul.w	r1, r6, r8
 8000eb4:	4299      	cmp	r1, r3
 8000eb6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eba:	d909      	bls.n	8000ed0 <__udivmoddi4+0x19c>
 8000ebc:	18fb      	adds	r3, r7, r3
 8000ebe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ec2:	f080 808d 	bcs.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ec6:	4299      	cmp	r1, r3
 8000ec8:	f240 808a 	bls.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	443b      	add	r3, r7
 8000ed0:	1a5b      	subs	r3, r3, r1
 8000ed2:	b281      	uxth	r1, r0
 8000ed4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000edc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee0:	fb00 f308 	mul.w	r3, r0, r8
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	d907      	bls.n	8000ef8 <__udivmoddi4+0x1c4>
 8000ee8:	1879      	adds	r1, r7, r1
 8000eea:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eee:	d273      	bcs.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef0:	428b      	cmp	r3, r1
 8000ef2:	d971      	bls.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4439      	add	r1, r7
 8000ef8:	1acb      	subs	r3, r1, r3
 8000efa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000efe:	e778      	b.n	8000df2 <__udivmoddi4+0xbe>
 8000f00:	f1c6 0c20 	rsb	ip, r6, #32
 8000f04:	fa03 f406 	lsl.w	r4, r3, r6
 8000f08:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f0c:	431c      	orrs	r4, r3
 8000f0e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f12:	fa01 f306 	lsl.w	r3, r1, r6
 8000f16:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f1a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f1e:	431f      	orrs	r7, r3
 8000f20:	0c3b      	lsrs	r3, r7, #16
 8000f22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f26:	fa1f f884 	uxth.w	r8, r4
 8000f2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f2e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f32:	fb09 fa08 	mul.w	sl, r9, r8
 8000f36:	458a      	cmp	sl, r1
 8000f38:	fa02 f206 	lsl.w	r2, r2, r6
 8000f3c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f40:	d908      	bls.n	8000f54 <__udivmoddi4+0x220>
 8000f42:	1861      	adds	r1, r4, r1
 8000f44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f48:	d248      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4a:	458a      	cmp	sl, r1
 8000f4c:	d946      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f52:	4421      	add	r1, r4
 8000f54:	eba1 010a 	sub.w	r1, r1, sl
 8000f58:	b2bf      	uxth	r7, r7
 8000f5a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f62:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f66:	fb00 f808 	mul.w	r8, r0, r8
 8000f6a:	45b8      	cmp	r8, r7
 8000f6c:	d907      	bls.n	8000f7e <__udivmoddi4+0x24a>
 8000f6e:	19e7      	adds	r7, r4, r7
 8000f70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f74:	d22e      	bcs.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f76:	45b8      	cmp	r8, r7
 8000f78:	d92c      	bls.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f7a:	3802      	subs	r0, #2
 8000f7c:	4427      	add	r7, r4
 8000f7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f82:	eba7 0708 	sub.w	r7, r7, r8
 8000f86:	fba0 8902 	umull	r8, r9, r0, r2
 8000f8a:	454f      	cmp	r7, r9
 8000f8c:	46c6      	mov	lr, r8
 8000f8e:	4649      	mov	r1, r9
 8000f90:	d31a      	bcc.n	8000fc8 <__udivmoddi4+0x294>
 8000f92:	d017      	beq.n	8000fc4 <__udivmoddi4+0x290>
 8000f94:	b15d      	cbz	r5, 8000fae <__udivmoddi4+0x27a>
 8000f96:	ebb3 020e 	subs.w	r2, r3, lr
 8000f9a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f9e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fa2:	40f2      	lsrs	r2, r6
 8000fa4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fa8:	40f7      	lsrs	r7, r6
 8000faa:	e9c5 2700 	strd	r2, r7, [r5]
 8000fae:	2600      	movs	r6, #0
 8000fb0:	4631      	mov	r1, r6
 8000fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e70b      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e9      	b.n	8000d94 <__udivmoddi4+0x60>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6fd      	b.n	8000dc0 <__udivmoddi4+0x8c>
 8000fc4:	4543      	cmp	r3, r8
 8000fc6:	d2e5      	bcs.n	8000f94 <__udivmoddi4+0x260>
 8000fc8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fcc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7df      	b.n	8000f94 <__udivmoddi4+0x260>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e7d2      	b.n	8000f7e <__udivmoddi4+0x24a>
 8000fd8:	4660      	mov	r0, ip
 8000fda:	e78d      	b.n	8000ef8 <__udivmoddi4+0x1c4>
 8000fdc:	4681      	mov	r9, r0
 8000fde:	e7b9      	b.n	8000f54 <__udivmoddi4+0x220>
 8000fe0:	4666      	mov	r6, ip
 8000fe2:	e775      	b.n	8000ed0 <__udivmoddi4+0x19c>
 8000fe4:	4630      	mov	r0, r6
 8000fe6:	e74a      	b.n	8000e7e <__udivmoddi4+0x14a>
 8000fe8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fec:	4439      	add	r1, r7
 8000fee:	e713      	b.n	8000e18 <__udivmoddi4+0xe4>
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	443c      	add	r4, r7
 8000ff4:	e724      	b.n	8000e40 <__udivmoddi4+0x10c>
 8000ff6:	bf00      	nop

08000ff8 <__aeabi_idiv0>:
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <Menu_system_control>:
uint8_t MFRC522_Check();
void MFRC522_Reset();
void Running(void);

/* Function declaration ----------------------------------------------------*/
void Menu_system_control(uint8_t Menu_type, uint8_t line) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	460a      	mov	r2, r1
 8001006:	71fb      	strb	r3, [r7, #7]
 8001008:	4613      	mov	r3, r2
 800100a:	71bb      	strb	r3, [r7, #6]
	switch (Menu_type) {
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	2b09      	cmp	r3, #9
 8001010:	d83c      	bhi.n	800108c <Menu_system_control+0x90>
 8001012:	a201      	add	r2, pc, #4	; (adr r2, 8001018 <Menu_system_control+0x1c>)
 8001014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001018:	08001041 	.word	0x08001041
 800101c:	08001047 	.word	0x08001047
 8001020:	08001051 	.word	0x08001051
 8001024:	08001057 	.word	0x08001057
 8001028:	08001061 	.word	0x08001061
 800102c:	0800106b 	.word	0x0800106b
 8001030:	08001071 	.word	0x08001071
 8001034:	08001077 	.word	0x08001077
 8001038:	0800107d 	.word	0x0800107d
 800103c:	08001087 	.word	0x08001087
	case Running_Process:
		Running();
 8001040:	f002 fefe 	bl	8003e40 <Running>
		break;
 8001044:	e022      	b.n	800108c <Menu_system_control+0x90>
	case Main_menu:
		Mainmenu(line);
 8001046:	79bb      	ldrb	r3, [r7, #6]
 8001048:	4618      	mov	r0, r3
 800104a:	f000 f823 	bl	8001094 <Mainmenu>
		break;
 800104e:	e01d      	b.n	800108c <Menu_system_control+0x90>
	case Color_Processing:
		Color_Studying_process();
 8001050:	f000 fad8 	bl	8001604 <Color_Studying_process>
		break;
 8001054:	e01a      	b.n	800108c <Menu_system_control+0x90>
	case PID_Menu:
		PID_menu(line);
 8001056:	79bb      	ldrb	r3, [r7, #6]
 8001058:	4618      	mov	r0, r3
 800105a:	f000 f925 	bl	80012a8 <PID_menu>
		break;
 800105e:	e015      	b.n	800108c <Menu_system_control+0x90>
	case Engine_menu:
		Speed_menu(line);
 8001060:	79bb      	ldrb	r3, [r7, #6]
 8001062:	4618      	mov	r0, r3
 8001064:	f000 fa3e 	bl	80014e4 <Speed_menu>
		break;
 8001068:	e010      	b.n	800108c <Menu_system_control+0x90>
	case LineDetect_Show:
		LineDetect_show();
 800106a:	f000 fb65 	bl	8001738 <LineDetect_show>
		break;
 800106e:	e00d      	b.n	800108c <Menu_system_control+0x90>
	case Wifi_connect:
		Wifi_Connect_establish();
 8001070:	f000 fccc 	bl	8001a0c <Wifi_Connect_establish>
		break;
 8001074:	e00a      	b.n	800108c <Menu_system_control+0x90>
	case Saving_process:
		Saving_Process();
 8001076:	f000 fc27 	bl	80018c8 <Saving_Process>
		break;
 800107a:	e007      	b.n	800108c <Menu_system_control+0x90>
	case Path_solver_menu:
		Path_Solver(line);
 800107c:	79bb      	ldrb	r3, [r7, #6]
 800107e:	4618      	mov	r0, r3
 8001080:	f000 fcd0 	bl	8001a24 <Path_Solver>
		break;
 8001084:	e002      	b.n	800108c <Menu_system_control+0x90>
	case Path_show_menu:
		Path_show();
 8001086:	f000 fda7 	bl	8001bd8 <Path_show>
		break;
 800108a:	bf00      	nop
	}
}
 800108c:	bf00      	nop
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <Mainmenu>:

static void Mainmenu(uint8_t line) {
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	71fb      	strb	r3, [r7, #7]
	switch (line) {
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	3b01      	subs	r3, #1
 80010a2:	2b07      	cmp	r3, #7
 80010a4:	f200 80dc 	bhi.w	8001260 <Mainmenu+0x1cc>
 80010a8:	a201      	add	r2, pc, #4	; (adr r2, 80010b0 <Mainmenu+0x1c>)
 80010aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ae:	bf00      	nop
 80010b0:	080010d1 	.word	0x080010d1
 80010b4:	08001103 	.word	0x08001103
 80010b8:	08001135 	.word	0x08001135
 80010bc:	08001167 	.word	0x08001167
 80010c0:	08001199 	.word	0x08001199
 80010c4:	080011cb 	.word	0x080011cb
 80010c8:	080011fd 	.word	0x080011fd
 80010cc:	0800122f 	.word	0x0800122f
	case 1:
		lcd_send_cmd(0x80 | 0x00);
 80010d0:	2080      	movs	r0, #128	; 0x80
 80010d2:	f000 fee9 	bl	8001ea8 <lcd_send_cmd>
		lcd_send_string(">Car Run            ");
 80010d6:	4864      	ldr	r0, [pc, #400]	; (8001268 <Mainmenu+0x1d4>)
 80010d8:	f000 ff97 	bl	800200a <lcd_send_string>
		lcd_send_cmd(0x80 | 0x40);
 80010dc:	20c0      	movs	r0, #192	; 0xc0
 80010de:	f000 fee3 	bl	8001ea8 <lcd_send_cmd>
		lcd_send_string(" Color studying     ");
 80010e2:	4862      	ldr	r0, [pc, #392]	; (800126c <Mainmenu+0x1d8>)
 80010e4:	f000 ff91 	bl	800200a <lcd_send_string>
		lcd_send_cmd(0x80 | 0x14);
 80010e8:	2094      	movs	r0, #148	; 0x94
 80010ea:	f000 fedd 	bl	8001ea8 <lcd_send_cmd>
		lcd_send_string(" PID value modify   ");
 80010ee:	4860      	ldr	r0, [pc, #384]	; (8001270 <Mainmenu+0x1dc>)
 80010f0:	f000 ff8b 	bl	800200a <lcd_send_string>
		lcd_send_cmd(0x80 | 0x54);
 80010f4:	20d4      	movs	r0, #212	; 0xd4
 80010f6:	f000 fed7 	bl	8001ea8 <lcd_send_cmd>
		lcd_send_string(" Max speed config   ");
 80010fa:	485e      	ldr	r0, [pc, #376]	; (8001274 <Mainmenu+0x1e0>)
 80010fc:	f000 ff85 	bl	800200a <lcd_send_string>
		break;
 8001100:	e0ae      	b.n	8001260 <Mainmenu+0x1cc>
	case 2:
		lcd_send_cmd(0x80 | 0x00);
 8001102:	2080      	movs	r0, #128	; 0x80
 8001104:	f000 fed0 	bl	8001ea8 <lcd_send_cmd>
		lcd_send_string(" Car Run            ");
 8001108:	485b      	ldr	r0, [pc, #364]	; (8001278 <Mainmenu+0x1e4>)
 800110a:	f000 ff7e 	bl	800200a <lcd_send_string>
		lcd_send_cmd(0x80 | 0x40);
 800110e:	20c0      	movs	r0, #192	; 0xc0
 8001110:	f000 feca 	bl	8001ea8 <lcd_send_cmd>
		lcd_send_string(">Color studying     ");
 8001114:	4859      	ldr	r0, [pc, #356]	; (800127c <Mainmenu+0x1e8>)
 8001116:	f000 ff78 	bl	800200a <lcd_send_string>
		lcd_send_cmd(0x80 | 0x14);
 800111a:	2094      	movs	r0, #148	; 0x94
 800111c:	f000 fec4 	bl	8001ea8 <lcd_send_cmd>
		lcd_send_string(" PID value modify   ");
 8001120:	4853      	ldr	r0, [pc, #332]	; (8001270 <Mainmenu+0x1dc>)
 8001122:	f000 ff72 	bl	800200a <lcd_send_string>
		lcd_send_cmd(0x80 | 0x54);
 8001126:	20d4      	movs	r0, #212	; 0xd4
 8001128:	f000 febe 	bl	8001ea8 <lcd_send_cmd>
		lcd_send_string(" Max speed config   ");
 800112c:	4851      	ldr	r0, [pc, #324]	; (8001274 <Mainmenu+0x1e0>)
 800112e:	f000 ff6c 	bl	800200a <lcd_send_string>
		break;
 8001132:	e095      	b.n	8001260 <Mainmenu+0x1cc>
	case 3:
		lcd_send_cmd(0x80 | 0x00);
 8001134:	2080      	movs	r0, #128	; 0x80
 8001136:	f000 feb7 	bl	8001ea8 <lcd_send_cmd>
		lcd_send_string(" Car Run            ");
 800113a:	484f      	ldr	r0, [pc, #316]	; (8001278 <Mainmenu+0x1e4>)
 800113c:	f000 ff65 	bl	800200a <lcd_send_string>
		lcd_send_cmd(0x80 | 0x40);
 8001140:	20c0      	movs	r0, #192	; 0xc0
 8001142:	f000 feb1 	bl	8001ea8 <lcd_send_cmd>
		lcd_send_string(" Color studying     ");
 8001146:	4849      	ldr	r0, [pc, #292]	; (800126c <Mainmenu+0x1d8>)
 8001148:	f000 ff5f 	bl	800200a <lcd_send_string>
		lcd_send_cmd(0x80 | 0x14);
 800114c:	2094      	movs	r0, #148	; 0x94
 800114e:	f000 feab 	bl	8001ea8 <lcd_send_cmd>
		lcd_send_string(">PID value modify   ");
 8001152:	484b      	ldr	r0, [pc, #300]	; (8001280 <Mainmenu+0x1ec>)
 8001154:	f000 ff59 	bl	800200a <lcd_send_string>
		lcd_send_cmd(0x80 | 0x54);
 8001158:	20d4      	movs	r0, #212	; 0xd4
 800115a:	f000 fea5 	bl	8001ea8 <lcd_send_cmd>
		lcd_send_string(" Max speed config   ");
 800115e:	4845      	ldr	r0, [pc, #276]	; (8001274 <Mainmenu+0x1e0>)
 8001160:	f000 ff53 	bl	800200a <lcd_send_string>
		break;
 8001164:	e07c      	b.n	8001260 <Mainmenu+0x1cc>
	case 4:
		lcd_send_cmd(0x80 | 0x00);
 8001166:	2080      	movs	r0, #128	; 0x80
 8001168:	f000 fe9e 	bl	8001ea8 <lcd_send_cmd>
		lcd_send_string(" Car Run            ");
 800116c:	4842      	ldr	r0, [pc, #264]	; (8001278 <Mainmenu+0x1e4>)
 800116e:	f000 ff4c 	bl	800200a <lcd_send_string>
		lcd_send_cmd(0x80 | 0x40);
 8001172:	20c0      	movs	r0, #192	; 0xc0
 8001174:	f000 fe98 	bl	8001ea8 <lcd_send_cmd>
		lcd_send_string(" Color studying     ");
 8001178:	483c      	ldr	r0, [pc, #240]	; (800126c <Mainmenu+0x1d8>)
 800117a:	f000 ff46 	bl	800200a <lcd_send_string>
		lcd_send_cmd(0x80 | 0x14);
 800117e:	2094      	movs	r0, #148	; 0x94
 8001180:	f000 fe92 	bl	8001ea8 <lcd_send_cmd>
		lcd_send_string(" PID value modify   ");
 8001184:	483a      	ldr	r0, [pc, #232]	; (8001270 <Mainmenu+0x1dc>)
 8001186:	f000 ff40 	bl	800200a <lcd_send_string>
		lcd_send_cmd(0x80 | 0x54);
 800118a:	20d4      	movs	r0, #212	; 0xd4
 800118c:	f000 fe8c 	bl	8001ea8 <lcd_send_cmd>
		lcd_send_string(">Max speed config   ");
 8001190:	483c      	ldr	r0, [pc, #240]	; (8001284 <Mainmenu+0x1f0>)
 8001192:	f000 ff3a 	bl	800200a <lcd_send_string>
		break;
 8001196:	e063      	b.n	8001260 <Mainmenu+0x1cc>
	case 5:
		lcd_send_cmd(0x80 | 0x00);
 8001198:	2080      	movs	r0, #128	; 0x80
 800119a:	f000 fe85 	bl	8001ea8 <lcd_send_cmd>
		lcd_send_string(">Line Detect show   ");
 800119e:	483a      	ldr	r0, [pc, #232]	; (8001288 <Mainmenu+0x1f4>)
 80011a0:	f000 ff33 	bl	800200a <lcd_send_string>
		lcd_send_cmd(0x80 | 0x40);
 80011a4:	20c0      	movs	r0, #192	; 0xc0
 80011a6:	f000 fe7f 	bl	8001ea8 <lcd_send_cmd>
		lcd_send_string(" Read RFID Card     ");
 80011aa:	4838      	ldr	r0, [pc, #224]	; (800128c <Mainmenu+0x1f8>)
 80011ac:	f000 ff2d 	bl	800200a <lcd_send_string>
		lcd_send_cmd(0x80 | 0x14);
 80011b0:	2094      	movs	r0, #148	; 0x94
 80011b2:	f000 fe79 	bl	8001ea8 <lcd_send_cmd>
		lcd_send_string(" Wifi Connect       ");
 80011b6:	4836      	ldr	r0, [pc, #216]	; (8001290 <Mainmenu+0x1fc>)
 80011b8:	f000 ff27 	bl	800200a <lcd_send_string>
		lcd_send_cmd(0x80 | 0x54);
 80011bc:	20d4      	movs	r0, #212	; 0xd4
 80011be:	f000 fe73 	bl	8001ea8 <lcd_send_cmd>
		lcd_send_string(" Path Solver        ");
 80011c2:	4834      	ldr	r0, [pc, #208]	; (8001294 <Mainmenu+0x200>)
 80011c4:	f000 ff21 	bl	800200a <lcd_send_string>
		break;
 80011c8:	e04a      	b.n	8001260 <Mainmenu+0x1cc>
	case 6:
		lcd_send_cmd(0x80 | 0x00);
 80011ca:	2080      	movs	r0, #128	; 0x80
 80011cc:	f000 fe6c 	bl	8001ea8 <lcd_send_cmd>
		lcd_send_string(" Line Detect show   ");
 80011d0:	4831      	ldr	r0, [pc, #196]	; (8001298 <Mainmenu+0x204>)
 80011d2:	f000 ff1a 	bl	800200a <lcd_send_string>
		lcd_send_cmd(0x80 | 0x40);
 80011d6:	20c0      	movs	r0, #192	; 0xc0
 80011d8:	f000 fe66 	bl	8001ea8 <lcd_send_cmd>
		lcd_send_string(">Read RFID Card     ");
 80011dc:	482f      	ldr	r0, [pc, #188]	; (800129c <Mainmenu+0x208>)
 80011de:	f000 ff14 	bl	800200a <lcd_send_string>
		lcd_send_cmd(0x80 | 0x14);
 80011e2:	2094      	movs	r0, #148	; 0x94
 80011e4:	f000 fe60 	bl	8001ea8 <lcd_send_cmd>
		lcd_send_string(" Wifi Connect       ");
 80011e8:	4829      	ldr	r0, [pc, #164]	; (8001290 <Mainmenu+0x1fc>)
 80011ea:	f000 ff0e 	bl	800200a <lcd_send_string>
		lcd_send_cmd(0x80 | 0x54);
 80011ee:	20d4      	movs	r0, #212	; 0xd4
 80011f0:	f000 fe5a 	bl	8001ea8 <lcd_send_cmd>
		lcd_send_string(" Path Solver        ");
 80011f4:	4827      	ldr	r0, [pc, #156]	; (8001294 <Mainmenu+0x200>)
 80011f6:	f000 ff08 	bl	800200a <lcd_send_string>
		break;
 80011fa:	e031      	b.n	8001260 <Mainmenu+0x1cc>
	case 7:
		lcd_send_cmd(0x80 | 0x00);
 80011fc:	2080      	movs	r0, #128	; 0x80
 80011fe:	f000 fe53 	bl	8001ea8 <lcd_send_cmd>
		lcd_send_string(" Line Detect show   ");
 8001202:	4825      	ldr	r0, [pc, #148]	; (8001298 <Mainmenu+0x204>)
 8001204:	f000 ff01 	bl	800200a <lcd_send_string>
		lcd_send_cmd(0x80 | 0x40);
 8001208:	20c0      	movs	r0, #192	; 0xc0
 800120a:	f000 fe4d 	bl	8001ea8 <lcd_send_cmd>
		lcd_send_string(" Read RFID Card     ");
 800120e:	481f      	ldr	r0, [pc, #124]	; (800128c <Mainmenu+0x1f8>)
 8001210:	f000 fefb 	bl	800200a <lcd_send_string>
		lcd_send_cmd(0x80 | 0x14);
 8001214:	2094      	movs	r0, #148	; 0x94
 8001216:	f000 fe47 	bl	8001ea8 <lcd_send_cmd>
		lcd_send_string(">Wifi Connect       ");
 800121a:	4821      	ldr	r0, [pc, #132]	; (80012a0 <Mainmenu+0x20c>)
 800121c:	f000 fef5 	bl	800200a <lcd_send_string>
		lcd_send_cmd(0x80 | 0x54);
 8001220:	20d4      	movs	r0, #212	; 0xd4
 8001222:	f000 fe41 	bl	8001ea8 <lcd_send_cmd>
		lcd_send_string(" Path Solver        ");
 8001226:	481b      	ldr	r0, [pc, #108]	; (8001294 <Mainmenu+0x200>)
 8001228:	f000 feef 	bl	800200a <lcd_send_string>
		break;
 800122c:	e018      	b.n	8001260 <Mainmenu+0x1cc>
	case 8:
		lcd_send_cmd(0x80 | 0x00);
 800122e:	2080      	movs	r0, #128	; 0x80
 8001230:	f000 fe3a 	bl	8001ea8 <lcd_send_cmd>
		lcd_send_string(" Line Detect show   ");
 8001234:	4818      	ldr	r0, [pc, #96]	; (8001298 <Mainmenu+0x204>)
 8001236:	f000 fee8 	bl	800200a <lcd_send_string>
		lcd_send_cmd(0x80 | 0x40);
 800123a:	20c0      	movs	r0, #192	; 0xc0
 800123c:	f000 fe34 	bl	8001ea8 <lcd_send_cmd>
		lcd_send_string(" Read RFID Card     ");
 8001240:	4812      	ldr	r0, [pc, #72]	; (800128c <Mainmenu+0x1f8>)
 8001242:	f000 fee2 	bl	800200a <lcd_send_string>
		lcd_send_cmd(0x80 | 0x14);
 8001246:	2094      	movs	r0, #148	; 0x94
 8001248:	f000 fe2e 	bl	8001ea8 <lcd_send_cmd>
		lcd_send_string(" Wifi Connect       ");
 800124c:	4810      	ldr	r0, [pc, #64]	; (8001290 <Mainmenu+0x1fc>)
 800124e:	f000 fedc 	bl	800200a <lcd_send_string>
		lcd_send_cmd(0x80 | 0x54);
 8001252:	20d4      	movs	r0, #212	; 0xd4
 8001254:	f000 fe28 	bl	8001ea8 <lcd_send_cmd>
		lcd_send_string(">Path Solver        ");
 8001258:	4812      	ldr	r0, [pc, #72]	; (80012a4 <Mainmenu+0x210>)
 800125a:	f000 fed6 	bl	800200a <lcd_send_string>
		break;
 800125e:	bf00      	nop
	}
}
 8001260:	bf00      	nop
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	0800f628 	.word	0x0800f628
 800126c:	0800f640 	.word	0x0800f640
 8001270:	0800f658 	.word	0x0800f658
 8001274:	0800f670 	.word	0x0800f670
 8001278:	0800f688 	.word	0x0800f688
 800127c:	0800f6a0 	.word	0x0800f6a0
 8001280:	0800f6b8 	.word	0x0800f6b8
 8001284:	0800f6d0 	.word	0x0800f6d0
 8001288:	0800f6e8 	.word	0x0800f6e8
 800128c:	0800f700 	.word	0x0800f700
 8001290:	0800f718 	.word	0x0800f718
 8001294:	0800f730 	.word	0x0800f730
 8001298:	0800f748 	.word	0x0800f748
 800129c:	0800f760 	.word	0x0800f760
 80012a0:	0800f778 	.word	0x0800f778
 80012a4:	0800f790 	.word	0x0800f790

080012a8 <PID_menu>:

static void PID_menu(uint8_t line) {
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	71fb      	strb	r3, [r7, #7]

	switch (line) {
 80012b2:	79fb      	ldrb	r3, [r7, #7]
 80012b4:	3b01      	subs	r3, #1
 80012b6:	2b03      	cmp	r3, #3
 80012b8:	f200 80f4 	bhi.w	80014a4 <PID_menu+0x1fc>
 80012bc:	a201      	add	r2, pc, #4	; (adr r2, 80012c4 <PID_menu+0x1c>)
 80012be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012c2:	bf00      	nop
 80012c4:	080012d5 	.word	0x080012d5
 80012c8:	08001349 	.word	0x08001349
 80012cc:	080013bd 	.word	0x080013bd
 80012d0:	08001431 	.word	0x08001431
	case 1:
		sprintf(kp_str, ">Kp = %.2f         ", Kp);
 80012d4:	4b75      	ldr	r3, [pc, #468]	; (80014ac <PID_menu+0x204>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff f93d 	bl	8000558 <__aeabi_f2d>
 80012de:	4602      	mov	r2, r0
 80012e0:	460b      	mov	r3, r1
 80012e2:	4973      	ldr	r1, [pc, #460]	; (80014b0 <PID_menu+0x208>)
 80012e4:	4873      	ldr	r0, [pc, #460]	; (80014b4 <PID_menu+0x20c>)
 80012e6:	f00a fb19 	bl	800b91c <siprintf>
		lcd_send_cmd(0x80 | 0x00);
 80012ea:	2080      	movs	r0, #128	; 0x80
 80012ec:	f000 fddc 	bl	8001ea8 <lcd_send_cmd>
		lcd_send_string(kp_str);
 80012f0:	4870      	ldr	r0, [pc, #448]	; (80014b4 <PID_menu+0x20c>)
 80012f2:	f000 fe8a 	bl	800200a <lcd_send_string>
		sprintf(ki_str, " Ki = %.2f         ", Ki);
 80012f6:	4b70      	ldr	r3, [pc, #448]	; (80014b8 <PID_menu+0x210>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff f92c 	bl	8000558 <__aeabi_f2d>
 8001300:	4602      	mov	r2, r0
 8001302:	460b      	mov	r3, r1
 8001304:	496d      	ldr	r1, [pc, #436]	; (80014bc <PID_menu+0x214>)
 8001306:	486e      	ldr	r0, [pc, #440]	; (80014c0 <PID_menu+0x218>)
 8001308:	f00a fb08 	bl	800b91c <siprintf>
		lcd_send_cmd(0x80 | 0x40);
 800130c:	20c0      	movs	r0, #192	; 0xc0
 800130e:	f000 fdcb 	bl	8001ea8 <lcd_send_cmd>
		lcd_send_string(ki_str);
 8001312:	486b      	ldr	r0, [pc, #428]	; (80014c0 <PID_menu+0x218>)
 8001314:	f000 fe79 	bl	800200a <lcd_send_string>
		sprintf(kd_str, " Kd = %.2f         ", Kd);
 8001318:	4b6a      	ldr	r3, [pc, #424]	; (80014c4 <PID_menu+0x21c>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff f91b 	bl	8000558 <__aeabi_f2d>
 8001322:	4602      	mov	r2, r0
 8001324:	460b      	mov	r3, r1
 8001326:	4968      	ldr	r1, [pc, #416]	; (80014c8 <PID_menu+0x220>)
 8001328:	4868      	ldr	r0, [pc, #416]	; (80014cc <PID_menu+0x224>)
 800132a:	f00a faf7 	bl	800b91c <siprintf>
		lcd_send_cmd(0x80 | 0x14);
 800132e:	2094      	movs	r0, #148	; 0x94
 8001330:	f000 fdba 	bl	8001ea8 <lcd_send_cmd>
		lcd_send_string(kd_str);
 8001334:	4865      	ldr	r0, [pc, #404]	; (80014cc <PID_menu+0x224>)
 8001336:	f000 fe68 	bl	800200a <lcd_send_string>
		lcd_send_cmd(0x80 | 0x54);
 800133a:	20d4      	movs	r0, #212	; 0xd4
 800133c:	f000 fdb4 	bl	8001ea8 <lcd_send_cmd>
		lcd_send_string(" Return to main menu");
 8001340:	4863      	ldr	r0, [pc, #396]	; (80014d0 <PID_menu+0x228>)
 8001342:	f000 fe62 	bl	800200a <lcd_send_string>
		break;
 8001346:	e0ad      	b.n	80014a4 <PID_menu+0x1fc>
	case 2:
		sprintf(kp_str, " Kp = %.2f         ", Kp);
 8001348:	4b58      	ldr	r3, [pc, #352]	; (80014ac <PID_menu+0x204>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff f903 	bl	8000558 <__aeabi_f2d>
 8001352:	4602      	mov	r2, r0
 8001354:	460b      	mov	r3, r1
 8001356:	495f      	ldr	r1, [pc, #380]	; (80014d4 <PID_menu+0x22c>)
 8001358:	4856      	ldr	r0, [pc, #344]	; (80014b4 <PID_menu+0x20c>)
 800135a:	f00a fadf 	bl	800b91c <siprintf>
		lcd_send_cmd(0x80 | 0x00);
 800135e:	2080      	movs	r0, #128	; 0x80
 8001360:	f000 fda2 	bl	8001ea8 <lcd_send_cmd>
		lcd_send_string(kp_str);
 8001364:	4853      	ldr	r0, [pc, #332]	; (80014b4 <PID_menu+0x20c>)
 8001366:	f000 fe50 	bl	800200a <lcd_send_string>
		sprintf(ki_str, ">Ki = %.2f         ", Ki);
 800136a:	4b53      	ldr	r3, [pc, #332]	; (80014b8 <PID_menu+0x210>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff f8f2 	bl	8000558 <__aeabi_f2d>
 8001374:	4602      	mov	r2, r0
 8001376:	460b      	mov	r3, r1
 8001378:	4957      	ldr	r1, [pc, #348]	; (80014d8 <PID_menu+0x230>)
 800137a:	4851      	ldr	r0, [pc, #324]	; (80014c0 <PID_menu+0x218>)
 800137c:	f00a face 	bl	800b91c <siprintf>
		lcd_send_cmd(0x80 | 0x40);
 8001380:	20c0      	movs	r0, #192	; 0xc0
 8001382:	f000 fd91 	bl	8001ea8 <lcd_send_cmd>
		lcd_send_string(ki_str);
 8001386:	484e      	ldr	r0, [pc, #312]	; (80014c0 <PID_menu+0x218>)
 8001388:	f000 fe3f 	bl	800200a <lcd_send_string>
		sprintf(kd_str, " Kd = %.2f         ", Kd);
 800138c:	4b4d      	ldr	r3, [pc, #308]	; (80014c4 <PID_menu+0x21c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff f8e1 	bl	8000558 <__aeabi_f2d>
 8001396:	4602      	mov	r2, r0
 8001398:	460b      	mov	r3, r1
 800139a:	494b      	ldr	r1, [pc, #300]	; (80014c8 <PID_menu+0x220>)
 800139c:	484b      	ldr	r0, [pc, #300]	; (80014cc <PID_menu+0x224>)
 800139e:	f00a fabd 	bl	800b91c <siprintf>
		lcd_send_cmd(0x80 | 0x14);
 80013a2:	2094      	movs	r0, #148	; 0x94
 80013a4:	f000 fd80 	bl	8001ea8 <lcd_send_cmd>
		lcd_send_string(kd_str);
 80013a8:	4848      	ldr	r0, [pc, #288]	; (80014cc <PID_menu+0x224>)
 80013aa:	f000 fe2e 	bl	800200a <lcd_send_string>
		lcd_send_cmd(0x80 | 0x54);
 80013ae:	20d4      	movs	r0, #212	; 0xd4
 80013b0:	f000 fd7a 	bl	8001ea8 <lcd_send_cmd>
		lcd_send_string(" Return to main menu");
 80013b4:	4846      	ldr	r0, [pc, #280]	; (80014d0 <PID_menu+0x228>)
 80013b6:	f000 fe28 	bl	800200a <lcd_send_string>
		break;
 80013ba:	e073      	b.n	80014a4 <PID_menu+0x1fc>
	case 3:
		sprintf(kp_str, " Kp = %.2f         ", Kp);
 80013bc:	4b3b      	ldr	r3, [pc, #236]	; (80014ac <PID_menu+0x204>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff f8c9 	bl	8000558 <__aeabi_f2d>
 80013c6:	4602      	mov	r2, r0
 80013c8:	460b      	mov	r3, r1
 80013ca:	4942      	ldr	r1, [pc, #264]	; (80014d4 <PID_menu+0x22c>)
 80013cc:	4839      	ldr	r0, [pc, #228]	; (80014b4 <PID_menu+0x20c>)
 80013ce:	f00a faa5 	bl	800b91c <siprintf>
		lcd_send_cmd(0x80 | 0x00);
 80013d2:	2080      	movs	r0, #128	; 0x80
 80013d4:	f000 fd68 	bl	8001ea8 <lcd_send_cmd>
		lcd_send_string(kp_str);
 80013d8:	4836      	ldr	r0, [pc, #216]	; (80014b4 <PID_menu+0x20c>)
 80013da:	f000 fe16 	bl	800200a <lcd_send_string>
		sprintf(ki_str, " Ki = %.2f         ", Ki);
 80013de:	4b36      	ldr	r3, [pc, #216]	; (80014b8 <PID_menu+0x210>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff f8b8 	bl	8000558 <__aeabi_f2d>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	4933      	ldr	r1, [pc, #204]	; (80014bc <PID_menu+0x214>)
 80013ee:	4834      	ldr	r0, [pc, #208]	; (80014c0 <PID_menu+0x218>)
 80013f0:	f00a fa94 	bl	800b91c <siprintf>
		lcd_send_cmd(0x80 | 0x40);
 80013f4:	20c0      	movs	r0, #192	; 0xc0
 80013f6:	f000 fd57 	bl	8001ea8 <lcd_send_cmd>
		lcd_send_string(ki_str);
 80013fa:	4831      	ldr	r0, [pc, #196]	; (80014c0 <PID_menu+0x218>)
 80013fc:	f000 fe05 	bl	800200a <lcd_send_string>
		sprintf(kd_str, ">Kd = %.2f         ", Kd);
 8001400:	4b30      	ldr	r3, [pc, #192]	; (80014c4 <PID_menu+0x21c>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff f8a7 	bl	8000558 <__aeabi_f2d>
 800140a:	4602      	mov	r2, r0
 800140c:	460b      	mov	r3, r1
 800140e:	4933      	ldr	r1, [pc, #204]	; (80014dc <PID_menu+0x234>)
 8001410:	482e      	ldr	r0, [pc, #184]	; (80014cc <PID_menu+0x224>)
 8001412:	f00a fa83 	bl	800b91c <siprintf>
		lcd_send_cmd(0x80 | 0x14);
 8001416:	2094      	movs	r0, #148	; 0x94
 8001418:	f000 fd46 	bl	8001ea8 <lcd_send_cmd>
		lcd_send_string(kd_str);
 800141c:	482b      	ldr	r0, [pc, #172]	; (80014cc <PID_menu+0x224>)
 800141e:	f000 fdf4 	bl	800200a <lcd_send_string>
		lcd_send_cmd(0x80 | 0x54);
 8001422:	20d4      	movs	r0, #212	; 0xd4
 8001424:	f000 fd40 	bl	8001ea8 <lcd_send_cmd>
		lcd_send_string(" Return to main menu");
 8001428:	4829      	ldr	r0, [pc, #164]	; (80014d0 <PID_menu+0x228>)
 800142a:	f000 fdee 	bl	800200a <lcd_send_string>
		break;
 800142e:	e039      	b.n	80014a4 <PID_menu+0x1fc>
	case 4:
		sprintf(kp_str, " Kp = %.2f         ", Kp);
 8001430:	4b1e      	ldr	r3, [pc, #120]	; (80014ac <PID_menu+0x204>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff f88f 	bl	8000558 <__aeabi_f2d>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	4925      	ldr	r1, [pc, #148]	; (80014d4 <PID_menu+0x22c>)
 8001440:	481c      	ldr	r0, [pc, #112]	; (80014b4 <PID_menu+0x20c>)
 8001442:	f00a fa6b 	bl	800b91c <siprintf>
		lcd_send_cmd(0x80 | 0x00);
 8001446:	2080      	movs	r0, #128	; 0x80
 8001448:	f000 fd2e 	bl	8001ea8 <lcd_send_cmd>
		lcd_send_string(kp_str);
 800144c:	4819      	ldr	r0, [pc, #100]	; (80014b4 <PID_menu+0x20c>)
 800144e:	f000 fddc 	bl	800200a <lcd_send_string>
		sprintf(ki_str, " Ki = %.2f         ", Ki);
 8001452:	4b19      	ldr	r3, [pc, #100]	; (80014b8 <PID_menu+0x210>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff f87e 	bl	8000558 <__aeabi_f2d>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	4916      	ldr	r1, [pc, #88]	; (80014bc <PID_menu+0x214>)
 8001462:	4817      	ldr	r0, [pc, #92]	; (80014c0 <PID_menu+0x218>)
 8001464:	f00a fa5a 	bl	800b91c <siprintf>
		lcd_send_cmd(0x80 | 0x40);
 8001468:	20c0      	movs	r0, #192	; 0xc0
 800146a:	f000 fd1d 	bl	8001ea8 <lcd_send_cmd>
		lcd_send_string(ki_str);
 800146e:	4814      	ldr	r0, [pc, #80]	; (80014c0 <PID_menu+0x218>)
 8001470:	f000 fdcb 	bl	800200a <lcd_send_string>
		sprintf(kd_str, " Kd = %.2f         ", Kd);
 8001474:	4b13      	ldr	r3, [pc, #76]	; (80014c4 <PID_menu+0x21c>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff f86d 	bl	8000558 <__aeabi_f2d>
 800147e:	4602      	mov	r2, r0
 8001480:	460b      	mov	r3, r1
 8001482:	4911      	ldr	r1, [pc, #68]	; (80014c8 <PID_menu+0x220>)
 8001484:	4811      	ldr	r0, [pc, #68]	; (80014cc <PID_menu+0x224>)
 8001486:	f00a fa49 	bl	800b91c <siprintf>
		lcd_send_cmd(0x80 | 0x14);
 800148a:	2094      	movs	r0, #148	; 0x94
 800148c:	f000 fd0c 	bl	8001ea8 <lcd_send_cmd>
		lcd_send_string(kd_str);
 8001490:	480e      	ldr	r0, [pc, #56]	; (80014cc <PID_menu+0x224>)
 8001492:	f000 fdba 	bl	800200a <lcd_send_string>
		lcd_send_cmd(0x80 | 0x54);
 8001496:	20d4      	movs	r0, #212	; 0xd4
 8001498:	f000 fd06 	bl	8001ea8 <lcd_send_cmd>
		lcd_send_string(">Return to main menu");
 800149c:	4810      	ldr	r0, [pc, #64]	; (80014e0 <PID_menu+0x238>)
 800149e:	f000 fdb4 	bl	800200a <lcd_send_string>
		break;
 80014a2:	bf00      	nop
	}
}
 80014a4:	bf00      	nop
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	2000001c 	.word	0x2000001c
 80014b0:	0800f7a8 	.word	0x0800f7a8
 80014b4:	20000308 	.word	0x20000308
 80014b8:	20000280 	.word	0x20000280
 80014bc:	0800f7bc 	.word	0x0800f7bc
 80014c0:	200002bc 	.word	0x200002bc
 80014c4:	20000020 	.word	0x20000020
 80014c8:	0800f7d0 	.word	0x0800f7d0
 80014cc:	200002e8 	.word	0x200002e8
 80014d0:	0800f7e4 	.word	0x0800f7e4
 80014d4:	0800f7fc 	.word	0x0800f7fc
 80014d8:	0800f810 	.word	0x0800f810
 80014dc:	0800f824 	.word	0x0800f824
 80014e0:	0800f838 	.word	0x0800f838

080014e4 <Speed_menu>:
static void Speed_menu(uint8_t line) {
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	71fb      	strb	r3, [r7, #7]
	switch (line) {
 80014ee:	79fb      	ldrb	r3, [r7, #7]
 80014f0:	2b03      	cmp	r3, #3
 80014f2:	d04c      	beq.n	800158e <Speed_menu+0xaa>
 80014f4:	2b03      	cmp	r3, #3
 80014f6:	dc6d      	bgt.n	80015d4 <Speed_menu+0xf0>
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d002      	beq.n	8001502 <Speed_menu+0x1e>
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d023      	beq.n	8001548 <Speed_menu+0x64>
		lcd_send_string(Right_str);
		lcd_send_cmd(0x80 | 0x14);
		lcd_send_string(">Return to main menu");
		break;
	}
}
 8001500:	e068      	b.n	80015d4 <Speed_menu+0xf0>
		sprintf(Left_str, ">Left Eng = %d", Left);
 8001502:	4b36      	ldr	r3, [pc, #216]	; (80015dc <Speed_menu+0xf8>)
 8001504:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001508:	461a      	mov	r2, r3
 800150a:	4935      	ldr	r1, [pc, #212]	; (80015e0 <Speed_menu+0xfc>)
 800150c:	4835      	ldr	r0, [pc, #212]	; (80015e4 <Speed_menu+0x100>)
 800150e:	f00a fa05 	bl	800b91c <siprintf>
		lcd_send_cmd(0x80 | 0x00);
 8001512:	2080      	movs	r0, #128	; 0x80
 8001514:	f000 fcc8 	bl	8001ea8 <lcd_send_cmd>
		lcd_send_string(Left_str);
 8001518:	4832      	ldr	r0, [pc, #200]	; (80015e4 <Speed_menu+0x100>)
 800151a:	f000 fd76 	bl	800200a <lcd_send_string>
		sprintf(Right_str, " Right Eng = %d", Right);
 800151e:	4b32      	ldr	r3, [pc, #200]	; (80015e8 <Speed_menu+0x104>)
 8001520:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001524:	461a      	mov	r2, r3
 8001526:	4931      	ldr	r1, [pc, #196]	; (80015ec <Speed_menu+0x108>)
 8001528:	4831      	ldr	r0, [pc, #196]	; (80015f0 <Speed_menu+0x10c>)
 800152a:	f00a f9f7 	bl	800b91c <siprintf>
		lcd_send_cmd(0x80 | 0x40);
 800152e:	20c0      	movs	r0, #192	; 0xc0
 8001530:	f000 fcba 	bl	8001ea8 <lcd_send_cmd>
		lcd_send_string(Right_str);
 8001534:	482e      	ldr	r0, [pc, #184]	; (80015f0 <Speed_menu+0x10c>)
 8001536:	f000 fd68 	bl	800200a <lcd_send_string>
		lcd_send_cmd(0x80 | 0x14);
 800153a:	2094      	movs	r0, #148	; 0x94
 800153c:	f000 fcb4 	bl	8001ea8 <lcd_send_cmd>
		lcd_send_string(" Return to main menu");
 8001540:	482c      	ldr	r0, [pc, #176]	; (80015f4 <Speed_menu+0x110>)
 8001542:	f000 fd62 	bl	800200a <lcd_send_string>
		break;
 8001546:	e045      	b.n	80015d4 <Speed_menu+0xf0>
		sprintf(Left_str, " Left Eng = %d", Left);
 8001548:	4b24      	ldr	r3, [pc, #144]	; (80015dc <Speed_menu+0xf8>)
 800154a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800154e:	461a      	mov	r2, r3
 8001550:	4929      	ldr	r1, [pc, #164]	; (80015f8 <Speed_menu+0x114>)
 8001552:	4824      	ldr	r0, [pc, #144]	; (80015e4 <Speed_menu+0x100>)
 8001554:	f00a f9e2 	bl	800b91c <siprintf>
		lcd_send_cmd(0x80 | 0x00);
 8001558:	2080      	movs	r0, #128	; 0x80
 800155a:	f000 fca5 	bl	8001ea8 <lcd_send_cmd>
		lcd_send_string(Left_str);
 800155e:	4821      	ldr	r0, [pc, #132]	; (80015e4 <Speed_menu+0x100>)
 8001560:	f000 fd53 	bl	800200a <lcd_send_string>
		sprintf(Right_str, ">Right Eng = %d", Right);
 8001564:	4b20      	ldr	r3, [pc, #128]	; (80015e8 <Speed_menu+0x104>)
 8001566:	f9b3 3000 	ldrsh.w	r3, [r3]
 800156a:	461a      	mov	r2, r3
 800156c:	4923      	ldr	r1, [pc, #140]	; (80015fc <Speed_menu+0x118>)
 800156e:	4820      	ldr	r0, [pc, #128]	; (80015f0 <Speed_menu+0x10c>)
 8001570:	f00a f9d4 	bl	800b91c <siprintf>
		lcd_send_cmd(0x80 | 0x40);
 8001574:	20c0      	movs	r0, #192	; 0xc0
 8001576:	f000 fc97 	bl	8001ea8 <lcd_send_cmd>
		lcd_send_string(Right_str);
 800157a:	481d      	ldr	r0, [pc, #116]	; (80015f0 <Speed_menu+0x10c>)
 800157c:	f000 fd45 	bl	800200a <lcd_send_string>
		lcd_send_cmd(0x80 | 0x14);
 8001580:	2094      	movs	r0, #148	; 0x94
 8001582:	f000 fc91 	bl	8001ea8 <lcd_send_cmd>
		lcd_send_string(" Return to main menu");
 8001586:	481b      	ldr	r0, [pc, #108]	; (80015f4 <Speed_menu+0x110>)
 8001588:	f000 fd3f 	bl	800200a <lcd_send_string>
		break;
 800158c:	e022      	b.n	80015d4 <Speed_menu+0xf0>
		sprintf(Left_str, " Left Eng = %d", Left);
 800158e:	4b13      	ldr	r3, [pc, #76]	; (80015dc <Speed_menu+0xf8>)
 8001590:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001594:	461a      	mov	r2, r3
 8001596:	4918      	ldr	r1, [pc, #96]	; (80015f8 <Speed_menu+0x114>)
 8001598:	4812      	ldr	r0, [pc, #72]	; (80015e4 <Speed_menu+0x100>)
 800159a:	f00a f9bf 	bl	800b91c <siprintf>
		lcd_send_cmd(0x80 | 0x00);
 800159e:	2080      	movs	r0, #128	; 0x80
 80015a0:	f000 fc82 	bl	8001ea8 <lcd_send_cmd>
		lcd_send_string(Left_str);
 80015a4:	480f      	ldr	r0, [pc, #60]	; (80015e4 <Speed_menu+0x100>)
 80015a6:	f000 fd30 	bl	800200a <lcd_send_string>
		sprintf(Right_str, " Right Eng = %d", Right);
 80015aa:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <Speed_menu+0x104>)
 80015ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015b0:	461a      	mov	r2, r3
 80015b2:	490e      	ldr	r1, [pc, #56]	; (80015ec <Speed_menu+0x108>)
 80015b4:	480e      	ldr	r0, [pc, #56]	; (80015f0 <Speed_menu+0x10c>)
 80015b6:	f00a f9b1 	bl	800b91c <siprintf>
		lcd_send_cmd(0x80 | 0x40);
 80015ba:	20c0      	movs	r0, #192	; 0xc0
 80015bc:	f000 fc74 	bl	8001ea8 <lcd_send_cmd>
		lcd_send_string(Right_str);
 80015c0:	480b      	ldr	r0, [pc, #44]	; (80015f0 <Speed_menu+0x10c>)
 80015c2:	f000 fd22 	bl	800200a <lcd_send_string>
		lcd_send_cmd(0x80 | 0x14);
 80015c6:	2094      	movs	r0, #148	; 0x94
 80015c8:	f000 fc6e 	bl	8001ea8 <lcd_send_cmd>
		lcd_send_string(">Return to main menu");
 80015cc:	480c      	ldr	r0, [pc, #48]	; (8001600 <Speed_menu+0x11c>)
 80015ce:	f000 fd1c 	bl	800200a <lcd_send_string>
		break;
 80015d2:	bf00      	nop
}
 80015d4:	bf00      	nop
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	2000000c 	.word	0x2000000c
 80015e0:	0800f850 	.word	0x0800f850
 80015e4:	200002a8 	.word	0x200002a8
 80015e8:	2000000e 	.word	0x2000000e
 80015ec:	0800f860 	.word	0x0800f860
 80015f0:	20000294 	.word	0x20000294
 80015f4:	0800f7e4 	.word	0x0800f7e4
 80015f8:	0800f870 	.word	0x0800f870
 80015fc:	0800f880 	.word	0x0800f880
 8001600:	0800f838 	.word	0x0800f838

08001604 <Color_Studying_process>:

static void Color_Studying_process(void) {
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
#ifdef	READ_WHITE_LINE
	uint16_t WhiteLine[] = {0 ,0 ,0 ,0, 0, 0};
 800160a:	463b      	mov	r3, r7
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
#endif
#ifdef READ_BLACK_LINE
	uint16_t BlackLine[] = {0, 0, 0, 0, 0, 0};
#endif
	Color_Read = 1;
 8001614:	4b40      	ldr	r3, [pc, #256]	; (8001718 <Color_Studying_process+0x114>)
 8001616:	2201      	movs	r2, #1
 8001618:	701a      	strb	r2, [r3, #0]
	lcd_send_cmd(0x80 | 0x00);
 800161a:	2080      	movs	r0, #128	; 0x80
 800161c:	f000 fc44 	bl	8001ea8 <lcd_send_cmd>
	lcd_send_string("Out line read      ");
 8001620:	483e      	ldr	r0, [pc, #248]	; (800171c <Color_Studying_process+0x118>)
 8001622:	f000 fcf2 	bl	800200a <lcd_send_string>
	lcd_send_cmd(0x80 | 0x40);
 8001626:	20c0      	movs	r0, #192	; 0xc0
 8001628:	f000 fc3e 	bl	8001ea8 <lcd_send_cmd>
	lcd_send_string("Press B to begin   ");
 800162c:	483c      	ldr	r0, [pc, #240]	; (8001720 <Color_Studying_process+0x11c>)
 800162e:	f000 fcec 	bl	800200a <lcd_send_string>
	while(Color_Read){
 8001632:	e058      	b.n	80016e6 <Color_Studying_process+0xe2>
		if (HAL_GPIO_ReadPin(ButtonB_GPIO_Port, ButtonB_Pin) == 0)
 8001634:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001638:	483a      	ldr	r0, [pc, #232]	; (8001724 <Color_Studying_process+0x120>)
 800163a:	f005 ffbd 	bl	80075b8 <HAL_GPIO_ReadPin>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d150      	bne.n	80016e6 <Color_Studying_process+0xe2>
		{
			while (HAL_GPIO_ReadPin(ButtonB_GPIO_Port, ButtonB_Pin) == 0)
 8001644:	e002      	b.n	800164c <Color_Studying_process+0x48>
			{
				HAL_Delay(50);
 8001646:	2032      	movs	r0, #50	; 0x32
 8001648:	f004 fbb4 	bl	8005db4 <HAL_Delay>
			while (HAL_GPIO_ReadPin(ButtonB_GPIO_Port, ButtonB_Pin) == 0)
 800164c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001650:	4834      	ldr	r0, [pc, #208]	; (8001724 <Color_Studying_process+0x120>)
 8001652:	f005 ffb1 	bl	80075b8 <HAL_GPIO_ReadPin>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d0f4      	beq.n	8001646 <Color_Studying_process+0x42>
			}
			for(int i=0;i<ADC_Sample_Times;i++)
 800165c:	2300      	movs	r3, #0
 800165e:	617b      	str	r3, [r7, #20]
 8001660:	e023      	b.n	80016aa <Color_Studying_process+0xa6>
			{
				for(int i=0;i<Number_of_Sensors;i++)
 8001662:	2300      	movs	r3, #0
 8001664:	613b      	str	r3, [r7, #16]
 8001666:	e01a      	b.n	800169e <Color_Studying_process+0x9a>
				{
#ifdef READ_WHITE_LINE
					if(Sensor_ADC_Value[i] > WhiteLine[i])
 8001668:	4a2f      	ldr	r2, [pc, #188]	; (8001728 <Color_Studying_process+0x124>)
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	f107 0118 	add.w	r1, r7, #24
 8001678:	440b      	add	r3, r1
 800167a:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800167e:	429a      	cmp	r2, r3
 8001680:	d90a      	bls.n	8001698 <Color_Studying_process+0x94>
					{
						WhiteLine[i] = Sensor_ADC_Value[i];
 8001682:	4a29      	ldr	r2, [pc, #164]	; (8001728 <Color_Studying_process+0x124>)
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	f107 0118 	add.w	r1, r7, #24
 8001692:	440b      	add	r3, r1
 8001694:	f823 2c18 	strh.w	r2, [r3, #-24]
				for(int i=0;i<Number_of_Sensors;i++)
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	3301      	adds	r3, #1
 800169c:	613b      	str	r3, [r7, #16]
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	2b05      	cmp	r3, #5
 80016a2:	dde1      	ble.n	8001668 <Color_Studying_process+0x64>
			for(int i=0;i<ADC_Sample_Times;i++)
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	3301      	adds	r3, #1
 80016a8:	617b      	str	r3, [r7, #20]
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80016b0:	4293      	cmp	r3, r2
 80016b2:	ddd6      	ble.n	8001662 <Color_Studying_process+0x5e>
					}
#endif
				}
			}
#ifdef READ_WHITE_LINE
			for(int i=0;i<Number_of_Sensors;i++)
 80016b4:	2300      	movs	r3, #0
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	e00f      	b.n	80016da <Color_Studying_process+0xd6>
			{
				Sensor_Threshold[i]=WhiteLine[i] - 10;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	f107 0218 	add.w	r2, r7, #24
 80016c2:	4413      	add	r3, r2
 80016c4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80016c8:	3b0a      	subs	r3, #10
 80016ca:	b299      	uxth	r1, r3
 80016cc:	4a17      	ldr	r2, [pc, #92]	; (800172c <Color_Studying_process+0x128>)
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int i=0;i<Number_of_Sensors;i++)
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	3301      	adds	r3, #1
 80016d8:	60fb      	str	r3, [r7, #12]
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2b05      	cmp	r3, #5
 80016de:	ddec      	ble.n	80016ba <Color_Studying_process+0xb6>
				}
				else
					Sensor_Threshold[i]=BlackLine[i];
			}
#endif
			Color_Read = 0;
 80016e0:	4b0d      	ldr	r3, [pc, #52]	; (8001718 <Color_Studying_process+0x114>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	701a      	strb	r2, [r3, #0]
	while(Color_Read){
 80016e6:	4b0c      	ldr	r3, [pc, #48]	; (8001718 <Color_Studying_process+0x114>)
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d1a2      	bne.n	8001634 <Color_Studying_process+0x30>
		}
	}
	lcd_clear();
 80016ee:	f000 fc3b 	bl	8001f68 <lcd_clear>
	lcd_send_cmd(0x80 | 0x00);
 80016f2:	2080      	movs	r0, #128	; 0x80
 80016f4:	f000 fbd8 	bl	8001ea8 <lcd_send_cmd>
	lcd_send_string("Done               ");
 80016f8:	480d      	ldr	r0, [pc, #52]	; (8001730 <Color_Studying_process+0x12c>)
 80016fa:	f000 fc86 	bl	800200a <lcd_send_string>
	HAL_Delay(200);
 80016fe:	20c8      	movs	r0, #200	; 0xc8
 8001700:	f004 fb58 	bl	8005db4 <HAL_Delay>
	Menu_type = Main_menu;
 8001704:	4b0b      	ldr	r3, [pc, #44]	; (8001734 <Color_Studying_process+0x130>)
 8001706:	2201      	movs	r2, #1
 8001708:	701a      	strb	r2, [r3, #0]
	lcd_clear();
 800170a:	f000 fc2d 	bl	8001f68 <lcd_clear>
}
 800170e:	bf00      	nop
 8001710:	3718      	adds	r7, #24
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20000002 	.word	0x20000002
 800171c:	0800f890 	.word	0x0800f890
 8001720:	0800f8a4 	.word	0x0800f8a4
 8001724:	40020800 	.word	0x40020800
 8001728:	200004a8 	.word	0x200004a8
 800172c:	20000010 	.word	0x20000010
 8001730:	0800f8b8 	.word	0x0800f8b8
 8001734:	20000001 	.word	0x20000001

08001738 <LineDetect_show>:

static void LineDetect_show(void) {
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x80 | 0x00);
 800173e:	2080      	movs	r0, #128	; 0x80
 8001740:	f000 fbb2 	bl	8001ea8 <lcd_send_cmd>
	lcd_send_string("Line Detect        ");
 8001744:	4859      	ldr	r0, [pc, #356]	; (80018ac <LineDetect_show+0x174>)
 8001746:	f000 fc60 	bl	800200a <lcd_send_string>
	lcd_send_cmd(0x80 | 0x40);
 800174a:	20c0      	movs	r0, #192	; 0xc0
 800174c:	f000 fbac 	bl	8001ea8 <lcd_send_cmd>
	lcd_send_string("Press C for cancel ");
 8001750:	4857      	ldr	r0, [pc, #348]	; (80018b0 <LineDetect_show+0x178>)
 8001752:	f000 fc5a 	bl	800200a <lcd_send_string>
	while (cancel_menu) {
 8001756:	e09d      	b.n	8001894 <LineDetect_show+0x15c>
		for (int8_t i = 0; i < 6; i++) {
 8001758:	2300      	movs	r3, #0
 800175a:	71fb      	strb	r3, [r7, #7]
 800175c:	e095      	b.n	800188a <LineDetect_show+0x152>
#ifdef READ_WHITE_LINE
			if (Sensor_ADC_Value[0] < Sensor_Threshold[0]) {
 800175e:	4b55      	ldr	r3, [pc, #340]	; (80018b4 <LineDetect_show+0x17c>)
 8001760:	881a      	ldrh	r2, [r3, #0]
 8001762:	4b55      	ldr	r3, [pc, #340]	; (80018b8 <LineDetect_show+0x180>)
 8001764:	881b      	ldrh	r3, [r3, #0]
 8001766:	429a      	cmp	r2, r3
 8001768:	d205      	bcs.n	8001776 <LineDetect_show+0x3e>
				lcd_send_cmd(0x80 | 0x16);
 800176a:	2096      	movs	r0, #150	; 0x96
 800176c:	f000 fb9c 	bl	8001ea8 <lcd_send_cmd>
				lcd_send_string("1");
 8001770:	4852      	ldr	r0, [pc, #328]	; (80018bc <LineDetect_show+0x184>)
 8001772:	f000 fc4a 	bl	800200a <lcd_send_string>
			}
			if (Sensor_ADC_Value[1] < Sensor_Threshold[1]) {
 8001776:	4b4f      	ldr	r3, [pc, #316]	; (80018b4 <LineDetect_show+0x17c>)
 8001778:	885a      	ldrh	r2, [r3, #2]
 800177a:	4b4f      	ldr	r3, [pc, #316]	; (80018b8 <LineDetect_show+0x180>)
 800177c:	885b      	ldrh	r3, [r3, #2]
 800177e:	429a      	cmp	r2, r3
 8001780:	d205      	bcs.n	800178e <LineDetect_show+0x56>
				lcd_send_cmd(0x80 | 0x18);
 8001782:	2098      	movs	r0, #152	; 0x98
 8001784:	f000 fb90 	bl	8001ea8 <lcd_send_cmd>
				lcd_send_string("1");
 8001788:	484c      	ldr	r0, [pc, #304]	; (80018bc <LineDetect_show+0x184>)
 800178a:	f000 fc3e 	bl	800200a <lcd_send_string>
			}
			if (Sensor_ADC_Value[2] < Sensor_Threshold[2]) {
 800178e:	4b49      	ldr	r3, [pc, #292]	; (80018b4 <LineDetect_show+0x17c>)
 8001790:	889a      	ldrh	r2, [r3, #4]
 8001792:	4b49      	ldr	r3, [pc, #292]	; (80018b8 <LineDetect_show+0x180>)
 8001794:	889b      	ldrh	r3, [r3, #4]
 8001796:	429a      	cmp	r2, r3
 8001798:	d205      	bcs.n	80017a6 <LineDetect_show+0x6e>
				lcd_send_cmd(0x80 | 0x1A);
 800179a:	209a      	movs	r0, #154	; 0x9a
 800179c:	f000 fb84 	bl	8001ea8 <lcd_send_cmd>
				lcd_send_string("1");
 80017a0:	4846      	ldr	r0, [pc, #280]	; (80018bc <LineDetect_show+0x184>)
 80017a2:	f000 fc32 	bl	800200a <lcd_send_string>
			}
			if (Sensor_ADC_Value[3] < Sensor_Threshold[3]) {
 80017a6:	4b43      	ldr	r3, [pc, #268]	; (80018b4 <LineDetect_show+0x17c>)
 80017a8:	88da      	ldrh	r2, [r3, #6]
 80017aa:	4b43      	ldr	r3, [pc, #268]	; (80018b8 <LineDetect_show+0x180>)
 80017ac:	88db      	ldrh	r3, [r3, #6]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d205      	bcs.n	80017be <LineDetect_show+0x86>
				lcd_send_cmd(0x80 | 0x1C);
 80017b2:	209c      	movs	r0, #156	; 0x9c
 80017b4:	f000 fb78 	bl	8001ea8 <lcd_send_cmd>
				lcd_send_string("1");
 80017b8:	4840      	ldr	r0, [pc, #256]	; (80018bc <LineDetect_show+0x184>)
 80017ba:	f000 fc26 	bl	800200a <lcd_send_string>
			}
			if (Sensor_ADC_Value[4] < Sensor_Threshold[4]) {
 80017be:	4b3d      	ldr	r3, [pc, #244]	; (80018b4 <LineDetect_show+0x17c>)
 80017c0:	891a      	ldrh	r2, [r3, #8]
 80017c2:	4b3d      	ldr	r3, [pc, #244]	; (80018b8 <LineDetect_show+0x180>)
 80017c4:	891b      	ldrh	r3, [r3, #8]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d205      	bcs.n	80017d6 <LineDetect_show+0x9e>
				lcd_send_cmd(0x80 | 0x1E);
 80017ca:	209e      	movs	r0, #158	; 0x9e
 80017cc:	f000 fb6c 	bl	8001ea8 <lcd_send_cmd>
				lcd_send_string("1");
 80017d0:	483a      	ldr	r0, [pc, #232]	; (80018bc <LineDetect_show+0x184>)
 80017d2:	f000 fc1a 	bl	800200a <lcd_send_string>
			}
			if (Sensor_ADC_Value[5] < Sensor_Threshold[5]) {
 80017d6:	4b37      	ldr	r3, [pc, #220]	; (80018b4 <LineDetect_show+0x17c>)
 80017d8:	895a      	ldrh	r2, [r3, #10]
 80017da:	4b37      	ldr	r3, [pc, #220]	; (80018b8 <LineDetect_show+0x180>)
 80017dc:	895b      	ldrh	r3, [r3, #10]
 80017de:	429a      	cmp	r2, r3
 80017e0:	d205      	bcs.n	80017ee <LineDetect_show+0xb6>
				lcd_send_cmd(0x80 | 0x20);
 80017e2:	20a0      	movs	r0, #160	; 0xa0
 80017e4:	f000 fb60 	bl	8001ea8 <lcd_send_cmd>
				lcd_send_string("1");
 80017e8:	4834      	ldr	r0, [pc, #208]	; (80018bc <LineDetect_show+0x184>)
 80017ea:	f000 fc0e 	bl	800200a <lcd_send_string>
			}
			if (Sensor_ADC_Value[0] >= Sensor_Threshold[0]) {
 80017ee:	4b31      	ldr	r3, [pc, #196]	; (80018b4 <LineDetect_show+0x17c>)
 80017f0:	881a      	ldrh	r2, [r3, #0]
 80017f2:	4b31      	ldr	r3, [pc, #196]	; (80018b8 <LineDetect_show+0x180>)
 80017f4:	881b      	ldrh	r3, [r3, #0]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d305      	bcc.n	8001806 <LineDetect_show+0xce>
				lcd_send_cmd(0x80 | 0x16);
 80017fa:	2096      	movs	r0, #150	; 0x96
 80017fc:	f000 fb54 	bl	8001ea8 <lcd_send_cmd>
				lcd_send_string(" ");
 8001800:	482f      	ldr	r0, [pc, #188]	; (80018c0 <LineDetect_show+0x188>)
 8001802:	f000 fc02 	bl	800200a <lcd_send_string>
			}
			if (Sensor_ADC_Value[1] >= Sensor_Threshold[1]) {
 8001806:	4b2b      	ldr	r3, [pc, #172]	; (80018b4 <LineDetect_show+0x17c>)
 8001808:	885a      	ldrh	r2, [r3, #2]
 800180a:	4b2b      	ldr	r3, [pc, #172]	; (80018b8 <LineDetect_show+0x180>)
 800180c:	885b      	ldrh	r3, [r3, #2]
 800180e:	429a      	cmp	r2, r3
 8001810:	d305      	bcc.n	800181e <LineDetect_show+0xe6>
				lcd_send_cmd(0x80 | 0x18);
 8001812:	2098      	movs	r0, #152	; 0x98
 8001814:	f000 fb48 	bl	8001ea8 <lcd_send_cmd>
				lcd_send_string(" ");
 8001818:	4829      	ldr	r0, [pc, #164]	; (80018c0 <LineDetect_show+0x188>)
 800181a:	f000 fbf6 	bl	800200a <lcd_send_string>
			}
			if (Sensor_ADC_Value[2] >= Sensor_Threshold[2]) {
 800181e:	4b25      	ldr	r3, [pc, #148]	; (80018b4 <LineDetect_show+0x17c>)
 8001820:	889a      	ldrh	r2, [r3, #4]
 8001822:	4b25      	ldr	r3, [pc, #148]	; (80018b8 <LineDetect_show+0x180>)
 8001824:	889b      	ldrh	r3, [r3, #4]
 8001826:	429a      	cmp	r2, r3
 8001828:	d305      	bcc.n	8001836 <LineDetect_show+0xfe>
				lcd_send_cmd(0x80 | 0x1A);
 800182a:	209a      	movs	r0, #154	; 0x9a
 800182c:	f000 fb3c 	bl	8001ea8 <lcd_send_cmd>
				lcd_send_string(" ");
 8001830:	4823      	ldr	r0, [pc, #140]	; (80018c0 <LineDetect_show+0x188>)
 8001832:	f000 fbea 	bl	800200a <lcd_send_string>
			}
			if (Sensor_ADC_Value[3] >= Sensor_Threshold[3]) {
 8001836:	4b1f      	ldr	r3, [pc, #124]	; (80018b4 <LineDetect_show+0x17c>)
 8001838:	88da      	ldrh	r2, [r3, #6]
 800183a:	4b1f      	ldr	r3, [pc, #124]	; (80018b8 <LineDetect_show+0x180>)
 800183c:	88db      	ldrh	r3, [r3, #6]
 800183e:	429a      	cmp	r2, r3
 8001840:	d305      	bcc.n	800184e <LineDetect_show+0x116>
				lcd_send_cmd(0x80 | 0x1C);
 8001842:	209c      	movs	r0, #156	; 0x9c
 8001844:	f000 fb30 	bl	8001ea8 <lcd_send_cmd>
				lcd_send_string(" ");
 8001848:	481d      	ldr	r0, [pc, #116]	; (80018c0 <LineDetect_show+0x188>)
 800184a:	f000 fbde 	bl	800200a <lcd_send_string>
			}
			if (Sensor_ADC_Value[4] >= Sensor_Threshold[4]) {
 800184e:	4b19      	ldr	r3, [pc, #100]	; (80018b4 <LineDetect_show+0x17c>)
 8001850:	891a      	ldrh	r2, [r3, #8]
 8001852:	4b19      	ldr	r3, [pc, #100]	; (80018b8 <LineDetect_show+0x180>)
 8001854:	891b      	ldrh	r3, [r3, #8]
 8001856:	429a      	cmp	r2, r3
 8001858:	d305      	bcc.n	8001866 <LineDetect_show+0x12e>
				lcd_send_cmd(0x80 | 0x1E);
 800185a:	209e      	movs	r0, #158	; 0x9e
 800185c:	f000 fb24 	bl	8001ea8 <lcd_send_cmd>
				lcd_send_string(" ");
 8001860:	4817      	ldr	r0, [pc, #92]	; (80018c0 <LineDetect_show+0x188>)
 8001862:	f000 fbd2 	bl	800200a <lcd_send_string>
			}
			if (Sensor_ADC_Value[5] >= Sensor_Threshold[5]) {
 8001866:	4b13      	ldr	r3, [pc, #76]	; (80018b4 <LineDetect_show+0x17c>)
 8001868:	895a      	ldrh	r2, [r3, #10]
 800186a:	4b13      	ldr	r3, [pc, #76]	; (80018b8 <LineDetect_show+0x180>)
 800186c:	895b      	ldrh	r3, [r3, #10]
 800186e:	429a      	cmp	r2, r3
 8001870:	d305      	bcc.n	800187e <LineDetect_show+0x146>
				lcd_send_cmd(0x80 | 0x20);
 8001872:	20a0      	movs	r0, #160	; 0xa0
 8001874:	f000 fb18 	bl	8001ea8 <lcd_send_cmd>
				lcd_send_string(" ");
 8001878:	4811      	ldr	r0, [pc, #68]	; (80018c0 <LineDetect_show+0x188>)
 800187a:	f000 fbc6 	bl	800200a <lcd_send_string>
		for (int8_t i = 0; i < 6; i++) {
 800187e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001882:	b2db      	uxtb	r3, r3
 8001884:	3301      	adds	r3, #1
 8001886:	b2db      	uxtb	r3, r3
 8001888:	71fb      	strb	r3, [r7, #7]
 800188a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188e:	2b05      	cmp	r3, #5
 8001890:	f77f af65 	ble.w	800175e <LineDetect_show+0x26>
	while (cancel_menu) {
 8001894:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <LineDetect_show+0x18c>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	2b00      	cmp	r3, #0
 800189a:	f47f af5d 	bne.w	8001758 <LineDetect_show+0x20>
				lcd_send_string(" ");
			}
#endif
		}
	}
	lcd_clear();
 800189e:	f000 fb63 	bl	8001f68 <lcd_clear>
}
 80018a2:	bf00      	nop
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	0800f8cc 	.word	0x0800f8cc
 80018b0:	0800f8e0 	.word	0x0800f8e0
 80018b4:	200004a8 	.word	0x200004a8
 80018b8:	20000010 	.word	0x20000010
 80018bc:	0800f8f4 	.word	0x0800f8f4
 80018c0:	0800f8f8 	.word	0x0800f8f8
 80018c4:	20000005 	.word	0x20000005

080018c8 <Saving_Process>:

void Saving_Process(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b088      	sub	sp, #32
 80018cc:	af00      	add	r7, sp, #0
	unsigned char Card_ID[5];
	char Card_Buffer_Str[4];
	char concat_Buff[20];
	cancel_reading_card = 1;
 80018ce:	4b48      	ldr	r3, [pc, #288]	; (80019f0 <Saving_Process+0x128>)
 80018d0:	2201      	movs	r2, #1
 80018d2:	701a      	strb	r2, [r3, #0]
	memset(concat_Buff,0,sizeof(concat_Buff));
 80018d4:	463b      	mov	r3, r7
 80018d6:	2214      	movs	r2, #20
 80018d8:	2100      	movs	r1, #0
 80018da:	4618      	mov	r0, r3
 80018dc:	f009 fbac 	bl	800b038 <memset>
	memset(Card_Buffer_Str,0,sizeof(Card_Buffer_Str));
 80018e0:	f107 0314 	add.w	r3, r7, #20
 80018e4:	2204      	movs	r2, #4
 80018e6:	2100      	movs	r1, #0
 80018e8:	4618      	mov	r0, r3
 80018ea:	f009 fba5 	bl	800b038 <memset>
	MFRC522_Init();
 80018ee:	f003 fcfc 	bl	80052ea <MFRC522_Init>
	lcd_send_cmd(0x80 | 0x00);
 80018f2:	2080      	movs	r0, #128	; 0x80
 80018f4:	f000 fad8 	bl	8001ea8 <lcd_send_cmd>
	lcd_send_string("RFID Card Read     ");
 80018f8:	483e      	ldr	r0, [pc, #248]	; (80019f4 <Saving_Process+0x12c>)
 80018fa:	f000 fb86 	bl	800200a <lcd_send_string>
	lcd_send_cmd(0x80 | 0x40);
 80018fe:	20c0      	movs	r0, #192	; 0xc0
 8001900:	f000 fad2 	bl	8001ea8 <lcd_send_cmd>
	lcd_send_string("Press C for cancel ");
 8001904:	483c      	ldr	r0, [pc, #240]	; (80019f8 <Saving_Process+0x130>)
 8001906:	f000 fb80 	bl	800200a <lcd_send_string>
	while(cancel_reading_card)
 800190a:	e066      	b.n	80019da <Saving_Process+0x112>
	{
		if(MFRC522_Check(Card_ID) == MI_OK)
 800190c:	f107 0318 	add.w	r3, r7, #24
 8001910:	4618      	mov	r0, r3
 8001912:	f003 fb1f 	bl	8004f54 <MFRC522_Check>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d15e      	bne.n	80019da <Saving_Process+0x112>
		{
			sprintf(Card_Buffer_Str,"%02x-",Card_ID[0]);
 800191c:	7e3b      	ldrb	r3, [r7, #24]
 800191e:	461a      	mov	r2, r3
 8001920:	f107 0314 	add.w	r3, r7, #20
 8001924:	4935      	ldr	r1, [pc, #212]	; (80019fc <Saving_Process+0x134>)
 8001926:	4618      	mov	r0, r3
 8001928:	f009 fff8 	bl	800b91c <siprintf>
			strcat(concat_Buff,Card_Buffer_Str);
 800192c:	f107 0214 	add.w	r2, r7, #20
 8001930:	463b      	mov	r3, r7
 8001932:	4611      	mov	r1, r2
 8001934:	4618      	mov	r0, r3
 8001936:	f00a f811 	bl	800b95c <strcat>
			sprintf(Card_Buffer_Str,"%02x-",Card_ID[1]);
 800193a:	7e7b      	ldrb	r3, [r7, #25]
 800193c:	461a      	mov	r2, r3
 800193e:	f107 0314 	add.w	r3, r7, #20
 8001942:	492e      	ldr	r1, [pc, #184]	; (80019fc <Saving_Process+0x134>)
 8001944:	4618      	mov	r0, r3
 8001946:	f009 ffe9 	bl	800b91c <siprintf>
			strcat(concat_Buff,Card_Buffer_Str);
 800194a:	f107 0214 	add.w	r2, r7, #20
 800194e:	463b      	mov	r3, r7
 8001950:	4611      	mov	r1, r2
 8001952:	4618      	mov	r0, r3
 8001954:	f00a f802 	bl	800b95c <strcat>
			sprintf(Card_Buffer_Str,"%02x-",Card_ID[2]);
 8001958:	7ebb      	ldrb	r3, [r7, #26]
 800195a:	461a      	mov	r2, r3
 800195c:	f107 0314 	add.w	r3, r7, #20
 8001960:	4926      	ldr	r1, [pc, #152]	; (80019fc <Saving_Process+0x134>)
 8001962:	4618      	mov	r0, r3
 8001964:	f009 ffda 	bl	800b91c <siprintf>
			strcat(concat_Buff,Card_Buffer_Str);
 8001968:	f107 0214 	add.w	r2, r7, #20
 800196c:	463b      	mov	r3, r7
 800196e:	4611      	mov	r1, r2
 8001970:	4618      	mov	r0, r3
 8001972:	f009 fff3 	bl	800b95c <strcat>
			sprintf(Card_Buffer_Str,"%02x-",Card_ID[3]);
 8001976:	7efb      	ldrb	r3, [r7, #27]
 8001978:	461a      	mov	r2, r3
 800197a:	f107 0314 	add.w	r3, r7, #20
 800197e:	491f      	ldr	r1, [pc, #124]	; (80019fc <Saving_Process+0x134>)
 8001980:	4618      	mov	r0, r3
 8001982:	f009 ffcb 	bl	800b91c <siprintf>
			strcat(concat_Buff,Card_Buffer_Str);
 8001986:	f107 0214 	add.w	r2, r7, #20
 800198a:	463b      	mov	r3, r7
 800198c:	4611      	mov	r1, r2
 800198e:	4618      	mov	r0, r3
 8001990:	f009 ffe4 	bl	800b95c <strcat>
			sprintf(Card_Buffer_Str,"%02x ",Card_ID[4]);
 8001994:	7f3b      	ldrb	r3, [r7, #28]
 8001996:	461a      	mov	r2, r3
 8001998:	f107 0314 	add.w	r3, r7, #20
 800199c:	4918      	ldr	r1, [pc, #96]	; (8001a00 <Saving_Process+0x138>)
 800199e:	4618      	mov	r0, r3
 80019a0:	f009 ffbc 	bl	800b91c <siprintf>
			strcat(concat_Buff,Card_Buffer_Str);
 80019a4:	f107 0214 	add.w	r2, r7, #20
 80019a8:	463b      	mov	r3, r7
 80019aa:	4611      	mov	r1, r2
 80019ac:	4618      	mov	r0, r3
 80019ae:	f009 ffd5 	bl	800b95c <strcat>
			if(concat_Buff == "d1-b0-af-21-ef")
 80019b2:	463b      	mov	r3, r7
 80019b4:	4a13      	ldr	r2, [pc, #76]	; (8001a04 <Saving_Process+0x13c>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d106      	bne.n	80019c8 <Saving_Process+0x100>
			{
				lcd_send_cmd(0x80 | 0x14);
 80019ba:	2094      	movs	r0, #148	; 0x94
 80019bc:	f000 fa74 	bl	8001ea8 <lcd_send_cmd>
				lcd_send_string("83-ee-85-1a-f2");
 80019c0:	4811      	ldr	r0, [pc, #68]	; (8001a08 <Saving_Process+0x140>)
 80019c2:	f000 fb22 	bl	800200a <lcd_send_string>
 80019c6:	e006      	b.n	80019d6 <Saving_Process+0x10e>
			}
			else
			{
				lcd_send_cmd(0x80 | 0x14);
 80019c8:	2094      	movs	r0, #148	; 0x94
 80019ca:	f000 fa6d 	bl	8001ea8 <lcd_send_cmd>
				lcd_send_string(concat_Buff);
 80019ce:	463b      	mov	r3, r7
 80019d0:	4618      	mov	r0, r3
 80019d2:	f000 fb1a 	bl	800200a <lcd_send_string>
			}
			MFRC522_Reset();
 80019d6:	f003 fcac 	bl	8005332 <MFRC522_Reset>
	while(cancel_reading_card)
 80019da:	4b05      	ldr	r3, [pc, #20]	; (80019f0 <Saving_Process+0x128>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d194      	bne.n	800190c <Saving_Process+0x44>
		}
	}
	lcd_clear();
 80019e2:	f000 fac1 	bl	8001f68 <lcd_clear>
}
 80019e6:	bf00      	nop
 80019e8:	3720      	adds	r7, #32
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	2000000b 	.word	0x2000000b
 80019f4:	0800f8fc 	.word	0x0800f8fc
 80019f8:	0800f8e0 	.word	0x0800f8e0
 80019fc:	0800f910 	.word	0x0800f910
 8001a00:	0800f918 	.word	0x0800f918
 8001a04:	0800f920 	.word	0x0800f920
 8001a08:	0800f930 	.word	0x0800f930

08001a0c <Wifi_Connect_establish>:

static void Wifi_Connect_establish(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0

		Menu_type = Main_menu;
 8001a10:	4b03      	ldr	r3, [pc, #12]	; (8001a20 <Wifi_Connect_establish+0x14>)
 8001a12:	2201      	movs	r2, #1
 8001a14:	701a      	strb	r2, [r3, #0]
		lcd_clear();
 8001a16:	f000 faa7 	bl	8001f68 <lcd_clear>
}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	20000001 	.word	0x20000001

08001a24 <Path_Solver>:
static void Path_Solver(uint8_t line)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	71fb      	strb	r3, [r7, #7]
	switch (line) {
 8001a2e:	79fb      	ldrb	r3, [r7, #7]
 8001a30:	3b01      	subs	r3, #1
 8001a32:	2b03      	cmp	r3, #3
 8001a34:	f200 80b0 	bhi.w	8001b98 <Path_Solver+0x174>
 8001a38:	a201      	add	r2, pc, #4	; (adr r2, 8001a40 <Path_Solver+0x1c>)
 8001a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a3e:	bf00      	nop
 8001a40:	08001a51 	.word	0x08001a51
 8001a44:	08001aa3 	.word	0x08001aa3
 8001a48:	08001af5 	.word	0x08001af5
 8001a4c:	08001b47 	.word	0x08001b47
		case 1:
			sprintf(First_str, ">First Point: %2d  ", First_point);
 8001a50:	4b53      	ldr	r3, [pc, #332]	; (8001ba0 <Path_Solver+0x17c>)
 8001a52:	f993 3000 	ldrsb.w	r3, [r3]
 8001a56:	461a      	mov	r2, r3
 8001a58:	4952      	ldr	r1, [pc, #328]	; (8001ba4 <Path_Solver+0x180>)
 8001a5a:	4853      	ldr	r0, [pc, #332]	; (8001ba8 <Path_Solver+0x184>)
 8001a5c:	f009 ff5e 	bl	800b91c <siprintf>
			lcd_send_cmd(0x80 | 0x00);
 8001a60:	2080      	movs	r0, #128	; 0x80
 8001a62:	f000 fa21 	bl	8001ea8 <lcd_send_cmd>
			lcd_send_string(First_str);
 8001a66:	4850      	ldr	r0, [pc, #320]	; (8001ba8 <Path_Solver+0x184>)
 8001a68:	f000 facf 	bl	800200a <lcd_send_string>
			sprintf(Last_str, " Last Point: %2d    ", Last_point);
 8001a6c:	4b4f      	ldr	r3, [pc, #316]	; (8001bac <Path_Solver+0x188>)
 8001a6e:	f993 3000 	ldrsb.w	r3, [r3]
 8001a72:	461a      	mov	r2, r3
 8001a74:	494e      	ldr	r1, [pc, #312]	; (8001bb0 <Path_Solver+0x18c>)
 8001a76:	484f      	ldr	r0, [pc, #316]	; (8001bb4 <Path_Solver+0x190>)
 8001a78:	f009 ff50 	bl	800b91c <siprintf>
			lcd_send_cmd(0x80 | 0x40);
 8001a7c:	20c0      	movs	r0, #192	; 0xc0
 8001a7e:	f000 fa13 	bl	8001ea8 <lcd_send_cmd>
			lcd_send_string(Last_str);
 8001a82:	484c      	ldr	r0, [pc, #304]	; (8001bb4 <Path_Solver+0x190>)
 8001a84:	f000 fac1 	bl	800200a <lcd_send_string>
			lcd_send_cmd(0x80 | 0x14);
 8001a88:	2094      	movs	r0, #148	; 0x94
 8001a8a:	f000 fa0d 	bl	8001ea8 <lcd_send_cmd>
			lcd_send_string(" Submit             ");
 8001a8e:	484a      	ldr	r0, [pc, #296]	; (8001bb8 <Path_Solver+0x194>)
 8001a90:	f000 fabb 	bl	800200a <lcd_send_string>
			lcd_send_cmd(0x80 | 0x54);
 8001a94:	20d4      	movs	r0, #212	; 0xd4
 8001a96:	f000 fa07 	bl	8001ea8 <lcd_send_cmd>
			lcd_send_string(" Return to main menu");
 8001a9a:	4848      	ldr	r0, [pc, #288]	; (8001bbc <Path_Solver+0x198>)
 8001a9c:	f000 fab5 	bl	800200a <lcd_send_string>
			break;
 8001aa0:	e07a      	b.n	8001b98 <Path_Solver+0x174>
		case 2:
			sprintf(First_str, " First Point: %2d  ", First_point);
 8001aa2:	4b3f      	ldr	r3, [pc, #252]	; (8001ba0 <Path_Solver+0x17c>)
 8001aa4:	f993 3000 	ldrsb.w	r3, [r3]
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	4945      	ldr	r1, [pc, #276]	; (8001bc0 <Path_Solver+0x19c>)
 8001aac:	483e      	ldr	r0, [pc, #248]	; (8001ba8 <Path_Solver+0x184>)
 8001aae:	f009 ff35 	bl	800b91c <siprintf>
			lcd_send_cmd(0x80 | 0x00);
 8001ab2:	2080      	movs	r0, #128	; 0x80
 8001ab4:	f000 f9f8 	bl	8001ea8 <lcd_send_cmd>
			lcd_send_string(First_str);
 8001ab8:	483b      	ldr	r0, [pc, #236]	; (8001ba8 <Path_Solver+0x184>)
 8001aba:	f000 faa6 	bl	800200a <lcd_send_string>
			sprintf(Last_str, ">Last Point: %2d    ", Last_point);
 8001abe:	4b3b      	ldr	r3, [pc, #236]	; (8001bac <Path_Solver+0x188>)
 8001ac0:	f993 3000 	ldrsb.w	r3, [r3]
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	493f      	ldr	r1, [pc, #252]	; (8001bc4 <Path_Solver+0x1a0>)
 8001ac8:	483a      	ldr	r0, [pc, #232]	; (8001bb4 <Path_Solver+0x190>)
 8001aca:	f009 ff27 	bl	800b91c <siprintf>
			lcd_send_cmd(0x80 | 0x40);
 8001ace:	20c0      	movs	r0, #192	; 0xc0
 8001ad0:	f000 f9ea 	bl	8001ea8 <lcd_send_cmd>
			lcd_send_string(Last_str);
 8001ad4:	4837      	ldr	r0, [pc, #220]	; (8001bb4 <Path_Solver+0x190>)
 8001ad6:	f000 fa98 	bl	800200a <lcd_send_string>
			lcd_send_cmd(0x80 | 0x14);
 8001ada:	2094      	movs	r0, #148	; 0x94
 8001adc:	f000 f9e4 	bl	8001ea8 <lcd_send_cmd>
			lcd_send_string(" Submit             ");
 8001ae0:	4835      	ldr	r0, [pc, #212]	; (8001bb8 <Path_Solver+0x194>)
 8001ae2:	f000 fa92 	bl	800200a <lcd_send_string>
			lcd_send_cmd(0x80 | 0x54);
 8001ae6:	20d4      	movs	r0, #212	; 0xd4
 8001ae8:	f000 f9de 	bl	8001ea8 <lcd_send_cmd>
			lcd_send_string(" Return to main menu");
 8001aec:	4833      	ldr	r0, [pc, #204]	; (8001bbc <Path_Solver+0x198>)
 8001aee:	f000 fa8c 	bl	800200a <lcd_send_string>
			break;
 8001af2:	e051      	b.n	8001b98 <Path_Solver+0x174>
		case 3:
			sprintf(First_str, " First Point: %2d  ", First_point);
 8001af4:	4b2a      	ldr	r3, [pc, #168]	; (8001ba0 <Path_Solver+0x17c>)
 8001af6:	f993 3000 	ldrsb.w	r3, [r3]
 8001afa:	461a      	mov	r2, r3
 8001afc:	4930      	ldr	r1, [pc, #192]	; (8001bc0 <Path_Solver+0x19c>)
 8001afe:	482a      	ldr	r0, [pc, #168]	; (8001ba8 <Path_Solver+0x184>)
 8001b00:	f009 ff0c 	bl	800b91c <siprintf>
			lcd_send_cmd(0x80 | 0x00);
 8001b04:	2080      	movs	r0, #128	; 0x80
 8001b06:	f000 f9cf 	bl	8001ea8 <lcd_send_cmd>
			lcd_send_string(First_str);
 8001b0a:	4827      	ldr	r0, [pc, #156]	; (8001ba8 <Path_Solver+0x184>)
 8001b0c:	f000 fa7d 	bl	800200a <lcd_send_string>
			sprintf(Last_str, " Last Point: %2d    ", Last_point);
 8001b10:	4b26      	ldr	r3, [pc, #152]	; (8001bac <Path_Solver+0x188>)
 8001b12:	f993 3000 	ldrsb.w	r3, [r3]
 8001b16:	461a      	mov	r2, r3
 8001b18:	4925      	ldr	r1, [pc, #148]	; (8001bb0 <Path_Solver+0x18c>)
 8001b1a:	4826      	ldr	r0, [pc, #152]	; (8001bb4 <Path_Solver+0x190>)
 8001b1c:	f009 fefe 	bl	800b91c <siprintf>
			lcd_send_cmd(0x80 | 0x40);
 8001b20:	20c0      	movs	r0, #192	; 0xc0
 8001b22:	f000 f9c1 	bl	8001ea8 <lcd_send_cmd>
			lcd_send_string(Last_str);
 8001b26:	4823      	ldr	r0, [pc, #140]	; (8001bb4 <Path_Solver+0x190>)
 8001b28:	f000 fa6f 	bl	800200a <lcd_send_string>
			lcd_send_cmd(0x80 | 0x14);
 8001b2c:	2094      	movs	r0, #148	; 0x94
 8001b2e:	f000 f9bb 	bl	8001ea8 <lcd_send_cmd>
			lcd_send_string(">Submit             ");
 8001b32:	4825      	ldr	r0, [pc, #148]	; (8001bc8 <Path_Solver+0x1a4>)
 8001b34:	f000 fa69 	bl	800200a <lcd_send_string>
			lcd_send_cmd(0x80 | 0x54);
 8001b38:	20d4      	movs	r0, #212	; 0xd4
 8001b3a:	f000 f9b5 	bl	8001ea8 <lcd_send_cmd>
			lcd_send_string(" Return to main menu");
 8001b3e:	481f      	ldr	r0, [pc, #124]	; (8001bbc <Path_Solver+0x198>)
 8001b40:	f000 fa63 	bl	800200a <lcd_send_string>
			break;
 8001b44:	e028      	b.n	8001b98 <Path_Solver+0x174>
		case 4:
			sprintf(First_str, " First Point: %2d   ", First_point);
 8001b46:	4b16      	ldr	r3, [pc, #88]	; (8001ba0 <Path_Solver+0x17c>)
 8001b48:	f993 3000 	ldrsb.w	r3, [r3]
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	491f      	ldr	r1, [pc, #124]	; (8001bcc <Path_Solver+0x1a8>)
 8001b50:	4815      	ldr	r0, [pc, #84]	; (8001ba8 <Path_Solver+0x184>)
 8001b52:	f009 fee3 	bl	800b91c <siprintf>
			lcd_send_cmd(0x80 | 0x00);
 8001b56:	2080      	movs	r0, #128	; 0x80
 8001b58:	f000 f9a6 	bl	8001ea8 <lcd_send_cmd>
			lcd_send_string(First_str);
 8001b5c:	4812      	ldr	r0, [pc, #72]	; (8001ba8 <Path_Solver+0x184>)
 8001b5e:	f000 fa54 	bl	800200a <lcd_send_string>
			sprintf(Last_str, " Last Point: %2d     ", Last_point);
 8001b62:	4b12      	ldr	r3, [pc, #72]	; (8001bac <Path_Solver+0x188>)
 8001b64:	f993 3000 	ldrsb.w	r3, [r3]
 8001b68:	461a      	mov	r2, r3
 8001b6a:	4919      	ldr	r1, [pc, #100]	; (8001bd0 <Path_Solver+0x1ac>)
 8001b6c:	4811      	ldr	r0, [pc, #68]	; (8001bb4 <Path_Solver+0x190>)
 8001b6e:	f009 fed5 	bl	800b91c <siprintf>
			lcd_send_cmd(0x80 | 0x40);
 8001b72:	20c0      	movs	r0, #192	; 0xc0
 8001b74:	f000 f998 	bl	8001ea8 <lcd_send_cmd>
			lcd_send_string(Last_str);
 8001b78:	480e      	ldr	r0, [pc, #56]	; (8001bb4 <Path_Solver+0x190>)
 8001b7a:	f000 fa46 	bl	800200a <lcd_send_string>
			lcd_send_cmd(0x80 | 0x14);
 8001b7e:	2094      	movs	r0, #148	; 0x94
 8001b80:	f000 f992 	bl	8001ea8 <lcd_send_cmd>
			lcd_send_string(" Submit             ");
 8001b84:	480c      	ldr	r0, [pc, #48]	; (8001bb8 <Path_Solver+0x194>)
 8001b86:	f000 fa40 	bl	800200a <lcd_send_string>
			lcd_send_cmd(0x80 | 0x54);
 8001b8a:	20d4      	movs	r0, #212	; 0xd4
 8001b8c:	f000 f98c 	bl	8001ea8 <lcd_send_cmd>
			lcd_send_string(">Return to main menu");
 8001b90:	4810      	ldr	r0, [pc, #64]	; (8001bd4 <Path_Solver+0x1b0>)
 8001b92:	f000 fa3a 	bl	800200a <lcd_send_string>
			break;
 8001b96:	bf00      	nop
	}
}
 8001b98:	bf00      	nop
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	2000026d 	.word	0x2000026d
 8001ba4:	0800f940 	.word	0x0800f940
 8001ba8:	20000330 	.word	0x20000330
 8001bac:	2000026e 	.word	0x2000026e
 8001bb0:	0800f954 	.word	0x0800f954
 8001bb4:	2000031c 	.word	0x2000031c
 8001bb8:	0800f96c 	.word	0x0800f96c
 8001bbc:	0800f7e4 	.word	0x0800f7e4
 8001bc0:	0800f984 	.word	0x0800f984
 8001bc4:	0800f998 	.word	0x0800f998
 8001bc8:	0800f9b0 	.word	0x0800f9b0
 8001bcc:	0800f9c8 	.word	0x0800f9c8
 8001bd0:	0800f9e0 	.word	0x0800f9e0
 8001bd4:	0800f838 	.word	0x0800f838

08001bd8 <Path_show>:
static void Path_show(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0
	char getPath_str[20];
	GetString(First_point, Last_point, getPath_str);
 8001bde:	4b10      	ldr	r3, [pc, #64]	; (8001c20 <Path_show+0x48>)
 8001be0:	f993 3000 	ldrsb.w	r3, [r3]
 8001be4:	4a0f      	ldr	r2, [pc, #60]	; (8001c24 <Path_show+0x4c>)
 8001be6:	f992 1000 	ldrsb.w	r1, [r2]
 8001bea:	1d3a      	adds	r2, r7, #4
 8001bec:	4618      	mov	r0, r3
 8001bee:	f001 f953 	bl	8002e98 <GetString>
	lcd_send_cmd(0x80 | 0x00);
 8001bf2:	2080      	movs	r0, #128	; 0x80
 8001bf4:	f000 f958 	bl	8001ea8 <lcd_send_cmd>
	lcd_send_string("Path direction      ");
 8001bf8:	480b      	ldr	r0, [pc, #44]	; (8001c28 <Path_show+0x50>)
 8001bfa:	f000 fa06 	bl	800200a <lcd_send_string>
	lcd_send_cmd(0x80 | 0x40);
 8001bfe:	20c0      	movs	r0, #192	; 0xc0
 8001c00:	f000 f952 	bl	8001ea8 <lcd_send_cmd>
	lcd_send_string(getPath_str);
 8001c04:	1d3b      	adds	r3, r7, #4
 8001c06:	4618      	mov	r0, r3
 8001c08:	f000 f9ff 	bl	800200a <lcd_send_string>
	lcd_send_cmd(0x80 | 0x14);
 8001c0c:	2094      	movs	r0, #148	; 0x94
 8001c0e:	f000 f94b 	bl	8001ea8 <lcd_send_cmd>
	lcd_send_string("Press C to return   ");
 8001c12:	4806      	ldr	r0, [pc, #24]	; (8001c2c <Path_show+0x54>)
 8001c14:	f000 f9f9 	bl	800200a <lcd_send_string>
}
 8001c18:	bf00      	nop
 8001c1a:	3718      	adds	r7, #24
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	2000026d 	.word	0x2000026d
 8001c24:	2000026e 	.word	0x2000026e
 8001c28:	0800f9f8 	.word	0x0800f9f8
 8001c2c:	0800fa10 	.word	0x0800fa10

08001c30 <executeAction>:
void executeAction(uint8_t line) {
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4603      	mov	r3, r0
 8001c38:	71fb      	strb	r3, [r7, #7]
	switch (line) {
 8001c3a:	79fb      	ldrb	r3, [r7, #7]
 8001c3c:	3b01      	subs	r3, #1
 8001c3e:	2b07      	cmp	r3, #7
 8001c40:	f200 8119 	bhi.w	8001e76 <executeAction+0x246>
 8001c44:	a201      	add	r2, pc, #4	; (adr r2, 8001c4c <executeAction+0x1c>)
 8001c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c4a:	bf00      	nop
 8001c4c:	08001c6d 	.word	0x08001c6d
 8001c50:	08001d05 	.word	0x08001d05
 8001c54:	08001d97 	.word	0x08001d97
 8001c58:	08001e03 	.word	0x08001e03
 8001c5c:	08001e37 	.word	0x08001e37
 8001c60:	08001e53 	.word	0x08001e53
 8001c64:	08001e5f 	.word	0x08001e5f
 8001c68:	08001e6b 	.word	0x08001e6b
	case 1:
		switch (Menu_type) {
 8001c6c:	4b84      	ldr	r3, [pc, #528]	; (8001e80 <executeAction+0x250>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	3b01      	subs	r3, #1
 8001c72:	2b07      	cmp	r3, #7
 8001c74:	d843      	bhi.n	8001cfe <executeAction+0xce>
 8001c76:	a201      	add	r2, pc, #4	; (adr r2, 8001c7c <executeAction+0x4c>)
 8001c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c7c:	08001c9d 	.word	0x08001c9d
 8001c80:	08001cff 	.word	0x08001cff
 8001c84:	08001cab 	.word	0x08001cab
 8001c88:	08001cc7 	.word	0x08001cc7
 8001c8c:	08001cff 	.word	0x08001cff
 8001c90:	08001cff 	.word	0x08001cff
 8001c94:	08001cff 	.word	0x08001cff
 8001c98:	08001ce3 	.word	0x08001ce3
		case Main_menu:
			cancel_running = 1;
 8001c9c:	4b79      	ldr	r3, [pc, #484]	; (8001e84 <executeAction+0x254>)
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	701a      	strb	r2, [r3, #0]
			Menu_type = Running_Process;
 8001ca2:	4b77      	ldr	r3, [pc, #476]	; (8001e80 <executeAction+0x250>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	701a      	strb	r2, [r3, #0]
			break;
 8001ca8:	e029      	b.n	8001cfe <executeAction+0xce>
		case PID_Menu:
			if (Kp_modify_flag == 0) {
 8001caa:	4b77      	ldr	r3, [pc, #476]	; (8001e88 <executeAction+0x258>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d105      	bne.n	8001cbe <executeAction+0x8e>
				Kp_modify_flag = 1;
 8001cb2:	4b75      	ldr	r3, [pc, #468]	; (8001e88 <executeAction+0x258>)
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	701a      	strb	r2, [r3, #0]
				line = 1;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	71fb      	strb	r3, [r7, #7]
			} else {
				Kp_modify_flag = 0;
			}
			break;
 8001cbc:	e01f      	b.n	8001cfe <executeAction+0xce>
				Kp_modify_flag = 0;
 8001cbe:	4b72      	ldr	r3, [pc, #456]	; (8001e88 <executeAction+0x258>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	701a      	strb	r2, [r3, #0]
			break;
 8001cc4:	e01b      	b.n	8001cfe <executeAction+0xce>
		case Engine_menu:
			if (Left_modify_flag == 0) {
 8001cc6:	4b71      	ldr	r3, [pc, #452]	; (8001e8c <executeAction+0x25c>)
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d105      	bne.n	8001cda <executeAction+0xaa>
				Left_modify_flag = 1;
 8001cce:	4b6f      	ldr	r3, [pc, #444]	; (8001e8c <executeAction+0x25c>)
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	701a      	strb	r2, [r3, #0]
				line = 1;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	71fb      	strb	r3, [r7, #7]
			} else {
				Left_modify_flag = 0;
			}
			break;
 8001cd8:	e011      	b.n	8001cfe <executeAction+0xce>
				Left_modify_flag = 0;
 8001cda:	4b6c      	ldr	r3, [pc, #432]	; (8001e8c <executeAction+0x25c>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	701a      	strb	r2, [r3, #0]
			break;
 8001ce0:	e00d      	b.n	8001cfe <executeAction+0xce>
		case Path_solver_menu:
			if (First_point_modify_flag == 0){
 8001ce2:	4b6b      	ldr	r3, [pc, #428]	; (8001e90 <executeAction+0x260>)
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d105      	bne.n	8001cf6 <executeAction+0xc6>
				First_point_modify_flag = 1;
 8001cea:	4b69      	ldr	r3, [pc, #420]	; (8001e90 <executeAction+0x260>)
 8001cec:	2201      	movs	r2, #1
 8001cee:	701a      	strb	r2, [r3, #0]
				line = 1;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	71fb      	strb	r3, [r7, #7]
			}
			else
			{
				First_point_modify_flag = 0;
			}
			break;
 8001cf4:	e002      	b.n	8001cfc <executeAction+0xcc>
				First_point_modify_flag = 0;
 8001cf6:	4b66      	ldr	r3, [pc, #408]	; (8001e90 <executeAction+0x260>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	701a      	strb	r2, [r3, #0]
			break;
 8001cfc:	bf00      	nop
		}

		lcd_clear();
 8001cfe:	f000 f933 	bl	8001f68 <lcd_clear>
		break;
 8001d02:	e0b8      	b.n	8001e76 <executeAction+0x246>

	case 2:
		switch (Menu_type) {
 8001d04:	4b5e      	ldr	r3, [pc, #376]	; (8001e80 <executeAction+0x250>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	3b01      	subs	r3, #1
 8001d0a:	2b07      	cmp	r3, #7
 8001d0c:	d840      	bhi.n	8001d90 <executeAction+0x160>
 8001d0e:	a201      	add	r2, pc, #4	; (adr r2, 8001d14 <executeAction+0xe4>)
 8001d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d14:	08001d35 	.word	0x08001d35
 8001d18:	08001d91 	.word	0x08001d91
 8001d1c:	08001d3d 	.word	0x08001d3d
 8001d20:	08001d59 	.word	0x08001d59
 8001d24:	08001d91 	.word	0x08001d91
 8001d28:	08001d91 	.word	0x08001d91
 8001d2c:	08001d91 	.word	0x08001d91
 8001d30:	08001d75 	.word	0x08001d75
		case Main_menu:
			Menu_type = Color_Processing;
 8001d34:	4b52      	ldr	r3, [pc, #328]	; (8001e80 <executeAction+0x250>)
 8001d36:	2202      	movs	r2, #2
 8001d38:	701a      	strb	r2, [r3, #0]
			break;
 8001d3a:	e029      	b.n	8001d90 <executeAction+0x160>
		case PID_Menu:
			if (Ki_modify_flag == 0) {
 8001d3c:	4b55      	ldr	r3, [pc, #340]	; (8001e94 <executeAction+0x264>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d105      	bne.n	8001d50 <executeAction+0x120>
				Ki_modify_flag = 1;
 8001d44:	4b53      	ldr	r3, [pc, #332]	; (8001e94 <executeAction+0x264>)
 8001d46:	2201      	movs	r2, #1
 8001d48:	701a      	strb	r2, [r3, #0]
				line = 2;
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	71fb      	strb	r3, [r7, #7]
			} else {
				Ki_modify_flag = 0;
			}
			break;
 8001d4e:	e01f      	b.n	8001d90 <executeAction+0x160>
				Ki_modify_flag = 0;
 8001d50:	4b50      	ldr	r3, [pc, #320]	; (8001e94 <executeAction+0x264>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	701a      	strb	r2, [r3, #0]
			break;
 8001d56:	e01b      	b.n	8001d90 <executeAction+0x160>
		case Engine_menu:
			if (Right_modify_flag == 0) {
 8001d58:	4b4f      	ldr	r3, [pc, #316]	; (8001e98 <executeAction+0x268>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d105      	bne.n	8001d6c <executeAction+0x13c>
				Right_modify_flag = 1;
 8001d60:	4b4d      	ldr	r3, [pc, #308]	; (8001e98 <executeAction+0x268>)
 8001d62:	2201      	movs	r2, #1
 8001d64:	701a      	strb	r2, [r3, #0]
				line = 2;
 8001d66:	2302      	movs	r3, #2
 8001d68:	71fb      	strb	r3, [r7, #7]
			} else {
				Right_modify_flag = 0;
			}
			break;
 8001d6a:	e011      	b.n	8001d90 <executeAction+0x160>
				Right_modify_flag = 0;
 8001d6c:	4b4a      	ldr	r3, [pc, #296]	; (8001e98 <executeAction+0x268>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	701a      	strb	r2, [r3, #0]
			break;
 8001d72:	e00d      	b.n	8001d90 <executeAction+0x160>
		case Path_solver_menu:
			if (Last_point_modify_flag == 0) {
 8001d74:	4b49      	ldr	r3, [pc, #292]	; (8001e9c <executeAction+0x26c>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d105      	bne.n	8001d88 <executeAction+0x158>
				Last_point_modify_flag = 1;
 8001d7c:	4b47      	ldr	r3, [pc, #284]	; (8001e9c <executeAction+0x26c>)
 8001d7e:	2201      	movs	r2, #1
 8001d80:	701a      	strb	r2, [r3, #0]
				line = 2;
 8001d82:	2302      	movs	r3, #2
 8001d84:	71fb      	strb	r3, [r7, #7]
			} else {
				Last_point_modify_flag = 0;
			}
			break;
 8001d86:	e002      	b.n	8001d8e <executeAction+0x15e>
				Last_point_modify_flag = 0;
 8001d88:	4b44      	ldr	r3, [pc, #272]	; (8001e9c <executeAction+0x26c>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	701a      	strb	r2, [r3, #0]
			break;
 8001d8e:	bf00      	nop
		}

		lcd_clear();
 8001d90:	f000 f8ea 	bl	8001f68 <lcd_clear>
		break;
 8001d94:	e06f      	b.n	8001e76 <executeAction+0x246>

	case 3:
		switch (Menu_type) {
 8001d96:	4b3a      	ldr	r3, [pc, #232]	; (8001e80 <executeAction+0x250>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	2b07      	cmp	r3, #7
 8001d9e:	d82d      	bhi.n	8001dfc <executeAction+0x1cc>
 8001da0:	a201      	add	r2, pc, #4	; (adr r2, 8001da8 <executeAction+0x178>)
 8001da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001da6:	bf00      	nop
 8001da8:	08001dc9 	.word	0x08001dc9
 8001dac:	08001dfd 	.word	0x08001dfd
 8001db0:	08001dd1 	.word	0x08001dd1
 8001db4:	08001ded 	.word	0x08001ded
 8001db8:	08001dfd 	.word	0x08001dfd
 8001dbc:	08001dfd 	.word	0x08001dfd
 8001dc0:	08001dfd 	.word	0x08001dfd
 8001dc4:	08001df5 	.word	0x08001df5
		case Main_menu:
			Menu_type = PID_Menu;
 8001dc8:	4b2d      	ldr	r3, [pc, #180]	; (8001e80 <executeAction+0x250>)
 8001dca:	2203      	movs	r2, #3
 8001dcc:	701a      	strb	r2, [r3, #0]
			break;
 8001dce:	e015      	b.n	8001dfc <executeAction+0x1cc>
		case PID_Menu:
			if (Kd_modify_flag == 0) {
 8001dd0:	4b33      	ldr	r3, [pc, #204]	; (8001ea0 <executeAction+0x270>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d105      	bne.n	8001de4 <executeAction+0x1b4>
				Kd_modify_flag = 1;
 8001dd8:	4b31      	ldr	r3, [pc, #196]	; (8001ea0 <executeAction+0x270>)
 8001dda:	2201      	movs	r2, #1
 8001ddc:	701a      	strb	r2, [r3, #0]
				line = 3;
 8001dde:	2303      	movs	r3, #3
 8001de0:	71fb      	strb	r3, [r7, #7]
			} else {
				Kd_modify_flag = 0;
			}
			break;
 8001de2:	e00b      	b.n	8001dfc <executeAction+0x1cc>
				Kd_modify_flag = 0;
 8001de4:	4b2e      	ldr	r3, [pc, #184]	; (8001ea0 <executeAction+0x270>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	701a      	strb	r2, [r3, #0]
			break;
 8001dea:	e007      	b.n	8001dfc <executeAction+0x1cc>
		case Engine_menu:
			Menu_type = Main_menu;
 8001dec:	4b24      	ldr	r3, [pc, #144]	; (8001e80 <executeAction+0x250>)
 8001dee:	2201      	movs	r2, #1
 8001df0:	701a      	strb	r2, [r3, #0]
			break;
 8001df2:	e003      	b.n	8001dfc <executeAction+0x1cc>
		case Path_solver_menu:
			Menu_type = Path_show_menu;
 8001df4:	4b22      	ldr	r3, [pc, #136]	; (8001e80 <executeAction+0x250>)
 8001df6:	2209      	movs	r2, #9
 8001df8:	701a      	strb	r2, [r3, #0]
			break;
 8001dfa:	bf00      	nop
		}

		lcd_clear();
 8001dfc:	f000 f8b4 	bl	8001f68 <lcd_clear>
		break;
 8001e00:	e039      	b.n	8001e76 <executeAction+0x246>

	case 4:
		switch (Menu_type) {
 8001e02:	4b1f      	ldr	r3, [pc, #124]	; (8001e80 <executeAction+0x250>)
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	2b08      	cmp	r3, #8
 8001e08:	d00e      	beq.n	8001e28 <executeAction+0x1f8>
 8001e0a:	2b08      	cmp	r3, #8
 8001e0c:	dc10      	bgt.n	8001e30 <executeAction+0x200>
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d002      	beq.n	8001e18 <executeAction+0x1e8>
 8001e12:	2b03      	cmp	r3, #3
 8001e14:	d004      	beq.n	8001e20 <executeAction+0x1f0>
 8001e16:	e00b      	b.n	8001e30 <executeAction+0x200>
		case Main_menu:
			Menu_type = Engine_menu;
 8001e18:	4b19      	ldr	r3, [pc, #100]	; (8001e80 <executeAction+0x250>)
 8001e1a:	2204      	movs	r2, #4
 8001e1c:	701a      	strb	r2, [r3, #0]
			break;
 8001e1e:	e007      	b.n	8001e30 <executeAction+0x200>
		case PID_Menu:
			Menu_type = Main_menu;
 8001e20:	4b17      	ldr	r3, [pc, #92]	; (8001e80 <executeAction+0x250>)
 8001e22:	2201      	movs	r2, #1
 8001e24:	701a      	strb	r2, [r3, #0]
			break;
 8001e26:	e003      	b.n	8001e30 <executeAction+0x200>
		case Path_solver_menu:
			Menu_type = Main_menu;
 8001e28:	4b15      	ldr	r3, [pc, #84]	; (8001e80 <executeAction+0x250>)
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	701a      	strb	r2, [r3, #0]
			break;
 8001e2e:	bf00      	nop
		}
		lcd_clear();
 8001e30:	f000 f89a 	bl	8001f68 <lcd_clear>
		break;
 8001e34:	e01f      	b.n	8001e76 <executeAction+0x246>

	case 5:
		switch (Menu_type) {
 8001e36:	4b12      	ldr	r3, [pc, #72]	; (8001e80 <executeAction+0x250>)
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d106      	bne.n	8001e4c <executeAction+0x21c>
		case Main_menu:
			cancel_menu = 1;
 8001e3e:	4b19      	ldr	r3, [pc, #100]	; (8001ea4 <executeAction+0x274>)
 8001e40:	2201      	movs	r2, #1
 8001e42:	701a      	strb	r2, [r3, #0]
			Menu_type = LineDetect_Show;
 8001e44:	4b0e      	ldr	r3, [pc, #56]	; (8001e80 <executeAction+0x250>)
 8001e46:	2205      	movs	r2, #5
 8001e48:	701a      	strb	r2, [r3, #0]
			break;
 8001e4a:	bf00      	nop
		}
		lcd_clear();
 8001e4c:	f000 f88c 	bl	8001f68 <lcd_clear>
		break;
 8001e50:	e011      	b.n	8001e76 <executeAction+0x246>

	case 6:
		Menu_type = Saving_process;
 8001e52:	4b0b      	ldr	r3, [pc, #44]	; (8001e80 <executeAction+0x250>)
 8001e54:	2207      	movs	r2, #7
 8001e56:	701a      	strb	r2, [r3, #0]
		lcd_clear();
 8001e58:	f000 f886 	bl	8001f68 <lcd_clear>
		break;
 8001e5c:	e00b      	b.n	8001e76 <executeAction+0x246>

	case 7:
		Menu_type = Wifi_connect;
 8001e5e:	4b08      	ldr	r3, [pc, #32]	; (8001e80 <executeAction+0x250>)
 8001e60:	2206      	movs	r2, #6
 8001e62:	701a      	strb	r2, [r3, #0]
		lcd_clear();
 8001e64:	f000 f880 	bl	8001f68 <lcd_clear>
		break;
 8001e68:	e005      	b.n	8001e76 <executeAction+0x246>

	case 8:
		Menu_type = Path_solver_menu;
 8001e6a:	4b05      	ldr	r3, [pc, #20]	; (8001e80 <executeAction+0x250>)
 8001e6c:	2208      	movs	r2, #8
 8001e6e:	701a      	strb	r2, [r3, #0]
		lcd_clear();
 8001e70:	f000 f87a 	bl	8001f68 <lcd_clear>
		break;
 8001e74:	bf00      	nop
	}
}
 8001e76:	bf00      	nop
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20000001 	.word	0x20000001
 8001e84:	20000006 	.word	0x20000006
 8001e88:	20000265 	.word	0x20000265
 8001e8c:	20000268 	.word	0x20000268
 8001e90:	2000026a 	.word	0x2000026a
 8001e94:	20000266 	.word	0x20000266
 8001e98:	20000269 	.word	0x20000269
 8001e9c:	2000026b 	.word	0x2000026b
 8001ea0:	20000267 	.word	0x20000267
 8001ea4:	20000005 	.word	0x20000005

08001ea8 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c3;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b086      	sub	sp, #24
 8001eac:	af02      	add	r7, sp, #8
 8001eae:	4603      	mov	r3, r0
 8001eb0:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8001eb2:	79fb      	ldrb	r3, [r7, #7]
 8001eb4:	f023 030f 	bic.w	r3, r3, #15
 8001eb8:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8001eba:	79fb      	ldrb	r3, [r7, #7]
 8001ebc:	011b      	lsls	r3, r3, #4
 8001ebe:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001ec0:	7bfb      	ldrb	r3, [r7, #15]
 8001ec2:	f043 030c 	orr.w	r3, r3, #12
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8001eca:	7bfb      	ldrb	r3, [r7, #15]
 8001ecc:	f043 0308 	orr.w	r3, r3, #8
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001ed4:	7bbb      	ldrb	r3, [r7, #14]
 8001ed6:	f043 030c 	orr.w	r3, r3, #12
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8001ede:	7bbb      	ldrb	r3, [r7, #14]
 8001ee0:	f043 0308 	orr.w	r3, r3, #8
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c3, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001ee8:	f107 0208 	add.w	r2, r7, #8
 8001eec:	2364      	movs	r3, #100	; 0x64
 8001eee:	9300      	str	r3, [sp, #0]
 8001ef0:	2304      	movs	r3, #4
 8001ef2:	214e      	movs	r1, #78	; 0x4e
 8001ef4:	4803      	ldr	r0, [pc, #12]	; (8001f04 <lcd_send_cmd+0x5c>)
 8001ef6:	f005 fced 	bl	80078d4 <HAL_I2C_Master_Transmit>
}
 8001efa:	bf00      	nop
 8001efc:	3710      	adds	r7, #16
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	200003a8 	.word	0x200003a8

08001f08 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b086      	sub	sp, #24
 8001f0c:	af02      	add	r7, sp, #8
 8001f0e:	4603      	mov	r3, r0
 8001f10:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8001f12:	79fb      	ldrb	r3, [r7, #7]
 8001f14:	f023 030f 	bic.w	r3, r3, #15
 8001f18:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8001f1a:	79fb      	ldrb	r3, [r7, #7]
 8001f1c:	011b      	lsls	r3, r3, #4
 8001f1e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 8001f20:	7bfb      	ldrb	r3, [r7, #15]
 8001f22:	f043 030d 	orr.w	r3, r3, #13
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 8001f2a:	7bfb      	ldrb	r3, [r7, #15]
 8001f2c:	f043 0309 	orr.w	r3, r3, #9
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 8001f34:	7bbb      	ldrb	r3, [r7, #14]
 8001f36:	f043 030d 	orr.w	r3, r3, #13
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 8001f3e:	7bbb      	ldrb	r3, [r7, #14]
 8001f40:	f043 0309 	orr.w	r3, r3, #9
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c3, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001f48:	f107 0208 	add.w	r2, r7, #8
 8001f4c:	2364      	movs	r3, #100	; 0x64
 8001f4e:	9300      	str	r3, [sp, #0]
 8001f50:	2304      	movs	r3, #4
 8001f52:	214e      	movs	r1, #78	; 0x4e
 8001f54:	4803      	ldr	r0, [pc, #12]	; (8001f64 <lcd_send_data+0x5c>)
 8001f56:	f005 fcbd 	bl	80078d4 <HAL_I2C_Master_Transmit>
}
 8001f5a:	bf00      	nop
 8001f5c:	3710      	adds	r7, #16
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	200003a8 	.word	0x200003a8

08001f68 <lcd_clear>:

void lcd_clear (void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x00);
 8001f6e:	2000      	movs	r0, #0
 8001f70:	f7ff ff9a 	bl	8001ea8 <lcd_send_cmd>
	for (int i=0; i<100; i++)
 8001f74:	2300      	movs	r3, #0
 8001f76:	607b      	str	r3, [r7, #4]
 8001f78:	e005      	b.n	8001f86 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8001f7a:	2020      	movs	r0, #32
 8001f7c:	f7ff ffc4 	bl	8001f08 <lcd_send_data>
	for (int i=0; i<100; i++)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	3301      	adds	r3, #1
 8001f84:	607b      	str	r3, [r7, #4]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2b63      	cmp	r3, #99	; 0x63
 8001f8a:	ddf6      	ble.n	8001f7a <lcd_clear+0x12>
	}
}
 8001f8c:	bf00      	nop
 8001f8e:	bf00      	nop
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <lcd_init>:

void lcd_init (void)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001f9a:	2032      	movs	r0, #50	; 0x32
 8001f9c:	f003 ff0a 	bl	8005db4 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001fa0:	2030      	movs	r0, #48	; 0x30
 8001fa2:	f7ff ff81 	bl	8001ea8 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001fa6:	2005      	movs	r0, #5
 8001fa8:	f003 ff04 	bl	8005db4 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001fac:	2030      	movs	r0, #48	; 0x30
 8001fae:	f7ff ff7b 	bl	8001ea8 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8001fb2:	2001      	movs	r0, #1
 8001fb4:	f003 fefe 	bl	8005db4 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001fb8:	2030      	movs	r0, #48	; 0x30
 8001fba:	f7ff ff75 	bl	8001ea8 <lcd_send_cmd>
	HAL_Delay(10);
 8001fbe:	200a      	movs	r0, #10
 8001fc0:	f003 fef8 	bl	8005db4 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001fc4:	2020      	movs	r0, #32
 8001fc6:	f7ff ff6f 	bl	8001ea8 <lcd_send_cmd>
	HAL_Delay(10);
 8001fca:	200a      	movs	r0, #10
 8001fcc:	f003 fef2 	bl	8005db4 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001fd0:	2028      	movs	r0, #40	; 0x28
 8001fd2:	f7ff ff69 	bl	8001ea8 <lcd_send_cmd>
	HAL_Delay(1);
 8001fd6:	2001      	movs	r0, #1
 8001fd8:	f003 feec 	bl	8005db4 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001fdc:	2008      	movs	r0, #8
 8001fde:	f7ff ff63 	bl	8001ea8 <lcd_send_cmd>
	HAL_Delay(1);
 8001fe2:	2001      	movs	r0, #1
 8001fe4:	f003 fee6 	bl	8005db4 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001fe8:	2001      	movs	r0, #1
 8001fea:	f7ff ff5d 	bl	8001ea8 <lcd_send_cmd>
	HAL_Delay(1);
 8001fee:	2001      	movs	r0, #1
 8001ff0:	f003 fee0 	bl	8005db4 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001ff4:	2006      	movs	r0, #6
 8001ff6:	f7ff ff57 	bl	8001ea8 <lcd_send_cmd>
	HAL_Delay(1);
 8001ffa:	2001      	movs	r0, #1
 8001ffc:	f003 feda 	bl	8005db4 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8002000:	200c      	movs	r0, #12
 8002002:	f7ff ff51 	bl	8001ea8 <lcd_send_cmd>
}
 8002006:	bf00      	nop
 8002008:	bd80      	pop	{r7, pc}

0800200a <lcd_send_string>:

void lcd_send_string (char *str)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b082      	sub	sp, #8
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8002012:	e006      	b.n	8002022 <lcd_send_string+0x18>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	1c5a      	adds	r2, r3, #1
 8002018:	607a      	str	r2, [r7, #4]
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff ff73 	bl	8001f08 <lcd_send_data>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d1f4      	bne.n	8002014 <lcd_send_string+0xa>
}
 800202a:	bf00      	nop
 800202c:	bf00      	nop
 800202e:	3708      	adds	r7, #8
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <MotorL_EnablePWM>:
 *  Created on: Apr 29, 2021
 *      Author: Duc Thang
 */
#include "HAL_MOTOR_CONTROL.h"
void MotorL_EnablePWM(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8002038:	2108      	movs	r1, #8
 800203a:	4802      	ldr	r0, [pc, #8]	; (8002044 <MotorL_EnablePWM+0x10>)
 800203c:	f006 ffec 	bl	8009018 <HAL_TIM_PWM_Start>
}
 8002040:	bf00      	nop
 8002042:	bd80      	pop	{r7, pc}
 8002044:	20000510 	.word	0x20000510

08002048 <MotorR_EnablePWM>:
void MotorL_DisablePWM(void)
{
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
}
void MotorR_EnablePWM(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800204c:	210c      	movs	r1, #12
 800204e:	4802      	ldr	r0, [pc, #8]	; (8002058 <MotorR_EnablePWM+0x10>)
 8002050:	f006 ffe2 	bl	8009018 <HAL_TIM_PWM_Start>
}
 8002054:	bf00      	nop
 8002056:	bd80      	pop	{r7, pc}
 8002058:	20000510 	.word	0x20000510

0800205c <MotorL_SetPWM>:
void MotorR_DisablePWM(void)
{
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
}
void MotorL_SetPWM(int32_t PWMVal)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
	if(PWMVal >= 7200)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 800206a:	db03      	blt.n	8002074 <MotorL_SetPWM+0x18>
	{
		PWMVal = 7200;
 800206c:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 8002070:	607b      	str	r3, [r7, #4]
 8002072:	e005      	b.n	8002080 <MotorL_SetPWM+0x24>
	}
	else if(PWMVal <= -7200)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f513 5fe1 	cmn.w	r3, #7200	; 0x1c20
 800207a:	dc01      	bgt.n	8002080 <MotorL_SetPWM+0x24>
	{
		PWMVal = -7200;
 800207c:	4b0f      	ldr	r3, [pc, #60]	; (80020bc <MotorL_SetPWM+0x60>)
 800207e:	607b      	str	r3, [r7, #4]
	}
	if(PWMVal >= 0)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	db0a      	blt.n	800209c <MotorL_SetPWM+0x40>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8002086:	2200      	movs	r2, #0
 8002088:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800208c:	480c      	ldr	r0, [pc, #48]	; (80020c0 <MotorL_SetPWM+0x64>)
 800208e:	f005 faab 	bl	80075e8 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,PWMVal);
 8002092:	4b0c      	ldr	r3, [pc, #48]	; (80020c4 <MotorL_SetPWM+0x68>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	63da      	str	r2, [r3, #60]	; 0x3c
	else
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,7200+PWMVal);
	}
}
 800209a:	e00b      	b.n	80020b4 <MotorL_SetPWM+0x58>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 800209c:	2201      	movs	r2, #1
 800209e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020a2:	4807      	ldr	r0, [pc, #28]	; (80020c0 <MotorL_SetPWM+0x64>)
 80020a4:	f005 faa0 	bl	80075e8 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,7200+PWMVal);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f503 52e1 	add.w	r2, r3, #7200	; 0x1c20
 80020ae:	4b05      	ldr	r3, [pc, #20]	; (80020c4 <MotorL_SetPWM+0x68>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80020b4:	bf00      	nop
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	ffffe3e0 	.word	0xffffe3e0
 80020c0:	40020400 	.word	0x40020400
 80020c4:	20000510 	.word	0x20000510

080020c8 <MotorR_SetPWM>:
void MotorR_SetPWM(int32_t PWMVal)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
	if(PWMVal >= 7200)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 80020d6:	db03      	blt.n	80020e0 <MotorR_SetPWM+0x18>
	{
		PWMVal = 7200;
 80020d8:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 80020dc:	607b      	str	r3, [r7, #4]
 80020de:	e005      	b.n	80020ec <MotorR_SetPWM+0x24>
	}
	else if(PWMVal <= -7200)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f513 5fe1 	cmn.w	r3, #7200	; 0x1c20
 80020e6:	dc01      	bgt.n	80020ec <MotorR_SetPWM+0x24>
	{
		PWMVal = -7200;
 80020e8:	4b0e      	ldr	r3, [pc, #56]	; (8002124 <MotorR_SetPWM+0x5c>)
 80020ea:	607b      	str	r3, [r7, #4]
	}
	if(PWMVal >= 0)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	db09      	blt.n	8002106 <MotorR_SetPWM+0x3e>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80020f2:	2200      	movs	r2, #0
 80020f4:	2104      	movs	r1, #4
 80020f6:	480c      	ldr	r0, [pc, #48]	; (8002128 <MotorR_SetPWM+0x60>)
 80020f8:	f005 fa76 	bl	80075e8 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,PWMVal);
 80020fc:	4b0b      	ldr	r3, [pc, #44]	; (800212c <MotorR_SetPWM+0x64>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	641a      	str	r2, [r3, #64]	; 0x40
	else
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,7200+PWMVal);
	}
}
 8002104:	e00a      	b.n	800211c <MotorR_SetPWM+0x54>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8002106:	2201      	movs	r2, #1
 8002108:	2104      	movs	r1, #4
 800210a:	4807      	ldr	r0, [pc, #28]	; (8002128 <MotorR_SetPWM+0x60>)
 800210c:	f005 fa6c 	bl	80075e8 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,7200+PWMVal);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f503 52e1 	add.w	r2, r3, #7200	; 0x1c20
 8002116:	4b05      	ldr	r3, [pc, #20]	; (800212c <MotorR_SetPWM+0x64>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800211c:	bf00      	nop
 800211e:	3708      	adds	r7, #8
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	ffffe3e0 	.word	0xffffe3e0
 8002128:	40020400 	.word	0x40020400
 800212c:	20000510 	.word	0x20000510

08002130 <Control_File>:
#include "Matrix_solver.h"
#define max 12
static void Control_File(int A[12][12][12])
{
 8002130:	b480      	push	{r7}
 8002132:	b085      	sub	sp, #20
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
    for (int8_t i = 0; i < 12; i++)
 8002138:	2300      	movs	r3, #0
 800213a:	73fb      	strb	r3, [r7, #15]
 800213c:	e035      	b.n	80021aa <Control_File+0x7a>
        for (int8_t j = 0; j < 12; j++)
 800213e:	2300      	movs	r3, #0
 8002140:	73bb      	strb	r3, [r7, #14]
 8002142:	e028      	b.n	8002196 <Control_File+0x66>
            for (int8_t k = 0; k < 5; k++)
 8002144:	2300      	movs	r3, #0
 8002146:	737b      	strb	r3, [r7, #13]
 8002148:	e01b      	b.n	8002182 <Control_File+0x52>
                A[i][j][k] = -1;
 800214a:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800214e:	4613      	mov	r3, r2
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	4413      	add	r3, r2
 8002154:	019b      	lsls	r3, r3, #6
 8002156:	461a      	mov	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	1899      	adds	r1, r3, r2
 800215c:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8002160:	f997 000d 	ldrsb.w	r0, [r7, #13]
 8002164:	4613      	mov	r3, r2
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	4413      	add	r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	4403      	add	r3, r0
 800216e:	f04f 32ff 	mov.w	r2, #4294967295
 8002172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            for (int8_t k = 0; k < 5; k++)
 8002176:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800217a:	b2db      	uxtb	r3, r3
 800217c:	3301      	adds	r3, #1
 800217e:	b2db      	uxtb	r3, r3
 8002180:	737b      	strb	r3, [r7, #13]
 8002182:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002186:	2b04      	cmp	r3, #4
 8002188:	dddf      	ble.n	800214a <Control_File+0x1a>
        for (int8_t j = 0; j < 12; j++)
 800218a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800218e:	b2db      	uxtb	r3, r3
 8002190:	3301      	adds	r3, #1
 8002192:	b2db      	uxtb	r3, r3
 8002194:	73bb      	strb	r3, [r7, #14]
 8002196:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800219a:	2b0b      	cmp	r3, #11
 800219c:	ddd2      	ble.n	8002144 <Control_File+0x14>
    for (int8_t i = 0; i < 12; i++)
 800219e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	3301      	adds	r3, #1
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	73fb      	strb	r3, [r7, #15]
 80021aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ae:	2b0b      	cmp	r3, #11
 80021b0:	ddc5      	ble.n	800213e <Control_File+0xe>
    //A[][][]=5;

    //di thang
    A[0][1][7] = 0;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	64da      	str	r2, [r3, #76]	; 0x4c
    A[1][0][2] = 0;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80021be:	2200      	movs	r2, #0
 80021c0:	609a      	str	r2, [r3, #8]
    A[2][3][1] = 0;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 80021c8:	2200      	movs	r2, #0
 80021ca:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    A[3][2][4] = 0;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f503 63d8 	add.w	r3, r3, #1728	; 0x6c0
 80021d4:	2200      	movs	r2, #0
 80021d6:	671a      	str	r2, [r3, #112]	; 0x70
    A[4][5][3] = 0;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021de:	2200      	movs	r2, #0
 80021e0:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
    A[5][4][6] = 0;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f503 6334 	add.w	r3, r3, #2880	; 0xb40
 80021ea:	2200      	movs	r2, #0
 80021ec:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
    A[6][7][5] = 0;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f503 6358 	add.w	r3, r3, #3456	; 0xd80
 80021f6:	2200      	movs	r2, #0
 80021f8:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
    A[7][6][0] = 0;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f503 637c 	add.w	r3, r3, #4032	; 0xfc0
 8002202:	2200      	movs	r2, #0
 8002204:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    A[8][9][6] = 0;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800220e:	2200      	movs	r2, #0
 8002210:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
    A[8][9][7] = 0;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800221a:	2200      	movs	r2, #0
 800221c:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
    A[9][8][2] = 0;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8002226:	2200      	movs	r2, #0
 8002228:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    A[9][8][3] = 0;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8002232:	2200      	movs	r2, #0
 8002234:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    A[10][11][0] = 0;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 800223e:	2200      	movs	r2, #0
 8002240:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
    A[10][11][1] = 0;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 800224a:	2200      	movs	r2, #0
 800224c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    A[11][10][4] = 0;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 8002256:	2200      	movs	r2, #0
 8002258:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
    A[11][10][5] = 0;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 8002262:	2200      	movs	r2, #0
 8002264:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4

    //quay 180 đi thẳng
    A[0][1][10] = 1;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	659a      	str	r2, [r3, #88]	; 0x58
    A[0][1][1] = 1;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2201      	movs	r2, #1
 8002272:	635a      	str	r2, [r3, #52]	; 0x34
    A[1][0][0] = 1;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800227a:	2201      	movs	r2, #1
 800227c:	601a      	str	r2, [r3, #0]
    A[1][0][10] = 1;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8002284:	2201      	movs	r2, #1
 8002286:	629a      	str	r2, [r3, #40]	; 0x28
    A[2][3][3] = 1;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 800228e:	2201      	movs	r2, #1
 8002290:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    A[2][3][9] = 1;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 800229a:	2201      	movs	r2, #1
 800229c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    A[3][2][9] = 1;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f503 63d8 	add.w	r3, r3, #1728	; 0x6c0
 80022a6:	2201      	movs	r2, #1
 80022a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    A[3][2][2] = 1;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f503 63d8 	add.w	r3, r3, #1728	; 0x6c0
 80022b2:	2201      	movs	r2, #1
 80022b4:	669a      	str	r2, [r3, #104]	; 0x68
    A[4][5][5] = 1;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022bc:	2201      	movs	r2, #1
 80022be:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    A[4][5][11] = 1;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022c8:	2201      	movs	r2, #1
 80022ca:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    A[5][4][4] = 1;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f503 6334 	add.w	r3, r3, #2880	; 0xb40
 80022d4:	2201      	movs	r2, #1
 80022d6:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    A[5][4][11] = 1;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f503 6334 	add.w	r3, r3, #2880	; 0xb40
 80022e0:	2201      	movs	r2, #1
 80022e2:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
    A[6][7][7] = 1;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f503 6358 	add.w	r3, r3, #3456	; 0xd80
 80022ec:	2201      	movs	r2, #1
 80022ee:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
    A[6][7][8] = 1;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f503 6358 	add.w	r3, r3, #3456	; 0xd80
 80022f8:	2201      	movs	r2, #1
 80022fa:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
    A[7][6][6] = 1;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f503 637c 	add.w	r3, r3, #4032	; 0xfc0
 8002304:	2201      	movs	r2, #1
 8002306:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    A[7][6][8] = 1;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f503 637c 	add.w	r3, r3, #4032	; 0xfc0
 8002310:	2201      	movs	r2, #1
 8002312:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    A[8][9][10] = 1;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800231c:	2201      	movs	r2, #1
 800231e:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
    A[8][9][9] = 1;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002328:	2201      	movs	r2, #1
 800232a:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
    A[8][9][11] = 1;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002334:	2201      	movs	r2, #1
 8002336:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
    A[9][8][8] = 1;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8002340:	2201      	movs	r2, #1
 8002342:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    A[9][8][10] = 1;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 800234c:	2201      	movs	r2, #1
 800234e:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
    A[9][8][11] = 1;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8002358:	2201      	movs	r2, #1
 800235a:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
    A[10][11][8] = 1;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 8002364:	2201      	movs	r2, #1
 8002366:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
    A[10][11][9] = 1;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 8002370:	2201      	movs	r2, #1
 8002372:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
    A[10][11][11] = 1;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 800237c:	2201      	movs	r2, #1
 800237e:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c
    A[11][10][8] = 1;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 8002388:	2201      	movs	r2, #1
 800238a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    A[11][10][9] = 1;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 8002394:	2201      	movs	r2, #1
 8002396:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    A[11][10][10] = 1;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 80023a0:	2201      	movs	r2, #1
 80023a2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208

    //quay 180 đi thẳng
    A[0][10][10] = 2;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2202      	movs	r2, #2
 80023aa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
    A[0][10][1] = 2;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2202      	movs	r2, #2
 80023b2:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
    A[1][2][2] = 2;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80023bc:	2202      	movs	r2, #2
 80023be:	669a      	str	r2, [r3, #104]	; 0x68
    A[2][9][9] = 2;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 80023c6:	2202      	movs	r2, #2
 80023c8:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
    A[2][9][3] = 2;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 80023d2:	2202      	movs	r2, #2
 80023d4:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
    A[3][4][4] = 2;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f503 63d8 	add.w	r3, r3, #1728	; 0x6c0
 80023de:	2202      	movs	r2, #2
 80023e0:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    A[4][11][5] = 2;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023ea:	2202      	movs	r2, #2
 80023ec:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
    A[5][6][6] = 2;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f503 6334 	add.w	r3, r3, #2880	; 0xb40
 80023f6:	2202      	movs	r2, #2
 80023f8:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    A[6][8][8] = 2;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f503 6358 	add.w	r3, r3, #3456	; 0xd80
 8002402:	2202      	movs	r2, #2
 8002404:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    A[6][8][7] = 2;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f503 6358 	add.w	r3, r3, #3456	; 0xd80
 800240e:	2202      	movs	r2, #2
 8002410:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
    A[7][0][0] = 2;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f503 637c 	add.w	r3, r3, #4032	; 0xfc0
 800241a:	2202      	movs	r2, #2
 800241c:	601a      	str	r2, [r3, #0]
    A[8][11][9] = 2;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002424:	2202      	movs	r2, #2
 8002426:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
    A[8][11][10] = 2;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002430:	2202      	movs	r2, #2
 8002432:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
    A[8][11][11] = 2;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800243c:	2202      	movs	r2, #2
 800243e:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c
    A[8][7][6] = 2;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002448:	2202      	movs	r2, #2
 800244a:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
    A[8][7][7] = 2;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002454:	2202      	movs	r2, #2
 8002456:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
    A[9][3][2] = 2;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8002460:	2202      	movs	r2, #2
 8002462:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    A[9][3][3] = 2;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 800246c:	2202      	movs	r2, #2
 800246e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    A[9][10][8] = 2;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8002478:	2202      	movs	r2, #2
 800247a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    A[9][10][10] = 2;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8002484:	2202      	movs	r2, #2
 8002486:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
    A[9][10][11] = 2;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8002490:	2202      	movs	r2, #2
 8002492:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
    A[10][1][0] = 2;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 800249c:	2202      	movs	r2, #2
 800249e:	631a      	str	r2, [r3, #48]	; 0x30
    A[10][1][1] = 2;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 80024a6:	2202      	movs	r2, #2
 80024a8:	635a      	str	r2, [r3, #52]	; 0x34
    A[10][8][8] = 2;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 80024b0:	2202      	movs	r2, #2
 80024b2:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    A[10][8][9] = 2;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 80024bc:	2202      	movs	r2, #2
 80024be:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
    A[10][8][11] = 2;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 80024c8:	2202      	movs	r2, #2
 80024ca:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
    A[11][5][4] = 2;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 80024d4:	2202      	movs	r2, #2
 80024d6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    A[11][5][5] = 2;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 80024e0:	2202      	movs	r2, #2
 80024e2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    A[11][9][8] = 2;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 80024ec:	2202      	movs	r2, #2
 80024ee:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
    A[11][9][9] = 2;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 80024f8:	2202      	movs	r2, #2
 80024fa:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
    A[11][9][10] = 2;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 8002504:	2202      	movs	r2, #2
 8002506:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8

    //thẳng phải
    A[0][10][7] = 3;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2203      	movs	r2, #3
 800250e:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
    A[1][2][10] = 3;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8002518:	2203      	movs	r2, #3
 800251a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    A[1][2][0] = 3;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8002524:	2203      	movs	r2, #3
 8002526:	661a      	str	r2, [r3, #96]	; 0x60
    A[2][9][1] = 3;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 800252e:	2203      	movs	r2, #3
 8002530:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
    A[3][4][9] = 3;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f503 63d8 	add.w	r3, r3, #1728	; 0x6c0
 800253a:	2203      	movs	r2, #3
 800253c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    A[3][4][2] = 3;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f503 63d8 	add.w	r3, r3, #1728	; 0x6c0
 8002546:	2203      	movs	r2, #3
 8002548:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    A[4][11][3] = 3;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002552:	2203      	movs	r2, #3
 8002554:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    A[5][6][4] = 3;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f503 6334 	add.w	r3, r3, #2880	; 0xb40
 800255e:	2203      	movs	r2, #3
 8002560:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    A[5][6][11] = 3;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f503 6334 	add.w	r3, r3, #2880	; 0xb40
 800256a:	2203      	movs	r2, #3
 800256c:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
    A[6][8][5] = 3;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f503 6358 	add.w	r3, r3, #3456	; 0xd80
 8002576:	2203      	movs	r2, #3
 8002578:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    A[7][0][6] = 3;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f503 637c 	add.w	r3, r3, #4032	; 0xfc0
 8002582:	2203      	movs	r2, #3
 8002584:	619a      	str	r2, [r3, #24]
    A[7][0][8] = 3;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f503 637c 	add.w	r3, r3, #4032	; 0xfc0
 800258c:	2203      	movs	r2, #3
 800258e:	621a      	str	r2, [r3, #32]
    A[8][11][6] = 3;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002596:	2203      	movs	r2, #3
 8002598:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
    A[8][11][7] = 3;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80025a2:	2203      	movs	r2, #3
 80025a4:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
    A[8][7][9] = 3;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80025ae:	2203      	movs	r2, #3
 80025b0:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
    A[8][7][10] = 3;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80025ba:	2203      	movs	r2, #3
 80025bc:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    A[8][7][11] = 3;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80025c6:	2203      	movs	r2, #3
 80025c8:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    A[9][3][8] = 3;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 80025d2:	2203      	movs	r2, #3
 80025d4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    A[9][3][10] = 3;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 80025de:	2203      	movs	r2, #3
 80025e0:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    A[9][3][11] = 3;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 80025ea:	2203      	movs	r2, #3
 80025ec:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    A[9][10][2] = 3;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 80025f6:	2203      	movs	r2, #3
 80025f8:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
    A[9][10][3] = 3;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8002602:	2203      	movs	r2, #3
 8002604:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
    A[10][1][8] = 3;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 800260e:	2203      	movs	r2, #3
 8002610:	651a      	str	r2, [r3, #80]	; 0x50
    A[10][1][9] = 3;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 8002618:	2203      	movs	r2, #3
 800261a:	655a      	str	r2, [r3, #84]	; 0x54
    A[10][1][11] = 3;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 8002622:	2203      	movs	r2, #3
 8002624:	65da      	str	r2, [r3, #92]	; 0x5c
    A[10][8][0] = 3;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 800262c:	2203      	movs	r2, #3
 800262e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    A[10][8][1] = 3;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 8002638:	2203      	movs	r2, #3
 800263a:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    A[11][5][8] = 3;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 8002644:	2203      	movs	r2, #3
 8002646:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    A[11][5][9] = 3;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 8002650:	2203      	movs	r2, #3
 8002652:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    A[11][5][10] = 3;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 800265c:	2203      	movs	r2, #3
 800265e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    A[11][9][4] = 3;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 8002668:	2203      	movs	r2, #3
 800266a:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
    A[11][9][5] = 3;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 8002674:	2203      	movs	r2, #3
 8002676:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4

    //thẳng, trái
    A[0][7][10] = 4;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2204      	movs	r2, #4
 800267e:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    A[0][7][1] = 4;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2204      	movs	r2, #4
 8002686:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
    A[1][10][2] = 4;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8002690:	2204      	movs	r2, #4
 8002692:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
    A[2][1][3] = 4;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 800269c:	2204      	movs	r2, #4
 800269e:	63da      	str	r2, [r3, #60]	; 0x3c
    A[2][1][9] = 4;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 80026a6:	2204      	movs	r2, #4
 80026a8:	655a      	str	r2, [r3, #84]	; 0x54
    A[3][9][4] = 4;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f503 63d8 	add.w	r3, r3, #1728	; 0x6c0
 80026b0:	2204      	movs	r2, #4
 80026b2:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
    A[4][3][11] = 4;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026bc:	2204      	movs	r2, #4
 80026be:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    A[4][3][5] = 4;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026c8:	2204      	movs	r2, #4
 80026ca:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    A[5][11][6] = 4;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f503 6334 	add.w	r3, r3, #2880	; 0xb40
 80026d4:	2204      	movs	r2, #4
 80026d6:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
    A[6][5][7] = 4;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f503 6358 	add.w	r3, r3, #3456	; 0xd80
 80026e0:	2204      	movs	r2, #4
 80026e2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    A[6][5][8] = 4;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f503 6358 	add.w	r3, r3, #3456	; 0xd80
 80026ec:	2204      	movs	r2, #4
 80026ee:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    A[7][8][0] = 4;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f503 637c 	add.w	r3, r3, #4032	; 0xfc0
 80026f8:	2204      	movs	r2, #4
 80026fa:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    A[8][10][6] = 4;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002704:	2204      	movs	r2, #4
 8002706:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
    A[8][10][7] = 4;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002710:	2204      	movs	r2, #4
 8002712:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
    A[8][6][9] = 4;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800271c:	2204      	movs	r2, #4
 800271e:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
    A[8][6][10] = 4;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002728:	2204      	movs	r2, #4
 800272a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    A[8][6][11] = 4;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002734:	2204      	movs	r2, #4
 8002736:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
    A[9][2][8] = 4;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8002740:	2204      	movs	r2, #4
 8002742:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    A[9][2][10] = 4;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 800274c:	2204      	movs	r2, #4
 800274e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    A[9][2][11] = 4;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8002758:	2204      	movs	r2, #4
 800275a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    A[9][11][2] = 4;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8002764:	2204      	movs	r2, #4
 8002766:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
    A[9][11][3] = 4;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8002770:	2204      	movs	r2, #4
 8002772:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    A[10][0][8] = 4;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 800277c:	2204      	movs	r2, #4
 800277e:	621a      	str	r2, [r3, #32]
    A[10][0][9] = 4;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 8002786:	2204      	movs	r2, #4
 8002788:	625a      	str	r2, [r3, #36]	; 0x24
    A[10][0][11] = 4;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 8002790:	2204      	movs	r2, #4
 8002792:	62da      	str	r2, [r3, #44]	; 0x2c
    A[10][9][0] = 4;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 800279a:	2204      	movs	r2, #4
 800279c:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
    A[10][9][1] = 4;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 80027a6:	2204      	movs	r2, #4
 80027a8:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
    A[11][4][8] = 4;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 80027b2:	2204      	movs	r2, #4
 80027b4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    A[11][4][9] = 4;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 80027be:	2204      	movs	r2, #4
 80027c0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    A[11][4][10] = 4;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 80027ca:	2204      	movs	r2, #4
 80027cc:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    A[11][8][4] = 4;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 80027d6:	2204      	movs	r2, #4
 80027d8:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    A[11][8][5] = 4;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 80027e2:	2204      	movs	r2, #4
 80027e4:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194

    //quay 180, thẳng, trái
    A[0][7][7] = 5;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2205      	movs	r2, #5
 80027ec:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
    A[1][10][10] = 5;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80027f6:	2205      	movs	r2, #5
 80027f8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
    A[1][10][0] = 5;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8002802:	2205      	movs	r2, #5
 8002804:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
    A[2][1][1] = 5;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 800280e:	2205      	movs	r2, #5
 8002810:	635a      	str	r2, [r3, #52]	; 0x34
    A[3][9][9] = 5;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f503 63d8 	add.w	r3, r3, #1728	; 0x6c0
 8002818:	2205      	movs	r2, #5
 800281a:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
    A[3][9][2] = 5;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f503 63d8 	add.w	r3, r3, #1728	; 0x6c0
 8002824:	2205      	movs	r2, #5
 8002826:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
    A[4][3][3] = 5;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002830:	2205      	movs	r2, #5
 8002832:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    A[4][11][11] = 2;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800283c:	2202      	movs	r2, #2
 800283e:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c
    A[5][11][11] = 5;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f503 6334 	add.w	r3, r3, #2880	; 0xb40
 8002848:	2205      	movs	r2, #5
 800284a:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c
    A[5][11][4] = 5;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f503 6334 	add.w	r3, r3, #2880	; 0xb40
 8002854:	2205      	movs	r2, #5
 8002856:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
    A[6][5][5] = 5;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f503 6358 	add.w	r3, r3, #3456	; 0xd80
 8002860:	2205      	movs	r2, #5
 8002862:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    A[7][8][8] = 5;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f503 637c 	add.w	r3, r3, #4032	; 0xfc0
 800286c:	2205      	movs	r2, #5
 800286e:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    A[7][8][6] = 5;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f503 637c 	add.w	r3, r3, #4032	; 0xfc0
 8002878:	2205      	movs	r2, #5
 800287a:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    A[8][10][9] = 5;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002884:	2205      	movs	r2, #5
 8002886:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    A[8][10][10] = 5;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002890:	2205      	movs	r2, #5
 8002892:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
    A[8][10][11] = 5;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800289c:	2205      	movs	r2, #5
 800289e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
    A[8][6][6] = 5;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80028a8:	2205      	movs	r2, #5
 80028aa:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    A[8][6][7] = 5;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80028b4:	2205      	movs	r2, #5
 80028b6:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    A[9][2][2] = 5;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 80028c0:	2205      	movs	r2, #5
 80028c2:	669a      	str	r2, [r3, #104]	; 0x68
    A[9][2][3] = 5;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 80028ca:	2205      	movs	r2, #5
 80028cc:	66da      	str	r2, [r3, #108]	; 0x6c
    A[9][11][8] = 5;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 80028d4:	2205      	movs	r2, #5
 80028d6:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
    A[9][11][10] = 5;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 80028e0:	2205      	movs	r2, #5
 80028e2:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
    A[9][11][11] = 5;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 80028ec:	2205      	movs	r2, #5
 80028ee:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c
    A[10][0][0] = 5;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 80028f8:	2205      	movs	r2, #5
 80028fa:	601a      	str	r2, [r3, #0]
    A[10][0][1] = 5;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 8002902:	2205      	movs	r2, #5
 8002904:	605a      	str	r2, [r3, #4]
    A[10][9][8] = 5;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 800290c:	2205      	movs	r2, #5
 800290e:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
    A[10][9][11] = 5;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 8002918:	2205      	movs	r2, #5
 800291a:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
    A[10][9][9] = 5;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 8002924:	2205      	movs	r2, #5
 8002926:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
    A[11][4][4] = 5;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 8002930:	2205      	movs	r2, #5
 8002932:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    A[11][4][5] = 5;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 800293c:	2205      	movs	r2, #5
 800293e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    A[11][8][8] = 5;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 8002948:	2205      	movs	r2, #5
 800294a:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    A[11][8][9] = 5;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 8002954:	2205      	movs	r2, #5
 8002956:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
    A[11][8][10] = 5;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 8002960:	2205      	movs	r2, #5
 8002962:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
}
 8002966:	bf00      	nop
 8002968:	3714      	adds	r7, #20
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr

08002972 <Dijkstra>:
static int Dijkstra(int A[12][12], int n, int D, int C, int result[max])
{
 8002972:	b480      	push	{r7}
 8002974:	b0a7      	sub	sp, #156	; 0x9c
 8002976:	af00      	add	r7, sp, #0
 8002978:	60f8      	str	r0, [r7, #12]
 800297a:	60b9      	str	r1, [r7, #8]
 800297c:	607a      	str	r2, [r7, #4]
 800297e:	603b      	str	r3, [r7, #0]
    char DanhDau[max];
    int Nhan[max], Truoc[max], XP, min;
    for (int i = 0; i < n; i++)
 8002980:	2300      	movs	r3, #0
 8002982:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002986:	e01e      	b.n	80029c6 <Dijkstra+0x54>
    {
        Nhan[i] = 999;
 8002988:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002992:	4413      	add	r3, r2
 8002994:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002998:	f843 2c58 	str.w	r2, [r3, #-88]
        DanhDau[i] = 0;
 800299c:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80029a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029a4:	4413      	add	r3, r2
 80029a6:	2200      	movs	r2, #0
 80029a8:	701a      	strb	r2, [r3, #0]
        Truoc[i] = D;
 80029aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80029b4:	4413      	add	r3, r2
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	f843 2c88 	str.w	r2, [r3, #-136]
    for (int i = 0; i < n; i++)
 80029bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029c0:	3301      	adds	r3, #1
 80029c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80029c6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	dbdb      	blt.n	8002988 <Dijkstra+0x16>
    }
    Nhan[D] = 0;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80029d8:	4413      	add	r3, r2
 80029da:	2200      	movs	r2, #0
 80029dc:	f843 2c58 	str.w	r2, [r3, #-88]
    DanhDau[D] = 1;
 80029e0:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4413      	add	r3, r2
 80029e8:	2201      	movs	r2, #1
 80029ea:	701a      	strb	r2, [r3, #0]
    XP = D;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    while (XP != C)
 80029f2:	e0ad      	b.n	8002b50 <Dijkstra+0x1de>
    {
        for (int8_t j = 0; j < n; j++)
 80029f4:	2300      	movs	r3, #0
 80029f6:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
 80029fa:	e066      	b.n	8002aca <Dijkstra+0x158>
            if (A[XP][j] > 0 && Nhan[j] > A[XP][j] + Nhan[XP] && DanhDau[j] == 0)
 80029fc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002a00:	4613      	mov	r3, r2
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	4413      	add	r3, r2
 8002a06:	011b      	lsls	r3, r3, #4
 8002a08:	461a      	mov	r2, r3
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	f997 208b 	ldrsb.w	r2, [r7, #139]	; 0x8b
 8002a12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	dd50      	ble.n	8002abc <Dijkstra+0x14a>
 8002a1a:	f997 308b 	ldrsb.w	r3, [r7, #139]	; 0x8b
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002a24:	4413      	add	r3, r2
 8002a26:	f853 1c58 	ldr.w	r1, [r3, #-88]
 8002a2a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002a2e:	4613      	mov	r3, r2
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	4413      	add	r3, r2
 8002a34:	011b      	lsls	r3, r3, #4
 8002a36:	461a      	mov	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	f997 208b 	ldrsb.w	r2, [r7, #139]	; 0x8b
 8002a40:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002a44:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8002a4e:	4403      	add	r3, r0
 8002a50:	f853 3c58 	ldr.w	r3, [r3, #-88]
 8002a54:	4413      	add	r3, r2
 8002a56:	4299      	cmp	r1, r3
 8002a58:	dd30      	ble.n	8002abc <Dijkstra+0x14a>
 8002a5a:	f997 308b 	ldrsb.w	r3, [r7, #139]	; 0x8b
 8002a5e:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002a62:	4413      	add	r3, r2
 8002a64:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d127      	bne.n	8002abc <Dijkstra+0x14a>
            {
                Nhan[j] = A[XP][j] + Nhan[XP];
 8002a6c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002a70:	4613      	mov	r3, r2
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	4413      	add	r3, r2
 8002a76:	011b      	lsls	r3, r3, #4
 8002a78:	461a      	mov	r2, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	f997 208b 	ldrsb.w	r2, [r7, #139]	; 0x8b
 8002a82:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002a86:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002a90:	4413      	add	r3, r2
 8002a92:	f853 2c58 	ldr.w	r2, [r3, #-88]
 8002a96:	f997 308b 	ldrsb.w	r3, [r7, #139]	; 0x8b
 8002a9a:	440a      	add	r2, r1
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8002aa2:	440b      	add	r3, r1
 8002aa4:	f843 2c58 	str.w	r2, [r3, #-88]
                Truoc[j] = XP;
 8002aa8:	f997 308b 	ldrsb.w	r3, [r7, #139]	; 0x8b
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002ab2:	4413      	add	r3, r2
 8002ab4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002ab8:	f843 2c88 	str.w	r2, [r3, #-136]
        for (int8_t j = 0; j < n; j++)
 8002abc:	f997 308b 	ldrsb.w	r3, [r7, #139]	; 0x8b
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
 8002aca:	f997 308b 	ldrsb.w	r3, [r7, #139]	; 0x8b
 8002ace:	68ba      	ldr	r2, [r7, #8]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	dc93      	bgt.n	80029fc <Dijkstra+0x8a>
            }
        min = 999;
 8002ad4:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002ad8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        for (int8_t j = 0; j < n; j++)
 8002adc:	2300      	movs	r3, #0
 8002ade:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
 8002ae2:	e029      	b.n	8002b38 <Dijkstra+0x1c6>
            if (min > Nhan[j] && DanhDau[j] == 0)
 8002ae4:	f997 308a 	ldrsb.w	r3, [r7, #138]	; 0x8a
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002aee:	4413      	add	r3, r2
 8002af0:	f853 3c58 	ldr.w	r3, [r3, #-88]
 8002af4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002af8:	429a      	cmp	r2, r3
 8002afa:	dd16      	ble.n	8002b2a <Dijkstra+0x1b8>
 8002afc:	f997 308a 	ldrsb.w	r3, [r7, #138]	; 0x8a
 8002b00:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002b04:	4413      	add	r3, r2
 8002b06:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d10d      	bne.n	8002b2a <Dijkstra+0x1b8>
            {
                min = Nhan[j];
 8002b0e:	f997 308a 	ldrsb.w	r3, [r7, #138]	; 0x8a
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002b18:	4413      	add	r3, r2
 8002b1a:	f853 3c58 	ldr.w	r3, [r3, #-88]
 8002b1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                XP = j;
 8002b22:	f997 308a 	ldrsb.w	r3, [r7, #138]	; 0x8a
 8002b26:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        for (int8_t j = 0; j < n; j++)
 8002b2a:	f997 308a 	ldrsb.w	r3, [r7, #138]	; 0x8a
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	3301      	adds	r3, #1
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
 8002b38:	f997 308a 	ldrsb.w	r3, [r7, #138]	; 0x8a
 8002b3c:	68ba      	ldr	r2, [r7, #8]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	dcd0      	bgt.n	8002ae4 <Dijkstra+0x172>
            }
        DanhDau[XP] = 1;
 8002b42:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8002b46:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002b4a:	4413      	add	r3, r2
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	701a      	strb	r2, [r3, #0]
    while (XP != C)
 8002b50:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	f47f af4c 	bne.w	80029f4 <Dijkstra+0x82>
    }
    int lenResult = Nhan[C] + 1;
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002b64:	4413      	add	r3, r2
 8002b66:	f853 3c58 	ldr.w	r3, [r3, #-88]
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	67fb      	str	r3, [r7, #124]	; 0x7c
    int k = Nhan[C];
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002b76:	4413      	add	r3, r2
 8002b78:	f853 3c58 	ldr.w	r3, [r3, #-88]
 8002b7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    result[k--] = C;
 8002b80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b84:	1e5a      	subs	r2, r3, #1
 8002b86:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8002b90:	4413      	add	r3, r2
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	601a      	str	r2, [r3, #0]
    result[k--] = Truoc[C];
 8002b96:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b9a:	1e5a      	subs	r2, r3, #1
 8002b9c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8002ba6:	441a      	add	r2, r3
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8002bb0:	440b      	add	r3, r1
 8002bb2:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8002bb6:	6013      	str	r3, [r2, #0]
    int i = Truoc[C];
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002bc0:	4413      	add	r3, r2
 8002bc2:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8002bc6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    while (i != D)
 8002bca:	e015      	b.n	8002bf8 <Dijkstra+0x286>
    {
        i = Truoc[i];
 8002bcc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002bd6:	4413      	add	r3, r2
 8002bd8:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8002bdc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        result[k--] = i;
 8002be0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002be4:	1e5a      	subs	r2, r3, #1
 8002be6:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8002bf0:	4413      	add	r3, r2
 8002bf2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002bf6:	601a      	str	r2, [r3, #0]
    while (i != D)
 8002bf8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d1e4      	bne.n	8002bcc <Dijkstra+0x25a>
    }
    return lenResult;
 8002c02:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	379c      	adds	r7, #156	; 0x9c
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <Control>:
static void Control(int C[12][12][12], char control[6][3], int result[4], int len, char controlArr[12][12], int truoc, int takeResult[4])
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b086      	sub	sp, #24
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
 8002c1c:	603b      	str	r3, [r7, #0]
    for (int8_t i = 0; i < len - 1; i++)
 8002c1e:	2300      	movs	r3, #0
 8002c20:	75fb      	strb	r3, [r7, #23]
 8002c22:	e05e      	b.n	8002ce2 <Control+0xd2>
    {
        strcpy(controlArr[i], control[C[result[i]][result[i + 1]][truoc]]);
 8002c24:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	4413      	add	r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	461a      	mov	r2, r3
 8002c32:	6a3b      	ldr	r3, [r7, #32]
 8002c34:	1898      	adds	r0, r3, r2
 8002c36:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	4413      	add	r3, r2
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	461a      	mov	r2, r3
 8002c44:	4613      	mov	r3, r2
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	4413      	add	r3, r2
 8002c4a:	019b      	lsls	r3, r3, #6
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	1899      	adds	r1, r3, r2
 8002c52:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c56:	3301      	adds	r3, #1
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	4613      	mov	r3, r2
 8002c62:	005b      	lsls	r3, r3, #1
 8002c64:	4413      	add	r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c6a:	4413      	add	r3, r2
 8002c6c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002c70:	461a      	mov	r2, r3
 8002c72:	4613      	mov	r3, r2
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	4413      	add	r3, r2
 8002c78:	68ba      	ldr	r2, [r7, #8]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	f008 fe7c 	bl	800b97a <strcpy>
        // printf("%d", C[result[i]][result[i + 1]][truoc]);
        // printf("\n");
        // printf(control[C[result[i]][result[i + 1]][truoc]]);
        // printf("\n");
        takeResult[i] = C[result[i]][result[i + 1]][truoc];
 8002c82:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	461a      	mov	r2, r3
 8002c90:	4613      	mov	r3, r2
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	4413      	add	r3, r2
 8002c96:	019b      	lsls	r3, r3, #6
 8002c98:	461a      	mov	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	1898      	adds	r0, r3, r2
 8002c9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	4413      	add	r3, r2
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cb4:	4419      	add	r1, r3
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	4413      	add	r3, r2
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cc0:	4413      	add	r3, r2
 8002cc2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002cc6:	600b      	str	r3, [r1, #0]
        truoc = result[i];
 8002cc8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	627b      	str	r3, [r7, #36]	; 0x24
    for (int8_t i = 0; i < len - 1; i++)
 8002cd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	3301      	adds	r3, #1
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	75fb      	strb	r3, [r7, #23]
 8002ce2:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	3b01      	subs	r3, #1
 8002cea:	429a      	cmp	r2, r3
 8002cec:	db9a      	blt.n	8002c24 <Control+0x14>
    }
}
 8002cee:	bf00      	nop
 8002cf0:	bf00      	nop
 8002cf2:	3718      	adds	r7, #24
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <Solver>:
int8_t Solver(int Dau, int Cuoi, int Truoc, int takeResult[4], int Step[4], int Run_Str[8])
{
 8002cf8:	b5b0      	push	{r4, r5, r7, lr}
 8002cfa:	f5ad 5df0 	sub.w	sp, sp, #7680	; 0x1e00
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af04      	add	r7, sp, #16
 8002d02:	f107 0418 	add.w	r4, r7, #24
 8002d06:	3c0c      	subs	r4, #12
 8002d08:	6020      	str	r0, [r4, #0]
 8002d0a:	f107 0018 	add.w	r0, r7, #24
 8002d0e:	3810      	subs	r0, #16
 8002d10:	6001      	str	r1, [r0, #0]
 8002d12:	f107 0118 	add.w	r1, r7, #24
 8002d16:	3914      	subs	r1, #20
 8002d18:	600a      	str	r2, [r1, #0]
 8002d1a:	f107 0218 	add.w	r2, r7, #24
 8002d1e:	3a18      	subs	r2, #24
 8002d20:	6013      	str	r3, [r2, #0]
    char controlArr[12][12];
    int A[12][12] = {
 8002d22:	f507 53d9 	add.w	r3, r7, #6944	; 0x1b20
 8002d26:	f103 0304 	add.w	r3, r3, #4
 8002d2a:	4a59      	ldr	r2, [pc, #356]	; (8002e90 <Solver+0x198>)
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	4611      	mov	r1, r2
 8002d30:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002d34:	461a      	mov	r2, r3
 8002d36:	f008 f971 	bl	800b01c <memcpy>
        {0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1},
        {0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1},
        {1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1},
        {0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0}};
    // int result[max];
    char control[6][3] = {"0", "1", "2", "3", "4", "5"};
 8002d3a:	f507 53d8 	add.w	r3, r7, #6912	; 0x1b00
 8002d3e:	f103 0310 	add.w	r3, r3, #16
 8002d42:	4a54      	ldr	r2, [pc, #336]	; (8002e94 <Solver+0x19c>)
 8002d44:	461c      	mov	r4, r3
 8002d46:	4615      	mov	r5, r2
 8002d48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d4c:	682b      	ldr	r3, [r5, #0]
 8002d4e:	8023      	strh	r3, [r4, #0]
    int C[12][12][12];
    Control_File(C);
 8002d50:	f107 0318 	add.w	r3, r7, #24
 8002d54:	3b08      	subs	r3, #8
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7ff f9ea 	bl	8002130 <Control_File>
    int length = Dijkstra(A, 12, Dau, Cuoi, Step);
 8002d5c:	f107 0318 	add.w	r3, r7, #24
 8002d60:	3b10      	subs	r3, #16
 8002d62:	f107 0218 	add.w	r2, r7, #24
 8002d66:	3a0c      	subs	r2, #12
 8002d68:	f507 50d9 	add.w	r0, r7, #6944	; 0x1b20
 8002d6c:	f100 0004 	add.w	r0, r0, #4
 8002d70:	f507 51f0 	add.w	r1, r7, #7680	; 0x1e00
 8002d74:	f101 0108 	add.w	r1, r1, #8
 8002d78:	6809      	ldr	r1, [r1, #0]
 8002d7a:	9100      	str	r1, [sp, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	6812      	ldr	r2, [r2, #0]
 8002d80:	210c      	movs	r1, #12
 8002d82:	f7ff fdf6 	bl	8002972 <Dijkstra>
 8002d86:	f507 53ef 	add.w	r3, r7, #7648	; 0x1de0
 8002d8a:	f103 0314 	add.w	r3, r3, #20
 8002d8e:	6018      	str	r0, [r3, #0]
    Control(C, control, Step, length, controlArr, Truoc, takeResult);
 8002d90:	f507 51d8 	add.w	r1, r7, #6912	; 0x1b00
 8002d94:	f101 0110 	add.w	r1, r1, #16
 8002d98:	f107 0018 	add.w	r0, r7, #24
 8002d9c:	3808      	subs	r0, #8
 8002d9e:	f107 0318 	add.w	r3, r7, #24
 8002da2:	3b18      	subs	r3, #24
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	9302      	str	r3, [sp, #8]
 8002da8:	f107 0318 	add.w	r3, r7, #24
 8002dac:	3b14      	subs	r3, #20
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	9301      	str	r3, [sp, #4]
 8002db2:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 8002db6:	f103 0304 	add.w	r3, r3, #4
 8002dba:	9300      	str	r3, [sp, #0]
 8002dbc:	f507 53ef 	add.w	r3, r7, #7648	; 0x1de0
 8002dc0:	f103 0314 	add.w	r3, r3, #20
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f507 52f0 	add.w	r2, r7, #7680	; 0x1e00
 8002dca:	f102 0208 	add.w	r2, r2, #8
 8002dce:	6812      	ldr	r2, [r2, #0]
 8002dd0:	f7ff ff1e 	bl	8002c10 <Control>

    Run_Str[0] = 7;
 8002dd4:	f507 53f0 	add.w	r3, r7, #7680	; 0x1e00
 8002dd8:	f103 030c 	add.w	r3, r3, #12
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2207      	movs	r2, #7
 8002de0:	601a      	str	r2, [r3, #0]
	Run_Str[1] = takeResult[0];
 8002de2:	f507 53f0 	add.w	r3, r7, #7680	; 0x1e00
 8002de6:	f103 030c 	add.w	r3, r3, #12
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	1d1a      	adds	r2, r3, #4
 8002dee:	f107 0318 	add.w	r3, r7, #24
 8002df2:	3b18      	subs	r3, #24
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	6013      	str	r3, [r2, #0]
	Run_Str[2] = 7;
 8002dfa:	f507 53f0 	add.w	r3, r7, #7680	; 0x1e00
 8002dfe:	f103 030c 	add.w	r3, r3, #12
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	3308      	adds	r3, #8
 8002e06:	2207      	movs	r2, #7
 8002e08:	601a      	str	r2, [r3, #0]
	Run_Str[3] = takeResult[1];
 8002e0a:	f507 53f0 	add.w	r3, r7, #7680	; 0x1e00
 8002e0e:	f103 030c 	add.w	r3, r3, #12
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f103 020c 	add.w	r2, r3, #12
 8002e18:	f107 0318 	add.w	r3, r7, #24
 8002e1c:	3b18      	subs	r3, #24
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	6013      	str	r3, [r2, #0]
	Run_Str[4] = 7;
 8002e24:	f507 53f0 	add.w	r3, r7, #7680	; 0x1e00
 8002e28:	f103 030c 	add.w	r3, r3, #12
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	3310      	adds	r3, #16
 8002e30:	2207      	movs	r2, #7
 8002e32:	601a      	str	r2, [r3, #0]
	Run_Str[5] = takeResult[2];
 8002e34:	f507 53f0 	add.w	r3, r7, #7680	; 0x1e00
 8002e38:	f103 030c 	add.w	r3, r3, #12
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f103 0214 	add.w	r2, r3, #20
 8002e42:	f107 0318 	add.w	r3, r7, #24
 8002e46:	3b18      	subs	r3, #24
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	6013      	str	r3, [r2, #0]
	Run_Str[6] = 7;
 8002e4e:	f507 53f0 	add.w	r3, r7, #7680	; 0x1e00
 8002e52:	f103 030c 	add.w	r3, r3, #12
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	3318      	adds	r3, #24
 8002e5a:	2207      	movs	r2, #7
 8002e5c:	601a      	str	r2, [r3, #0]
	Run_Str[7] = takeResult[3];
 8002e5e:	f507 53f0 	add.w	r3, r7, #7680	; 0x1e00
 8002e62:	f103 030c 	add.w	r3, r3, #12
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f103 021c 	add.w	r2, r3, #28
 8002e6c:	f107 0318 	add.w	r3, r7, #24
 8002e70:	3b18      	subs	r3, #24
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	6013      	str	r3, [r2, #0]
    return length;
 8002e78:	f507 53ef 	add.w	r3, r7, #7648	; 0x1de0
 8002e7c:	f103 0314 	add.w	r3, r3, #20
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	b25b      	sxtb	r3, r3
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	f507 57ef 	add.w	r7, r7, #7648	; 0x1de0
 8002e8a:	3718      	adds	r7, #24
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bdb0      	pop	{r4, r5, r7, pc}
 8002e90:	0800fa28 	.word	0x0800fa28
 8002e94:	0800fc68 	.word	0x0800fc68

08002e98 <GetString>:
void GetString(int8_t Dau,int8_t Cuoi ,char *Result)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b092      	sub	sp, #72	; 0x48
 8002e9c:	af02      	add	r7, sp, #8
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	603a      	str	r2, [r7, #0]
 8002ea2:	71fb      	strb	r3, [r7, #7]
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	71bb      	strb	r3, [r7, #6]
    char buffer[5] = {0};
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	633b      	str	r3, [r7, #48]	; 0x30
 8002eac:	2300      	movs	r3, #0
 8002eae:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    char concat_buffer[20] = {0};
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	61fb      	str	r3, [r7, #28]
 8002eb6:	f107 0320 	add.w	r3, r7, #32
 8002eba:	2200      	movs	r2, #0
 8002ebc:	601a      	str	r2, [r3, #0]
 8002ebe:	605a      	str	r2, [r3, #4]
 8002ec0:	609a      	str	r2, [r3, #8]
 8002ec2:	60da      	str	r2, [r3, #12]
    int getStep[4];
    int length = Solver(Dau,Cuoi,12,0,getStep,0);
 8002ec4:	f997 0007 	ldrsb.w	r0, [r7, #7]
 8002ec8:	f997 1006 	ldrsb.w	r1, [r7, #6]
 8002ecc:	2300      	movs	r3, #0
 8002ece:	9301      	str	r3, [sp, #4]
 8002ed0:	f107 030c 	add.w	r3, r7, #12
 8002ed4:	9300      	str	r3, [sp, #0]
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	220c      	movs	r2, #12
 8002eda:	f7ff ff0d 	bl	8002cf8 <Solver>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	63bb      	str	r3, [r7, #56]	; 0x38
    for (int8_t i = 0; i < length; i++)
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8002ee8:	e039      	b.n	8002f5e <GetString+0xc6>
    {
        if (i == length - 1)
 8002eea:	f997 203f 	ldrsb.w	r2, [r7, #63]	; 0x3f
 8002eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef0:	3b01      	subs	r3, #1
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d116      	bne.n	8002f24 <GetString+0x8c>
        {
            sprintf(buffer, "%d", getStep[i]);
 8002ef6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002f00:	4413      	add	r3, r2
 8002f02:	f853 2c34 	ldr.w	r2, [r3, #-52]
 8002f06:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002f0a:	491c      	ldr	r1, [pc, #112]	; (8002f7c <GetString+0xe4>)
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f008 fd05 	bl	800b91c <siprintf>
            strcat(concat_buffer, buffer);
 8002f12:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002f16:	f107 031c 	add.w	r3, r7, #28
 8002f1a:	4611      	mov	r1, r2
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f008 fd1d 	bl	800b95c <strcat>
 8002f22:	e015      	b.n	8002f50 <GetString+0xb8>
        }
        else
        {
            sprintf(buffer, "%d -> ", getStep[i]);
 8002f24:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002f2e:	4413      	add	r3, r2
 8002f30:	f853 2c34 	ldr.w	r2, [r3, #-52]
 8002f34:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002f38:	4911      	ldr	r1, [pc, #68]	; (8002f80 <GetString+0xe8>)
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f008 fcee 	bl	800b91c <siprintf>
            strcat(concat_buffer, buffer);
 8002f40:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002f44:	f107 031c 	add.w	r3, r7, #28
 8002f48:	4611      	mov	r1, r2
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f008 fd06 	bl	800b95c <strcat>
    for (int8_t i = 0; i < length; i++)
 8002f50:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	3301      	adds	r3, #1
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8002f5e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002f62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f64:	429a      	cmp	r2, r3
 8002f66:	dcc0      	bgt.n	8002eea <GetString+0x52>
        }
    }
    strcpy(Result, concat_buffer);
 8002f68:	f107 031c 	add.w	r3, r7, #28
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	6838      	ldr	r0, [r7, #0]
 8002f70:	f008 fd03 	bl	800b97a <strcpy>
}
 8002f74:	bf00      	nop
 8002f76:	3740      	adds	r7, #64	; 0x40
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	0800fc7c 	.word	0x0800fc7c
 8002f80:	0800fc80 	.word	0x0800fc80

08002f84 <GetString_Transfer>:
void GetString_Transfer(int8_t Dau,int8_t Cuoi ,char *Result)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b092      	sub	sp, #72	; 0x48
 8002f88:	af02      	add	r7, sp, #8
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	603a      	str	r2, [r7, #0]
 8002f8e:	71fb      	strb	r3, [r7, #7]
 8002f90:	460b      	mov	r3, r1
 8002f92:	71bb      	strb	r3, [r7, #6]
    char buffer[5] = {0};
 8002f94:	2300      	movs	r3, #0
 8002f96:	633b      	str	r3, [r7, #48]	; 0x30
 8002f98:	2300      	movs	r3, #0
 8002f9a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    char concat_buffer[20] = {0};
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	61fb      	str	r3, [r7, #28]
 8002fa2:	f107 0320 	add.w	r3, r7, #32
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	601a      	str	r2, [r3, #0]
 8002faa:	605a      	str	r2, [r3, #4]
 8002fac:	609a      	str	r2, [r3, #8]
 8002fae:	60da      	str	r2, [r3, #12]
    int getStep[4];
    int length = Solver(Dau,Cuoi,12,0,getStep,0);
 8002fb0:	f997 0007 	ldrsb.w	r0, [r7, #7]
 8002fb4:	f997 1006 	ldrsb.w	r1, [r7, #6]
 8002fb8:	2300      	movs	r3, #0
 8002fba:	9301      	str	r3, [sp, #4]
 8002fbc:	f107 030c 	add.w	r3, r7, #12
 8002fc0:	9300      	str	r3, [sp, #0]
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	220c      	movs	r2, #12
 8002fc6:	f7ff fe97 	bl	8002cf8 <Solver>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	63bb      	str	r3, [r7, #56]	; 0x38
    for (int8_t i = 0; i < length; i++)
 8002fce:	2300      	movs	r3, #0
 8002fd0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8002fd4:	e039      	b.n	800304a <GetString_Transfer+0xc6>
    {
        if (i == length - 1)
 8002fd6:	f997 203f 	ldrsb.w	r2, [r7, #63]	; 0x3f
 8002fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d116      	bne.n	8003010 <GetString_Transfer+0x8c>
        {
            sprintf(buffer, "%d\"", getStep[i]);
 8002fe2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002fec:	4413      	add	r3, r2
 8002fee:	f853 2c34 	ldr.w	r2, [r3, #-52]
 8002ff2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002ff6:	491c      	ldr	r1, [pc, #112]	; (8003068 <GetString_Transfer+0xe4>)
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f008 fc8f 	bl	800b91c <siprintf>
            strcat(concat_buffer, buffer);
 8002ffe:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003002:	f107 031c 	add.w	r3, r7, #28
 8003006:	4611      	mov	r1, r2
 8003008:	4618      	mov	r0, r3
 800300a:	f008 fca7 	bl	800b95c <strcat>
 800300e:	e015      	b.n	800303c <GetString_Transfer+0xb8>
        }
        else
        {
            sprintf(buffer, "%d ", getStep[i]);
 8003010:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800301a:	4413      	add	r3, r2
 800301c:	f853 2c34 	ldr.w	r2, [r3, #-52]
 8003020:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003024:	4911      	ldr	r1, [pc, #68]	; (800306c <GetString_Transfer+0xe8>)
 8003026:	4618      	mov	r0, r3
 8003028:	f008 fc78 	bl	800b91c <siprintf>
            strcat(concat_buffer, buffer);
 800302c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003030:	f107 031c 	add.w	r3, r7, #28
 8003034:	4611      	mov	r1, r2
 8003036:	4618      	mov	r0, r3
 8003038:	f008 fc90 	bl	800b95c <strcat>
    for (int8_t i = 0; i < length; i++)
 800303c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8003040:	b2db      	uxtb	r3, r3
 8003042:	3301      	adds	r3, #1
 8003044:	b2db      	uxtb	r3, r3
 8003046:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800304a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800304e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003050:	429a      	cmp	r2, r3
 8003052:	dcc0      	bgt.n	8002fd6 <GetString_Transfer+0x52>
        }
    }
    strcpy(Result, concat_buffer);
 8003054:	f107 031c 	add.w	r3, r7, #28
 8003058:	4619      	mov	r1, r3
 800305a:	6838      	ldr	r0, [r7, #0]
 800305c:	f008 fc8d 	bl	800b97a <strcpy>
}
 8003060:	bf00      	nop
 8003062:	3740      	adds	r7, #64	; 0x40
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	0800fc88 	.word	0x0800fc88
 800306c:	0800fc8c 	.word	0x0800fc8c

08003070 <Line_Follower_PID>:
	PWM_Output_R = RPM_R*7200/388 + adder_R;
	return PWM_Output_R;
}
#endif
int16_t Line_Follower_PID (int Setpoint , int Error,PIDController *Car)
{
 8003070:	b480      	push	{r7}
 8003072:	b085      	sub	sp, #20
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	607a      	str	r2, [r7, #4]
	Car->propotional = Setpoint - Error;
 800307c:	68fa      	ldr	r2, [r7, #12]
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	ee07 3a90 	vmov	s15, r3
 8003086:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	edc3 7a08 	vstr	s15, [r3, #32]
	Car->integral = Car->integral + Error;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	ee07 3a90 	vmov	s15, r3
 800309c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	Car->derivative = Error - Car->previous_error;
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	ee07 3a90 	vmov	s15, r3
 80030b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	edd3 7a07 	vldr	s15, [r3, #28]
 80030ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	PID_val = (Car->Kp * Car->propotional) + (Car->Ki * Car->integral) + (Car->Kd * Car->derivative);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	ed93 7a01 	vldr	s14, [r3, #4]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	edd3 7a08 	vldr	s15, [r3, #32]
 80030d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	edd3 6a02 	vldr	s13, [r3, #8]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80030e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	edd3 6a03 	vldr	s13, [r3, #12]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80030f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003100:	ee17 3a90 	vmov	r3, s15
 8003104:	b21a      	sxth	r2, r3
 8003106:	4b09      	ldr	r3, [pc, #36]	; (800312c <Line_Follower_PID+0xbc>)
 8003108:	801a      	strh	r2, [r3, #0]
	Car->previous_error = Error;
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	ee07 3a90 	vmov	s15, r3
 8003110:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	edc3 7a07 	vstr	s15, [r3, #28]
	return PID_val;
 800311a:	4b04      	ldr	r3, [pc, #16]	; (800312c <Line_Follower_PID+0xbc>)
 800311c:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8003120:	4618      	mov	r0, r3
 8003122:	3714      	adds	r7, #20
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr
 800312c:	2000034c 	.word	0x2000034c

08003130 <PIDController_Car_Init>:
void PIDController_Car_Init (PIDController *Car){
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
	Car->derivative = 0.0f;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f04f 0200 	mov.w	r2, #0
 800313e:	629a      	str	r2, [r3, #40]	; 0x28
	Car->integral = 0.0f;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f04f 0200 	mov.w	r2, #0
 8003146:	625a      	str	r2, [r3, #36]	; 0x24
	Car->previous_error = 0.0f;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f04f 0200 	mov.w	r2, #0
 800314e:	61da      	str	r2, [r3, #28]
	Car->adder_out = 0.0f;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003156:	bf00      	nop
 8003158:	370c      	adds	r7, #12
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
	...

08003164 <__io_putchar>:
void MFRC522_Halt(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE {
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART2 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 0xFFFF);
 800316c:	1d39      	adds	r1, r7, #4
 800316e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003172:	2201      	movs	r2, #1
 8003174:	4803      	ldr	r0, [pc, #12]	; (8003184 <__io_putchar+0x20>)
 8003176:	f006 ffa8 	bl	800a0ca <HAL_UART_Transmit>
	return ch;
 800317a:	687b      	ldr	r3, [r7, #4]
}
 800317c:	4618      	mov	r0, r3
 800317e:	3708      	adds	r7, #8
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	200005a0 	.word	0x200005a0

08003188 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b0a0      	sub	sp, #128	; 0x80
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
	strcpy(Rx_Buffer_copied,Rx_Buffer);
 8003190:	49ac      	ldr	r1, [pc, #688]	; (8003444 <HAL_UART_RxCpltCallback+0x2bc>)
 8003192:	48ad      	ldr	r0, [pc, #692]	; (8003448 <HAL_UART_RxCpltCallback+0x2c0>)
 8003194:	f008 fbf1 	bl	800b97a <strcpy>
	char *ID_number  = strtok(Rx_Buffer_copied," ");
 8003198:	49ac      	ldr	r1, [pc, #688]	; (800344c <HAL_UART_RxCpltCallback+0x2c4>)
 800319a:	48ab      	ldr	r0, [pc, #684]	; (8003448 <HAL_UART_RxCpltCallback+0x2c0>)
 800319c:	f009 fa84 	bl	800c6a8 <strtok>
 80031a0:	67f8      	str	r0, [r7, #124]	; 0x7c
	ID = strtod(ID_number,NULL);
 80031a2:	2100      	movs	r1, #0
 80031a4:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80031a6:	f009 fa19 	bl	800c5dc <strtod>
 80031aa:	ec53 2b10 	vmov	r2, r3, d0
 80031ae:	4610      	mov	r0, r2
 80031b0:	4619      	mov	r1, r3
 80031b2:	f7fd fd01 	bl	8000bb8 <__aeabi_d2uiz>
 80031b6:	4603      	mov	r3, r0
 80031b8:	b2da      	uxtb	r2, r3
 80031ba:	4ba5      	ldr	r3, [pc, #660]	; (8003450 <HAL_UART_RxCpltCallback+0x2c8>)
 80031bc:	701a      	strb	r2, [r3, #0]
	if(ID == ID_PID_MESS)
 80031be:	4ba4      	ldr	r3, [pc, #656]	; (8003450 <HAL_UART_RxCpltCallback+0x2c8>)
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d12a      	bne.n	800321c <HAL_UART_RxCpltCallback+0x94>
	{
		char *Data1 = strtok(NULL," ");
 80031c6:	49a1      	ldr	r1, [pc, #644]	; (800344c <HAL_UART_RxCpltCallback+0x2c4>)
 80031c8:	2000      	movs	r0, #0
 80031ca:	f009 fa6d 	bl	800c6a8 <strtok>
 80031ce:	66f8      	str	r0, [r7, #108]	; 0x6c
		char *Data2 = strtok(NULL," ");
 80031d0:	499e      	ldr	r1, [pc, #632]	; (800344c <HAL_UART_RxCpltCallback+0x2c4>)
 80031d2:	2000      	movs	r0, #0
 80031d4:	f009 fa68 	bl	800c6a8 <strtok>
 80031d8:	66b8      	str	r0, [r7, #104]	; 0x68
		char *Data3 = strtok(NULL,"");
 80031da:	499e      	ldr	r1, [pc, #632]	; (8003454 <HAL_UART_RxCpltCallback+0x2cc>)
 80031dc:	2000      	movs	r0, #0
 80031de:	f009 fa63 	bl	800c6a8 <strtok>
 80031e2:	6678      	str	r0, [r7, #100]	; 0x64
		Kp = strtof(Data1,NULL);
 80031e4:	2100      	movs	r1, #0
 80031e6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80031e8:	f009 fa04 	bl	800c5f4 <strtof>
 80031ec:	eef0 7a40 	vmov.f32	s15, s0
 80031f0:	4b99      	ldr	r3, [pc, #612]	; (8003458 <HAL_UART_RxCpltCallback+0x2d0>)
 80031f2:	edc3 7a00 	vstr	s15, [r3]
		Ki = strtof(Data2,NULL);
 80031f6:	2100      	movs	r1, #0
 80031f8:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80031fa:	f009 f9fb 	bl	800c5f4 <strtof>
 80031fe:	eef0 7a40 	vmov.f32	s15, s0
 8003202:	4b96      	ldr	r3, [pc, #600]	; (800345c <HAL_UART_RxCpltCallback+0x2d4>)
 8003204:	edc3 7a00 	vstr	s15, [r3]
		Kd = strtof(Data3,NULL);
 8003208:	2100      	movs	r1, #0
 800320a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800320c:	f009 f9f2 	bl	800c5f4 <strtof>
 8003210:	eef0 7a40 	vmov.f32	s15, s0
 8003214:	4b92      	ldr	r3, [pc, #584]	; (8003460 <HAL_UART_RxCpltCallback+0x2d8>)
 8003216:	edc3 7a00 	vstr	s15, [r3]
 800321a:	e154      	b.n	80034c6 <HAL_UART_RxCpltCallback+0x33e>
	}
	else if(ID == ID_STATUS_MESS)
 800321c:	4b8c      	ldr	r3, [pc, #560]	; (8003450 <HAL_UART_RxCpltCallback+0x2c8>)
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	2b02      	cmp	r3, #2
 8003222:	d10c      	bne.n	800323e <HAL_UART_RxCpltCallback+0xb6>
	{
		char *Data1 = strtok(NULL," ");
 8003224:	4989      	ldr	r1, [pc, #548]	; (800344c <HAL_UART_RxCpltCallback+0x2c4>)
 8003226:	2000      	movs	r0, #0
 8003228:	f009 fa3e 	bl	800c6a8 <strtok>
 800322c:	6738      	str	r0, [r7, #112]	; 0x70
		Status = (uint8_t)atoi(Data1);
 800322e:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8003230:	f007 fec6 	bl	800afc0 <atoi>
 8003234:	4603      	mov	r3, r0
 8003236:	b2da      	uxtb	r2, r3
 8003238:	4b8a      	ldr	r3, [pc, #552]	; (8003464 <HAL_UART_RxCpltCallback+0x2dc>)
 800323a:	701a      	strb	r2, [r3, #0]
 800323c:	e143      	b.n	80034c6 <HAL_UART_RxCpltCallback+0x33e>
	}
	else if(ID == ID_FIRST_LAST_MESS)
 800323e:	4b84      	ldr	r3, [pc, #528]	; (8003450 <HAL_UART_RxCpltCallback+0x2c8>)
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	2b03      	cmp	r3, #3
 8003244:	d11b      	bne.n	800327e <HAL_UART_RxCpltCallback+0xf6>
	{
		char *Data1 = strtok(NULL," ");
 8003246:	4981      	ldr	r1, [pc, #516]	; (800344c <HAL_UART_RxCpltCallback+0x2c4>)
 8003248:	2000      	movs	r0, #0
 800324a:	f009 fa2d 	bl	800c6a8 <strtok>
 800324e:	67b8      	str	r0, [r7, #120]	; 0x78
		char *Data2 = strtok(NULL," ");
 8003250:	497e      	ldr	r1, [pc, #504]	; (800344c <HAL_UART_RxCpltCallback+0x2c4>)
 8003252:	2000      	movs	r0, #0
 8003254:	f009 fa28 	bl	800c6a8 <strtok>
 8003258:	6778      	str	r0, [r7, #116]	; 0x74
		First_point = atoi(Data1);
 800325a:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800325c:	f007 feb0 	bl	800afc0 <atoi>
 8003260:	4603      	mov	r3, r0
 8003262:	b25a      	sxtb	r2, r3
 8003264:	4b80      	ldr	r3, [pc, #512]	; (8003468 <HAL_UART_RxCpltCallback+0x2e0>)
 8003266:	701a      	strb	r2, [r3, #0]
		Last_point = atoi(Data2);
 8003268:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800326a:	f007 fea9 	bl	800afc0 <atoi>
 800326e:	4603      	mov	r3, r0
 8003270:	b25a      	sxtb	r2, r3
 8003272:	4b7e      	ldr	r3, [pc, #504]	; (800346c <HAL_UART_RxCpltCallback+0x2e4>)
 8003274:	701a      	strb	r2, [r3, #0]
		Begin_solving = 1;
 8003276:	4b7e      	ldr	r3, [pc, #504]	; (8003470 <HAL_UART_RxCpltCallback+0x2e8>)
 8003278:	2201      	movs	r2, #1
 800327a:	701a      	strb	r2, [r3, #0]
 800327c:	e123      	b.n	80034c6 <HAL_UART_RxCpltCallback+0x33e>
	}
	else if(ID == DATA_ERROR_REQ && Trans_flag == DATA_TRANS_EN)
 800327e:	4b74      	ldr	r3, [pc, #464]	; (8003450 <HAL_UART_RxCpltCallback+0x2c8>)
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	2b04      	cmp	r3, #4
 8003284:	d114      	bne.n	80032b0 <HAL_UART_RxCpltCallback+0x128>
 8003286:	4b7b      	ldr	r3, [pc, #492]	; (8003474 <HAL_UART_RxCpltCallback+0x2ec>)
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	2b01      	cmp	r3, #1
 800328c:	d110      	bne.n	80032b0 <HAL_UART_RxCpltCallback+0x128>
	{
		char Error_Str[4];
		sprintf(Error_Str,"%d",Error_Val);
 800328e:	4b7a      	ldr	r3, [pc, #488]	; (8003478 <HAL_UART_RxCpltCallback+0x2f0>)
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003296:	4979      	ldr	r1, [pc, #484]	; (800347c <HAL_UART_RxCpltCallback+0x2f4>)
 8003298:	4618      	mov	r0, r3
 800329a:	f008 fb3f 	bl	800b91c <siprintf>
		HAL_UART_Transmit(&huart6, Error_Str, sizeof(Error_Str), 5000);
 800329e:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80032a2:	f241 3388 	movw	r3, #5000	; 0x1388
 80032a6:	2204      	movs	r2, #4
 80032a8:	4875      	ldr	r0, [pc, #468]	; (8003480 <HAL_UART_RxCpltCallback+0x2f8>)
 80032aa:	f006 ff0e 	bl	800a0ca <HAL_UART_Transmit>
	{
 80032ae:	e10a      	b.n	80034c6 <HAL_UART_RxCpltCallback+0x33e>
	}
	else if(ID == DATA_LEFT_REQ && Trans_flag == DATA_TRANS_EN)
 80032b0:	4b67      	ldr	r3, [pc, #412]	; (8003450 <HAL_UART_RxCpltCallback+0x2c8>)
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	2b05      	cmp	r3, #5
 80032b6:	d116      	bne.n	80032e6 <HAL_UART_RxCpltCallback+0x15e>
 80032b8:	4b6e      	ldr	r3, [pc, #440]	; (8003474 <HAL_UART_RxCpltCallback+0x2ec>)
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d112      	bne.n	80032e6 <HAL_UART_RxCpltCallback+0x15e>
	{
		char Speed_Left_Str[5];
		sprintf(Speed_Left_Str,"%d",rateLeft);
 80032c0:	4b70      	ldr	r3, [pc, #448]	; (8003484 <HAL_UART_RxCpltCallback+0x2fc>)
 80032c2:	881b      	ldrh	r3, [r3, #0]
 80032c4:	b21b      	sxth	r3, r3
 80032c6:	461a      	mov	r2, r3
 80032c8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80032cc:	496b      	ldr	r1, [pc, #428]	; (800347c <HAL_UART_RxCpltCallback+0x2f4>)
 80032ce:	4618      	mov	r0, r3
 80032d0:	f008 fb24 	bl	800b91c <siprintf>
		HAL_UART_Transmit(&huart6, Speed_Left_Str, sizeof(Speed_Left_Str),5000);
 80032d4:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80032d8:	f241 3388 	movw	r3, #5000	; 0x1388
 80032dc:	2205      	movs	r2, #5
 80032de:	4868      	ldr	r0, [pc, #416]	; (8003480 <HAL_UART_RxCpltCallback+0x2f8>)
 80032e0:	f006 fef3 	bl	800a0ca <HAL_UART_Transmit>
	{
 80032e4:	e0ef      	b.n	80034c6 <HAL_UART_RxCpltCallback+0x33e>
	}
	else if(ID == DATA_RIGHT_REQ && Trans_flag == DATA_TRANS_EN)
 80032e6:	4b5a      	ldr	r3, [pc, #360]	; (8003450 <HAL_UART_RxCpltCallback+0x2c8>)
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	2b06      	cmp	r3, #6
 80032ec:	d116      	bne.n	800331c <HAL_UART_RxCpltCallback+0x194>
 80032ee:	4b61      	ldr	r3, [pc, #388]	; (8003474 <HAL_UART_RxCpltCallback+0x2ec>)
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d112      	bne.n	800331c <HAL_UART_RxCpltCallback+0x194>
	{
		char Speed_Right_Str[5];
		sprintf(Speed_Right_Str,"%d",rateRight);
 80032f6:	4b64      	ldr	r3, [pc, #400]	; (8003488 <HAL_UART_RxCpltCallback+0x300>)
 80032f8:	881b      	ldrh	r3, [r3, #0]
 80032fa:	b21b      	sxth	r3, r3
 80032fc:	461a      	mov	r2, r3
 80032fe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003302:	495e      	ldr	r1, [pc, #376]	; (800347c <HAL_UART_RxCpltCallback+0x2f4>)
 8003304:	4618      	mov	r0, r3
 8003306:	f008 fb09 	bl	800b91c <siprintf>
		HAL_UART_Transmit(&huart6, Speed_Right_Str, sizeof(Speed_Right_Str), 5000);
 800330a:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800330e:	f241 3388 	movw	r3, #5000	; 0x1388
 8003312:	2205      	movs	r2, #5
 8003314:	485a      	ldr	r0, [pc, #360]	; (8003480 <HAL_UART_RxCpltCallback+0x2f8>)
 8003316:	f006 fed8 	bl	800a0ca <HAL_UART_Transmit>
	{
 800331a:	e0d4      	b.n	80034c6 <HAL_UART_RxCpltCallback+0x33e>
	}
	else if(ID == DATA_PID_REQ)
 800331c:	4b4c      	ldr	r3, [pc, #304]	; (8003450 <HAL_UART_RxCpltCallback+0x2c8>)
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	2b07      	cmp	r3, #7
 8003322:	d14b      	bne.n	80033bc <HAL_UART_RxCpltCallback+0x234>
	{
	  char Kp_string[Kp_Buffer_Size+1],Ki_string[Ki_Buffer_Size+1],Kd_string[Kd_Buffer_Size+1],Final_string[Send_Buffer_Size];
	  memset(Final_string,0,sizeof(Final_string));
 8003324:	f107 0320 	add.w	r3, r7, #32
 8003328:	2216      	movs	r2, #22
 800332a:	2100      	movs	r1, #0
 800332c:	4618      	mov	r0, r3
 800332e:	f007 fe83 	bl	800b038 <memset>
	  sprintf(Kp_string,"%06.2f ",Kp);
 8003332:	4b49      	ldr	r3, [pc, #292]	; (8003458 <HAL_UART_RxCpltCallback+0x2d0>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4618      	mov	r0, r3
 8003338:	f7fd f90e 	bl	8000558 <__aeabi_f2d>
 800333c:	4602      	mov	r2, r0
 800333e:	460b      	mov	r3, r1
 8003340:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8003344:	4951      	ldr	r1, [pc, #324]	; (800348c <HAL_UART_RxCpltCallback+0x304>)
 8003346:	f008 fae9 	bl	800b91c <siprintf>
	  sprintf(Ki_string,"%06.2f ",Ki);
 800334a:	4b44      	ldr	r3, [pc, #272]	; (800345c <HAL_UART_RxCpltCallback+0x2d4>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4618      	mov	r0, r3
 8003350:	f7fd f902 	bl	8000558 <__aeabi_f2d>
 8003354:	4602      	mov	r2, r0
 8003356:	460b      	mov	r3, r1
 8003358:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800335c:	494b      	ldr	r1, [pc, #300]	; (800348c <HAL_UART_RxCpltCallback+0x304>)
 800335e:	f008 fadd 	bl	800b91c <siprintf>
	  sprintf(Kd_string,"%06.2f\"",Kd);
 8003362:	4b3f      	ldr	r3, [pc, #252]	; (8003460 <HAL_UART_RxCpltCallback+0x2d8>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4618      	mov	r0, r3
 8003368:	f7fd f8f6 	bl	8000558 <__aeabi_f2d>
 800336c:	4602      	mov	r2, r0
 800336e:	460b      	mov	r3, r1
 8003370:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003374:	4946      	ldr	r1, [pc, #280]	; (8003490 <HAL_UART_RxCpltCallback+0x308>)
 8003376:	f008 fad1 	bl	800b91c <siprintf>
	  strcat(Final_string,Kp_string);
 800337a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800337e:	f107 0320 	add.w	r3, r7, #32
 8003382:	4611      	mov	r1, r2
 8003384:	4618      	mov	r0, r3
 8003386:	f008 fae9 	bl	800b95c <strcat>
	  strcat(Final_string,Ki_string);
 800338a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800338e:	f107 0320 	add.w	r3, r7, #32
 8003392:	4611      	mov	r1, r2
 8003394:	4618      	mov	r0, r3
 8003396:	f008 fae1 	bl	800b95c <strcat>
	  strcat(Final_string,Kd_string);
 800339a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800339e:	f107 0320 	add.w	r3, r7, #32
 80033a2:	4611      	mov	r1, r2
 80033a4:	4618      	mov	r0, r3
 80033a6:	f008 fad9 	bl	800b95c <strcat>
	  HAL_UART_Transmit(&huart6, Final_string, sizeof(Final_string), 10000);
 80033aa:	f107 0120 	add.w	r1, r7, #32
 80033ae:	f242 7310 	movw	r3, #10000	; 0x2710
 80033b2:	2216      	movs	r2, #22
 80033b4:	4832      	ldr	r0, [pc, #200]	; (8003480 <HAL_UART_RxCpltCallback+0x2f8>)
 80033b6:	f006 fe88 	bl	800a0ca <HAL_UART_Transmit>
 80033ba:	e084      	b.n	80034c6 <HAL_UART_RxCpltCallback+0x33e>
	}
	else if(ID == DATA_BOOT_REQ)
 80033bc:	4b24      	ldr	r3, [pc, #144]	; (8003450 <HAL_UART_RxCpltCallback+0x2c8>)
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	2b08      	cmp	r3, #8
 80033c2:	d10a      	bne.n	80033da <HAL_UART_RxCpltCallback+0x252>
	{
		char Boot[1] = "1";
 80033c4:	2331      	movs	r3, #49	; 0x31
 80033c6:	773b      	strb	r3, [r7, #28]
		HAL_UART_Transmit(&huart6, Boot, sizeof(Boot), 1000);
 80033c8:	f107 011c 	add.w	r1, r7, #28
 80033cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033d0:	2201      	movs	r2, #1
 80033d2:	482b      	ldr	r0, [pc, #172]	; (8003480 <HAL_UART_RxCpltCallback+0x2f8>)
 80033d4:	f006 fe79 	bl	800a0ca <HAL_UART_Transmit>
 80033d8:	e075      	b.n	80034c6 <HAL_UART_RxCpltCallback+0x33e>
	}
	else if(ID == DATA_PATH_REQ)
 80033da:	4b1d      	ldr	r3, [pc, #116]	; (8003450 <HAL_UART_RxCpltCallback+0x2c8>)
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	2b09      	cmp	r3, #9
 80033e0:	d11a      	bne.n	8003418 <HAL_UART_RxCpltCallback+0x290>
	{
		char PATH_DIR[15];
		memset(PATH_DIR,0,sizeof(PATH_DIR));
 80033e2:	f107 030c 	add.w	r3, r7, #12
 80033e6:	220f      	movs	r2, #15
 80033e8:	2100      	movs	r1, #0
 80033ea:	4618      	mov	r0, r3
 80033ec:	f007 fe24 	bl	800b038 <memset>
		GetString_Transfer(First_point, Last_point, PATH_DIR);
 80033f0:	4b1d      	ldr	r3, [pc, #116]	; (8003468 <HAL_UART_RxCpltCallback+0x2e0>)
 80033f2:	f993 3000 	ldrsb.w	r3, [r3]
 80033f6:	4a1d      	ldr	r2, [pc, #116]	; (800346c <HAL_UART_RxCpltCallback+0x2e4>)
 80033f8:	f992 1000 	ldrsb.w	r1, [r2]
 80033fc:	f107 020c 	add.w	r2, r7, #12
 8003400:	4618      	mov	r0, r3
 8003402:	f7ff fdbf 	bl	8002f84 <GetString_Transfer>
		HAL_UART_Transmit(&huart6, PATH_DIR, sizeof(PATH_DIR), 5000);
 8003406:	f107 010c 	add.w	r1, r7, #12
 800340a:	f241 3388 	movw	r3, #5000	; 0x1388
 800340e:	220f      	movs	r2, #15
 8003410:	481b      	ldr	r0, [pc, #108]	; (8003480 <HAL_UART_RxCpltCallback+0x2f8>)
 8003412:	f006 fe5a 	bl	800a0ca <HAL_UART_Transmit>
 8003416:	e056      	b.n	80034c6 <HAL_UART_RxCpltCallback+0x33e>
	}
	else if(ID == DATA_POINT_REQ)
 8003418:	4b0d      	ldr	r3, [pc, #52]	; (8003450 <HAL_UART_RxCpltCallback+0x2c8>)
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	2b0a      	cmp	r3, #10
 800341e:	d13b      	bne.n	8003498 <HAL_UART_RxCpltCallback+0x310>
	{
		char STATION_ID_str[4];
		sprintf(STATION_ID_str,"%d",STATION_ID);
 8003420:	4b1c      	ldr	r3, [pc, #112]	; (8003494 <HAL_UART_RxCpltCallback+0x30c>)
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	461a      	mov	r2, r3
 8003426:	f107 0308 	add.w	r3, r7, #8
 800342a:	4914      	ldr	r1, [pc, #80]	; (800347c <HAL_UART_RxCpltCallback+0x2f4>)
 800342c:	4618      	mov	r0, r3
 800342e:	f008 fa75 	bl	800b91c <siprintf>
		HAL_UART_Transmit(&huart6, STATION_ID_str, sizeof(STATION_ID_str), 2000);
 8003432:	f107 0108 	add.w	r1, r7, #8
 8003436:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800343a:	2204      	movs	r2, #4
 800343c:	4810      	ldr	r0, [pc, #64]	; (8003480 <HAL_UART_RxCpltCallback+0x2f8>)
 800343e:	f006 fe44 	bl	800a0ca <HAL_UART_Transmit>
 8003442:	e040      	b.n	80034c6 <HAL_UART_RxCpltCallback+0x33e>
 8003444:	20000674 	.word	0x20000674
 8003448:	200005f0 	.word	0x200005f0
 800344c:	0800fc90 	.word	0x0800fc90
 8003450:	200004a6 	.word	0x200004a6
 8003454:	0800fc94 	.word	0x0800fc94
 8003458:	2000001c 	.word	0x2000001c
 800345c:	20000280 	.word	0x20000280
 8003460:	20000020 	.word	0x20000020
 8003464:	20000007 	.word	0x20000007
 8003468:	2000026d 	.word	0x2000026d
 800346c:	2000026e 	.word	0x2000026e
 8003470:	2000026f 	.word	0x2000026f
 8003474:	2000026c 	.word	0x2000026c
 8003478:	200004c4 	.word	0x200004c4
 800347c:	0800fc98 	.word	0x0800fc98
 8003480:	20000364 	.word	0x20000364
 8003484:	2000027a 	.word	0x2000027a
 8003488:	2000027c 	.word	0x2000027c
 800348c:	0800fc9c 	.word	0x0800fc9c
 8003490:	0800fca4 	.word	0x0800fca4
 8003494:	20000270 	.word	0x20000270
	}
	else if(ID == DATA_RFID_REQ)
 8003498:	4b14      	ldr	r3, [pc, #80]	; (80034ec <HAL_UART_RxCpltCallback+0x364>)
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	2b0b      	cmp	r3, #11
 800349e:	d112      	bne.n	80034c6 <HAL_UART_RxCpltCallback+0x33e>
	{
		if(RFID_Str == "d1b0af21ef")
 80034a0:	4a13      	ldr	r2, [pc, #76]	; (80034f0 <HAL_UART_RxCpltCallback+0x368>)
 80034a2:	4b14      	ldr	r3, [pc, #80]	; (80034f4 <HAL_UART_RxCpltCallback+0x36c>)
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d107      	bne.n	80034b8 <HAL_UART_RxCpltCallback+0x330>
		{
			strcpy(RFID_Str,"83ee851af2");
 80034a8:	4b11      	ldr	r3, [pc, #68]	; (80034f0 <HAL_UART_RxCpltCallback+0x368>)
 80034aa:	4a13      	ldr	r2, [pc, #76]	; (80034f8 <HAL_UART_RxCpltCallback+0x370>)
 80034ac:	ca07      	ldmia	r2, {r0, r1, r2}
 80034ae:	c303      	stmia	r3!, {r0, r1}
 80034b0:	801a      	strh	r2, [r3, #0]
 80034b2:	3302      	adds	r3, #2
 80034b4:	0c12      	lsrs	r2, r2, #16
 80034b6:	701a      	strb	r2, [r3, #0]
		}
		HAL_UART_Transmit(&huart6, RFID_Str,sizeof(RFID_Str),2000);
 80034b8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80034bc:	2214      	movs	r2, #20
 80034be:	490c      	ldr	r1, [pc, #48]	; (80034f0 <HAL_UART_RxCpltCallback+0x368>)
 80034c0:	480e      	ldr	r0, [pc, #56]	; (80034fc <HAL_UART_RxCpltCallback+0x374>)
 80034c2:	f006 fe02 	bl	800a0ca <HAL_UART_Transmit>
	}
	memset(Rx_Buffer_copied,0,sizeof(Rx_Buffer_copied));
 80034c6:	2216      	movs	r2, #22
 80034c8:	2100      	movs	r1, #0
 80034ca:	480d      	ldr	r0, [pc, #52]	; (8003500 <HAL_UART_RxCpltCallback+0x378>)
 80034cc:	f007 fdb4 	bl	800b038 <memset>
	memset(Rx_Buffer,0,sizeof(Rx_Buffer));
 80034d0:	2216      	movs	r2, #22
 80034d2:	2100      	movs	r1, #0
 80034d4:	480b      	ldr	r0, [pc, #44]	; (8003504 <HAL_UART_RxCpltCallback+0x37c>)
 80034d6:	f007 fdaf 	bl	800b038 <memset>
	HAL_UART_Receive_IT(&huart6, Rx_Buffer, RECEIVE_BUFF_SIZE);
 80034da:	2216      	movs	r2, #22
 80034dc:	4909      	ldr	r1, [pc, #36]	; (8003504 <HAL_UART_RxCpltCallback+0x37c>)
 80034de:	4807      	ldr	r0, [pc, #28]	; (80034fc <HAL_UART_RxCpltCallback+0x374>)
 80034e0:	f006 fe85 	bl	800a1ee <HAL_UART_Receive_IT>

}
 80034e4:	bf00      	nop
 80034e6:	3780      	adds	r7, #128	; 0x80
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	200004a6 	.word	0x200004a6
 80034f0:	20000024 	.word	0x20000024
 80034f4:	0800fcac 	.word	0x0800fcac
 80034f8:	0800fcb8 	.word	0x0800fcb8
 80034fc:	20000364 	.word	0x20000364
 8003500:	200005f0 	.word	0x200005f0
 8003504:	20000674 	.word	0x20000674

08003508 <Encoder_Read>:

void Encoder_Read()
{
 8003508:	b480      	push	{r7}
 800350a:	af00      	add	r7, sp, #0
	countLeft = __HAL_TIM_GET_COUNTER(&htim2);
 800350c:	4b08      	ldr	r3, [pc, #32]	; (8003530 <Encoder_Read+0x28>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003512:	b21a      	sxth	r2, r3
 8003514:	4b07      	ldr	r3, [pc, #28]	; (8003534 <Encoder_Read+0x2c>)
 8003516:	801a      	strh	r2, [r3, #0]
	countRight = __HAL_TIM_GET_COUNTER(&htim4);
 8003518:	4b07      	ldr	r3, [pc, #28]	; (8003538 <Encoder_Read+0x30>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351e:	b21a      	sxth	r2, r3
 8003520:	4b06      	ldr	r3, [pc, #24]	; (800353c <Encoder_Read+0x34>)
 8003522:	801a      	strh	r2, [r3, #0]
}
 8003524:	bf00      	nop
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	200006dc 	.word	0x200006dc
 8003534:	20000272 	.word	0x20000272
 8003538:	20000454 	.word	0x20000454
 800353c:	20000274 	.word	0x20000274

08003540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003546:	f002 fbc3 	bl	8005cd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800354a:	f000 f885 	bl	8003658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800354e:	f000 fbf1 	bl	8003d34 <MX_GPIO_Init>
  MX_DMA_Init();
 8003552:	f000 fbcf 	bl	8003cf4 <MX_DMA_Init>
  MX_USART6_UART_Init();
 8003556:	f000 fba3 	bl	8003ca0 <MX_USART6_UART_Init>
  MX_TIM2_Init();
 800355a:	f000 f9e3 	bl	8003924 <MX_TIM2_Init>
  MX_TIM3_Init();
 800355e:	f000 fa35 	bl	80039cc <MX_TIM3_Init>
  MX_ADC1_Init();
 8003562:	f000 f8e3 	bl	800372c <MX_ADC1_Init>
  MX_TIM4_Init();
 8003566:	f000 fa95 	bl	8003a94 <MX_TIM4_Init>
  MX_I2C3_Init();
 800356a:	f000 f977 	bl	800385c <MX_I2C3_Init>
  MX_TIM5_Init();
 800356e:	f000 fae5 	bl	8003b3c <MX_TIM5_Init>
  MX_SPI2_Init();
 8003572:	f000 f9a1 	bl	80038b8 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8003576:	f000 fb69 	bl	8003c4c <MX_USART1_UART_Init>
  MX_TIM9_Init();
 800357a:	f000 fb2d 	bl	8003bd8 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 800357e:	f7fe fd0a 	bl	8001f96 <lcd_init>
  MotorL_EnablePWM();
 8003582:	f7fe fd57 	bl	8002034 <MotorL_EnablePWM>
  MotorR_EnablePWM();
 8003586:	f7fe fd5f 	bl	8002048 <MotorR_EnablePWM>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &Sensor_ADC_Value, 6);
 800358a:	2206      	movs	r2, #6
 800358c:	4925      	ldr	r1, [pc, #148]	; (8003624 <main+0xe4>)
 800358e:	4826      	ldr	r0, [pc, #152]	; (8003628 <main+0xe8>)
 8003590:	f002 fdb8 	bl	8006104 <HAL_ADC_Start_DMA>
  HAL_UART_Receive_IT(&huart6, Rx_Buffer, RECEIVE_BUFF_SIZE);
 8003594:	2216      	movs	r2, #22
 8003596:	4925      	ldr	r1, [pc, #148]	; (800362c <main+0xec>)
 8003598:	4825      	ldr	r0, [pc, #148]	; (8003630 <main+0xf0>)
 800359a:	f006 fe28 	bl	800a1ee <HAL_UART_Receive_IT>
  /*Enable for encoder reading*/
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 800359e:	213c      	movs	r1, #60	; 0x3c
 80035a0:	4824      	ldr	r0, [pc, #144]	; (8003634 <main+0xf4>)
 80035a2:	f005 fe8f 	bl	80092c4 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 80035a6:	213c      	movs	r1, #60	; 0x3c
 80035a8:	4823      	ldr	r0, [pc, #140]	; (8003638 <main+0xf8>)
 80035aa:	f005 fe8b 	bl	80092c4 <HAL_TIM_Encoder_Start_IT>
  PIDController_Car_Init(&Car);
 80035ae:	4823      	ldr	r0, [pc, #140]	; (800363c <main+0xfc>)
 80035b0:	f7ff fdbe 	bl	8003130 <PIDController_Car_Init>
  MFRC522_Init();
 80035b4:	f001 fe99 	bl	80052ea <MFRC522_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		if(LCD_INIT_FLAG == 1)
 80035b8:	4b21      	ldr	r3, [pc, #132]	; (8003640 <main+0x100>)
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d114      	bne.n	80035ea <main+0xaa>
		{
			for(int i = 0; i < 3; i++)
 80035c0:	2300      	movs	r3, #0
 80035c2:	607b      	str	r3, [r7, #4]
 80035c4:	e00b      	b.n	80035de <main+0x9e>
			{
				lcd_init();
 80035c6:	f7fe fce6 	bl	8001f96 <lcd_init>
				HAL_Delay(500);
 80035ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80035ce:	f002 fbf1 	bl	8005db4 <HAL_Delay>
				lcd_send_cmd(0);
 80035d2:	2000      	movs	r0, #0
 80035d4:	f7fe fc68 	bl	8001ea8 <lcd_send_cmd>
			for(int i = 0; i < 3; i++)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	3301      	adds	r3, #1
 80035dc:	607b      	str	r3, [r7, #4]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	ddf0      	ble.n	80035c6 <main+0x86>
			}
			LCD_INIT_FLAG = 0;
 80035e4:	4b16      	ldr	r3, [pc, #88]	; (8003640 <main+0x100>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	701a      	strb	r2, [r3, #0]
		}
		lcd_send_cmd(1);
 80035ea:	2001      	movs	r0, #1
 80035ec:	f7fe fc5c 	bl	8001ea8 <lcd_send_cmd>
		while (menu_display)
 80035f0:	e013      	b.n	800361a <main+0xda>
		{
			Car.Kp = Kp;
 80035f2:	4b14      	ldr	r3, [pc, #80]	; (8003644 <main+0x104>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a11      	ldr	r2, [pc, #68]	; (800363c <main+0xfc>)
 80035f8:	6053      	str	r3, [r2, #4]
			Car.Kd = Kd;
 80035fa:	4b13      	ldr	r3, [pc, #76]	; (8003648 <main+0x108>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a0f      	ldr	r2, [pc, #60]	; (800363c <main+0xfc>)
 8003600:	60d3      	str	r3, [r2, #12]
			Menu_system_control(Menu_type, line);
 8003602:	4b12      	ldr	r3, [pc, #72]	; (800364c <main+0x10c>)
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	4a12      	ldr	r2, [pc, #72]	; (8003650 <main+0x110>)
 8003608:	7812      	ldrb	r2, [r2, #0]
 800360a:	4611      	mov	r1, r2
 800360c:	4618      	mov	r0, r3
 800360e:	f7fd fcf5 	bl	8000ffc <Menu_system_control>
			ScrollUp();
 8003612:	f001 f8d1 	bl	80047b8 <ScrollUp>
			SelectItem();
 8003616:	f001 f9ff 	bl	8004a18 <SelectItem>
		while (menu_display)
 800361a:	4b0e      	ldr	r3, [pc, #56]	; (8003654 <main+0x114>)
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d1e7      	bne.n	80035f2 <main+0xb2>
		if(LCD_INIT_FLAG == 1)
 8003622:	e7c9      	b.n	80035b8 <main+0x78>
 8003624:	200004a8 	.word	0x200004a8
 8003628:	20000558 	.word	0x20000558
 800362c:	20000674 	.word	0x20000674
 8003630:	20000364 	.word	0x20000364
 8003634:	20000454 	.word	0x20000454
 8003638:	200006dc 	.word	0x200006dc
 800363c:	20000038 	.word	0x20000038
 8003640:	20000008 	.word	0x20000008
 8003644:	2000001c 	.word	0x2000001c
 8003648:	20000020 	.word	0x20000020
 800364c:	20000001 	.word	0x20000001
 8003650:	20000003 	.word	0x20000003
 8003654:	20000000 	.word	0x20000000

08003658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b094      	sub	sp, #80	; 0x50
 800365c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800365e:	f107 0320 	add.w	r3, r7, #32
 8003662:	2230      	movs	r2, #48	; 0x30
 8003664:	2100      	movs	r1, #0
 8003666:	4618      	mov	r0, r3
 8003668:	f007 fce6 	bl	800b038 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800366c:	f107 030c 	add.w	r3, r7, #12
 8003670:	2200      	movs	r2, #0
 8003672:	601a      	str	r2, [r3, #0]
 8003674:	605a      	str	r2, [r3, #4]
 8003676:	609a      	str	r2, [r3, #8]
 8003678:	60da      	str	r2, [r3, #12]
 800367a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800367c:	2300      	movs	r3, #0
 800367e:	60bb      	str	r3, [r7, #8]
 8003680:	4b28      	ldr	r3, [pc, #160]	; (8003724 <SystemClock_Config+0xcc>)
 8003682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003684:	4a27      	ldr	r2, [pc, #156]	; (8003724 <SystemClock_Config+0xcc>)
 8003686:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800368a:	6413      	str	r3, [r2, #64]	; 0x40
 800368c:	4b25      	ldr	r3, [pc, #148]	; (8003724 <SystemClock_Config+0xcc>)
 800368e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003694:	60bb      	str	r3, [r7, #8]
 8003696:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003698:	2300      	movs	r3, #0
 800369a:	607b      	str	r3, [r7, #4]
 800369c:	4b22      	ldr	r3, [pc, #136]	; (8003728 <SystemClock_Config+0xd0>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80036a4:	4a20      	ldr	r2, [pc, #128]	; (8003728 <SystemClock_Config+0xd0>)
 80036a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036aa:	6013      	str	r3, [r2, #0]
 80036ac:	4b1e      	ldr	r3, [pc, #120]	; (8003728 <SystemClock_Config+0xd0>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80036b4:	607b      	str	r3, [r7, #4]
 80036b6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80036b8:	2302      	movs	r3, #2
 80036ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80036bc:	2301      	movs	r3, #1
 80036be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80036c0:	2310      	movs	r3, #16
 80036c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80036c4:	2302      	movs	r3, #2
 80036c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80036c8:	2300      	movs	r3, #0
 80036ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80036cc:	2308      	movs	r3, #8
 80036ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80036d0:	2348      	movs	r3, #72	; 0x48
 80036d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80036d4:	2302      	movs	r3, #2
 80036d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80036d8:	2304      	movs	r3, #4
 80036da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80036dc:	f107 0320 	add.w	r3, r7, #32
 80036e0:	4618      	mov	r0, r3
 80036e2:	f004 fbff 	bl	8007ee4 <HAL_RCC_OscConfig>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d001      	beq.n	80036f0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80036ec:	f001 fba2 	bl	8004e34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80036f0:	230f      	movs	r3, #15
 80036f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80036f4:	2302      	movs	r3, #2
 80036f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80036f8:	2300      	movs	r3, #0
 80036fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80036fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003700:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003702:	2300      	movs	r3, #0
 8003704:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003706:	f107 030c 	add.w	r3, r7, #12
 800370a:	2102      	movs	r1, #2
 800370c:	4618      	mov	r0, r3
 800370e:	f004 fe61 	bl	80083d4 <HAL_RCC_ClockConfig>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d001      	beq.n	800371c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8003718:	f001 fb8c 	bl	8004e34 <Error_Handler>
  }
}
 800371c:	bf00      	nop
 800371e:	3750      	adds	r7, #80	; 0x50
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	40023800 	.word	0x40023800
 8003728:	40007000 	.word	0x40007000

0800372c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003732:	463b      	mov	r3, r7
 8003734:	2200      	movs	r2, #0
 8003736:	601a      	str	r2, [r3, #0]
 8003738:	605a      	str	r2, [r3, #4]
 800373a:	609a      	str	r2, [r3, #8]
 800373c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800373e:	4b44      	ldr	r3, [pc, #272]	; (8003850 <MX_ADC1_Init+0x124>)
 8003740:	4a44      	ldr	r2, [pc, #272]	; (8003854 <MX_ADC1_Init+0x128>)
 8003742:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003744:	4b42      	ldr	r3, [pc, #264]	; (8003850 <MX_ADC1_Init+0x124>)
 8003746:	2200      	movs	r2, #0
 8003748:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800374a:	4b41      	ldr	r3, [pc, #260]	; (8003850 <MX_ADC1_Init+0x124>)
 800374c:	2200      	movs	r2, #0
 800374e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8003750:	4b3f      	ldr	r3, [pc, #252]	; (8003850 <MX_ADC1_Init+0x124>)
 8003752:	2201      	movs	r2, #1
 8003754:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003756:	4b3e      	ldr	r3, [pc, #248]	; (8003850 <MX_ADC1_Init+0x124>)
 8003758:	2201      	movs	r2, #1
 800375a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800375c:	4b3c      	ldr	r3, [pc, #240]	; (8003850 <MX_ADC1_Init+0x124>)
 800375e:	2200      	movs	r2, #0
 8003760:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003764:	4b3a      	ldr	r3, [pc, #232]	; (8003850 <MX_ADC1_Init+0x124>)
 8003766:	2200      	movs	r2, #0
 8003768:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800376a:	4b39      	ldr	r3, [pc, #228]	; (8003850 <MX_ADC1_Init+0x124>)
 800376c:	4a3a      	ldr	r2, [pc, #232]	; (8003858 <MX_ADC1_Init+0x12c>)
 800376e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003770:	4b37      	ldr	r3, [pc, #220]	; (8003850 <MX_ADC1_Init+0x124>)
 8003772:	2200      	movs	r2, #0
 8003774:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 8003776:	4b36      	ldr	r3, [pc, #216]	; (8003850 <MX_ADC1_Init+0x124>)
 8003778:	2206      	movs	r2, #6
 800377a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800377c:	4b34      	ldr	r3, [pc, #208]	; (8003850 <MX_ADC1_Init+0x124>)
 800377e:	2201      	movs	r2, #1
 8003780:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003784:	4b32      	ldr	r3, [pc, #200]	; (8003850 <MX_ADC1_Init+0x124>)
 8003786:	2201      	movs	r2, #1
 8003788:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800378a:	4831      	ldr	r0, [pc, #196]	; (8003850 <MX_ADC1_Init+0x124>)
 800378c:	f002 fb36 	bl	8005dfc <HAL_ADC_Init>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d001      	beq.n	800379a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8003796:	f001 fb4d 	bl	8004e34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800379a:	2302      	movs	r3, #2
 800379c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800379e:	2301      	movs	r3, #1
 80037a0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80037a2:	2303      	movs	r3, #3
 80037a4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80037a6:	463b      	mov	r3, r7
 80037a8:	4619      	mov	r1, r3
 80037aa:	4829      	ldr	r0, [pc, #164]	; (8003850 <MX_ADC1_Init+0x124>)
 80037ac:	f002 fdc2 	bl	8006334 <HAL_ADC_ConfigChannel>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d001      	beq.n	80037ba <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80037b6:	f001 fb3d 	bl	8004e34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80037ba:	2303      	movs	r3, #3
 80037bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80037be:	2302      	movs	r3, #2
 80037c0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80037c2:	463b      	mov	r3, r7
 80037c4:	4619      	mov	r1, r3
 80037c6:	4822      	ldr	r0, [pc, #136]	; (8003850 <MX_ADC1_Init+0x124>)
 80037c8:	f002 fdb4 	bl	8006334 <HAL_ADC_ConfigChannel>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d001      	beq.n	80037d6 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80037d2:	f001 fb2f 	bl	8004e34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80037d6:	2304      	movs	r3, #4
 80037d8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80037da:	2303      	movs	r3, #3
 80037dc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80037de:	463b      	mov	r3, r7
 80037e0:	4619      	mov	r1, r3
 80037e2:	481b      	ldr	r0, [pc, #108]	; (8003850 <MX_ADC1_Init+0x124>)
 80037e4:	f002 fda6 	bl	8006334 <HAL_ADC_ConfigChannel>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d001      	beq.n	80037f2 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80037ee:	f001 fb21 	bl	8004e34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80037f2:	2305      	movs	r3, #5
 80037f4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80037f6:	2304      	movs	r3, #4
 80037f8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80037fa:	463b      	mov	r3, r7
 80037fc:	4619      	mov	r1, r3
 80037fe:	4814      	ldr	r0, [pc, #80]	; (8003850 <MX_ADC1_Init+0x124>)
 8003800:	f002 fd98 	bl	8006334 <HAL_ADC_ConfigChannel>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d001      	beq.n	800380e <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800380a:	f001 fb13 	bl	8004e34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800380e:	2306      	movs	r3, #6
 8003810:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8003812:	2305      	movs	r3, #5
 8003814:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003816:	463b      	mov	r3, r7
 8003818:	4619      	mov	r1, r3
 800381a:	480d      	ldr	r0, [pc, #52]	; (8003850 <MX_ADC1_Init+0x124>)
 800381c:	f002 fd8a 	bl	8006334 <HAL_ADC_ConfigChannel>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d001      	beq.n	800382a <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8003826:	f001 fb05 	bl	8004e34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800382a:	2307      	movs	r3, #7
 800382c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 800382e:	2306      	movs	r3, #6
 8003830:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003832:	463b      	mov	r3, r7
 8003834:	4619      	mov	r1, r3
 8003836:	4806      	ldr	r0, [pc, #24]	; (8003850 <MX_ADC1_Init+0x124>)
 8003838:	f002 fd7c 	bl	8006334 <HAL_ADC_ConfigChannel>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d001      	beq.n	8003846 <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 8003842:	f001 faf7 	bl	8004e34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003846:	bf00      	nop
 8003848:	3710      	adds	r7, #16
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	20000558 	.word	0x20000558
 8003854:	40012000 	.word	0x40012000
 8003858:	0f000001 	.word	0x0f000001

0800385c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003860:	4b12      	ldr	r3, [pc, #72]	; (80038ac <MX_I2C3_Init+0x50>)
 8003862:	4a13      	ldr	r2, [pc, #76]	; (80038b0 <MX_I2C3_Init+0x54>)
 8003864:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8003866:	4b11      	ldr	r3, [pc, #68]	; (80038ac <MX_I2C3_Init+0x50>)
 8003868:	4a12      	ldr	r2, [pc, #72]	; (80038b4 <MX_I2C3_Init+0x58>)
 800386a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800386c:	4b0f      	ldr	r3, [pc, #60]	; (80038ac <MX_I2C3_Init+0x50>)
 800386e:	2200      	movs	r2, #0
 8003870:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8003872:	4b0e      	ldr	r3, [pc, #56]	; (80038ac <MX_I2C3_Init+0x50>)
 8003874:	2200      	movs	r2, #0
 8003876:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003878:	4b0c      	ldr	r3, [pc, #48]	; (80038ac <MX_I2C3_Init+0x50>)
 800387a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800387e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003880:	4b0a      	ldr	r3, [pc, #40]	; (80038ac <MX_I2C3_Init+0x50>)
 8003882:	2200      	movs	r2, #0
 8003884:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8003886:	4b09      	ldr	r3, [pc, #36]	; (80038ac <MX_I2C3_Init+0x50>)
 8003888:	2200      	movs	r2, #0
 800388a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800388c:	4b07      	ldr	r3, [pc, #28]	; (80038ac <MX_I2C3_Init+0x50>)
 800388e:	2200      	movs	r2, #0
 8003890:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003892:	4b06      	ldr	r3, [pc, #24]	; (80038ac <MX_I2C3_Init+0x50>)
 8003894:	2200      	movs	r2, #0
 8003896:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003898:	4804      	ldr	r0, [pc, #16]	; (80038ac <MX_I2C3_Init+0x50>)
 800389a:	f003 fed7 	bl	800764c <HAL_I2C_Init>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d001      	beq.n	80038a8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80038a4:	f001 fac6 	bl	8004e34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80038a8:	bf00      	nop
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	200003a8 	.word	0x200003a8
 80038b0:	40005c00 	.word	0x40005c00
 80038b4:	000186a0 	.word	0x000186a0

080038b8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80038bc:	4b17      	ldr	r3, [pc, #92]	; (800391c <MX_SPI2_Init+0x64>)
 80038be:	4a18      	ldr	r2, [pc, #96]	; (8003920 <MX_SPI2_Init+0x68>)
 80038c0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80038c2:	4b16      	ldr	r3, [pc, #88]	; (800391c <MX_SPI2_Init+0x64>)
 80038c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80038c8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80038ca:	4b14      	ldr	r3, [pc, #80]	; (800391c <MX_SPI2_Init+0x64>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80038d0:	4b12      	ldr	r3, [pc, #72]	; (800391c <MX_SPI2_Init+0x64>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80038d6:	4b11      	ldr	r3, [pc, #68]	; (800391c <MX_SPI2_Init+0x64>)
 80038d8:	2200      	movs	r2, #0
 80038da:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80038dc:	4b0f      	ldr	r3, [pc, #60]	; (800391c <MX_SPI2_Init+0x64>)
 80038de:	2200      	movs	r2, #0
 80038e0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80038e2:	4b0e      	ldr	r3, [pc, #56]	; (800391c <MX_SPI2_Init+0x64>)
 80038e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038e8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80038ea:	4b0c      	ldr	r3, [pc, #48]	; (800391c <MX_SPI2_Init+0x64>)
 80038ec:	2218      	movs	r2, #24
 80038ee:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80038f0:	4b0a      	ldr	r3, [pc, #40]	; (800391c <MX_SPI2_Init+0x64>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80038f6:	4b09      	ldr	r3, [pc, #36]	; (800391c <MX_SPI2_Init+0x64>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038fc:	4b07      	ldr	r3, [pc, #28]	; (800391c <MX_SPI2_Init+0x64>)
 80038fe:	2200      	movs	r2, #0
 8003900:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003902:	4b06      	ldr	r3, [pc, #24]	; (800391c <MX_SPI2_Init+0x64>)
 8003904:	220a      	movs	r2, #10
 8003906:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003908:	4804      	ldr	r0, [pc, #16]	; (800391c <MX_SPI2_Init+0x64>)
 800390a:	f004 ff5f 	bl	80087cc <HAL_SPI_Init>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d001      	beq.n	8003918 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003914:	f001 fa8e 	bl	8004e34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003918:	bf00      	nop
 800391a:	bd80      	pop	{r7, pc}
 800391c:	200003fc 	.word	0x200003fc
 8003920:	40003800 	.word	0x40003800

08003924 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b08c      	sub	sp, #48	; 0x30
 8003928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800392a:	f107 030c 	add.w	r3, r7, #12
 800392e:	2224      	movs	r2, #36	; 0x24
 8003930:	2100      	movs	r1, #0
 8003932:	4618      	mov	r0, r3
 8003934:	f007 fb80 	bl	800b038 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003938:	1d3b      	adds	r3, r7, #4
 800393a:	2200      	movs	r2, #0
 800393c:	601a      	str	r2, [r3, #0]
 800393e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003940:	4b21      	ldr	r3, [pc, #132]	; (80039c8 <MX_TIM2_Init+0xa4>)
 8003942:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003946:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003948:	4b1f      	ldr	r3, [pc, #124]	; (80039c8 <MX_TIM2_Init+0xa4>)
 800394a:	2200      	movs	r2, #0
 800394c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800394e:	4b1e      	ldr	r3, [pc, #120]	; (80039c8 <MX_TIM2_Init+0xa4>)
 8003950:	2200      	movs	r2, #0
 8003952:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8003954:	4b1c      	ldr	r3, [pc, #112]	; (80039c8 <MX_TIM2_Init+0xa4>)
 8003956:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800395a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800395c:	4b1a      	ldr	r3, [pc, #104]	; (80039c8 <MX_TIM2_Init+0xa4>)
 800395e:	2200      	movs	r2, #0
 8003960:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003962:	4b19      	ldr	r3, [pc, #100]	; (80039c8 <MX_TIM2_Init+0xa4>)
 8003964:	2200      	movs	r2, #0
 8003966:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003968:	2303      	movs	r3, #3
 800396a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800396c:	2302      	movs	r3, #2
 800396e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003970:	2301      	movs	r3, #1
 8003972:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003974:	2300      	movs	r3, #0
 8003976:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003978:	2300      	movs	r3, #0
 800397a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800397c:	2302      	movs	r3, #2
 800397e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003980:	2301      	movs	r3, #1
 8003982:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003984:	2300      	movs	r3, #0
 8003986:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003988:	2300      	movs	r3, #0
 800398a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800398c:	f107 030c 	add.w	r3, r7, #12
 8003990:	4619      	mov	r1, r3
 8003992:	480d      	ldr	r0, [pc, #52]	; (80039c8 <MX_TIM2_Init+0xa4>)
 8003994:	f005 fbf0 	bl	8009178 <HAL_TIM_Encoder_Init>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d001      	beq.n	80039a2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800399e:	f001 fa49 	bl	8004e34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039a2:	2300      	movs	r3, #0
 80039a4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039a6:	2300      	movs	r3, #0
 80039a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80039aa:	1d3b      	adds	r3, r7, #4
 80039ac:	4619      	mov	r1, r3
 80039ae:	4806      	ldr	r0, [pc, #24]	; (80039c8 <MX_TIM2_Init+0xa4>)
 80039b0:	f006 fabc 	bl	8009f2c <HAL_TIMEx_MasterConfigSynchronization>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d001      	beq.n	80039be <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80039ba:	f001 fa3b 	bl	8004e34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80039be:	bf00      	nop
 80039c0:	3730      	adds	r7, #48	; 0x30
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	200006dc 	.word	0x200006dc

080039cc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b08a      	sub	sp, #40	; 0x28
 80039d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039d2:	f107 0320 	add.w	r3, r7, #32
 80039d6:	2200      	movs	r2, #0
 80039d8:	601a      	str	r2, [r3, #0]
 80039da:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80039dc:	1d3b      	adds	r3, r7, #4
 80039de:	2200      	movs	r2, #0
 80039e0:	601a      	str	r2, [r3, #0]
 80039e2:	605a      	str	r2, [r3, #4]
 80039e4:	609a      	str	r2, [r3, #8]
 80039e6:	60da      	str	r2, [r3, #12]
 80039e8:	611a      	str	r2, [r3, #16]
 80039ea:	615a      	str	r2, [r3, #20]
 80039ec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80039ee:	4b27      	ldr	r3, [pc, #156]	; (8003a8c <MX_TIM3_Init+0xc0>)
 80039f0:	4a27      	ldr	r2, [pc, #156]	; (8003a90 <MX_TIM3_Init+0xc4>)
 80039f2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80039f4:	4b25      	ldr	r3, [pc, #148]	; (8003a8c <MX_TIM3_Init+0xc0>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039fa:	4b24      	ldr	r3, [pc, #144]	; (8003a8c <MX_TIM3_Init+0xc0>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7199;
 8003a00:	4b22      	ldr	r3, [pc, #136]	; (8003a8c <MX_TIM3_Init+0xc0>)
 8003a02:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8003a06:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a08:	4b20      	ldr	r3, [pc, #128]	; (8003a8c <MX_TIM3_Init+0xc0>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a0e:	4b1f      	ldr	r3, [pc, #124]	; (8003a8c <MX_TIM3_Init+0xc0>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003a14:	481d      	ldr	r0, [pc, #116]	; (8003a8c <MX_TIM3_Init+0xc0>)
 8003a16:	f005 fab0 	bl	8008f7a <HAL_TIM_PWM_Init>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d001      	beq.n	8003a24 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8003a20:	f001 fa08 	bl	8004e34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a24:	2300      	movs	r3, #0
 8003a26:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003a2c:	f107 0320 	add.w	r3, r7, #32
 8003a30:	4619      	mov	r1, r3
 8003a32:	4816      	ldr	r0, [pc, #88]	; (8003a8c <MX_TIM3_Init+0xc0>)
 8003a34:	f006 fa7a 	bl	8009f2c <HAL_TIMEx_MasterConfigSynchronization>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d001      	beq.n	8003a42 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8003a3e:	f001 f9f9 	bl	8004e34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a42:	2360      	movs	r3, #96	; 0x60
 8003a44:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003a46:	2300      	movs	r3, #0
 8003a48:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003a52:	1d3b      	adds	r3, r7, #4
 8003a54:	2208      	movs	r2, #8
 8003a56:	4619      	mov	r1, r3
 8003a58:	480c      	ldr	r0, [pc, #48]	; (8003a8c <MX_TIM3_Init+0xc0>)
 8003a5a:	f005 fde9 	bl	8009630 <HAL_TIM_PWM_ConfigChannel>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d001      	beq.n	8003a68 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8003a64:	f001 f9e6 	bl	8004e34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003a68:	1d3b      	adds	r3, r7, #4
 8003a6a:	220c      	movs	r2, #12
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	4807      	ldr	r0, [pc, #28]	; (8003a8c <MX_TIM3_Init+0xc0>)
 8003a70:	f005 fdde 	bl	8009630 <HAL_TIM_PWM_ConfigChannel>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d001      	beq.n	8003a7e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8003a7a:	f001 f9db 	bl	8004e34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003a7e:	4803      	ldr	r0, [pc, #12]	; (8003a8c <MX_TIM3_Init+0xc0>)
 8003a80:	f001 fef2 	bl	8005868 <HAL_TIM_MspPostInit>

}
 8003a84:	bf00      	nop
 8003a86:	3728      	adds	r7, #40	; 0x28
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	20000510 	.word	0x20000510
 8003a90:	40000400 	.word	0x40000400

08003a94 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b08c      	sub	sp, #48	; 0x30
 8003a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003a9a:	f107 030c 	add.w	r3, r7, #12
 8003a9e:	2224      	movs	r2, #36	; 0x24
 8003aa0:	2100      	movs	r1, #0
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f007 fac8 	bl	800b038 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003aa8:	1d3b      	adds	r3, r7, #4
 8003aaa:	2200      	movs	r2, #0
 8003aac:	601a      	str	r2, [r3, #0]
 8003aae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003ab0:	4b20      	ldr	r3, [pc, #128]	; (8003b34 <MX_TIM4_Init+0xa0>)
 8003ab2:	4a21      	ldr	r2, [pc, #132]	; (8003b38 <MX_TIM4_Init+0xa4>)
 8003ab4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003ab6:	4b1f      	ldr	r3, [pc, #124]	; (8003b34 <MX_TIM4_Init+0xa0>)
 8003ab8:	2200      	movs	r2, #0
 8003aba:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003abc:	4b1d      	ldr	r3, [pc, #116]	; (8003b34 <MX_TIM4_Init+0xa0>)
 8003abe:	2200      	movs	r2, #0
 8003ac0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003ac2:	4b1c      	ldr	r3, [pc, #112]	; (8003b34 <MX_TIM4_Init+0xa0>)
 8003ac4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ac8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003aca:	4b1a      	ldr	r3, [pc, #104]	; (8003b34 <MX_TIM4_Init+0xa0>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ad0:	4b18      	ldr	r3, [pc, #96]	; (8003b34 <MX_TIM4_Init+0xa0>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8003ada:	2302      	movs	r3, #2
 8003adc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8003aea:	2302      	movs	r3, #2
 8003aec:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003aee:	2301      	movs	r3, #1
 8003af0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003af2:	2300      	movs	r3, #0
 8003af4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003af6:	2300      	movs	r3, #0
 8003af8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003afa:	f107 030c 	add.w	r3, r7, #12
 8003afe:	4619      	mov	r1, r3
 8003b00:	480c      	ldr	r0, [pc, #48]	; (8003b34 <MX_TIM4_Init+0xa0>)
 8003b02:	f005 fb39 	bl	8009178 <HAL_TIM_Encoder_Init>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d001      	beq.n	8003b10 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8003b0c:	f001 f992 	bl	8004e34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b10:	2300      	movs	r3, #0
 8003b12:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b14:	2300      	movs	r3, #0
 8003b16:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003b18:	1d3b      	adds	r3, r7, #4
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	4805      	ldr	r0, [pc, #20]	; (8003b34 <MX_TIM4_Init+0xa0>)
 8003b1e:	f006 fa05 	bl	8009f2c <HAL_TIMEx_MasterConfigSynchronization>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d001      	beq.n	8003b2c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8003b28:	f001 f984 	bl	8004e34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003b2c:	bf00      	nop
 8003b2e:	3730      	adds	r7, #48	; 0x30
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	20000454 	.word	0x20000454
 8003b38:	40000800 	.word	0x40000800

08003b3c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b086      	sub	sp, #24
 8003b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b42:	f107 0308 	add.w	r3, r7, #8
 8003b46:	2200      	movs	r2, #0
 8003b48:	601a      	str	r2, [r3, #0]
 8003b4a:	605a      	str	r2, [r3, #4]
 8003b4c:	609a      	str	r2, [r3, #8]
 8003b4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b50:	463b      	mov	r3, r7
 8003b52:	2200      	movs	r2, #0
 8003b54:	601a      	str	r2, [r3, #0]
 8003b56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003b58:	4b1d      	ldr	r3, [pc, #116]	; (8003bd0 <MX_TIM5_Init+0x94>)
 8003b5a:	4a1e      	ldr	r2, [pc, #120]	; (8003bd4 <MX_TIM5_Init+0x98>)
 8003b5c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 60;
 8003b5e:	4b1c      	ldr	r3, [pc, #112]	; (8003bd0 <MX_TIM5_Init+0x94>)
 8003b60:	223c      	movs	r2, #60	; 0x3c
 8003b62:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b64:	4b1a      	ldr	r3, [pc, #104]	; (8003bd0 <MX_TIM5_Init+0x94>)
 8003b66:	2200      	movs	r2, #0
 8003b68:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 59999;
 8003b6a:	4b19      	ldr	r3, [pc, #100]	; (8003bd0 <MX_TIM5_Init+0x94>)
 8003b6c:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8003b70:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b72:	4b17      	ldr	r3, [pc, #92]	; (8003bd0 <MX_TIM5_Init+0x94>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b78:	4b15      	ldr	r3, [pc, #84]	; (8003bd0 <MX_TIM5_Init+0x94>)
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003b7e:	4814      	ldr	r0, [pc, #80]	; (8003bd0 <MX_TIM5_Init+0x94>)
 8003b80:	f005 f91a 	bl	8008db8 <HAL_TIM_Base_Init>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d001      	beq.n	8003b8e <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8003b8a:	f001 f953 	bl	8004e34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b92:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003b94:	f107 0308 	add.w	r3, r7, #8
 8003b98:	4619      	mov	r1, r3
 8003b9a:	480d      	ldr	r0, [pc, #52]	; (8003bd0 <MX_TIM5_Init+0x94>)
 8003b9c:	f005 fe0a 	bl	80097b4 <HAL_TIM_ConfigClockSource>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d001      	beq.n	8003baa <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8003ba6:	f001 f945 	bl	8004e34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003baa:	2300      	movs	r3, #0
 8003bac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003bb2:	463b      	mov	r3, r7
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	4806      	ldr	r0, [pc, #24]	; (8003bd0 <MX_TIM5_Init+0x94>)
 8003bb8:	f006 f9b8 	bl	8009f2c <HAL_TIMEx_MasterConfigSynchronization>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d001      	beq.n	8003bc6 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8003bc2:	f001 f937 	bl	8004e34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003bc6:	bf00      	nop
 8003bc8:	3718      	adds	r7, #24
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	200004c8 	.word	0x200004c8
 8003bd4:	40000c00 	.word	0x40000c00

08003bd8 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003bde:	463b      	mov	r3, r7
 8003be0:	2200      	movs	r2, #0
 8003be2:	601a      	str	r2, [r3, #0]
 8003be4:	605a      	str	r2, [r3, #4]
 8003be6:	609a      	str	r2, [r3, #8]
 8003be8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8003bea:	4b16      	ldr	r3, [pc, #88]	; (8003c44 <MX_TIM9_Init+0x6c>)
 8003bec:	4a16      	ldr	r2, [pc, #88]	; (8003c48 <MX_TIM9_Init+0x70>)
 8003bee:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 71;
 8003bf0:	4b14      	ldr	r3, [pc, #80]	; (8003c44 <MX_TIM9_Init+0x6c>)
 8003bf2:	2247      	movs	r2, #71	; 0x47
 8003bf4:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bf6:	4b13      	ldr	r3, [pc, #76]	; (8003c44 <MX_TIM9_Init+0x6c>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 9999;
 8003bfc:	4b11      	ldr	r3, [pc, #68]	; (8003c44 <MX_TIM9_Init+0x6c>)
 8003bfe:	f242 720f 	movw	r2, #9999	; 0x270f
 8003c02:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c04:	4b0f      	ldr	r3, [pc, #60]	; (8003c44 <MX_TIM9_Init+0x6c>)
 8003c06:	2200      	movs	r2, #0
 8003c08:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c0a:	4b0e      	ldr	r3, [pc, #56]	; (8003c44 <MX_TIM9_Init+0x6c>)
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8003c10:	480c      	ldr	r0, [pc, #48]	; (8003c44 <MX_TIM9_Init+0x6c>)
 8003c12:	f005 f8d1 	bl	8008db8 <HAL_TIM_Base_Init>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d001      	beq.n	8003c20 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8003c1c:	f001 f90a 	bl	8004e34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c24:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8003c26:	463b      	mov	r3, r7
 8003c28:	4619      	mov	r1, r3
 8003c2a:	4806      	ldr	r0, [pc, #24]	; (8003c44 <MX_TIM9_Init+0x6c>)
 8003c2c:	f005 fdc2 	bl	80097b4 <HAL_TIM_ConfigClockSource>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d001      	beq.n	8003c3a <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8003c36:	f001 f8fd 	bl	8004e34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8003c3a:	bf00      	nop
 8003c3c:	3710      	adds	r7, #16
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	20000690 	.word	0x20000690
 8003c48:	40014000 	.word	0x40014000

08003c4c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003c50:	4b11      	ldr	r3, [pc, #68]	; (8003c98 <MX_USART1_UART_Init+0x4c>)
 8003c52:	4a12      	ldr	r2, [pc, #72]	; (8003c9c <MX_USART1_UART_Init+0x50>)
 8003c54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003c56:	4b10      	ldr	r3, [pc, #64]	; (8003c98 <MX_USART1_UART_Init+0x4c>)
 8003c58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003c5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003c5e:	4b0e      	ldr	r3, [pc, #56]	; (8003c98 <MX_USART1_UART_Init+0x4c>)
 8003c60:	2200      	movs	r2, #0
 8003c62:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003c64:	4b0c      	ldr	r3, [pc, #48]	; (8003c98 <MX_USART1_UART_Init+0x4c>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003c6a:	4b0b      	ldr	r3, [pc, #44]	; (8003c98 <MX_USART1_UART_Init+0x4c>)
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003c70:	4b09      	ldr	r3, [pc, #36]	; (8003c98 <MX_USART1_UART_Init+0x4c>)
 8003c72:	220c      	movs	r2, #12
 8003c74:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c76:	4b08      	ldr	r3, [pc, #32]	; (8003c98 <MX_USART1_UART_Init+0x4c>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c7c:	4b06      	ldr	r3, [pc, #24]	; (8003c98 <MX_USART1_UART_Init+0x4c>)
 8003c7e:	2200      	movs	r2, #0
 8003c80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003c82:	4805      	ldr	r0, [pc, #20]	; (8003c98 <MX_USART1_UART_Init+0x4c>)
 8003c84:	f006 f9d4 	bl	800a030 <HAL_UART_Init>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d001      	beq.n	8003c92 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003c8e:	f001 f8d1 	bl	8004e34 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003c92:	bf00      	nop
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	200005a0 	.word	0x200005a0
 8003c9c:	40011000 	.word	0x40011000

08003ca0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003ca4:	4b11      	ldr	r3, [pc, #68]	; (8003cec <MX_USART6_UART_Init+0x4c>)
 8003ca6:	4a12      	ldr	r2, [pc, #72]	; (8003cf0 <MX_USART6_UART_Init+0x50>)
 8003ca8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8003caa:	4b10      	ldr	r3, [pc, #64]	; (8003cec <MX_USART6_UART_Init+0x4c>)
 8003cac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003cb0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003cb2:	4b0e      	ldr	r3, [pc, #56]	; (8003cec <MX_USART6_UART_Init+0x4c>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003cb8:	4b0c      	ldr	r3, [pc, #48]	; (8003cec <MX_USART6_UART_Init+0x4c>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003cbe:	4b0b      	ldr	r3, [pc, #44]	; (8003cec <MX_USART6_UART_Init+0x4c>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003cc4:	4b09      	ldr	r3, [pc, #36]	; (8003cec <MX_USART6_UART_Init+0x4c>)
 8003cc6:	220c      	movs	r2, #12
 8003cc8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003cca:	4b08      	ldr	r3, [pc, #32]	; (8003cec <MX_USART6_UART_Init+0x4c>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003cd0:	4b06      	ldr	r3, [pc, #24]	; (8003cec <MX_USART6_UART_Init+0x4c>)
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003cd6:	4805      	ldr	r0, [pc, #20]	; (8003cec <MX_USART6_UART_Init+0x4c>)
 8003cd8:	f006 f9aa 	bl	800a030 <HAL_UART_Init>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d001      	beq.n	8003ce6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003ce2:	f001 f8a7 	bl	8004e34 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003ce6:	bf00      	nop
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	20000364 	.word	0x20000364
 8003cf0:	40011400 	.word	0x40011400

08003cf4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	607b      	str	r3, [r7, #4]
 8003cfe:	4b0c      	ldr	r3, [pc, #48]	; (8003d30 <MX_DMA_Init+0x3c>)
 8003d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d02:	4a0b      	ldr	r2, [pc, #44]	; (8003d30 <MX_DMA_Init+0x3c>)
 8003d04:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003d08:	6313      	str	r3, [r2, #48]	; 0x30
 8003d0a:	4b09      	ldr	r3, [pc, #36]	; (8003d30 <MX_DMA_Init+0x3c>)
 8003d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d12:	607b      	str	r3, [r7, #4]
 8003d14:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003d16:	2200      	movs	r2, #0
 8003d18:	2100      	movs	r1, #0
 8003d1a:	2038      	movs	r0, #56	; 0x38
 8003d1c:	f002 fe8f 	bl	8006a3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003d20:	2038      	movs	r0, #56	; 0x38
 8003d22:	f002 fea8 	bl	8006a76 <HAL_NVIC_EnableIRQ>

}
 8003d26:	bf00      	nop
 8003d28:	3708      	adds	r7, #8
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	40023800 	.word	0x40023800

08003d34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b08a      	sub	sp, #40	; 0x28
 8003d38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d3a:	f107 0314 	add.w	r3, r7, #20
 8003d3e:	2200      	movs	r2, #0
 8003d40:	601a      	str	r2, [r3, #0]
 8003d42:	605a      	str	r2, [r3, #4]
 8003d44:	609a      	str	r2, [r3, #8]
 8003d46:	60da      	str	r2, [r3, #12]
 8003d48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	613b      	str	r3, [r7, #16]
 8003d4e:	4b39      	ldr	r3, [pc, #228]	; (8003e34 <MX_GPIO_Init+0x100>)
 8003d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d52:	4a38      	ldr	r2, [pc, #224]	; (8003e34 <MX_GPIO_Init+0x100>)
 8003d54:	f043 0304 	orr.w	r3, r3, #4
 8003d58:	6313      	str	r3, [r2, #48]	; 0x30
 8003d5a:	4b36      	ldr	r3, [pc, #216]	; (8003e34 <MX_GPIO_Init+0x100>)
 8003d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5e:	f003 0304 	and.w	r3, r3, #4
 8003d62:	613b      	str	r3, [r7, #16]
 8003d64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003d66:	2300      	movs	r3, #0
 8003d68:	60fb      	str	r3, [r7, #12]
 8003d6a:	4b32      	ldr	r3, [pc, #200]	; (8003e34 <MX_GPIO_Init+0x100>)
 8003d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6e:	4a31      	ldr	r2, [pc, #196]	; (8003e34 <MX_GPIO_Init+0x100>)
 8003d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d74:	6313      	str	r3, [r2, #48]	; 0x30
 8003d76:	4b2f      	ldr	r3, [pc, #188]	; (8003e34 <MX_GPIO_Init+0x100>)
 8003d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d7e:	60fb      	str	r3, [r7, #12]
 8003d80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d82:	2300      	movs	r3, #0
 8003d84:	60bb      	str	r3, [r7, #8]
 8003d86:	4b2b      	ldr	r3, [pc, #172]	; (8003e34 <MX_GPIO_Init+0x100>)
 8003d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8a:	4a2a      	ldr	r2, [pc, #168]	; (8003e34 <MX_GPIO_Init+0x100>)
 8003d8c:	f043 0301 	orr.w	r3, r3, #1
 8003d90:	6313      	str	r3, [r2, #48]	; 0x30
 8003d92:	4b28      	ldr	r3, [pc, #160]	; (8003e34 <MX_GPIO_Init+0x100>)
 8003d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d96:	f003 0301 	and.w	r3, r3, #1
 8003d9a:	60bb      	str	r3, [r7, #8]
 8003d9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d9e:	2300      	movs	r3, #0
 8003da0:	607b      	str	r3, [r7, #4]
 8003da2:	4b24      	ldr	r3, [pc, #144]	; (8003e34 <MX_GPIO_Init+0x100>)
 8003da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da6:	4a23      	ldr	r2, [pc, #140]	; (8003e34 <MX_GPIO_Init+0x100>)
 8003da8:	f043 0302 	orr.w	r3, r3, #2
 8003dac:	6313      	str	r3, [r2, #48]	; 0x30
 8003dae:	4b21      	ldr	r3, [pc, #132]	; (8003e34 <MX_GPIO_Init+0x100>)
 8003db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db2:	f003 0302 	and.w	r3, r3, #2
 8003db6:	607b      	str	r3, [r7, #4]
 8003db8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_5, GPIO_PIN_RESET);
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f240 4124 	movw	r1, #1060	; 0x424
 8003dc0:	481d      	ldr	r0, [pc, #116]	; (8003e38 <MX_GPIO_Init+0x104>)
 8003dc2:	f003 fc11 	bl	80075e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ButtonC_Pin */
  GPIO_InitStruct.Pin = ButtonC_Pin;
 8003dc6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003dca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003dcc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003dd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ButtonC_GPIO_Port, &GPIO_InitStruct);
 8003dd6:	f107 0314 	add.w	r3, r7, #20
 8003dda:	4619      	mov	r1, r3
 8003ddc:	4817      	ldr	r0, [pc, #92]	; (8003e3c <MX_GPIO_Init+0x108>)
 8003dde:	f003 fa67 	bl	80072b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ButtonB_Pin ButtonA_Pin */
  GPIO_InitStruct.Pin = ButtonB_Pin|ButtonA_Pin;
 8003de2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003de6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003de8:	2300      	movs	r3, #0
 8003dea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dec:	2300      	movs	r3, #0
 8003dee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003df0:	f107 0314 	add.w	r3, r7, #20
 8003df4:	4619      	mov	r1, r3
 8003df6:	4811      	ldr	r0, [pc, #68]	; (8003e3c <MX_GPIO_Init+0x108>)
 8003df8:	f003 fa5a 	bl	80072b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_5;
 8003dfc:	f240 4324 	movw	r3, #1060	; 0x424
 8003e00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e02:	2301      	movs	r3, #1
 8003e04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e06:	2300      	movs	r3, #0
 8003e08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e0e:	f107 0314 	add.w	r3, r7, #20
 8003e12:	4619      	mov	r1, r3
 8003e14:	4808      	ldr	r0, [pc, #32]	; (8003e38 <MX_GPIO_Init+0x104>)
 8003e16:	f003 fa4b 	bl	80072b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	2100      	movs	r1, #0
 8003e1e:	2028      	movs	r0, #40	; 0x28
 8003e20:	f002 fe0d 	bl	8006a3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003e24:	2028      	movs	r0, #40	; 0x28
 8003e26:	f002 fe26 	bl	8006a76 <HAL_NVIC_EnableIRQ>

}
 8003e2a:	bf00      	nop
 8003e2c:	3728      	adds	r7, #40	; 0x28
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	40023800 	.word	0x40023800
 8003e38:	40020400 	.word	0x40020400
 8003e3c:	40020800 	.word	0x40020800

08003e40 <Running>:

/* USER CODE BEGIN 4 */
void Running(void) // Activate the car for running
{
 8003e40:	b590      	push	{r4, r7, lr}
 8003e42:	b097      	sub	sp, #92	; 0x5c
 8003e44:	af02      	add	r7, sp, #8
	uint8_t Temp_Line;
	int8_t point_passed = -1;
 8003e46:	23ff      	movs	r3, #255	; 0xff
 8003e48:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	int Instruction[8];
	int Map_Point[4],Turn_Instruction[4];
	int8_t Max_point_temp,Max_point;
	int8_t Spin_once = 0;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	int8_t Path_guidance = 1;
 8003e52:	2301      	movs	r3, #1
 8003e54:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	int8_t station_count = -1;
 8003e58:	23ff      	movs	r3, #255	; 0xff
 8003e5a:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	uint8_t Read_RFID_Flag = 0;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	lcd_send_cmd(0x80 | 0x00);
 8003e64:	2080      	movs	r0, #128	; 0x80
 8003e66:	f7fe f81f 	bl	8001ea8 <lcd_send_cmd>
	lcd_send_string("Car is Running!        ");
 8003e6a:	48ab      	ldr	r0, [pc, #684]	; (8004118 <Running+0x2d8>)
 8003e6c:	f7fe f8cd 	bl	800200a <lcd_send_string>
	lcd_send_cmd(0x80 | 0x40);
 8003e70:	20c0      	movs	r0, #192	; 0xc0
 8003e72:	f7fe f819 	bl	8001ea8 <lcd_send_cmd>
	lcd_send_string("Press C for cancel     ");
 8003e76:	48a9      	ldr	r0, [pc, #676]	; (800411c <Running+0x2dc>)
 8003e78:	f7fe f8c7 	bl	800200a <lcd_send_string>
	Previous_Line = LINE_MIDDLE;
 8003e7c:	4ba8      	ldr	r3, [pc, #672]	; (8004120 <Running+0x2e0>)
 8003e7e:	2203      	movs	r2, #3
 8003e80:	701a      	strb	r2, [r3, #0]
	while (cancel_running) {
 8003e82:	e212      	b.n	80042aa <Running+0x46a>
		if(Begin_solving == 1)
 8003e84:	4ba7      	ldr	r3, [pc, #668]	; (8004124 <Running+0x2e4>)
 8003e86:	f993 3000 	ldrsb.w	r3, [r3]
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	f040 81cd 	bne.w	800422a <Running+0x3ea>
		{
	/*======================== CACULATING SPEED EACH 300ms ============================================*/
			unsigned long currentMillis  = HAL_GetTick();
 8003e90:	f001 ff84 	bl	8005d9c <HAL_GetTick>
 8003e94:	6478      	str	r0, [r7, #68]	; 0x44
			Encoder_Read();
 8003e96:	f7ff fb37 	bl	8003508 <Encoder_Read>
			if(currentMillis  - previousMillis  >= interval)
 8003e9a:	4ba3      	ldr	r3, [pc, #652]	; (8004128 <Running+0x2e8>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	2246      	movs	r2, #70	; 0x46
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d339      	bcc.n	8003f1c <Running+0xdc>
			{
				previousMillis  = previousMillis;
 8003ea8:	4b9f      	ldr	r3, [pc, #636]	; (8004128 <Running+0x2e8>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a9e      	ldr	r2, [pc, #632]	; (8004128 <Running+0x2e8>)
 8003eae:	6013      	str	r3, [r2, #0]
				rateLeft = (countLeft - countLeft_prv)*1345/374;
 8003eb0:	4b9e      	ldr	r3, [pc, #632]	; (800412c <Running+0x2ec>)
 8003eb2:	881b      	ldrh	r3, [r3, #0]
 8003eb4:	b21b      	sxth	r3, r3
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	4b9d      	ldr	r3, [pc, #628]	; (8004130 <Running+0x2f0>)
 8003eba:	881b      	ldrh	r3, [r3, #0]
 8003ebc:	b21b      	sxth	r3, r3
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	f240 5241 	movw	r2, #1345	; 0x541
 8003ec4:	fb02 f303 	mul.w	r3, r2, r3
 8003ec8:	4a9a      	ldr	r2, [pc, #616]	; (8004134 <Running+0x2f4>)
 8003eca:	fb82 1203 	smull	r1, r2, r2, r3
 8003ece:	441a      	add	r2, r3
 8003ed0:	1212      	asrs	r2, r2, #8
 8003ed2:	17db      	asrs	r3, r3, #31
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	b21a      	sxth	r2, r3
 8003ed8:	4b97      	ldr	r3, [pc, #604]	; (8004138 <Running+0x2f8>)
 8003eda:	801a      	strh	r2, [r3, #0]
				rateRight = (countRight - countRight_prv)*1345/374;
 8003edc:	4b97      	ldr	r3, [pc, #604]	; (800413c <Running+0x2fc>)
 8003ede:	881b      	ldrh	r3, [r3, #0]
 8003ee0:	b21b      	sxth	r3, r3
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	4b96      	ldr	r3, [pc, #600]	; (8004140 <Running+0x300>)
 8003ee6:	881b      	ldrh	r3, [r3, #0]
 8003ee8:	b21b      	sxth	r3, r3
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	f240 5241 	movw	r2, #1345	; 0x541
 8003ef0:	fb02 f303 	mul.w	r3, r2, r3
 8003ef4:	4a8f      	ldr	r2, [pc, #572]	; (8004134 <Running+0x2f4>)
 8003ef6:	fb82 1203 	smull	r1, r2, r2, r3
 8003efa:	441a      	add	r2, r3
 8003efc:	1212      	asrs	r2, r2, #8
 8003efe:	17db      	asrs	r3, r3, #31
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	b21a      	sxth	r2, r3
 8003f04:	4b8f      	ldr	r3, [pc, #572]	; (8004144 <Running+0x304>)
 8003f06:	801a      	strh	r2, [r3, #0]
				countLeft_prv = countLeft;
 8003f08:	4b88      	ldr	r3, [pc, #544]	; (800412c <Running+0x2ec>)
 8003f0a:	881b      	ldrh	r3, [r3, #0]
 8003f0c:	b21a      	sxth	r2, r3
 8003f0e:	4b88      	ldr	r3, [pc, #544]	; (8004130 <Running+0x2f0>)
 8003f10:	801a      	strh	r2, [r3, #0]
				countRight_prv = countRight;
 8003f12:	4b8a      	ldr	r3, [pc, #552]	; (800413c <Running+0x2fc>)
 8003f14:	881b      	ldrh	r3, [r3, #0]
 8003f16:	b21a      	sxth	r2, r3
 8003f18:	4b89      	ldr	r3, [pc, #548]	; (8004140 <Running+0x300>)
 8003f1a:	801a      	strh	r2, [r3, #0]
			}
			if(Path_guidance == 1)
 8003f1c:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d124      	bne.n	8003f6e <Running+0x12e>
			{
				Max_point_temp = Solver(First_point, Last_point, Previous_point, Turn_Instruction, Map_Point, Instruction);
 8003f24:	4b88      	ldr	r3, [pc, #544]	; (8004148 <Running+0x308>)
 8003f26:	f993 3000 	ldrsb.w	r3, [r3]
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	4b87      	ldr	r3, [pc, #540]	; (800414c <Running+0x30c>)
 8003f2e:	f993 3000 	ldrsb.w	r3, [r3]
 8003f32:	4619      	mov	r1, r3
 8003f34:	4b86      	ldr	r3, [pc, #536]	; (8004150 <Running+0x310>)
 8003f36:	f993 3000 	ldrsb.w	r3, [r3]
 8003f3a:	461c      	mov	r4, r3
 8003f3c:	463a      	mov	r2, r7
 8003f3e:	f107 0320 	add.w	r3, r7, #32
 8003f42:	9301      	str	r3, [sp, #4]
 8003f44:	f107 0310 	add.w	r3, r7, #16
 8003f48:	9300      	str	r3, [sp, #0]
 8003f4a:	4613      	mov	r3, r2
 8003f4c:	4622      	mov	r2, r4
 8003f4e:	f7fe fed3 	bl	8002cf8 <Solver>
 8003f52:	4603      	mov	r3, r0
 8003f54:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
				Max_point = Max_point_temp + (Max_point_temp - 1) - 1;
 8003f58:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8003f5c:	337f      	adds	r3, #127	; 0x7f
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	005b      	lsls	r3, r3, #1
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
				Path_guidance = 0;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
			}
			Sensor_Convert_A2D();
 8003f6e:	f000 fbed 	bl	800474c <Sensor_Convert_A2D>
			Go_Straight();
 8003f72:	f000 faff 	bl	8004574 <Go_Straight>
			Temp_Line = (LineDetect & 0b10000100);
 8003f76:	4b77      	ldr	r3, [pc, #476]	; (8004154 <Running+0x314>)
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	f023 037b 	bic.w	r3, r3, #123	; 0x7b
 8003f7e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
			if(Temp_Line == 0b10000000 || Temp_Line == 0b00000100 || Temp_Line == 0b10000100)
 8003f82:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003f86:	2b80      	cmp	r3, #128	; 0x80
 8003f88:	d007      	beq.n	8003f9a <Running+0x15a>
 8003f8a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003f8e:	2b04      	cmp	r3, #4
 8003f90:	d003      	beq.n	8003f9a <Running+0x15a>
 8003f92:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003f96:	2b84      	cmp	r3, #132	; 0x84
 8003f98:	d15c      	bne.n	8004054 <Running+0x214>
			{
				if(Temp_Line == 0b10000000)
 8003f9a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003f9e:	2b80      	cmp	r3, #128	; 0x80
 8003fa0:	d104      	bne.n	8003fac <Running+0x16c>
				{
					Error_Val = 3100;
 8003fa2:	4b6d      	ldr	r3, [pc, #436]	; (8004158 <Running+0x318>)
 8003fa4:	f640 421c 	movw	r2, #3100	; 0xc1c
 8003fa8:	601a      	str	r2, [r3, #0]
 8003faa:	e007      	b.n	8003fbc <Running+0x17c>
				}
				else if(Temp_Line == 0b00000100)
 8003fac:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003fb0:	2b04      	cmp	r3, #4
 8003fb2:	d103      	bne.n	8003fbc <Running+0x17c>
				{
					Error_Val = 4300;
 8003fb4:	4b68      	ldr	r3, [pc, #416]	; (8004158 <Running+0x318>)
 8003fb6:	f241 02cc 	movw	r2, #4300	; 0x10cc
 8003fba:	601a      	str	r2, [r3, #0]
				}
				Sensor_Convert_A2D();
 8003fbc:	f000 fbc6 	bl	800474c <Sensor_Convert_A2D>
				Previous_Line = LINE_HALF_BLACK;
 8003fc0:	4b57      	ldr	r3, [pc, #348]	; (8004120 <Running+0x2e0>)
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	701a      	strb	r2, [r3, #0]
				if(point_passed == Max_point - 1)
 8003fc6:	f997 204f 	ldrsb.w	r2, [r7, #79]	; 0x4f
 8003fca:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d127      	bne.n	8004024 <Running+0x1e4>
				{
					station_count = station_count + 1;
 8003fd4:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8003fd8:	3301      	adds	r3, #1
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
					STATION_ID = Map_Point[station_count];
 8003fe0:	f997 304a 	ldrsb.w	r3, [r7, #74]	; 0x4a
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003fea:	4413      	add	r3, r2
 8003fec:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8003ff0:	b2da      	uxtb	r2, r3
 8003ff2:	4b5a      	ldr	r3, [pc, #360]	; (800415c <Running+0x31c>)
 8003ff4:	701a      	strb	r2, [r3, #0]
					First_point = Last_point;
 8003ff6:	4b55      	ldr	r3, [pc, #340]	; (800414c <Running+0x30c>)
 8003ff8:	f993 2000 	ldrsb.w	r2, [r3]
 8003ffc:	4b52      	ldr	r3, [pc, #328]	; (8004148 <Running+0x308>)
 8003ffe:	701a      	strb	r2, [r3, #0]
					Previous_point = Map_Point[Max_point_temp - 2];
 8004000:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8004004:	3b02      	subs	r3, #2
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800400c:	4413      	add	r3, r2
 800400e:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8004012:	b25a      	sxtb	r2, r3
 8004014:	4b4e      	ldr	r3, [pc, #312]	; (8004150 <Running+0x310>)
 8004016:	701a      	strb	r2, [r3, #0]
					Begin_solving = 0;
 8004018:	4b42      	ldr	r3, [pc, #264]	; (8004124 <Running+0x2e4>)
 800401a:	2200      	movs	r2, #0
 800401c:	701a      	strb	r2, [r3, #0]
					Read_RFID_Flag = 1;
 800401e:	2301      	movs	r3, #1
 8004020:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
				}
				if(Spin_once == 0 && (Turn_Instruction[0] == TURN_180DEG_LEFT || Turn_Instruction[0] == TURN_180DEG_RIGHT || Turn_Instruction[0] == TURN_180DEG_STRAIGHT))
 8004024:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 8004028:	2b00      	cmp	r3, #0
 800402a:	f040 80e5 	bne.w	80041f8 <Running+0x3b8>
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	2b05      	cmp	r3, #5
 8004032:	d006      	beq.n	8004042 <Running+0x202>
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	2b02      	cmp	r3, #2
 8004038:	d003      	beq.n	8004042 <Running+0x202>
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	2b01      	cmp	r3, #1
 800403e:	f040 80db 	bne.w	80041f8 <Running+0x3b8>
				{
					Turn_180_Deg();
 8004042:	f000 fa71 	bl	8004528 <Turn_180_Deg>
					Previous_Line = LINE_HALF_BLACK;
 8004046:	4b36      	ldr	r3, [pc, #216]	; (8004120 <Running+0x2e0>)
 8004048:	2201      	movs	r2, #1
 800404a:	701a      	strb	r2, [r3, #0]
					Spin_once = 1;
 800404c:	2301      	movs	r3, #1
 800404e:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
				if(Spin_once == 0 && (Turn_Instruction[0] == TURN_180DEG_LEFT || Turn_Instruction[0] == TURN_180DEG_RIGHT || Turn_Instruction[0] == TURN_180DEG_STRAIGHT))
 8004052:	e0d1      	b.n	80041f8 <Running+0x3b8>
				}
			}

		/* Truong hop xe chay line giua ---------------------------------------*/
			else if (Temp_Line == 0b00000000)
 8004054:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8004058:	2b00      	cmp	r3, #0
 800405a:	f040 80ce 	bne.w	80041fa <Running+0x3ba>
			{
				if (Previous_Line == LINE_HALF_BLACK)
 800405e:	4b30      	ldr	r3, [pc, #192]	; (8004120 <Running+0x2e0>)
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	2b01      	cmp	r3, #1
 8004064:	d17c      	bne.n	8004160 <Running+0x320>
				{
					Sensor_Convert_A2D();
 8004066:	f000 fb71 	bl	800474c <Sensor_Convert_A2D>
					Go_Straight();
 800406a:	f000 fa83 	bl	8004574 <Go_Straight>
					point_passed = point_passed + 1;
 800406e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004072:	3301      	adds	r3, #1
 8004074:	b2db      	uxtb	r3, r3
 8004076:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

/*Step procesing BEGIN here */
					if(point_passed < Max_point)
 800407a:	f997 204f 	ldrsb.w	r2, [r7, #79]	; 0x4f
 800407e:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 8004082:	429a      	cmp	r2, r3
 8004084:	da42      	bge.n	800410c <Running+0x2cc>
					{
						switch(Instruction[point_passed])
 8004086:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004090:	4413      	add	r3, r2
 8004092:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8004096:	2b07      	cmp	r3, #7
 8004098:	d839      	bhi.n	800410e <Running+0x2ce>
 800409a:	a201      	add	r2, pc, #4	; (adr r2, 80040a0 <Running+0x260>)
 800409c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040a0:	080040f5 	.word	0x080040f5
 80040a4:	08004107 	.word	0x08004107
 80040a8:	08004101 	.word	0x08004101
 80040ac:	080040ef 	.word	0x080040ef
 80040b0:	080040e9 	.word	0x080040e9
 80040b4:	080040fb 	.word	0x080040fb
 80040b8:	0800410f 	.word	0x0800410f
 80040bc:	080040c1 	.word	0x080040c1
						{
						case TURN_SKIP_POINT:
							station_count = station_count + 1;
 80040c0:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80040c4:	3301      	adds	r3, #1
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
							STATION_ID = Map_Point[station_count];
 80040cc:	f997 304a 	ldrsb.w	r3, [r7, #74]	; 0x4a
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80040d6:	4413      	add	r3, r2
 80040d8:	f853 3c40 	ldr.w	r3, [r3, #-64]
 80040dc:	b2da      	uxtb	r2, r3
 80040de:	4b1f      	ldr	r3, [pc, #124]	; (800415c <Running+0x31c>)
 80040e0:	701a      	strb	r2, [r3, #0]
							Go_Straight();
 80040e2:	f000 fa47 	bl	8004574 <Go_Straight>
							break;
 80040e6:	e012      	b.n	800410e <Running+0x2ce>
						case TURN_LEFT:
							Left_Turn();
 80040e8:	f000 f9da 	bl	80044a0 <Left_Turn>
							break;
 80040ec:	e00f      	b.n	800410e <Running+0x2ce>
						case TURN_RIGHT:
							Right_Turn();
 80040ee:	f000 f9fb 	bl	80044e8 <Right_Turn>
							break;
 80040f2:	e00c      	b.n	800410e <Running+0x2ce>
						case TURN_SKIP:
							Go_Straight();
 80040f4:	f000 fa3e 	bl	8004574 <Go_Straight>
							break;
 80040f8:	e009      	b.n	800410e <Running+0x2ce>
						case TURN_180DEG_LEFT:
							Left_Turn();
 80040fa:	f000 f9d1 	bl	80044a0 <Left_Turn>
							break;
 80040fe:	e006      	b.n	800410e <Running+0x2ce>
						case TURN_180DEG_RIGHT:
							Right_Turn();
 8004100:	f000 f9f2 	bl	80044e8 <Right_Turn>
							break;
 8004104:	e003      	b.n	800410e <Running+0x2ce>
						case TURN_180DEG_STRAIGHT:
							Go_Straight();
 8004106:	f000 fa35 	bl	8004574 <Go_Straight>
							break;
 800410a:	e000      	b.n	800410e <Running+0x2ce>
;						}
					}
 800410c:	bf00      	nop

/*Step procesing END here */
					Previous_Line = LINE_MIDDLE;
 800410e:	4b04      	ldr	r3, [pc, #16]	; (8004120 <Running+0x2e0>)
 8004110:	2203      	movs	r2, #3
 8004112:	701a      	strb	r2, [r3, #0]
 8004114:	e071      	b.n	80041fa <Running+0x3ba>
 8004116:	bf00      	nop
 8004118:	0800fcc4 	.word	0x0800fcc4
 800411c:	0800fcdc 	.word	0x0800fcdc
 8004120:	20000009 	.word	0x20000009
 8004124:	2000026f 	.word	0x2000026f
 8004128:	20000284 	.word	0x20000284
 800412c:	20000272 	.word	0x20000272
 8004130:	20000276 	.word	0x20000276
 8004134:	af3addc7 	.word	0xaf3addc7
 8004138:	2000027a 	.word	0x2000027a
 800413c:	20000274 	.word	0x20000274
 8004140:	20000278 	.word	0x20000278
 8004144:	2000027c 	.word	0x2000027c
 8004148:	2000026d 	.word	0x2000026d
 800414c:	2000026e 	.word	0x2000026e
 8004150:	2000000a 	.word	0x2000000a
 8004154:	20000264 	.word	0x20000264
 8004158:	200004c4 	.word	0x200004c4
 800415c:	20000270 	.word	0x20000270
				}

				else if(Previous_Line == LINE_MIDDLE)
 8004160:	4b5a      	ldr	r3, [pc, #360]	; (80042cc <Running+0x48c>)
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	2b03      	cmp	r3, #3
 8004166:	d148      	bne.n	80041fa <Running+0x3ba>
				{
				Sensor_Convert_A2D();
 8004168:	f000 faf0 	bl	800474c <Sensor_Convert_A2D>
				Error_Val = Error_Return(LineDetect);
 800416c:	4b58      	ldr	r3, [pc, #352]	; (80042d0 <Running+0x490>)
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	4618      	mov	r0, r3
 8004172:	f000 fa4f 	bl	8004614 <Error_Return>
 8004176:	4603      	mov	r3, r0
 8004178:	4a56      	ldr	r2, [pc, #344]	; (80042d4 <Running+0x494>)
 800417a:	6013      	str	r3, [r2, #0]
				int16_t PID_Val = Line_Follower_PID(3500,Error_Val,&Car);
 800417c:	4b55      	ldr	r3, [pc, #340]	; (80042d4 <Running+0x494>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a55      	ldr	r2, [pc, #340]	; (80042d8 <Running+0x498>)
 8004182:	4619      	mov	r1, r3
 8004184:	f640 50ac 	movw	r0, #3500	; 0xdac
 8004188:	f7fe ff72 	bl	8003070 <Line_Follower_PID>
 800418c:	4603      	mov	r3, r0
 800418e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
				Motor_Speed_R = (Right + PID_Val);
 8004192:	4b52      	ldr	r3, [pc, #328]	; (80042dc <Running+0x49c>)
 8004194:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004198:	461a      	mov	r2, r3
 800419a:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 800419e:	4413      	add	r3, r2
 80041a0:	4a4f      	ldr	r2, [pc, #316]	; (80042e0 <Running+0x4a0>)
 80041a2:	6013      	str	r3, [r2, #0]
				Motor_Speed_L = (Left - PID_Val);
 80041a4:	4b4f      	ldr	r3, [pc, #316]	; (80042e4 <Running+0x4a4>)
 80041a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041aa:	461a      	mov	r2, r3
 80041ac:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	4a4d      	ldr	r2, [pc, #308]	; (80042e8 <Running+0x4a8>)
 80041b4:	6013      	str	r3, [r2, #0]
				Motor_Speed_R = Constraint(Motor_Speed_R, -MAXSPEED_RIGHT,MAXSPEED_RIGHT);
 80041b6:	4b4a      	ldr	r3, [pc, #296]	; (80042e0 <Running+0x4a0>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f640 42e4 	movw	r2, #3300	; 0xce4
 80041be:	494b      	ldr	r1, [pc, #300]	; (80042ec <Running+0x4ac>)
 80041c0:	4618      	mov	r0, r3
 80041c2:	f000 faa5 	bl	8004710 <Constraint>
 80041c6:	4603      	mov	r3, r0
 80041c8:	4a45      	ldr	r2, [pc, #276]	; (80042e0 <Running+0x4a0>)
 80041ca:	6013      	str	r3, [r2, #0]
				Motor_Speed_L = Constraint(Motor_Speed_L, -MAXSPEED_LEFT,MAXSPEED_LEFT);
 80041cc:	4b46      	ldr	r3, [pc, #280]	; (80042e8 <Running+0x4a8>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f640 52a2 	movw	r2, #3490	; 0xda2
 80041d4:	4946      	ldr	r1, [pc, #280]	; (80042f0 <Running+0x4b0>)
 80041d6:	4618      	mov	r0, r3
 80041d8:	f000 fa9a 	bl	8004710 <Constraint>
 80041dc:	4603      	mov	r3, r0
 80041de:	4a42      	ldr	r2, [pc, #264]	; (80042e8 <Running+0x4a8>)
 80041e0:	6013      	str	r3, [r2, #0]
				MotorR_SetPWM(Motor_Speed_R);
 80041e2:	4b3f      	ldr	r3, [pc, #252]	; (80042e0 <Running+0x4a0>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7fd ff6e 	bl	80020c8 <MotorR_SetPWM>
				MotorL_SetPWM(Motor_Speed_L);
 80041ec:	4b3e      	ldr	r3, [pc, #248]	; (80042e8 <Running+0x4a8>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4618      	mov	r0, r3
 80041f2:	f7fd ff33 	bl	800205c <MotorL_SetPWM>
 80041f6:	e000      	b.n	80041fa <Running+0x3ba>
				if(Spin_once == 0 && (Turn_Instruction[0] == TURN_180DEG_LEFT || Turn_Instruction[0] == TURN_180DEG_RIGHT || Turn_Instruction[0] == TURN_180DEG_STRAIGHT))
 80041f8:	bf00      	nop
				}
			}

			if(Status == 0)
 80041fa:	4b3e      	ldr	r3, [pc, #248]	; (80042f4 <Running+0x4b4>)
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d109      	bne.n	8004216 <Running+0x3d6>
			{
				Trans_flag = DATA_TRANS_DIS;
 8004202:	4b3d      	ldr	r3, [pc, #244]	; (80042f8 <Running+0x4b8>)
 8004204:	2200      	movs	r2, #0
 8004206:	701a      	strb	r2, [r3, #0]
				lcd_send_cmd(0x80 | 0x00);
 8004208:	2080      	movs	r0, #128	; 0x80
 800420a:	f7fd fe4d 	bl	8001ea8 <lcd_send_cmd>
				lcd_send_string("Car is Pause        ");
 800420e:	483b      	ldr	r0, [pc, #236]	; (80042fc <Running+0x4bc>)
 8004210:	f7fd fefb 	bl	800200a <lcd_send_string>
 8004214:	e049      	b.n	80042aa <Running+0x46a>
			}
			else
			{
				Trans_flag = DATA_TRANS_EN;
 8004216:	4b38      	ldr	r3, [pc, #224]	; (80042f8 <Running+0x4b8>)
 8004218:	2201      	movs	r2, #1
 800421a:	701a      	strb	r2, [r3, #0]
				lcd_send_cmd(0x80 | 0x00);
 800421c:	2080      	movs	r0, #128	; 0x80
 800421e:	f7fd fe43 	bl	8001ea8 <lcd_send_cmd>
				lcd_send_string("Car is Running!        ");
 8004222:	4837      	ldr	r0, [pc, #220]	; (8004300 <Running+0x4c0>)
 8004224:	f7fd fef1 	bl	800200a <lcd_send_string>
 8004228:	e03f      	b.n	80042aa <Running+0x46a>
			}
		}
		else if(Begin_solving == 0)
 800422a:	4b36      	ldr	r3, [pc, #216]	; (8004304 <Running+0x4c4>)
 800422c:	f993 3000 	ldrsb.w	r3, [r3]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d13a      	bne.n	80042aa <Running+0x46a>
		{
			MotorL_SetPWM(0);
 8004234:	2000      	movs	r0, #0
 8004236:	f7fd ff11 	bl	800205c <MotorL_SetPWM>
			MotorR_SetPWM(0);
 800423a:	2000      	movs	r0, #0
 800423c:	f7fd ff44 	bl	80020c8 <MotorR_SetPWM>
		/*Reset value after done solving the matrix*/
			memset(Instruction,0,sizeof(Instruction));
 8004240:	f107 0320 	add.w	r3, r7, #32
 8004244:	2220      	movs	r2, #32
 8004246:	2100      	movs	r1, #0
 8004248:	4618      	mov	r0, r3
 800424a:	f006 fef5 	bl	800b038 <memset>
			memset(Map_Point,0,sizeof(Map_Point));
 800424e:	f107 0310 	add.w	r3, r7, #16
 8004252:	2210      	movs	r2, #16
 8004254:	2100      	movs	r1, #0
 8004256:	4618      	mov	r0, r3
 8004258:	f006 feee 	bl	800b038 <memset>
			memset(Turn_Instruction,0,sizeof(Turn_Instruction));
 800425c:	463b      	mov	r3, r7
 800425e:	2210      	movs	r2, #16
 8004260:	2100      	movs	r1, #0
 8004262:	4618      	mov	r0, r3
 8004264:	f006 fee8 	bl	800b038 <memset>
			point_passed = -1;
 8004268:	23ff      	movs	r3, #255	; 0xff
 800426a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			Max_point = 0;
 800426e:	2300      	movs	r3, #0
 8004270:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
			Max_point_temp = 0;
 8004274:	2300      	movs	r3, #0
 8004276:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
			Temp_Line = 0;
 800427a:	2300      	movs	r3, #0
 800427c:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
			Spin_once = 0;
 8004280:	2300      	movs	r3, #0
 8004282:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
			Path_guidance = 1;
 8004286:	2301      	movs	r3, #1
 8004288:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
			Max_point = 0;
 800428c:	2300      	movs	r3, #0
 800428e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
			station_count = -1;
 8004292:	23ff      	movs	r3, #255	; 0xff
 8004294:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
			if(Read_RFID_Flag == 1){
 8004298:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800429c:	2b01      	cmp	r3, #1
 800429e:	d104      	bne.n	80042aa <Running+0x46a>
				Read_RFID_CARD();
 80042a0:	f000 f834 	bl	800430c <Read_RFID_CARD>
				Read_RFID_Flag = 0;
 80042a4:	2300      	movs	r3, #0
 80042a6:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	while (cancel_running) {
 80042aa:	4b17      	ldr	r3, [pc, #92]	; (8004308 <Running+0x4c8>)
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	f47f ade8 	bne.w	8003e84 <Running+0x44>
			}
		}
	}
	MotorL_SetPWM(0);
 80042b4:	2000      	movs	r0, #0
 80042b6:	f7fd fed1 	bl	800205c <MotorL_SetPWM>
	MotorR_SetPWM(0);
 80042ba:	2000      	movs	r0, #0
 80042bc:	f7fd ff04 	bl	80020c8 <MotorR_SetPWM>
	lcd_clear();
 80042c0:	f7fd fe52 	bl	8001f68 <lcd_clear>
}
 80042c4:	bf00      	nop
 80042c6:	3754      	adds	r7, #84	; 0x54
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd90      	pop	{r4, r7, pc}
 80042cc:	20000009 	.word	0x20000009
 80042d0:	20000264 	.word	0x20000264
 80042d4:	200004c4 	.word	0x200004c4
 80042d8:	20000038 	.word	0x20000038
 80042dc:	2000000e 	.word	0x2000000e
 80042e0:	20000738 	.word	0x20000738
 80042e4:	2000000c 	.word	0x2000000c
 80042e8:	20000734 	.word	0x20000734
 80042ec:	fffff31c 	.word	0xfffff31c
 80042f0:	fffff25e 	.word	0xfffff25e
 80042f4:	20000007 	.word	0x20000007
 80042f8:	2000026c 	.word	0x2000026c
 80042fc:	0800fcf4 	.word	0x0800fcf4
 8004300:	0800fcc4 	.word	0x0800fcc4
 8004304:	2000026f 	.word	0x2000026f
 8004308:	20000006 	.word	0x20000006

0800430c <Read_RFID_CARD>:
void Read_RFID_CARD()
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b088      	sub	sp, #32
 8004310:	af00      	add	r7, sp, #0
	uint8_t recover_position = 0;
 8004312:	2300      	movs	r3, #0
 8004314:	77fb      	strb	r3, [r7, #31]
	uint8_t enable = 1;
 8004316:	2301      	movs	r3, #1
 8004318:	77bb      	strb	r3, [r7, #30]
	char Card_Buffer_Str[4];
	char concat_Buff[20];
	memset(concat_Buff,0,sizeof(concat_Buff));
 800431a:	1d3b      	adds	r3, r7, #4
 800431c:	2214      	movs	r2, #20
 800431e:	2100      	movs	r1, #0
 8004320:	4618      	mov	r0, r3
 8004322:	f006 fe89 	bl	800b038 <memset>
	memset(Card_Buffer_Str,0,sizeof(Card_Buffer_Str));
 8004326:	f107 0318 	add.w	r3, r7, #24
 800432a:	2204      	movs	r2, #4
 800432c:	2100      	movs	r1, #0
 800432e:	4618      	mov	r0, r3
 8004330:	f006 fe82 	bl	800b038 <memset>
	MotorL_SetPWM(2500);
 8004334:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8004338:	f7fd fe90 	bl	800205c <MotorL_SetPWM>
	MotorR_SetPWM(2500);
 800433c:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8004340:	f7fd fec2 	bl	80020c8 <MotorR_SetPWM>
	MFRC522_Init();
 8004344:	f000 ffd1 	bl	80052ea <MFRC522_Init>
	while(enable)
 8004348:	e069      	b.n	800441e <Read_RFID_CARD+0x112>
	{
		if (MFRC522_Check(CardID) == MI_OK)
 800434a:	484d      	ldr	r0, [pc, #308]	; (8004480 <Read_RFID_CARD+0x174>)
 800434c:	f000 fe02 	bl	8004f54 <MFRC522_Check>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d163      	bne.n	800441e <Read_RFID_CARD+0x112>
		{
			MotorL_SetPWM(0);
 8004356:	2000      	movs	r0, #0
 8004358:	f7fd fe80 	bl	800205c <MotorL_SetPWM>
			MotorR_SetPWM(0);
 800435c:	2000      	movs	r0, #0
 800435e:	f7fd feb3 	bl	80020c8 <MotorR_SetPWM>
			sprintf(Card_Buffer_Str,"\"%02x",CardID[0]);
 8004362:	4b47      	ldr	r3, [pc, #284]	; (8004480 <Read_RFID_CARD+0x174>)
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	461a      	mov	r2, r3
 8004368:	f107 0318 	add.w	r3, r7, #24
 800436c:	4945      	ldr	r1, [pc, #276]	; (8004484 <Read_RFID_CARD+0x178>)
 800436e:	4618      	mov	r0, r3
 8004370:	f007 fad4 	bl	800b91c <siprintf>
			strcat(concat_Buff,Card_Buffer_Str);
 8004374:	f107 0218 	add.w	r2, r7, #24
 8004378:	1d3b      	adds	r3, r7, #4
 800437a:	4611      	mov	r1, r2
 800437c:	4618      	mov	r0, r3
 800437e:	f007 faed 	bl	800b95c <strcat>
			sprintf(Card_Buffer_Str,"%02x",CardID[1]);
 8004382:	4b3f      	ldr	r3, [pc, #252]	; (8004480 <Read_RFID_CARD+0x174>)
 8004384:	785b      	ldrb	r3, [r3, #1]
 8004386:	461a      	mov	r2, r3
 8004388:	f107 0318 	add.w	r3, r7, #24
 800438c:	493e      	ldr	r1, [pc, #248]	; (8004488 <Read_RFID_CARD+0x17c>)
 800438e:	4618      	mov	r0, r3
 8004390:	f007 fac4 	bl	800b91c <siprintf>
			strcat(concat_Buff,Card_Buffer_Str);
 8004394:	f107 0218 	add.w	r2, r7, #24
 8004398:	1d3b      	adds	r3, r7, #4
 800439a:	4611      	mov	r1, r2
 800439c:	4618      	mov	r0, r3
 800439e:	f007 fadd 	bl	800b95c <strcat>
			sprintf(Card_Buffer_Str,"%02x",CardID[2]);
 80043a2:	4b37      	ldr	r3, [pc, #220]	; (8004480 <Read_RFID_CARD+0x174>)
 80043a4:	789b      	ldrb	r3, [r3, #2]
 80043a6:	461a      	mov	r2, r3
 80043a8:	f107 0318 	add.w	r3, r7, #24
 80043ac:	4936      	ldr	r1, [pc, #216]	; (8004488 <Read_RFID_CARD+0x17c>)
 80043ae:	4618      	mov	r0, r3
 80043b0:	f007 fab4 	bl	800b91c <siprintf>
			strcat(concat_Buff,Card_Buffer_Str);
 80043b4:	f107 0218 	add.w	r2, r7, #24
 80043b8:	1d3b      	adds	r3, r7, #4
 80043ba:	4611      	mov	r1, r2
 80043bc:	4618      	mov	r0, r3
 80043be:	f007 facd 	bl	800b95c <strcat>
			sprintf(Card_Buffer_Str,"%02x",CardID[3]);
 80043c2:	4b2f      	ldr	r3, [pc, #188]	; (8004480 <Read_RFID_CARD+0x174>)
 80043c4:	78db      	ldrb	r3, [r3, #3]
 80043c6:	461a      	mov	r2, r3
 80043c8:	f107 0318 	add.w	r3, r7, #24
 80043cc:	492e      	ldr	r1, [pc, #184]	; (8004488 <Read_RFID_CARD+0x17c>)
 80043ce:	4618      	mov	r0, r3
 80043d0:	f007 faa4 	bl	800b91c <siprintf>
			strcat(concat_Buff,Card_Buffer_Str);
 80043d4:	f107 0218 	add.w	r2, r7, #24
 80043d8:	1d3b      	adds	r3, r7, #4
 80043da:	4611      	mov	r1, r2
 80043dc:	4618      	mov	r0, r3
 80043de:	f007 fabd 	bl	800b95c <strcat>
			sprintf(Card_Buffer_Str,"%02x\"",CardID[4]);
 80043e2:	4b27      	ldr	r3, [pc, #156]	; (8004480 <Read_RFID_CARD+0x174>)
 80043e4:	791b      	ldrb	r3, [r3, #4]
 80043e6:	461a      	mov	r2, r3
 80043e8:	f107 0318 	add.w	r3, r7, #24
 80043ec:	4927      	ldr	r1, [pc, #156]	; (800448c <Read_RFID_CARD+0x180>)
 80043ee:	4618      	mov	r0, r3
 80043f0:	f007 fa94 	bl	800b91c <siprintf>
			strcat(concat_Buff,Card_Buffer_Str);
 80043f4:	f107 0218 	add.w	r2, r7, #24
 80043f8:	1d3b      	adds	r3, r7, #4
 80043fa:	4611      	mov	r1, r2
 80043fc:	4618      	mov	r0, r3
 80043fe:	f007 faad 	bl	800b95c <strcat>
			strcpy(RFID_Str,concat_Buff);
 8004402:	1d3b      	adds	r3, r7, #4
 8004404:	4619      	mov	r1, r3
 8004406:	4822      	ldr	r0, [pc, #136]	; (8004490 <Read_RFID_CARD+0x184>)
 8004408:	f007 fab7 	bl	800b97a <strcpy>
			RFID_ID_ready = 1;
 800440c:	4b21      	ldr	r3, [pc, #132]	; (8004494 <Read_RFID_CARD+0x188>)
 800440e:	2201      	movs	r2, #1
 8004410:	701a      	strb	r2, [r3, #0]
			enable = 0;
 8004412:	2300      	movs	r3, #0
 8004414:	77bb      	strb	r3, [r7, #30]
			recover_position = 1;
 8004416:	2301      	movs	r3, #1
 8004418:	77fb      	strb	r3, [r7, #31]
			MFRC522_Reset();
 800441a:	f000 ff8a 	bl	8005332 <MFRC522_Reset>
	while(enable)
 800441e:	7fbb      	ldrb	r3, [r7, #30]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d192      	bne.n	800434a <Read_RFID_CARD+0x3e>
		}
	}
	while(recover_position)
 8004424:	e01e      	b.n	8004464 <Read_RFID_CARD+0x158>
	{
		Sensor_Convert_A2D();
 8004426:	f000 f991 	bl	800474c <Sensor_Convert_A2D>
		MotorL_SetPWM(-2500);
 800442a:	481b      	ldr	r0, [pc, #108]	; (8004498 <Read_RFID_CARD+0x18c>)
 800442c:	f7fd fe16 	bl	800205c <MotorL_SetPWM>
		MotorR_SetPWM(-2500);
 8004430:	4819      	ldr	r0, [pc, #100]	; (8004498 <Read_RFID_CARD+0x18c>)
 8004432:	f7fd fe49 	bl	80020c8 <MotorR_SetPWM>
		if((LineDetect & 0b10000100) == 0b10000000 || (LineDetect & 0b10000100) == 0b00000100 || (LineDetect & 0b10000100) == 0b10000100)
 8004436:	4b19      	ldr	r3, [pc, #100]	; (800449c <Read_RFID_CARD+0x190>)
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	f003 0384 	and.w	r3, r3, #132	; 0x84
 800443e:	2b80      	cmp	r3, #128	; 0x80
 8004440:	d00b      	beq.n	800445a <Read_RFID_CARD+0x14e>
 8004442:	4b16      	ldr	r3, [pc, #88]	; (800449c <Read_RFID_CARD+0x190>)
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	f003 0384 	and.w	r3, r3, #132	; 0x84
 800444a:	2b04      	cmp	r3, #4
 800444c:	d005      	beq.n	800445a <Read_RFID_CARD+0x14e>
 800444e:	4b13      	ldr	r3, [pc, #76]	; (800449c <Read_RFID_CARD+0x190>)
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	f003 0384 	and.w	r3, r3, #132	; 0x84
 8004456:	2b84      	cmp	r3, #132	; 0x84
 8004458:	d104      	bne.n	8004464 <Read_RFID_CARD+0x158>
		{
			HAL_Delay(250);
 800445a:	20fa      	movs	r0, #250	; 0xfa
 800445c:	f001 fcaa 	bl	8005db4 <HAL_Delay>
			recover_position = 0;
 8004460:	2300      	movs	r3, #0
 8004462:	77fb      	strb	r3, [r7, #31]
	while(recover_position)
 8004464:	7ffb      	ldrb	r3, [r7, #31]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d1dd      	bne.n	8004426 <Read_RFID_CARD+0x11a>
		}
	}
	MotorL_SetPWM(0);
 800446a:	2000      	movs	r0, #0
 800446c:	f7fd fdf6 	bl	800205c <MotorL_SetPWM>
	MotorR_SetPWM(0);
 8004470:	2000      	movs	r0, #0
 8004472:	f7fd fe29 	bl	80020c8 <MotorR_SetPWM>
}
 8004476:	bf00      	nop
 8004478:	3720      	adds	r7, #32
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	2000072c 	.word	0x2000072c
 8004484:	0800fd0c 	.word	0x0800fd0c
 8004488:	0800fd14 	.word	0x0800fd14
 800448c:	0800fd1c 	.word	0x0800fd1c
 8004490:	20000024 	.word	0x20000024
 8004494:	20000271 	.word	0x20000271
 8004498:	fffff63c 	.word	0xfffff63c
 800449c:	20000264 	.word	0x20000264

080044a0 <Left_Turn>:

static void Left_Turn()
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	af00      	add	r7, sp, #0
	MotorR_SetPWM(4900);
 80044a4:	f241 3024 	movw	r0, #4900	; 0x1324
 80044a8:	f7fd fe0e 	bl	80020c8 <MotorR_SetPWM>
	MotorL_SetPWM(-3000);
 80044ac:	480c      	ldr	r0, [pc, #48]	; (80044e0 <Left_Turn+0x40>)
 80044ae:	f7fd fdd5 	bl	800205c <MotorL_SetPWM>
	HAL_Delay(160);
 80044b2:	20a0      	movs	r0, #160	; 0xa0
 80044b4:	f001 fc7e 	bl	8005db4 <HAL_Delay>
	while((LineDetect & 0b11000000) <= 64)
 80044b8:	e001      	b.n	80044be <Left_Turn+0x1e>
	{
		Sensor_Convert_A2D();
 80044ba:	f000 f947 	bl	800474c <Sensor_Convert_A2D>
	while((LineDetect & 0b11000000) <= 64)
 80044be:	4b09      	ldr	r3, [pc, #36]	; (80044e4 <Left_Turn+0x44>)
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80044c6:	2b40      	cmp	r3, #64	; 0x40
 80044c8:	ddf7      	ble.n	80044ba <Left_Turn+0x1a>
	}
	while(LineDetect != 0b00010000)
 80044ca:	e001      	b.n	80044d0 <Left_Turn+0x30>
	{
		Sensor_Convert_A2D();
 80044cc:	f000 f93e 	bl	800474c <Sensor_Convert_A2D>
	while(LineDetect != 0b00010000)
 80044d0:	4b04      	ldr	r3, [pc, #16]	; (80044e4 <Left_Turn+0x44>)
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	2b10      	cmp	r3, #16
 80044d6:	d1f9      	bne.n	80044cc <Left_Turn+0x2c>
	}
}
 80044d8:	bf00      	nop
 80044da:	bf00      	nop
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	fffff448 	.word	0xfffff448
 80044e4:	20000264 	.word	0x20000264

080044e8 <Right_Turn>:
static void Right_Turn()
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	af00      	add	r7, sp, #0
	MotorL_SetPWM(5400);
 80044ec:	f241 5018 	movw	r0, #5400	; 0x1518
 80044f0:	f7fd fdb4 	bl	800205c <MotorL_SetPWM>
	MotorR_SetPWM(-3900);
 80044f4:	480a      	ldr	r0, [pc, #40]	; (8004520 <Right_Turn+0x38>)
 80044f6:	f7fd fde7 	bl	80020c8 <MotorR_SetPWM>
	while((LineDetect & 0b00001100) <= 8)
 80044fa:	e001      	b.n	8004500 <Right_Turn+0x18>
	{
		Sensor_Convert_A2D();
 80044fc:	f000 f926 	bl	800474c <Sensor_Convert_A2D>
	while((LineDetect & 0b00001100) <= 8)
 8004500:	4b08      	ldr	r3, [pc, #32]	; (8004524 <Right_Turn+0x3c>)
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	f003 030c 	and.w	r3, r3, #12
 8004508:	2b08      	cmp	r3, #8
 800450a:	ddf7      	ble.n	80044fc <Right_Turn+0x14>
	}
	while(LineDetect != 0b00010000)
 800450c:	e001      	b.n	8004512 <Right_Turn+0x2a>
	{
		Sensor_Convert_A2D();
 800450e:	f000 f91d 	bl	800474c <Sensor_Convert_A2D>
	while(LineDetect != 0b00010000)
 8004512:	4b04      	ldr	r3, [pc, #16]	; (8004524 <Right_Turn+0x3c>)
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	2b10      	cmp	r3, #16
 8004518:	d1f9      	bne.n	800450e <Right_Turn+0x26>
	}
}
 800451a:	bf00      	nop
 800451c:	bf00      	nop
 800451e:	bd80      	pop	{r7, pc}
 8004520:	fffff0c4 	.word	0xfffff0c4
 8004524:	20000264 	.word	0x20000264

08004528 <Turn_180_Deg>:
static void Turn_180_Deg()
{
 8004528:	b580      	push	{r7, lr}
 800452a:	af00      	add	r7, sp, #0
	MotorL_SetPWM(6200);
 800452c:	f641 0038 	movw	r0, #6200	; 0x1838
 8004530:	f7fd fd94 	bl	800205c <MotorL_SetPWM>
	MotorR_SetPWM(-6200);
 8004534:	480d      	ldr	r0, [pc, #52]	; (800456c <Turn_180_Deg+0x44>)
 8004536:	f7fd fdc7 	bl	80020c8 <MotorR_SetPWM>
	while(LineDetect != 0b00000000)
 800453a:	e001      	b.n	8004540 <Turn_180_Deg+0x18>
	{
		Sensor_Convert_A2D();
 800453c:	f000 f906 	bl	800474c <Sensor_Convert_A2D>
	while(LineDetect != 0b00000000)
 8004540:	4b0b      	ldr	r3, [pc, #44]	; (8004570 <Turn_180_Deg+0x48>)
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d1f9      	bne.n	800453c <Turn_180_Deg+0x14>
	}
	while(LineDetect <= 3)
 8004548:	e001      	b.n	800454e <Turn_180_Deg+0x26>
	{
		Sensor_Convert_A2D();
 800454a:	f000 f8ff 	bl	800474c <Sensor_Convert_A2D>
	while(LineDetect <= 3)
 800454e:	4b08      	ldr	r3, [pc, #32]	; (8004570 <Turn_180_Deg+0x48>)
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	2b03      	cmp	r3, #3
 8004554:	d9f9      	bls.n	800454a <Turn_180_Deg+0x22>
	}
	while(LineDetect != 0b00010000)
 8004556:	e001      	b.n	800455c <Turn_180_Deg+0x34>
	{
		Sensor_Convert_A2D();
 8004558:	f000 f8f8 	bl	800474c <Sensor_Convert_A2D>
	while(LineDetect != 0b00010000)
 800455c:	4b04      	ldr	r3, [pc, #16]	; (8004570 <Turn_180_Deg+0x48>)
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	2b10      	cmp	r3, #16
 8004562:	d1f9      	bne.n	8004558 <Turn_180_Deg+0x30>
	}
}
 8004564:	bf00      	nop
 8004566:	bf00      	nop
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	ffffe7c8 	.word	0xffffe7c8
 8004570:	20000264 	.word	0x20000264

08004574 <Go_Straight>:
static void Go_Straight()
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
	int16_t PID_Val = Line_Follower_PID(3500,3500,&Car);
 800457a:	4a1f      	ldr	r2, [pc, #124]	; (80045f8 <Go_Straight+0x84>)
 800457c:	f640 51ac 	movw	r1, #3500	; 0xdac
 8004580:	f640 50ac 	movw	r0, #3500	; 0xdac
 8004584:	f7fe fd74 	bl	8003070 <Line_Follower_PID>
 8004588:	4603      	mov	r3, r0
 800458a:	80fb      	strh	r3, [r7, #6]
	Motor_Speed_R = (Right + PID_Val);
 800458c:	4b1b      	ldr	r3, [pc, #108]	; (80045fc <Go_Straight+0x88>)
 800458e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004592:	461a      	mov	r2, r3
 8004594:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004598:	4413      	add	r3, r2
 800459a:	4a19      	ldr	r2, [pc, #100]	; (8004600 <Go_Straight+0x8c>)
 800459c:	6013      	str	r3, [r2, #0]
	Motor_Speed_L = (Left - PID_Val);
 800459e:	4b19      	ldr	r3, [pc, #100]	; (8004604 <Go_Straight+0x90>)
 80045a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045a4:	461a      	mov	r2, r3
 80045a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	4a16      	ldr	r2, [pc, #88]	; (8004608 <Go_Straight+0x94>)
 80045ae:	6013      	str	r3, [r2, #0]
	Motor_Speed_R = Constraint(Motor_Speed_R, -MAXSPEED_RIGHT,MAXSPEED_RIGHT);
 80045b0:	4b13      	ldr	r3, [pc, #76]	; (8004600 <Go_Straight+0x8c>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f640 42e4 	movw	r2, #3300	; 0xce4
 80045b8:	4914      	ldr	r1, [pc, #80]	; (800460c <Go_Straight+0x98>)
 80045ba:	4618      	mov	r0, r3
 80045bc:	f000 f8a8 	bl	8004710 <Constraint>
 80045c0:	4603      	mov	r3, r0
 80045c2:	4a0f      	ldr	r2, [pc, #60]	; (8004600 <Go_Straight+0x8c>)
 80045c4:	6013      	str	r3, [r2, #0]
	Motor_Speed_L = Constraint(Motor_Speed_L, -MAXSPEED_LEFT,MAXSPEED_LEFT);
 80045c6:	4b10      	ldr	r3, [pc, #64]	; (8004608 <Go_Straight+0x94>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f640 52a2 	movw	r2, #3490	; 0xda2
 80045ce:	4910      	ldr	r1, [pc, #64]	; (8004610 <Go_Straight+0x9c>)
 80045d0:	4618      	mov	r0, r3
 80045d2:	f000 f89d 	bl	8004710 <Constraint>
 80045d6:	4603      	mov	r3, r0
 80045d8:	4a0b      	ldr	r2, [pc, #44]	; (8004608 <Go_Straight+0x94>)
 80045da:	6013      	str	r3, [r2, #0]
	MotorR_SetPWM(Motor_Speed_R);
 80045dc:	4b08      	ldr	r3, [pc, #32]	; (8004600 <Go_Straight+0x8c>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4618      	mov	r0, r3
 80045e2:	f7fd fd71 	bl	80020c8 <MotorR_SetPWM>
	MotorL_SetPWM(Motor_Speed_L);
 80045e6:	4b08      	ldr	r3, [pc, #32]	; (8004608 <Go_Straight+0x94>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4618      	mov	r0, r3
 80045ec:	f7fd fd36 	bl	800205c <MotorL_SetPWM>
}
 80045f0:	bf00      	nop
 80045f2:	3708      	adds	r7, #8
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	20000038 	.word	0x20000038
 80045fc:	2000000e 	.word	0x2000000e
 8004600:	20000738 	.word	0x20000738
 8004604:	2000000c 	.word	0x2000000c
 8004608:	20000734 	.word	0x20000734
 800460c:	fffff31c 	.word	0xfffff31c
 8004610:	fffff25e 	.word	0xfffff25e

08004614 <Error_Return>:
static int Error_Return (uint8_t Sensor_Array){
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	4603      	mov	r3, r0
 800461c:	71fb      	strb	r3, [r7, #7]
	switch(Sensor_Array){
 800461e:	79fb      	ldrb	r3, [r7, #7]
 8004620:	2b60      	cmp	r3, #96	; 0x60
 8004622:	d066      	beq.n	80046f2 <Error_Return+0xde>
 8004624:	2b60      	cmp	r3, #96	; 0x60
 8004626:	dc6a      	bgt.n	80046fe <Error_Return+0xea>
 8004628:	2b40      	cmp	r3, #64	; 0x40
 800462a:	d065      	beq.n	80046f8 <Error_Return+0xe4>
 800462c:	2b40      	cmp	r3, #64	; 0x40
 800462e:	dc66      	bgt.n	80046fe <Error_Return+0xea>
 8004630:	2b20      	cmp	r3, #32
 8004632:	dc49      	bgt.n	80046c8 <Error_Return+0xb4>
 8004634:	2b00      	cmp	r3, #0
 8004636:	db62      	blt.n	80046fe <Error_Return+0xea>
 8004638:	2b20      	cmp	r3, #32
 800463a:	d860      	bhi.n	80046fe <Error_Return+0xea>
 800463c:	a201      	add	r2, pc, #4	; (adr r2, 8004644 <Error_Return+0x30>)
 800463e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004642:	bf00      	nop
 8004644:	080046e1 	.word	0x080046e1
 8004648:	080046ff 	.word	0x080046ff
 800464c:	080046ff 	.word	0x080046ff
 8004650:	080046ff 	.word	0x080046ff
 8004654:	080046ff 	.word	0x080046ff
 8004658:	080046ff 	.word	0x080046ff
 800465c:	080046ff 	.word	0x080046ff
 8004660:	080046ff 	.word	0x080046ff
 8004664:	080046cf 	.word	0x080046cf
 8004668:	080046ff 	.word	0x080046ff
 800466c:	080046ff 	.word	0x080046ff
 8004670:	080046ff 	.word	0x080046ff
 8004674:	080046ff 	.word	0x080046ff
 8004678:	080046ff 	.word	0x080046ff
 800467c:	080046ff 	.word	0x080046ff
 8004680:	080046ff 	.word	0x080046ff
 8004684:	080046db 	.word	0x080046db
 8004688:	080046ff 	.word	0x080046ff
 800468c:	080046ff 	.word	0x080046ff
 8004690:	080046ff 	.word	0x080046ff
 8004694:	080046ff 	.word	0x080046ff
 8004698:	080046ff 	.word	0x080046ff
 800469c:	080046ff 	.word	0x080046ff
 80046a0:	080046ff 	.word	0x080046ff
 80046a4:	080046d5 	.word	0x080046d5
 80046a8:	080046ff 	.word	0x080046ff
 80046ac:	080046ff 	.word	0x080046ff
 80046b0:	080046ff 	.word	0x080046ff
 80046b4:	080046ff 	.word	0x080046ff
 80046b8:	080046ff 	.word	0x080046ff
 80046bc:	080046ff 	.word	0x080046ff
 80046c0:	080046ff 	.word	0x080046ff
 80046c4:	080046ed 	.word	0x080046ed
 80046c8:	2b30      	cmp	r3, #48	; 0x30
 80046ca:	d00c      	beq.n	80046e6 <Error_Return+0xd2>
 80046cc:	e017      	b.n	80046fe <Error_Return+0xea>
	case 0b00001000:
		return 4100;
 80046ce:	f241 0304 	movw	r3, #4100	; 0x1004
 80046d2:	e016      	b.n	8004702 <Error_Return+0xee>
		break;
	case 0b00011000:
		return 3900;
 80046d4:	f640 733c 	movw	r3, #3900	; 0xf3c
 80046d8:	e013      	b.n	8004702 <Error_Return+0xee>
		break;

	case 0b00010000:
		return 3700;
 80046da:	f640 6374 	movw	r3, #3700	; 0xe74
 80046de:	e010      	b.n	8004702 <Error_Return+0xee>
		break;

	case 0b00000000:
		return 3500;
 80046e0:	f640 53ac 	movw	r3, #3500	; 0xdac
 80046e4:	e00d      	b.n	8004702 <Error_Return+0xee>
		break;

	case 0b00110000:
		return 3500;
 80046e6:	f640 53ac 	movw	r3, #3500	; 0xdac
 80046ea:	e00a      	b.n	8004702 <Error_Return+0xee>
		break;

	case 0b00100000:
		return 3300;
 80046ec:	f640 43e4 	movw	r3, #3300	; 0xce4
 80046f0:	e007      	b.n	8004702 <Error_Return+0xee>
		break;

	case 0b01100000:
		return 3100;
 80046f2:	f640 431c 	movw	r3, #3100	; 0xc1c
 80046f6:	e004      	b.n	8004702 <Error_Return+0xee>
		break;
	case 0b01000000:
		return 2900;
 80046f8:	f640 3354 	movw	r3, #2900	; 0xb54
 80046fc:	e001      	b.n	8004702 <Error_Return+0xee>
		break;
/*---------------------dont care------------------------*/
	default:
		return 3500;
 80046fe:	f640 53ac 	movw	r3, #3500	; 0xdac
		break;
	}
}
 8004702:	4618      	mov	r0, r3
 8004704:	370c      	adds	r7, #12
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr
 800470e:	bf00      	nop

08004710 <Constraint>:
static int Constraint (int Present_Value,int Min,int Max){
 8004710:	b480      	push	{r7}
 8004712:	b085      	sub	sp, #20
 8004714:	af00      	add	r7, sp, #0
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	607a      	str	r2, [r7, #4]
	if(Present_Value > Max){
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	429a      	cmp	r2, r3
 8004722:	dd03      	ble.n	800472c <Constraint+0x1c>
		return Present_Value = Max;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	60fb      	str	r3, [r7, #12]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	e008      	b.n	800473e <Constraint+0x2e>
	}
	else if (Present_Value < Min ){
 800472c:	68fa      	ldr	r2, [r7, #12]
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	429a      	cmp	r2, r3
 8004732:	da03      	bge.n	800473c <Constraint+0x2c>
		return Present_Value = Min;
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	60fb      	str	r3, [r7, #12]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	e000      	b.n	800473e <Constraint+0x2e>
	}
	else
		return Present_Value;
 800473c:	68fb      	ldr	r3, [r7, #12]
}
 800473e:	4618      	mov	r0, r3
 8004740:	3714      	adds	r7, #20
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr
	...

0800474c <Sensor_Convert_A2D>:
static void Sensor_Convert_A2D()
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
	LineDetect = 0;
 8004752:	4b16      	ldr	r3, [pc, #88]	; (80047ac <Sensor_Convert_A2D+0x60>)
 8004754:	2200      	movs	r2, #0
 8004756:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 6; ++i)
 8004758:	2300      	movs	r3, #0
 800475a:	607b      	str	r3, [r7, #4]
 800475c:	e01b      	b.n	8004796 <Sensor_Convert_A2D+0x4a>
	{
		if (Sensor_ADC_Value[i] < Sensor_Threshold[i])
 800475e:	4a14      	ldr	r2, [pc, #80]	; (80047b0 <Sensor_Convert_A2D+0x64>)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8004766:	4913      	ldr	r1, [pc, #76]	; (80047b4 <Sensor_Convert_A2D+0x68>)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800476e:	429a      	cmp	r2, r3
 8004770:	d20e      	bcs.n	8004790 <Sensor_Convert_A2D+0x44>
		{
			sbi(LineDetect, (7 - i));
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f1c3 0307 	rsb	r3, r3, #7
 8004778:	2201      	movs	r2, #1
 800477a:	fa02 f303 	lsl.w	r3, r2, r3
 800477e:	b25a      	sxtb	r2, r3
 8004780:	4b0a      	ldr	r3, [pc, #40]	; (80047ac <Sensor_Convert_A2D+0x60>)
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	b25b      	sxtb	r3, r3
 8004786:	4313      	orrs	r3, r2
 8004788:	b25b      	sxtb	r3, r3
 800478a:	b2da      	uxtb	r2, r3
 800478c:	4b07      	ldr	r3, [pc, #28]	; (80047ac <Sensor_Convert_A2D+0x60>)
 800478e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 6; ++i)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	3301      	adds	r3, #1
 8004794:	607b      	str	r3, [r7, #4]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2b05      	cmp	r3, #5
 800479a:	dde0      	ble.n	800475e <Sensor_Convert_A2D+0x12>
//			printf("0 ");
		}
	}
//	printf("\n");
//	HAL_Delay(100);
}
 800479c:	bf00      	nop
 800479e:	bf00      	nop
 80047a0:	370c      	adds	r7, #12
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	20000264 	.word	0x20000264
 80047b0:	200004a8 	.word	0x200004a8
 80047b4:	20000010 	.word	0x20000010

080047b8 <ScrollUp>:
		char buffer[6];
		itoa (LineDetect,buffer,2);
		printf ("binary: %s\n",buffer);
}
void ScrollUp(void)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(ButtonA_GPIO_Port, ButtonA_Pin) == 0)
 80047bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80047c0:	4883      	ldr	r0, [pc, #524]	; (80049d0 <ScrollUp+0x218>)
 80047c2:	f002 fef9 	bl	80075b8 <HAL_GPIO_ReadPin>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	f040 80f6 	bne.w	80049ba <ScrollUp+0x202>
	{
		while (HAL_GPIO_ReadPin(ButtonA_GPIO_Port, ButtonA_Pin) == 0)
 80047ce:	e002      	b.n	80047d6 <ScrollUp+0x1e>
		{
			HAL_Delay(50);
 80047d0:	2032      	movs	r0, #50	; 0x32
 80047d2:	f001 faef 	bl	8005db4 <HAL_Delay>
		while (HAL_GPIO_ReadPin(ButtonA_GPIO_Port, ButtonA_Pin) == 0)
 80047d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80047da:	487d      	ldr	r0, [pc, #500]	; (80049d0 <ScrollUp+0x218>)
 80047dc:	f002 feec 	bl	80075b8 <HAL_GPIO_ReadPin>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d0f4      	beq.n	80047d0 <ScrollUp+0x18>
		}
		switch (Menu_type)
 80047e6:	4b7b      	ldr	r3, [pc, #492]	; (80049d4 <ScrollUp+0x21c>)
 80047e8:	781b      	ldrb	r3, [r3, #0]
 80047ea:	3b01      	subs	r3, #1
 80047ec:	2b07      	cmp	r3, #7
 80047ee:	f200 80ed 	bhi.w	80049cc <ScrollUp+0x214>
 80047f2:	a201      	add	r2, pc, #4	; (adr r2, 80047f8 <ScrollUp+0x40>)
 80047f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047f8:	08004819 	.word	0x08004819
 80047fc:	080049cd 	.word	0x080049cd
 8004800:	08004837 	.word	0x08004837
 8004804:	080048bb 	.word	0x080048bb
 8004808:	080049cd 	.word	0x080049cd
 800480c:	080049cd 	.word	0x080049cd
 8004810:	080049cd 	.word	0x080049cd
 8004814:	0800493f 	.word	0x0800493f
		{
		case Main_menu:
			line--;
 8004818:	4b6f      	ldr	r3, [pc, #444]	; (80049d8 <ScrollUp+0x220>)
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	3b01      	subs	r3, #1
 800481e:	b2da      	uxtb	r2, r3
 8004820:	4b6d      	ldr	r3, [pc, #436]	; (80049d8 <ScrollUp+0x220>)
 8004822:	701a      	strb	r2, [r3, #0]
			if (line < Number_of_Menu_firstline)
 8004824:	4b6c      	ldr	r3, [pc, #432]	; (80049d8 <ScrollUp+0x220>)
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	2b00      	cmp	r3, #0
 800482a:	f040 80c8 	bne.w	80049be <ScrollUp+0x206>
			{
				line = Maximum_Menu_line;
 800482e:	4b6a      	ldr	r3, [pc, #424]	; (80049d8 <ScrollUp+0x220>)
 8004830:	2208      	movs	r2, #8
 8004832:	701a      	strb	r2, [r3, #0]
			}
			break;
 8004834:	e0c3      	b.n	80049be <ScrollUp+0x206>
		case PID_Menu:
			line--;
 8004836:	4b68      	ldr	r3, [pc, #416]	; (80049d8 <ScrollUp+0x220>)
 8004838:	781b      	ldrb	r3, [r3, #0]
 800483a:	3b01      	subs	r3, #1
 800483c:	b2da      	uxtb	r2, r3
 800483e:	4b66      	ldr	r3, [pc, #408]	; (80049d8 <ScrollUp+0x220>)
 8004840:	701a      	strb	r2, [r3, #0]
			if (line < Number_of_Menu_firstline)
 8004842:	4b65      	ldr	r3, [pc, #404]	; (80049d8 <ScrollUp+0x220>)
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d102      	bne.n	8004850 <ScrollUp+0x98>
			{
				line = Maximum_PID_line;
 800484a:	4b63      	ldr	r3, [pc, #396]	; (80049d8 <ScrollUp+0x220>)
 800484c:	2204      	movs	r2, #4
 800484e:	701a      	strb	r2, [r3, #0]
			}
			if (Kp_modify_flag == 1)
 8004850:	4b62      	ldr	r3, [pc, #392]	; (80049dc <ScrollUp+0x224>)
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	2b01      	cmp	r3, #1
 8004856:	d10c      	bne.n	8004872 <ScrollUp+0xba>
			{
				Kp += Kp_amount;
 8004858:	4b61      	ldr	r3, [pc, #388]	; (80049e0 <ScrollUp+0x228>)
 800485a:	edd3 7a00 	vldr	s15, [r3]
 800485e:	ed9f 7a61 	vldr	s14, [pc, #388]	; 80049e4 <ScrollUp+0x22c>
 8004862:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004866:	4b5e      	ldr	r3, [pc, #376]	; (80049e0 <ScrollUp+0x228>)
 8004868:	edc3 7a00 	vstr	s15, [r3]
				line = 1;
 800486c:	4b5a      	ldr	r3, [pc, #360]	; (80049d8 <ScrollUp+0x220>)
 800486e:	2201      	movs	r2, #1
 8004870:	701a      	strb	r2, [r3, #0]
			}
			if (Ki_modify_flag == 1)
 8004872:	4b5d      	ldr	r3, [pc, #372]	; (80049e8 <ScrollUp+0x230>)
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	2b01      	cmp	r3, #1
 8004878:	d10c      	bne.n	8004894 <ScrollUp+0xdc>
			{
				Ki += Ki_amount;
 800487a:	4b5c      	ldr	r3, [pc, #368]	; (80049ec <ScrollUp+0x234>)
 800487c:	edd3 7a00 	vldr	s15, [r3]
 8004880:	ed9f 7a58 	vldr	s14, [pc, #352]	; 80049e4 <ScrollUp+0x22c>
 8004884:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004888:	4b58      	ldr	r3, [pc, #352]	; (80049ec <ScrollUp+0x234>)
 800488a:	edc3 7a00 	vstr	s15, [r3]
				line = 2;
 800488e:	4b52      	ldr	r3, [pc, #328]	; (80049d8 <ScrollUp+0x220>)
 8004890:	2202      	movs	r2, #2
 8004892:	701a      	strb	r2, [r3, #0]
			}
			if (Kd_modify_flag == 1)
 8004894:	4b56      	ldr	r3, [pc, #344]	; (80049f0 <ScrollUp+0x238>)
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	2b01      	cmp	r3, #1
 800489a:	f040 8092 	bne.w	80049c2 <ScrollUp+0x20a>
			{
				Kd += Kd_amount;
 800489e:	4b55      	ldr	r3, [pc, #340]	; (80049f4 <ScrollUp+0x23c>)
 80048a0:	edd3 7a00 	vldr	s15, [r3]
 80048a4:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 80049e4 <ScrollUp+0x22c>
 80048a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80048ac:	4b51      	ldr	r3, [pc, #324]	; (80049f4 <ScrollUp+0x23c>)
 80048ae:	edc3 7a00 	vstr	s15, [r3]
				line = 3;
 80048b2:	4b49      	ldr	r3, [pc, #292]	; (80049d8 <ScrollUp+0x220>)
 80048b4:	2203      	movs	r2, #3
 80048b6:	701a      	strb	r2, [r3, #0]
			}
			break;
 80048b8:	e083      	b.n	80049c2 <ScrollUp+0x20a>
		case Engine_menu:
			line--;
 80048ba:	4b47      	ldr	r3, [pc, #284]	; (80049d8 <ScrollUp+0x220>)
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	3b01      	subs	r3, #1
 80048c0:	b2da      	uxtb	r2, r3
 80048c2:	4b45      	ldr	r3, [pc, #276]	; (80049d8 <ScrollUp+0x220>)
 80048c4:	701a      	strb	r2, [r3, #0]
			if (line < Number_of_Menu_firstline)
 80048c6:	4b44      	ldr	r3, [pc, #272]	; (80049d8 <ScrollUp+0x220>)
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d102      	bne.n	80048d4 <ScrollUp+0x11c>
			{
				line = Maximum_Engine_line;
 80048ce:	4b42      	ldr	r3, [pc, #264]	; (80049d8 <ScrollUp+0x220>)
 80048d0:	2203      	movs	r2, #3
 80048d2:	701a      	strb	r2, [r3, #0]
			}
			if (Left_modify_flag == 1)
 80048d4:	4b48      	ldr	r3, [pc, #288]	; (80049f8 <ScrollUp+0x240>)
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d115      	bne.n	8004908 <ScrollUp+0x150>
			{
				Left += 100;
 80048dc:	4b47      	ldr	r3, [pc, #284]	; (80049fc <ScrollUp+0x244>)
 80048de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	3364      	adds	r3, #100	; 0x64
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	b21a      	sxth	r2, r3
 80048ea:	4b44      	ldr	r3, [pc, #272]	; (80049fc <ScrollUp+0x244>)
 80048ec:	801a      	strh	r2, [r3, #0]
				line = 1;
 80048ee:	4b3a      	ldr	r3, [pc, #232]	; (80049d8 <ScrollUp+0x220>)
 80048f0:	2201      	movs	r2, #1
 80048f2:	701a      	strb	r2, [r3, #0]
				if (Left >= 7200)
 80048f4:	4b41      	ldr	r3, [pc, #260]	; (80049fc <ScrollUp+0x244>)
 80048f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80048fa:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 80048fe:	db03      	blt.n	8004908 <ScrollUp+0x150>
				{
					Left = 7200;
 8004900:	4b3e      	ldr	r3, [pc, #248]	; (80049fc <ScrollUp+0x244>)
 8004902:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8004906:	801a      	strh	r2, [r3, #0]
				}
			}
			if (Right_modify_flag == 1)
 8004908:	4b3d      	ldr	r3, [pc, #244]	; (8004a00 <ScrollUp+0x248>)
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	2b01      	cmp	r3, #1
 800490e:	d15a      	bne.n	80049c6 <ScrollUp+0x20e>
			{
				Right += 100;
 8004910:	4b3c      	ldr	r3, [pc, #240]	; (8004a04 <ScrollUp+0x24c>)
 8004912:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004916:	b29b      	uxth	r3, r3
 8004918:	3364      	adds	r3, #100	; 0x64
 800491a:	b29b      	uxth	r3, r3
 800491c:	b21a      	sxth	r2, r3
 800491e:	4b39      	ldr	r3, [pc, #228]	; (8004a04 <ScrollUp+0x24c>)
 8004920:	801a      	strh	r2, [r3, #0]
				line = 2;
 8004922:	4b2d      	ldr	r3, [pc, #180]	; (80049d8 <ScrollUp+0x220>)
 8004924:	2202      	movs	r2, #2
 8004926:	701a      	strb	r2, [r3, #0]
				if (Right >= 7200)
 8004928:	4b36      	ldr	r3, [pc, #216]	; (8004a04 <ScrollUp+0x24c>)
 800492a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800492e:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 8004932:	db48      	blt.n	80049c6 <ScrollUp+0x20e>
				{
					Right = 7200;
 8004934:	4b33      	ldr	r3, [pc, #204]	; (8004a04 <ScrollUp+0x24c>)
 8004936:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 800493a:	801a      	strh	r2, [r3, #0]
				}
			}
			break;
 800493c:	e043      	b.n	80049c6 <ScrollUp+0x20e>
		case Path_solver:
			line--;
 800493e:	4b26      	ldr	r3, [pc, #152]	; (80049d8 <ScrollUp+0x220>)
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	3b01      	subs	r3, #1
 8004944:	b2da      	uxtb	r2, r3
 8004946:	4b24      	ldr	r3, [pc, #144]	; (80049d8 <ScrollUp+0x220>)
 8004948:	701a      	strb	r2, [r3, #0]
			if (line < Number_of_Menu_firstline)
 800494a:	4b23      	ldr	r3, [pc, #140]	; (80049d8 <ScrollUp+0x220>)
 800494c:	781b      	ldrb	r3, [r3, #0]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d102      	bne.n	8004958 <ScrollUp+0x1a0>
			{
				line = Maximum_Path_Solver_line;
 8004952:	4b21      	ldr	r3, [pc, #132]	; (80049d8 <ScrollUp+0x220>)
 8004954:	2204      	movs	r2, #4
 8004956:	701a      	strb	r2, [r3, #0]
			}
			if (First_point_modify_flag == 1)
 8004958:	4b2b      	ldr	r3, [pc, #172]	; (8004a08 <ScrollUp+0x250>)
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	2b01      	cmp	r3, #1
 800495e:	d113      	bne.n	8004988 <ScrollUp+0x1d0>
			{
				First_point += 1;
 8004960:	4b2a      	ldr	r3, [pc, #168]	; (8004a0c <ScrollUp+0x254>)
 8004962:	f993 3000 	ldrsb.w	r3, [r3]
 8004966:	b2db      	uxtb	r3, r3
 8004968:	3301      	adds	r3, #1
 800496a:	b2db      	uxtb	r3, r3
 800496c:	b25a      	sxtb	r2, r3
 800496e:	4b27      	ldr	r3, [pc, #156]	; (8004a0c <ScrollUp+0x254>)
 8004970:	701a      	strb	r2, [r3, #0]
				line = 1;
 8004972:	4b19      	ldr	r3, [pc, #100]	; (80049d8 <ScrollUp+0x220>)
 8004974:	2201      	movs	r2, #1
 8004976:	701a      	strb	r2, [r3, #0]
				if(First_point>11)
 8004978:	4b24      	ldr	r3, [pc, #144]	; (8004a0c <ScrollUp+0x254>)
 800497a:	f993 3000 	ldrsb.w	r3, [r3]
 800497e:	2b0b      	cmp	r3, #11
 8004980:	dd02      	ble.n	8004988 <ScrollUp+0x1d0>
				{
					First_point = 0;
 8004982:	4b22      	ldr	r3, [pc, #136]	; (8004a0c <ScrollUp+0x254>)
 8004984:	2200      	movs	r2, #0
 8004986:	701a      	strb	r2, [r3, #0]
				}
			}
			if (Last_point_modify_flag == 1)
 8004988:	4b21      	ldr	r3, [pc, #132]	; (8004a10 <ScrollUp+0x258>)
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	2b01      	cmp	r3, #1
 800498e:	d11c      	bne.n	80049ca <ScrollUp+0x212>
			{
				Last_point += 1;
 8004990:	4b20      	ldr	r3, [pc, #128]	; (8004a14 <ScrollUp+0x25c>)
 8004992:	f993 3000 	ldrsb.w	r3, [r3]
 8004996:	b2db      	uxtb	r3, r3
 8004998:	3301      	adds	r3, #1
 800499a:	b2db      	uxtb	r3, r3
 800499c:	b25a      	sxtb	r2, r3
 800499e:	4b1d      	ldr	r3, [pc, #116]	; (8004a14 <ScrollUp+0x25c>)
 80049a0:	701a      	strb	r2, [r3, #0]
				line = 2;
 80049a2:	4b0d      	ldr	r3, [pc, #52]	; (80049d8 <ScrollUp+0x220>)
 80049a4:	2202      	movs	r2, #2
 80049a6:	701a      	strb	r2, [r3, #0]
				if(Last_point>11)
 80049a8:	4b1a      	ldr	r3, [pc, #104]	; (8004a14 <ScrollUp+0x25c>)
 80049aa:	f993 3000 	ldrsb.w	r3, [r3]
 80049ae:	2b0b      	cmp	r3, #11
 80049b0:	dd0b      	ble.n	80049ca <ScrollUp+0x212>
				{
					Last_point = 0;
 80049b2:	4b18      	ldr	r3, [pc, #96]	; (8004a14 <ScrollUp+0x25c>)
 80049b4:	2200      	movs	r2, #0
 80049b6:	701a      	strb	r2, [r3, #0]
				}
			}
			break;
 80049b8:	e007      	b.n	80049ca <ScrollUp+0x212>
		}
	}
 80049ba:	bf00      	nop
 80049bc:	e006      	b.n	80049cc <ScrollUp+0x214>
			break;
 80049be:	bf00      	nop
 80049c0:	e004      	b.n	80049cc <ScrollUp+0x214>
			break;
 80049c2:	bf00      	nop
 80049c4:	e002      	b.n	80049cc <ScrollUp+0x214>
			break;
 80049c6:	bf00      	nop
 80049c8:	e000      	b.n	80049cc <ScrollUp+0x214>
			break;
 80049ca:	bf00      	nop
}
 80049cc:	bf00      	nop
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	40020800 	.word	0x40020800
 80049d4:	20000001 	.word	0x20000001
 80049d8:	20000003 	.word	0x20000003
 80049dc:	20000265 	.word	0x20000265
 80049e0:	2000001c 	.word	0x2000001c
 80049e4:	3c23d70a 	.word	0x3c23d70a
 80049e8:	20000266 	.word	0x20000266
 80049ec:	20000280 	.word	0x20000280
 80049f0:	20000267 	.word	0x20000267
 80049f4:	20000020 	.word	0x20000020
 80049f8:	20000268 	.word	0x20000268
 80049fc:	2000000c 	.word	0x2000000c
 8004a00:	20000269 	.word	0x20000269
 8004a04:	2000000e 	.word	0x2000000e
 8004a08:	2000026a 	.word	0x2000026a
 8004a0c:	2000026d 	.word	0x2000026d
 8004a10:	2000026b 	.word	0x2000026b
 8004a14:	2000026e 	.word	0x2000026e

08004a18 <SelectItem>:
void SelectItem(void)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(ButtonB_GPIO_Port, ButtonB_Pin) == 0) //Select button
 8004a1c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004a20:	481c      	ldr	r0, [pc, #112]	; (8004a94 <SelectItem+0x7c>)
 8004a22:	f002 fdc9 	bl	80075b8 <HAL_GPIO_ReadPin>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d131      	bne.n	8004a90 <SelectItem+0x78>
	{
		while (HAL_GPIO_ReadPin(ButtonB_GPIO_Port, ButtonB_Pin) == 0)
 8004a2c:	e002      	b.n	8004a34 <SelectItem+0x1c>
		{
			HAL_Delay(50);
 8004a2e:	2032      	movs	r0, #50	; 0x32
 8004a30:	f001 f9c0 	bl	8005db4 <HAL_Delay>
		while (HAL_GPIO_ReadPin(ButtonB_GPIO_Port, ButtonB_Pin) == 0)
 8004a34:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004a38:	4816      	ldr	r0, [pc, #88]	; (8004a94 <SelectItem+0x7c>)
 8004a3a:	f002 fdbd 	bl	80075b8 <HAL_GPIO_ReadPin>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d0f4      	beq.n	8004a2e <SelectItem+0x16>
		}
		executeAction(line);
 8004a44:	4b14      	ldr	r3, [pc, #80]	; (8004a98 <SelectItem+0x80>)
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f7fd f8f1 	bl	8001c30 <executeAction>
		if (Kp_modify_flag == 1 || Ki_modify_flag == 1 || Kd_modify_flag == 1
 8004a4e:	4b13      	ldr	r3, [pc, #76]	; (8004a9c <SelectItem+0x84>)
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d017      	beq.n	8004a86 <SelectItem+0x6e>
 8004a56:	4b12      	ldr	r3, [pc, #72]	; (8004aa0 <SelectItem+0x88>)
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d013      	beq.n	8004a86 <SelectItem+0x6e>
 8004a5e:	4b11      	ldr	r3, [pc, #68]	; (8004aa4 <SelectItem+0x8c>)
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d00f      	beq.n	8004a86 <SelectItem+0x6e>
				|| Right_modify_flag == 1 || Left_modify_flag == 1 || First_point_modify_flag == 1 || Last_point_modify_flag == 1)
 8004a66:	4b10      	ldr	r3, [pc, #64]	; (8004aa8 <SelectItem+0x90>)
 8004a68:	781b      	ldrb	r3, [r3, #0]
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d00b      	beq.n	8004a86 <SelectItem+0x6e>
 8004a6e:	4b0f      	ldr	r3, [pc, #60]	; (8004aac <SelectItem+0x94>)
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d007      	beq.n	8004a86 <SelectItem+0x6e>
 8004a76:	4b0e      	ldr	r3, [pc, #56]	; (8004ab0 <SelectItem+0x98>)
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d003      	beq.n	8004a86 <SelectItem+0x6e>
 8004a7e:	4b0d      	ldr	r3, [pc, #52]	; (8004ab4 <SelectItem+0x9c>)
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d101      	bne.n	8004a8a <SelectItem+0x72>
		{
			__NOP();
 8004a86:	bf00      	nop
		else
		{
			line = 1;
		}
	}
}
 8004a88:	e002      	b.n	8004a90 <SelectItem+0x78>
			line = 1;
 8004a8a:	4b03      	ldr	r3, [pc, #12]	; (8004a98 <SelectItem+0x80>)
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	701a      	strb	r2, [r3, #0]
}
 8004a90:	bf00      	nop
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	40020800 	.word	0x40020800
 8004a98:	20000003 	.word	0x20000003
 8004a9c:	20000265 	.word	0x20000265
 8004aa0:	20000266 	.word	0x20000266
 8004aa4:	20000267 	.word	0x20000267
 8004aa8:	20000269 	.word	0x20000269
 8004aac:	20000268 	.word	0x20000268
 8004ab0:	2000026a 	.word	0x2000026a
 8004ab4:	2000026b 	.word	0x2000026b

08004ab8 <MultifunctionButton>:
void MultifunctionButton(void)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	af00      	add	r7, sp, #0
	switch (Menu_type)
 8004abc:	4ba3      	ldr	r3, [pc, #652]	; (8004d4c <MultifunctionButton+0x294>)
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	2b09      	cmp	r3, #9
 8004ac2:	f200 813d 	bhi.w	8004d40 <MultifunctionButton+0x288>
 8004ac6:	a201      	add	r2, pc, #4	; (adr r2, 8004acc <MultifunctionButton+0x14>)
 8004ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004acc:	08004af5 	.word	0x08004af5
 8004ad0:	08004b09 	.word	0x08004b09
 8004ad4:	08004ca1 	.word	0x08004ca1
 8004ad8:	08004b27 	.word	0x08004b27
 8004adc:	08004bf5 	.word	0x08004bf5
 8004ae0:	08004c79 	.word	0x08004c79
 8004ae4:	08004d41 	.word	0x08004d41
 8004ae8:	08004c8d 	.word	0x08004c8d
 8004aec:	08004ca9 	.word	0x08004ca9
 8004af0:	08004d25 	.word	0x08004d25
	{
	case Running_menu:
		Menu_type = Main_menu;
 8004af4:	4b95      	ldr	r3, [pc, #596]	; (8004d4c <MultifunctionButton+0x294>)
 8004af6:	2201      	movs	r2, #1
 8004af8:	701a      	strb	r2, [r3, #0]
		line = 1;
 8004afa:	4b95      	ldr	r3, [pc, #596]	; (8004d50 <MultifunctionButton+0x298>)
 8004afc:	2201      	movs	r2, #1
 8004afe:	701a      	strb	r2, [r3, #0]
		cancel_running = 0;
 8004b00:	4b94      	ldr	r3, [pc, #592]	; (8004d54 <MultifunctionButton+0x29c>)
 8004b02:	2200      	movs	r2, #0
 8004b04:	701a      	strb	r2, [r3, #0]
		break;
 8004b06:	e11b      	b.n	8004d40 <MultifunctionButton+0x288>
	case Main_menu:
		line++;
 8004b08:	4b91      	ldr	r3, [pc, #580]	; (8004d50 <MultifunctionButton+0x298>)
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	b2da      	uxtb	r2, r3
 8004b10:	4b8f      	ldr	r3, [pc, #572]	; (8004d50 <MultifunctionButton+0x298>)
 8004b12:	701a      	strb	r2, [r3, #0]
		if (line > Maximum_Menu_line)
 8004b14:	4b8e      	ldr	r3, [pc, #568]	; (8004d50 <MultifunctionButton+0x298>)
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	2b08      	cmp	r3, #8
 8004b1a:	f240 810a 	bls.w	8004d32 <MultifunctionButton+0x27a>
		{
			line = Number_of_Menu_firstline;
 8004b1e:	4b8c      	ldr	r3, [pc, #560]	; (8004d50 <MultifunctionButton+0x298>)
 8004b20:	2201      	movs	r2, #1
 8004b22:	701a      	strb	r2, [r3, #0]
		}
		break;
 8004b24:	e105      	b.n	8004d32 <MultifunctionButton+0x27a>
	case PID_Menu:
		line++;
 8004b26:	4b8a      	ldr	r3, [pc, #552]	; (8004d50 <MultifunctionButton+0x298>)
 8004b28:	781b      	ldrb	r3, [r3, #0]
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	b2da      	uxtb	r2, r3
 8004b2e:	4b88      	ldr	r3, [pc, #544]	; (8004d50 <MultifunctionButton+0x298>)
 8004b30:	701a      	strb	r2, [r3, #0]
		if (line > Maximum_PID_line)
 8004b32:	4b87      	ldr	r3, [pc, #540]	; (8004d50 <MultifunctionButton+0x298>)
 8004b34:	781b      	ldrb	r3, [r3, #0]
 8004b36:	2b04      	cmp	r3, #4
 8004b38:	d902      	bls.n	8004b40 <MultifunctionButton+0x88>
		{
			line = Number_of_Menu_firstline;
 8004b3a:	4b85      	ldr	r3, [pc, #532]	; (8004d50 <MultifunctionButton+0x298>)
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	701a      	strb	r2, [r3, #0]
		}
		if (Kp_modify_flag == 1)
 8004b40:	4b85      	ldr	r3, [pc, #532]	; (8004d58 <MultifunctionButton+0x2a0>)
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d118      	bne.n	8004b7a <MultifunctionButton+0xc2>
		{
			Kp -= Kp_amount;
 8004b48:	4b84      	ldr	r3, [pc, #528]	; (8004d5c <MultifunctionButton+0x2a4>)
 8004b4a:	edd3 7a00 	vldr	s15, [r3]
 8004b4e:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8004d60 <MultifunctionButton+0x2a8>
 8004b52:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004b56:	4b81      	ldr	r3, [pc, #516]	; (8004d5c <MultifunctionButton+0x2a4>)
 8004b58:	edc3 7a00 	vstr	s15, [r3]
			line = 1;
 8004b5c:	4b7c      	ldr	r3, [pc, #496]	; (8004d50 <MultifunctionButton+0x298>)
 8004b5e:	2201      	movs	r2, #1
 8004b60:	701a      	strb	r2, [r3, #0]
			if (Kp <= 0)
 8004b62:	4b7e      	ldr	r3, [pc, #504]	; (8004d5c <MultifunctionButton+0x2a4>)
 8004b64:	edd3 7a00 	vldr	s15, [r3]
 8004b68:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b70:	d803      	bhi.n	8004b7a <MultifunctionButton+0xc2>
				{Kp = 0;}
 8004b72:	4b7a      	ldr	r3, [pc, #488]	; (8004d5c <MultifunctionButton+0x2a4>)
 8004b74:	f04f 0200 	mov.w	r2, #0
 8004b78:	601a      	str	r2, [r3, #0]
		}
		if (Ki_modify_flag == 1)
 8004b7a:	4b7a      	ldr	r3, [pc, #488]	; (8004d64 <MultifunctionButton+0x2ac>)
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d118      	bne.n	8004bb4 <MultifunctionButton+0xfc>
		{
			Ki -= Ki_amount;
 8004b82:	4b79      	ldr	r3, [pc, #484]	; (8004d68 <MultifunctionButton+0x2b0>)
 8004b84:	edd3 7a00 	vldr	s15, [r3]
 8004b88:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8004d60 <MultifunctionButton+0x2a8>
 8004b8c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004b90:	4b75      	ldr	r3, [pc, #468]	; (8004d68 <MultifunctionButton+0x2b0>)
 8004b92:	edc3 7a00 	vstr	s15, [r3]
			line = 2;
 8004b96:	4b6e      	ldr	r3, [pc, #440]	; (8004d50 <MultifunctionButton+0x298>)
 8004b98:	2202      	movs	r2, #2
 8004b9a:	701a      	strb	r2, [r3, #0]
			if (Ki <= 0)
 8004b9c:	4b72      	ldr	r3, [pc, #456]	; (8004d68 <MultifunctionButton+0x2b0>)
 8004b9e:	edd3 7a00 	vldr	s15, [r3]
 8004ba2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004baa:	d803      	bhi.n	8004bb4 <MultifunctionButton+0xfc>
				{Ki = 0;}
 8004bac:	4b6e      	ldr	r3, [pc, #440]	; (8004d68 <MultifunctionButton+0x2b0>)
 8004bae:	f04f 0200 	mov.w	r2, #0
 8004bb2:	601a      	str	r2, [r3, #0]
		}
		if (Kd_modify_flag == 1)
 8004bb4:	4b6d      	ldr	r3, [pc, #436]	; (8004d6c <MultifunctionButton+0x2b4>)
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	f040 80bc 	bne.w	8004d36 <MultifunctionButton+0x27e>
		{
			Kd -= Kd_amount;
 8004bbe:	4b6c      	ldr	r3, [pc, #432]	; (8004d70 <MultifunctionButton+0x2b8>)
 8004bc0:	edd3 7a00 	vldr	s15, [r3]
 8004bc4:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8004d60 <MultifunctionButton+0x2a8>
 8004bc8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004bcc:	4b68      	ldr	r3, [pc, #416]	; (8004d70 <MultifunctionButton+0x2b8>)
 8004bce:	edc3 7a00 	vstr	s15, [r3]
			line = 3;
 8004bd2:	4b5f      	ldr	r3, [pc, #380]	; (8004d50 <MultifunctionButton+0x298>)
 8004bd4:	2203      	movs	r2, #3
 8004bd6:	701a      	strb	r2, [r3, #0]
			if (Kd <= 0)
 8004bd8:	4b65      	ldr	r3, [pc, #404]	; (8004d70 <MultifunctionButton+0x2b8>)
 8004bda:	edd3 7a00 	vldr	s15, [r3]
 8004bde:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004be6:	d900      	bls.n	8004bea <MultifunctionButton+0x132>
				{Kd = 0;}
		}
		break;
 8004be8:	e0a5      	b.n	8004d36 <MultifunctionButton+0x27e>
				{Kd = 0;}
 8004bea:	4b61      	ldr	r3, [pc, #388]	; (8004d70 <MultifunctionButton+0x2b8>)
 8004bec:	f04f 0200 	mov.w	r2, #0
 8004bf0:	601a      	str	r2, [r3, #0]
		break;
 8004bf2:	e0a0      	b.n	8004d36 <MultifunctionButton+0x27e>
	case Engine_menu:
		line++;
 8004bf4:	4b56      	ldr	r3, [pc, #344]	; (8004d50 <MultifunctionButton+0x298>)
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	b2da      	uxtb	r2, r3
 8004bfc:	4b54      	ldr	r3, [pc, #336]	; (8004d50 <MultifunctionButton+0x298>)
 8004bfe:	701a      	strb	r2, [r3, #0]
		if (line > Maximum_Engine_line)
 8004c00:	4b53      	ldr	r3, [pc, #332]	; (8004d50 <MultifunctionButton+0x298>)
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	2b03      	cmp	r3, #3
 8004c06:	d902      	bls.n	8004c0e <MultifunctionButton+0x156>
		{
			line = Number_of_Menu_firstline;
 8004c08:	4b51      	ldr	r3, [pc, #324]	; (8004d50 <MultifunctionButton+0x298>)
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	701a      	strb	r2, [r3, #0]
		}
		if (Left_modify_flag == 1)
 8004c0e:	4b59      	ldr	r3, [pc, #356]	; (8004d74 <MultifunctionButton+0x2bc>)
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d115      	bne.n	8004c42 <MultifunctionButton+0x18a>
		{
			Left -= 100;
 8004c16:	4b58      	ldr	r3, [pc, #352]	; (8004d78 <MultifunctionButton+0x2c0>)
 8004c18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	3b64      	subs	r3, #100	; 0x64
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	b21a      	sxth	r2, r3
 8004c24:	4b54      	ldr	r3, [pc, #336]	; (8004d78 <MultifunctionButton+0x2c0>)
 8004c26:	801a      	strh	r2, [r3, #0]
			line = 1;
 8004c28:	4b49      	ldr	r3, [pc, #292]	; (8004d50 <MultifunctionButton+0x298>)
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	701a      	strb	r2, [r3, #0]
			if (Left <= -7200)
 8004c2e:	4b52      	ldr	r3, [pc, #328]	; (8004d78 <MultifunctionButton+0x2c0>)
 8004c30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c34:	f513 5fe1 	cmn.w	r3, #7200	; 0x1c20
 8004c38:	dc03      	bgt.n	8004c42 <MultifunctionButton+0x18a>
				{Left = -7200;}
 8004c3a:	4b4f      	ldr	r3, [pc, #316]	; (8004d78 <MultifunctionButton+0x2c0>)
 8004c3c:	f24e 32e0 	movw	r2, #58336	; 0xe3e0
 8004c40:	801a      	strh	r2, [r3, #0]
		}
		if (Right_modify_flag == 1)
 8004c42:	4b4e      	ldr	r3, [pc, #312]	; (8004d7c <MultifunctionButton+0x2c4>)
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d177      	bne.n	8004d3a <MultifunctionButton+0x282>
		{
			Right -= 100;
 8004c4a:	4b4d      	ldr	r3, [pc, #308]	; (8004d80 <MultifunctionButton+0x2c8>)
 8004c4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	3b64      	subs	r3, #100	; 0x64
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	b21a      	sxth	r2, r3
 8004c58:	4b49      	ldr	r3, [pc, #292]	; (8004d80 <MultifunctionButton+0x2c8>)
 8004c5a:	801a      	strh	r2, [r3, #0]
			line = 2;
 8004c5c:	4b3c      	ldr	r3, [pc, #240]	; (8004d50 <MultifunctionButton+0x298>)
 8004c5e:	2202      	movs	r2, #2
 8004c60:	701a      	strb	r2, [r3, #0]
			if (Right <= -7200)
 8004c62:	4b47      	ldr	r3, [pc, #284]	; (8004d80 <MultifunctionButton+0x2c8>)
 8004c64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c68:	f513 5fe1 	cmn.w	r3, #7200	; 0x1c20
 8004c6c:	dc65      	bgt.n	8004d3a <MultifunctionButton+0x282>
				{Right = -7200;}
 8004c6e:	4b44      	ldr	r3, [pc, #272]	; (8004d80 <MultifunctionButton+0x2c8>)
 8004c70:	f24e 32e0 	movw	r2, #58336	; 0xe3e0
 8004c74:	801a      	strh	r2, [r3, #0]
		}
		break;
 8004c76:	e060      	b.n	8004d3a <MultifunctionButton+0x282>
	case LineDetect_Show:
		Menu_type = Main_menu;
 8004c78:	4b34      	ldr	r3, [pc, #208]	; (8004d4c <MultifunctionButton+0x294>)
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	701a      	strb	r2, [r3, #0]
		line = 1;
 8004c7e:	4b34      	ldr	r3, [pc, #208]	; (8004d50 <MultifunctionButton+0x298>)
 8004c80:	2201      	movs	r2, #1
 8004c82:	701a      	strb	r2, [r3, #0]
		cancel_menu = 0;
 8004c84:	4b3f      	ldr	r3, [pc, #252]	; (8004d84 <MultifunctionButton+0x2cc>)
 8004c86:	2200      	movs	r2, #0
 8004c88:	701a      	strb	r2, [r3, #0]
		break;
 8004c8a:	e059      	b.n	8004d40 <MultifunctionButton+0x288>
	case Saving_process:
		cancel_reading_card = 0;
 8004c8c:	4b3e      	ldr	r3, [pc, #248]	; (8004d88 <MultifunctionButton+0x2d0>)
 8004c8e:	2200      	movs	r2, #0
 8004c90:	701a      	strb	r2, [r3, #0]
		Menu_type = Main_menu;
 8004c92:	4b2e      	ldr	r3, [pc, #184]	; (8004d4c <MultifunctionButton+0x294>)
 8004c94:	2201      	movs	r2, #1
 8004c96:	701a      	strb	r2, [r3, #0]
		line = 1;
 8004c98:	4b2d      	ldr	r3, [pc, #180]	; (8004d50 <MultifunctionButton+0x298>)
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	701a      	strb	r2, [r3, #0]
		break;
 8004c9e:	e04f      	b.n	8004d40 <MultifunctionButton+0x288>
	case Color_Processing:
		Color_Read = 0;
 8004ca0:	4b3a      	ldr	r3, [pc, #232]	; (8004d8c <MultifunctionButton+0x2d4>)
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	701a      	strb	r2, [r3, #0]
		break;
 8004ca6:	e04b      	b.n	8004d40 <MultifunctionButton+0x288>
	case Path_solver:
		line++;
 8004ca8:	4b29      	ldr	r3, [pc, #164]	; (8004d50 <MultifunctionButton+0x298>)
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	3301      	adds	r3, #1
 8004cae:	b2da      	uxtb	r2, r3
 8004cb0:	4b27      	ldr	r3, [pc, #156]	; (8004d50 <MultifunctionButton+0x298>)
 8004cb2:	701a      	strb	r2, [r3, #0]
		if (line > Maximum_Path_Solver_line)
 8004cb4:	4b26      	ldr	r3, [pc, #152]	; (8004d50 <MultifunctionButton+0x298>)
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	2b04      	cmp	r3, #4
 8004cba:	d902      	bls.n	8004cc2 <MultifunctionButton+0x20a>
		{
			line = Number_of_Menu_firstline;
 8004cbc:	4b24      	ldr	r3, [pc, #144]	; (8004d50 <MultifunctionButton+0x298>)
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	701a      	strb	r2, [r3, #0]
		}
		if (First_point_modify_flag == 1)
 8004cc2:	4b33      	ldr	r3, [pc, #204]	; (8004d90 <MultifunctionButton+0x2d8>)
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d113      	bne.n	8004cf2 <MultifunctionButton+0x23a>
		{
			First_point -= 1;
 8004cca:	4b32      	ldr	r3, [pc, #200]	; (8004d94 <MultifunctionButton+0x2dc>)
 8004ccc:	f993 3000 	ldrsb.w	r3, [r3]
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	3b01      	subs	r3, #1
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	b25a      	sxtb	r2, r3
 8004cd8:	4b2e      	ldr	r3, [pc, #184]	; (8004d94 <MultifunctionButton+0x2dc>)
 8004cda:	701a      	strb	r2, [r3, #0]
			line = 1;
 8004cdc:	4b1c      	ldr	r3, [pc, #112]	; (8004d50 <MultifunctionButton+0x298>)
 8004cde:	2201      	movs	r2, #1
 8004ce0:	701a      	strb	r2, [r3, #0]
			if(First_point < 0)
 8004ce2:	4b2c      	ldr	r3, [pc, #176]	; (8004d94 <MultifunctionButton+0x2dc>)
 8004ce4:	f993 3000 	ldrsb.w	r3, [r3]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	da02      	bge.n	8004cf2 <MultifunctionButton+0x23a>
			{
				First_point = 11;
 8004cec:	4b29      	ldr	r3, [pc, #164]	; (8004d94 <MultifunctionButton+0x2dc>)
 8004cee:	220b      	movs	r2, #11
 8004cf0:	701a      	strb	r2, [r3, #0]
			}
		}
		if (Last_point_modify_flag == 1)
 8004cf2:	4b29      	ldr	r3, [pc, #164]	; (8004d98 <MultifunctionButton+0x2e0>)
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d121      	bne.n	8004d3e <MultifunctionButton+0x286>
		{
			Last_point -= 1;
 8004cfa:	4b28      	ldr	r3, [pc, #160]	; (8004d9c <MultifunctionButton+0x2e4>)
 8004cfc:	f993 3000 	ldrsb.w	r3, [r3]
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	3b01      	subs	r3, #1
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	b25a      	sxtb	r2, r3
 8004d08:	4b24      	ldr	r3, [pc, #144]	; (8004d9c <MultifunctionButton+0x2e4>)
 8004d0a:	701a      	strb	r2, [r3, #0]
			line = 2;
 8004d0c:	4b10      	ldr	r3, [pc, #64]	; (8004d50 <MultifunctionButton+0x298>)
 8004d0e:	2202      	movs	r2, #2
 8004d10:	701a      	strb	r2, [r3, #0]
			if(Last_point < 0)
 8004d12:	4b22      	ldr	r3, [pc, #136]	; (8004d9c <MultifunctionButton+0x2e4>)
 8004d14:	f993 3000 	ldrsb.w	r3, [r3]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	da10      	bge.n	8004d3e <MultifunctionButton+0x286>
			{
				Last_point = 11;
 8004d1c:	4b1f      	ldr	r3, [pc, #124]	; (8004d9c <MultifunctionButton+0x2e4>)
 8004d1e:	220b      	movs	r2, #11
 8004d20:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
 8004d22:	e00c      	b.n	8004d3e <MultifunctionButton+0x286>
		case Path_show_menu:
			Menu_type = Path_solver;
 8004d24:	4b09      	ldr	r3, [pc, #36]	; (8004d4c <MultifunctionButton+0x294>)
 8004d26:	2208      	movs	r2, #8
 8004d28:	701a      	strb	r2, [r3, #0]
			line = 1;
 8004d2a:	4b09      	ldr	r3, [pc, #36]	; (8004d50 <MultifunctionButton+0x298>)
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	701a      	strb	r2, [r3, #0]
			break;
 8004d30:	e006      	b.n	8004d40 <MultifunctionButton+0x288>
		break;
 8004d32:	bf00      	nop
 8004d34:	e004      	b.n	8004d40 <MultifunctionButton+0x288>
		break;
 8004d36:	bf00      	nop
 8004d38:	e002      	b.n	8004d40 <MultifunctionButton+0x288>
		break;
 8004d3a:	bf00      	nop
 8004d3c:	e000      	b.n	8004d40 <MultifunctionButton+0x288>
		break;
 8004d3e:	bf00      	nop
	}

}
 8004d40:	bf00      	nop
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr
 8004d4a:	bf00      	nop
 8004d4c:	20000001 	.word	0x20000001
 8004d50:	20000003 	.word	0x20000003
 8004d54:	20000006 	.word	0x20000006
 8004d58:	20000265 	.word	0x20000265
 8004d5c:	2000001c 	.word	0x2000001c
 8004d60:	3c23d70a 	.word	0x3c23d70a
 8004d64:	20000266 	.word	0x20000266
 8004d68:	20000280 	.word	0x20000280
 8004d6c:	20000267 	.word	0x20000267
 8004d70:	20000020 	.word	0x20000020
 8004d74:	20000268 	.word	0x20000268
 8004d78:	2000000c 	.word	0x2000000c
 8004d7c:	20000269 	.word	0x20000269
 8004d80:	2000000e 	.word	0x2000000e
 8004d84:	20000005 	.word	0x20000005
 8004d88:	2000000b 	.word	0x2000000b
 8004d8c:	20000002 	.word	0x20000002
 8004d90:	2000026a 	.word	0x2000026a
 8004d94:	2000026d 	.word	0x2000026d
 8004d98:	2000026b 	.word	0x2000026b
 8004d9c:	2000026e 	.word	0x2000026e

08004da0 <HAL_GPIO_EXTI_Callback>:

//Deboucing button program
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b082      	sub	sp, #8
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	4603      	mov	r3, r0
 8004da8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == ButtonC_Pin && stateBTNC == 1)
 8004daa:	88fb      	ldrh	r3, [r7, #6]
 8004dac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004db0:	d10b      	bne.n	8004dca <HAL_GPIO_EXTI_Callback+0x2a>
 8004db2:	4b09      	ldr	r3, [pc, #36]	; (8004dd8 <HAL_GPIO_EXTI_Callback+0x38>)
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d106      	bne.n	8004dca <HAL_GPIO_EXTI_Callback+0x2a>
	{
		HAL_TIM_Base_Start_IT(&htim5);
 8004dbc:	4807      	ldr	r0, [pc, #28]	; (8004ddc <HAL_GPIO_EXTI_Callback+0x3c>)
 8004dbe:	f004 f84b 	bl	8008e58 <HAL_TIM_Base_Start_IT>
		stateBTNC = 0;
 8004dc2:	4b05      	ldr	r3, [pc, #20]	; (8004dd8 <HAL_GPIO_EXTI_Callback+0x38>)
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	701a      	strb	r2, [r3, #0]
 8004dc8:	e001      	b.n	8004dce <HAL_GPIO_EXTI_Callback+0x2e>
	}

	else
	{
		__NOP();
 8004dca:	bf00      	nop
	}
}
 8004dcc:	bf00      	nop
 8004dce:	bf00      	nop
 8004dd0:	3708      	adds	r7, #8
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	20000004 	.word	0x20000004
 8004ddc:	200004c8 	.word	0x200004c8

08004de0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim5.Instance)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	4b0d      	ldr	r3, [pc, #52]	; (8004e24 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d112      	bne.n	8004e1a <HAL_TIM_PeriodElapsedCallback+0x3a>
	{
		if (HAL_GPIO_ReadPin(ButtonC_GPIO_Port, ButtonC_Pin)
 8004df4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004df8:	480b      	ldr	r0, [pc, #44]	; (8004e28 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8004dfa:	f002 fbdd 	bl	80075b8 <HAL_GPIO_ReadPin>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d10a      	bne.n	8004e1a <HAL_TIM_PeriodElapsedCallback+0x3a>
				== GPIO_PIN_RESET)
		{
			MultifunctionButton();
 8004e04:	f7ff fe58 	bl	8004ab8 <MultifunctionButton>
			menu_display = 1;
 8004e08:	4b08      	ldr	r3, [pc, #32]	; (8004e2c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	701a      	strb	r2, [r3, #0]
			stateBTNC = 1;
 8004e0e:	4b08      	ldr	r3, [pc, #32]	; (8004e30 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8004e10:	2201      	movs	r2, #1
 8004e12:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim5);
 8004e14:	4803      	ldr	r0, [pc, #12]	; (8004e24 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8004e16:	f004 f881 	bl	8008f1c <HAL_TIM_Base_Stop_IT>

		}
	}
}
 8004e1a:	bf00      	nop
 8004e1c:	3708      	adds	r7, #8
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	200004c8 	.word	0x200004c8
 8004e28:	40020800 	.word	0x40020800
 8004e2c:	20000000 	.word	0x20000000
 8004e30:	20000004 	.word	0x20000004

08004e34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004e34:	b480      	push	{r7}
 8004e36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004e38:	b672      	cpsid	i
}
 8004e3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8004e3c:	e7fe      	b.n	8004e3c <Error_Handler+0x8>
	...

08004e40 <SPI1SendByte>:
extern void MFRC522_Reset(void);
extern void MFRC522_AntennaOn(void);
extern void MFRC522_AntennaOff(void);
extern void MFRC522_Halt(void);

uint8_t SPI1SendByte(uint8_t data) {
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b086      	sub	sp, #24
 8004e44:	af02      	add	r7, sp, #8
 8004e46:	4603      	mov	r3, r0
 8004e48:	71fb      	strb	r3, [r7, #7]
	unsigned char writeCommand[1];
	unsigned char readValue[1];
	
	writeCommand[0] = data;
 8004e4a:	79fb      	ldrb	r3, [r7, #7]
 8004e4c:	733b      	strb	r3, [r7, #12]
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)&writeCommand, (uint8_t*)&readValue, 1, 10);
 8004e4e:	f107 0208 	add.w	r2, r7, #8
 8004e52:	f107 010c 	add.w	r1, r7, #12
 8004e56:	230a      	movs	r3, #10
 8004e58:	9300      	str	r3, [sp, #0]
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	4803      	ldr	r0, [pc, #12]	; (8004e6c <SPI1SendByte+0x2c>)
 8004e5e:	f003 fd3e 	bl	80088de <HAL_SPI_TransmitReceive>
	return readValue[0];
 8004e62:	7a3b      	ldrb	r3, [r7, #8]
	//SPI1->DR = data;															// вывод в SPI1
	//while (!(SPI1->SR & SPI_SR_RXNE));     				// ждем окончания обмена (STM32F103)
	//for (uint8_t i=0; i<50; i++) {};
	//data = SPI1->DR;															// читаем принятые данные
	//return data;
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3710      	adds	r7, #16
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	200003fc 	.word	0x200003fc

08004e70 <SPI1_WriteReg>:

void SPI1_WriteReg(uint8_t address, uint8_t value) {
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b082      	sub	sp, #8
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	4603      	mov	r3, r0
 8004e78:	460a      	mov	r2, r1
 8004e7a:	71fb      	strb	r3, [r7, #7]
 8004e7c:	4613      	mov	r3, r2
 8004e7e:	71bb      	strb	r3, [r7, #6]
	cs_reset();
 8004e80:	2200      	movs	r2, #0
 8004e82:	2120      	movs	r1, #32
 8004e84:	4809      	ldr	r0, [pc, #36]	; (8004eac <SPI1_WriteReg+0x3c>)
 8004e86:	f002 fbaf 	bl	80075e8 <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 8004e8a:	79fb      	ldrb	r3, [r7, #7]
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f7ff ffd7 	bl	8004e40 <SPI1SendByte>
	SPI1SendByte(value);
 8004e92:	79bb      	ldrb	r3, [r7, #6]
 8004e94:	4618      	mov	r0, r3
 8004e96:	f7ff ffd3 	bl	8004e40 <SPI1SendByte>
	cs_set();
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	2120      	movs	r1, #32
 8004e9e:	4803      	ldr	r0, [pc, #12]	; (8004eac <SPI1_WriteReg+0x3c>)
 8004ea0:	f002 fba2 	bl	80075e8 <HAL_GPIO_WritePin>
}
 8004ea4:	bf00      	nop
 8004ea6:	3708      	adds	r7, #8
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	40020400 	.word	0x40020400

08004eb0 <SPI1_ReadReg>:

uint8_t SPI1_ReadReg(uint8_t address) {
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	71fb      	strb	r3, [r7, #7]
	uint8_t	val;

	cs_reset();
 8004eba:	2200      	movs	r2, #0
 8004ebc:	2120      	movs	r1, #32
 8004ebe:	480b      	ldr	r0, [pc, #44]	; (8004eec <SPI1_ReadReg+0x3c>)
 8004ec0:	f002 fb92 	bl	80075e8 <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 8004ec4:	79fb      	ldrb	r3, [r7, #7]
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f7ff ffba 	bl	8004e40 <SPI1SendByte>
	val = SPI1SendByte(0x00);
 8004ecc:	2000      	movs	r0, #0
 8004ece:	f7ff ffb7 	bl	8004e40 <SPI1SendByte>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	73fb      	strb	r3, [r7, #15]
	cs_set();
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	2120      	movs	r1, #32
 8004eda:	4804      	ldr	r0, [pc, #16]	; (8004eec <SPI1_ReadReg+0x3c>)
 8004edc:	f002 fb84 	bl	80075e8 <HAL_GPIO_WritePin>
	return val;
 8004ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3710      	adds	r7, #16
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	40020400 	.word	0x40020400

08004ef0 <MFRC522_WriteRegister>:

void MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b082      	sub	sp, #8
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	460a      	mov	r2, r1
 8004efa:	71fb      	strb	r3, [r7, #7]
 8004efc:	4613      	mov	r3, r2
 8004efe:	71bb      	strb	r3, [r7, #6]
	addr = (addr << 1) & 0x7E;															// Address format: 0XXXXXX0
 8004f00:	79fb      	ldrb	r3, [r7, #7]
 8004f02:	005b      	lsls	r3, r3, #1
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8004f0a:	71fb      	strb	r3, [r7, #7]
  SPI1_WriteReg(addr, val);
 8004f0c:	79ba      	ldrb	r2, [r7, #6]
 8004f0e:	79fb      	ldrb	r3, [r7, #7]
 8004f10:	4611      	mov	r1, r2
 8004f12:	4618      	mov	r0, r3
 8004f14:	f7ff ffac 	bl	8004e70 <SPI1_WriteReg>
}
 8004f18:	bf00      	nop
 8004f1a:	3708      	adds	r7, #8
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <MFRC522_ReadRegister>:

uint8_t MFRC522_ReadRegister(uint8_t addr) {
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	4603      	mov	r3, r0
 8004f28:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	addr = ((addr << 1) & 0x7E) | 0x80;
 8004f2a:	79fb      	ldrb	r3, [r7, #7]
 8004f2c:	005b      	lsls	r3, r3, #1
 8004f2e:	b25b      	sxtb	r3, r3
 8004f30:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8004f34:	b25b      	sxtb	r3, r3
 8004f36:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004f3a:	b25b      	sxtb	r3, r3
 8004f3c:	71fb      	strb	r3, [r7, #7]
	val = SPI1_ReadReg(addr);
 8004f3e:	79fb      	ldrb	r3, [r7, #7]
 8004f40:	4618      	mov	r0, r3
 8004f42:	f7ff ffb5 	bl	8004eb0 <SPI1_ReadReg>
 8004f46:	4603      	mov	r3, r0
 8004f48:	73fb      	strb	r3, [r7, #15]
	return val;	
 8004f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3710      	adds	r7, #16
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <MFRC522_Check>:

uint8_t MFRC522_Check(uint8_t* id) {
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b084      	sub	sp, #16
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
	uint8_t status;
	status = MFRC522_Request(PICC_REQIDL, id);							// Find cards, return card type
 8004f5c:	6879      	ldr	r1, [r7, #4]
 8004f5e:	2026      	movs	r0, #38	; 0x26
 8004f60:	f000 f849 	bl	8004ff6 <MFRC522_Request>
 8004f64:	4603      	mov	r3, r0
 8004f66:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK) status = MFRC522_Anticoll(id);			// Card detected. Anti-collision, return card serial number 4 bytes
 8004f68:	7bfb      	ldrb	r3, [r7, #15]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d104      	bne.n	8004f78 <MFRC522_Check+0x24>
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 f935 	bl	80051de <MFRC522_Anticoll>
 8004f74:	4603      	mov	r3, r0
 8004f76:	73fb      	strb	r3, [r7, #15]
	MFRC522_Halt();																					// Command card into hibernation 
 8004f78:	f000 f9f8 	bl	800536c <MFRC522_Halt>
	return status;
 8004f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3710      	adds	r7, #16
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}

08004f86 <MFRC522_SetBitMask>:
		if (CardID[i] != CompareID[i]) return MI_ERR;
	}
	return MI_OK;
}

void MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 8004f86:	b580      	push	{r7, lr}
 8004f88:	b082      	sub	sp, #8
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	460a      	mov	r2, r1
 8004f90:	71fb      	strb	r3, [r7, #7]
 8004f92:	4613      	mov	r3, r2
 8004f94:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) | mask);
 8004f96:	79fb      	ldrb	r3, [r7, #7]
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f7ff ffc1 	bl	8004f20 <MFRC522_ReadRegister>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	79bb      	ldrb	r3, [r7, #6]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	b2da      	uxtb	r2, r3
 8004fa8:	79fb      	ldrb	r3, [r7, #7]
 8004faa:	4611      	mov	r1, r2
 8004fac:	4618      	mov	r0, r3
 8004fae:	f7ff ff9f 	bl	8004ef0 <MFRC522_WriteRegister>
}
 8004fb2:	bf00      	nop
 8004fb4:	3708      	adds	r7, #8
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}

08004fba <MFRC522_ClearBitMask>:

void MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 8004fba:	b580      	push	{r7, lr}
 8004fbc:	b082      	sub	sp, #8
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	460a      	mov	r2, r1
 8004fc4:	71fb      	strb	r3, [r7, #7]
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) & (~mask));
 8004fca:	79fb      	ldrb	r3, [r7, #7]
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f7ff ffa7 	bl	8004f20 <MFRC522_ReadRegister>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	b25a      	sxtb	r2, r3
 8004fd6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004fda:	43db      	mvns	r3, r3
 8004fdc:	b25b      	sxtb	r3, r3
 8004fde:	4013      	ands	r3, r2
 8004fe0:	b25b      	sxtb	r3, r3
 8004fe2:	b2da      	uxtb	r2, r3
 8004fe4:	79fb      	ldrb	r3, [r7, #7]
 8004fe6:	4611      	mov	r1, r2
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f7ff ff81 	bl	8004ef0 <MFRC522_WriteRegister>
}
 8004fee:	bf00      	nop
 8004ff0:	3708      	adds	r7, #8
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}

08004ff6 <MFRC522_Request>:

uint8_t MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 8004ff6:	b580      	push	{r7, lr}
 8004ff8:	b086      	sub	sp, #24
 8004ffa:	af02      	add	r7, sp, #8
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	6039      	str	r1, [r7, #0]
 8005000:	71fb      	strb	r3, [r7, #7]
	uint8_t status;  
	uint16_t backBits;																			// The received data bits

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		// TxLastBists = BitFramingReg[2..0]
 8005002:	2107      	movs	r1, #7
 8005004:	200d      	movs	r0, #13
 8005006:	f7ff ff73 	bl	8004ef0 <MFRC522_WriteRegister>
	TagType[0] = reqMode;
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	79fa      	ldrb	r2, [r7, #7]
 800500e:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8005010:	f107 030c 	add.w	r3, r7, #12
 8005014:	9300      	str	r3, [sp, #0]
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	2201      	movs	r2, #1
 800501a:	6839      	ldr	r1, [r7, #0]
 800501c:	200c      	movs	r0, #12
 800501e:	f000 f80f 	bl	8005040 <MFRC522_ToCard>
 8005022:	4603      	mov	r3, r0
 8005024:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (backBits != 0x10)) status = MI_ERR;
 8005026:	7bfb      	ldrb	r3, [r7, #15]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d102      	bne.n	8005032 <MFRC522_Request+0x3c>
 800502c:	89bb      	ldrh	r3, [r7, #12]
 800502e:	2b10      	cmp	r3, #16
 8005030:	d001      	beq.n	8005036 <MFRC522_Request+0x40>
 8005032:	2302      	movs	r3, #2
 8005034:	73fb      	strb	r3, [r7, #15]
	return status;
 8005036:	7bfb      	ldrb	r3, [r7, #15]
}
 8005038:	4618      	mov	r0, r3
 800503a:	3710      	adds	r7, #16
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}

08005040 <MFRC522_ToCard>:

uint8_t MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 8005040:	b590      	push	{r4, r7, lr}
 8005042:	b087      	sub	sp, #28
 8005044:	af00      	add	r7, sp, #0
 8005046:	60b9      	str	r1, [r7, #8]
 8005048:	607b      	str	r3, [r7, #4]
 800504a:	4603      	mov	r3, r0
 800504c:	73fb      	strb	r3, [r7, #15]
 800504e:	4613      	mov	r3, r2
 8005050:	73bb      	strb	r3, [r7, #14]
	uint8_t status = MI_ERR;
 8005052:	2302      	movs	r3, #2
 8005054:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 8005056:	2300      	movs	r3, #0
 8005058:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 800505a:	2300      	movs	r3, #0
 800505c:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 800505e:	7bfb      	ldrb	r3, [r7, #15]
 8005060:	2b0c      	cmp	r3, #12
 8005062:	d006      	beq.n	8005072 <MFRC522_ToCard+0x32>
 8005064:	2b0e      	cmp	r3, #14
 8005066:	d109      	bne.n	800507c <MFRC522_ToCard+0x3c>
		case PCD_AUTHENT: {
			irqEn = 0x12;
 8005068:	2312      	movs	r3, #18
 800506a:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 800506c:	2310      	movs	r3, #16
 800506e:	757b      	strb	r3, [r7, #21]
			break;
 8005070:	e005      	b.n	800507e <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE: {
			irqEn = 0x77;
 8005072:	2377      	movs	r3, #119	; 0x77
 8005074:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 8005076:	2330      	movs	r3, #48	; 0x30
 8005078:	757b      	strb	r3, [r7, #21]
			break;
 800507a:	e000      	b.n	800507e <MFRC522_ToCard+0x3e>
		}
		default:
		break;
 800507c:	bf00      	nop
	}

	MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 800507e:	7dbb      	ldrb	r3, [r7, #22]
 8005080:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005084:	b2db      	uxtb	r3, r3
 8005086:	4619      	mov	r1, r3
 8005088:	2002      	movs	r0, #2
 800508a:	f7ff ff31 	bl	8004ef0 <MFRC522_WriteRegister>
	MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 800508e:	2180      	movs	r1, #128	; 0x80
 8005090:	2004      	movs	r0, #4
 8005092:	f7ff ff92 	bl	8004fba <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 8005096:	2180      	movs	r1, #128	; 0x80
 8005098:	200a      	movs	r0, #10
 800509a:	f7ff ff74 	bl	8004f86 <MFRC522_SetBitMask>
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 800509e:	2100      	movs	r1, #0
 80050a0:	2001      	movs	r0, #1
 80050a2:	f7ff ff25 	bl	8004ef0 <MFRC522_WriteRegister>

	// Writing data to the FIFO
	for (i = 0; i < sendLen; i++) MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
 80050a6:	2300      	movs	r3, #0
 80050a8:	827b      	strh	r3, [r7, #18]
 80050aa:	e00a      	b.n	80050c2 <MFRC522_ToCard+0x82>
 80050ac:	8a7b      	ldrh	r3, [r7, #18]
 80050ae:	68ba      	ldr	r2, [r7, #8]
 80050b0:	4413      	add	r3, r2
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	4619      	mov	r1, r3
 80050b6:	2009      	movs	r0, #9
 80050b8:	f7ff ff1a 	bl	8004ef0 <MFRC522_WriteRegister>
 80050bc:	8a7b      	ldrh	r3, [r7, #18]
 80050be:	3301      	adds	r3, #1
 80050c0:	827b      	strh	r3, [r7, #18]
 80050c2:	7bbb      	ldrb	r3, [r7, #14]
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	8a7a      	ldrh	r2, [r7, #18]
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d3ef      	bcc.n	80050ac <MFRC522_ToCard+0x6c>

	// Execute the command
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 80050cc:	7bfb      	ldrb	r3, [r7, #15]
 80050ce:	4619      	mov	r1, r3
 80050d0:	2001      	movs	r0, #1
 80050d2:	f7ff ff0d 	bl	8004ef0 <MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		// StartSend=1,transmission of data starts 
 80050d6:	7bfb      	ldrb	r3, [r7, #15]
 80050d8:	2b0c      	cmp	r3, #12
 80050da:	d103      	bne.n	80050e4 <MFRC522_ToCard+0xa4>
 80050dc:	2180      	movs	r1, #128	; 0x80
 80050de:	200d      	movs	r0, #13
 80050e0:	f7ff ff51 	bl	8004f86 <MFRC522_SetBitMask>

	// Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 80050e4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80050e8:	827b      	strh	r3, [r7, #18]
	do {
		// CommIrqReg[7..0]
		// Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 80050ea:	2004      	movs	r0, #4
 80050ec:	f7ff ff18 	bl	8004f20 <MFRC522_ReadRegister>
 80050f0:	4603      	mov	r3, r0
 80050f2:	753b      	strb	r3, [r7, #20]
		i--;
 80050f4:	8a7b      	ldrh	r3, [r7, #18]
 80050f6:	3b01      	subs	r3, #1
 80050f8:	827b      	strh	r3, [r7, #18]
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 80050fa:	8a7b      	ldrh	r3, [r7, #18]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d00a      	beq.n	8005116 <MFRC522_ToCard+0xd6>
 8005100:	7d3b      	ldrb	r3, [r7, #20]
 8005102:	f003 0301 	and.w	r3, r3, #1
 8005106:	2b00      	cmp	r3, #0
 8005108:	d105      	bne.n	8005116 <MFRC522_ToCard+0xd6>
 800510a:	7d3a      	ldrb	r2, [r7, #20]
 800510c:	7d7b      	ldrb	r3, [r7, #21]
 800510e:	4013      	ands	r3, r2
 8005110:	b2db      	uxtb	r3, r3
 8005112:	2b00      	cmp	r3, #0
 8005114:	d0e9      	beq.n	80050ea <MFRC522_ToCard+0xaa>

	MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);																// StartSend=0
 8005116:	2180      	movs	r1, #128	; 0x80
 8005118:	200d      	movs	r0, #13
 800511a:	f7ff ff4e 	bl	8004fba <MFRC522_ClearBitMask>

	if (i != 0)  {
 800511e:	8a7b      	ldrh	r3, [r7, #18]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d057      	beq.n	80051d4 <MFRC522_ToCard+0x194>
		if (!(MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 8005124:	2006      	movs	r0, #6
 8005126:	f7ff fefb 	bl	8004f20 <MFRC522_ReadRegister>
 800512a:	4603      	mov	r3, r0
 800512c:	f003 031b 	and.w	r3, r3, #27
 8005130:	2b00      	cmp	r3, #0
 8005132:	d14d      	bne.n	80051d0 <MFRC522_ToCard+0x190>
			status = MI_OK;
 8005134:	2300      	movs	r3, #0
 8005136:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01) status = MI_NOTAGERR;
 8005138:	7d3a      	ldrb	r2, [r7, #20]
 800513a:	7dbb      	ldrb	r3, [r7, #22]
 800513c:	4013      	ands	r3, r2
 800513e:	b2db      	uxtb	r3, r3
 8005140:	f003 0301 	and.w	r3, r3, #1
 8005144:	2b00      	cmp	r3, #0
 8005146:	d001      	beq.n	800514c <MFRC522_ToCard+0x10c>
 8005148:	2301      	movs	r3, #1
 800514a:	75fb      	strb	r3, [r7, #23]
			if (command == PCD_TRANSCEIVE) {
 800514c:	7bfb      	ldrb	r3, [r7, #15]
 800514e:	2b0c      	cmp	r3, #12
 8005150:	d140      	bne.n	80051d4 <MFRC522_ToCard+0x194>
				n = MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 8005152:	200a      	movs	r0, #10
 8005154:	f7ff fee4 	bl	8004f20 <MFRC522_ReadRegister>
 8005158:	4603      	mov	r3, r0
 800515a:	753b      	strb	r3, [r7, #20]
				lastBits = MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 800515c:	200c      	movs	r0, #12
 800515e:	f7ff fedf 	bl	8004f20 <MFRC522_ReadRegister>
 8005162:	4603      	mov	r3, r0
 8005164:	f003 0307 	and.w	r3, r3, #7
 8005168:	747b      	strb	r3, [r7, #17]
				if (lastBits) *backLen = (n-1)*8+lastBits; else *backLen = n*8;
 800516a:	7c7b      	ldrb	r3, [r7, #17]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d00b      	beq.n	8005188 <MFRC522_ToCard+0x148>
 8005170:	7d3b      	ldrb	r3, [r7, #20]
 8005172:	3b01      	subs	r3, #1
 8005174:	b29b      	uxth	r3, r3
 8005176:	00db      	lsls	r3, r3, #3
 8005178:	b29a      	uxth	r2, r3
 800517a:	7c7b      	ldrb	r3, [r7, #17]
 800517c:	b29b      	uxth	r3, r3
 800517e:	4413      	add	r3, r2
 8005180:	b29a      	uxth	r2, r3
 8005182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005184:	801a      	strh	r2, [r3, #0]
 8005186:	e005      	b.n	8005194 <MFRC522_ToCard+0x154>
 8005188:	7d3b      	ldrb	r3, [r7, #20]
 800518a:	b29b      	uxth	r3, r3
 800518c:	00db      	lsls	r3, r3, #3
 800518e:	b29a      	uxth	r2, r3
 8005190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005192:	801a      	strh	r2, [r3, #0]
				if (n == 0) n = 1;
 8005194:	7d3b      	ldrb	r3, [r7, #20]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d101      	bne.n	800519e <MFRC522_ToCard+0x15e>
 800519a:	2301      	movs	r3, #1
 800519c:	753b      	strb	r3, [r7, #20]
				if (n > MFRC522_MAX_LEN) n = MFRC522_MAX_LEN;
 800519e:	7d3b      	ldrb	r3, [r7, #20]
 80051a0:	2b10      	cmp	r3, #16
 80051a2:	d901      	bls.n	80051a8 <MFRC522_ToCard+0x168>
 80051a4:	2310      	movs	r3, #16
 80051a6:	753b      	strb	r3, [r7, #20]
				for (i = 0; i < n; i++) backData[i] = MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);		// Reading the received data in FIFO
 80051a8:	2300      	movs	r3, #0
 80051aa:	827b      	strh	r3, [r7, #18]
 80051ac:	e00a      	b.n	80051c4 <MFRC522_ToCard+0x184>
 80051ae:	8a7b      	ldrh	r3, [r7, #18]
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	18d4      	adds	r4, r2, r3
 80051b4:	2009      	movs	r0, #9
 80051b6:	f7ff feb3 	bl	8004f20 <MFRC522_ReadRegister>
 80051ba:	4603      	mov	r3, r0
 80051bc:	7023      	strb	r3, [r4, #0]
 80051be:	8a7b      	ldrh	r3, [r7, #18]
 80051c0:	3301      	adds	r3, #1
 80051c2:	827b      	strh	r3, [r7, #18]
 80051c4:	7d3b      	ldrb	r3, [r7, #20]
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	8a7a      	ldrh	r2, [r7, #18]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d3ef      	bcc.n	80051ae <MFRC522_ToCard+0x16e>
 80051ce:	e001      	b.n	80051d4 <MFRC522_ToCard+0x194>
			}
		} else status = MI_ERR;
 80051d0:	2302      	movs	r3, #2
 80051d2:	75fb      	strb	r3, [r7, #23]
	}
	return status;
 80051d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	371c      	adds	r7, #28
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd90      	pop	{r4, r7, pc}

080051de <MFRC522_Anticoll>:

uint8_t MFRC522_Anticoll(uint8_t* serNum) {
 80051de:	b580      	push	{r7, lr}
 80051e0:	b086      	sub	sp, #24
 80051e2:	af02      	add	r7, sp, #8
 80051e4:	6078      	str	r0, [r7, #4]
	uint8_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 80051e6:	2300      	movs	r3, #0
 80051e8:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);												// TxLastBists = BitFramingReg[2..0]
 80051ea:	2100      	movs	r1, #0
 80051ec:	200d      	movs	r0, #13
 80051ee:	f7ff fe7f 	bl	8004ef0 <MFRC522_WriteRegister>
	serNum[0] = PICC_ANTICOLL;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2293      	movs	r2, #147	; 0x93
 80051f6:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	3301      	adds	r3, #1
 80051fc:	2220      	movs	r2, #32
 80051fe:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8005200:	f107 030a 	add.w	r3, r7, #10
 8005204:	9300      	str	r3, [sp, #0]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2202      	movs	r2, #2
 800520a:	6879      	ldr	r1, [r7, #4]
 800520c:	200c      	movs	r0, #12
 800520e:	f7ff ff17 	bl	8005040 <MFRC522_ToCard>
 8005212:	4603      	mov	r3, r0
 8005214:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK) {
 8005216:	7bfb      	ldrb	r3, [r7, #15]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d118      	bne.n	800524e <MFRC522_Anticoll+0x70>
		// Check card serial number
		for (i = 0; i < 4; i++) serNumCheck ^= serNum[i];
 800521c:	2300      	movs	r3, #0
 800521e:	73bb      	strb	r3, [r7, #14]
 8005220:	e009      	b.n	8005236 <MFRC522_Anticoll+0x58>
 8005222:	7bbb      	ldrb	r3, [r7, #14]
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	4413      	add	r3, r2
 8005228:	781a      	ldrb	r2, [r3, #0]
 800522a:	7b7b      	ldrb	r3, [r7, #13]
 800522c:	4053      	eors	r3, r2
 800522e:	737b      	strb	r3, [r7, #13]
 8005230:	7bbb      	ldrb	r3, [r7, #14]
 8005232:	3301      	adds	r3, #1
 8005234:	73bb      	strb	r3, [r7, #14]
 8005236:	7bbb      	ldrb	r3, [r7, #14]
 8005238:	2b03      	cmp	r3, #3
 800523a:	d9f2      	bls.n	8005222 <MFRC522_Anticoll+0x44>
		if (serNumCheck != serNum[i]) status = MI_ERR;
 800523c:	7bbb      	ldrb	r3, [r7, #14]
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	4413      	add	r3, r2
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	7b7a      	ldrb	r2, [r7, #13]
 8005246:	429a      	cmp	r2, r3
 8005248:	d001      	beq.n	800524e <MFRC522_Anticoll+0x70>
 800524a:	2302      	movs	r3, #2
 800524c:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 800524e:	7bfb      	ldrb	r3, [r7, #15]
} 
 8005250:	4618      	mov	r0, r3
 8005252:	3710      	adds	r7, #16
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <MFRC522_CalculateCRC>:

void MFRC522_CalculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData) {
 8005258:	b590      	push	{r4, r7, lr}
 800525a:	b087      	sub	sp, #28
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	460b      	mov	r3, r1
 8005262:	607a      	str	r2, [r7, #4]
 8005264:	72fb      	strb	r3, [r7, #11]
	uint8_t i, n;

	MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);													// CRCIrq = 0
 8005266:	2104      	movs	r1, #4
 8005268:	2005      	movs	r0, #5
 800526a:	f7ff fea6 	bl	8004fba <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);													// Clear the FIFO pointer
 800526e:	2180      	movs	r1, #128	; 0x80
 8005270:	200a      	movs	r0, #10
 8005272:	f7ff fe88 	bl	8004f86 <MFRC522_SetBitMask>
	// Write_MFRC522(CommandReg, PCD_IDLE);

	// Writing data to the FIFO	
	for (i = 0; i < len; i++) MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, *(pIndata+i));
 8005276:	2300      	movs	r3, #0
 8005278:	75fb      	strb	r3, [r7, #23]
 800527a:	e00a      	b.n	8005292 <MFRC522_CalculateCRC+0x3a>
 800527c:	7dfb      	ldrb	r3, [r7, #23]
 800527e:	68fa      	ldr	r2, [r7, #12]
 8005280:	4413      	add	r3, r2
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	4619      	mov	r1, r3
 8005286:	2009      	movs	r0, #9
 8005288:	f7ff fe32 	bl	8004ef0 <MFRC522_WriteRegister>
 800528c:	7dfb      	ldrb	r3, [r7, #23]
 800528e:	3301      	adds	r3, #1
 8005290:	75fb      	strb	r3, [r7, #23]
 8005292:	7dfa      	ldrb	r2, [r7, #23]
 8005294:	7afb      	ldrb	r3, [r7, #11]
 8005296:	429a      	cmp	r2, r3
 8005298:	d3f0      	bcc.n	800527c <MFRC522_CalculateCRC+0x24>
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_CALCCRC);
 800529a:	2103      	movs	r1, #3
 800529c:	2001      	movs	r0, #1
 800529e:	f7ff fe27 	bl	8004ef0 <MFRC522_WriteRegister>

	// Wait CRC calculation is complete
	i = 0xFF;
 80052a2:	23ff      	movs	r3, #255	; 0xff
 80052a4:	75fb      	strb	r3, [r7, #23]
	do {
		n = MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
 80052a6:	2005      	movs	r0, #5
 80052a8:	f7ff fe3a 	bl	8004f20 <MFRC522_ReadRegister>
 80052ac:	4603      	mov	r3, r0
 80052ae:	75bb      	strb	r3, [r7, #22]
		i--;
 80052b0:	7dfb      	ldrb	r3, [r7, #23]
 80052b2:	3b01      	subs	r3, #1
 80052b4:	75fb      	strb	r3, [r7, #23]
	} while ((i!=0) && !(n&0x04));																						// CRCIrq = 1
 80052b6:	7dfb      	ldrb	r3, [r7, #23]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d004      	beq.n	80052c6 <MFRC522_CalculateCRC+0x6e>
 80052bc:	7dbb      	ldrb	r3, [r7, #22]
 80052be:	f003 0304 	and.w	r3, r3, #4
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d0ef      	beq.n	80052a6 <MFRC522_CalculateCRC+0x4e>

	// Read CRC calculation result
	pOutData[0] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
 80052c6:	2022      	movs	r0, #34	; 0x22
 80052c8:	f7ff fe2a 	bl	8004f20 <MFRC522_ReadRegister>
 80052cc:	4603      	mov	r3, r0
 80052ce:	461a      	mov	r2, r3
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	701a      	strb	r2, [r3, #0]
	pOutData[1] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_M);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	1c5c      	adds	r4, r3, #1
 80052d8:	2021      	movs	r0, #33	; 0x21
 80052da:	f7ff fe21 	bl	8004f20 <MFRC522_ReadRegister>
 80052de:	4603      	mov	r3, r0
 80052e0:	7023      	strb	r3, [r4, #0]
}
 80052e2:	bf00      	nop
 80052e4:	371c      	adds	r7, #28
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd90      	pop	{r4, r7, pc}

080052ea <MFRC522_Init>:
		if ((status != MI_OK) || (recvBits != 4) || ((buff[0] & 0x0F) != 0x0A)) status = MI_ERR;
	}
	return status;
}

void MFRC522_Init(void) {
 80052ea:	b580      	push	{r7, lr}
 80052ec:	af00      	add	r7, sp, #0
	MFRC522_Reset();
 80052ee:	f000 f820 	bl	8005332 <MFRC522_Reset>
	MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 80052f2:	218d      	movs	r1, #141	; 0x8d
 80052f4:	202a      	movs	r0, #42	; 0x2a
 80052f6:	f7ff fdfb 	bl	8004ef0 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 80052fa:	213e      	movs	r1, #62	; 0x3e
 80052fc:	202b      	movs	r0, #43	; 0x2b
 80052fe:	f7ff fdf7 	bl	8004ef0 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);           
 8005302:	211e      	movs	r1, #30
 8005304:	202d      	movs	r0, #45	; 0x2d
 8005306:	f7ff fdf3 	bl	8004ef0 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 800530a:	2100      	movs	r1, #0
 800530c:	202c      	movs	r0, #44	; 0x2c
 800530e:	f7ff fdef 	bl	8004ef0 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);				// 48dB gain	
 8005312:	2170      	movs	r1, #112	; 0x70
 8005314:	2026      	movs	r0, #38	; 0x26
 8005316:	f7ff fdeb 	bl	8004ef0 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 800531a:	2140      	movs	r1, #64	; 0x40
 800531c:	2015      	movs	r0, #21
 800531e:	f7ff fde7 	bl	8004ef0 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 8005322:	213d      	movs	r1, #61	; 0x3d
 8005324:	2011      	movs	r0, #17
 8005326:	f7ff fde3 	bl	8004ef0 <MFRC522_WriteRegister>
	MFRC522_AntennaOn();																		// Open the antenna
 800532a:	f000 f80a 	bl	8005342 <MFRC522_AntennaOn>
}
 800532e:	bf00      	nop
 8005330:	bd80      	pop	{r7, pc}

08005332 <MFRC522_Reset>:

void MFRC522_Reset(void) {
 8005332:	b580      	push	{r7, lr}
 8005334:	af00      	add	r7, sp, #0
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 8005336:	210f      	movs	r1, #15
 8005338:	2001      	movs	r0, #1
 800533a:	f7ff fdd9 	bl	8004ef0 <MFRC522_WriteRegister>
}
 800533e:	bf00      	nop
 8005340:	bd80      	pop	{r7, pc}

08005342 <MFRC522_AntennaOn>:

void MFRC522_AntennaOn(void) {
 8005342:	b580      	push	{r7, lr}
 8005344:	b082      	sub	sp, #8
 8005346:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 8005348:	2014      	movs	r0, #20
 800534a:	f7ff fde9 	bl	8004f20 <MFRC522_ReadRegister>
 800534e:	4603      	mov	r3, r0
 8005350:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 8005352:	79fb      	ldrb	r3, [r7, #7]
 8005354:	f003 0303 	and.w	r3, r3, #3
 8005358:	2b00      	cmp	r3, #0
 800535a:	d103      	bne.n	8005364 <MFRC522_AntennaOn+0x22>
 800535c:	2103      	movs	r1, #3
 800535e:	2014      	movs	r0, #20
 8005360:	f7ff fe11 	bl	8004f86 <MFRC522_SetBitMask>
}
 8005364:	bf00      	nop
 8005366:	3708      	adds	r7, #8
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <MFRC522_Halt>:

void MFRC522_AntennaOff(void) {
	MFRC522_ClearBitMask(MFRC522_REG_TX_CONTROL, 0x03);
}

void MFRC522_Halt(void) {
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af02      	add	r7, sp, #8
	uint16_t unLen;
	uint8_t buff[4]; 

	buff[0] = PICC_HALT;
 8005372:	2350      	movs	r3, #80	; 0x50
 8005374:	703b      	strb	r3, [r7, #0]
	buff[1] = 0;
 8005376:	2300      	movs	r3, #0
 8005378:	707b      	strb	r3, [r7, #1]
	MFRC522_CalculateCRC(buff, 2, &buff[2]);
 800537a:	463b      	mov	r3, r7
 800537c:	1c9a      	adds	r2, r3, #2
 800537e:	463b      	mov	r3, r7
 8005380:	2102      	movs	r1, #2
 8005382:	4618      	mov	r0, r3
 8005384:	f7ff ff68 	bl	8005258 <MFRC522_CalculateCRC>
	MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 8005388:	463a      	mov	r2, r7
 800538a:	4639      	mov	r1, r7
 800538c:	1dbb      	adds	r3, r7, #6
 800538e:	9300      	str	r3, [sp, #0]
 8005390:	4613      	mov	r3, r2
 8005392:	2204      	movs	r2, #4
 8005394:	200c      	movs	r0, #12
 8005396:	f7ff fe53 	bl	8005040 <MFRC522_ToCard>
}
 800539a:	bf00      	nop
 800539c:	3708      	adds	r7, #8
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
	...

080053a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b083      	sub	sp, #12
 80053a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053aa:	2300      	movs	r3, #0
 80053ac:	607b      	str	r3, [r7, #4]
 80053ae:	4b10      	ldr	r3, [pc, #64]	; (80053f0 <HAL_MspInit+0x4c>)
 80053b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053b2:	4a0f      	ldr	r2, [pc, #60]	; (80053f0 <HAL_MspInit+0x4c>)
 80053b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80053b8:	6453      	str	r3, [r2, #68]	; 0x44
 80053ba:	4b0d      	ldr	r3, [pc, #52]	; (80053f0 <HAL_MspInit+0x4c>)
 80053bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053c2:	607b      	str	r3, [r7, #4]
 80053c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80053c6:	2300      	movs	r3, #0
 80053c8:	603b      	str	r3, [r7, #0]
 80053ca:	4b09      	ldr	r3, [pc, #36]	; (80053f0 <HAL_MspInit+0x4c>)
 80053cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ce:	4a08      	ldr	r2, [pc, #32]	; (80053f0 <HAL_MspInit+0x4c>)
 80053d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053d4:	6413      	str	r3, [r2, #64]	; 0x40
 80053d6:	4b06      	ldr	r3, [pc, #24]	; (80053f0 <HAL_MspInit+0x4c>)
 80053d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053de:	603b      	str	r3, [r7, #0]
 80053e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80053e2:	bf00      	nop
 80053e4:	370c      	adds	r7, #12
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop
 80053f0:	40023800 	.word	0x40023800

080053f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b08a      	sub	sp, #40	; 0x28
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053fc:	f107 0314 	add.w	r3, r7, #20
 8005400:	2200      	movs	r2, #0
 8005402:	601a      	str	r2, [r3, #0]
 8005404:	605a      	str	r2, [r3, #4]
 8005406:	609a      	str	r2, [r3, #8]
 8005408:	60da      	str	r2, [r3, #12]
 800540a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a33      	ldr	r2, [pc, #204]	; (80054e0 <HAL_ADC_MspInit+0xec>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d15f      	bne.n	80054d6 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005416:	2300      	movs	r3, #0
 8005418:	613b      	str	r3, [r7, #16]
 800541a:	4b32      	ldr	r3, [pc, #200]	; (80054e4 <HAL_ADC_MspInit+0xf0>)
 800541c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800541e:	4a31      	ldr	r2, [pc, #196]	; (80054e4 <HAL_ADC_MspInit+0xf0>)
 8005420:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005424:	6453      	str	r3, [r2, #68]	; 0x44
 8005426:	4b2f      	ldr	r3, [pc, #188]	; (80054e4 <HAL_ADC_MspInit+0xf0>)
 8005428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800542a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800542e:	613b      	str	r3, [r7, #16]
 8005430:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005432:	2300      	movs	r3, #0
 8005434:	60fb      	str	r3, [r7, #12]
 8005436:	4b2b      	ldr	r3, [pc, #172]	; (80054e4 <HAL_ADC_MspInit+0xf0>)
 8005438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800543a:	4a2a      	ldr	r2, [pc, #168]	; (80054e4 <HAL_ADC_MspInit+0xf0>)
 800543c:	f043 0301 	orr.w	r3, r3, #1
 8005440:	6313      	str	r3, [r2, #48]	; 0x30
 8005442:	4b28      	ldr	r3, [pc, #160]	; (80054e4 <HAL_ADC_MspInit+0xf0>)
 8005444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005446:	f003 0301 	and.w	r3, r3, #1
 800544a:	60fb      	str	r3, [r7, #12]
 800544c:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800544e:	23fc      	movs	r3, #252	; 0xfc
 8005450:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005452:	2303      	movs	r3, #3
 8005454:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005456:	2300      	movs	r3, #0
 8005458:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800545a:	f107 0314 	add.w	r3, r7, #20
 800545e:	4619      	mov	r1, r3
 8005460:	4821      	ldr	r0, [pc, #132]	; (80054e8 <HAL_ADC_MspInit+0xf4>)
 8005462:	f001 ff25 	bl	80072b0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8005466:	4b21      	ldr	r3, [pc, #132]	; (80054ec <HAL_ADC_MspInit+0xf8>)
 8005468:	4a21      	ldr	r2, [pc, #132]	; (80054f0 <HAL_ADC_MspInit+0xfc>)
 800546a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800546c:	4b1f      	ldr	r3, [pc, #124]	; (80054ec <HAL_ADC_MspInit+0xf8>)
 800546e:	2200      	movs	r2, #0
 8005470:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005472:	4b1e      	ldr	r3, [pc, #120]	; (80054ec <HAL_ADC_MspInit+0xf8>)
 8005474:	2200      	movs	r2, #0
 8005476:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005478:	4b1c      	ldr	r3, [pc, #112]	; (80054ec <HAL_ADC_MspInit+0xf8>)
 800547a:	2200      	movs	r2, #0
 800547c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800547e:	4b1b      	ldr	r3, [pc, #108]	; (80054ec <HAL_ADC_MspInit+0xf8>)
 8005480:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005484:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005486:	4b19      	ldr	r3, [pc, #100]	; (80054ec <HAL_ADC_MspInit+0xf8>)
 8005488:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800548c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800548e:	4b17      	ldr	r3, [pc, #92]	; (80054ec <HAL_ADC_MspInit+0xf8>)
 8005490:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005494:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005496:	4b15      	ldr	r3, [pc, #84]	; (80054ec <HAL_ADC_MspInit+0xf8>)
 8005498:	f44f 7280 	mov.w	r2, #256	; 0x100
 800549c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800549e:	4b13      	ldr	r3, [pc, #76]	; (80054ec <HAL_ADC_MspInit+0xf8>)
 80054a0:	2200      	movs	r2, #0
 80054a2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80054a4:	4b11      	ldr	r3, [pc, #68]	; (80054ec <HAL_ADC_MspInit+0xf8>)
 80054a6:	2200      	movs	r2, #0
 80054a8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80054aa:	4810      	ldr	r0, [pc, #64]	; (80054ec <HAL_ADC_MspInit+0xf8>)
 80054ac:	f001 fafe 	bl	8006aac <HAL_DMA_Init>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d001      	beq.n	80054ba <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80054b6:	f7ff fcbd 	bl	8004e34 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a0b      	ldr	r2, [pc, #44]	; (80054ec <HAL_ADC_MspInit+0xf8>)
 80054be:	639a      	str	r2, [r3, #56]	; 0x38
 80054c0:	4a0a      	ldr	r2, [pc, #40]	; (80054ec <HAL_ADC_MspInit+0xf8>)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80054c6:	2200      	movs	r2, #0
 80054c8:	2100      	movs	r1, #0
 80054ca:	2012      	movs	r0, #18
 80054cc:	f001 fab7 	bl	8006a3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80054d0:	2012      	movs	r0, #18
 80054d2:	f001 fad0 	bl	8006a76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80054d6:	bf00      	nop
 80054d8:	3728      	adds	r7, #40	; 0x28
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	40012000 	.word	0x40012000
 80054e4:	40023800 	.word	0x40023800
 80054e8:	40020000 	.word	0x40020000
 80054ec:	20000614 	.word	0x20000614
 80054f0:	40026410 	.word	0x40026410

080054f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b08a      	sub	sp, #40	; 0x28
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054fc:	f107 0314 	add.w	r3, r7, #20
 8005500:	2200      	movs	r2, #0
 8005502:	601a      	str	r2, [r3, #0]
 8005504:	605a      	str	r2, [r3, #4]
 8005506:	609a      	str	r2, [r3, #8]
 8005508:	60da      	str	r2, [r3, #12]
 800550a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a28      	ldr	r2, [pc, #160]	; (80055b4 <HAL_I2C_MspInit+0xc0>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d14a      	bne.n	80055ac <HAL_I2C_MspInit+0xb8>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005516:	2300      	movs	r3, #0
 8005518:	613b      	str	r3, [r7, #16]
 800551a:	4b27      	ldr	r3, [pc, #156]	; (80055b8 <HAL_I2C_MspInit+0xc4>)
 800551c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800551e:	4a26      	ldr	r2, [pc, #152]	; (80055b8 <HAL_I2C_MspInit+0xc4>)
 8005520:	f043 0301 	orr.w	r3, r3, #1
 8005524:	6313      	str	r3, [r2, #48]	; 0x30
 8005526:	4b24      	ldr	r3, [pc, #144]	; (80055b8 <HAL_I2C_MspInit+0xc4>)
 8005528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800552a:	f003 0301 	and.w	r3, r3, #1
 800552e:	613b      	str	r3, [r7, #16]
 8005530:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005532:	2300      	movs	r3, #0
 8005534:	60fb      	str	r3, [r7, #12]
 8005536:	4b20      	ldr	r3, [pc, #128]	; (80055b8 <HAL_I2C_MspInit+0xc4>)
 8005538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800553a:	4a1f      	ldr	r2, [pc, #124]	; (80055b8 <HAL_I2C_MspInit+0xc4>)
 800553c:	f043 0302 	orr.w	r3, r3, #2
 8005540:	6313      	str	r3, [r2, #48]	; 0x30
 8005542:	4b1d      	ldr	r3, [pc, #116]	; (80055b8 <HAL_I2C_MspInit+0xc4>)
 8005544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005546:	f003 0302 	and.w	r3, r3, #2
 800554a:	60fb      	str	r3, [r7, #12]
 800554c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB4     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800554e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005552:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005554:	2312      	movs	r3, #18
 8005556:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005558:	2301      	movs	r3, #1
 800555a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800555c:	2303      	movs	r3, #3
 800555e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005560:	2304      	movs	r3, #4
 8005562:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005564:	f107 0314 	add.w	r3, r7, #20
 8005568:	4619      	mov	r1, r3
 800556a:	4814      	ldr	r0, [pc, #80]	; (80055bc <HAL_I2C_MspInit+0xc8>)
 800556c:	f001 fea0 	bl	80072b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8005570:	2310      	movs	r3, #16
 8005572:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005574:	2312      	movs	r3, #18
 8005576:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005578:	2301      	movs	r3, #1
 800557a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800557c:	2303      	movs	r3, #3
 800557e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8005580:	2309      	movs	r3, #9
 8005582:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005584:	f107 0314 	add.w	r3, r7, #20
 8005588:	4619      	mov	r1, r3
 800558a:	480d      	ldr	r0, [pc, #52]	; (80055c0 <HAL_I2C_MspInit+0xcc>)
 800558c:	f001 fe90 	bl	80072b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8005590:	2300      	movs	r3, #0
 8005592:	60bb      	str	r3, [r7, #8]
 8005594:	4b08      	ldr	r3, [pc, #32]	; (80055b8 <HAL_I2C_MspInit+0xc4>)
 8005596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005598:	4a07      	ldr	r2, [pc, #28]	; (80055b8 <HAL_I2C_MspInit+0xc4>)
 800559a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800559e:	6413      	str	r3, [r2, #64]	; 0x40
 80055a0:	4b05      	ldr	r3, [pc, #20]	; (80055b8 <HAL_I2C_MspInit+0xc4>)
 80055a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80055a8:	60bb      	str	r3, [r7, #8]
 80055aa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80055ac:	bf00      	nop
 80055ae:	3728      	adds	r7, #40	; 0x28
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	40005c00 	.word	0x40005c00
 80055b8:	40023800 	.word	0x40023800
 80055bc:	40020000 	.word	0x40020000
 80055c0:	40020400 	.word	0x40020400

080055c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b08a      	sub	sp, #40	; 0x28
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055cc:	f107 0314 	add.w	r3, r7, #20
 80055d0:	2200      	movs	r2, #0
 80055d2:	601a      	str	r2, [r3, #0]
 80055d4:	605a      	str	r2, [r3, #4]
 80055d6:	609a      	str	r2, [r3, #8]
 80055d8:	60da      	str	r2, [r3, #12]
 80055da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a19      	ldr	r2, [pc, #100]	; (8005648 <HAL_SPI_MspInit+0x84>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d12c      	bne.n	8005640 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80055e6:	2300      	movs	r3, #0
 80055e8:	613b      	str	r3, [r7, #16]
 80055ea:	4b18      	ldr	r3, [pc, #96]	; (800564c <HAL_SPI_MspInit+0x88>)
 80055ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ee:	4a17      	ldr	r2, [pc, #92]	; (800564c <HAL_SPI_MspInit+0x88>)
 80055f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80055f4:	6413      	str	r3, [r2, #64]	; 0x40
 80055f6:	4b15      	ldr	r3, [pc, #84]	; (800564c <HAL_SPI_MspInit+0x88>)
 80055f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055fe:	613b      	str	r3, [r7, #16]
 8005600:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005602:	2300      	movs	r3, #0
 8005604:	60fb      	str	r3, [r7, #12]
 8005606:	4b11      	ldr	r3, [pc, #68]	; (800564c <HAL_SPI_MspInit+0x88>)
 8005608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800560a:	4a10      	ldr	r2, [pc, #64]	; (800564c <HAL_SPI_MspInit+0x88>)
 800560c:	f043 0302 	orr.w	r3, r3, #2
 8005610:	6313      	str	r3, [r2, #48]	; 0x30
 8005612:	4b0e      	ldr	r3, [pc, #56]	; (800564c <HAL_SPI_MspInit+0x88>)
 8005614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005616:	f003 0302 	and.w	r3, r3, #2
 800561a:	60fb      	str	r3, [r7, #12]
 800561c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800561e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8005622:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005624:	2302      	movs	r3, #2
 8005626:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005628:	2300      	movs	r3, #0
 800562a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800562c:	2303      	movs	r3, #3
 800562e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005630:	2305      	movs	r3, #5
 8005632:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005634:	f107 0314 	add.w	r3, r7, #20
 8005638:	4619      	mov	r1, r3
 800563a:	4805      	ldr	r0, [pc, #20]	; (8005650 <HAL_SPI_MspInit+0x8c>)
 800563c:	f001 fe38 	bl	80072b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8005640:	bf00      	nop
 8005642:	3728      	adds	r7, #40	; 0x28
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}
 8005648:	40003800 	.word	0x40003800
 800564c:	40023800 	.word	0x40023800
 8005650:	40020400 	.word	0x40020400

08005654 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b08c      	sub	sp, #48	; 0x30
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800565c:	f107 031c 	add.w	r3, r7, #28
 8005660:	2200      	movs	r2, #0
 8005662:	601a      	str	r2, [r3, #0]
 8005664:	605a      	str	r2, [r3, #4]
 8005666:	609a      	str	r2, [r3, #8]
 8005668:	60da      	str	r2, [r3, #12]
 800566a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005674:	d153      	bne.n	800571e <HAL_TIM_Encoder_MspInit+0xca>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005676:	2300      	movs	r3, #0
 8005678:	61bb      	str	r3, [r7, #24]
 800567a:	4b47      	ldr	r3, [pc, #284]	; (8005798 <HAL_TIM_Encoder_MspInit+0x144>)
 800567c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567e:	4a46      	ldr	r2, [pc, #280]	; (8005798 <HAL_TIM_Encoder_MspInit+0x144>)
 8005680:	f043 0301 	orr.w	r3, r3, #1
 8005684:	6413      	str	r3, [r2, #64]	; 0x40
 8005686:	4b44      	ldr	r3, [pc, #272]	; (8005798 <HAL_TIM_Encoder_MspInit+0x144>)
 8005688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568a:	f003 0301 	and.w	r3, r3, #1
 800568e:	61bb      	str	r3, [r7, #24]
 8005690:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005692:	2300      	movs	r3, #0
 8005694:	617b      	str	r3, [r7, #20]
 8005696:	4b40      	ldr	r3, [pc, #256]	; (8005798 <HAL_TIM_Encoder_MspInit+0x144>)
 8005698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800569a:	4a3f      	ldr	r2, [pc, #252]	; (8005798 <HAL_TIM_Encoder_MspInit+0x144>)
 800569c:	f043 0301 	orr.w	r3, r3, #1
 80056a0:	6313      	str	r3, [r2, #48]	; 0x30
 80056a2:	4b3d      	ldr	r3, [pc, #244]	; (8005798 <HAL_TIM_Encoder_MspInit+0x144>)
 80056a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a6:	f003 0301 	and.w	r3, r3, #1
 80056aa:	617b      	str	r3, [r7, #20]
 80056ac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80056ae:	2300      	movs	r3, #0
 80056b0:	613b      	str	r3, [r7, #16]
 80056b2:	4b39      	ldr	r3, [pc, #228]	; (8005798 <HAL_TIM_Encoder_MspInit+0x144>)
 80056b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b6:	4a38      	ldr	r2, [pc, #224]	; (8005798 <HAL_TIM_Encoder_MspInit+0x144>)
 80056b8:	f043 0302 	orr.w	r3, r3, #2
 80056bc:	6313      	str	r3, [r2, #48]	; 0x30
 80056be:	4b36      	ldr	r3, [pc, #216]	; (8005798 <HAL_TIM_Encoder_MspInit+0x144>)
 80056c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c2:	f003 0302 	and.w	r3, r3, #2
 80056c6:	613b      	str	r3, [r7, #16]
 80056c8:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80056ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056d0:	2302      	movs	r3, #2
 80056d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056d4:	2300      	movs	r3, #0
 80056d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056d8:	2300      	movs	r3, #0
 80056da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80056dc:	2301      	movs	r3, #1
 80056de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056e0:	f107 031c 	add.w	r3, r7, #28
 80056e4:	4619      	mov	r1, r3
 80056e6:	482d      	ldr	r0, [pc, #180]	; (800579c <HAL_TIM_Encoder_MspInit+0x148>)
 80056e8:	f001 fde2 	bl	80072b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80056ec:	2308      	movs	r3, #8
 80056ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056f0:	2302      	movs	r3, #2
 80056f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056f4:	2300      	movs	r3, #0
 80056f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056f8:	2300      	movs	r3, #0
 80056fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80056fc:	2301      	movs	r3, #1
 80056fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005700:	f107 031c 	add.w	r3, r7, #28
 8005704:	4619      	mov	r1, r3
 8005706:	4826      	ldr	r0, [pc, #152]	; (80057a0 <HAL_TIM_Encoder_MspInit+0x14c>)
 8005708:	f001 fdd2 	bl	80072b0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800570c:	2200      	movs	r2, #0
 800570e:	2100      	movs	r1, #0
 8005710:	201c      	movs	r0, #28
 8005712:	f001 f994 	bl	8006a3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005716:	201c      	movs	r0, #28
 8005718:	f001 f9ad 	bl	8006a76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800571c:	e038      	b.n	8005790 <HAL_TIM_Encoder_MspInit+0x13c>
  else if(htim_encoder->Instance==TIM4)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a20      	ldr	r2, [pc, #128]	; (80057a4 <HAL_TIM_Encoder_MspInit+0x150>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d133      	bne.n	8005790 <HAL_TIM_Encoder_MspInit+0x13c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005728:	2300      	movs	r3, #0
 800572a:	60fb      	str	r3, [r7, #12]
 800572c:	4b1a      	ldr	r3, [pc, #104]	; (8005798 <HAL_TIM_Encoder_MspInit+0x144>)
 800572e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005730:	4a19      	ldr	r2, [pc, #100]	; (8005798 <HAL_TIM_Encoder_MspInit+0x144>)
 8005732:	f043 0304 	orr.w	r3, r3, #4
 8005736:	6413      	str	r3, [r2, #64]	; 0x40
 8005738:	4b17      	ldr	r3, [pc, #92]	; (8005798 <HAL_TIM_Encoder_MspInit+0x144>)
 800573a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800573c:	f003 0304 	and.w	r3, r3, #4
 8005740:	60fb      	str	r3, [r7, #12]
 8005742:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005744:	2300      	movs	r3, #0
 8005746:	60bb      	str	r3, [r7, #8]
 8005748:	4b13      	ldr	r3, [pc, #76]	; (8005798 <HAL_TIM_Encoder_MspInit+0x144>)
 800574a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800574c:	4a12      	ldr	r2, [pc, #72]	; (8005798 <HAL_TIM_Encoder_MspInit+0x144>)
 800574e:	f043 0302 	orr.w	r3, r3, #2
 8005752:	6313      	str	r3, [r2, #48]	; 0x30
 8005754:	4b10      	ldr	r3, [pc, #64]	; (8005798 <HAL_TIM_Encoder_MspInit+0x144>)
 8005756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005758:	f003 0302 	and.w	r3, r3, #2
 800575c:	60bb      	str	r3, [r7, #8]
 800575e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005760:	23c0      	movs	r3, #192	; 0xc0
 8005762:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005764:	2302      	movs	r3, #2
 8005766:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005768:	2300      	movs	r3, #0
 800576a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800576c:	2300      	movs	r3, #0
 800576e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005770:	2302      	movs	r3, #2
 8005772:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005774:	f107 031c 	add.w	r3, r7, #28
 8005778:	4619      	mov	r1, r3
 800577a:	4809      	ldr	r0, [pc, #36]	; (80057a0 <HAL_TIM_Encoder_MspInit+0x14c>)
 800577c:	f001 fd98 	bl	80072b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8005780:	2200      	movs	r2, #0
 8005782:	2100      	movs	r1, #0
 8005784:	201e      	movs	r0, #30
 8005786:	f001 f95a 	bl	8006a3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800578a:	201e      	movs	r0, #30
 800578c:	f001 f973 	bl	8006a76 <HAL_NVIC_EnableIRQ>
}
 8005790:	bf00      	nop
 8005792:	3730      	adds	r7, #48	; 0x30
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}
 8005798:	40023800 	.word	0x40023800
 800579c:	40020000 	.word	0x40020000
 80057a0:	40020400 	.word	0x40020400
 80057a4:	40000800 	.word	0x40000800

080057a8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b085      	sub	sp, #20
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a0b      	ldr	r2, [pc, #44]	; (80057e4 <HAL_TIM_PWM_MspInit+0x3c>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d10d      	bne.n	80057d6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80057ba:	2300      	movs	r3, #0
 80057bc:	60fb      	str	r3, [r7, #12]
 80057be:	4b0a      	ldr	r3, [pc, #40]	; (80057e8 <HAL_TIM_PWM_MspInit+0x40>)
 80057c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c2:	4a09      	ldr	r2, [pc, #36]	; (80057e8 <HAL_TIM_PWM_MspInit+0x40>)
 80057c4:	f043 0302 	orr.w	r3, r3, #2
 80057c8:	6413      	str	r3, [r2, #64]	; 0x40
 80057ca:	4b07      	ldr	r3, [pc, #28]	; (80057e8 <HAL_TIM_PWM_MspInit+0x40>)
 80057cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ce:	f003 0302 	and.w	r3, r3, #2
 80057d2:	60fb      	str	r3, [r7, #12]
 80057d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80057d6:	bf00      	nop
 80057d8:	3714      	adds	r7, #20
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr
 80057e2:	bf00      	nop
 80057e4:	40000400 	.word	0x40000400
 80057e8:	40023800 	.word	0x40023800

080057ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b084      	sub	sp, #16
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a18      	ldr	r2, [pc, #96]	; (800585c <HAL_TIM_Base_MspInit+0x70>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d116      	bne.n	800582c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80057fe:	2300      	movs	r3, #0
 8005800:	60fb      	str	r3, [r7, #12]
 8005802:	4b17      	ldr	r3, [pc, #92]	; (8005860 <HAL_TIM_Base_MspInit+0x74>)
 8005804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005806:	4a16      	ldr	r2, [pc, #88]	; (8005860 <HAL_TIM_Base_MspInit+0x74>)
 8005808:	f043 0308 	orr.w	r3, r3, #8
 800580c:	6413      	str	r3, [r2, #64]	; 0x40
 800580e:	4b14      	ldr	r3, [pc, #80]	; (8005860 <HAL_TIM_Base_MspInit+0x74>)
 8005810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005812:	f003 0308 	and.w	r3, r3, #8
 8005816:	60fb      	str	r3, [r7, #12]
 8005818:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800581a:	2200      	movs	r2, #0
 800581c:	2100      	movs	r1, #0
 800581e:	2032      	movs	r0, #50	; 0x32
 8005820:	f001 f90d 	bl	8006a3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8005824:	2032      	movs	r0, #50	; 0x32
 8005826:	f001 f926 	bl	8006a76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 800582a:	e012      	b.n	8005852 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM9)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a0c      	ldr	r2, [pc, #48]	; (8005864 <HAL_TIM_Base_MspInit+0x78>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d10d      	bne.n	8005852 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8005836:	2300      	movs	r3, #0
 8005838:	60bb      	str	r3, [r7, #8]
 800583a:	4b09      	ldr	r3, [pc, #36]	; (8005860 <HAL_TIM_Base_MspInit+0x74>)
 800583c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800583e:	4a08      	ldr	r2, [pc, #32]	; (8005860 <HAL_TIM_Base_MspInit+0x74>)
 8005840:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005844:	6453      	str	r3, [r2, #68]	; 0x44
 8005846:	4b06      	ldr	r3, [pc, #24]	; (8005860 <HAL_TIM_Base_MspInit+0x74>)
 8005848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800584a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800584e:	60bb      	str	r3, [r7, #8]
 8005850:	68bb      	ldr	r3, [r7, #8]
}
 8005852:	bf00      	nop
 8005854:	3710      	adds	r7, #16
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
 800585a:	bf00      	nop
 800585c:	40000c00 	.word	0x40000c00
 8005860:	40023800 	.word	0x40023800
 8005864:	40014000 	.word	0x40014000

08005868 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b088      	sub	sp, #32
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005870:	f107 030c 	add.w	r3, r7, #12
 8005874:	2200      	movs	r2, #0
 8005876:	601a      	str	r2, [r3, #0]
 8005878:	605a      	str	r2, [r3, #4]
 800587a:	609a      	str	r2, [r3, #8]
 800587c:	60da      	str	r2, [r3, #12]
 800587e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a12      	ldr	r2, [pc, #72]	; (80058d0 <HAL_TIM_MspPostInit+0x68>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d11d      	bne.n	80058c6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800588a:	2300      	movs	r3, #0
 800588c:	60bb      	str	r3, [r7, #8]
 800588e:	4b11      	ldr	r3, [pc, #68]	; (80058d4 <HAL_TIM_MspPostInit+0x6c>)
 8005890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005892:	4a10      	ldr	r2, [pc, #64]	; (80058d4 <HAL_TIM_MspPostInit+0x6c>)
 8005894:	f043 0302 	orr.w	r3, r3, #2
 8005898:	6313      	str	r3, [r2, #48]	; 0x30
 800589a:	4b0e      	ldr	r3, [pc, #56]	; (80058d4 <HAL_TIM_MspPostInit+0x6c>)
 800589c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800589e:	f003 0302 	and.w	r3, r3, #2
 80058a2:	60bb      	str	r3, [r7, #8]
 80058a4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80058a6:	2303      	movs	r3, #3
 80058a8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058aa:	2302      	movs	r3, #2
 80058ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058ae:	2300      	movs	r3, #0
 80058b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058b2:	2300      	movs	r3, #0
 80058b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80058b6:	2302      	movs	r3, #2
 80058b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80058ba:	f107 030c 	add.w	r3, r7, #12
 80058be:	4619      	mov	r1, r3
 80058c0:	4805      	ldr	r0, [pc, #20]	; (80058d8 <HAL_TIM_MspPostInit+0x70>)
 80058c2:	f001 fcf5 	bl	80072b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80058c6:	bf00      	nop
 80058c8:	3720      	adds	r7, #32
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	40000400 	.word	0x40000400
 80058d4:	40023800 	.word	0x40023800
 80058d8:	40020400 	.word	0x40020400

080058dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b08c      	sub	sp, #48	; 0x30
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058e4:	f107 031c 	add.w	r3, r7, #28
 80058e8:	2200      	movs	r2, #0
 80058ea:	601a      	str	r2, [r3, #0]
 80058ec:	605a      	str	r2, [r3, #4]
 80058ee:	609a      	str	r2, [r3, #8]
 80058f0:	60da      	str	r2, [r3, #12]
 80058f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a37      	ldr	r2, [pc, #220]	; (80059d8 <HAL_UART_MspInit+0xfc>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d12d      	bne.n	800595a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80058fe:	2300      	movs	r3, #0
 8005900:	61bb      	str	r3, [r7, #24]
 8005902:	4b36      	ldr	r3, [pc, #216]	; (80059dc <HAL_UART_MspInit+0x100>)
 8005904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005906:	4a35      	ldr	r2, [pc, #212]	; (80059dc <HAL_UART_MspInit+0x100>)
 8005908:	f043 0310 	orr.w	r3, r3, #16
 800590c:	6453      	str	r3, [r2, #68]	; 0x44
 800590e:	4b33      	ldr	r3, [pc, #204]	; (80059dc <HAL_UART_MspInit+0x100>)
 8005910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005912:	f003 0310 	and.w	r3, r3, #16
 8005916:	61bb      	str	r3, [r7, #24]
 8005918:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800591a:	2300      	movs	r3, #0
 800591c:	617b      	str	r3, [r7, #20]
 800591e:	4b2f      	ldr	r3, [pc, #188]	; (80059dc <HAL_UART_MspInit+0x100>)
 8005920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005922:	4a2e      	ldr	r2, [pc, #184]	; (80059dc <HAL_UART_MspInit+0x100>)
 8005924:	f043 0301 	orr.w	r3, r3, #1
 8005928:	6313      	str	r3, [r2, #48]	; 0x30
 800592a:	4b2c      	ldr	r3, [pc, #176]	; (80059dc <HAL_UART_MspInit+0x100>)
 800592c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800592e:	f003 0301 	and.w	r3, r3, #1
 8005932:	617b      	str	r3, [r7, #20]
 8005934:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005936:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800593a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800593c:	2302      	movs	r3, #2
 800593e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005940:	2300      	movs	r3, #0
 8005942:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005944:	2303      	movs	r3, #3
 8005946:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005948:	2307      	movs	r3, #7
 800594a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800594c:	f107 031c 	add.w	r3, r7, #28
 8005950:	4619      	mov	r1, r3
 8005952:	4823      	ldr	r0, [pc, #140]	; (80059e0 <HAL_UART_MspInit+0x104>)
 8005954:	f001 fcac 	bl	80072b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8005958:	e039      	b.n	80059ce <HAL_UART_MspInit+0xf2>
  else if(huart->Instance==USART6)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a21      	ldr	r2, [pc, #132]	; (80059e4 <HAL_UART_MspInit+0x108>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d134      	bne.n	80059ce <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8005964:	2300      	movs	r3, #0
 8005966:	613b      	str	r3, [r7, #16]
 8005968:	4b1c      	ldr	r3, [pc, #112]	; (80059dc <HAL_UART_MspInit+0x100>)
 800596a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800596c:	4a1b      	ldr	r2, [pc, #108]	; (80059dc <HAL_UART_MspInit+0x100>)
 800596e:	f043 0320 	orr.w	r3, r3, #32
 8005972:	6453      	str	r3, [r2, #68]	; 0x44
 8005974:	4b19      	ldr	r3, [pc, #100]	; (80059dc <HAL_UART_MspInit+0x100>)
 8005976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005978:	f003 0320 	and.w	r3, r3, #32
 800597c:	613b      	str	r3, [r7, #16]
 800597e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005980:	2300      	movs	r3, #0
 8005982:	60fb      	str	r3, [r7, #12]
 8005984:	4b15      	ldr	r3, [pc, #84]	; (80059dc <HAL_UART_MspInit+0x100>)
 8005986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005988:	4a14      	ldr	r2, [pc, #80]	; (80059dc <HAL_UART_MspInit+0x100>)
 800598a:	f043 0301 	orr.w	r3, r3, #1
 800598e:	6313      	str	r3, [r2, #48]	; 0x30
 8005990:	4b12      	ldr	r3, [pc, #72]	; (80059dc <HAL_UART_MspInit+0x100>)
 8005992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005994:	f003 0301 	and.w	r3, r3, #1
 8005998:	60fb      	str	r3, [r7, #12]
 800599a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800599c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80059a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059a2:	2302      	movs	r3, #2
 80059a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059a6:	2300      	movs	r3, #0
 80059a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80059aa:	2303      	movs	r3, #3
 80059ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80059ae:	2308      	movs	r3, #8
 80059b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059b2:	f107 031c 	add.w	r3, r7, #28
 80059b6:	4619      	mov	r1, r3
 80059b8:	4809      	ldr	r0, [pc, #36]	; (80059e0 <HAL_UART_MspInit+0x104>)
 80059ba:	f001 fc79 	bl	80072b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80059be:	2200      	movs	r2, #0
 80059c0:	2100      	movs	r1, #0
 80059c2:	2047      	movs	r0, #71	; 0x47
 80059c4:	f001 f83b 	bl	8006a3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80059c8:	2047      	movs	r0, #71	; 0x47
 80059ca:	f001 f854 	bl	8006a76 <HAL_NVIC_EnableIRQ>
}
 80059ce:	bf00      	nop
 80059d0:	3730      	adds	r7, #48	; 0x30
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	bf00      	nop
 80059d8:	40011000 	.word	0x40011000
 80059dc:	40023800 	.word	0x40023800
 80059e0:	40020000 	.word	0x40020000
 80059e4:	40011400 	.word	0x40011400

080059e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80059e8:	b480      	push	{r7}
 80059ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80059ec:	e7fe      	b.n	80059ec <NMI_Handler+0x4>

080059ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80059ee:	b480      	push	{r7}
 80059f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80059f2:	e7fe      	b.n	80059f2 <HardFault_Handler+0x4>

080059f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80059f4:	b480      	push	{r7}
 80059f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80059f8:	e7fe      	b.n	80059f8 <MemManage_Handler+0x4>

080059fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80059fa:	b480      	push	{r7}
 80059fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80059fe:	e7fe      	b.n	80059fe <BusFault_Handler+0x4>

08005a00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005a00:	b480      	push	{r7}
 8005a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005a04:	e7fe      	b.n	8005a04 <UsageFault_Handler+0x4>

08005a06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005a06:	b480      	push	{r7}
 8005a08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005a0a:	bf00      	nop
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr

08005a14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005a14:	b480      	push	{r7}
 8005a16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005a18:	bf00      	nop
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr

08005a22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005a22:	b480      	push	{r7}
 8005a24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005a26:	bf00      	nop
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr

08005a30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	af00      	add	r7, sp, #0
//		old_countLeft = countLeft;
//		old_countRight = countRight;
//		indx = 0;
//	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005a34:	f000 f99e 	bl	8005d74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005a38:	bf00      	nop
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005a40:	4802      	ldr	r0, [pc, #8]	; (8005a4c <ADC_IRQHandler+0x10>)
 8005a42:	f000 fa1e 	bl	8005e82 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8005a46:	bf00      	nop
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	20000558 	.word	0x20000558

08005a50 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005a54:	4802      	ldr	r0, [pc, #8]	; (8005a60 <TIM2_IRQHandler+0x10>)
 8005a56:	f003 fce3 	bl	8009420 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005a5a:	bf00      	nop
 8005a5c:	bd80      	pop	{r7, pc}
 8005a5e:	bf00      	nop
 8005a60:	200006dc 	.word	0x200006dc

08005a64 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8005a68:	4802      	ldr	r0, [pc, #8]	; (8005a74 <TIM4_IRQHandler+0x10>)
 8005a6a:	f003 fcd9 	bl	8009420 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8005a6e:	bf00      	nop
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	bf00      	nop
 8005a74:	20000454 	.word	0x20000454

08005a78 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8005a7c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005a80:	f001 fdcc 	bl	800761c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005a84:	bf00      	nop
 8005a86:	bd80      	pop	{r7, pc}

08005a88 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8005a8c:	4802      	ldr	r0, [pc, #8]	; (8005a98 <TIM5_IRQHandler+0x10>)
 8005a8e:	f003 fcc7 	bl	8009420 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8005a92:	bf00      	nop
 8005a94:	bd80      	pop	{r7, pc}
 8005a96:	bf00      	nop
 8005a98:	200004c8 	.word	0x200004c8

08005a9c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005aa0:	4802      	ldr	r0, [pc, #8]	; (8005aac <DMA2_Stream0_IRQHandler+0x10>)
 8005aa2:	f001 f99b 	bl	8006ddc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8005aa6:	bf00      	nop
 8005aa8:	bd80      	pop	{r7, pc}
 8005aaa:	bf00      	nop
 8005aac:	20000614 	.word	0x20000614

08005ab0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

//	Uart_isr (&huart6);

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8005ab4:	4802      	ldr	r0, [pc, #8]	; (8005ac0 <USART6_IRQHandler+0x10>)
 8005ab6:	f004 fbcb 	bl	800a250 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8005aba:	bf00      	nop
 8005abc:	bd80      	pop	{r7, pc}
 8005abe:	bf00      	nop
 8005ac0:	20000364 	.word	0x20000364

08005ac4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	af00      	add	r7, sp, #0
	return 1;
 8005ac8:	2301      	movs	r3, #1
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr

08005ad4 <_kill>:

int _kill(int pid, int sig)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b082      	sub	sp, #8
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005ade:	f005 fa73 	bl	800afc8 <__errno>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2216      	movs	r2, #22
 8005ae6:	601a      	str	r2, [r3, #0]
	return -1;
 8005ae8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3708      	adds	r7, #8
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <_exit>:

void _exit (int status)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b082      	sub	sp, #8
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005afc:	f04f 31ff 	mov.w	r1, #4294967295
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f7ff ffe7 	bl	8005ad4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005b06:	e7fe      	b.n	8005b06 <_exit+0x12>

08005b08 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b086      	sub	sp, #24
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005b14:	2300      	movs	r3, #0
 8005b16:	617b      	str	r3, [r7, #20]
 8005b18:	e00a      	b.n	8005b30 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005b1a:	f3af 8000 	nop.w
 8005b1e:	4601      	mov	r1, r0
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	1c5a      	adds	r2, r3, #1
 8005b24:	60ba      	str	r2, [r7, #8]
 8005b26:	b2ca      	uxtb	r2, r1
 8005b28:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	3301      	adds	r3, #1
 8005b2e:	617b      	str	r3, [r7, #20]
 8005b30:	697a      	ldr	r2, [r7, #20]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	dbf0      	blt.n	8005b1a <_read+0x12>
	}

return len;
 8005b38:	687b      	ldr	r3, [r7, #4]
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3718      	adds	r7, #24
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}

08005b42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005b42:	b580      	push	{r7, lr}
 8005b44:	b086      	sub	sp, #24
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	60f8      	str	r0, [r7, #12]
 8005b4a:	60b9      	str	r1, [r7, #8]
 8005b4c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005b4e:	2300      	movs	r3, #0
 8005b50:	617b      	str	r3, [r7, #20]
 8005b52:	e009      	b.n	8005b68 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	1c5a      	adds	r2, r3, #1
 8005b58:	60ba      	str	r2, [r7, #8]
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f7fd fb01 	bl	8003164 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	3301      	adds	r3, #1
 8005b66:	617b      	str	r3, [r7, #20]
 8005b68:	697a      	ldr	r2, [r7, #20]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	dbf1      	blt.n	8005b54 <_write+0x12>
	}
	return len;
 8005b70:	687b      	ldr	r3, [r7, #4]
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3718      	adds	r7, #24
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}

08005b7a <_close>:

int _close(int file)
{
 8005b7a:	b480      	push	{r7}
 8005b7c:	b083      	sub	sp, #12
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	6078      	str	r0, [r7, #4]
	return -1;
 8005b82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	370c      	adds	r7, #12
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr

08005b92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005b92:	b480      	push	{r7}
 8005b94:	b083      	sub	sp, #12
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6078      	str	r0, [r7, #4]
 8005b9a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005ba2:	605a      	str	r2, [r3, #4]
	return 0;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	370c      	adds	r7, #12
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr

08005bb2 <_isatty>:

int _isatty(int file)
{
 8005bb2:	b480      	push	{r7}
 8005bb4:	b083      	sub	sp, #12
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	6078      	str	r0, [r7, #4]
	return 1;
 8005bba:	2301      	movs	r3, #1
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	370c      	adds	r7, #12
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr

08005bc8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b085      	sub	sp, #20
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	60f8      	str	r0, [r7, #12]
 8005bd0:	60b9      	str	r1, [r7, #8]
 8005bd2:	607a      	str	r2, [r7, #4]
	return 0;
 8005bd4:	2300      	movs	r3, #0
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3714      	adds	r7, #20
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr
	...

08005be4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b086      	sub	sp, #24
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005bec:	4a14      	ldr	r2, [pc, #80]	; (8005c40 <_sbrk+0x5c>)
 8005bee:	4b15      	ldr	r3, [pc, #84]	; (8005c44 <_sbrk+0x60>)
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005bf8:	4b13      	ldr	r3, [pc, #76]	; (8005c48 <_sbrk+0x64>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d102      	bne.n	8005c06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005c00:	4b11      	ldr	r3, [pc, #68]	; (8005c48 <_sbrk+0x64>)
 8005c02:	4a12      	ldr	r2, [pc, #72]	; (8005c4c <_sbrk+0x68>)
 8005c04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005c06:	4b10      	ldr	r3, [pc, #64]	; (8005c48 <_sbrk+0x64>)
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4413      	add	r3, r2
 8005c0e:	693a      	ldr	r2, [r7, #16]
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d207      	bcs.n	8005c24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005c14:	f005 f9d8 	bl	800afc8 <__errno>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	220c      	movs	r2, #12
 8005c1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8005c22:	e009      	b.n	8005c38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005c24:	4b08      	ldr	r3, [pc, #32]	; (8005c48 <_sbrk+0x64>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005c2a:	4b07      	ldr	r3, [pc, #28]	; (8005c48 <_sbrk+0x64>)
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4413      	add	r3, r2
 8005c32:	4a05      	ldr	r2, [pc, #20]	; (8005c48 <_sbrk+0x64>)
 8005c34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005c36:	68fb      	ldr	r3, [r7, #12]
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3718      	adds	r7, #24
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}
 8005c40:	20010000 	.word	0x20010000
 8005c44:	00000400 	.word	0x00000400
 8005c48:	20000288 	.word	0x20000288
 8005c4c:	20000750 	.word	0x20000750

08005c50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005c50:	b480      	push	{r7}
 8005c52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005c54:	4b08      	ldr	r3, [pc, #32]	; (8005c78 <SystemInit+0x28>)
 8005c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c5a:	4a07      	ldr	r2, [pc, #28]	; (8005c78 <SystemInit+0x28>)
 8005c5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005c60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005c64:	4b04      	ldr	r3, [pc, #16]	; (8005c78 <SystemInit+0x28>)
 8005c66:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005c6a:	609a      	str	r2, [r3, #8]
#endif
}
 8005c6c:	bf00      	nop
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr
 8005c76:	bf00      	nop
 8005c78:	e000ed00 	.word	0xe000ed00

08005c7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005c7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005cb4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005c80:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005c82:	e003      	b.n	8005c8c <LoopCopyDataInit>

08005c84 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005c84:	4b0c      	ldr	r3, [pc, #48]	; (8005cb8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005c86:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005c88:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005c8a:	3104      	adds	r1, #4

08005c8c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005c8c:	480b      	ldr	r0, [pc, #44]	; (8005cbc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005c8e:	4b0c      	ldr	r3, [pc, #48]	; (8005cc0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005c90:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005c92:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005c94:	d3f6      	bcc.n	8005c84 <CopyDataInit>
  ldr  r2, =_sbss
 8005c96:	4a0b      	ldr	r2, [pc, #44]	; (8005cc4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005c98:	e002      	b.n	8005ca0 <LoopFillZerobss>

08005c9a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005c9a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005c9c:	f842 3b04 	str.w	r3, [r2], #4

08005ca0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005ca0:	4b09      	ldr	r3, [pc, #36]	; (8005cc8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005ca2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005ca4:	d3f9      	bcc.n	8005c9a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005ca6:	f7ff ffd3 	bl	8005c50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005caa:	f005 f993 	bl	800afd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005cae:	f7fd fc47 	bl	8003540 <main>
  bx  lr    
 8005cb2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005cb4:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 8005cb8:	08010288 	.word	0x08010288
  ldr  r0, =_sdata
 8005cbc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005cc0:	20000248 	.word	0x20000248
  ldr  r2, =_sbss
 8005cc4:	20000248 	.word	0x20000248
  ldr  r3, = _ebss
 8005cc8:	20000750 	.word	0x20000750

08005ccc <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005ccc:	e7fe      	b.n	8005ccc <DMA1_Stream0_IRQHandler>
	...

08005cd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005cd4:	4b0e      	ldr	r3, [pc, #56]	; (8005d10 <HAL_Init+0x40>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a0d      	ldr	r2, [pc, #52]	; (8005d10 <HAL_Init+0x40>)
 8005cda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005cde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005ce0:	4b0b      	ldr	r3, [pc, #44]	; (8005d10 <HAL_Init+0x40>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a0a      	ldr	r2, [pc, #40]	; (8005d10 <HAL_Init+0x40>)
 8005ce6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005cea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005cec:	4b08      	ldr	r3, [pc, #32]	; (8005d10 <HAL_Init+0x40>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a07      	ldr	r2, [pc, #28]	; (8005d10 <HAL_Init+0x40>)
 8005cf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cf6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005cf8:	2003      	movs	r0, #3
 8005cfa:	f000 fe95 	bl	8006a28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005cfe:	2000      	movs	r0, #0
 8005d00:	f000 f808 	bl	8005d14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005d04:	f7ff fb4e 	bl	80053a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005d08:	2300      	movs	r3, #0
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	bd80      	pop	{r7, pc}
 8005d0e:	bf00      	nop
 8005d10:	40023c00 	.word	0x40023c00

08005d14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b082      	sub	sp, #8
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005d1c:	4b12      	ldr	r3, [pc, #72]	; (8005d68 <HAL_InitTick+0x54>)
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	4b12      	ldr	r3, [pc, #72]	; (8005d6c <HAL_InitTick+0x58>)
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	4619      	mov	r1, r3
 8005d26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005d2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8005d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d32:	4618      	mov	r0, r3
 8005d34:	f000 fead 	bl	8006a92 <HAL_SYSTICK_Config>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d001      	beq.n	8005d42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e00e      	b.n	8005d60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2b0f      	cmp	r3, #15
 8005d46:	d80a      	bhi.n	8005d5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005d48:	2200      	movs	r2, #0
 8005d4a:	6879      	ldr	r1, [r7, #4]
 8005d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d50:	f000 fe75 	bl	8006a3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005d54:	4a06      	ldr	r2, [pc, #24]	; (8005d70 <HAL_InitTick+0x5c>)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	e000      	b.n	8005d60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3708      	adds	r7, #8
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}
 8005d68:	20000068 	.word	0x20000068
 8005d6c:	20000070 	.word	0x20000070
 8005d70:	2000006c 	.word	0x2000006c

08005d74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005d74:	b480      	push	{r7}
 8005d76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005d78:	4b06      	ldr	r3, [pc, #24]	; (8005d94 <HAL_IncTick+0x20>)
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	4b06      	ldr	r3, [pc, #24]	; (8005d98 <HAL_IncTick+0x24>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4413      	add	r3, r2
 8005d84:	4a04      	ldr	r2, [pc, #16]	; (8005d98 <HAL_IncTick+0x24>)
 8005d86:	6013      	str	r3, [r2, #0]
}
 8005d88:	bf00      	nop
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr
 8005d92:	bf00      	nop
 8005d94:	20000070 	.word	0x20000070
 8005d98:	2000073c 	.word	0x2000073c

08005d9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	af00      	add	r7, sp, #0
  return uwTick;
 8005da0:	4b03      	ldr	r3, [pc, #12]	; (8005db0 <HAL_GetTick+0x14>)
 8005da2:	681b      	ldr	r3, [r3, #0]
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr
 8005dae:	bf00      	nop
 8005db0:	2000073c 	.word	0x2000073c

08005db4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005dbc:	f7ff ffee 	bl	8005d9c <HAL_GetTick>
 8005dc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dcc:	d005      	beq.n	8005dda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005dce:	4b0a      	ldr	r3, [pc, #40]	; (8005df8 <HAL_Delay+0x44>)
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005dda:	bf00      	nop
 8005ddc:	f7ff ffde 	bl	8005d9c <HAL_GetTick>
 8005de0:	4602      	mov	r2, r0
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	1ad3      	subs	r3, r2, r3
 8005de6:	68fa      	ldr	r2, [r7, #12]
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d8f7      	bhi.n	8005ddc <HAL_Delay+0x28>
  {
  }
}
 8005dec:	bf00      	nop
 8005dee:	bf00      	nop
 8005df0:	3710      	adds	r7, #16
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop
 8005df8:	20000070 	.word	0x20000070

08005dfc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b084      	sub	sp, #16
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005e04:	2300      	movs	r3, #0
 8005e06:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d101      	bne.n	8005e12 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e033      	b.n	8005e7a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d109      	bne.n	8005e2e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f7ff faea 	bl	80053f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2200      	movs	r2, #0
 8005e24:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e32:	f003 0310 	and.w	r3, r3, #16
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d118      	bne.n	8005e6c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e3e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005e42:	f023 0302 	bic.w	r3, r3, #2
 8005e46:	f043 0202 	orr.w	r2, r3, #2
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 fb92 	bl	8006578 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2200      	movs	r2, #0
 8005e58:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e5e:	f023 0303 	bic.w	r3, r3, #3
 8005e62:	f043 0201 	orr.w	r2, r3, #1
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	641a      	str	r2, [r3, #64]	; 0x40
 8005e6a:	e001      	b.n	8005e70 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3710      	adds	r7, #16
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}

08005e82 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8005e82:	b580      	push	{r7, lr}
 8005e84:	b084      	sub	sp, #16
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	60fb      	str	r3, [r7, #12]
 8005e8e:	2300      	movs	r3, #0
 8005e90:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f003 0302 	and.w	r3, r3, #2
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	bf0c      	ite	eq
 8005ea0:	2301      	moveq	r3, #1
 8005ea2:	2300      	movne	r3, #0
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	f003 0320 	and.w	r3, r3, #32
 8005eb2:	2b20      	cmp	r3, #32
 8005eb4:	bf0c      	ite	eq
 8005eb6:	2301      	moveq	r3, #1
 8005eb8:	2300      	movne	r3, #0
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d049      	beq.n	8005f58 <HAL_ADC_IRQHandler+0xd6>
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d046      	beq.n	8005f58 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ece:	f003 0310 	and.w	r3, r3, #16
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d105      	bne.n	8005ee2 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eda:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d12b      	bne.n	8005f48 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d127      	bne.n	8005f48 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005efe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d006      	beq.n	8005f14 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d119      	bne.n	8005f48 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	685a      	ldr	r2, [r3, #4]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f022 0220 	bic.w	r2, r2, #32
 8005f22:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f28:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d105      	bne.n	8005f48 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f40:	f043 0201 	orr.w	r2, r3, #1
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f000 f9cb 	bl	80062e4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f06f 0212 	mvn.w	r2, #18
 8005f56:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f003 0304 	and.w	r3, r3, #4
 8005f62:	2b04      	cmp	r3, #4
 8005f64:	bf0c      	ite	eq
 8005f66:	2301      	moveq	r3, #1
 8005f68:	2300      	movne	r3, #0
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f78:	2b80      	cmp	r3, #128	; 0x80
 8005f7a:	bf0c      	ite	eq
 8005f7c:	2301      	moveq	r3, #1
 8005f7e:	2300      	movne	r3, #0
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d057      	beq.n	800603a <HAL_ADC_IRQHandler+0x1b8>
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d054      	beq.n	800603a <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f94:	f003 0310 	and.w	r3, r3, #16
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d105      	bne.n	8005fa8 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d139      	bne.n	800602a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fbc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d006      	beq.n	8005fd2 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d12b      	bne.n	800602a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d124      	bne.n	800602a <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d11d      	bne.n	800602a <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d119      	bne.n	800602a <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	685a      	ldr	r2, [r3, #4]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006004:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800600a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800601a:	2b00      	cmp	r3, #0
 800601c:	d105      	bne.n	800602a <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006022:	f043 0201 	orr.w	r2, r3, #1
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 fc22 	bl	8006874 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f06f 020c 	mvn.w	r2, #12
 8006038:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f003 0301 	and.w	r3, r3, #1
 8006044:	2b01      	cmp	r3, #1
 8006046:	bf0c      	ite	eq
 8006048:	2301      	moveq	r3, #1
 800604a:	2300      	movne	r3, #0
 800604c:	b2db      	uxtb	r3, r3
 800604e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800605a:	2b40      	cmp	r3, #64	; 0x40
 800605c:	bf0c      	ite	eq
 800605e:	2301      	moveq	r3, #1
 8006060:	2300      	movne	r3, #0
 8006062:	b2db      	uxtb	r3, r3
 8006064:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d017      	beq.n	800609c <HAL_ADC_IRQHandler+0x21a>
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d014      	beq.n	800609c <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f003 0301 	and.w	r3, r3, #1
 800607c:	2b01      	cmp	r3, #1
 800607e:	d10d      	bne.n	800609c <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006084:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 f93d 	bl	800630c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f06f 0201 	mvn.w	r2, #1
 800609a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f003 0320 	and.w	r3, r3, #32
 80060a6:	2b20      	cmp	r3, #32
 80060a8:	bf0c      	ite	eq
 80060aa:	2301      	moveq	r3, #1
 80060ac:	2300      	movne	r3, #0
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80060bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80060c0:	bf0c      	ite	eq
 80060c2:	2301      	moveq	r3, #1
 80060c4:	2300      	movne	r3, #0
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d015      	beq.n	80060fc <HAL_ADC_IRQHandler+0x27a>
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d012      	beq.n	80060fc <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060da:	f043 0202 	orr.w	r2, r3, #2
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f06f 0220 	mvn.w	r2, #32
 80060ea:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f000 f917 	bl	8006320 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f06f 0220 	mvn.w	r2, #32
 80060fa:	601a      	str	r2, [r3, #0]
  }
}
 80060fc:	bf00      	nop
 80060fe:	3710      	adds	r7, #16
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}

08006104 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b086      	sub	sp, #24
 8006108:	af00      	add	r7, sp, #0
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8006110:	2300      	movs	r3, #0
 8006112:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800611a:	2b01      	cmp	r3, #1
 800611c:	d101      	bne.n	8006122 <HAL_ADC_Start_DMA+0x1e>
 800611e:	2302      	movs	r3, #2
 8006120:	e0ce      	b.n	80062c0 <HAL_ADC_Start_DMA+0x1bc>
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2201      	movs	r2, #1
 8006126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	f003 0301 	and.w	r3, r3, #1
 8006134:	2b01      	cmp	r3, #1
 8006136:	d018      	beq.n	800616a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	689a      	ldr	r2, [r3, #8]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f042 0201 	orr.w	r2, r2, #1
 8006146:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006148:	4b5f      	ldr	r3, [pc, #380]	; (80062c8 <HAL_ADC_Start_DMA+0x1c4>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a5f      	ldr	r2, [pc, #380]	; (80062cc <HAL_ADC_Start_DMA+0x1c8>)
 800614e:	fba2 2303 	umull	r2, r3, r2, r3
 8006152:	0c9a      	lsrs	r2, r3, #18
 8006154:	4613      	mov	r3, r2
 8006156:	005b      	lsls	r3, r3, #1
 8006158:	4413      	add	r3, r2
 800615a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800615c:	e002      	b.n	8006164 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	3b01      	subs	r3, #1
 8006162:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d1f9      	bne.n	800615e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006174:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006178:	d107      	bne.n	800618a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	689a      	ldr	r2, [r3, #8]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006188:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	f003 0301 	and.w	r3, r3, #1
 8006194:	2b01      	cmp	r3, #1
 8006196:	f040 8086 	bne.w	80062a6 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800619e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80061a2:	f023 0301 	bic.w	r3, r3, #1
 80061a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d007      	beq.n	80061cc <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80061c4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80061d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061d8:	d106      	bne.n	80061e8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061de:	f023 0206 	bic.w	r2, r3, #6
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	645a      	str	r2, [r3, #68]	; 0x44
 80061e6:	e002      	b.n	80061ee <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2200      	movs	r2, #0
 80061ec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2200      	movs	r2, #0
 80061f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80061f6:	4b36      	ldr	r3, [pc, #216]	; (80062d0 <HAL_ADC_Start_DMA+0x1cc>)
 80061f8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061fe:	4a35      	ldr	r2, [pc, #212]	; (80062d4 <HAL_ADC_Start_DMA+0x1d0>)
 8006200:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006206:	4a34      	ldr	r2, [pc, #208]	; (80062d8 <HAL_ADC_Start_DMA+0x1d4>)
 8006208:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800620e:	4a33      	ldr	r2, [pc, #204]	; (80062dc <HAL_ADC_Start_DMA+0x1d8>)
 8006210:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800621a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	685a      	ldr	r2, [r3, #4]
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800622a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	689a      	ldr	r2, [r3, #8]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800623a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	334c      	adds	r3, #76	; 0x4c
 8006246:	4619      	mov	r1, r3
 8006248:	68ba      	ldr	r2, [r7, #8]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f000 fcdc 	bl	8006c08 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	f003 031f 	and.w	r3, r3, #31
 8006258:	2b00      	cmp	r3, #0
 800625a:	d10f      	bne.n	800627c <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006266:	2b00      	cmp	r3, #0
 8006268:	d129      	bne.n	80062be <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	689a      	ldr	r2, [r3, #8]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006278:	609a      	str	r2, [r3, #8]
 800627a:	e020      	b.n	80062be <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a17      	ldr	r2, [pc, #92]	; (80062e0 <HAL_ADC_Start_DMA+0x1dc>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d11b      	bne.n	80062be <HAL_ADC_Start_DMA+0x1ba>
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006290:	2b00      	cmp	r3, #0
 8006292:	d114      	bne.n	80062be <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	689a      	ldr	r2, [r3, #8]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80062a2:	609a      	str	r2, [r3, #8]
 80062a4:	e00b      	b.n	80062be <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062aa:	f043 0210 	orr.w	r2, r3, #16
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062b6:	f043 0201 	orr.w	r2, r3, #1
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80062be:	2300      	movs	r3, #0
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3718      	adds	r7, #24
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}
 80062c8:	20000068 	.word	0x20000068
 80062cc:	431bde83 	.word	0x431bde83
 80062d0:	40012300 	.word	0x40012300
 80062d4:	08006771 	.word	0x08006771
 80062d8:	0800682b 	.word	0x0800682b
 80062dc:	08006847 	.word	0x08006847
 80062e0:	40012000 	.word	0x40012000

080062e4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80062ec:	bf00      	nop
 80062ee:	370c      	adds	r7, #12
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr

080062f8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b083      	sub	sp, #12
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8006300:	bf00      	nop
 8006302:	370c      	adds	r7, #12
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr

0800630c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800630c:	b480      	push	{r7}
 800630e:	b083      	sub	sp, #12
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8006314:	bf00      	nop
 8006316:	370c      	adds	r7, #12
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr

08006320 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006320:	b480      	push	{r7}
 8006322:	b083      	sub	sp, #12
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8006328:	bf00      	nop
 800632a:	370c      	adds	r7, #12
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr

08006334 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006334:	b480      	push	{r7}
 8006336:	b085      	sub	sp, #20
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800633e:	2300      	movs	r3, #0
 8006340:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006348:	2b01      	cmp	r3, #1
 800634a:	d101      	bne.n	8006350 <HAL_ADC_ConfigChannel+0x1c>
 800634c:	2302      	movs	r3, #2
 800634e:	e105      	b.n	800655c <HAL_ADC_ConfigChannel+0x228>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	2b09      	cmp	r3, #9
 800635e:	d925      	bls.n	80063ac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	68d9      	ldr	r1, [r3, #12]
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	b29b      	uxth	r3, r3
 800636c:	461a      	mov	r2, r3
 800636e:	4613      	mov	r3, r2
 8006370:	005b      	lsls	r3, r3, #1
 8006372:	4413      	add	r3, r2
 8006374:	3b1e      	subs	r3, #30
 8006376:	2207      	movs	r2, #7
 8006378:	fa02 f303 	lsl.w	r3, r2, r3
 800637c:	43da      	mvns	r2, r3
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	400a      	ands	r2, r1
 8006384:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	68d9      	ldr	r1, [r3, #12]
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	689a      	ldr	r2, [r3, #8]
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	b29b      	uxth	r3, r3
 8006396:	4618      	mov	r0, r3
 8006398:	4603      	mov	r3, r0
 800639a:	005b      	lsls	r3, r3, #1
 800639c:	4403      	add	r3, r0
 800639e:	3b1e      	subs	r3, #30
 80063a0:	409a      	lsls	r2, r3
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	430a      	orrs	r2, r1
 80063a8:	60da      	str	r2, [r3, #12]
 80063aa:	e022      	b.n	80063f2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	6919      	ldr	r1, [r3, #16]
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	461a      	mov	r2, r3
 80063ba:	4613      	mov	r3, r2
 80063bc:	005b      	lsls	r3, r3, #1
 80063be:	4413      	add	r3, r2
 80063c0:	2207      	movs	r2, #7
 80063c2:	fa02 f303 	lsl.w	r3, r2, r3
 80063c6:	43da      	mvns	r2, r3
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	400a      	ands	r2, r1
 80063ce:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	6919      	ldr	r1, [r3, #16]
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	689a      	ldr	r2, [r3, #8]
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	b29b      	uxth	r3, r3
 80063e0:	4618      	mov	r0, r3
 80063e2:	4603      	mov	r3, r0
 80063e4:	005b      	lsls	r3, r3, #1
 80063e6:	4403      	add	r3, r0
 80063e8:	409a      	lsls	r2, r3
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	430a      	orrs	r2, r1
 80063f0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	2b06      	cmp	r3, #6
 80063f8:	d824      	bhi.n	8006444 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	685a      	ldr	r2, [r3, #4]
 8006404:	4613      	mov	r3, r2
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	4413      	add	r3, r2
 800640a:	3b05      	subs	r3, #5
 800640c:	221f      	movs	r2, #31
 800640e:	fa02 f303 	lsl.w	r3, r2, r3
 8006412:	43da      	mvns	r2, r3
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	400a      	ands	r2, r1
 800641a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	b29b      	uxth	r3, r3
 8006428:	4618      	mov	r0, r3
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	685a      	ldr	r2, [r3, #4]
 800642e:	4613      	mov	r3, r2
 8006430:	009b      	lsls	r3, r3, #2
 8006432:	4413      	add	r3, r2
 8006434:	3b05      	subs	r3, #5
 8006436:	fa00 f203 	lsl.w	r2, r0, r3
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	430a      	orrs	r2, r1
 8006440:	635a      	str	r2, [r3, #52]	; 0x34
 8006442:	e04c      	b.n	80064de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	2b0c      	cmp	r3, #12
 800644a:	d824      	bhi.n	8006496 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	685a      	ldr	r2, [r3, #4]
 8006456:	4613      	mov	r3, r2
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	4413      	add	r3, r2
 800645c:	3b23      	subs	r3, #35	; 0x23
 800645e:	221f      	movs	r2, #31
 8006460:	fa02 f303 	lsl.w	r3, r2, r3
 8006464:	43da      	mvns	r2, r3
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	400a      	ands	r2, r1
 800646c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	b29b      	uxth	r3, r3
 800647a:	4618      	mov	r0, r3
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	685a      	ldr	r2, [r3, #4]
 8006480:	4613      	mov	r3, r2
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	4413      	add	r3, r2
 8006486:	3b23      	subs	r3, #35	; 0x23
 8006488:	fa00 f203 	lsl.w	r2, r0, r3
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	430a      	orrs	r2, r1
 8006492:	631a      	str	r2, [r3, #48]	; 0x30
 8006494:	e023      	b.n	80064de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	685a      	ldr	r2, [r3, #4]
 80064a0:	4613      	mov	r3, r2
 80064a2:	009b      	lsls	r3, r3, #2
 80064a4:	4413      	add	r3, r2
 80064a6:	3b41      	subs	r3, #65	; 0x41
 80064a8:	221f      	movs	r2, #31
 80064aa:	fa02 f303 	lsl.w	r3, r2, r3
 80064ae:	43da      	mvns	r2, r3
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	400a      	ands	r2, r1
 80064b6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	4618      	mov	r0, r3
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	685a      	ldr	r2, [r3, #4]
 80064ca:	4613      	mov	r3, r2
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	4413      	add	r3, r2
 80064d0:	3b41      	subs	r3, #65	; 0x41
 80064d2:	fa00 f203 	lsl.w	r2, r0, r3
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	430a      	orrs	r2, r1
 80064dc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80064de:	4b22      	ldr	r3, [pc, #136]	; (8006568 <HAL_ADC_ConfigChannel+0x234>)
 80064e0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a21      	ldr	r2, [pc, #132]	; (800656c <HAL_ADC_ConfigChannel+0x238>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d109      	bne.n	8006500 <HAL_ADC_ConfigChannel+0x1cc>
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	2b12      	cmp	r3, #18
 80064f2:	d105      	bne.n	8006500 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a19      	ldr	r2, [pc, #100]	; (800656c <HAL_ADC_ConfigChannel+0x238>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d123      	bne.n	8006552 <HAL_ADC_ConfigChannel+0x21e>
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	2b10      	cmp	r3, #16
 8006510:	d003      	beq.n	800651a <HAL_ADC_ConfigChannel+0x1e6>
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	2b11      	cmp	r3, #17
 8006518:	d11b      	bne.n	8006552 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	2b10      	cmp	r3, #16
 800652c:	d111      	bne.n	8006552 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800652e:	4b10      	ldr	r3, [pc, #64]	; (8006570 <HAL_ADC_ConfigChannel+0x23c>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a10      	ldr	r2, [pc, #64]	; (8006574 <HAL_ADC_ConfigChannel+0x240>)
 8006534:	fba2 2303 	umull	r2, r3, r2, r3
 8006538:	0c9a      	lsrs	r2, r3, #18
 800653a:	4613      	mov	r3, r2
 800653c:	009b      	lsls	r3, r3, #2
 800653e:	4413      	add	r3, r2
 8006540:	005b      	lsls	r3, r3, #1
 8006542:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006544:	e002      	b.n	800654c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	3b01      	subs	r3, #1
 800654a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d1f9      	bne.n	8006546 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2200      	movs	r2, #0
 8006556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800655a:	2300      	movs	r3, #0
}
 800655c:	4618      	mov	r0, r3
 800655e:	3714      	adds	r7, #20
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr
 8006568:	40012300 	.word	0x40012300
 800656c:	40012000 	.word	0x40012000
 8006570:	20000068 	.word	0x20000068
 8006574:	431bde83 	.word	0x431bde83

08006578 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006578:	b480      	push	{r7}
 800657a:	b085      	sub	sp, #20
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006580:	4b79      	ldr	r3, [pc, #484]	; (8006768 <ADC_Init+0x1f0>)
 8006582:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	685a      	ldr	r2, [r3, #4]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	431a      	orrs	r2, r3
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	685a      	ldr	r2, [r3, #4]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80065ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	6859      	ldr	r1, [r3, #4]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	691b      	ldr	r3, [r3, #16]
 80065b8:	021a      	lsls	r2, r3, #8
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	430a      	orrs	r2, r1
 80065c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	685a      	ldr	r2, [r3, #4]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80065d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	6859      	ldr	r1, [r3, #4]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	689a      	ldr	r2, [r3, #8]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	430a      	orrs	r2, r1
 80065e2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	689a      	ldr	r2, [r3, #8]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80065f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	6899      	ldr	r1, [r3, #8]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	68da      	ldr	r2, [r3, #12]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	430a      	orrs	r2, r1
 8006604:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800660a:	4a58      	ldr	r2, [pc, #352]	; (800676c <ADC_Init+0x1f4>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d022      	beq.n	8006656 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	689a      	ldr	r2, [r3, #8]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800661e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	6899      	ldr	r1, [r3, #8]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	430a      	orrs	r2, r1
 8006630:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	689a      	ldr	r2, [r3, #8]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006640:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	6899      	ldr	r1, [r3, #8]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	430a      	orrs	r2, r1
 8006652:	609a      	str	r2, [r3, #8]
 8006654:	e00f      	b.n	8006676 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	689a      	ldr	r2, [r3, #8]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006664:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	689a      	ldr	r2, [r3, #8]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006674:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	689a      	ldr	r2, [r3, #8]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f022 0202 	bic.w	r2, r2, #2
 8006684:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	6899      	ldr	r1, [r3, #8]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	7e1b      	ldrb	r3, [r3, #24]
 8006690:	005a      	lsls	r2, r3, #1
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	430a      	orrs	r2, r1
 8006698:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d01b      	beq.n	80066dc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	685a      	ldr	r2, [r3, #4]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066b2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	685a      	ldr	r2, [r3, #4]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80066c2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	6859      	ldr	r1, [r3, #4]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ce:	3b01      	subs	r3, #1
 80066d0:	035a      	lsls	r2, r3, #13
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	430a      	orrs	r2, r1
 80066d8:	605a      	str	r2, [r3, #4]
 80066da:	e007      	b.n	80066ec <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	685a      	ldr	r2, [r3, #4]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80066ea:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80066fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	69db      	ldr	r3, [r3, #28]
 8006706:	3b01      	subs	r3, #1
 8006708:	051a      	lsls	r2, r3, #20
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	430a      	orrs	r2, r1
 8006710:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	689a      	ldr	r2, [r3, #8]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006720:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	6899      	ldr	r1, [r3, #8]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800672e:	025a      	lsls	r2, r3, #9
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	430a      	orrs	r2, r1
 8006736:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	689a      	ldr	r2, [r3, #8]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006746:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	6899      	ldr	r1, [r3, #8]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	695b      	ldr	r3, [r3, #20]
 8006752:	029a      	lsls	r2, r3, #10
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	430a      	orrs	r2, r1
 800675a:	609a      	str	r2, [r3, #8]
}
 800675c:	bf00      	nop
 800675e:	3714      	adds	r7, #20
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr
 8006768:	40012300 	.word	0x40012300
 800676c:	0f000001 	.word	0x0f000001

08006770 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800677c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006782:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006786:	2b00      	cmp	r3, #0
 8006788:	d13c      	bne.n	8006804 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800678e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d12b      	bne.n	80067fc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d127      	bne.n	80067fc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d006      	beq.n	80067c8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d119      	bne.n	80067fc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	685a      	ldr	r2, [r3, #4]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f022 0220 	bic.w	r2, r2, #32
 80067d6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d105      	bne.n	80067fc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067f4:	f043 0201 	orr.w	r2, r3, #1
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80067fc:	68f8      	ldr	r0, [r7, #12]
 80067fe:	f7ff fd71 	bl	80062e4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006802:	e00e      	b.n	8006822 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006808:	f003 0310 	and.w	r3, r3, #16
 800680c:	2b00      	cmp	r3, #0
 800680e:	d003      	beq.n	8006818 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8006810:	68f8      	ldr	r0, [r7, #12]
 8006812:	f7ff fd85 	bl	8006320 <HAL_ADC_ErrorCallback>
}
 8006816:	e004      	b.n	8006822 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800681c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	4798      	blx	r3
}
 8006822:	bf00      	nop
 8006824:	3710      	adds	r7, #16
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}

0800682a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800682a:	b580      	push	{r7, lr}
 800682c:	b084      	sub	sp, #16
 800682e:	af00      	add	r7, sp, #0
 8006830:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006836:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006838:	68f8      	ldr	r0, [r7, #12]
 800683a:	f7ff fd5d 	bl	80062f8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800683e:	bf00      	nop
 8006840:	3710      	adds	r7, #16
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}

08006846 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8006846:	b580      	push	{r7, lr}
 8006848:	b084      	sub	sp, #16
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006852:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2240      	movs	r2, #64	; 0x40
 8006858:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800685e:	f043 0204 	orr.w	r2, r3, #4
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006866:	68f8      	ldr	r0, [r7, #12]
 8006868:	f7ff fd5a 	bl	8006320 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800686c:	bf00      	nop
 800686e:	3710      	adds	r7, #16
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}

08006874 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800687c:	bf00      	nop
 800687e:	370c      	adds	r7, #12
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006888:	b480      	push	{r7}
 800688a:	b085      	sub	sp, #20
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f003 0307 	and.w	r3, r3, #7
 8006896:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006898:	4b0c      	ldr	r3, [pc, #48]	; (80068cc <__NVIC_SetPriorityGrouping+0x44>)
 800689a:	68db      	ldr	r3, [r3, #12]
 800689c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800689e:	68ba      	ldr	r2, [r7, #8]
 80068a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80068a4:	4013      	ands	r3, r2
 80068a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80068b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80068b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80068ba:	4a04      	ldr	r2, [pc, #16]	; (80068cc <__NVIC_SetPriorityGrouping+0x44>)
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	60d3      	str	r3, [r2, #12]
}
 80068c0:	bf00      	nop
 80068c2:	3714      	adds	r7, #20
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr
 80068cc:	e000ed00 	.word	0xe000ed00

080068d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80068d0:	b480      	push	{r7}
 80068d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80068d4:	4b04      	ldr	r3, [pc, #16]	; (80068e8 <__NVIC_GetPriorityGrouping+0x18>)
 80068d6:	68db      	ldr	r3, [r3, #12]
 80068d8:	0a1b      	lsrs	r3, r3, #8
 80068da:	f003 0307 	and.w	r3, r3, #7
}
 80068de:	4618      	mov	r0, r3
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr
 80068e8:	e000ed00 	.word	0xe000ed00

080068ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b083      	sub	sp, #12
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	4603      	mov	r3, r0
 80068f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80068f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	db0b      	blt.n	8006916 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80068fe:	79fb      	ldrb	r3, [r7, #7]
 8006900:	f003 021f 	and.w	r2, r3, #31
 8006904:	4907      	ldr	r1, [pc, #28]	; (8006924 <__NVIC_EnableIRQ+0x38>)
 8006906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800690a:	095b      	lsrs	r3, r3, #5
 800690c:	2001      	movs	r0, #1
 800690e:	fa00 f202 	lsl.w	r2, r0, r2
 8006912:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006916:	bf00      	nop
 8006918:	370c      	adds	r7, #12
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr
 8006922:	bf00      	nop
 8006924:	e000e100 	.word	0xe000e100

08006928 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006928:	b480      	push	{r7}
 800692a:	b083      	sub	sp, #12
 800692c:	af00      	add	r7, sp, #0
 800692e:	4603      	mov	r3, r0
 8006930:	6039      	str	r1, [r7, #0]
 8006932:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006934:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006938:	2b00      	cmp	r3, #0
 800693a:	db0a      	blt.n	8006952 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	b2da      	uxtb	r2, r3
 8006940:	490c      	ldr	r1, [pc, #48]	; (8006974 <__NVIC_SetPriority+0x4c>)
 8006942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006946:	0112      	lsls	r2, r2, #4
 8006948:	b2d2      	uxtb	r2, r2
 800694a:	440b      	add	r3, r1
 800694c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006950:	e00a      	b.n	8006968 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	b2da      	uxtb	r2, r3
 8006956:	4908      	ldr	r1, [pc, #32]	; (8006978 <__NVIC_SetPriority+0x50>)
 8006958:	79fb      	ldrb	r3, [r7, #7]
 800695a:	f003 030f 	and.w	r3, r3, #15
 800695e:	3b04      	subs	r3, #4
 8006960:	0112      	lsls	r2, r2, #4
 8006962:	b2d2      	uxtb	r2, r2
 8006964:	440b      	add	r3, r1
 8006966:	761a      	strb	r2, [r3, #24]
}
 8006968:	bf00      	nop
 800696a:	370c      	adds	r7, #12
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr
 8006974:	e000e100 	.word	0xe000e100
 8006978:	e000ed00 	.word	0xe000ed00

0800697c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800697c:	b480      	push	{r7}
 800697e:	b089      	sub	sp, #36	; 0x24
 8006980:	af00      	add	r7, sp, #0
 8006982:	60f8      	str	r0, [r7, #12]
 8006984:	60b9      	str	r1, [r7, #8]
 8006986:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f003 0307 	and.w	r3, r3, #7
 800698e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006990:	69fb      	ldr	r3, [r7, #28]
 8006992:	f1c3 0307 	rsb	r3, r3, #7
 8006996:	2b04      	cmp	r3, #4
 8006998:	bf28      	it	cs
 800699a:	2304      	movcs	r3, #4
 800699c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800699e:	69fb      	ldr	r3, [r7, #28]
 80069a0:	3304      	adds	r3, #4
 80069a2:	2b06      	cmp	r3, #6
 80069a4:	d902      	bls.n	80069ac <NVIC_EncodePriority+0x30>
 80069a6:	69fb      	ldr	r3, [r7, #28]
 80069a8:	3b03      	subs	r3, #3
 80069aa:	e000      	b.n	80069ae <NVIC_EncodePriority+0x32>
 80069ac:	2300      	movs	r3, #0
 80069ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80069b0:	f04f 32ff 	mov.w	r2, #4294967295
 80069b4:	69bb      	ldr	r3, [r7, #24]
 80069b6:	fa02 f303 	lsl.w	r3, r2, r3
 80069ba:	43da      	mvns	r2, r3
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	401a      	ands	r2, r3
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80069c4:	f04f 31ff 	mov.w	r1, #4294967295
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	fa01 f303 	lsl.w	r3, r1, r3
 80069ce:	43d9      	mvns	r1, r3
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80069d4:	4313      	orrs	r3, r2
         );
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3724      	adds	r7, #36	; 0x24
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr
	...

080069e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b082      	sub	sp, #8
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	3b01      	subs	r3, #1
 80069f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80069f4:	d301      	bcc.n	80069fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80069f6:	2301      	movs	r3, #1
 80069f8:	e00f      	b.n	8006a1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80069fa:	4a0a      	ldr	r2, [pc, #40]	; (8006a24 <SysTick_Config+0x40>)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	3b01      	subs	r3, #1
 8006a00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006a02:	210f      	movs	r1, #15
 8006a04:	f04f 30ff 	mov.w	r0, #4294967295
 8006a08:	f7ff ff8e 	bl	8006928 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006a0c:	4b05      	ldr	r3, [pc, #20]	; (8006a24 <SysTick_Config+0x40>)
 8006a0e:	2200      	movs	r2, #0
 8006a10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006a12:	4b04      	ldr	r3, [pc, #16]	; (8006a24 <SysTick_Config+0x40>)
 8006a14:	2207      	movs	r2, #7
 8006a16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006a18:	2300      	movs	r3, #0
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3708      	adds	r7, #8
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}
 8006a22:	bf00      	nop
 8006a24:	e000e010 	.word	0xe000e010

08006a28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b082      	sub	sp, #8
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f7ff ff29 	bl	8006888 <__NVIC_SetPriorityGrouping>
}
 8006a36:	bf00      	nop
 8006a38:	3708      	adds	r7, #8
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}

08006a3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006a3e:	b580      	push	{r7, lr}
 8006a40:	b086      	sub	sp, #24
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	4603      	mov	r3, r0
 8006a46:	60b9      	str	r1, [r7, #8]
 8006a48:	607a      	str	r2, [r7, #4]
 8006a4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006a50:	f7ff ff3e 	bl	80068d0 <__NVIC_GetPriorityGrouping>
 8006a54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006a56:	687a      	ldr	r2, [r7, #4]
 8006a58:	68b9      	ldr	r1, [r7, #8]
 8006a5a:	6978      	ldr	r0, [r7, #20]
 8006a5c:	f7ff ff8e 	bl	800697c <NVIC_EncodePriority>
 8006a60:	4602      	mov	r2, r0
 8006a62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a66:	4611      	mov	r1, r2
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f7ff ff5d 	bl	8006928 <__NVIC_SetPriority>
}
 8006a6e:	bf00      	nop
 8006a70:	3718      	adds	r7, #24
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}

08006a76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006a76:	b580      	push	{r7, lr}
 8006a78:	b082      	sub	sp, #8
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a84:	4618      	mov	r0, r3
 8006a86:	f7ff ff31 	bl	80068ec <__NVIC_EnableIRQ>
}
 8006a8a:	bf00      	nop
 8006a8c:	3708      	adds	r7, #8
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}

08006a92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006a92:	b580      	push	{r7, lr}
 8006a94:	b082      	sub	sp, #8
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f7ff ffa2 	bl	80069e4 <SysTick_Config>
 8006aa0:	4603      	mov	r3, r0
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3708      	adds	r7, #8
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
	...

08006aac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b086      	sub	sp, #24
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006ab8:	f7ff f970 	bl	8005d9c <HAL_GetTick>
 8006abc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d101      	bne.n	8006ac8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	e099      	b.n	8006bfc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2202      	movs	r2, #2
 8006acc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f022 0201 	bic.w	r2, r2, #1
 8006ae6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006ae8:	e00f      	b.n	8006b0a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006aea:	f7ff f957 	bl	8005d9c <HAL_GetTick>
 8006aee:	4602      	mov	r2, r0
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	1ad3      	subs	r3, r2, r3
 8006af4:	2b05      	cmp	r3, #5
 8006af6:	d908      	bls.n	8006b0a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2220      	movs	r2, #32
 8006afc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2203      	movs	r2, #3
 8006b02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006b06:	2303      	movs	r3, #3
 8006b08:	e078      	b.n	8006bfc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f003 0301 	and.w	r3, r3, #1
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d1e8      	bne.n	8006aea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006b20:	697a      	ldr	r2, [r7, #20]
 8006b22:	4b38      	ldr	r3, [pc, #224]	; (8006c04 <HAL_DMA_Init+0x158>)
 8006b24:	4013      	ands	r3, r2
 8006b26:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	685a      	ldr	r2, [r3, #4]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006b36:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	691b      	ldr	r3, [r3, #16]
 8006b3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006b42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	699b      	ldr	r3, [r3, #24]
 8006b48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006b4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6a1b      	ldr	r3, [r3, #32]
 8006b54:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006b56:	697a      	ldr	r2, [r7, #20]
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b60:	2b04      	cmp	r3, #4
 8006b62:	d107      	bne.n	8006b74 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	697a      	ldr	r2, [r7, #20]
 8006b70:	4313      	orrs	r3, r2
 8006b72:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	697a      	ldr	r2, [r7, #20]
 8006b7a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	695b      	ldr	r3, [r3, #20]
 8006b82:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	f023 0307 	bic.w	r3, r3, #7
 8006b8a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b90:	697a      	ldr	r2, [r7, #20]
 8006b92:	4313      	orrs	r3, r2
 8006b94:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9a:	2b04      	cmp	r3, #4
 8006b9c:	d117      	bne.n	8006bce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ba2:	697a      	ldr	r2, [r7, #20]
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d00e      	beq.n	8006bce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f000 fb01 	bl	80071b8 <DMA_CheckFifoParam>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d008      	beq.n	8006bce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2240      	movs	r2, #64	; 0x40
 8006bc0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006bca:	2301      	movs	r3, #1
 8006bcc:	e016      	b.n	8006bfc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	697a      	ldr	r2, [r7, #20]
 8006bd4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 fab8 	bl	800714c <DMA_CalcBaseAndBitshift>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006be4:	223f      	movs	r2, #63	; 0x3f
 8006be6:	409a      	lsls	r2, r3
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006bfa:	2300      	movs	r3, #0
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3718      	adds	r7, #24
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}
 8006c04:	f010803f 	.word	0xf010803f

08006c08 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b086      	sub	sp, #24
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	60f8      	str	r0, [r7, #12]
 8006c10:	60b9      	str	r1, [r7, #8]
 8006c12:	607a      	str	r2, [r7, #4]
 8006c14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c16:	2300      	movs	r3, #0
 8006c18:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c1e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d101      	bne.n	8006c2e <HAL_DMA_Start_IT+0x26>
 8006c2a:	2302      	movs	r3, #2
 8006c2c:	e040      	b.n	8006cb0 <HAL_DMA_Start_IT+0xa8>
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2201      	movs	r2, #1
 8006c32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	2b01      	cmp	r3, #1
 8006c40:	d12f      	bne.n	8006ca2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2202      	movs	r2, #2
 8006c46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	687a      	ldr	r2, [r7, #4]
 8006c54:	68b9      	ldr	r1, [r7, #8]
 8006c56:	68f8      	ldr	r0, [r7, #12]
 8006c58:	f000 fa4a 	bl	80070f0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c60:	223f      	movs	r2, #63	; 0x3f
 8006c62:	409a      	lsls	r2, r3
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f042 0216 	orr.w	r2, r2, #22
 8006c76:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d007      	beq.n	8006c90 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f042 0208 	orr.w	r2, r2, #8
 8006c8e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f042 0201 	orr.w	r2, r2, #1
 8006c9e:	601a      	str	r2, [r3, #0]
 8006ca0:	e005      	b.n	8006cae <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006caa:	2302      	movs	r3, #2
 8006cac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006cae:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3718      	adds	r7, #24
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}

08006cb8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cc4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006cc6:	f7ff f869 	bl	8005d9c <HAL_GetTick>
 8006cca:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	2b02      	cmp	r3, #2
 8006cd6:	d008      	beq.n	8006cea <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2280      	movs	r2, #128	; 0x80
 8006cdc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	e052      	b.n	8006d90 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f022 0216 	bic.w	r2, r2, #22
 8006cf8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	695a      	ldr	r2, [r3, #20]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d08:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d103      	bne.n	8006d1a <HAL_DMA_Abort+0x62>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d007      	beq.n	8006d2a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	681a      	ldr	r2, [r3, #0]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f022 0208 	bic.w	r2, r2, #8
 8006d28:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	681a      	ldr	r2, [r3, #0]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f022 0201 	bic.w	r2, r2, #1
 8006d38:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006d3a:	e013      	b.n	8006d64 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006d3c:	f7ff f82e 	bl	8005d9c <HAL_GetTick>
 8006d40:	4602      	mov	r2, r0
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	1ad3      	subs	r3, r2, r3
 8006d46:	2b05      	cmp	r3, #5
 8006d48:	d90c      	bls.n	8006d64 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2220      	movs	r2, #32
 8006d4e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2203      	movs	r2, #3
 8006d54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006d60:	2303      	movs	r3, #3
 8006d62:	e015      	b.n	8006d90 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f003 0301 	and.w	r3, r3, #1
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d1e4      	bne.n	8006d3c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d76:	223f      	movs	r2, #63	; 0x3f
 8006d78:	409a      	lsls	r2, r3
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2201      	movs	r2, #1
 8006d82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006d8e:	2300      	movs	r3, #0
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3710      	adds	r7, #16
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b083      	sub	sp, #12
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006da6:	b2db      	uxtb	r3, r3
 8006da8:	2b02      	cmp	r3, #2
 8006daa:	d004      	beq.n	8006db6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2280      	movs	r2, #128	; 0x80
 8006db0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	e00c      	b.n	8006dd0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2205      	movs	r2, #5
 8006dba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f022 0201 	bic.w	r2, r2, #1
 8006dcc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006dce:	2300      	movs	r3, #0
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	370c      	adds	r7, #12
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr

08006ddc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b086      	sub	sp, #24
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006de4:	2300      	movs	r3, #0
 8006de6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006de8:	4b92      	ldr	r3, [pc, #584]	; (8007034 <HAL_DMA_IRQHandler+0x258>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a92      	ldr	r2, [pc, #584]	; (8007038 <HAL_DMA_IRQHandler+0x25c>)
 8006dee:	fba2 2303 	umull	r2, r3, r2, r3
 8006df2:	0a9b      	lsrs	r3, r3, #10
 8006df4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dfa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e06:	2208      	movs	r2, #8
 8006e08:	409a      	lsls	r2, r3
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	4013      	ands	r3, r2
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d01a      	beq.n	8006e48 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f003 0304 	and.w	r3, r3, #4
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d013      	beq.n	8006e48 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	681a      	ldr	r2, [r3, #0]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f022 0204 	bic.w	r2, r2, #4
 8006e2e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e34:	2208      	movs	r2, #8
 8006e36:	409a      	lsls	r2, r3
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e40:	f043 0201 	orr.w	r2, r3, #1
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e4c:	2201      	movs	r2, #1
 8006e4e:	409a      	lsls	r2, r3
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	4013      	ands	r3, r2
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d012      	beq.n	8006e7e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	695b      	ldr	r3, [r3, #20]
 8006e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d00b      	beq.n	8006e7e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	409a      	lsls	r2, r3
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e76:	f043 0202 	orr.w	r2, r3, #2
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e82:	2204      	movs	r2, #4
 8006e84:	409a      	lsls	r2, r3
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	4013      	ands	r3, r2
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d012      	beq.n	8006eb4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f003 0302 	and.w	r3, r3, #2
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d00b      	beq.n	8006eb4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ea0:	2204      	movs	r2, #4
 8006ea2:	409a      	lsls	r2, r3
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eac:	f043 0204 	orr.w	r2, r3, #4
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006eb8:	2210      	movs	r2, #16
 8006eba:	409a      	lsls	r2, r3
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	4013      	ands	r3, r2
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d043      	beq.n	8006f4c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f003 0308 	and.w	r3, r3, #8
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d03c      	beq.n	8006f4c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ed6:	2210      	movs	r2, #16
 8006ed8:	409a      	lsls	r2, r3
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d018      	beq.n	8006f1e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d108      	bne.n	8006f0c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d024      	beq.n	8006f4c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	4798      	blx	r3
 8006f0a:	e01f      	b.n	8006f4c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d01b      	beq.n	8006f4c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	4798      	blx	r3
 8006f1c:	e016      	b.n	8006f4c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d107      	bne.n	8006f3c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f022 0208 	bic.w	r2, r2, #8
 8006f3a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d003      	beq.n	8006f4c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f50:	2220      	movs	r2, #32
 8006f52:	409a      	lsls	r2, r3
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	4013      	ands	r3, r2
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	f000 808e 	beq.w	800707a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f003 0310 	and.w	r3, r3, #16
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	f000 8086 	beq.w	800707a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f72:	2220      	movs	r2, #32
 8006f74:	409a      	lsls	r2, r3
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006f80:	b2db      	uxtb	r3, r3
 8006f82:	2b05      	cmp	r3, #5
 8006f84:	d136      	bne.n	8006ff4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	681a      	ldr	r2, [r3, #0]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f022 0216 	bic.w	r2, r2, #22
 8006f94:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	695a      	ldr	r2, [r3, #20]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006fa4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d103      	bne.n	8006fb6 <HAL_DMA_IRQHandler+0x1da>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d007      	beq.n	8006fc6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f022 0208 	bic.w	r2, r2, #8
 8006fc4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fca:	223f      	movs	r2, #63	; 0x3f
 8006fcc:	409a      	lsls	r2, r3
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d07d      	beq.n	80070e6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	4798      	blx	r3
        }
        return;
 8006ff2:	e078      	b.n	80070e6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d01c      	beq.n	800703c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800700c:	2b00      	cmp	r3, #0
 800700e:	d108      	bne.n	8007022 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007014:	2b00      	cmp	r3, #0
 8007016:	d030      	beq.n	800707a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	4798      	blx	r3
 8007020:	e02b      	b.n	800707a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007026:	2b00      	cmp	r3, #0
 8007028:	d027      	beq.n	800707a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	4798      	blx	r3
 8007032:	e022      	b.n	800707a <HAL_DMA_IRQHandler+0x29e>
 8007034:	20000068 	.word	0x20000068
 8007038:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007046:	2b00      	cmp	r3, #0
 8007048:	d10f      	bne.n	800706a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	681a      	ldr	r2, [r3, #0]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f022 0210 	bic.w	r2, r2, #16
 8007058:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2201      	movs	r2, #1
 800705e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2200      	movs	r2, #0
 8007066:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800706e:	2b00      	cmp	r3, #0
 8007070:	d003      	beq.n	800707a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800707e:	2b00      	cmp	r3, #0
 8007080:	d032      	beq.n	80070e8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007086:	f003 0301 	and.w	r3, r3, #1
 800708a:	2b00      	cmp	r3, #0
 800708c:	d022      	beq.n	80070d4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2205      	movs	r2, #5
 8007092:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f022 0201 	bic.w	r2, r2, #1
 80070a4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	3301      	adds	r3, #1
 80070aa:	60bb      	str	r3, [r7, #8]
 80070ac:	697a      	ldr	r2, [r7, #20]
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d307      	bcc.n	80070c2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f003 0301 	and.w	r3, r3, #1
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d1f2      	bne.n	80070a6 <HAL_DMA_IRQHandler+0x2ca>
 80070c0:	e000      	b.n	80070c4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80070c2:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2201      	movs	r2, #1
 80070c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2200      	movs	r2, #0
 80070d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d005      	beq.n	80070e8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	4798      	blx	r3
 80070e4:	e000      	b.n	80070e8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80070e6:	bf00      	nop
    }
  }
}
 80070e8:	3718      	adds	r7, #24
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}
 80070ee:	bf00      	nop

080070f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b085      	sub	sp, #20
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	60f8      	str	r0, [r7, #12]
 80070f8:	60b9      	str	r1, [r7, #8]
 80070fa:	607a      	str	r2, [r7, #4]
 80070fc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	681a      	ldr	r2, [r3, #0]
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800710c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	683a      	ldr	r2, [r7, #0]
 8007114:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	689b      	ldr	r3, [r3, #8]
 800711a:	2b40      	cmp	r3, #64	; 0x40
 800711c:	d108      	bne.n	8007130 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	68ba      	ldr	r2, [r7, #8]
 800712c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800712e:	e007      	b.n	8007140 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	68ba      	ldr	r2, [r7, #8]
 8007136:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	687a      	ldr	r2, [r7, #4]
 800713e:	60da      	str	r2, [r3, #12]
}
 8007140:	bf00      	nop
 8007142:	3714      	adds	r7, #20
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr

0800714c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800714c:	b480      	push	{r7}
 800714e:	b085      	sub	sp, #20
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	b2db      	uxtb	r3, r3
 800715a:	3b10      	subs	r3, #16
 800715c:	4a14      	ldr	r2, [pc, #80]	; (80071b0 <DMA_CalcBaseAndBitshift+0x64>)
 800715e:	fba2 2303 	umull	r2, r3, r2, r3
 8007162:	091b      	lsrs	r3, r3, #4
 8007164:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007166:	4a13      	ldr	r2, [pc, #76]	; (80071b4 <DMA_CalcBaseAndBitshift+0x68>)
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	4413      	add	r3, r2
 800716c:	781b      	ldrb	r3, [r3, #0]
 800716e:	461a      	mov	r2, r3
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2b03      	cmp	r3, #3
 8007178:	d909      	bls.n	800718e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007182:	f023 0303 	bic.w	r3, r3, #3
 8007186:	1d1a      	adds	r2, r3, #4
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	659a      	str	r2, [r3, #88]	; 0x58
 800718c:	e007      	b.n	800719e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007196:	f023 0303 	bic.w	r3, r3, #3
 800719a:	687a      	ldr	r2, [r7, #4]
 800719c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3714      	adds	r7, #20
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr
 80071ae:	bf00      	nop
 80071b0:	aaaaaaab 	.word	0xaaaaaaab
 80071b4:	0800fd5c 	.word	0x0800fd5c

080071b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b085      	sub	sp, #20
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071c0:	2300      	movs	r3, #0
 80071c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	699b      	ldr	r3, [r3, #24]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d11f      	bne.n	8007212 <DMA_CheckFifoParam+0x5a>
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	2b03      	cmp	r3, #3
 80071d6:	d856      	bhi.n	8007286 <DMA_CheckFifoParam+0xce>
 80071d8:	a201      	add	r2, pc, #4	; (adr r2, 80071e0 <DMA_CheckFifoParam+0x28>)
 80071da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071de:	bf00      	nop
 80071e0:	080071f1 	.word	0x080071f1
 80071e4:	08007203 	.word	0x08007203
 80071e8:	080071f1 	.word	0x080071f1
 80071ec:	08007287 	.word	0x08007287
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d046      	beq.n	800728a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80071fc:	2301      	movs	r3, #1
 80071fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007200:	e043      	b.n	800728a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007206:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800720a:	d140      	bne.n	800728e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800720c:	2301      	movs	r3, #1
 800720e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007210:	e03d      	b.n	800728e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	699b      	ldr	r3, [r3, #24]
 8007216:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800721a:	d121      	bne.n	8007260 <DMA_CheckFifoParam+0xa8>
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	2b03      	cmp	r3, #3
 8007220:	d837      	bhi.n	8007292 <DMA_CheckFifoParam+0xda>
 8007222:	a201      	add	r2, pc, #4	; (adr r2, 8007228 <DMA_CheckFifoParam+0x70>)
 8007224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007228:	08007239 	.word	0x08007239
 800722c:	0800723f 	.word	0x0800723f
 8007230:	08007239 	.word	0x08007239
 8007234:	08007251 	.word	0x08007251
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007238:	2301      	movs	r3, #1
 800723a:	73fb      	strb	r3, [r7, #15]
      break;
 800723c:	e030      	b.n	80072a0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007242:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007246:	2b00      	cmp	r3, #0
 8007248:	d025      	beq.n	8007296 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800724a:	2301      	movs	r3, #1
 800724c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800724e:	e022      	b.n	8007296 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007254:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007258:	d11f      	bne.n	800729a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800725a:	2301      	movs	r3, #1
 800725c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800725e:	e01c      	b.n	800729a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	2b02      	cmp	r3, #2
 8007264:	d903      	bls.n	800726e <DMA_CheckFifoParam+0xb6>
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	2b03      	cmp	r3, #3
 800726a:	d003      	beq.n	8007274 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800726c:	e018      	b.n	80072a0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800726e:	2301      	movs	r3, #1
 8007270:	73fb      	strb	r3, [r7, #15]
      break;
 8007272:	e015      	b.n	80072a0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007278:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800727c:	2b00      	cmp	r3, #0
 800727e:	d00e      	beq.n	800729e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007280:	2301      	movs	r3, #1
 8007282:	73fb      	strb	r3, [r7, #15]
      break;
 8007284:	e00b      	b.n	800729e <DMA_CheckFifoParam+0xe6>
      break;
 8007286:	bf00      	nop
 8007288:	e00a      	b.n	80072a0 <DMA_CheckFifoParam+0xe8>
      break;
 800728a:	bf00      	nop
 800728c:	e008      	b.n	80072a0 <DMA_CheckFifoParam+0xe8>
      break;
 800728e:	bf00      	nop
 8007290:	e006      	b.n	80072a0 <DMA_CheckFifoParam+0xe8>
      break;
 8007292:	bf00      	nop
 8007294:	e004      	b.n	80072a0 <DMA_CheckFifoParam+0xe8>
      break;
 8007296:	bf00      	nop
 8007298:	e002      	b.n	80072a0 <DMA_CheckFifoParam+0xe8>
      break;   
 800729a:	bf00      	nop
 800729c:	e000      	b.n	80072a0 <DMA_CheckFifoParam+0xe8>
      break;
 800729e:	bf00      	nop
    }
  } 
  
  return status; 
 80072a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3714      	adds	r7, #20
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr
 80072ae:	bf00      	nop

080072b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b089      	sub	sp, #36	; 0x24
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80072ba:	2300      	movs	r3, #0
 80072bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80072be:	2300      	movs	r3, #0
 80072c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80072c2:	2300      	movs	r3, #0
 80072c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80072c6:	2300      	movs	r3, #0
 80072c8:	61fb      	str	r3, [r7, #28]
 80072ca:	e159      	b.n	8007580 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80072cc:	2201      	movs	r2, #1
 80072ce:	69fb      	ldr	r3, [r7, #28]
 80072d0:	fa02 f303 	lsl.w	r3, r2, r3
 80072d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	697a      	ldr	r2, [r7, #20]
 80072dc:	4013      	ands	r3, r2
 80072de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80072e0:	693a      	ldr	r2, [r7, #16]
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	429a      	cmp	r2, r3
 80072e6:	f040 8148 	bne.w	800757a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	f003 0303 	and.w	r3, r3, #3
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d005      	beq.n	8007302 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80072fe:	2b02      	cmp	r3, #2
 8007300:	d130      	bne.n	8007364 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007308:	69fb      	ldr	r3, [r7, #28]
 800730a:	005b      	lsls	r3, r3, #1
 800730c:	2203      	movs	r2, #3
 800730e:	fa02 f303 	lsl.w	r3, r2, r3
 8007312:	43db      	mvns	r3, r3
 8007314:	69ba      	ldr	r2, [r7, #24]
 8007316:	4013      	ands	r3, r2
 8007318:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	68da      	ldr	r2, [r3, #12]
 800731e:	69fb      	ldr	r3, [r7, #28]
 8007320:	005b      	lsls	r3, r3, #1
 8007322:	fa02 f303 	lsl.w	r3, r2, r3
 8007326:	69ba      	ldr	r2, [r7, #24]
 8007328:	4313      	orrs	r3, r2
 800732a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	69ba      	ldr	r2, [r7, #24]
 8007330:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007338:	2201      	movs	r2, #1
 800733a:	69fb      	ldr	r3, [r7, #28]
 800733c:	fa02 f303 	lsl.w	r3, r2, r3
 8007340:	43db      	mvns	r3, r3
 8007342:	69ba      	ldr	r2, [r7, #24]
 8007344:	4013      	ands	r3, r2
 8007346:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	091b      	lsrs	r3, r3, #4
 800734e:	f003 0201 	and.w	r2, r3, #1
 8007352:	69fb      	ldr	r3, [r7, #28]
 8007354:	fa02 f303 	lsl.w	r3, r2, r3
 8007358:	69ba      	ldr	r2, [r7, #24]
 800735a:	4313      	orrs	r3, r2
 800735c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	69ba      	ldr	r2, [r7, #24]
 8007362:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	f003 0303 	and.w	r3, r3, #3
 800736c:	2b03      	cmp	r3, #3
 800736e:	d017      	beq.n	80073a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	68db      	ldr	r3, [r3, #12]
 8007374:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007376:	69fb      	ldr	r3, [r7, #28]
 8007378:	005b      	lsls	r3, r3, #1
 800737a:	2203      	movs	r2, #3
 800737c:	fa02 f303 	lsl.w	r3, r2, r3
 8007380:	43db      	mvns	r3, r3
 8007382:	69ba      	ldr	r2, [r7, #24]
 8007384:	4013      	ands	r3, r2
 8007386:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	689a      	ldr	r2, [r3, #8]
 800738c:	69fb      	ldr	r3, [r7, #28]
 800738e:	005b      	lsls	r3, r3, #1
 8007390:	fa02 f303 	lsl.w	r3, r2, r3
 8007394:	69ba      	ldr	r2, [r7, #24]
 8007396:	4313      	orrs	r3, r2
 8007398:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	69ba      	ldr	r2, [r7, #24]
 800739e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	f003 0303 	and.w	r3, r3, #3
 80073a8:	2b02      	cmp	r3, #2
 80073aa:	d123      	bne.n	80073f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80073ac:	69fb      	ldr	r3, [r7, #28]
 80073ae:	08da      	lsrs	r2, r3, #3
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	3208      	adds	r2, #8
 80073b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80073ba:	69fb      	ldr	r3, [r7, #28]
 80073bc:	f003 0307 	and.w	r3, r3, #7
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	220f      	movs	r2, #15
 80073c4:	fa02 f303 	lsl.w	r3, r2, r3
 80073c8:	43db      	mvns	r3, r3
 80073ca:	69ba      	ldr	r2, [r7, #24]
 80073cc:	4013      	ands	r3, r2
 80073ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	691a      	ldr	r2, [r3, #16]
 80073d4:	69fb      	ldr	r3, [r7, #28]
 80073d6:	f003 0307 	and.w	r3, r3, #7
 80073da:	009b      	lsls	r3, r3, #2
 80073dc:	fa02 f303 	lsl.w	r3, r2, r3
 80073e0:	69ba      	ldr	r2, [r7, #24]
 80073e2:	4313      	orrs	r3, r2
 80073e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80073e6:	69fb      	ldr	r3, [r7, #28]
 80073e8:	08da      	lsrs	r2, r3, #3
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	3208      	adds	r2, #8
 80073ee:	69b9      	ldr	r1, [r7, #24]
 80073f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80073fa:	69fb      	ldr	r3, [r7, #28]
 80073fc:	005b      	lsls	r3, r3, #1
 80073fe:	2203      	movs	r2, #3
 8007400:	fa02 f303 	lsl.w	r3, r2, r3
 8007404:	43db      	mvns	r3, r3
 8007406:	69ba      	ldr	r2, [r7, #24]
 8007408:	4013      	ands	r3, r2
 800740a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	f003 0203 	and.w	r2, r3, #3
 8007414:	69fb      	ldr	r3, [r7, #28]
 8007416:	005b      	lsls	r3, r3, #1
 8007418:	fa02 f303 	lsl.w	r3, r2, r3
 800741c:	69ba      	ldr	r2, [r7, #24]
 800741e:	4313      	orrs	r3, r2
 8007420:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	69ba      	ldr	r2, [r7, #24]
 8007426:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007430:	2b00      	cmp	r3, #0
 8007432:	f000 80a2 	beq.w	800757a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007436:	2300      	movs	r3, #0
 8007438:	60fb      	str	r3, [r7, #12]
 800743a:	4b57      	ldr	r3, [pc, #348]	; (8007598 <HAL_GPIO_Init+0x2e8>)
 800743c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800743e:	4a56      	ldr	r2, [pc, #344]	; (8007598 <HAL_GPIO_Init+0x2e8>)
 8007440:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007444:	6453      	str	r3, [r2, #68]	; 0x44
 8007446:	4b54      	ldr	r3, [pc, #336]	; (8007598 <HAL_GPIO_Init+0x2e8>)
 8007448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800744a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800744e:	60fb      	str	r3, [r7, #12]
 8007450:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007452:	4a52      	ldr	r2, [pc, #328]	; (800759c <HAL_GPIO_Init+0x2ec>)
 8007454:	69fb      	ldr	r3, [r7, #28]
 8007456:	089b      	lsrs	r3, r3, #2
 8007458:	3302      	adds	r3, #2
 800745a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800745e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007460:	69fb      	ldr	r3, [r7, #28]
 8007462:	f003 0303 	and.w	r3, r3, #3
 8007466:	009b      	lsls	r3, r3, #2
 8007468:	220f      	movs	r2, #15
 800746a:	fa02 f303 	lsl.w	r3, r2, r3
 800746e:	43db      	mvns	r3, r3
 8007470:	69ba      	ldr	r2, [r7, #24]
 8007472:	4013      	ands	r3, r2
 8007474:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	4a49      	ldr	r2, [pc, #292]	; (80075a0 <HAL_GPIO_Init+0x2f0>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d019      	beq.n	80074b2 <HAL_GPIO_Init+0x202>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	4a48      	ldr	r2, [pc, #288]	; (80075a4 <HAL_GPIO_Init+0x2f4>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d013      	beq.n	80074ae <HAL_GPIO_Init+0x1fe>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	4a47      	ldr	r2, [pc, #284]	; (80075a8 <HAL_GPIO_Init+0x2f8>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d00d      	beq.n	80074aa <HAL_GPIO_Init+0x1fa>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	4a46      	ldr	r2, [pc, #280]	; (80075ac <HAL_GPIO_Init+0x2fc>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d007      	beq.n	80074a6 <HAL_GPIO_Init+0x1f6>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	4a45      	ldr	r2, [pc, #276]	; (80075b0 <HAL_GPIO_Init+0x300>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d101      	bne.n	80074a2 <HAL_GPIO_Init+0x1f2>
 800749e:	2304      	movs	r3, #4
 80074a0:	e008      	b.n	80074b4 <HAL_GPIO_Init+0x204>
 80074a2:	2307      	movs	r3, #7
 80074a4:	e006      	b.n	80074b4 <HAL_GPIO_Init+0x204>
 80074a6:	2303      	movs	r3, #3
 80074a8:	e004      	b.n	80074b4 <HAL_GPIO_Init+0x204>
 80074aa:	2302      	movs	r3, #2
 80074ac:	e002      	b.n	80074b4 <HAL_GPIO_Init+0x204>
 80074ae:	2301      	movs	r3, #1
 80074b0:	e000      	b.n	80074b4 <HAL_GPIO_Init+0x204>
 80074b2:	2300      	movs	r3, #0
 80074b4:	69fa      	ldr	r2, [r7, #28]
 80074b6:	f002 0203 	and.w	r2, r2, #3
 80074ba:	0092      	lsls	r2, r2, #2
 80074bc:	4093      	lsls	r3, r2
 80074be:	69ba      	ldr	r2, [r7, #24]
 80074c0:	4313      	orrs	r3, r2
 80074c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80074c4:	4935      	ldr	r1, [pc, #212]	; (800759c <HAL_GPIO_Init+0x2ec>)
 80074c6:	69fb      	ldr	r3, [r7, #28]
 80074c8:	089b      	lsrs	r3, r3, #2
 80074ca:	3302      	adds	r3, #2
 80074cc:	69ba      	ldr	r2, [r7, #24]
 80074ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80074d2:	4b38      	ldr	r3, [pc, #224]	; (80075b4 <HAL_GPIO_Init+0x304>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	43db      	mvns	r3, r3
 80074dc:	69ba      	ldr	r2, [r7, #24]
 80074de:	4013      	ands	r3, r2
 80074e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d003      	beq.n	80074f6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80074ee:	69ba      	ldr	r2, [r7, #24]
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	4313      	orrs	r3, r2
 80074f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80074f6:	4a2f      	ldr	r2, [pc, #188]	; (80075b4 <HAL_GPIO_Init+0x304>)
 80074f8:	69bb      	ldr	r3, [r7, #24]
 80074fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80074fc:	4b2d      	ldr	r3, [pc, #180]	; (80075b4 <HAL_GPIO_Init+0x304>)
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	43db      	mvns	r3, r3
 8007506:	69ba      	ldr	r2, [r7, #24]
 8007508:	4013      	ands	r3, r2
 800750a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007514:	2b00      	cmp	r3, #0
 8007516:	d003      	beq.n	8007520 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8007518:	69ba      	ldr	r2, [r7, #24]
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	4313      	orrs	r3, r2
 800751e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007520:	4a24      	ldr	r2, [pc, #144]	; (80075b4 <HAL_GPIO_Init+0x304>)
 8007522:	69bb      	ldr	r3, [r7, #24]
 8007524:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007526:	4b23      	ldr	r3, [pc, #140]	; (80075b4 <HAL_GPIO_Init+0x304>)
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	43db      	mvns	r3, r3
 8007530:	69ba      	ldr	r2, [r7, #24]
 8007532:	4013      	ands	r3, r2
 8007534:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800753e:	2b00      	cmp	r3, #0
 8007540:	d003      	beq.n	800754a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8007542:	69ba      	ldr	r2, [r7, #24]
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	4313      	orrs	r3, r2
 8007548:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800754a:	4a1a      	ldr	r2, [pc, #104]	; (80075b4 <HAL_GPIO_Init+0x304>)
 800754c:	69bb      	ldr	r3, [r7, #24]
 800754e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007550:	4b18      	ldr	r3, [pc, #96]	; (80075b4 <HAL_GPIO_Init+0x304>)
 8007552:	68db      	ldr	r3, [r3, #12]
 8007554:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	43db      	mvns	r3, r3
 800755a:	69ba      	ldr	r2, [r7, #24]
 800755c:	4013      	ands	r3, r2
 800755e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007568:	2b00      	cmp	r3, #0
 800756a:	d003      	beq.n	8007574 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800756c:	69ba      	ldr	r2, [r7, #24]
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	4313      	orrs	r3, r2
 8007572:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007574:	4a0f      	ldr	r2, [pc, #60]	; (80075b4 <HAL_GPIO_Init+0x304>)
 8007576:	69bb      	ldr	r3, [r7, #24]
 8007578:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800757a:	69fb      	ldr	r3, [r7, #28]
 800757c:	3301      	adds	r3, #1
 800757e:	61fb      	str	r3, [r7, #28]
 8007580:	69fb      	ldr	r3, [r7, #28]
 8007582:	2b0f      	cmp	r3, #15
 8007584:	f67f aea2 	bls.w	80072cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007588:	bf00      	nop
 800758a:	bf00      	nop
 800758c:	3724      	adds	r7, #36	; 0x24
 800758e:	46bd      	mov	sp, r7
 8007590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007594:	4770      	bx	lr
 8007596:	bf00      	nop
 8007598:	40023800 	.word	0x40023800
 800759c:	40013800 	.word	0x40013800
 80075a0:	40020000 	.word	0x40020000
 80075a4:	40020400 	.word	0x40020400
 80075a8:	40020800 	.word	0x40020800
 80075ac:	40020c00 	.word	0x40020c00
 80075b0:	40021000 	.word	0x40021000
 80075b4:	40013c00 	.word	0x40013c00

080075b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b085      	sub	sp, #20
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	460b      	mov	r3, r1
 80075c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	691a      	ldr	r2, [r3, #16]
 80075c8:	887b      	ldrh	r3, [r7, #2]
 80075ca:	4013      	ands	r3, r2
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d002      	beq.n	80075d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80075d0:	2301      	movs	r3, #1
 80075d2:	73fb      	strb	r3, [r7, #15]
 80075d4:	e001      	b.n	80075da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80075d6:	2300      	movs	r3, #0
 80075d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80075da:	7bfb      	ldrb	r3, [r7, #15]
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3714      	adds	r7, #20
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr

080075e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b083      	sub	sp, #12
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	460b      	mov	r3, r1
 80075f2:	807b      	strh	r3, [r7, #2]
 80075f4:	4613      	mov	r3, r2
 80075f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80075f8:	787b      	ldrb	r3, [r7, #1]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d003      	beq.n	8007606 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80075fe:	887a      	ldrh	r2, [r7, #2]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007604:	e003      	b.n	800760e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007606:	887b      	ldrh	r3, [r7, #2]
 8007608:	041a      	lsls	r2, r3, #16
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	619a      	str	r2, [r3, #24]
}
 800760e:	bf00      	nop
 8007610:	370c      	adds	r7, #12
 8007612:	46bd      	mov	sp, r7
 8007614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007618:	4770      	bx	lr
	...

0800761c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b082      	sub	sp, #8
 8007620:	af00      	add	r7, sp, #0
 8007622:	4603      	mov	r3, r0
 8007624:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007626:	4b08      	ldr	r3, [pc, #32]	; (8007648 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007628:	695a      	ldr	r2, [r3, #20]
 800762a:	88fb      	ldrh	r3, [r7, #6]
 800762c:	4013      	ands	r3, r2
 800762e:	2b00      	cmp	r3, #0
 8007630:	d006      	beq.n	8007640 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007632:	4a05      	ldr	r2, [pc, #20]	; (8007648 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007634:	88fb      	ldrh	r3, [r7, #6]
 8007636:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007638:	88fb      	ldrh	r3, [r7, #6]
 800763a:	4618      	mov	r0, r3
 800763c:	f7fd fbb0 	bl	8004da0 <HAL_GPIO_EXTI_Callback>
  }
}
 8007640:	bf00      	nop
 8007642:	3708      	adds	r7, #8
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}
 8007648:	40013c00 	.word	0x40013c00

0800764c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b084      	sub	sp, #16
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d101      	bne.n	800765e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800765a:	2301      	movs	r3, #1
 800765c:	e12b      	b.n	80078b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007664:	b2db      	uxtb	r3, r3
 8007666:	2b00      	cmp	r3, #0
 8007668:	d106      	bne.n	8007678 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2200      	movs	r2, #0
 800766e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f7fd ff3e 	bl	80054f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2224      	movs	r2, #36	; 0x24
 800767c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f022 0201 	bic.w	r2, r2, #1
 800768e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	681a      	ldr	r2, [r3, #0]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800769e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	681a      	ldr	r2, [r3, #0]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80076ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80076b0:	f001 f864 	bl	800877c <HAL_RCC_GetPCLK1Freq>
 80076b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	4a81      	ldr	r2, [pc, #516]	; (80078c0 <HAL_I2C_Init+0x274>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d807      	bhi.n	80076d0 <HAL_I2C_Init+0x84>
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	4a80      	ldr	r2, [pc, #512]	; (80078c4 <HAL_I2C_Init+0x278>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	bf94      	ite	ls
 80076c8:	2301      	movls	r3, #1
 80076ca:	2300      	movhi	r3, #0
 80076cc:	b2db      	uxtb	r3, r3
 80076ce:	e006      	b.n	80076de <HAL_I2C_Init+0x92>
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	4a7d      	ldr	r2, [pc, #500]	; (80078c8 <HAL_I2C_Init+0x27c>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	bf94      	ite	ls
 80076d8:	2301      	movls	r3, #1
 80076da:	2300      	movhi	r3, #0
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d001      	beq.n	80076e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80076e2:	2301      	movs	r3, #1
 80076e4:	e0e7      	b.n	80078b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	4a78      	ldr	r2, [pc, #480]	; (80078cc <HAL_I2C_Init+0x280>)
 80076ea:	fba2 2303 	umull	r2, r3, r2, r3
 80076ee:	0c9b      	lsrs	r3, r3, #18
 80076f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	68ba      	ldr	r2, [r7, #8]
 8007702:	430a      	orrs	r2, r1
 8007704:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	6a1b      	ldr	r3, [r3, #32]
 800770c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	4a6a      	ldr	r2, [pc, #424]	; (80078c0 <HAL_I2C_Init+0x274>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d802      	bhi.n	8007720 <HAL_I2C_Init+0xd4>
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	3301      	adds	r3, #1
 800771e:	e009      	b.n	8007734 <HAL_I2C_Init+0xe8>
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007726:	fb02 f303 	mul.w	r3, r2, r3
 800772a:	4a69      	ldr	r2, [pc, #420]	; (80078d0 <HAL_I2C_Init+0x284>)
 800772c:	fba2 2303 	umull	r2, r3, r2, r3
 8007730:	099b      	lsrs	r3, r3, #6
 8007732:	3301      	adds	r3, #1
 8007734:	687a      	ldr	r2, [r7, #4]
 8007736:	6812      	ldr	r2, [r2, #0]
 8007738:	430b      	orrs	r3, r1
 800773a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	69db      	ldr	r3, [r3, #28]
 8007742:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007746:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	495c      	ldr	r1, [pc, #368]	; (80078c0 <HAL_I2C_Init+0x274>)
 8007750:	428b      	cmp	r3, r1
 8007752:	d819      	bhi.n	8007788 <HAL_I2C_Init+0x13c>
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	1e59      	subs	r1, r3, #1
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	005b      	lsls	r3, r3, #1
 800775e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007762:	1c59      	adds	r1, r3, #1
 8007764:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007768:	400b      	ands	r3, r1
 800776a:	2b00      	cmp	r3, #0
 800776c:	d00a      	beq.n	8007784 <HAL_I2C_Init+0x138>
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	1e59      	subs	r1, r3, #1
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	005b      	lsls	r3, r3, #1
 8007778:	fbb1 f3f3 	udiv	r3, r1, r3
 800777c:	3301      	adds	r3, #1
 800777e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007782:	e051      	b.n	8007828 <HAL_I2C_Init+0x1dc>
 8007784:	2304      	movs	r3, #4
 8007786:	e04f      	b.n	8007828 <HAL_I2C_Init+0x1dc>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d111      	bne.n	80077b4 <HAL_I2C_Init+0x168>
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	1e58      	subs	r0, r3, #1
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6859      	ldr	r1, [r3, #4]
 8007798:	460b      	mov	r3, r1
 800779a:	005b      	lsls	r3, r3, #1
 800779c:	440b      	add	r3, r1
 800779e:	fbb0 f3f3 	udiv	r3, r0, r3
 80077a2:	3301      	adds	r3, #1
 80077a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	bf0c      	ite	eq
 80077ac:	2301      	moveq	r3, #1
 80077ae:	2300      	movne	r3, #0
 80077b0:	b2db      	uxtb	r3, r3
 80077b2:	e012      	b.n	80077da <HAL_I2C_Init+0x18e>
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	1e58      	subs	r0, r3, #1
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6859      	ldr	r1, [r3, #4]
 80077bc:	460b      	mov	r3, r1
 80077be:	009b      	lsls	r3, r3, #2
 80077c0:	440b      	add	r3, r1
 80077c2:	0099      	lsls	r1, r3, #2
 80077c4:	440b      	add	r3, r1
 80077c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80077ca:	3301      	adds	r3, #1
 80077cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	bf0c      	ite	eq
 80077d4:	2301      	moveq	r3, #1
 80077d6:	2300      	movne	r3, #0
 80077d8:	b2db      	uxtb	r3, r3
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d001      	beq.n	80077e2 <HAL_I2C_Init+0x196>
 80077de:	2301      	movs	r3, #1
 80077e0:	e022      	b.n	8007828 <HAL_I2C_Init+0x1dc>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	689b      	ldr	r3, [r3, #8]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d10e      	bne.n	8007808 <HAL_I2C_Init+0x1bc>
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	1e58      	subs	r0, r3, #1
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6859      	ldr	r1, [r3, #4]
 80077f2:	460b      	mov	r3, r1
 80077f4:	005b      	lsls	r3, r3, #1
 80077f6:	440b      	add	r3, r1
 80077f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80077fc:	3301      	adds	r3, #1
 80077fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007802:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007806:	e00f      	b.n	8007828 <HAL_I2C_Init+0x1dc>
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	1e58      	subs	r0, r3, #1
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6859      	ldr	r1, [r3, #4]
 8007810:	460b      	mov	r3, r1
 8007812:	009b      	lsls	r3, r3, #2
 8007814:	440b      	add	r3, r1
 8007816:	0099      	lsls	r1, r3, #2
 8007818:	440b      	add	r3, r1
 800781a:	fbb0 f3f3 	udiv	r3, r0, r3
 800781e:	3301      	adds	r3, #1
 8007820:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007824:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007828:	6879      	ldr	r1, [r7, #4]
 800782a:	6809      	ldr	r1, [r1, #0]
 800782c:	4313      	orrs	r3, r2
 800782e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	69da      	ldr	r2, [r3, #28]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6a1b      	ldr	r3, [r3, #32]
 8007842:	431a      	orrs	r2, r3
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	430a      	orrs	r2, r1
 800784a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	689b      	ldr	r3, [r3, #8]
 8007852:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007856:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800785a:	687a      	ldr	r2, [r7, #4]
 800785c:	6911      	ldr	r1, [r2, #16]
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	68d2      	ldr	r2, [r2, #12]
 8007862:	4311      	orrs	r1, r2
 8007864:	687a      	ldr	r2, [r7, #4]
 8007866:	6812      	ldr	r2, [r2, #0]
 8007868:	430b      	orrs	r3, r1
 800786a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	68db      	ldr	r3, [r3, #12]
 8007872:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	695a      	ldr	r2, [r3, #20]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	699b      	ldr	r3, [r3, #24]
 800787e:	431a      	orrs	r2, r3
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	430a      	orrs	r2, r1
 8007886:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	681a      	ldr	r2, [r3, #0]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f042 0201 	orr.w	r2, r2, #1
 8007896:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2200      	movs	r2, #0
 800789c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2220      	movs	r2, #32
 80078a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2200      	movs	r2, #0
 80078aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2200      	movs	r2, #0
 80078b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80078b4:	2300      	movs	r3, #0
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3710      	adds	r7, #16
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}
 80078be:	bf00      	nop
 80078c0:	000186a0 	.word	0x000186a0
 80078c4:	001e847f 	.word	0x001e847f
 80078c8:	003d08ff 	.word	0x003d08ff
 80078cc:	431bde83 	.word	0x431bde83
 80078d0:	10624dd3 	.word	0x10624dd3

080078d4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b088      	sub	sp, #32
 80078d8:	af02      	add	r7, sp, #8
 80078da:	60f8      	str	r0, [r7, #12]
 80078dc:	607a      	str	r2, [r7, #4]
 80078de:	461a      	mov	r2, r3
 80078e0:	460b      	mov	r3, r1
 80078e2:	817b      	strh	r3, [r7, #10]
 80078e4:	4613      	mov	r3, r2
 80078e6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80078e8:	f7fe fa58 	bl	8005d9c <HAL_GetTick>
 80078ec:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078f4:	b2db      	uxtb	r3, r3
 80078f6:	2b20      	cmp	r3, #32
 80078f8:	f040 80e0 	bne.w	8007abc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	9300      	str	r3, [sp, #0]
 8007900:	2319      	movs	r3, #25
 8007902:	2201      	movs	r2, #1
 8007904:	4970      	ldr	r1, [pc, #448]	; (8007ac8 <HAL_I2C_Master_Transmit+0x1f4>)
 8007906:	68f8      	ldr	r0, [r7, #12]
 8007908:	f000 f964 	bl	8007bd4 <I2C_WaitOnFlagUntilTimeout>
 800790c:	4603      	mov	r3, r0
 800790e:	2b00      	cmp	r3, #0
 8007910:	d001      	beq.n	8007916 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8007912:	2302      	movs	r3, #2
 8007914:	e0d3      	b.n	8007abe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800791c:	2b01      	cmp	r3, #1
 800791e:	d101      	bne.n	8007924 <HAL_I2C_Master_Transmit+0x50>
 8007920:	2302      	movs	r3, #2
 8007922:	e0cc      	b.n	8007abe <HAL_I2C_Master_Transmit+0x1ea>
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2201      	movs	r2, #1
 8007928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f003 0301 	and.w	r3, r3, #1
 8007936:	2b01      	cmp	r3, #1
 8007938:	d007      	beq.n	800794a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	681a      	ldr	r2, [r3, #0]
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f042 0201 	orr.w	r2, r2, #1
 8007948:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	681a      	ldr	r2, [r3, #0]
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007958:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2221      	movs	r2, #33	; 0x21
 800795e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2210      	movs	r2, #16
 8007966:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	2200      	movs	r2, #0
 800796e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	687a      	ldr	r2, [r7, #4]
 8007974:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	893a      	ldrh	r2, [r7, #8]
 800797a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007980:	b29a      	uxth	r2, r3
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	4a50      	ldr	r2, [pc, #320]	; (8007acc <HAL_I2C_Master_Transmit+0x1f8>)
 800798a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800798c:	8979      	ldrh	r1, [r7, #10]
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	6a3a      	ldr	r2, [r7, #32]
 8007992:	68f8      	ldr	r0, [r7, #12]
 8007994:	f000 f89c 	bl	8007ad0 <I2C_MasterRequestWrite>
 8007998:	4603      	mov	r3, r0
 800799a:	2b00      	cmp	r3, #0
 800799c:	d001      	beq.n	80079a2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800799e:	2301      	movs	r3, #1
 80079a0:	e08d      	b.n	8007abe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80079a2:	2300      	movs	r3, #0
 80079a4:	613b      	str	r3, [r7, #16]
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	695b      	ldr	r3, [r3, #20]
 80079ac:	613b      	str	r3, [r7, #16]
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	699b      	ldr	r3, [r3, #24]
 80079b4:	613b      	str	r3, [r7, #16]
 80079b6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80079b8:	e066      	b.n	8007a88 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80079ba:	697a      	ldr	r2, [r7, #20]
 80079bc:	6a39      	ldr	r1, [r7, #32]
 80079be:	68f8      	ldr	r0, [r7, #12]
 80079c0:	f000 f9de 	bl	8007d80 <I2C_WaitOnTXEFlagUntilTimeout>
 80079c4:	4603      	mov	r3, r0
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d00d      	beq.n	80079e6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ce:	2b04      	cmp	r3, #4
 80079d0:	d107      	bne.n	80079e2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	681a      	ldr	r2, [r3, #0]
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079e0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80079e2:	2301      	movs	r3, #1
 80079e4:	e06b      	b.n	8007abe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ea:	781a      	ldrb	r2, [r3, #0]
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f6:	1c5a      	adds	r2, r3, #1
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	3b01      	subs	r3, #1
 8007a04:	b29a      	uxth	r2, r3
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a0e:	3b01      	subs	r3, #1
 8007a10:	b29a      	uxth	r2, r3
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	695b      	ldr	r3, [r3, #20]
 8007a1c:	f003 0304 	and.w	r3, r3, #4
 8007a20:	2b04      	cmp	r3, #4
 8007a22:	d11b      	bne.n	8007a5c <HAL_I2C_Master_Transmit+0x188>
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d017      	beq.n	8007a5c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a30:	781a      	ldrb	r2, [r3, #0]
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a3c:	1c5a      	adds	r2, r3, #1
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	3b01      	subs	r3, #1
 8007a4a:	b29a      	uxth	r2, r3
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a54:	3b01      	subs	r3, #1
 8007a56:	b29a      	uxth	r2, r3
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a5c:	697a      	ldr	r2, [r7, #20]
 8007a5e:	6a39      	ldr	r1, [r7, #32]
 8007a60:	68f8      	ldr	r0, [r7, #12]
 8007a62:	f000 f9ce 	bl	8007e02 <I2C_WaitOnBTFFlagUntilTimeout>
 8007a66:	4603      	mov	r3, r0
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d00d      	beq.n	8007a88 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a70:	2b04      	cmp	r3, #4
 8007a72:	d107      	bne.n	8007a84 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	681a      	ldr	r2, [r3, #0]
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a82:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007a84:	2301      	movs	r3, #1
 8007a86:	e01a      	b.n	8007abe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d194      	bne.n	80079ba <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	681a      	ldr	r2, [r3, #0]
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2220      	movs	r2, #32
 8007aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	e000      	b.n	8007abe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007abc:	2302      	movs	r3, #2
  }
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3718      	adds	r7, #24
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}
 8007ac6:	bf00      	nop
 8007ac8:	00100002 	.word	0x00100002
 8007acc:	ffff0000 	.word	0xffff0000

08007ad0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b088      	sub	sp, #32
 8007ad4:	af02      	add	r7, sp, #8
 8007ad6:	60f8      	str	r0, [r7, #12]
 8007ad8:	607a      	str	r2, [r7, #4]
 8007ada:	603b      	str	r3, [r7, #0]
 8007adc:	460b      	mov	r3, r1
 8007ade:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	2b08      	cmp	r3, #8
 8007aea:	d006      	beq.n	8007afa <I2C_MasterRequestWrite+0x2a>
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	2b01      	cmp	r3, #1
 8007af0:	d003      	beq.n	8007afa <I2C_MasterRequestWrite+0x2a>
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007af8:	d108      	bne.n	8007b0c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	681a      	ldr	r2, [r3, #0]
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b08:	601a      	str	r2, [r3, #0]
 8007b0a:	e00b      	b.n	8007b24 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b10:	2b12      	cmp	r3, #18
 8007b12:	d107      	bne.n	8007b24 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	681a      	ldr	r2, [r3, #0]
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b22:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	9300      	str	r3, [sp, #0]
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007b30:	68f8      	ldr	r0, [r7, #12]
 8007b32:	f000 f84f 	bl	8007bd4 <I2C_WaitOnFlagUntilTimeout>
 8007b36:	4603      	mov	r3, r0
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d00d      	beq.n	8007b58 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b4a:	d103      	bne.n	8007b54 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b52:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007b54:	2303      	movs	r3, #3
 8007b56:	e035      	b.n	8007bc4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	691b      	ldr	r3, [r3, #16]
 8007b5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b60:	d108      	bne.n	8007b74 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007b62:	897b      	ldrh	r3, [r7, #10]
 8007b64:	b2db      	uxtb	r3, r3
 8007b66:	461a      	mov	r2, r3
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007b70:	611a      	str	r2, [r3, #16]
 8007b72:	e01b      	b.n	8007bac <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007b74:	897b      	ldrh	r3, [r7, #10]
 8007b76:	11db      	asrs	r3, r3, #7
 8007b78:	b2db      	uxtb	r3, r3
 8007b7a:	f003 0306 	and.w	r3, r3, #6
 8007b7e:	b2db      	uxtb	r3, r3
 8007b80:	f063 030f 	orn	r3, r3, #15
 8007b84:	b2da      	uxtb	r2, r3
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	687a      	ldr	r2, [r7, #4]
 8007b90:	490e      	ldr	r1, [pc, #56]	; (8007bcc <I2C_MasterRequestWrite+0xfc>)
 8007b92:	68f8      	ldr	r0, [r7, #12]
 8007b94:	f000 f875 	bl	8007c82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d001      	beq.n	8007ba2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	e010      	b.n	8007bc4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007ba2:	897b      	ldrh	r3, [r7, #10]
 8007ba4:	b2da      	uxtb	r2, r3
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	687a      	ldr	r2, [r7, #4]
 8007bb0:	4907      	ldr	r1, [pc, #28]	; (8007bd0 <I2C_MasterRequestWrite+0x100>)
 8007bb2:	68f8      	ldr	r0, [r7, #12]
 8007bb4:	f000 f865 	bl	8007c82 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d001      	beq.n	8007bc2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	e000      	b.n	8007bc4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007bc2:	2300      	movs	r3, #0
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3718      	adds	r7, #24
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}
 8007bcc:	00010008 	.word	0x00010008
 8007bd0:	00010002 	.word	0x00010002

08007bd4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b084      	sub	sp, #16
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	60f8      	str	r0, [r7, #12]
 8007bdc:	60b9      	str	r1, [r7, #8]
 8007bde:	603b      	str	r3, [r7, #0]
 8007be0:	4613      	mov	r3, r2
 8007be2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007be4:	e025      	b.n	8007c32 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bec:	d021      	beq.n	8007c32 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bee:	f7fe f8d5 	bl	8005d9c <HAL_GetTick>
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	69bb      	ldr	r3, [r7, #24]
 8007bf6:	1ad3      	subs	r3, r2, r3
 8007bf8:	683a      	ldr	r2, [r7, #0]
 8007bfa:	429a      	cmp	r2, r3
 8007bfc:	d302      	bcc.n	8007c04 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d116      	bne.n	8007c32 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	2200      	movs	r2, #0
 8007c08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2220      	movs	r2, #32
 8007c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	2200      	movs	r2, #0
 8007c16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c1e:	f043 0220 	orr.w	r2, r3, #32
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007c2e:	2301      	movs	r3, #1
 8007c30:	e023      	b.n	8007c7a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	0c1b      	lsrs	r3, r3, #16
 8007c36:	b2db      	uxtb	r3, r3
 8007c38:	2b01      	cmp	r3, #1
 8007c3a:	d10d      	bne.n	8007c58 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	695b      	ldr	r3, [r3, #20]
 8007c42:	43da      	mvns	r2, r3
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	4013      	ands	r3, r2
 8007c48:	b29b      	uxth	r3, r3
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	bf0c      	ite	eq
 8007c4e:	2301      	moveq	r3, #1
 8007c50:	2300      	movne	r3, #0
 8007c52:	b2db      	uxtb	r3, r3
 8007c54:	461a      	mov	r2, r3
 8007c56:	e00c      	b.n	8007c72 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	699b      	ldr	r3, [r3, #24]
 8007c5e:	43da      	mvns	r2, r3
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	4013      	ands	r3, r2
 8007c64:	b29b      	uxth	r3, r3
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	bf0c      	ite	eq
 8007c6a:	2301      	moveq	r3, #1
 8007c6c:	2300      	movne	r3, #0
 8007c6e:	b2db      	uxtb	r3, r3
 8007c70:	461a      	mov	r2, r3
 8007c72:	79fb      	ldrb	r3, [r7, #7]
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d0b6      	beq.n	8007be6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007c78:	2300      	movs	r3, #0
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3710      	adds	r7, #16
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}

08007c82 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007c82:	b580      	push	{r7, lr}
 8007c84:	b084      	sub	sp, #16
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	60f8      	str	r0, [r7, #12]
 8007c8a:	60b9      	str	r1, [r7, #8]
 8007c8c:	607a      	str	r2, [r7, #4]
 8007c8e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007c90:	e051      	b.n	8007d36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	695b      	ldr	r3, [r3, #20]
 8007c98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ca0:	d123      	bne.n	8007cea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	681a      	ldr	r2, [r3, #0]
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007cb0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007cba:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	2220      	movs	r2, #32
 8007cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cd6:	f043 0204 	orr.w	r2, r3, #4
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	e046      	b.n	8007d78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cf0:	d021      	beq.n	8007d36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cf2:	f7fe f853 	bl	8005d9c <HAL_GetTick>
 8007cf6:	4602      	mov	r2, r0
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	1ad3      	subs	r3, r2, r3
 8007cfc:	687a      	ldr	r2, [r7, #4]
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	d302      	bcc.n	8007d08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d116      	bne.n	8007d36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2220      	movs	r2, #32
 8007d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d22:	f043 0220 	orr.w	r2, r3, #32
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007d32:	2301      	movs	r3, #1
 8007d34:	e020      	b.n	8007d78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	0c1b      	lsrs	r3, r3, #16
 8007d3a:	b2db      	uxtb	r3, r3
 8007d3c:	2b01      	cmp	r3, #1
 8007d3e:	d10c      	bne.n	8007d5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	695b      	ldr	r3, [r3, #20]
 8007d46:	43da      	mvns	r2, r3
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	4013      	ands	r3, r2
 8007d4c:	b29b      	uxth	r3, r3
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	bf14      	ite	ne
 8007d52:	2301      	movne	r3, #1
 8007d54:	2300      	moveq	r3, #0
 8007d56:	b2db      	uxtb	r3, r3
 8007d58:	e00b      	b.n	8007d72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	699b      	ldr	r3, [r3, #24]
 8007d60:	43da      	mvns	r2, r3
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	4013      	ands	r3, r2
 8007d66:	b29b      	uxth	r3, r3
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	bf14      	ite	ne
 8007d6c:	2301      	movne	r3, #1
 8007d6e:	2300      	moveq	r3, #0
 8007d70:	b2db      	uxtb	r3, r3
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d18d      	bne.n	8007c92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007d76:	2300      	movs	r3, #0
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3710      	adds	r7, #16
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}

08007d80 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	60f8      	str	r0, [r7, #12]
 8007d88:	60b9      	str	r1, [r7, #8]
 8007d8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007d8c:	e02d      	b.n	8007dea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007d8e:	68f8      	ldr	r0, [r7, #12]
 8007d90:	f000 f878 	bl	8007e84 <I2C_IsAcknowledgeFailed>
 8007d94:	4603      	mov	r3, r0
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d001      	beq.n	8007d9e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	e02d      	b.n	8007dfa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007da4:	d021      	beq.n	8007dea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007da6:	f7fd fff9 	bl	8005d9c <HAL_GetTick>
 8007daa:	4602      	mov	r2, r0
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	1ad3      	subs	r3, r2, r3
 8007db0:	68ba      	ldr	r2, [r7, #8]
 8007db2:	429a      	cmp	r2, r3
 8007db4:	d302      	bcc.n	8007dbc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d116      	bne.n	8007dea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	2220      	movs	r2, #32
 8007dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dd6:	f043 0220 	orr.w	r2, r3, #32
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2200      	movs	r2, #0
 8007de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007de6:	2301      	movs	r3, #1
 8007de8:	e007      	b.n	8007dfa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	695b      	ldr	r3, [r3, #20]
 8007df0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007df4:	2b80      	cmp	r3, #128	; 0x80
 8007df6:	d1ca      	bne.n	8007d8e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007df8:	2300      	movs	r3, #0
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3710      	adds	r7, #16
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}

08007e02 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007e02:	b580      	push	{r7, lr}
 8007e04:	b084      	sub	sp, #16
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	60f8      	str	r0, [r7, #12]
 8007e0a:	60b9      	str	r1, [r7, #8]
 8007e0c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007e0e:	e02d      	b.n	8007e6c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007e10:	68f8      	ldr	r0, [r7, #12]
 8007e12:	f000 f837 	bl	8007e84 <I2C_IsAcknowledgeFailed>
 8007e16:	4603      	mov	r3, r0
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d001      	beq.n	8007e20 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	e02d      	b.n	8007e7c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e26:	d021      	beq.n	8007e6c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e28:	f7fd ffb8 	bl	8005d9c <HAL_GetTick>
 8007e2c:	4602      	mov	r2, r0
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	1ad3      	subs	r3, r2, r3
 8007e32:	68ba      	ldr	r2, [r7, #8]
 8007e34:	429a      	cmp	r2, r3
 8007e36:	d302      	bcc.n	8007e3e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d116      	bne.n	8007e6c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2200      	movs	r2, #0
 8007e42:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2220      	movs	r2, #32
 8007e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e58:	f043 0220 	orr.w	r2, r3, #32
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2200      	movs	r2, #0
 8007e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007e68:	2301      	movs	r3, #1
 8007e6a:	e007      	b.n	8007e7c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	695b      	ldr	r3, [r3, #20]
 8007e72:	f003 0304 	and.w	r3, r3, #4
 8007e76:	2b04      	cmp	r3, #4
 8007e78:	d1ca      	bne.n	8007e10 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007e7a:	2300      	movs	r3, #0
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3710      	adds	r7, #16
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}

08007e84 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b083      	sub	sp, #12
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	695b      	ldr	r3, [r3, #20]
 8007e92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e9a:	d11b      	bne.n	8007ed4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007ea4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2220      	movs	r2, #32
 8007eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ec0:	f043 0204 	orr.w	r2, r3, #4
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	e000      	b.n	8007ed6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007ed4:	2300      	movs	r3, #0
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	370c      	adds	r7, #12
 8007eda:	46bd      	mov	sp, r7
 8007edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee0:	4770      	bx	lr
	...

08007ee4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b086      	sub	sp, #24
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d101      	bne.n	8007ef6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	e264      	b.n	80083c0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f003 0301 	and.w	r3, r3, #1
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d075      	beq.n	8007fee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007f02:	4ba3      	ldr	r3, [pc, #652]	; (8008190 <HAL_RCC_OscConfig+0x2ac>)
 8007f04:	689b      	ldr	r3, [r3, #8]
 8007f06:	f003 030c 	and.w	r3, r3, #12
 8007f0a:	2b04      	cmp	r3, #4
 8007f0c:	d00c      	beq.n	8007f28 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007f0e:	4ba0      	ldr	r3, [pc, #640]	; (8008190 <HAL_RCC_OscConfig+0x2ac>)
 8007f10:	689b      	ldr	r3, [r3, #8]
 8007f12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007f16:	2b08      	cmp	r3, #8
 8007f18:	d112      	bne.n	8007f40 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007f1a:	4b9d      	ldr	r3, [pc, #628]	; (8008190 <HAL_RCC_OscConfig+0x2ac>)
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f26:	d10b      	bne.n	8007f40 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f28:	4b99      	ldr	r3, [pc, #612]	; (8008190 <HAL_RCC_OscConfig+0x2ac>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d05b      	beq.n	8007fec <HAL_RCC_OscConfig+0x108>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d157      	bne.n	8007fec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	e23f      	b.n	80083c0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f48:	d106      	bne.n	8007f58 <HAL_RCC_OscConfig+0x74>
 8007f4a:	4b91      	ldr	r3, [pc, #580]	; (8008190 <HAL_RCC_OscConfig+0x2ac>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4a90      	ldr	r2, [pc, #576]	; (8008190 <HAL_RCC_OscConfig+0x2ac>)
 8007f50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f54:	6013      	str	r3, [r2, #0]
 8007f56:	e01d      	b.n	8007f94 <HAL_RCC_OscConfig+0xb0>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	685b      	ldr	r3, [r3, #4]
 8007f5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007f60:	d10c      	bne.n	8007f7c <HAL_RCC_OscConfig+0x98>
 8007f62:	4b8b      	ldr	r3, [pc, #556]	; (8008190 <HAL_RCC_OscConfig+0x2ac>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a8a      	ldr	r2, [pc, #552]	; (8008190 <HAL_RCC_OscConfig+0x2ac>)
 8007f68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007f6c:	6013      	str	r3, [r2, #0]
 8007f6e:	4b88      	ldr	r3, [pc, #544]	; (8008190 <HAL_RCC_OscConfig+0x2ac>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a87      	ldr	r2, [pc, #540]	; (8008190 <HAL_RCC_OscConfig+0x2ac>)
 8007f74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f78:	6013      	str	r3, [r2, #0]
 8007f7a:	e00b      	b.n	8007f94 <HAL_RCC_OscConfig+0xb0>
 8007f7c:	4b84      	ldr	r3, [pc, #528]	; (8008190 <HAL_RCC_OscConfig+0x2ac>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4a83      	ldr	r2, [pc, #524]	; (8008190 <HAL_RCC_OscConfig+0x2ac>)
 8007f82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f86:	6013      	str	r3, [r2, #0]
 8007f88:	4b81      	ldr	r3, [pc, #516]	; (8008190 <HAL_RCC_OscConfig+0x2ac>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4a80      	ldr	r2, [pc, #512]	; (8008190 <HAL_RCC_OscConfig+0x2ac>)
 8007f8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007f92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d013      	beq.n	8007fc4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f9c:	f7fd fefe 	bl	8005d9c <HAL_GetTick>
 8007fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007fa2:	e008      	b.n	8007fb6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007fa4:	f7fd fefa 	bl	8005d9c <HAL_GetTick>
 8007fa8:	4602      	mov	r2, r0
 8007faa:	693b      	ldr	r3, [r7, #16]
 8007fac:	1ad3      	subs	r3, r2, r3
 8007fae:	2b64      	cmp	r3, #100	; 0x64
 8007fb0:	d901      	bls.n	8007fb6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007fb2:	2303      	movs	r3, #3
 8007fb4:	e204      	b.n	80083c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007fb6:	4b76      	ldr	r3, [pc, #472]	; (8008190 <HAL_RCC_OscConfig+0x2ac>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d0f0      	beq.n	8007fa4 <HAL_RCC_OscConfig+0xc0>
 8007fc2:	e014      	b.n	8007fee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007fc4:	f7fd feea 	bl	8005d9c <HAL_GetTick>
 8007fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007fca:	e008      	b.n	8007fde <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007fcc:	f7fd fee6 	bl	8005d9c <HAL_GetTick>
 8007fd0:	4602      	mov	r2, r0
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	1ad3      	subs	r3, r2, r3
 8007fd6:	2b64      	cmp	r3, #100	; 0x64
 8007fd8:	d901      	bls.n	8007fde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007fda:	2303      	movs	r3, #3
 8007fdc:	e1f0      	b.n	80083c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007fde:	4b6c      	ldr	r3, [pc, #432]	; (8008190 <HAL_RCC_OscConfig+0x2ac>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d1f0      	bne.n	8007fcc <HAL_RCC_OscConfig+0xe8>
 8007fea:	e000      	b.n	8007fee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007fec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f003 0302 	and.w	r3, r3, #2
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d063      	beq.n	80080c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007ffa:	4b65      	ldr	r3, [pc, #404]	; (8008190 <HAL_RCC_OscConfig+0x2ac>)
 8007ffc:	689b      	ldr	r3, [r3, #8]
 8007ffe:	f003 030c 	and.w	r3, r3, #12
 8008002:	2b00      	cmp	r3, #0
 8008004:	d00b      	beq.n	800801e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008006:	4b62      	ldr	r3, [pc, #392]	; (8008190 <HAL_RCC_OscConfig+0x2ac>)
 8008008:	689b      	ldr	r3, [r3, #8]
 800800a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800800e:	2b08      	cmp	r3, #8
 8008010:	d11c      	bne.n	800804c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008012:	4b5f      	ldr	r3, [pc, #380]	; (8008190 <HAL_RCC_OscConfig+0x2ac>)
 8008014:	685b      	ldr	r3, [r3, #4]
 8008016:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800801a:	2b00      	cmp	r3, #0
 800801c:	d116      	bne.n	800804c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800801e:	4b5c      	ldr	r3, [pc, #368]	; (8008190 <HAL_RCC_OscConfig+0x2ac>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f003 0302 	and.w	r3, r3, #2
 8008026:	2b00      	cmp	r3, #0
 8008028:	d005      	beq.n	8008036 <HAL_RCC_OscConfig+0x152>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	68db      	ldr	r3, [r3, #12]
 800802e:	2b01      	cmp	r3, #1
 8008030:	d001      	beq.n	8008036 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008032:	2301      	movs	r3, #1
 8008034:	e1c4      	b.n	80083c0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008036:	4b56      	ldr	r3, [pc, #344]	; (8008190 <HAL_RCC_OscConfig+0x2ac>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	691b      	ldr	r3, [r3, #16]
 8008042:	00db      	lsls	r3, r3, #3
 8008044:	4952      	ldr	r1, [pc, #328]	; (8008190 <HAL_RCC_OscConfig+0x2ac>)
 8008046:	4313      	orrs	r3, r2
 8008048:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800804a:	e03a      	b.n	80080c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	68db      	ldr	r3, [r3, #12]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d020      	beq.n	8008096 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008054:	4b4f      	ldr	r3, [pc, #316]	; (8008194 <HAL_RCC_OscConfig+0x2b0>)
 8008056:	2201      	movs	r2, #1
 8008058:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800805a:	f7fd fe9f 	bl	8005d9c <HAL_GetTick>
 800805e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008060:	e008      	b.n	8008074 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008062:	f7fd fe9b 	bl	8005d9c <HAL_GetTick>
 8008066:	4602      	mov	r2, r0
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	1ad3      	subs	r3, r2, r3
 800806c:	2b02      	cmp	r3, #2
 800806e:	d901      	bls.n	8008074 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008070:	2303      	movs	r3, #3
 8008072:	e1a5      	b.n	80083c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008074:	4b46      	ldr	r3, [pc, #280]	; (8008190 <HAL_RCC_OscConfig+0x2ac>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f003 0302 	and.w	r3, r3, #2
 800807c:	2b00      	cmp	r3, #0
 800807e:	d0f0      	beq.n	8008062 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008080:	4b43      	ldr	r3, [pc, #268]	; (8008190 <HAL_RCC_OscConfig+0x2ac>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	691b      	ldr	r3, [r3, #16]
 800808c:	00db      	lsls	r3, r3, #3
 800808e:	4940      	ldr	r1, [pc, #256]	; (8008190 <HAL_RCC_OscConfig+0x2ac>)
 8008090:	4313      	orrs	r3, r2
 8008092:	600b      	str	r3, [r1, #0]
 8008094:	e015      	b.n	80080c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008096:	4b3f      	ldr	r3, [pc, #252]	; (8008194 <HAL_RCC_OscConfig+0x2b0>)
 8008098:	2200      	movs	r2, #0
 800809a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800809c:	f7fd fe7e 	bl	8005d9c <HAL_GetTick>
 80080a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80080a2:	e008      	b.n	80080b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80080a4:	f7fd fe7a 	bl	8005d9c <HAL_GetTick>
 80080a8:	4602      	mov	r2, r0
 80080aa:	693b      	ldr	r3, [r7, #16]
 80080ac:	1ad3      	subs	r3, r2, r3
 80080ae:	2b02      	cmp	r3, #2
 80080b0:	d901      	bls.n	80080b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80080b2:	2303      	movs	r3, #3
 80080b4:	e184      	b.n	80083c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80080b6:	4b36      	ldr	r3, [pc, #216]	; (8008190 <HAL_RCC_OscConfig+0x2ac>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f003 0302 	and.w	r3, r3, #2
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d1f0      	bne.n	80080a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f003 0308 	and.w	r3, r3, #8
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d030      	beq.n	8008130 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	695b      	ldr	r3, [r3, #20]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d016      	beq.n	8008104 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80080d6:	4b30      	ldr	r3, [pc, #192]	; (8008198 <HAL_RCC_OscConfig+0x2b4>)
 80080d8:	2201      	movs	r2, #1
 80080da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080dc:	f7fd fe5e 	bl	8005d9c <HAL_GetTick>
 80080e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80080e2:	e008      	b.n	80080f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80080e4:	f7fd fe5a 	bl	8005d9c <HAL_GetTick>
 80080e8:	4602      	mov	r2, r0
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	1ad3      	subs	r3, r2, r3
 80080ee:	2b02      	cmp	r3, #2
 80080f0:	d901      	bls.n	80080f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80080f2:	2303      	movs	r3, #3
 80080f4:	e164      	b.n	80083c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80080f6:	4b26      	ldr	r3, [pc, #152]	; (8008190 <HAL_RCC_OscConfig+0x2ac>)
 80080f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080fa:	f003 0302 	and.w	r3, r3, #2
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d0f0      	beq.n	80080e4 <HAL_RCC_OscConfig+0x200>
 8008102:	e015      	b.n	8008130 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008104:	4b24      	ldr	r3, [pc, #144]	; (8008198 <HAL_RCC_OscConfig+0x2b4>)
 8008106:	2200      	movs	r2, #0
 8008108:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800810a:	f7fd fe47 	bl	8005d9c <HAL_GetTick>
 800810e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008110:	e008      	b.n	8008124 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008112:	f7fd fe43 	bl	8005d9c <HAL_GetTick>
 8008116:	4602      	mov	r2, r0
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	1ad3      	subs	r3, r2, r3
 800811c:	2b02      	cmp	r3, #2
 800811e:	d901      	bls.n	8008124 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008120:	2303      	movs	r3, #3
 8008122:	e14d      	b.n	80083c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008124:	4b1a      	ldr	r3, [pc, #104]	; (8008190 <HAL_RCC_OscConfig+0x2ac>)
 8008126:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008128:	f003 0302 	and.w	r3, r3, #2
 800812c:	2b00      	cmp	r3, #0
 800812e:	d1f0      	bne.n	8008112 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f003 0304 	and.w	r3, r3, #4
 8008138:	2b00      	cmp	r3, #0
 800813a:	f000 80a0 	beq.w	800827e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800813e:	2300      	movs	r3, #0
 8008140:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008142:	4b13      	ldr	r3, [pc, #76]	; (8008190 <HAL_RCC_OscConfig+0x2ac>)
 8008144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800814a:	2b00      	cmp	r3, #0
 800814c:	d10f      	bne.n	800816e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800814e:	2300      	movs	r3, #0
 8008150:	60bb      	str	r3, [r7, #8]
 8008152:	4b0f      	ldr	r3, [pc, #60]	; (8008190 <HAL_RCC_OscConfig+0x2ac>)
 8008154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008156:	4a0e      	ldr	r2, [pc, #56]	; (8008190 <HAL_RCC_OscConfig+0x2ac>)
 8008158:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800815c:	6413      	str	r3, [r2, #64]	; 0x40
 800815e:	4b0c      	ldr	r3, [pc, #48]	; (8008190 <HAL_RCC_OscConfig+0x2ac>)
 8008160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008166:	60bb      	str	r3, [r7, #8]
 8008168:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800816a:	2301      	movs	r3, #1
 800816c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800816e:	4b0b      	ldr	r3, [pc, #44]	; (800819c <HAL_RCC_OscConfig+0x2b8>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008176:	2b00      	cmp	r3, #0
 8008178:	d121      	bne.n	80081be <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800817a:	4b08      	ldr	r3, [pc, #32]	; (800819c <HAL_RCC_OscConfig+0x2b8>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4a07      	ldr	r2, [pc, #28]	; (800819c <HAL_RCC_OscConfig+0x2b8>)
 8008180:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008184:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008186:	f7fd fe09 	bl	8005d9c <HAL_GetTick>
 800818a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800818c:	e011      	b.n	80081b2 <HAL_RCC_OscConfig+0x2ce>
 800818e:	bf00      	nop
 8008190:	40023800 	.word	0x40023800
 8008194:	42470000 	.word	0x42470000
 8008198:	42470e80 	.word	0x42470e80
 800819c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80081a0:	f7fd fdfc 	bl	8005d9c <HAL_GetTick>
 80081a4:	4602      	mov	r2, r0
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	1ad3      	subs	r3, r2, r3
 80081aa:	2b02      	cmp	r3, #2
 80081ac:	d901      	bls.n	80081b2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80081ae:	2303      	movs	r3, #3
 80081b0:	e106      	b.n	80083c0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80081b2:	4b85      	ldr	r3, [pc, #532]	; (80083c8 <HAL_RCC_OscConfig+0x4e4>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d0f0      	beq.n	80081a0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	689b      	ldr	r3, [r3, #8]
 80081c2:	2b01      	cmp	r3, #1
 80081c4:	d106      	bne.n	80081d4 <HAL_RCC_OscConfig+0x2f0>
 80081c6:	4b81      	ldr	r3, [pc, #516]	; (80083cc <HAL_RCC_OscConfig+0x4e8>)
 80081c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081ca:	4a80      	ldr	r2, [pc, #512]	; (80083cc <HAL_RCC_OscConfig+0x4e8>)
 80081cc:	f043 0301 	orr.w	r3, r3, #1
 80081d0:	6713      	str	r3, [r2, #112]	; 0x70
 80081d2:	e01c      	b.n	800820e <HAL_RCC_OscConfig+0x32a>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	689b      	ldr	r3, [r3, #8]
 80081d8:	2b05      	cmp	r3, #5
 80081da:	d10c      	bne.n	80081f6 <HAL_RCC_OscConfig+0x312>
 80081dc:	4b7b      	ldr	r3, [pc, #492]	; (80083cc <HAL_RCC_OscConfig+0x4e8>)
 80081de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081e0:	4a7a      	ldr	r2, [pc, #488]	; (80083cc <HAL_RCC_OscConfig+0x4e8>)
 80081e2:	f043 0304 	orr.w	r3, r3, #4
 80081e6:	6713      	str	r3, [r2, #112]	; 0x70
 80081e8:	4b78      	ldr	r3, [pc, #480]	; (80083cc <HAL_RCC_OscConfig+0x4e8>)
 80081ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081ec:	4a77      	ldr	r2, [pc, #476]	; (80083cc <HAL_RCC_OscConfig+0x4e8>)
 80081ee:	f043 0301 	orr.w	r3, r3, #1
 80081f2:	6713      	str	r3, [r2, #112]	; 0x70
 80081f4:	e00b      	b.n	800820e <HAL_RCC_OscConfig+0x32a>
 80081f6:	4b75      	ldr	r3, [pc, #468]	; (80083cc <HAL_RCC_OscConfig+0x4e8>)
 80081f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081fa:	4a74      	ldr	r2, [pc, #464]	; (80083cc <HAL_RCC_OscConfig+0x4e8>)
 80081fc:	f023 0301 	bic.w	r3, r3, #1
 8008200:	6713      	str	r3, [r2, #112]	; 0x70
 8008202:	4b72      	ldr	r3, [pc, #456]	; (80083cc <HAL_RCC_OscConfig+0x4e8>)
 8008204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008206:	4a71      	ldr	r2, [pc, #452]	; (80083cc <HAL_RCC_OscConfig+0x4e8>)
 8008208:	f023 0304 	bic.w	r3, r3, #4
 800820c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	689b      	ldr	r3, [r3, #8]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d015      	beq.n	8008242 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008216:	f7fd fdc1 	bl	8005d9c <HAL_GetTick>
 800821a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800821c:	e00a      	b.n	8008234 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800821e:	f7fd fdbd 	bl	8005d9c <HAL_GetTick>
 8008222:	4602      	mov	r2, r0
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	1ad3      	subs	r3, r2, r3
 8008228:	f241 3288 	movw	r2, #5000	; 0x1388
 800822c:	4293      	cmp	r3, r2
 800822e:	d901      	bls.n	8008234 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8008230:	2303      	movs	r3, #3
 8008232:	e0c5      	b.n	80083c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008234:	4b65      	ldr	r3, [pc, #404]	; (80083cc <HAL_RCC_OscConfig+0x4e8>)
 8008236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008238:	f003 0302 	and.w	r3, r3, #2
 800823c:	2b00      	cmp	r3, #0
 800823e:	d0ee      	beq.n	800821e <HAL_RCC_OscConfig+0x33a>
 8008240:	e014      	b.n	800826c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008242:	f7fd fdab 	bl	8005d9c <HAL_GetTick>
 8008246:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008248:	e00a      	b.n	8008260 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800824a:	f7fd fda7 	bl	8005d9c <HAL_GetTick>
 800824e:	4602      	mov	r2, r0
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	1ad3      	subs	r3, r2, r3
 8008254:	f241 3288 	movw	r2, #5000	; 0x1388
 8008258:	4293      	cmp	r3, r2
 800825a:	d901      	bls.n	8008260 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800825c:	2303      	movs	r3, #3
 800825e:	e0af      	b.n	80083c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008260:	4b5a      	ldr	r3, [pc, #360]	; (80083cc <HAL_RCC_OscConfig+0x4e8>)
 8008262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008264:	f003 0302 	and.w	r3, r3, #2
 8008268:	2b00      	cmp	r3, #0
 800826a:	d1ee      	bne.n	800824a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800826c:	7dfb      	ldrb	r3, [r7, #23]
 800826e:	2b01      	cmp	r3, #1
 8008270:	d105      	bne.n	800827e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008272:	4b56      	ldr	r3, [pc, #344]	; (80083cc <HAL_RCC_OscConfig+0x4e8>)
 8008274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008276:	4a55      	ldr	r2, [pc, #340]	; (80083cc <HAL_RCC_OscConfig+0x4e8>)
 8008278:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800827c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	699b      	ldr	r3, [r3, #24]
 8008282:	2b00      	cmp	r3, #0
 8008284:	f000 809b 	beq.w	80083be <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008288:	4b50      	ldr	r3, [pc, #320]	; (80083cc <HAL_RCC_OscConfig+0x4e8>)
 800828a:	689b      	ldr	r3, [r3, #8]
 800828c:	f003 030c 	and.w	r3, r3, #12
 8008290:	2b08      	cmp	r3, #8
 8008292:	d05c      	beq.n	800834e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	699b      	ldr	r3, [r3, #24]
 8008298:	2b02      	cmp	r3, #2
 800829a:	d141      	bne.n	8008320 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800829c:	4b4c      	ldr	r3, [pc, #304]	; (80083d0 <HAL_RCC_OscConfig+0x4ec>)
 800829e:	2200      	movs	r2, #0
 80082a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80082a2:	f7fd fd7b 	bl	8005d9c <HAL_GetTick>
 80082a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80082a8:	e008      	b.n	80082bc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80082aa:	f7fd fd77 	bl	8005d9c <HAL_GetTick>
 80082ae:	4602      	mov	r2, r0
 80082b0:	693b      	ldr	r3, [r7, #16]
 80082b2:	1ad3      	subs	r3, r2, r3
 80082b4:	2b02      	cmp	r3, #2
 80082b6:	d901      	bls.n	80082bc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80082b8:	2303      	movs	r3, #3
 80082ba:	e081      	b.n	80083c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80082bc:	4b43      	ldr	r3, [pc, #268]	; (80083cc <HAL_RCC_OscConfig+0x4e8>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d1f0      	bne.n	80082aa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	69da      	ldr	r2, [r3, #28]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6a1b      	ldr	r3, [r3, #32]
 80082d0:	431a      	orrs	r2, r3
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d6:	019b      	lsls	r3, r3, #6
 80082d8:	431a      	orrs	r2, r3
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082de:	085b      	lsrs	r3, r3, #1
 80082e0:	3b01      	subs	r3, #1
 80082e2:	041b      	lsls	r3, r3, #16
 80082e4:	431a      	orrs	r2, r3
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ea:	061b      	lsls	r3, r3, #24
 80082ec:	4937      	ldr	r1, [pc, #220]	; (80083cc <HAL_RCC_OscConfig+0x4e8>)
 80082ee:	4313      	orrs	r3, r2
 80082f0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80082f2:	4b37      	ldr	r3, [pc, #220]	; (80083d0 <HAL_RCC_OscConfig+0x4ec>)
 80082f4:	2201      	movs	r2, #1
 80082f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80082f8:	f7fd fd50 	bl	8005d9c <HAL_GetTick>
 80082fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80082fe:	e008      	b.n	8008312 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008300:	f7fd fd4c 	bl	8005d9c <HAL_GetTick>
 8008304:	4602      	mov	r2, r0
 8008306:	693b      	ldr	r3, [r7, #16]
 8008308:	1ad3      	subs	r3, r2, r3
 800830a:	2b02      	cmp	r3, #2
 800830c:	d901      	bls.n	8008312 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800830e:	2303      	movs	r3, #3
 8008310:	e056      	b.n	80083c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008312:	4b2e      	ldr	r3, [pc, #184]	; (80083cc <HAL_RCC_OscConfig+0x4e8>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800831a:	2b00      	cmp	r3, #0
 800831c:	d0f0      	beq.n	8008300 <HAL_RCC_OscConfig+0x41c>
 800831e:	e04e      	b.n	80083be <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008320:	4b2b      	ldr	r3, [pc, #172]	; (80083d0 <HAL_RCC_OscConfig+0x4ec>)
 8008322:	2200      	movs	r2, #0
 8008324:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008326:	f7fd fd39 	bl	8005d9c <HAL_GetTick>
 800832a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800832c:	e008      	b.n	8008340 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800832e:	f7fd fd35 	bl	8005d9c <HAL_GetTick>
 8008332:	4602      	mov	r2, r0
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	1ad3      	subs	r3, r2, r3
 8008338:	2b02      	cmp	r3, #2
 800833a:	d901      	bls.n	8008340 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800833c:	2303      	movs	r3, #3
 800833e:	e03f      	b.n	80083c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008340:	4b22      	ldr	r3, [pc, #136]	; (80083cc <HAL_RCC_OscConfig+0x4e8>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008348:	2b00      	cmp	r3, #0
 800834a:	d1f0      	bne.n	800832e <HAL_RCC_OscConfig+0x44a>
 800834c:	e037      	b.n	80083be <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	699b      	ldr	r3, [r3, #24]
 8008352:	2b01      	cmp	r3, #1
 8008354:	d101      	bne.n	800835a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8008356:	2301      	movs	r3, #1
 8008358:	e032      	b.n	80083c0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800835a:	4b1c      	ldr	r3, [pc, #112]	; (80083cc <HAL_RCC_OscConfig+0x4e8>)
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	699b      	ldr	r3, [r3, #24]
 8008364:	2b01      	cmp	r3, #1
 8008366:	d028      	beq.n	80083ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008372:	429a      	cmp	r2, r3
 8008374:	d121      	bne.n	80083ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008380:	429a      	cmp	r2, r3
 8008382:	d11a      	bne.n	80083ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008384:	68fa      	ldr	r2, [r7, #12]
 8008386:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800838a:	4013      	ands	r3, r2
 800838c:	687a      	ldr	r2, [r7, #4]
 800838e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008390:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008392:	4293      	cmp	r3, r2
 8008394:	d111      	bne.n	80083ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083a0:	085b      	lsrs	r3, r3, #1
 80083a2:	3b01      	subs	r3, #1
 80083a4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80083a6:	429a      	cmp	r2, r3
 80083a8:	d107      	bne.n	80083ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083b4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80083b6:	429a      	cmp	r2, r3
 80083b8:	d001      	beq.n	80083be <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80083ba:	2301      	movs	r3, #1
 80083bc:	e000      	b.n	80083c0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80083be:	2300      	movs	r3, #0
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	3718      	adds	r7, #24
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}
 80083c8:	40007000 	.word	0x40007000
 80083cc:	40023800 	.word	0x40023800
 80083d0:	42470060 	.word	0x42470060

080083d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b084      	sub	sp, #16
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d101      	bne.n	80083e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80083e4:	2301      	movs	r3, #1
 80083e6:	e0cc      	b.n	8008582 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80083e8:	4b68      	ldr	r3, [pc, #416]	; (800858c <HAL_RCC_ClockConfig+0x1b8>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f003 0307 	and.w	r3, r3, #7
 80083f0:	683a      	ldr	r2, [r7, #0]
 80083f2:	429a      	cmp	r2, r3
 80083f4:	d90c      	bls.n	8008410 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083f6:	4b65      	ldr	r3, [pc, #404]	; (800858c <HAL_RCC_ClockConfig+0x1b8>)
 80083f8:	683a      	ldr	r2, [r7, #0]
 80083fa:	b2d2      	uxtb	r2, r2
 80083fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80083fe:	4b63      	ldr	r3, [pc, #396]	; (800858c <HAL_RCC_ClockConfig+0x1b8>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f003 0307 	and.w	r3, r3, #7
 8008406:	683a      	ldr	r2, [r7, #0]
 8008408:	429a      	cmp	r2, r3
 800840a:	d001      	beq.n	8008410 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800840c:	2301      	movs	r3, #1
 800840e:	e0b8      	b.n	8008582 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f003 0302 	and.w	r3, r3, #2
 8008418:	2b00      	cmp	r3, #0
 800841a:	d020      	beq.n	800845e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f003 0304 	and.w	r3, r3, #4
 8008424:	2b00      	cmp	r3, #0
 8008426:	d005      	beq.n	8008434 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008428:	4b59      	ldr	r3, [pc, #356]	; (8008590 <HAL_RCC_ClockConfig+0x1bc>)
 800842a:	689b      	ldr	r3, [r3, #8]
 800842c:	4a58      	ldr	r2, [pc, #352]	; (8008590 <HAL_RCC_ClockConfig+0x1bc>)
 800842e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008432:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f003 0308 	and.w	r3, r3, #8
 800843c:	2b00      	cmp	r3, #0
 800843e:	d005      	beq.n	800844c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008440:	4b53      	ldr	r3, [pc, #332]	; (8008590 <HAL_RCC_ClockConfig+0x1bc>)
 8008442:	689b      	ldr	r3, [r3, #8]
 8008444:	4a52      	ldr	r2, [pc, #328]	; (8008590 <HAL_RCC_ClockConfig+0x1bc>)
 8008446:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800844a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800844c:	4b50      	ldr	r3, [pc, #320]	; (8008590 <HAL_RCC_ClockConfig+0x1bc>)
 800844e:	689b      	ldr	r3, [r3, #8]
 8008450:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	689b      	ldr	r3, [r3, #8]
 8008458:	494d      	ldr	r1, [pc, #308]	; (8008590 <HAL_RCC_ClockConfig+0x1bc>)
 800845a:	4313      	orrs	r3, r2
 800845c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f003 0301 	and.w	r3, r3, #1
 8008466:	2b00      	cmp	r3, #0
 8008468:	d044      	beq.n	80084f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	2b01      	cmp	r3, #1
 8008470:	d107      	bne.n	8008482 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008472:	4b47      	ldr	r3, [pc, #284]	; (8008590 <HAL_RCC_ClockConfig+0x1bc>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800847a:	2b00      	cmp	r3, #0
 800847c:	d119      	bne.n	80084b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800847e:	2301      	movs	r3, #1
 8008480:	e07f      	b.n	8008582 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	685b      	ldr	r3, [r3, #4]
 8008486:	2b02      	cmp	r3, #2
 8008488:	d003      	beq.n	8008492 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800848e:	2b03      	cmp	r3, #3
 8008490:	d107      	bne.n	80084a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008492:	4b3f      	ldr	r3, [pc, #252]	; (8008590 <HAL_RCC_ClockConfig+0x1bc>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800849a:	2b00      	cmp	r3, #0
 800849c:	d109      	bne.n	80084b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800849e:	2301      	movs	r3, #1
 80084a0:	e06f      	b.n	8008582 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80084a2:	4b3b      	ldr	r3, [pc, #236]	; (8008590 <HAL_RCC_ClockConfig+0x1bc>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f003 0302 	and.w	r3, r3, #2
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d101      	bne.n	80084b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80084ae:	2301      	movs	r3, #1
 80084b0:	e067      	b.n	8008582 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80084b2:	4b37      	ldr	r3, [pc, #220]	; (8008590 <HAL_RCC_ClockConfig+0x1bc>)
 80084b4:	689b      	ldr	r3, [r3, #8]
 80084b6:	f023 0203 	bic.w	r2, r3, #3
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	685b      	ldr	r3, [r3, #4]
 80084be:	4934      	ldr	r1, [pc, #208]	; (8008590 <HAL_RCC_ClockConfig+0x1bc>)
 80084c0:	4313      	orrs	r3, r2
 80084c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80084c4:	f7fd fc6a 	bl	8005d9c <HAL_GetTick>
 80084c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80084ca:	e00a      	b.n	80084e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80084cc:	f7fd fc66 	bl	8005d9c <HAL_GetTick>
 80084d0:	4602      	mov	r2, r0
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	1ad3      	subs	r3, r2, r3
 80084d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80084da:	4293      	cmp	r3, r2
 80084dc:	d901      	bls.n	80084e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80084de:	2303      	movs	r3, #3
 80084e0:	e04f      	b.n	8008582 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80084e2:	4b2b      	ldr	r3, [pc, #172]	; (8008590 <HAL_RCC_ClockConfig+0x1bc>)
 80084e4:	689b      	ldr	r3, [r3, #8]
 80084e6:	f003 020c 	and.w	r2, r3, #12
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	685b      	ldr	r3, [r3, #4]
 80084ee:	009b      	lsls	r3, r3, #2
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d1eb      	bne.n	80084cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80084f4:	4b25      	ldr	r3, [pc, #148]	; (800858c <HAL_RCC_ClockConfig+0x1b8>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f003 0307 	and.w	r3, r3, #7
 80084fc:	683a      	ldr	r2, [r7, #0]
 80084fe:	429a      	cmp	r2, r3
 8008500:	d20c      	bcs.n	800851c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008502:	4b22      	ldr	r3, [pc, #136]	; (800858c <HAL_RCC_ClockConfig+0x1b8>)
 8008504:	683a      	ldr	r2, [r7, #0]
 8008506:	b2d2      	uxtb	r2, r2
 8008508:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800850a:	4b20      	ldr	r3, [pc, #128]	; (800858c <HAL_RCC_ClockConfig+0x1b8>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f003 0307 	and.w	r3, r3, #7
 8008512:	683a      	ldr	r2, [r7, #0]
 8008514:	429a      	cmp	r2, r3
 8008516:	d001      	beq.n	800851c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008518:	2301      	movs	r3, #1
 800851a:	e032      	b.n	8008582 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f003 0304 	and.w	r3, r3, #4
 8008524:	2b00      	cmp	r3, #0
 8008526:	d008      	beq.n	800853a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008528:	4b19      	ldr	r3, [pc, #100]	; (8008590 <HAL_RCC_ClockConfig+0x1bc>)
 800852a:	689b      	ldr	r3, [r3, #8]
 800852c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	68db      	ldr	r3, [r3, #12]
 8008534:	4916      	ldr	r1, [pc, #88]	; (8008590 <HAL_RCC_ClockConfig+0x1bc>)
 8008536:	4313      	orrs	r3, r2
 8008538:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f003 0308 	and.w	r3, r3, #8
 8008542:	2b00      	cmp	r3, #0
 8008544:	d009      	beq.n	800855a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008546:	4b12      	ldr	r3, [pc, #72]	; (8008590 <HAL_RCC_ClockConfig+0x1bc>)
 8008548:	689b      	ldr	r3, [r3, #8]
 800854a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	691b      	ldr	r3, [r3, #16]
 8008552:	00db      	lsls	r3, r3, #3
 8008554:	490e      	ldr	r1, [pc, #56]	; (8008590 <HAL_RCC_ClockConfig+0x1bc>)
 8008556:	4313      	orrs	r3, r2
 8008558:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800855a:	f000 f821 	bl	80085a0 <HAL_RCC_GetSysClockFreq>
 800855e:	4602      	mov	r2, r0
 8008560:	4b0b      	ldr	r3, [pc, #44]	; (8008590 <HAL_RCC_ClockConfig+0x1bc>)
 8008562:	689b      	ldr	r3, [r3, #8]
 8008564:	091b      	lsrs	r3, r3, #4
 8008566:	f003 030f 	and.w	r3, r3, #15
 800856a:	490a      	ldr	r1, [pc, #40]	; (8008594 <HAL_RCC_ClockConfig+0x1c0>)
 800856c:	5ccb      	ldrb	r3, [r1, r3]
 800856e:	fa22 f303 	lsr.w	r3, r2, r3
 8008572:	4a09      	ldr	r2, [pc, #36]	; (8008598 <HAL_RCC_ClockConfig+0x1c4>)
 8008574:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008576:	4b09      	ldr	r3, [pc, #36]	; (800859c <HAL_RCC_ClockConfig+0x1c8>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4618      	mov	r0, r3
 800857c:	f7fd fbca 	bl	8005d14 <HAL_InitTick>

  return HAL_OK;
 8008580:	2300      	movs	r3, #0
}
 8008582:	4618      	mov	r0, r3
 8008584:	3710      	adds	r7, #16
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}
 800858a:	bf00      	nop
 800858c:	40023c00 	.word	0x40023c00
 8008590:	40023800 	.word	0x40023800
 8008594:	0800fd44 	.word	0x0800fd44
 8008598:	20000068 	.word	0x20000068
 800859c:	2000006c 	.word	0x2000006c

080085a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80085a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80085a4:	b084      	sub	sp, #16
 80085a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80085a8:	2300      	movs	r3, #0
 80085aa:	607b      	str	r3, [r7, #4]
 80085ac:	2300      	movs	r3, #0
 80085ae:	60fb      	str	r3, [r7, #12]
 80085b0:	2300      	movs	r3, #0
 80085b2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80085b4:	2300      	movs	r3, #0
 80085b6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80085b8:	4b67      	ldr	r3, [pc, #412]	; (8008758 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80085ba:	689b      	ldr	r3, [r3, #8]
 80085bc:	f003 030c 	and.w	r3, r3, #12
 80085c0:	2b08      	cmp	r3, #8
 80085c2:	d00d      	beq.n	80085e0 <HAL_RCC_GetSysClockFreq+0x40>
 80085c4:	2b08      	cmp	r3, #8
 80085c6:	f200 80bd 	bhi.w	8008744 <HAL_RCC_GetSysClockFreq+0x1a4>
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d002      	beq.n	80085d4 <HAL_RCC_GetSysClockFreq+0x34>
 80085ce:	2b04      	cmp	r3, #4
 80085d0:	d003      	beq.n	80085da <HAL_RCC_GetSysClockFreq+0x3a>
 80085d2:	e0b7      	b.n	8008744 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80085d4:	4b61      	ldr	r3, [pc, #388]	; (800875c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80085d6:	60bb      	str	r3, [r7, #8]
       break;
 80085d8:	e0b7      	b.n	800874a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80085da:	4b61      	ldr	r3, [pc, #388]	; (8008760 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80085dc:	60bb      	str	r3, [r7, #8]
      break;
 80085de:	e0b4      	b.n	800874a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80085e0:	4b5d      	ldr	r3, [pc, #372]	; (8008758 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80085e8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80085ea:	4b5b      	ldr	r3, [pc, #364]	; (8008758 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d04d      	beq.n	8008692 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80085f6:	4b58      	ldr	r3, [pc, #352]	; (8008758 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80085f8:	685b      	ldr	r3, [r3, #4]
 80085fa:	099b      	lsrs	r3, r3, #6
 80085fc:	461a      	mov	r2, r3
 80085fe:	f04f 0300 	mov.w	r3, #0
 8008602:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008606:	f04f 0100 	mov.w	r1, #0
 800860a:	ea02 0800 	and.w	r8, r2, r0
 800860e:	ea03 0901 	and.w	r9, r3, r1
 8008612:	4640      	mov	r0, r8
 8008614:	4649      	mov	r1, r9
 8008616:	f04f 0200 	mov.w	r2, #0
 800861a:	f04f 0300 	mov.w	r3, #0
 800861e:	014b      	lsls	r3, r1, #5
 8008620:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008624:	0142      	lsls	r2, r0, #5
 8008626:	4610      	mov	r0, r2
 8008628:	4619      	mov	r1, r3
 800862a:	ebb0 0008 	subs.w	r0, r0, r8
 800862e:	eb61 0109 	sbc.w	r1, r1, r9
 8008632:	f04f 0200 	mov.w	r2, #0
 8008636:	f04f 0300 	mov.w	r3, #0
 800863a:	018b      	lsls	r3, r1, #6
 800863c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008640:	0182      	lsls	r2, r0, #6
 8008642:	1a12      	subs	r2, r2, r0
 8008644:	eb63 0301 	sbc.w	r3, r3, r1
 8008648:	f04f 0000 	mov.w	r0, #0
 800864c:	f04f 0100 	mov.w	r1, #0
 8008650:	00d9      	lsls	r1, r3, #3
 8008652:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008656:	00d0      	lsls	r0, r2, #3
 8008658:	4602      	mov	r2, r0
 800865a:	460b      	mov	r3, r1
 800865c:	eb12 0208 	adds.w	r2, r2, r8
 8008660:	eb43 0309 	adc.w	r3, r3, r9
 8008664:	f04f 0000 	mov.w	r0, #0
 8008668:	f04f 0100 	mov.w	r1, #0
 800866c:	0259      	lsls	r1, r3, #9
 800866e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8008672:	0250      	lsls	r0, r2, #9
 8008674:	4602      	mov	r2, r0
 8008676:	460b      	mov	r3, r1
 8008678:	4610      	mov	r0, r2
 800867a:	4619      	mov	r1, r3
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	461a      	mov	r2, r3
 8008680:	f04f 0300 	mov.w	r3, #0
 8008684:	f7f8 fb08 	bl	8000c98 <__aeabi_uldivmod>
 8008688:	4602      	mov	r2, r0
 800868a:	460b      	mov	r3, r1
 800868c:	4613      	mov	r3, r2
 800868e:	60fb      	str	r3, [r7, #12]
 8008690:	e04a      	b.n	8008728 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008692:	4b31      	ldr	r3, [pc, #196]	; (8008758 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008694:	685b      	ldr	r3, [r3, #4]
 8008696:	099b      	lsrs	r3, r3, #6
 8008698:	461a      	mov	r2, r3
 800869a:	f04f 0300 	mov.w	r3, #0
 800869e:	f240 10ff 	movw	r0, #511	; 0x1ff
 80086a2:	f04f 0100 	mov.w	r1, #0
 80086a6:	ea02 0400 	and.w	r4, r2, r0
 80086aa:	ea03 0501 	and.w	r5, r3, r1
 80086ae:	4620      	mov	r0, r4
 80086b0:	4629      	mov	r1, r5
 80086b2:	f04f 0200 	mov.w	r2, #0
 80086b6:	f04f 0300 	mov.w	r3, #0
 80086ba:	014b      	lsls	r3, r1, #5
 80086bc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80086c0:	0142      	lsls	r2, r0, #5
 80086c2:	4610      	mov	r0, r2
 80086c4:	4619      	mov	r1, r3
 80086c6:	1b00      	subs	r0, r0, r4
 80086c8:	eb61 0105 	sbc.w	r1, r1, r5
 80086cc:	f04f 0200 	mov.w	r2, #0
 80086d0:	f04f 0300 	mov.w	r3, #0
 80086d4:	018b      	lsls	r3, r1, #6
 80086d6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80086da:	0182      	lsls	r2, r0, #6
 80086dc:	1a12      	subs	r2, r2, r0
 80086de:	eb63 0301 	sbc.w	r3, r3, r1
 80086e2:	f04f 0000 	mov.w	r0, #0
 80086e6:	f04f 0100 	mov.w	r1, #0
 80086ea:	00d9      	lsls	r1, r3, #3
 80086ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80086f0:	00d0      	lsls	r0, r2, #3
 80086f2:	4602      	mov	r2, r0
 80086f4:	460b      	mov	r3, r1
 80086f6:	1912      	adds	r2, r2, r4
 80086f8:	eb45 0303 	adc.w	r3, r5, r3
 80086fc:	f04f 0000 	mov.w	r0, #0
 8008700:	f04f 0100 	mov.w	r1, #0
 8008704:	0299      	lsls	r1, r3, #10
 8008706:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800870a:	0290      	lsls	r0, r2, #10
 800870c:	4602      	mov	r2, r0
 800870e:	460b      	mov	r3, r1
 8008710:	4610      	mov	r0, r2
 8008712:	4619      	mov	r1, r3
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	461a      	mov	r2, r3
 8008718:	f04f 0300 	mov.w	r3, #0
 800871c:	f7f8 fabc 	bl	8000c98 <__aeabi_uldivmod>
 8008720:	4602      	mov	r2, r0
 8008722:	460b      	mov	r3, r1
 8008724:	4613      	mov	r3, r2
 8008726:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008728:	4b0b      	ldr	r3, [pc, #44]	; (8008758 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800872a:	685b      	ldr	r3, [r3, #4]
 800872c:	0c1b      	lsrs	r3, r3, #16
 800872e:	f003 0303 	and.w	r3, r3, #3
 8008732:	3301      	adds	r3, #1
 8008734:	005b      	lsls	r3, r3, #1
 8008736:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008738:	68fa      	ldr	r2, [r7, #12]
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008740:	60bb      	str	r3, [r7, #8]
      break;
 8008742:	e002      	b.n	800874a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008744:	4b05      	ldr	r3, [pc, #20]	; (800875c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008746:	60bb      	str	r3, [r7, #8]
      break;
 8008748:	bf00      	nop
    }
  }
  return sysclockfreq;
 800874a:	68bb      	ldr	r3, [r7, #8]
}
 800874c:	4618      	mov	r0, r3
 800874e:	3710      	adds	r7, #16
 8008750:	46bd      	mov	sp, r7
 8008752:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008756:	bf00      	nop
 8008758:	40023800 	.word	0x40023800
 800875c:	00f42400 	.word	0x00f42400
 8008760:	007a1200 	.word	0x007a1200

08008764 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008764:	b480      	push	{r7}
 8008766:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008768:	4b03      	ldr	r3, [pc, #12]	; (8008778 <HAL_RCC_GetHCLKFreq+0x14>)
 800876a:	681b      	ldr	r3, [r3, #0]
}
 800876c:	4618      	mov	r0, r3
 800876e:	46bd      	mov	sp, r7
 8008770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008774:	4770      	bx	lr
 8008776:	bf00      	nop
 8008778:	20000068 	.word	0x20000068

0800877c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008780:	f7ff fff0 	bl	8008764 <HAL_RCC_GetHCLKFreq>
 8008784:	4602      	mov	r2, r0
 8008786:	4b05      	ldr	r3, [pc, #20]	; (800879c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008788:	689b      	ldr	r3, [r3, #8]
 800878a:	0a9b      	lsrs	r3, r3, #10
 800878c:	f003 0307 	and.w	r3, r3, #7
 8008790:	4903      	ldr	r1, [pc, #12]	; (80087a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008792:	5ccb      	ldrb	r3, [r1, r3]
 8008794:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008798:	4618      	mov	r0, r3
 800879a:	bd80      	pop	{r7, pc}
 800879c:	40023800 	.word	0x40023800
 80087a0:	0800fd54 	.word	0x0800fd54

080087a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80087a8:	f7ff ffdc 	bl	8008764 <HAL_RCC_GetHCLKFreq>
 80087ac:	4602      	mov	r2, r0
 80087ae:	4b05      	ldr	r3, [pc, #20]	; (80087c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80087b0:	689b      	ldr	r3, [r3, #8]
 80087b2:	0b5b      	lsrs	r3, r3, #13
 80087b4:	f003 0307 	and.w	r3, r3, #7
 80087b8:	4903      	ldr	r1, [pc, #12]	; (80087c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80087ba:	5ccb      	ldrb	r3, [r1, r3]
 80087bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	bd80      	pop	{r7, pc}
 80087c4:	40023800 	.word	0x40023800
 80087c8:	0800fd54 	.word	0x0800fd54

080087cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b082      	sub	sp, #8
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d101      	bne.n	80087de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80087da:	2301      	movs	r3, #1
 80087dc:	e07b      	b.n	80088d6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d108      	bne.n	80087f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	685b      	ldr	r3, [r3, #4]
 80087ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80087ee:	d009      	beq.n	8008804 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2200      	movs	r2, #0
 80087f4:	61da      	str	r2, [r3, #28]
 80087f6:	e005      	b.n	8008804 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2200      	movs	r2, #0
 80087fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2200      	movs	r2, #0
 8008802:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2200      	movs	r2, #0
 8008808:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008810:	b2db      	uxtb	r3, r3
 8008812:	2b00      	cmp	r3, #0
 8008814:	d106      	bne.n	8008824 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2200      	movs	r2, #0
 800881a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f7fc fed0 	bl	80055c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2202      	movs	r2, #2
 8008828:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	681a      	ldr	r2, [r3, #0]
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800883a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	689b      	ldr	r3, [r3, #8]
 8008848:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800884c:	431a      	orrs	r2, r3
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	68db      	ldr	r3, [r3, #12]
 8008852:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008856:	431a      	orrs	r2, r3
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	691b      	ldr	r3, [r3, #16]
 800885c:	f003 0302 	and.w	r3, r3, #2
 8008860:	431a      	orrs	r2, r3
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	695b      	ldr	r3, [r3, #20]
 8008866:	f003 0301 	and.w	r3, r3, #1
 800886a:	431a      	orrs	r2, r3
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	699b      	ldr	r3, [r3, #24]
 8008870:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008874:	431a      	orrs	r2, r3
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	69db      	ldr	r3, [r3, #28]
 800887a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800887e:	431a      	orrs	r2, r3
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6a1b      	ldr	r3, [r3, #32]
 8008884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008888:	ea42 0103 	orr.w	r1, r2, r3
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008890:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	430a      	orrs	r2, r1
 800889a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	699b      	ldr	r3, [r3, #24]
 80088a0:	0c1b      	lsrs	r3, r3, #16
 80088a2:	f003 0104 	and.w	r1, r3, #4
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088aa:	f003 0210 	and.w	r2, r3, #16
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	430a      	orrs	r2, r1
 80088b4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	69da      	ldr	r2, [r3, #28]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80088c4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2200      	movs	r2, #0
 80088ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2201      	movs	r2, #1
 80088d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80088d4:	2300      	movs	r3, #0
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3708      	adds	r7, #8
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}

080088de <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80088de:	b580      	push	{r7, lr}
 80088e0:	b08c      	sub	sp, #48	; 0x30
 80088e2:	af00      	add	r7, sp, #0
 80088e4:	60f8      	str	r0, [r7, #12]
 80088e6:	60b9      	str	r1, [r7, #8]
 80088e8:	607a      	str	r2, [r7, #4]
 80088ea:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80088ec:	2301      	movs	r3, #1
 80088ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80088f0:	2300      	movs	r3, #0
 80088f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80088fc:	2b01      	cmp	r3, #1
 80088fe:	d101      	bne.n	8008904 <HAL_SPI_TransmitReceive+0x26>
 8008900:	2302      	movs	r3, #2
 8008902:	e18a      	b.n	8008c1a <HAL_SPI_TransmitReceive+0x33c>
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2201      	movs	r2, #1
 8008908:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800890c:	f7fd fa46 	bl	8005d9c <HAL_GetTick>
 8008910:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008918:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	685b      	ldr	r3, [r3, #4]
 8008920:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008922:	887b      	ldrh	r3, [r7, #2]
 8008924:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008926:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800892a:	2b01      	cmp	r3, #1
 800892c:	d00f      	beq.n	800894e <HAL_SPI_TransmitReceive+0x70>
 800892e:	69fb      	ldr	r3, [r7, #28]
 8008930:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008934:	d107      	bne.n	8008946 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	689b      	ldr	r3, [r3, #8]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d103      	bne.n	8008946 <HAL_SPI_TransmitReceive+0x68>
 800893e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008942:	2b04      	cmp	r3, #4
 8008944:	d003      	beq.n	800894e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008946:	2302      	movs	r3, #2
 8008948:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800894c:	e15b      	b.n	8008c06 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d005      	beq.n	8008960 <HAL_SPI_TransmitReceive+0x82>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d002      	beq.n	8008960 <HAL_SPI_TransmitReceive+0x82>
 800895a:	887b      	ldrh	r3, [r7, #2]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d103      	bne.n	8008968 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008960:	2301      	movs	r3, #1
 8008962:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008966:	e14e      	b.n	8008c06 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800896e:	b2db      	uxtb	r3, r3
 8008970:	2b04      	cmp	r3, #4
 8008972:	d003      	beq.n	800897c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	2205      	movs	r2, #5
 8008978:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	2200      	movs	r2, #0
 8008980:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	687a      	ldr	r2, [r7, #4]
 8008986:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	887a      	ldrh	r2, [r7, #2]
 800898c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	887a      	ldrh	r2, [r7, #2]
 8008992:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	68ba      	ldr	r2, [r7, #8]
 8008998:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	887a      	ldrh	r2, [r7, #2]
 800899e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	887a      	ldrh	r2, [r7, #2]
 80089a4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	2200      	movs	r2, #0
 80089aa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	2200      	movs	r2, #0
 80089b0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089bc:	2b40      	cmp	r3, #64	; 0x40
 80089be:	d007      	beq.n	80089d0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	681a      	ldr	r2, [r3, #0]
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80089ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	68db      	ldr	r3, [r3, #12]
 80089d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089d8:	d178      	bne.n	8008acc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	685b      	ldr	r3, [r3, #4]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d002      	beq.n	80089e8 <HAL_SPI_TransmitReceive+0x10a>
 80089e2:	8b7b      	ldrh	r3, [r7, #26]
 80089e4:	2b01      	cmp	r3, #1
 80089e6:	d166      	bne.n	8008ab6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ec:	881a      	ldrh	r2, [r3, #0]
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089f8:	1c9a      	adds	r2, r3, #2
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a02:	b29b      	uxth	r3, r3
 8008a04:	3b01      	subs	r3, #1
 8008a06:	b29a      	uxth	r2, r3
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008a0c:	e053      	b.n	8008ab6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	689b      	ldr	r3, [r3, #8]
 8008a14:	f003 0302 	and.w	r3, r3, #2
 8008a18:	2b02      	cmp	r3, #2
 8008a1a:	d11b      	bne.n	8008a54 <HAL_SPI_TransmitReceive+0x176>
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a20:	b29b      	uxth	r3, r3
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d016      	beq.n	8008a54 <HAL_SPI_TransmitReceive+0x176>
 8008a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a28:	2b01      	cmp	r3, #1
 8008a2a:	d113      	bne.n	8008a54 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a30:	881a      	ldrh	r2, [r3, #0]
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a3c:	1c9a      	adds	r2, r3, #2
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a46:	b29b      	uxth	r3, r3
 8008a48:	3b01      	subs	r3, #1
 8008a4a:	b29a      	uxth	r2, r3
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008a50:	2300      	movs	r3, #0
 8008a52:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	689b      	ldr	r3, [r3, #8]
 8008a5a:	f003 0301 	and.w	r3, r3, #1
 8008a5e:	2b01      	cmp	r3, #1
 8008a60:	d119      	bne.n	8008a96 <HAL_SPI_TransmitReceive+0x1b8>
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a66:	b29b      	uxth	r3, r3
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d014      	beq.n	8008a96 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	68da      	ldr	r2, [r3, #12]
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a76:	b292      	uxth	r2, r2
 8008a78:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a7e:	1c9a      	adds	r2, r3, #2
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a88:	b29b      	uxth	r3, r3
 8008a8a:	3b01      	subs	r3, #1
 8008a8c:	b29a      	uxth	r2, r3
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008a92:	2301      	movs	r3, #1
 8008a94:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008a96:	f7fd f981 	bl	8005d9c <HAL_GetTick>
 8008a9a:	4602      	mov	r2, r0
 8008a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a9e:	1ad3      	subs	r3, r2, r3
 8008aa0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008aa2:	429a      	cmp	r2, r3
 8008aa4:	d807      	bhi.n	8008ab6 <HAL_SPI_TransmitReceive+0x1d8>
 8008aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aac:	d003      	beq.n	8008ab6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008aae:	2303      	movs	r3, #3
 8008ab0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008ab4:	e0a7      	b.n	8008c06 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008aba:	b29b      	uxth	r3, r3
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d1a6      	bne.n	8008a0e <HAL_SPI_TransmitReceive+0x130>
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ac4:	b29b      	uxth	r3, r3
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d1a1      	bne.n	8008a0e <HAL_SPI_TransmitReceive+0x130>
 8008aca:	e07c      	b.n	8008bc6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	685b      	ldr	r3, [r3, #4]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d002      	beq.n	8008ada <HAL_SPI_TransmitReceive+0x1fc>
 8008ad4:	8b7b      	ldrh	r3, [r7, #26]
 8008ad6:	2b01      	cmp	r3, #1
 8008ad8:	d16b      	bne.n	8008bb2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	330c      	adds	r3, #12
 8008ae4:	7812      	ldrb	r2, [r2, #0]
 8008ae6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aec:	1c5a      	adds	r2, r3, #1
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008af6:	b29b      	uxth	r3, r3
 8008af8:	3b01      	subs	r3, #1
 8008afa:	b29a      	uxth	r2, r3
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008b00:	e057      	b.n	8008bb2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	689b      	ldr	r3, [r3, #8]
 8008b08:	f003 0302 	and.w	r3, r3, #2
 8008b0c:	2b02      	cmp	r3, #2
 8008b0e:	d11c      	bne.n	8008b4a <HAL_SPI_TransmitReceive+0x26c>
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b14:	b29b      	uxth	r3, r3
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d017      	beq.n	8008b4a <HAL_SPI_TransmitReceive+0x26c>
 8008b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b1c:	2b01      	cmp	r3, #1
 8008b1e:	d114      	bne.n	8008b4a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	330c      	adds	r3, #12
 8008b2a:	7812      	ldrb	r2, [r2, #0]
 8008b2c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b32:	1c5a      	adds	r2, r3, #1
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b3c:	b29b      	uxth	r3, r3
 8008b3e:	3b01      	subs	r3, #1
 8008b40:	b29a      	uxth	r2, r3
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008b46:	2300      	movs	r3, #0
 8008b48:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	689b      	ldr	r3, [r3, #8]
 8008b50:	f003 0301 	and.w	r3, r3, #1
 8008b54:	2b01      	cmp	r3, #1
 8008b56:	d119      	bne.n	8008b8c <HAL_SPI_TransmitReceive+0x2ae>
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b5c:	b29b      	uxth	r3, r3
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d014      	beq.n	8008b8c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	68da      	ldr	r2, [r3, #12]
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b6c:	b2d2      	uxtb	r2, r2
 8008b6e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b74:	1c5a      	adds	r2, r3, #1
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b7e:	b29b      	uxth	r3, r3
 8008b80:	3b01      	subs	r3, #1
 8008b82:	b29a      	uxth	r2, r3
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008b88:	2301      	movs	r3, #1
 8008b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008b8c:	f7fd f906 	bl	8005d9c <HAL_GetTick>
 8008b90:	4602      	mov	r2, r0
 8008b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b94:	1ad3      	subs	r3, r2, r3
 8008b96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b98:	429a      	cmp	r2, r3
 8008b9a:	d803      	bhi.n	8008ba4 <HAL_SPI_TransmitReceive+0x2c6>
 8008b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ba2:	d102      	bne.n	8008baa <HAL_SPI_TransmitReceive+0x2cc>
 8008ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d103      	bne.n	8008bb2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008baa:	2303      	movs	r3, #3
 8008bac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008bb0:	e029      	b.n	8008c06 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008bb6:	b29b      	uxth	r3, r3
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d1a2      	bne.n	8008b02 <HAL_SPI_TransmitReceive+0x224>
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008bc0:	b29b      	uxth	r3, r3
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d19d      	bne.n	8008b02 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008bc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bc8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008bca:	68f8      	ldr	r0, [r7, #12]
 8008bcc:	f000 f8b2 	bl	8008d34 <SPI_EndRxTxTransaction>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d006      	beq.n	8008be4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	2220      	movs	r2, #32
 8008be0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008be2:	e010      	b.n	8008c06 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	689b      	ldr	r3, [r3, #8]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d10b      	bne.n	8008c04 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008bec:	2300      	movs	r3, #0
 8008bee:	617b      	str	r3, [r7, #20]
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	68db      	ldr	r3, [r3, #12]
 8008bf6:	617b      	str	r3, [r7, #20]
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	689b      	ldr	r3, [r3, #8]
 8008bfe:	617b      	str	r3, [r7, #20]
 8008c00:	697b      	ldr	r3, [r7, #20]
 8008c02:	e000      	b.n	8008c06 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008c04:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	2201      	movs	r2, #1
 8008c0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	2200      	movs	r2, #0
 8008c12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008c16:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3730      	adds	r7, #48	; 0x30
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}
	...

08008c24 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b088      	sub	sp, #32
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	60f8      	str	r0, [r7, #12]
 8008c2c:	60b9      	str	r1, [r7, #8]
 8008c2e:	603b      	str	r3, [r7, #0]
 8008c30:	4613      	mov	r3, r2
 8008c32:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008c34:	f7fd f8b2 	bl	8005d9c <HAL_GetTick>
 8008c38:	4602      	mov	r2, r0
 8008c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c3c:	1a9b      	subs	r3, r3, r2
 8008c3e:	683a      	ldr	r2, [r7, #0]
 8008c40:	4413      	add	r3, r2
 8008c42:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008c44:	f7fd f8aa 	bl	8005d9c <HAL_GetTick>
 8008c48:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008c4a:	4b39      	ldr	r3, [pc, #228]	; (8008d30 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	015b      	lsls	r3, r3, #5
 8008c50:	0d1b      	lsrs	r3, r3, #20
 8008c52:	69fa      	ldr	r2, [r7, #28]
 8008c54:	fb02 f303 	mul.w	r3, r2, r3
 8008c58:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008c5a:	e054      	b.n	8008d06 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c62:	d050      	beq.n	8008d06 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008c64:	f7fd f89a 	bl	8005d9c <HAL_GetTick>
 8008c68:	4602      	mov	r2, r0
 8008c6a:	69bb      	ldr	r3, [r7, #24]
 8008c6c:	1ad3      	subs	r3, r2, r3
 8008c6e:	69fa      	ldr	r2, [r7, #28]
 8008c70:	429a      	cmp	r2, r3
 8008c72:	d902      	bls.n	8008c7a <SPI_WaitFlagStateUntilTimeout+0x56>
 8008c74:	69fb      	ldr	r3, [r7, #28]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d13d      	bne.n	8008cf6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	685a      	ldr	r2, [r3, #4]
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008c88:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008c92:	d111      	bne.n	8008cb8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	689b      	ldr	r3, [r3, #8]
 8008c98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c9c:	d004      	beq.n	8008ca8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	689b      	ldr	r3, [r3, #8]
 8008ca2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ca6:	d107      	bne.n	8008cb8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	681a      	ldr	r2, [r3, #0]
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008cb6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cc0:	d10f      	bne.n	8008ce2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	681a      	ldr	r2, [r3, #0]
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008cd0:	601a      	str	r2, [r3, #0]
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	681a      	ldr	r2, [r3, #0]
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008ce0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	2201      	movs	r2, #1
 8008ce6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	2200      	movs	r2, #0
 8008cee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008cf2:	2303      	movs	r3, #3
 8008cf4:	e017      	b.n	8008d26 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d101      	bne.n	8008d00 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	3b01      	subs	r3, #1
 8008d04:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	689a      	ldr	r2, [r3, #8]
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	4013      	ands	r3, r2
 8008d10:	68ba      	ldr	r2, [r7, #8]
 8008d12:	429a      	cmp	r2, r3
 8008d14:	bf0c      	ite	eq
 8008d16:	2301      	moveq	r3, #1
 8008d18:	2300      	movne	r3, #0
 8008d1a:	b2db      	uxtb	r3, r3
 8008d1c:	461a      	mov	r2, r3
 8008d1e:	79fb      	ldrb	r3, [r7, #7]
 8008d20:	429a      	cmp	r2, r3
 8008d22:	d19b      	bne.n	8008c5c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008d24:	2300      	movs	r3, #0
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3720      	adds	r7, #32
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}
 8008d2e:	bf00      	nop
 8008d30:	20000068 	.word	0x20000068

08008d34 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b088      	sub	sp, #32
 8008d38:	af02      	add	r7, sp, #8
 8008d3a:	60f8      	str	r0, [r7, #12]
 8008d3c:	60b9      	str	r1, [r7, #8]
 8008d3e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008d40:	4b1b      	ldr	r3, [pc, #108]	; (8008db0 <SPI_EndRxTxTransaction+0x7c>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	4a1b      	ldr	r2, [pc, #108]	; (8008db4 <SPI_EndRxTxTransaction+0x80>)
 8008d46:	fba2 2303 	umull	r2, r3, r2, r3
 8008d4a:	0d5b      	lsrs	r3, r3, #21
 8008d4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008d50:	fb02 f303 	mul.w	r3, r2, r3
 8008d54:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	685b      	ldr	r3, [r3, #4]
 8008d5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008d5e:	d112      	bne.n	8008d86 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	9300      	str	r3, [sp, #0]
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	2200      	movs	r2, #0
 8008d68:	2180      	movs	r1, #128	; 0x80
 8008d6a:	68f8      	ldr	r0, [r7, #12]
 8008d6c:	f7ff ff5a 	bl	8008c24 <SPI_WaitFlagStateUntilTimeout>
 8008d70:	4603      	mov	r3, r0
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d016      	beq.n	8008da4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d7a:	f043 0220 	orr.w	r2, r3, #32
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008d82:	2303      	movs	r3, #3
 8008d84:	e00f      	b.n	8008da6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d00a      	beq.n	8008da2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008d8c:	697b      	ldr	r3, [r7, #20]
 8008d8e:	3b01      	subs	r3, #1
 8008d90:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	689b      	ldr	r3, [r3, #8]
 8008d98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d9c:	2b80      	cmp	r3, #128	; 0x80
 8008d9e:	d0f2      	beq.n	8008d86 <SPI_EndRxTxTransaction+0x52>
 8008da0:	e000      	b.n	8008da4 <SPI_EndRxTxTransaction+0x70>
        break;
 8008da2:	bf00      	nop
  }

  return HAL_OK;
 8008da4:	2300      	movs	r3, #0
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3718      	adds	r7, #24
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}
 8008dae:	bf00      	nop
 8008db0:	20000068 	.word	0x20000068
 8008db4:	165e9f81 	.word	0x165e9f81

08008db8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b082      	sub	sp, #8
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d101      	bne.n	8008dca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	e041      	b.n	8008e4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008dd0:	b2db      	uxtb	r3, r3
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d106      	bne.n	8008de4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2200      	movs	r2, #0
 8008dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f7fc fd04 	bl	80057ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2202      	movs	r2, #2
 8008de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681a      	ldr	r2, [r3, #0]
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	3304      	adds	r3, #4
 8008df4:	4619      	mov	r1, r3
 8008df6:	4610      	mov	r0, r2
 8008df8:	f000 fdcc 	bl	8009994 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2201      	movs	r2, #1
 8008e00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2201      	movs	r2, #1
 8008e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2201      	movs	r2, #1
 8008e10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2201      	movs	r2, #1
 8008e18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2201      	movs	r2, #1
 8008e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2201      	movs	r2, #1
 8008e28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2201      	movs	r2, #1
 8008e30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2201      	movs	r2, #1
 8008e38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2201      	movs	r2, #1
 8008e40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2201      	movs	r2, #1
 8008e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008e4c:	2300      	movs	r3, #0
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3708      	adds	r7, #8
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}
	...

08008e58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b085      	sub	sp, #20
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e66:	b2db      	uxtb	r3, r3
 8008e68:	2b01      	cmp	r3, #1
 8008e6a:	d001      	beq.n	8008e70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	e044      	b.n	8008efa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2202      	movs	r2, #2
 8008e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	68da      	ldr	r2, [r3, #12]
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f042 0201 	orr.w	r2, r2, #1
 8008e86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	4a1e      	ldr	r2, [pc, #120]	; (8008f08 <HAL_TIM_Base_Start_IT+0xb0>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d018      	beq.n	8008ec4 <HAL_TIM_Base_Start_IT+0x6c>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e9a:	d013      	beq.n	8008ec4 <HAL_TIM_Base_Start_IT+0x6c>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4a1a      	ldr	r2, [pc, #104]	; (8008f0c <HAL_TIM_Base_Start_IT+0xb4>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d00e      	beq.n	8008ec4 <HAL_TIM_Base_Start_IT+0x6c>
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	4a19      	ldr	r2, [pc, #100]	; (8008f10 <HAL_TIM_Base_Start_IT+0xb8>)
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d009      	beq.n	8008ec4 <HAL_TIM_Base_Start_IT+0x6c>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	4a17      	ldr	r2, [pc, #92]	; (8008f14 <HAL_TIM_Base_Start_IT+0xbc>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d004      	beq.n	8008ec4 <HAL_TIM_Base_Start_IT+0x6c>
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	4a16      	ldr	r2, [pc, #88]	; (8008f18 <HAL_TIM_Base_Start_IT+0xc0>)
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d111      	bne.n	8008ee8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	689b      	ldr	r3, [r3, #8]
 8008eca:	f003 0307 	and.w	r3, r3, #7
 8008ece:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	2b06      	cmp	r3, #6
 8008ed4:	d010      	beq.n	8008ef8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	681a      	ldr	r2, [r3, #0]
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f042 0201 	orr.w	r2, r2, #1
 8008ee4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ee6:	e007      	b.n	8008ef8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	681a      	ldr	r2, [r3, #0]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f042 0201 	orr.w	r2, r2, #1
 8008ef6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008ef8:	2300      	movs	r3, #0
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	3714      	adds	r7, #20
 8008efe:	46bd      	mov	sp, r7
 8008f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f04:	4770      	bx	lr
 8008f06:	bf00      	nop
 8008f08:	40010000 	.word	0x40010000
 8008f0c:	40000400 	.word	0x40000400
 8008f10:	40000800 	.word	0x40000800
 8008f14:	40000c00 	.word	0x40000c00
 8008f18:	40014000 	.word	0x40014000

08008f1c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b083      	sub	sp, #12
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	68da      	ldr	r2, [r3, #12]
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f022 0201 	bic.w	r2, r2, #1
 8008f32:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	6a1a      	ldr	r2, [r3, #32]
 8008f3a:	f241 1311 	movw	r3, #4369	; 0x1111
 8008f3e:	4013      	ands	r3, r2
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d10f      	bne.n	8008f64 <HAL_TIM_Base_Stop_IT+0x48>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	6a1a      	ldr	r2, [r3, #32]
 8008f4a:	f240 4344 	movw	r3, #1092	; 0x444
 8008f4e:	4013      	ands	r3, r2
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d107      	bne.n	8008f64 <HAL_TIM_Base_Stop_IT+0x48>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	681a      	ldr	r2, [r3, #0]
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f022 0201 	bic.w	r2, r2, #1
 8008f62:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2201      	movs	r2, #1
 8008f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008f6c:	2300      	movs	r3, #0
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	370c      	adds	r7, #12
 8008f72:	46bd      	mov	sp, r7
 8008f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f78:	4770      	bx	lr

08008f7a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008f7a:	b580      	push	{r7, lr}
 8008f7c:	b082      	sub	sp, #8
 8008f7e:	af00      	add	r7, sp, #0
 8008f80:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d101      	bne.n	8008f8c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008f88:	2301      	movs	r3, #1
 8008f8a:	e041      	b.n	8009010 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f92:	b2db      	uxtb	r3, r3
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d106      	bne.n	8008fa6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f7fc fc01 	bl	80057a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2202      	movs	r2, #2
 8008faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681a      	ldr	r2, [r3, #0]
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	3304      	adds	r3, #4
 8008fb6:	4619      	mov	r1, r3
 8008fb8:	4610      	mov	r0, r2
 8008fba:	f000 fceb 	bl	8009994 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2201      	movs	r2, #1
 8008fc2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2201      	movs	r2, #1
 8008fca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2201      	movs	r2, #1
 8008fd2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2201      	movs	r2, #1
 8008fda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2201      	movs	r2, #1
 8008fe2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2201      	movs	r2, #1
 8008fea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2201      	movs	r2, #1
 8008ff2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2201      	movs	r2, #1
 8008ffa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2201      	movs	r2, #1
 8009002:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2201      	movs	r2, #1
 800900a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800900e:	2300      	movs	r3, #0
}
 8009010:	4618      	mov	r0, r3
 8009012:	3708      	adds	r7, #8
 8009014:	46bd      	mov	sp, r7
 8009016:	bd80      	pop	{r7, pc}

08009018 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b084      	sub	sp, #16
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
 8009020:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d109      	bne.n	800903c <HAL_TIM_PWM_Start+0x24>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800902e:	b2db      	uxtb	r3, r3
 8009030:	2b01      	cmp	r3, #1
 8009032:	bf14      	ite	ne
 8009034:	2301      	movne	r3, #1
 8009036:	2300      	moveq	r3, #0
 8009038:	b2db      	uxtb	r3, r3
 800903a:	e022      	b.n	8009082 <HAL_TIM_PWM_Start+0x6a>
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	2b04      	cmp	r3, #4
 8009040:	d109      	bne.n	8009056 <HAL_TIM_PWM_Start+0x3e>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009048:	b2db      	uxtb	r3, r3
 800904a:	2b01      	cmp	r3, #1
 800904c:	bf14      	ite	ne
 800904e:	2301      	movne	r3, #1
 8009050:	2300      	moveq	r3, #0
 8009052:	b2db      	uxtb	r3, r3
 8009054:	e015      	b.n	8009082 <HAL_TIM_PWM_Start+0x6a>
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	2b08      	cmp	r3, #8
 800905a:	d109      	bne.n	8009070 <HAL_TIM_PWM_Start+0x58>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009062:	b2db      	uxtb	r3, r3
 8009064:	2b01      	cmp	r3, #1
 8009066:	bf14      	ite	ne
 8009068:	2301      	movne	r3, #1
 800906a:	2300      	moveq	r3, #0
 800906c:	b2db      	uxtb	r3, r3
 800906e:	e008      	b.n	8009082 <HAL_TIM_PWM_Start+0x6a>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009076:	b2db      	uxtb	r3, r3
 8009078:	2b01      	cmp	r3, #1
 800907a:	bf14      	ite	ne
 800907c:	2301      	movne	r3, #1
 800907e:	2300      	moveq	r3, #0
 8009080:	b2db      	uxtb	r3, r3
 8009082:	2b00      	cmp	r3, #0
 8009084:	d001      	beq.n	800908a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009086:	2301      	movs	r3, #1
 8009088:	e068      	b.n	800915c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d104      	bne.n	800909a <HAL_TIM_PWM_Start+0x82>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2202      	movs	r2, #2
 8009094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009098:	e013      	b.n	80090c2 <HAL_TIM_PWM_Start+0xaa>
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	2b04      	cmp	r3, #4
 800909e:	d104      	bne.n	80090aa <HAL_TIM_PWM_Start+0x92>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2202      	movs	r2, #2
 80090a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80090a8:	e00b      	b.n	80090c2 <HAL_TIM_PWM_Start+0xaa>
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	2b08      	cmp	r3, #8
 80090ae:	d104      	bne.n	80090ba <HAL_TIM_PWM_Start+0xa2>
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2202      	movs	r2, #2
 80090b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80090b8:	e003      	b.n	80090c2 <HAL_TIM_PWM_Start+0xaa>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2202      	movs	r2, #2
 80090be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	2201      	movs	r2, #1
 80090c8:	6839      	ldr	r1, [r7, #0]
 80090ca:	4618      	mov	r0, r3
 80090cc:	f000 ff08 	bl	8009ee0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4a23      	ldr	r2, [pc, #140]	; (8009164 <HAL_TIM_PWM_Start+0x14c>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d107      	bne.n	80090ea <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80090e8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	4a1d      	ldr	r2, [pc, #116]	; (8009164 <HAL_TIM_PWM_Start+0x14c>)
 80090f0:	4293      	cmp	r3, r2
 80090f2:	d018      	beq.n	8009126 <HAL_TIM_PWM_Start+0x10e>
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090fc:	d013      	beq.n	8009126 <HAL_TIM_PWM_Start+0x10e>
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	4a19      	ldr	r2, [pc, #100]	; (8009168 <HAL_TIM_PWM_Start+0x150>)
 8009104:	4293      	cmp	r3, r2
 8009106:	d00e      	beq.n	8009126 <HAL_TIM_PWM_Start+0x10e>
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	4a17      	ldr	r2, [pc, #92]	; (800916c <HAL_TIM_PWM_Start+0x154>)
 800910e:	4293      	cmp	r3, r2
 8009110:	d009      	beq.n	8009126 <HAL_TIM_PWM_Start+0x10e>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	4a16      	ldr	r2, [pc, #88]	; (8009170 <HAL_TIM_PWM_Start+0x158>)
 8009118:	4293      	cmp	r3, r2
 800911a:	d004      	beq.n	8009126 <HAL_TIM_PWM_Start+0x10e>
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	4a14      	ldr	r2, [pc, #80]	; (8009174 <HAL_TIM_PWM_Start+0x15c>)
 8009122:	4293      	cmp	r3, r2
 8009124:	d111      	bne.n	800914a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	689b      	ldr	r3, [r3, #8]
 800912c:	f003 0307 	and.w	r3, r3, #7
 8009130:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	2b06      	cmp	r3, #6
 8009136:	d010      	beq.n	800915a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	681a      	ldr	r2, [r3, #0]
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f042 0201 	orr.w	r2, r2, #1
 8009146:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009148:	e007      	b.n	800915a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	681a      	ldr	r2, [r3, #0]
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f042 0201 	orr.w	r2, r2, #1
 8009158:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800915a:	2300      	movs	r3, #0
}
 800915c:	4618      	mov	r0, r3
 800915e:	3710      	adds	r7, #16
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}
 8009164:	40010000 	.word	0x40010000
 8009168:	40000400 	.word	0x40000400
 800916c:	40000800 	.word	0x40000800
 8009170:	40000c00 	.word	0x40000c00
 8009174:	40014000 	.word	0x40014000

08009178 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b086      	sub	sp, #24
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
 8009180:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d101      	bne.n	800918c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009188:	2301      	movs	r3, #1
 800918a:	e097      	b.n	80092bc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009192:	b2db      	uxtb	r3, r3
 8009194:	2b00      	cmp	r3, #0
 8009196:	d106      	bne.n	80091a6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2200      	movs	r2, #0
 800919c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f7fc fa57 	bl	8005654 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2202      	movs	r2, #2
 80091aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	689b      	ldr	r3, [r3, #8]
 80091b4:	687a      	ldr	r2, [r7, #4]
 80091b6:	6812      	ldr	r2, [r2, #0]
 80091b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80091bc:	f023 0307 	bic.w	r3, r3, #7
 80091c0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681a      	ldr	r2, [r3, #0]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	3304      	adds	r3, #4
 80091ca:	4619      	mov	r1, r3
 80091cc:	4610      	mov	r0, r2
 80091ce:	f000 fbe1 	bl	8009994 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	689b      	ldr	r3, [r3, #8]
 80091d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	699b      	ldr	r3, [r3, #24]
 80091e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	6a1b      	ldr	r3, [r3, #32]
 80091e8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	697a      	ldr	r2, [r7, #20]
 80091f0:	4313      	orrs	r3, r2
 80091f2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80091f4:	693b      	ldr	r3, [r7, #16]
 80091f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091fa:	f023 0303 	bic.w	r3, r3, #3
 80091fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	689a      	ldr	r2, [r3, #8]
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	699b      	ldr	r3, [r3, #24]
 8009208:	021b      	lsls	r3, r3, #8
 800920a:	4313      	orrs	r3, r2
 800920c:	693a      	ldr	r2, [r7, #16]
 800920e:	4313      	orrs	r3, r2
 8009210:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009212:	693b      	ldr	r3, [r7, #16]
 8009214:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009218:	f023 030c 	bic.w	r3, r3, #12
 800921c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009224:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009228:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	68da      	ldr	r2, [r3, #12]
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	69db      	ldr	r3, [r3, #28]
 8009232:	021b      	lsls	r3, r3, #8
 8009234:	4313      	orrs	r3, r2
 8009236:	693a      	ldr	r2, [r7, #16]
 8009238:	4313      	orrs	r3, r2
 800923a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	691b      	ldr	r3, [r3, #16]
 8009240:	011a      	lsls	r2, r3, #4
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	6a1b      	ldr	r3, [r3, #32]
 8009246:	031b      	lsls	r3, r3, #12
 8009248:	4313      	orrs	r3, r2
 800924a:	693a      	ldr	r2, [r7, #16]
 800924c:	4313      	orrs	r3, r2
 800924e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009256:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800925e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	685a      	ldr	r2, [r3, #4]
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	695b      	ldr	r3, [r3, #20]
 8009268:	011b      	lsls	r3, r3, #4
 800926a:	4313      	orrs	r3, r2
 800926c:	68fa      	ldr	r2, [r7, #12]
 800926e:	4313      	orrs	r3, r2
 8009270:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	697a      	ldr	r2, [r7, #20]
 8009278:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	693a      	ldr	r2, [r7, #16]
 8009280:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	68fa      	ldr	r2, [r7, #12]
 8009288:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2201      	movs	r2, #1
 800928e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2201      	movs	r2, #1
 8009296:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2201      	movs	r2, #1
 800929e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2201      	movs	r2, #1
 80092a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2201      	movs	r2, #1
 80092ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2201      	movs	r2, #1
 80092b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80092ba:	2300      	movs	r3, #0
}
 80092bc:	4618      	mov	r0, r3
 80092be:	3718      	adds	r7, #24
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}

080092c4 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b084      	sub	sp, #16
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
 80092cc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80092d4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80092dc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80092e4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80092ec:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d110      	bne.n	8009316 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80092f4:	7bfb      	ldrb	r3, [r7, #15]
 80092f6:	2b01      	cmp	r3, #1
 80092f8:	d102      	bne.n	8009300 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80092fa:	7b7b      	ldrb	r3, [r7, #13]
 80092fc:	2b01      	cmp	r3, #1
 80092fe:	d001      	beq.n	8009304 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8009300:	2301      	movs	r3, #1
 8009302:	e089      	b.n	8009418 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2202      	movs	r2, #2
 8009308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2202      	movs	r2, #2
 8009310:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009314:	e031      	b.n	800937a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	2b04      	cmp	r3, #4
 800931a:	d110      	bne.n	800933e <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800931c:	7bbb      	ldrb	r3, [r7, #14]
 800931e:	2b01      	cmp	r3, #1
 8009320:	d102      	bne.n	8009328 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009322:	7b3b      	ldrb	r3, [r7, #12]
 8009324:	2b01      	cmp	r3, #1
 8009326:	d001      	beq.n	800932c <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8009328:	2301      	movs	r3, #1
 800932a:	e075      	b.n	8009418 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2202      	movs	r2, #2
 8009330:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2202      	movs	r2, #2
 8009338:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800933c:	e01d      	b.n	800937a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800933e:	7bfb      	ldrb	r3, [r7, #15]
 8009340:	2b01      	cmp	r3, #1
 8009342:	d108      	bne.n	8009356 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009344:	7bbb      	ldrb	r3, [r7, #14]
 8009346:	2b01      	cmp	r3, #1
 8009348:	d105      	bne.n	8009356 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800934a:	7b7b      	ldrb	r3, [r7, #13]
 800934c:	2b01      	cmp	r3, #1
 800934e:	d102      	bne.n	8009356 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009350:	7b3b      	ldrb	r3, [r7, #12]
 8009352:	2b01      	cmp	r3, #1
 8009354:	d001      	beq.n	800935a <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8009356:	2301      	movs	r3, #1
 8009358:	e05e      	b.n	8009418 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2202      	movs	r2, #2
 800935e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2202      	movs	r2, #2
 8009366:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2202      	movs	r2, #2
 800936e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2202      	movs	r2, #2
 8009376:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d003      	beq.n	8009388 <HAL_TIM_Encoder_Start_IT+0xc4>
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	2b04      	cmp	r3, #4
 8009384:	d010      	beq.n	80093a8 <HAL_TIM_Encoder_Start_IT+0xe4>
 8009386:	e01f      	b.n	80093c8 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	2201      	movs	r2, #1
 800938e:	2100      	movs	r1, #0
 8009390:	4618      	mov	r0, r3
 8009392:	f000 fda5 	bl	8009ee0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	68da      	ldr	r2, [r3, #12]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f042 0202 	orr.w	r2, r2, #2
 80093a4:	60da      	str	r2, [r3, #12]
      break;
 80093a6:	e02e      	b.n	8009406 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	2201      	movs	r2, #1
 80093ae:	2104      	movs	r1, #4
 80093b0:	4618      	mov	r0, r3
 80093b2:	f000 fd95 	bl	8009ee0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	68da      	ldr	r2, [r3, #12]
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	f042 0204 	orr.w	r2, r2, #4
 80093c4:	60da      	str	r2, [r3, #12]
      break;
 80093c6:	e01e      	b.n	8009406 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	2201      	movs	r2, #1
 80093ce:	2100      	movs	r1, #0
 80093d0:	4618      	mov	r0, r3
 80093d2:	f000 fd85 	bl	8009ee0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	2201      	movs	r2, #1
 80093dc:	2104      	movs	r1, #4
 80093de:	4618      	mov	r0, r3
 80093e0:	f000 fd7e 	bl	8009ee0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	68da      	ldr	r2, [r3, #12]
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f042 0202 	orr.w	r2, r2, #2
 80093f2:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	68da      	ldr	r2, [r3, #12]
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f042 0204 	orr.w	r2, r2, #4
 8009402:	60da      	str	r2, [r3, #12]
      break;
 8009404:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	681a      	ldr	r2, [r3, #0]
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f042 0201 	orr.w	r2, r2, #1
 8009414:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009416:	2300      	movs	r3, #0
}
 8009418:	4618      	mov	r0, r3
 800941a:	3710      	adds	r7, #16
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}

08009420 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b082      	sub	sp, #8
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	691b      	ldr	r3, [r3, #16]
 800942e:	f003 0302 	and.w	r3, r3, #2
 8009432:	2b02      	cmp	r3, #2
 8009434:	d122      	bne.n	800947c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	68db      	ldr	r3, [r3, #12]
 800943c:	f003 0302 	and.w	r3, r3, #2
 8009440:	2b02      	cmp	r3, #2
 8009442:	d11b      	bne.n	800947c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f06f 0202 	mvn.w	r2, #2
 800944c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2201      	movs	r2, #1
 8009452:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	699b      	ldr	r3, [r3, #24]
 800945a:	f003 0303 	and.w	r3, r3, #3
 800945e:	2b00      	cmp	r3, #0
 8009460:	d003      	beq.n	800946a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f000 fa77 	bl	8009956 <HAL_TIM_IC_CaptureCallback>
 8009468:	e005      	b.n	8009476 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f000 fa69 	bl	8009942 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f000 fa7a 	bl	800996a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2200      	movs	r2, #0
 800947a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	691b      	ldr	r3, [r3, #16]
 8009482:	f003 0304 	and.w	r3, r3, #4
 8009486:	2b04      	cmp	r3, #4
 8009488:	d122      	bne.n	80094d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	68db      	ldr	r3, [r3, #12]
 8009490:	f003 0304 	and.w	r3, r3, #4
 8009494:	2b04      	cmp	r3, #4
 8009496:	d11b      	bne.n	80094d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f06f 0204 	mvn.w	r2, #4
 80094a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2202      	movs	r2, #2
 80094a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	699b      	ldr	r3, [r3, #24]
 80094ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d003      	beq.n	80094be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f000 fa4d 	bl	8009956 <HAL_TIM_IC_CaptureCallback>
 80094bc:	e005      	b.n	80094ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f000 fa3f 	bl	8009942 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f000 fa50 	bl	800996a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2200      	movs	r2, #0
 80094ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	691b      	ldr	r3, [r3, #16]
 80094d6:	f003 0308 	and.w	r3, r3, #8
 80094da:	2b08      	cmp	r3, #8
 80094dc:	d122      	bne.n	8009524 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	68db      	ldr	r3, [r3, #12]
 80094e4:	f003 0308 	and.w	r3, r3, #8
 80094e8:	2b08      	cmp	r3, #8
 80094ea:	d11b      	bne.n	8009524 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f06f 0208 	mvn.w	r2, #8
 80094f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2204      	movs	r2, #4
 80094fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	69db      	ldr	r3, [r3, #28]
 8009502:	f003 0303 	and.w	r3, r3, #3
 8009506:	2b00      	cmp	r3, #0
 8009508:	d003      	beq.n	8009512 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f000 fa23 	bl	8009956 <HAL_TIM_IC_CaptureCallback>
 8009510:	e005      	b.n	800951e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f000 fa15 	bl	8009942 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f000 fa26 	bl	800996a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2200      	movs	r2, #0
 8009522:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	691b      	ldr	r3, [r3, #16]
 800952a:	f003 0310 	and.w	r3, r3, #16
 800952e:	2b10      	cmp	r3, #16
 8009530:	d122      	bne.n	8009578 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	68db      	ldr	r3, [r3, #12]
 8009538:	f003 0310 	and.w	r3, r3, #16
 800953c:	2b10      	cmp	r3, #16
 800953e:	d11b      	bne.n	8009578 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f06f 0210 	mvn.w	r2, #16
 8009548:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2208      	movs	r2, #8
 800954e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	69db      	ldr	r3, [r3, #28]
 8009556:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800955a:	2b00      	cmp	r3, #0
 800955c:	d003      	beq.n	8009566 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f000 f9f9 	bl	8009956 <HAL_TIM_IC_CaptureCallback>
 8009564:	e005      	b.n	8009572 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f000 f9eb 	bl	8009942 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f000 f9fc 	bl	800996a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2200      	movs	r2, #0
 8009576:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	691b      	ldr	r3, [r3, #16]
 800957e:	f003 0301 	and.w	r3, r3, #1
 8009582:	2b01      	cmp	r3, #1
 8009584:	d10e      	bne.n	80095a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	68db      	ldr	r3, [r3, #12]
 800958c:	f003 0301 	and.w	r3, r3, #1
 8009590:	2b01      	cmp	r3, #1
 8009592:	d107      	bne.n	80095a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f06f 0201 	mvn.w	r2, #1
 800959c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f7fb fc1e 	bl	8004de0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	691b      	ldr	r3, [r3, #16]
 80095aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095ae:	2b80      	cmp	r3, #128	; 0x80
 80095b0:	d10e      	bne.n	80095d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	68db      	ldr	r3, [r3, #12]
 80095b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095bc:	2b80      	cmp	r3, #128	; 0x80
 80095be:	d107      	bne.n	80095d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80095c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f000 fd26 	bl	800a01c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	691b      	ldr	r3, [r3, #16]
 80095d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095da:	2b40      	cmp	r3, #64	; 0x40
 80095dc:	d10e      	bne.n	80095fc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	68db      	ldr	r3, [r3, #12]
 80095e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095e8:	2b40      	cmp	r3, #64	; 0x40
 80095ea:	d107      	bne.n	80095fc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80095f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f000 f9c1 	bl	800997e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	691b      	ldr	r3, [r3, #16]
 8009602:	f003 0320 	and.w	r3, r3, #32
 8009606:	2b20      	cmp	r3, #32
 8009608:	d10e      	bne.n	8009628 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	68db      	ldr	r3, [r3, #12]
 8009610:	f003 0320 	and.w	r3, r3, #32
 8009614:	2b20      	cmp	r3, #32
 8009616:	d107      	bne.n	8009628 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f06f 0220 	mvn.w	r2, #32
 8009620:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f000 fcf0 	bl	800a008 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009628:	bf00      	nop
 800962a:	3708      	adds	r7, #8
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}

08009630 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b086      	sub	sp, #24
 8009634:	af00      	add	r7, sp, #0
 8009636:	60f8      	str	r0, [r7, #12]
 8009638:	60b9      	str	r1, [r7, #8]
 800963a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800963c:	2300      	movs	r3, #0
 800963e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009646:	2b01      	cmp	r3, #1
 8009648:	d101      	bne.n	800964e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800964a:	2302      	movs	r3, #2
 800964c:	e0ae      	b.n	80097ac <HAL_TIM_PWM_ConfigChannel+0x17c>
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	2201      	movs	r2, #1
 8009652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2b0c      	cmp	r3, #12
 800965a:	f200 809f 	bhi.w	800979c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800965e:	a201      	add	r2, pc, #4	; (adr r2, 8009664 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009664:	08009699 	.word	0x08009699
 8009668:	0800979d 	.word	0x0800979d
 800966c:	0800979d 	.word	0x0800979d
 8009670:	0800979d 	.word	0x0800979d
 8009674:	080096d9 	.word	0x080096d9
 8009678:	0800979d 	.word	0x0800979d
 800967c:	0800979d 	.word	0x0800979d
 8009680:	0800979d 	.word	0x0800979d
 8009684:	0800971b 	.word	0x0800971b
 8009688:	0800979d 	.word	0x0800979d
 800968c:	0800979d 	.word	0x0800979d
 8009690:	0800979d 	.word	0x0800979d
 8009694:	0800975b 	.word	0x0800975b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	68b9      	ldr	r1, [r7, #8]
 800969e:	4618      	mov	r0, r3
 80096a0:	f000 f9f8 	bl	8009a94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	699a      	ldr	r2, [r3, #24]
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	f042 0208 	orr.w	r2, r2, #8
 80096b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	699a      	ldr	r2, [r3, #24]
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f022 0204 	bic.w	r2, r2, #4
 80096c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	6999      	ldr	r1, [r3, #24]
 80096ca:	68bb      	ldr	r3, [r7, #8]
 80096cc:	691a      	ldr	r2, [r3, #16]
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	430a      	orrs	r2, r1
 80096d4:	619a      	str	r2, [r3, #24]
      break;
 80096d6:	e064      	b.n	80097a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	68b9      	ldr	r1, [r7, #8]
 80096de:	4618      	mov	r0, r3
 80096e0:	f000 fa3e 	bl	8009b60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	699a      	ldr	r2, [r3, #24]
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80096f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	699a      	ldr	r2, [r3, #24]
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009702:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	6999      	ldr	r1, [r3, #24]
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	691b      	ldr	r3, [r3, #16]
 800970e:	021a      	lsls	r2, r3, #8
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	430a      	orrs	r2, r1
 8009716:	619a      	str	r2, [r3, #24]
      break;
 8009718:	e043      	b.n	80097a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	68b9      	ldr	r1, [r7, #8]
 8009720:	4618      	mov	r0, r3
 8009722:	f000 fa89 	bl	8009c38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	69da      	ldr	r2, [r3, #28]
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f042 0208 	orr.w	r2, r2, #8
 8009734:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	69da      	ldr	r2, [r3, #28]
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f022 0204 	bic.w	r2, r2, #4
 8009744:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	69d9      	ldr	r1, [r3, #28]
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	691a      	ldr	r2, [r3, #16]
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	430a      	orrs	r2, r1
 8009756:	61da      	str	r2, [r3, #28]
      break;
 8009758:	e023      	b.n	80097a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	68b9      	ldr	r1, [r7, #8]
 8009760:	4618      	mov	r0, r3
 8009762:	f000 fad3 	bl	8009d0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	69da      	ldr	r2, [r3, #28]
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009774:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	69da      	ldr	r2, [r3, #28]
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009784:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	69d9      	ldr	r1, [r3, #28]
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	691b      	ldr	r3, [r3, #16]
 8009790:	021a      	lsls	r2, r3, #8
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	430a      	orrs	r2, r1
 8009798:	61da      	str	r2, [r3, #28]
      break;
 800979a:	e002      	b.n	80097a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800979c:	2301      	movs	r3, #1
 800979e:	75fb      	strb	r3, [r7, #23]
      break;
 80097a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	2200      	movs	r2, #0
 80097a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80097aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	3718      	adds	r7, #24
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}

080097b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b084      	sub	sp, #16
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
 80097bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80097be:	2300      	movs	r3, #0
 80097c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80097c8:	2b01      	cmp	r3, #1
 80097ca:	d101      	bne.n	80097d0 <HAL_TIM_ConfigClockSource+0x1c>
 80097cc:	2302      	movs	r3, #2
 80097ce:	e0b4      	b.n	800993a <HAL_TIM_ConfigClockSource+0x186>
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2201      	movs	r2, #1
 80097d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2202      	movs	r2, #2
 80097dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	689b      	ldr	r3, [r3, #8]
 80097e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80097ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80097f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	68ba      	ldr	r2, [r7, #8]
 80097fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009808:	d03e      	beq.n	8009888 <HAL_TIM_ConfigClockSource+0xd4>
 800980a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800980e:	f200 8087 	bhi.w	8009920 <HAL_TIM_ConfigClockSource+0x16c>
 8009812:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009816:	f000 8086 	beq.w	8009926 <HAL_TIM_ConfigClockSource+0x172>
 800981a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800981e:	d87f      	bhi.n	8009920 <HAL_TIM_ConfigClockSource+0x16c>
 8009820:	2b70      	cmp	r3, #112	; 0x70
 8009822:	d01a      	beq.n	800985a <HAL_TIM_ConfigClockSource+0xa6>
 8009824:	2b70      	cmp	r3, #112	; 0x70
 8009826:	d87b      	bhi.n	8009920 <HAL_TIM_ConfigClockSource+0x16c>
 8009828:	2b60      	cmp	r3, #96	; 0x60
 800982a:	d050      	beq.n	80098ce <HAL_TIM_ConfigClockSource+0x11a>
 800982c:	2b60      	cmp	r3, #96	; 0x60
 800982e:	d877      	bhi.n	8009920 <HAL_TIM_ConfigClockSource+0x16c>
 8009830:	2b50      	cmp	r3, #80	; 0x50
 8009832:	d03c      	beq.n	80098ae <HAL_TIM_ConfigClockSource+0xfa>
 8009834:	2b50      	cmp	r3, #80	; 0x50
 8009836:	d873      	bhi.n	8009920 <HAL_TIM_ConfigClockSource+0x16c>
 8009838:	2b40      	cmp	r3, #64	; 0x40
 800983a:	d058      	beq.n	80098ee <HAL_TIM_ConfigClockSource+0x13a>
 800983c:	2b40      	cmp	r3, #64	; 0x40
 800983e:	d86f      	bhi.n	8009920 <HAL_TIM_ConfigClockSource+0x16c>
 8009840:	2b30      	cmp	r3, #48	; 0x30
 8009842:	d064      	beq.n	800990e <HAL_TIM_ConfigClockSource+0x15a>
 8009844:	2b30      	cmp	r3, #48	; 0x30
 8009846:	d86b      	bhi.n	8009920 <HAL_TIM_ConfigClockSource+0x16c>
 8009848:	2b20      	cmp	r3, #32
 800984a:	d060      	beq.n	800990e <HAL_TIM_ConfigClockSource+0x15a>
 800984c:	2b20      	cmp	r3, #32
 800984e:	d867      	bhi.n	8009920 <HAL_TIM_ConfigClockSource+0x16c>
 8009850:	2b00      	cmp	r3, #0
 8009852:	d05c      	beq.n	800990e <HAL_TIM_ConfigClockSource+0x15a>
 8009854:	2b10      	cmp	r3, #16
 8009856:	d05a      	beq.n	800990e <HAL_TIM_ConfigClockSource+0x15a>
 8009858:	e062      	b.n	8009920 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6818      	ldr	r0, [r3, #0]
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	6899      	ldr	r1, [r3, #8]
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	685a      	ldr	r2, [r3, #4]
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	68db      	ldr	r3, [r3, #12]
 800986a:	f000 fb19 	bl	8009ea0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	689b      	ldr	r3, [r3, #8]
 8009874:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800987c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	68ba      	ldr	r2, [r7, #8]
 8009884:	609a      	str	r2, [r3, #8]
      break;
 8009886:	e04f      	b.n	8009928 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6818      	ldr	r0, [r3, #0]
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	6899      	ldr	r1, [r3, #8]
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	685a      	ldr	r2, [r3, #4]
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	68db      	ldr	r3, [r3, #12]
 8009898:	f000 fb02 	bl	8009ea0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	689a      	ldr	r2, [r3, #8]
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80098aa:	609a      	str	r2, [r3, #8]
      break;
 80098ac:	e03c      	b.n	8009928 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6818      	ldr	r0, [r3, #0]
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	6859      	ldr	r1, [r3, #4]
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	68db      	ldr	r3, [r3, #12]
 80098ba:	461a      	mov	r2, r3
 80098bc:	f000 fa76 	bl	8009dac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	2150      	movs	r1, #80	; 0x50
 80098c6:	4618      	mov	r0, r3
 80098c8:	f000 facf 	bl	8009e6a <TIM_ITRx_SetConfig>
      break;
 80098cc:	e02c      	b.n	8009928 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6818      	ldr	r0, [r3, #0]
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	6859      	ldr	r1, [r3, #4]
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	68db      	ldr	r3, [r3, #12]
 80098da:	461a      	mov	r2, r3
 80098dc:	f000 fa95 	bl	8009e0a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	2160      	movs	r1, #96	; 0x60
 80098e6:	4618      	mov	r0, r3
 80098e8:	f000 fabf 	bl	8009e6a <TIM_ITRx_SetConfig>
      break;
 80098ec:	e01c      	b.n	8009928 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6818      	ldr	r0, [r3, #0]
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	6859      	ldr	r1, [r3, #4]
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	68db      	ldr	r3, [r3, #12]
 80098fa:	461a      	mov	r2, r3
 80098fc:	f000 fa56 	bl	8009dac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	2140      	movs	r1, #64	; 0x40
 8009906:	4618      	mov	r0, r3
 8009908:	f000 faaf 	bl	8009e6a <TIM_ITRx_SetConfig>
      break;
 800990c:	e00c      	b.n	8009928 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681a      	ldr	r2, [r3, #0]
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	4619      	mov	r1, r3
 8009918:	4610      	mov	r0, r2
 800991a:	f000 faa6 	bl	8009e6a <TIM_ITRx_SetConfig>
      break;
 800991e:	e003      	b.n	8009928 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009920:	2301      	movs	r3, #1
 8009922:	73fb      	strb	r3, [r7, #15]
      break;
 8009924:	e000      	b.n	8009928 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009926:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2201      	movs	r2, #1
 800992c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2200      	movs	r2, #0
 8009934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009938:	7bfb      	ldrb	r3, [r7, #15]
}
 800993a:	4618      	mov	r0, r3
 800993c:	3710      	adds	r7, #16
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}

08009942 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009942:	b480      	push	{r7}
 8009944:	b083      	sub	sp, #12
 8009946:	af00      	add	r7, sp, #0
 8009948:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800994a:	bf00      	nop
 800994c:	370c      	adds	r7, #12
 800994e:	46bd      	mov	sp, r7
 8009950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009954:	4770      	bx	lr

08009956 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009956:	b480      	push	{r7}
 8009958:	b083      	sub	sp, #12
 800995a:	af00      	add	r7, sp, #0
 800995c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800995e:	bf00      	nop
 8009960:	370c      	adds	r7, #12
 8009962:	46bd      	mov	sp, r7
 8009964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009968:	4770      	bx	lr

0800996a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800996a:	b480      	push	{r7}
 800996c:	b083      	sub	sp, #12
 800996e:	af00      	add	r7, sp, #0
 8009970:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009972:	bf00      	nop
 8009974:	370c      	adds	r7, #12
 8009976:	46bd      	mov	sp, r7
 8009978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997c:	4770      	bx	lr

0800997e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800997e:	b480      	push	{r7}
 8009980:	b083      	sub	sp, #12
 8009982:	af00      	add	r7, sp, #0
 8009984:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009986:	bf00      	nop
 8009988:	370c      	adds	r7, #12
 800998a:	46bd      	mov	sp, r7
 800998c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009990:	4770      	bx	lr
	...

08009994 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009994:	b480      	push	{r7}
 8009996:	b085      	sub	sp, #20
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
 800999c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	4a34      	ldr	r2, [pc, #208]	; (8009a78 <TIM_Base_SetConfig+0xe4>)
 80099a8:	4293      	cmp	r3, r2
 80099aa:	d00f      	beq.n	80099cc <TIM_Base_SetConfig+0x38>
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099b2:	d00b      	beq.n	80099cc <TIM_Base_SetConfig+0x38>
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	4a31      	ldr	r2, [pc, #196]	; (8009a7c <TIM_Base_SetConfig+0xe8>)
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d007      	beq.n	80099cc <TIM_Base_SetConfig+0x38>
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	4a30      	ldr	r2, [pc, #192]	; (8009a80 <TIM_Base_SetConfig+0xec>)
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d003      	beq.n	80099cc <TIM_Base_SetConfig+0x38>
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	4a2f      	ldr	r2, [pc, #188]	; (8009a84 <TIM_Base_SetConfig+0xf0>)
 80099c8:	4293      	cmp	r3, r2
 80099ca:	d108      	bne.n	80099de <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	685b      	ldr	r3, [r3, #4]
 80099d8:	68fa      	ldr	r2, [r7, #12]
 80099da:	4313      	orrs	r3, r2
 80099dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	4a25      	ldr	r2, [pc, #148]	; (8009a78 <TIM_Base_SetConfig+0xe4>)
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d01b      	beq.n	8009a1e <TIM_Base_SetConfig+0x8a>
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099ec:	d017      	beq.n	8009a1e <TIM_Base_SetConfig+0x8a>
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	4a22      	ldr	r2, [pc, #136]	; (8009a7c <TIM_Base_SetConfig+0xe8>)
 80099f2:	4293      	cmp	r3, r2
 80099f4:	d013      	beq.n	8009a1e <TIM_Base_SetConfig+0x8a>
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	4a21      	ldr	r2, [pc, #132]	; (8009a80 <TIM_Base_SetConfig+0xec>)
 80099fa:	4293      	cmp	r3, r2
 80099fc:	d00f      	beq.n	8009a1e <TIM_Base_SetConfig+0x8a>
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	4a20      	ldr	r2, [pc, #128]	; (8009a84 <TIM_Base_SetConfig+0xf0>)
 8009a02:	4293      	cmp	r3, r2
 8009a04:	d00b      	beq.n	8009a1e <TIM_Base_SetConfig+0x8a>
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	4a1f      	ldr	r2, [pc, #124]	; (8009a88 <TIM_Base_SetConfig+0xf4>)
 8009a0a:	4293      	cmp	r3, r2
 8009a0c:	d007      	beq.n	8009a1e <TIM_Base_SetConfig+0x8a>
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	4a1e      	ldr	r2, [pc, #120]	; (8009a8c <TIM_Base_SetConfig+0xf8>)
 8009a12:	4293      	cmp	r3, r2
 8009a14:	d003      	beq.n	8009a1e <TIM_Base_SetConfig+0x8a>
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	4a1d      	ldr	r2, [pc, #116]	; (8009a90 <TIM_Base_SetConfig+0xfc>)
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	d108      	bne.n	8009a30 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	68db      	ldr	r3, [r3, #12]
 8009a2a:	68fa      	ldr	r2, [r7, #12]
 8009a2c:	4313      	orrs	r3, r2
 8009a2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	695b      	ldr	r3, [r3, #20]
 8009a3a:	4313      	orrs	r3, r2
 8009a3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	68fa      	ldr	r2, [r7, #12]
 8009a42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	689a      	ldr	r2, [r3, #8]
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	681a      	ldr	r2, [r3, #0]
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	4a08      	ldr	r2, [pc, #32]	; (8009a78 <TIM_Base_SetConfig+0xe4>)
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d103      	bne.n	8009a64 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	691a      	ldr	r2, [r3, #16]
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2201      	movs	r2, #1
 8009a68:	615a      	str	r2, [r3, #20]
}
 8009a6a:	bf00      	nop
 8009a6c:	3714      	adds	r7, #20
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a74:	4770      	bx	lr
 8009a76:	bf00      	nop
 8009a78:	40010000 	.word	0x40010000
 8009a7c:	40000400 	.word	0x40000400
 8009a80:	40000800 	.word	0x40000800
 8009a84:	40000c00 	.word	0x40000c00
 8009a88:	40014000 	.word	0x40014000
 8009a8c:	40014400 	.word	0x40014400
 8009a90:	40014800 	.word	0x40014800

08009a94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a94:	b480      	push	{r7}
 8009a96:	b087      	sub	sp, #28
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
 8009a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6a1b      	ldr	r3, [r3, #32]
 8009aa2:	f023 0201 	bic.w	r2, r3, #1
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6a1b      	ldr	r3, [r3, #32]
 8009aae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	685b      	ldr	r3, [r3, #4]
 8009ab4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	699b      	ldr	r3, [r3, #24]
 8009aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ac2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	f023 0303 	bic.w	r3, r3, #3
 8009aca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	68fa      	ldr	r2, [r7, #12]
 8009ad2:	4313      	orrs	r3, r2
 8009ad4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009ad6:	697b      	ldr	r3, [r7, #20]
 8009ad8:	f023 0302 	bic.w	r3, r3, #2
 8009adc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	689b      	ldr	r3, [r3, #8]
 8009ae2:	697a      	ldr	r2, [r7, #20]
 8009ae4:	4313      	orrs	r3, r2
 8009ae6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	4a1c      	ldr	r2, [pc, #112]	; (8009b5c <TIM_OC1_SetConfig+0xc8>)
 8009aec:	4293      	cmp	r3, r2
 8009aee:	d10c      	bne.n	8009b0a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009af0:	697b      	ldr	r3, [r7, #20]
 8009af2:	f023 0308 	bic.w	r3, r3, #8
 8009af6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	68db      	ldr	r3, [r3, #12]
 8009afc:	697a      	ldr	r2, [r7, #20]
 8009afe:	4313      	orrs	r3, r2
 8009b00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009b02:	697b      	ldr	r3, [r7, #20]
 8009b04:	f023 0304 	bic.w	r3, r3, #4
 8009b08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	4a13      	ldr	r2, [pc, #76]	; (8009b5c <TIM_OC1_SetConfig+0xc8>)
 8009b0e:	4293      	cmp	r3, r2
 8009b10:	d111      	bne.n	8009b36 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009b12:	693b      	ldr	r3, [r7, #16]
 8009b14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009b1a:	693b      	ldr	r3, [r7, #16]
 8009b1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009b20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	695b      	ldr	r3, [r3, #20]
 8009b26:	693a      	ldr	r2, [r7, #16]
 8009b28:	4313      	orrs	r3, r2
 8009b2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	699b      	ldr	r3, [r3, #24]
 8009b30:	693a      	ldr	r2, [r7, #16]
 8009b32:	4313      	orrs	r3, r2
 8009b34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	693a      	ldr	r2, [r7, #16]
 8009b3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	68fa      	ldr	r2, [r7, #12]
 8009b40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	685a      	ldr	r2, [r3, #4]
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	697a      	ldr	r2, [r7, #20]
 8009b4e:	621a      	str	r2, [r3, #32]
}
 8009b50:	bf00      	nop
 8009b52:	371c      	adds	r7, #28
 8009b54:	46bd      	mov	sp, r7
 8009b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5a:	4770      	bx	lr
 8009b5c:	40010000 	.word	0x40010000

08009b60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009b60:	b480      	push	{r7}
 8009b62:	b087      	sub	sp, #28
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
 8009b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6a1b      	ldr	r3, [r3, #32]
 8009b6e:	f023 0210 	bic.w	r2, r3, #16
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6a1b      	ldr	r3, [r3, #32]
 8009b7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	685b      	ldr	r3, [r3, #4]
 8009b80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	699b      	ldr	r3, [r3, #24]
 8009b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	021b      	lsls	r3, r3, #8
 8009b9e:	68fa      	ldr	r2, [r7, #12]
 8009ba0:	4313      	orrs	r3, r2
 8009ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009ba4:	697b      	ldr	r3, [r7, #20]
 8009ba6:	f023 0320 	bic.w	r3, r3, #32
 8009baa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	689b      	ldr	r3, [r3, #8]
 8009bb0:	011b      	lsls	r3, r3, #4
 8009bb2:	697a      	ldr	r2, [r7, #20]
 8009bb4:	4313      	orrs	r3, r2
 8009bb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	4a1e      	ldr	r2, [pc, #120]	; (8009c34 <TIM_OC2_SetConfig+0xd4>)
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	d10d      	bne.n	8009bdc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009bc0:	697b      	ldr	r3, [r7, #20]
 8009bc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009bc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	68db      	ldr	r3, [r3, #12]
 8009bcc:	011b      	lsls	r3, r3, #4
 8009bce:	697a      	ldr	r2, [r7, #20]
 8009bd0:	4313      	orrs	r3, r2
 8009bd2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009bd4:	697b      	ldr	r3, [r7, #20]
 8009bd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009bda:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	4a15      	ldr	r2, [pc, #84]	; (8009c34 <TIM_OC2_SetConfig+0xd4>)
 8009be0:	4293      	cmp	r3, r2
 8009be2:	d113      	bne.n	8009c0c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009be4:	693b      	ldr	r3, [r7, #16]
 8009be6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009bea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009bec:	693b      	ldr	r3, [r7, #16]
 8009bee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009bf2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	695b      	ldr	r3, [r3, #20]
 8009bf8:	009b      	lsls	r3, r3, #2
 8009bfa:	693a      	ldr	r2, [r7, #16]
 8009bfc:	4313      	orrs	r3, r2
 8009bfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	699b      	ldr	r3, [r3, #24]
 8009c04:	009b      	lsls	r3, r3, #2
 8009c06:	693a      	ldr	r2, [r7, #16]
 8009c08:	4313      	orrs	r3, r2
 8009c0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	693a      	ldr	r2, [r7, #16]
 8009c10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	68fa      	ldr	r2, [r7, #12]
 8009c16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	685a      	ldr	r2, [r3, #4]
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	697a      	ldr	r2, [r7, #20]
 8009c24:	621a      	str	r2, [r3, #32]
}
 8009c26:	bf00      	nop
 8009c28:	371c      	adds	r7, #28
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c30:	4770      	bx	lr
 8009c32:	bf00      	nop
 8009c34:	40010000 	.word	0x40010000

08009c38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b087      	sub	sp, #28
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
 8009c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6a1b      	ldr	r3, [r3, #32]
 8009c46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6a1b      	ldr	r3, [r3, #32]
 8009c52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	685b      	ldr	r3, [r3, #4]
 8009c58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	69db      	ldr	r3, [r3, #28]
 8009c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	f023 0303 	bic.w	r3, r3, #3
 8009c6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	68fa      	ldr	r2, [r7, #12]
 8009c76:	4313      	orrs	r3, r2
 8009c78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009c7a:	697b      	ldr	r3, [r7, #20]
 8009c7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009c80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	689b      	ldr	r3, [r3, #8]
 8009c86:	021b      	lsls	r3, r3, #8
 8009c88:	697a      	ldr	r2, [r7, #20]
 8009c8a:	4313      	orrs	r3, r2
 8009c8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	4a1d      	ldr	r2, [pc, #116]	; (8009d08 <TIM_OC3_SetConfig+0xd0>)
 8009c92:	4293      	cmp	r3, r2
 8009c94:	d10d      	bne.n	8009cb2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009c9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	68db      	ldr	r3, [r3, #12]
 8009ca2:	021b      	lsls	r3, r3, #8
 8009ca4:	697a      	ldr	r2, [r7, #20]
 8009ca6:	4313      	orrs	r3, r2
 8009ca8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009caa:	697b      	ldr	r3, [r7, #20]
 8009cac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009cb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	4a14      	ldr	r2, [pc, #80]	; (8009d08 <TIM_OC3_SetConfig+0xd0>)
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d113      	bne.n	8009ce2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009cba:	693b      	ldr	r3, [r7, #16]
 8009cbc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009cc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009cc2:	693b      	ldr	r3, [r7, #16]
 8009cc4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009cc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	695b      	ldr	r3, [r3, #20]
 8009cce:	011b      	lsls	r3, r3, #4
 8009cd0:	693a      	ldr	r2, [r7, #16]
 8009cd2:	4313      	orrs	r3, r2
 8009cd4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	699b      	ldr	r3, [r3, #24]
 8009cda:	011b      	lsls	r3, r3, #4
 8009cdc:	693a      	ldr	r2, [r7, #16]
 8009cde:	4313      	orrs	r3, r2
 8009ce0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	693a      	ldr	r2, [r7, #16]
 8009ce6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	68fa      	ldr	r2, [r7, #12]
 8009cec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	685a      	ldr	r2, [r3, #4]
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	697a      	ldr	r2, [r7, #20]
 8009cfa:	621a      	str	r2, [r3, #32]
}
 8009cfc:	bf00      	nop
 8009cfe:	371c      	adds	r7, #28
 8009d00:	46bd      	mov	sp, r7
 8009d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d06:	4770      	bx	lr
 8009d08:	40010000 	.word	0x40010000

08009d0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009d0c:	b480      	push	{r7}
 8009d0e:	b087      	sub	sp, #28
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
 8009d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6a1b      	ldr	r3, [r3, #32]
 8009d1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6a1b      	ldr	r3, [r3, #32]
 8009d26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	685b      	ldr	r3, [r3, #4]
 8009d2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	69db      	ldr	r3, [r3, #28]
 8009d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	021b      	lsls	r3, r3, #8
 8009d4a:	68fa      	ldr	r2, [r7, #12]
 8009d4c:	4313      	orrs	r3, r2
 8009d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009d50:	693b      	ldr	r3, [r7, #16]
 8009d52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009d56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	689b      	ldr	r3, [r3, #8]
 8009d5c:	031b      	lsls	r3, r3, #12
 8009d5e:	693a      	ldr	r2, [r7, #16]
 8009d60:	4313      	orrs	r3, r2
 8009d62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	4a10      	ldr	r2, [pc, #64]	; (8009da8 <TIM_OC4_SetConfig+0x9c>)
 8009d68:	4293      	cmp	r3, r2
 8009d6a:	d109      	bne.n	8009d80 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009d6c:	697b      	ldr	r3, [r7, #20]
 8009d6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009d72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	695b      	ldr	r3, [r3, #20]
 8009d78:	019b      	lsls	r3, r3, #6
 8009d7a:	697a      	ldr	r2, [r7, #20]
 8009d7c:	4313      	orrs	r3, r2
 8009d7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	697a      	ldr	r2, [r7, #20]
 8009d84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	68fa      	ldr	r2, [r7, #12]
 8009d8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	685a      	ldr	r2, [r3, #4]
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	693a      	ldr	r2, [r7, #16]
 8009d98:	621a      	str	r2, [r3, #32]
}
 8009d9a:	bf00      	nop
 8009d9c:	371c      	adds	r7, #28
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da4:	4770      	bx	lr
 8009da6:	bf00      	nop
 8009da8:	40010000 	.word	0x40010000

08009dac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009dac:	b480      	push	{r7}
 8009dae:	b087      	sub	sp, #28
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	60f8      	str	r0, [r7, #12]
 8009db4:	60b9      	str	r1, [r7, #8]
 8009db6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	6a1b      	ldr	r3, [r3, #32]
 8009dbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	6a1b      	ldr	r3, [r3, #32]
 8009dc2:	f023 0201 	bic.w	r2, r3, #1
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	699b      	ldr	r3, [r3, #24]
 8009dce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009dd0:	693b      	ldr	r3, [r7, #16]
 8009dd2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009dd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	011b      	lsls	r3, r3, #4
 8009ddc:	693a      	ldr	r2, [r7, #16]
 8009dde:	4313      	orrs	r3, r2
 8009de0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009de2:	697b      	ldr	r3, [r7, #20]
 8009de4:	f023 030a 	bic.w	r3, r3, #10
 8009de8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009dea:	697a      	ldr	r2, [r7, #20]
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	4313      	orrs	r3, r2
 8009df0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	693a      	ldr	r2, [r7, #16]
 8009df6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	697a      	ldr	r2, [r7, #20]
 8009dfc:	621a      	str	r2, [r3, #32]
}
 8009dfe:	bf00      	nop
 8009e00:	371c      	adds	r7, #28
 8009e02:	46bd      	mov	sp, r7
 8009e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e08:	4770      	bx	lr

08009e0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009e0a:	b480      	push	{r7}
 8009e0c:	b087      	sub	sp, #28
 8009e0e:	af00      	add	r7, sp, #0
 8009e10:	60f8      	str	r0, [r7, #12]
 8009e12:	60b9      	str	r1, [r7, #8]
 8009e14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	6a1b      	ldr	r3, [r3, #32]
 8009e1a:	f023 0210 	bic.w	r2, r3, #16
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	699b      	ldr	r3, [r3, #24]
 8009e26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	6a1b      	ldr	r3, [r3, #32]
 8009e2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009e2e:	697b      	ldr	r3, [r7, #20]
 8009e30:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009e34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	031b      	lsls	r3, r3, #12
 8009e3a:	697a      	ldr	r2, [r7, #20]
 8009e3c:	4313      	orrs	r3, r2
 8009e3e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009e40:	693b      	ldr	r3, [r7, #16]
 8009e42:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009e46:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009e48:	68bb      	ldr	r3, [r7, #8]
 8009e4a:	011b      	lsls	r3, r3, #4
 8009e4c:	693a      	ldr	r2, [r7, #16]
 8009e4e:	4313      	orrs	r3, r2
 8009e50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	697a      	ldr	r2, [r7, #20]
 8009e56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	693a      	ldr	r2, [r7, #16]
 8009e5c:	621a      	str	r2, [r3, #32]
}
 8009e5e:	bf00      	nop
 8009e60:	371c      	adds	r7, #28
 8009e62:	46bd      	mov	sp, r7
 8009e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e68:	4770      	bx	lr

08009e6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009e6a:	b480      	push	{r7}
 8009e6c:	b085      	sub	sp, #20
 8009e6e:	af00      	add	r7, sp, #0
 8009e70:	6078      	str	r0, [r7, #4]
 8009e72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	689b      	ldr	r3, [r3, #8]
 8009e78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009e82:	683a      	ldr	r2, [r7, #0]
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	4313      	orrs	r3, r2
 8009e88:	f043 0307 	orr.w	r3, r3, #7
 8009e8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	68fa      	ldr	r2, [r7, #12]
 8009e92:	609a      	str	r2, [r3, #8]
}
 8009e94:	bf00      	nop
 8009e96:	3714      	adds	r7, #20
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9e:	4770      	bx	lr

08009ea0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	b087      	sub	sp, #28
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	60f8      	str	r0, [r7, #12]
 8009ea8:	60b9      	str	r1, [r7, #8]
 8009eaa:	607a      	str	r2, [r7, #4]
 8009eac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	689b      	ldr	r3, [r3, #8]
 8009eb2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009eb4:	697b      	ldr	r3, [r7, #20]
 8009eb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009eba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	021a      	lsls	r2, r3, #8
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	431a      	orrs	r2, r3
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	4313      	orrs	r3, r2
 8009ec8:	697a      	ldr	r2, [r7, #20]
 8009eca:	4313      	orrs	r3, r2
 8009ecc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	697a      	ldr	r2, [r7, #20]
 8009ed2:	609a      	str	r2, [r3, #8]
}
 8009ed4:	bf00      	nop
 8009ed6:	371c      	adds	r7, #28
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ede:	4770      	bx	lr

08009ee0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009ee0:	b480      	push	{r7}
 8009ee2:	b087      	sub	sp, #28
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	60f8      	str	r0, [r7, #12]
 8009ee8:	60b9      	str	r1, [r7, #8]
 8009eea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	f003 031f 	and.w	r3, r3, #31
 8009ef2:	2201      	movs	r2, #1
 8009ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8009ef8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	6a1a      	ldr	r2, [r3, #32]
 8009efe:	697b      	ldr	r3, [r7, #20]
 8009f00:	43db      	mvns	r3, r3
 8009f02:	401a      	ands	r2, r3
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	6a1a      	ldr	r2, [r3, #32]
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	f003 031f 	and.w	r3, r3, #31
 8009f12:	6879      	ldr	r1, [r7, #4]
 8009f14:	fa01 f303 	lsl.w	r3, r1, r3
 8009f18:	431a      	orrs	r2, r3
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	621a      	str	r2, [r3, #32]
}
 8009f1e:	bf00      	nop
 8009f20:	371c      	adds	r7, #28
 8009f22:	46bd      	mov	sp, r7
 8009f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f28:	4770      	bx	lr
	...

08009f2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009f2c:	b480      	push	{r7}
 8009f2e:	b085      	sub	sp, #20
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
 8009f34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f3c:	2b01      	cmp	r3, #1
 8009f3e:	d101      	bne.n	8009f44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009f40:	2302      	movs	r3, #2
 8009f42:	e050      	b.n	8009fe6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2201      	movs	r2, #1
 8009f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2202      	movs	r2, #2
 8009f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	685b      	ldr	r3, [r3, #4]
 8009f5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	689b      	ldr	r3, [r3, #8]
 8009f62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	68fa      	ldr	r2, [r7, #12]
 8009f72:	4313      	orrs	r3, r2
 8009f74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	68fa      	ldr	r2, [r7, #12]
 8009f7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	4a1c      	ldr	r2, [pc, #112]	; (8009ff4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009f84:	4293      	cmp	r3, r2
 8009f86:	d018      	beq.n	8009fba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f90:	d013      	beq.n	8009fba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	4a18      	ldr	r2, [pc, #96]	; (8009ff8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009f98:	4293      	cmp	r3, r2
 8009f9a:	d00e      	beq.n	8009fba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	4a16      	ldr	r2, [pc, #88]	; (8009ffc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009fa2:	4293      	cmp	r3, r2
 8009fa4:	d009      	beq.n	8009fba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	4a15      	ldr	r2, [pc, #84]	; (800a000 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009fac:	4293      	cmp	r3, r2
 8009fae:	d004      	beq.n	8009fba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	4a13      	ldr	r2, [pc, #76]	; (800a004 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009fb6:	4293      	cmp	r3, r2
 8009fb8:	d10c      	bne.n	8009fd4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009fc0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	685b      	ldr	r3, [r3, #4]
 8009fc6:	68ba      	ldr	r2, [r7, #8]
 8009fc8:	4313      	orrs	r3, r2
 8009fca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	68ba      	ldr	r2, [r7, #8]
 8009fd2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2201      	movs	r2, #1
 8009fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009fe4:	2300      	movs	r3, #0
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	3714      	adds	r7, #20
 8009fea:	46bd      	mov	sp, r7
 8009fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff0:	4770      	bx	lr
 8009ff2:	bf00      	nop
 8009ff4:	40010000 	.word	0x40010000
 8009ff8:	40000400 	.word	0x40000400
 8009ffc:	40000800 	.word	0x40000800
 800a000:	40000c00 	.word	0x40000c00
 800a004:	40014000 	.word	0x40014000

0800a008 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a008:	b480      	push	{r7}
 800a00a:	b083      	sub	sp, #12
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a010:	bf00      	nop
 800a012:	370c      	adds	r7, #12
 800a014:	46bd      	mov	sp, r7
 800a016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01a:	4770      	bx	lr

0800a01c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a01c:	b480      	push	{r7}
 800a01e:	b083      	sub	sp, #12
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a024:	bf00      	nop
 800a026:	370c      	adds	r7, #12
 800a028:	46bd      	mov	sp, r7
 800a02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02e:	4770      	bx	lr

0800a030 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b082      	sub	sp, #8
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d101      	bne.n	800a042 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a03e:	2301      	movs	r3, #1
 800a040:	e03f      	b.n	800a0c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a048:	b2db      	uxtb	r3, r3
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d106      	bne.n	800a05c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2200      	movs	r2, #0
 800a052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f7fb fc40 	bl	80058dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2224      	movs	r2, #36	; 0x24
 800a060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	68da      	ldr	r2, [r3, #12]
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a072:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a074:	6878      	ldr	r0, [r7, #4]
 800a076:	f000 fddb 	bl	800ac30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	691a      	ldr	r2, [r3, #16]
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a088:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	695a      	ldr	r2, [r3, #20]
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a098:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	68da      	ldr	r2, [r3, #12]
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a0a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2220      	movs	r2, #32
 800a0b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2220      	movs	r2, #32
 800a0bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a0c0:	2300      	movs	r3, #0
}
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	3708      	adds	r7, #8
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}

0800a0ca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a0ca:	b580      	push	{r7, lr}
 800a0cc:	b08a      	sub	sp, #40	; 0x28
 800a0ce:	af02      	add	r7, sp, #8
 800a0d0:	60f8      	str	r0, [r7, #12]
 800a0d2:	60b9      	str	r1, [r7, #8]
 800a0d4:	603b      	str	r3, [r7, #0]
 800a0d6:	4613      	mov	r3, r2
 800a0d8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a0e4:	b2db      	uxtb	r3, r3
 800a0e6:	2b20      	cmp	r3, #32
 800a0e8:	d17c      	bne.n	800a1e4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a0ea:	68bb      	ldr	r3, [r7, #8]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d002      	beq.n	800a0f6 <HAL_UART_Transmit+0x2c>
 800a0f0:	88fb      	ldrh	r3, [r7, #6]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d101      	bne.n	800a0fa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	e075      	b.n	800a1e6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a100:	2b01      	cmp	r3, #1
 800a102:	d101      	bne.n	800a108 <HAL_UART_Transmit+0x3e>
 800a104:	2302      	movs	r3, #2
 800a106:	e06e      	b.n	800a1e6 <HAL_UART_Transmit+0x11c>
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	2201      	movs	r2, #1
 800a10c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	2200      	movs	r2, #0
 800a114:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	2221      	movs	r2, #33	; 0x21
 800a11a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a11e:	f7fb fe3d 	bl	8005d9c <HAL_GetTick>
 800a122:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	88fa      	ldrh	r2, [r7, #6]
 800a128:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	88fa      	ldrh	r2, [r7, #6]
 800a12e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	689b      	ldr	r3, [r3, #8]
 800a134:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a138:	d108      	bne.n	800a14c <HAL_UART_Transmit+0x82>
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	691b      	ldr	r3, [r3, #16]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d104      	bne.n	800a14c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a142:	2300      	movs	r3, #0
 800a144:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a146:	68bb      	ldr	r3, [r7, #8]
 800a148:	61bb      	str	r3, [r7, #24]
 800a14a:	e003      	b.n	800a154 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a150:	2300      	movs	r3, #0
 800a152:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	2200      	movs	r2, #0
 800a158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800a15c:	e02a      	b.n	800a1b4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	9300      	str	r3, [sp, #0]
 800a162:	697b      	ldr	r3, [r7, #20]
 800a164:	2200      	movs	r2, #0
 800a166:	2180      	movs	r1, #128	; 0x80
 800a168:	68f8      	ldr	r0, [r7, #12]
 800a16a:	f000 fb1f 	bl	800a7ac <UART_WaitOnFlagUntilTimeout>
 800a16e:	4603      	mov	r3, r0
 800a170:	2b00      	cmp	r3, #0
 800a172:	d001      	beq.n	800a178 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a174:	2303      	movs	r3, #3
 800a176:	e036      	b.n	800a1e6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a178:	69fb      	ldr	r3, [r7, #28]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d10b      	bne.n	800a196 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a17e:	69bb      	ldr	r3, [r7, #24]
 800a180:	881b      	ldrh	r3, [r3, #0]
 800a182:	461a      	mov	r2, r3
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a18c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a18e:	69bb      	ldr	r3, [r7, #24]
 800a190:	3302      	adds	r3, #2
 800a192:	61bb      	str	r3, [r7, #24]
 800a194:	e007      	b.n	800a1a6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a196:	69fb      	ldr	r3, [r7, #28]
 800a198:	781a      	ldrb	r2, [r3, #0]
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a1a0:	69fb      	ldr	r3, [r7, #28]
 800a1a2:	3301      	adds	r3, #1
 800a1a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a1aa:	b29b      	uxth	r3, r3
 800a1ac:	3b01      	subs	r3, #1
 800a1ae:	b29a      	uxth	r2, r3
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a1b8:	b29b      	uxth	r3, r3
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d1cf      	bne.n	800a15e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	9300      	str	r3, [sp, #0]
 800a1c2:	697b      	ldr	r3, [r7, #20]
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	2140      	movs	r1, #64	; 0x40
 800a1c8:	68f8      	ldr	r0, [r7, #12]
 800a1ca:	f000 faef 	bl	800a7ac <UART_WaitOnFlagUntilTimeout>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d001      	beq.n	800a1d8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a1d4:	2303      	movs	r3, #3
 800a1d6:	e006      	b.n	800a1e6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	2220      	movs	r2, #32
 800a1dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	e000      	b.n	800a1e6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a1e4:	2302      	movs	r3, #2
  }
}
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	3720      	adds	r7, #32
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}

0800a1ee <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a1ee:	b580      	push	{r7, lr}
 800a1f0:	b084      	sub	sp, #16
 800a1f2:	af00      	add	r7, sp, #0
 800a1f4:	60f8      	str	r0, [r7, #12]
 800a1f6:	60b9      	str	r1, [r7, #8]
 800a1f8:	4613      	mov	r3, r2
 800a1fa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a202:	b2db      	uxtb	r3, r3
 800a204:	2b20      	cmp	r3, #32
 800a206:	d11d      	bne.n	800a244 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a208:	68bb      	ldr	r3, [r7, #8]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d002      	beq.n	800a214 <HAL_UART_Receive_IT+0x26>
 800a20e:	88fb      	ldrh	r3, [r7, #6]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d101      	bne.n	800a218 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a214:	2301      	movs	r3, #1
 800a216:	e016      	b.n	800a246 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a21e:	2b01      	cmp	r3, #1
 800a220:	d101      	bne.n	800a226 <HAL_UART_Receive_IT+0x38>
 800a222:	2302      	movs	r3, #2
 800a224:	e00f      	b.n	800a246 <HAL_UART_Receive_IT+0x58>
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	2201      	movs	r2, #1
 800a22a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	2200      	movs	r2, #0
 800a232:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a234:	88fb      	ldrh	r3, [r7, #6]
 800a236:	461a      	mov	r2, r3
 800a238:	68b9      	ldr	r1, [r7, #8]
 800a23a:	68f8      	ldr	r0, [r7, #12]
 800a23c:	f000 fb24 	bl	800a888 <UART_Start_Receive_IT>
 800a240:	4603      	mov	r3, r0
 800a242:	e000      	b.n	800a246 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a244:	2302      	movs	r3, #2
  }
}
 800a246:	4618      	mov	r0, r3
 800a248:	3710      	adds	r7, #16
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}
	...

0800a250 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b0ba      	sub	sp, #232	; 0xe8
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	68db      	ldr	r3, [r3, #12]
 800a268:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	695b      	ldr	r3, [r3, #20]
 800a272:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a276:	2300      	movs	r3, #0
 800a278:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a27c:	2300      	movs	r3, #0
 800a27e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a286:	f003 030f 	and.w	r3, r3, #15
 800a28a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a28e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a292:	2b00      	cmp	r3, #0
 800a294:	d10f      	bne.n	800a2b6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a29a:	f003 0320 	and.w	r3, r3, #32
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d009      	beq.n	800a2b6 <HAL_UART_IRQHandler+0x66>
 800a2a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a2a6:	f003 0320 	and.w	r3, r3, #32
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d003      	beq.n	800a2b6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	f000 fc03 	bl	800aaba <UART_Receive_IT>
      return;
 800a2b4:	e256      	b.n	800a764 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a2b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	f000 80de 	beq.w	800a47c <HAL_UART_IRQHandler+0x22c>
 800a2c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a2c4:	f003 0301 	and.w	r3, r3, #1
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d106      	bne.n	800a2da <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a2cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a2d0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	f000 80d1 	beq.w	800a47c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a2da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2de:	f003 0301 	and.w	r3, r3, #1
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d00b      	beq.n	800a2fe <HAL_UART_IRQHandler+0xae>
 800a2e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a2ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d005      	beq.n	800a2fe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2f6:	f043 0201 	orr.w	r2, r3, #1
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a2fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a302:	f003 0304 	and.w	r3, r3, #4
 800a306:	2b00      	cmp	r3, #0
 800a308:	d00b      	beq.n	800a322 <HAL_UART_IRQHandler+0xd2>
 800a30a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a30e:	f003 0301 	and.w	r3, r3, #1
 800a312:	2b00      	cmp	r3, #0
 800a314:	d005      	beq.n	800a322 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a31a:	f043 0202 	orr.w	r2, r3, #2
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a326:	f003 0302 	and.w	r3, r3, #2
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d00b      	beq.n	800a346 <HAL_UART_IRQHandler+0xf6>
 800a32e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a332:	f003 0301 	and.w	r3, r3, #1
 800a336:	2b00      	cmp	r3, #0
 800a338:	d005      	beq.n	800a346 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a33e:	f043 0204 	orr.w	r2, r3, #4
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a346:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a34a:	f003 0308 	and.w	r3, r3, #8
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d011      	beq.n	800a376 <HAL_UART_IRQHandler+0x126>
 800a352:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a356:	f003 0320 	and.w	r3, r3, #32
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d105      	bne.n	800a36a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a35e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a362:	f003 0301 	and.w	r3, r3, #1
 800a366:	2b00      	cmp	r3, #0
 800a368:	d005      	beq.n	800a376 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a36e:	f043 0208 	orr.w	r2, r3, #8
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	f000 81ed 	beq.w	800a75a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a380:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a384:	f003 0320 	and.w	r3, r3, #32
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d008      	beq.n	800a39e <HAL_UART_IRQHandler+0x14e>
 800a38c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a390:	f003 0320 	and.w	r3, r3, #32
 800a394:	2b00      	cmp	r3, #0
 800a396:	d002      	beq.n	800a39e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	f000 fb8e 	bl	800aaba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	695b      	ldr	r3, [r3, #20]
 800a3a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3a8:	2b40      	cmp	r3, #64	; 0x40
 800a3aa:	bf0c      	ite	eq
 800a3ac:	2301      	moveq	r3, #1
 800a3ae:	2300      	movne	r3, #0
 800a3b0:	b2db      	uxtb	r3, r3
 800a3b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3ba:	f003 0308 	and.w	r3, r3, #8
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d103      	bne.n	800a3ca <HAL_UART_IRQHandler+0x17a>
 800a3c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d04f      	beq.n	800a46a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a3ca:	6878      	ldr	r0, [r7, #4]
 800a3cc:	f000 fa96 	bl	800a8fc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	695b      	ldr	r3, [r3, #20]
 800a3d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3da:	2b40      	cmp	r3, #64	; 0x40
 800a3dc:	d141      	bne.n	800a462 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	3314      	adds	r3, #20
 800a3e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a3ec:	e853 3f00 	ldrex	r3, [r3]
 800a3f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a3f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a3f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a3fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	3314      	adds	r3, #20
 800a406:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a40a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a40e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a412:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a416:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a41a:	e841 2300 	strex	r3, r2, [r1]
 800a41e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a422:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a426:	2b00      	cmp	r3, #0
 800a428:	d1d9      	bne.n	800a3de <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d013      	beq.n	800a45a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a436:	4a7d      	ldr	r2, [pc, #500]	; (800a62c <HAL_UART_IRQHandler+0x3dc>)
 800a438:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a43e:	4618      	mov	r0, r3
 800a440:	f7fc fcaa 	bl	8006d98 <HAL_DMA_Abort_IT>
 800a444:	4603      	mov	r3, r0
 800a446:	2b00      	cmp	r3, #0
 800a448:	d016      	beq.n	800a478 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a44e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a450:	687a      	ldr	r2, [r7, #4]
 800a452:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a454:	4610      	mov	r0, r2
 800a456:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a458:	e00e      	b.n	800a478 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a45a:	6878      	ldr	r0, [r7, #4]
 800a45c:	f000 f990 	bl	800a780 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a460:	e00a      	b.n	800a478 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a462:	6878      	ldr	r0, [r7, #4]
 800a464:	f000 f98c 	bl	800a780 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a468:	e006      	b.n	800a478 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a46a:	6878      	ldr	r0, [r7, #4]
 800a46c:	f000 f988 	bl	800a780 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2200      	movs	r2, #0
 800a474:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a476:	e170      	b.n	800a75a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a478:	bf00      	nop
    return;
 800a47a:	e16e      	b.n	800a75a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a480:	2b01      	cmp	r3, #1
 800a482:	f040 814a 	bne.w	800a71a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a48a:	f003 0310 	and.w	r3, r3, #16
 800a48e:	2b00      	cmp	r3, #0
 800a490:	f000 8143 	beq.w	800a71a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a494:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a498:	f003 0310 	and.w	r3, r3, #16
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	f000 813c 	beq.w	800a71a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	60bb      	str	r3, [r7, #8]
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	60bb      	str	r3, [r7, #8]
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	685b      	ldr	r3, [r3, #4]
 800a4b4:	60bb      	str	r3, [r7, #8]
 800a4b6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	695b      	ldr	r3, [r3, #20]
 800a4be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4c2:	2b40      	cmp	r3, #64	; 0x40
 800a4c4:	f040 80b4 	bne.w	800a630 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	685b      	ldr	r3, [r3, #4]
 800a4d0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a4d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	f000 8140 	beq.w	800a75e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a4e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a4e6:	429a      	cmp	r2, r3
 800a4e8:	f080 8139 	bcs.w	800a75e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a4f2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4f8:	69db      	ldr	r3, [r3, #28]
 800a4fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4fe:	f000 8088 	beq.w	800a612 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	330c      	adds	r3, #12
 800a508:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a50c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a510:	e853 3f00 	ldrex	r3, [r3]
 800a514:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a518:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a51c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a520:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	330c      	adds	r3, #12
 800a52a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a52e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a532:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a536:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a53a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a53e:	e841 2300 	strex	r3, r2, [r1]
 800a542:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a546:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d1d9      	bne.n	800a502 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	3314      	adds	r3, #20
 800a554:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a556:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a558:	e853 3f00 	ldrex	r3, [r3]
 800a55c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a55e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a560:	f023 0301 	bic.w	r3, r3, #1
 800a564:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	3314      	adds	r3, #20
 800a56e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a572:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a576:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a578:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a57a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a57e:	e841 2300 	strex	r3, r2, [r1]
 800a582:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a584:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a586:	2b00      	cmp	r3, #0
 800a588:	d1e1      	bne.n	800a54e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	3314      	adds	r3, #20
 800a590:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a592:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a594:	e853 3f00 	ldrex	r3, [r3]
 800a598:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a59a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a59c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a5a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	3314      	adds	r3, #20
 800a5aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a5ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a5b0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a5b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a5b6:	e841 2300 	strex	r3, r2, [r1]
 800a5ba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a5bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d1e3      	bne.n	800a58a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	2220      	movs	r2, #32
 800a5c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	330c      	adds	r3, #12
 800a5d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5da:	e853 3f00 	ldrex	r3, [r3]
 800a5de:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a5e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a5e2:	f023 0310 	bic.w	r3, r3, #16
 800a5e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	330c      	adds	r3, #12
 800a5f0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a5f4:	65ba      	str	r2, [r7, #88]	; 0x58
 800a5f6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a5fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a5fc:	e841 2300 	strex	r3, r2, [r1]
 800a600:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a602:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a604:	2b00      	cmp	r3, #0
 800a606:	d1e3      	bne.n	800a5d0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a60c:	4618      	mov	r0, r3
 800a60e:	f7fc fb53 	bl	8006cb8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a61a:	b29b      	uxth	r3, r3
 800a61c:	1ad3      	subs	r3, r2, r3
 800a61e:	b29b      	uxth	r3, r3
 800a620:	4619      	mov	r1, r3
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	f000 f8b6 	bl	800a794 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a628:	e099      	b.n	800a75e <HAL_UART_IRQHandler+0x50e>
 800a62a:	bf00      	nop
 800a62c:	0800a9c3 	.word	0x0800a9c3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a638:	b29b      	uxth	r3, r3
 800a63a:	1ad3      	subs	r3, r2, r3
 800a63c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a644:	b29b      	uxth	r3, r3
 800a646:	2b00      	cmp	r3, #0
 800a648:	f000 808b 	beq.w	800a762 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a64c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a650:	2b00      	cmp	r3, #0
 800a652:	f000 8086 	beq.w	800a762 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	330c      	adds	r3, #12
 800a65c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a65e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a660:	e853 3f00 	ldrex	r3, [r3]
 800a664:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a668:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a66c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	330c      	adds	r3, #12
 800a676:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a67a:	647a      	str	r2, [r7, #68]	; 0x44
 800a67c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a67e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a680:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a682:	e841 2300 	strex	r3, r2, [r1]
 800a686:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d1e3      	bne.n	800a656 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	3314      	adds	r3, #20
 800a694:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a698:	e853 3f00 	ldrex	r3, [r3]
 800a69c:	623b      	str	r3, [r7, #32]
   return(result);
 800a69e:	6a3b      	ldr	r3, [r7, #32]
 800a6a0:	f023 0301 	bic.w	r3, r3, #1
 800a6a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	3314      	adds	r3, #20
 800a6ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a6b2:	633a      	str	r2, [r7, #48]	; 0x30
 800a6b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a6b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6ba:	e841 2300 	strex	r3, r2, [r1]
 800a6be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a6c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d1e3      	bne.n	800a68e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2220      	movs	r2, #32
 800a6ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	330c      	adds	r3, #12
 800a6da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6dc:	693b      	ldr	r3, [r7, #16]
 800a6de:	e853 3f00 	ldrex	r3, [r3]
 800a6e2:	60fb      	str	r3, [r7, #12]
   return(result);
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	f023 0310 	bic.w	r3, r3, #16
 800a6ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	330c      	adds	r3, #12
 800a6f4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a6f8:	61fa      	str	r2, [r7, #28]
 800a6fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6fc:	69b9      	ldr	r1, [r7, #24]
 800a6fe:	69fa      	ldr	r2, [r7, #28]
 800a700:	e841 2300 	strex	r3, r2, [r1]
 800a704:	617b      	str	r3, [r7, #20]
   return(result);
 800a706:	697b      	ldr	r3, [r7, #20]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d1e3      	bne.n	800a6d4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a70c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a710:	4619      	mov	r1, r3
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	f000 f83e 	bl	800a794 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a718:	e023      	b.n	800a762 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a71a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a71e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a722:	2b00      	cmp	r3, #0
 800a724:	d009      	beq.n	800a73a <HAL_UART_IRQHandler+0x4ea>
 800a726:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a72a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d003      	beq.n	800a73a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a732:	6878      	ldr	r0, [r7, #4]
 800a734:	f000 f959 	bl	800a9ea <UART_Transmit_IT>
    return;
 800a738:	e014      	b.n	800a764 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a73a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a73e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a742:	2b00      	cmp	r3, #0
 800a744:	d00e      	beq.n	800a764 <HAL_UART_IRQHandler+0x514>
 800a746:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a74a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d008      	beq.n	800a764 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a752:	6878      	ldr	r0, [r7, #4]
 800a754:	f000 f999 	bl	800aa8a <UART_EndTransmit_IT>
    return;
 800a758:	e004      	b.n	800a764 <HAL_UART_IRQHandler+0x514>
    return;
 800a75a:	bf00      	nop
 800a75c:	e002      	b.n	800a764 <HAL_UART_IRQHandler+0x514>
      return;
 800a75e:	bf00      	nop
 800a760:	e000      	b.n	800a764 <HAL_UART_IRQHandler+0x514>
      return;
 800a762:	bf00      	nop
  }
}
 800a764:	37e8      	adds	r7, #232	; 0xe8
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}
 800a76a:	bf00      	nop

0800a76c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a76c:	b480      	push	{r7}
 800a76e:	b083      	sub	sp, #12
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a774:	bf00      	nop
 800a776:	370c      	adds	r7, #12
 800a778:	46bd      	mov	sp, r7
 800a77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77e:	4770      	bx	lr

0800a780 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a780:	b480      	push	{r7}
 800a782:	b083      	sub	sp, #12
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a788:	bf00      	nop
 800a78a:	370c      	adds	r7, #12
 800a78c:	46bd      	mov	sp, r7
 800a78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a792:	4770      	bx	lr

0800a794 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a794:	b480      	push	{r7}
 800a796:	b083      	sub	sp, #12
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
 800a79c:	460b      	mov	r3, r1
 800a79e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a7a0:	bf00      	nop
 800a7a2:	370c      	adds	r7, #12
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7aa:	4770      	bx	lr

0800a7ac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b090      	sub	sp, #64	; 0x40
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	60f8      	str	r0, [r7, #12]
 800a7b4:	60b9      	str	r1, [r7, #8]
 800a7b6:	603b      	str	r3, [r7, #0]
 800a7b8:	4613      	mov	r3, r2
 800a7ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a7bc:	e050      	b.n	800a860 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a7be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a7c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7c4:	d04c      	beq.n	800a860 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a7c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d007      	beq.n	800a7dc <UART_WaitOnFlagUntilTimeout+0x30>
 800a7cc:	f7fb fae6 	bl	8005d9c <HAL_GetTick>
 800a7d0:	4602      	mov	r2, r0
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	1ad3      	subs	r3, r2, r3
 800a7d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a7d8:	429a      	cmp	r2, r3
 800a7da:	d241      	bcs.n	800a860 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	330c      	adds	r3, #12
 800a7e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7e6:	e853 3f00 	ldrex	r3, [r3]
 800a7ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a7ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a7f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	330c      	adds	r3, #12
 800a7fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a7fc:	637a      	str	r2, [r7, #52]	; 0x34
 800a7fe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a800:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a802:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a804:	e841 2300 	strex	r3, r2, [r1]
 800a808:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a80a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d1e5      	bne.n	800a7dc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	3314      	adds	r3, #20
 800a816:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a818:	697b      	ldr	r3, [r7, #20]
 800a81a:	e853 3f00 	ldrex	r3, [r3]
 800a81e:	613b      	str	r3, [r7, #16]
   return(result);
 800a820:	693b      	ldr	r3, [r7, #16]
 800a822:	f023 0301 	bic.w	r3, r3, #1
 800a826:	63bb      	str	r3, [r7, #56]	; 0x38
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	3314      	adds	r3, #20
 800a82e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a830:	623a      	str	r2, [r7, #32]
 800a832:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a834:	69f9      	ldr	r1, [r7, #28]
 800a836:	6a3a      	ldr	r2, [r7, #32]
 800a838:	e841 2300 	strex	r3, r2, [r1]
 800a83c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a83e:	69bb      	ldr	r3, [r7, #24]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d1e5      	bne.n	800a810 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	2220      	movs	r2, #32
 800a848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	2220      	movs	r2, #32
 800a850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	2200      	movs	r2, #0
 800a858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a85c:	2303      	movs	r3, #3
 800a85e:	e00f      	b.n	800a880 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	681a      	ldr	r2, [r3, #0]
 800a866:	68bb      	ldr	r3, [r7, #8]
 800a868:	4013      	ands	r3, r2
 800a86a:	68ba      	ldr	r2, [r7, #8]
 800a86c:	429a      	cmp	r2, r3
 800a86e:	bf0c      	ite	eq
 800a870:	2301      	moveq	r3, #1
 800a872:	2300      	movne	r3, #0
 800a874:	b2db      	uxtb	r3, r3
 800a876:	461a      	mov	r2, r3
 800a878:	79fb      	ldrb	r3, [r7, #7]
 800a87a:	429a      	cmp	r2, r3
 800a87c:	d09f      	beq.n	800a7be <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a87e:	2300      	movs	r3, #0
}
 800a880:	4618      	mov	r0, r3
 800a882:	3740      	adds	r7, #64	; 0x40
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}

0800a888 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a888:	b480      	push	{r7}
 800a88a:	b085      	sub	sp, #20
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	60f8      	str	r0, [r7, #12]
 800a890:	60b9      	str	r1, [r7, #8]
 800a892:	4613      	mov	r3, r2
 800a894:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	68ba      	ldr	r2, [r7, #8]
 800a89a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	88fa      	ldrh	r2, [r7, #6]
 800a8a0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	88fa      	ldrh	r2, [r7, #6]
 800a8a6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	2222      	movs	r2, #34	; 0x22
 800a8b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	68da      	ldr	r2, [r3, #12]
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a8cc:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	695a      	ldr	r2, [r3, #20]
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	f042 0201 	orr.w	r2, r2, #1
 800a8dc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	68da      	ldr	r2, [r3, #12]
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	f042 0220 	orr.w	r2, r2, #32
 800a8ec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a8ee:	2300      	movs	r3, #0
}
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	3714      	adds	r7, #20
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fa:	4770      	bx	lr

0800a8fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a8fc:	b480      	push	{r7}
 800a8fe:	b095      	sub	sp, #84	; 0x54
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	330c      	adds	r3, #12
 800a90a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a90c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a90e:	e853 3f00 	ldrex	r3, [r3]
 800a912:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a916:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a91a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	330c      	adds	r3, #12
 800a922:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a924:	643a      	str	r2, [r7, #64]	; 0x40
 800a926:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a928:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a92a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a92c:	e841 2300 	strex	r3, r2, [r1]
 800a930:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a934:	2b00      	cmp	r3, #0
 800a936:	d1e5      	bne.n	800a904 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	3314      	adds	r3, #20
 800a93e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a940:	6a3b      	ldr	r3, [r7, #32]
 800a942:	e853 3f00 	ldrex	r3, [r3]
 800a946:	61fb      	str	r3, [r7, #28]
   return(result);
 800a948:	69fb      	ldr	r3, [r7, #28]
 800a94a:	f023 0301 	bic.w	r3, r3, #1
 800a94e:	64bb      	str	r3, [r7, #72]	; 0x48
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	3314      	adds	r3, #20
 800a956:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a958:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a95a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a95c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a95e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a960:	e841 2300 	strex	r3, r2, [r1]
 800a964:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d1e5      	bne.n	800a938 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a970:	2b01      	cmp	r3, #1
 800a972:	d119      	bne.n	800a9a8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	330c      	adds	r3, #12
 800a97a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	e853 3f00 	ldrex	r3, [r3]
 800a982:	60bb      	str	r3, [r7, #8]
   return(result);
 800a984:	68bb      	ldr	r3, [r7, #8]
 800a986:	f023 0310 	bic.w	r3, r3, #16
 800a98a:	647b      	str	r3, [r7, #68]	; 0x44
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	330c      	adds	r3, #12
 800a992:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a994:	61ba      	str	r2, [r7, #24]
 800a996:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a998:	6979      	ldr	r1, [r7, #20]
 800a99a:	69ba      	ldr	r2, [r7, #24]
 800a99c:	e841 2300 	strex	r3, r2, [r1]
 800a9a0:	613b      	str	r3, [r7, #16]
   return(result);
 800a9a2:	693b      	ldr	r3, [r7, #16]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d1e5      	bne.n	800a974 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2220      	movs	r2, #32
 800a9ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a9b6:	bf00      	nop
 800a9b8:	3754      	adds	r7, #84	; 0x54
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c0:	4770      	bx	lr

0800a9c2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a9c2:	b580      	push	{r7, lr}
 800a9c4:	b084      	sub	sp, #16
 800a9c6:	af00      	add	r7, sp, #0
 800a9c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	2200      	movs	r2, #0
 800a9da:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a9dc:	68f8      	ldr	r0, [r7, #12]
 800a9de:	f7ff fecf 	bl	800a780 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a9e2:	bf00      	nop
 800a9e4:	3710      	adds	r7, #16
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd80      	pop	{r7, pc}

0800a9ea <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a9ea:	b480      	push	{r7}
 800a9ec:	b085      	sub	sp, #20
 800a9ee:	af00      	add	r7, sp, #0
 800a9f0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a9f8:	b2db      	uxtb	r3, r3
 800a9fa:	2b21      	cmp	r3, #33	; 0x21
 800a9fc:	d13e      	bne.n	800aa7c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	689b      	ldr	r3, [r3, #8]
 800aa02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa06:	d114      	bne.n	800aa32 <UART_Transmit_IT+0x48>
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	691b      	ldr	r3, [r3, #16]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d110      	bne.n	800aa32 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	6a1b      	ldr	r3, [r3, #32]
 800aa14:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	881b      	ldrh	r3, [r3, #0]
 800aa1a:	461a      	mov	r2, r3
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800aa24:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	6a1b      	ldr	r3, [r3, #32]
 800aa2a:	1c9a      	adds	r2, r3, #2
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	621a      	str	r2, [r3, #32]
 800aa30:	e008      	b.n	800aa44 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	6a1b      	ldr	r3, [r3, #32]
 800aa36:	1c59      	adds	r1, r3, #1
 800aa38:	687a      	ldr	r2, [r7, #4]
 800aa3a:	6211      	str	r1, [r2, #32]
 800aa3c:	781a      	ldrb	r2, [r3, #0]
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800aa48:	b29b      	uxth	r3, r3
 800aa4a:	3b01      	subs	r3, #1
 800aa4c:	b29b      	uxth	r3, r3
 800aa4e:	687a      	ldr	r2, [r7, #4]
 800aa50:	4619      	mov	r1, r3
 800aa52:	84d1      	strh	r1, [r2, #38]	; 0x26
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d10f      	bne.n	800aa78 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	68da      	ldr	r2, [r3, #12]
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800aa66:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	68da      	ldr	r2, [r3, #12]
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aa76:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800aa78:	2300      	movs	r3, #0
 800aa7a:	e000      	b.n	800aa7e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800aa7c:	2302      	movs	r3, #2
  }
}
 800aa7e:	4618      	mov	r0, r3
 800aa80:	3714      	adds	r7, #20
 800aa82:	46bd      	mov	sp, r7
 800aa84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa88:	4770      	bx	lr

0800aa8a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800aa8a:	b580      	push	{r7, lr}
 800aa8c:	b082      	sub	sp, #8
 800aa8e:	af00      	add	r7, sp, #0
 800aa90:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	68da      	ldr	r2, [r3, #12]
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aaa0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	2220      	movs	r2, #32
 800aaa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800aaaa:	6878      	ldr	r0, [r7, #4]
 800aaac:	f7ff fe5e 	bl	800a76c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800aab0:	2300      	movs	r3, #0
}
 800aab2:	4618      	mov	r0, r3
 800aab4:	3708      	adds	r7, #8
 800aab6:	46bd      	mov	sp, r7
 800aab8:	bd80      	pop	{r7, pc}

0800aaba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800aaba:	b580      	push	{r7, lr}
 800aabc:	b08c      	sub	sp, #48	; 0x30
 800aabe:	af00      	add	r7, sp, #0
 800aac0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aac8:	b2db      	uxtb	r3, r3
 800aaca:	2b22      	cmp	r3, #34	; 0x22
 800aacc:	f040 80ab 	bne.w	800ac26 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	689b      	ldr	r3, [r3, #8]
 800aad4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aad8:	d117      	bne.n	800ab0a <UART_Receive_IT+0x50>
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	691b      	ldr	r3, [r3, #16]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d113      	bne.n	800ab0a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800aae2:	2300      	movs	r3, #0
 800aae4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaea:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	685b      	ldr	r3, [r3, #4]
 800aaf2:	b29b      	uxth	r3, r3
 800aaf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aaf8:	b29a      	uxth	r2, r3
 800aafa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aafc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab02:	1c9a      	adds	r2, r3, #2
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	629a      	str	r2, [r3, #40]	; 0x28
 800ab08:	e026      	b.n	800ab58 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab0e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800ab10:	2300      	movs	r3, #0
 800ab12:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	689b      	ldr	r3, [r3, #8]
 800ab18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab1c:	d007      	beq.n	800ab2e <UART_Receive_IT+0x74>
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	689b      	ldr	r3, [r3, #8]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d10a      	bne.n	800ab3c <UART_Receive_IT+0x82>
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	691b      	ldr	r3, [r3, #16]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d106      	bne.n	800ab3c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	685b      	ldr	r3, [r3, #4]
 800ab34:	b2da      	uxtb	r2, r3
 800ab36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab38:	701a      	strb	r2, [r3, #0]
 800ab3a:	e008      	b.n	800ab4e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	685b      	ldr	r3, [r3, #4]
 800ab42:	b2db      	uxtb	r3, r3
 800ab44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab48:	b2da      	uxtb	r2, r3
 800ab4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab4c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab52:	1c5a      	adds	r2, r3, #1
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ab5c:	b29b      	uxth	r3, r3
 800ab5e:	3b01      	subs	r3, #1
 800ab60:	b29b      	uxth	r3, r3
 800ab62:	687a      	ldr	r2, [r7, #4]
 800ab64:	4619      	mov	r1, r3
 800ab66:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d15a      	bne.n	800ac22 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	68da      	ldr	r2, [r3, #12]
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	f022 0220 	bic.w	r2, r2, #32
 800ab7a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	68da      	ldr	r2, [r3, #12]
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ab8a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	695a      	ldr	r2, [r3, #20]
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	f022 0201 	bic.w	r2, r2, #1
 800ab9a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2220      	movs	r2, #32
 800aba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aba8:	2b01      	cmp	r3, #1
 800abaa:	d135      	bne.n	800ac18 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2200      	movs	r2, #0
 800abb0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	330c      	adds	r3, #12
 800abb8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abba:	697b      	ldr	r3, [r7, #20]
 800abbc:	e853 3f00 	ldrex	r3, [r3]
 800abc0:	613b      	str	r3, [r7, #16]
   return(result);
 800abc2:	693b      	ldr	r3, [r7, #16]
 800abc4:	f023 0310 	bic.w	r3, r3, #16
 800abc8:	627b      	str	r3, [r7, #36]	; 0x24
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	330c      	adds	r3, #12
 800abd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abd2:	623a      	str	r2, [r7, #32]
 800abd4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abd6:	69f9      	ldr	r1, [r7, #28]
 800abd8:	6a3a      	ldr	r2, [r7, #32]
 800abda:	e841 2300 	strex	r3, r2, [r1]
 800abde:	61bb      	str	r3, [r7, #24]
   return(result);
 800abe0:	69bb      	ldr	r3, [r7, #24]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d1e5      	bne.n	800abb2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	f003 0310 	and.w	r3, r3, #16
 800abf0:	2b10      	cmp	r3, #16
 800abf2:	d10a      	bne.n	800ac0a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800abf4:	2300      	movs	r3, #0
 800abf6:	60fb      	str	r3, [r7, #12]
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	60fb      	str	r3, [r7, #12]
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	685b      	ldr	r3, [r3, #4]
 800ac06:	60fb      	str	r3, [r7, #12]
 800ac08:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ac0e:	4619      	mov	r1, r3
 800ac10:	6878      	ldr	r0, [r7, #4]
 800ac12:	f7ff fdbf 	bl	800a794 <HAL_UARTEx_RxEventCallback>
 800ac16:	e002      	b.n	800ac1e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ac18:	6878      	ldr	r0, [r7, #4]
 800ac1a:	f7f8 fab5 	bl	8003188 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800ac1e:	2300      	movs	r3, #0
 800ac20:	e002      	b.n	800ac28 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800ac22:	2300      	movs	r3, #0
 800ac24:	e000      	b.n	800ac28 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800ac26:	2302      	movs	r3, #2
  }
}
 800ac28:	4618      	mov	r0, r3
 800ac2a:	3730      	adds	r7, #48	; 0x30
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	bd80      	pop	{r7, pc}

0800ac30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ac30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac34:	b09f      	sub	sp, #124	; 0x7c
 800ac36:	af00      	add	r7, sp, #0
 800ac38:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ac3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	691b      	ldr	r3, [r3, #16]
 800ac40:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ac44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac46:	68d9      	ldr	r1, [r3, #12]
 800ac48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac4a:	681a      	ldr	r2, [r3, #0]
 800ac4c:	ea40 0301 	orr.w	r3, r0, r1
 800ac50:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ac52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac54:	689a      	ldr	r2, [r3, #8]
 800ac56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac58:	691b      	ldr	r3, [r3, #16]
 800ac5a:	431a      	orrs	r2, r3
 800ac5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac5e:	695b      	ldr	r3, [r3, #20]
 800ac60:	431a      	orrs	r2, r3
 800ac62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac64:	69db      	ldr	r3, [r3, #28]
 800ac66:	4313      	orrs	r3, r2
 800ac68:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800ac6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	68db      	ldr	r3, [r3, #12]
 800ac70:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800ac74:	f021 010c 	bic.w	r1, r1, #12
 800ac78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac7a:	681a      	ldr	r2, [r3, #0]
 800ac7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ac7e:	430b      	orrs	r3, r1
 800ac80:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ac82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	695b      	ldr	r3, [r3, #20]
 800ac88:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800ac8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac8e:	6999      	ldr	r1, [r3, #24]
 800ac90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac92:	681a      	ldr	r2, [r3, #0]
 800ac94:	ea40 0301 	orr.w	r3, r0, r1
 800ac98:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ac9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac9c:	681a      	ldr	r2, [r3, #0]
 800ac9e:	4bc5      	ldr	r3, [pc, #788]	; (800afb4 <UART_SetConfig+0x384>)
 800aca0:	429a      	cmp	r2, r3
 800aca2:	d004      	beq.n	800acae <UART_SetConfig+0x7e>
 800aca4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aca6:	681a      	ldr	r2, [r3, #0]
 800aca8:	4bc3      	ldr	r3, [pc, #780]	; (800afb8 <UART_SetConfig+0x388>)
 800acaa:	429a      	cmp	r2, r3
 800acac:	d103      	bne.n	800acb6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800acae:	f7fd fd79 	bl	80087a4 <HAL_RCC_GetPCLK2Freq>
 800acb2:	6778      	str	r0, [r7, #116]	; 0x74
 800acb4:	e002      	b.n	800acbc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800acb6:	f7fd fd61 	bl	800877c <HAL_RCC_GetPCLK1Freq>
 800acba:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800acbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800acbe:	69db      	ldr	r3, [r3, #28]
 800acc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800acc4:	f040 80b6 	bne.w	800ae34 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800acc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800acca:	461c      	mov	r4, r3
 800accc:	f04f 0500 	mov.w	r5, #0
 800acd0:	4622      	mov	r2, r4
 800acd2:	462b      	mov	r3, r5
 800acd4:	1891      	adds	r1, r2, r2
 800acd6:	6439      	str	r1, [r7, #64]	; 0x40
 800acd8:	415b      	adcs	r3, r3
 800acda:	647b      	str	r3, [r7, #68]	; 0x44
 800acdc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ace0:	1912      	adds	r2, r2, r4
 800ace2:	eb45 0303 	adc.w	r3, r5, r3
 800ace6:	f04f 0000 	mov.w	r0, #0
 800acea:	f04f 0100 	mov.w	r1, #0
 800acee:	00d9      	lsls	r1, r3, #3
 800acf0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800acf4:	00d0      	lsls	r0, r2, #3
 800acf6:	4602      	mov	r2, r0
 800acf8:	460b      	mov	r3, r1
 800acfa:	1911      	adds	r1, r2, r4
 800acfc:	6639      	str	r1, [r7, #96]	; 0x60
 800acfe:	416b      	adcs	r3, r5
 800ad00:	667b      	str	r3, [r7, #100]	; 0x64
 800ad02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad04:	685b      	ldr	r3, [r3, #4]
 800ad06:	461a      	mov	r2, r3
 800ad08:	f04f 0300 	mov.w	r3, #0
 800ad0c:	1891      	adds	r1, r2, r2
 800ad0e:	63b9      	str	r1, [r7, #56]	; 0x38
 800ad10:	415b      	adcs	r3, r3
 800ad12:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad14:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ad18:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800ad1c:	f7f5 ffbc 	bl	8000c98 <__aeabi_uldivmod>
 800ad20:	4602      	mov	r2, r0
 800ad22:	460b      	mov	r3, r1
 800ad24:	4ba5      	ldr	r3, [pc, #660]	; (800afbc <UART_SetConfig+0x38c>)
 800ad26:	fba3 2302 	umull	r2, r3, r3, r2
 800ad2a:	095b      	lsrs	r3, r3, #5
 800ad2c:	011e      	lsls	r6, r3, #4
 800ad2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ad30:	461c      	mov	r4, r3
 800ad32:	f04f 0500 	mov.w	r5, #0
 800ad36:	4622      	mov	r2, r4
 800ad38:	462b      	mov	r3, r5
 800ad3a:	1891      	adds	r1, r2, r2
 800ad3c:	6339      	str	r1, [r7, #48]	; 0x30
 800ad3e:	415b      	adcs	r3, r3
 800ad40:	637b      	str	r3, [r7, #52]	; 0x34
 800ad42:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800ad46:	1912      	adds	r2, r2, r4
 800ad48:	eb45 0303 	adc.w	r3, r5, r3
 800ad4c:	f04f 0000 	mov.w	r0, #0
 800ad50:	f04f 0100 	mov.w	r1, #0
 800ad54:	00d9      	lsls	r1, r3, #3
 800ad56:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ad5a:	00d0      	lsls	r0, r2, #3
 800ad5c:	4602      	mov	r2, r0
 800ad5e:	460b      	mov	r3, r1
 800ad60:	1911      	adds	r1, r2, r4
 800ad62:	65b9      	str	r1, [r7, #88]	; 0x58
 800ad64:	416b      	adcs	r3, r5
 800ad66:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ad68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad6a:	685b      	ldr	r3, [r3, #4]
 800ad6c:	461a      	mov	r2, r3
 800ad6e:	f04f 0300 	mov.w	r3, #0
 800ad72:	1891      	adds	r1, r2, r2
 800ad74:	62b9      	str	r1, [r7, #40]	; 0x28
 800ad76:	415b      	adcs	r3, r3
 800ad78:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ad7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800ad7e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800ad82:	f7f5 ff89 	bl	8000c98 <__aeabi_uldivmod>
 800ad86:	4602      	mov	r2, r0
 800ad88:	460b      	mov	r3, r1
 800ad8a:	4b8c      	ldr	r3, [pc, #560]	; (800afbc <UART_SetConfig+0x38c>)
 800ad8c:	fba3 1302 	umull	r1, r3, r3, r2
 800ad90:	095b      	lsrs	r3, r3, #5
 800ad92:	2164      	movs	r1, #100	; 0x64
 800ad94:	fb01 f303 	mul.w	r3, r1, r3
 800ad98:	1ad3      	subs	r3, r2, r3
 800ad9a:	00db      	lsls	r3, r3, #3
 800ad9c:	3332      	adds	r3, #50	; 0x32
 800ad9e:	4a87      	ldr	r2, [pc, #540]	; (800afbc <UART_SetConfig+0x38c>)
 800ada0:	fba2 2303 	umull	r2, r3, r2, r3
 800ada4:	095b      	lsrs	r3, r3, #5
 800ada6:	005b      	lsls	r3, r3, #1
 800ada8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800adac:	441e      	add	r6, r3
 800adae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800adb0:	4618      	mov	r0, r3
 800adb2:	f04f 0100 	mov.w	r1, #0
 800adb6:	4602      	mov	r2, r0
 800adb8:	460b      	mov	r3, r1
 800adba:	1894      	adds	r4, r2, r2
 800adbc:	623c      	str	r4, [r7, #32]
 800adbe:	415b      	adcs	r3, r3
 800adc0:	627b      	str	r3, [r7, #36]	; 0x24
 800adc2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800adc6:	1812      	adds	r2, r2, r0
 800adc8:	eb41 0303 	adc.w	r3, r1, r3
 800adcc:	f04f 0400 	mov.w	r4, #0
 800add0:	f04f 0500 	mov.w	r5, #0
 800add4:	00dd      	lsls	r5, r3, #3
 800add6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800adda:	00d4      	lsls	r4, r2, #3
 800addc:	4622      	mov	r2, r4
 800adde:	462b      	mov	r3, r5
 800ade0:	1814      	adds	r4, r2, r0
 800ade2:	653c      	str	r4, [r7, #80]	; 0x50
 800ade4:	414b      	adcs	r3, r1
 800ade6:	657b      	str	r3, [r7, #84]	; 0x54
 800ade8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800adea:	685b      	ldr	r3, [r3, #4]
 800adec:	461a      	mov	r2, r3
 800adee:	f04f 0300 	mov.w	r3, #0
 800adf2:	1891      	adds	r1, r2, r2
 800adf4:	61b9      	str	r1, [r7, #24]
 800adf6:	415b      	adcs	r3, r3
 800adf8:	61fb      	str	r3, [r7, #28]
 800adfa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800adfe:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800ae02:	f7f5 ff49 	bl	8000c98 <__aeabi_uldivmod>
 800ae06:	4602      	mov	r2, r0
 800ae08:	460b      	mov	r3, r1
 800ae0a:	4b6c      	ldr	r3, [pc, #432]	; (800afbc <UART_SetConfig+0x38c>)
 800ae0c:	fba3 1302 	umull	r1, r3, r3, r2
 800ae10:	095b      	lsrs	r3, r3, #5
 800ae12:	2164      	movs	r1, #100	; 0x64
 800ae14:	fb01 f303 	mul.w	r3, r1, r3
 800ae18:	1ad3      	subs	r3, r2, r3
 800ae1a:	00db      	lsls	r3, r3, #3
 800ae1c:	3332      	adds	r3, #50	; 0x32
 800ae1e:	4a67      	ldr	r2, [pc, #412]	; (800afbc <UART_SetConfig+0x38c>)
 800ae20:	fba2 2303 	umull	r2, r3, r2, r3
 800ae24:	095b      	lsrs	r3, r3, #5
 800ae26:	f003 0207 	and.w	r2, r3, #7
 800ae2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	4432      	add	r2, r6
 800ae30:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ae32:	e0b9      	b.n	800afa8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ae34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ae36:	461c      	mov	r4, r3
 800ae38:	f04f 0500 	mov.w	r5, #0
 800ae3c:	4622      	mov	r2, r4
 800ae3e:	462b      	mov	r3, r5
 800ae40:	1891      	adds	r1, r2, r2
 800ae42:	6139      	str	r1, [r7, #16]
 800ae44:	415b      	adcs	r3, r3
 800ae46:	617b      	str	r3, [r7, #20]
 800ae48:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ae4c:	1912      	adds	r2, r2, r4
 800ae4e:	eb45 0303 	adc.w	r3, r5, r3
 800ae52:	f04f 0000 	mov.w	r0, #0
 800ae56:	f04f 0100 	mov.w	r1, #0
 800ae5a:	00d9      	lsls	r1, r3, #3
 800ae5c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ae60:	00d0      	lsls	r0, r2, #3
 800ae62:	4602      	mov	r2, r0
 800ae64:	460b      	mov	r3, r1
 800ae66:	eb12 0804 	adds.w	r8, r2, r4
 800ae6a:	eb43 0905 	adc.w	r9, r3, r5
 800ae6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae70:	685b      	ldr	r3, [r3, #4]
 800ae72:	4618      	mov	r0, r3
 800ae74:	f04f 0100 	mov.w	r1, #0
 800ae78:	f04f 0200 	mov.w	r2, #0
 800ae7c:	f04f 0300 	mov.w	r3, #0
 800ae80:	008b      	lsls	r3, r1, #2
 800ae82:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800ae86:	0082      	lsls	r2, r0, #2
 800ae88:	4640      	mov	r0, r8
 800ae8a:	4649      	mov	r1, r9
 800ae8c:	f7f5 ff04 	bl	8000c98 <__aeabi_uldivmod>
 800ae90:	4602      	mov	r2, r0
 800ae92:	460b      	mov	r3, r1
 800ae94:	4b49      	ldr	r3, [pc, #292]	; (800afbc <UART_SetConfig+0x38c>)
 800ae96:	fba3 2302 	umull	r2, r3, r3, r2
 800ae9a:	095b      	lsrs	r3, r3, #5
 800ae9c:	011e      	lsls	r6, r3, #4
 800ae9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aea0:	4618      	mov	r0, r3
 800aea2:	f04f 0100 	mov.w	r1, #0
 800aea6:	4602      	mov	r2, r0
 800aea8:	460b      	mov	r3, r1
 800aeaa:	1894      	adds	r4, r2, r2
 800aeac:	60bc      	str	r4, [r7, #8]
 800aeae:	415b      	adcs	r3, r3
 800aeb0:	60fb      	str	r3, [r7, #12]
 800aeb2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800aeb6:	1812      	adds	r2, r2, r0
 800aeb8:	eb41 0303 	adc.w	r3, r1, r3
 800aebc:	f04f 0400 	mov.w	r4, #0
 800aec0:	f04f 0500 	mov.w	r5, #0
 800aec4:	00dd      	lsls	r5, r3, #3
 800aec6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800aeca:	00d4      	lsls	r4, r2, #3
 800aecc:	4622      	mov	r2, r4
 800aece:	462b      	mov	r3, r5
 800aed0:	1814      	adds	r4, r2, r0
 800aed2:	64bc      	str	r4, [r7, #72]	; 0x48
 800aed4:	414b      	adcs	r3, r1
 800aed6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aed8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aeda:	685b      	ldr	r3, [r3, #4]
 800aedc:	4618      	mov	r0, r3
 800aede:	f04f 0100 	mov.w	r1, #0
 800aee2:	f04f 0200 	mov.w	r2, #0
 800aee6:	f04f 0300 	mov.w	r3, #0
 800aeea:	008b      	lsls	r3, r1, #2
 800aeec:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800aef0:	0082      	lsls	r2, r0, #2
 800aef2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800aef6:	f7f5 fecf 	bl	8000c98 <__aeabi_uldivmod>
 800aefa:	4602      	mov	r2, r0
 800aefc:	460b      	mov	r3, r1
 800aefe:	4b2f      	ldr	r3, [pc, #188]	; (800afbc <UART_SetConfig+0x38c>)
 800af00:	fba3 1302 	umull	r1, r3, r3, r2
 800af04:	095b      	lsrs	r3, r3, #5
 800af06:	2164      	movs	r1, #100	; 0x64
 800af08:	fb01 f303 	mul.w	r3, r1, r3
 800af0c:	1ad3      	subs	r3, r2, r3
 800af0e:	011b      	lsls	r3, r3, #4
 800af10:	3332      	adds	r3, #50	; 0x32
 800af12:	4a2a      	ldr	r2, [pc, #168]	; (800afbc <UART_SetConfig+0x38c>)
 800af14:	fba2 2303 	umull	r2, r3, r2, r3
 800af18:	095b      	lsrs	r3, r3, #5
 800af1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800af1e:	441e      	add	r6, r3
 800af20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800af22:	4618      	mov	r0, r3
 800af24:	f04f 0100 	mov.w	r1, #0
 800af28:	4602      	mov	r2, r0
 800af2a:	460b      	mov	r3, r1
 800af2c:	1894      	adds	r4, r2, r2
 800af2e:	603c      	str	r4, [r7, #0]
 800af30:	415b      	adcs	r3, r3
 800af32:	607b      	str	r3, [r7, #4]
 800af34:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af38:	1812      	adds	r2, r2, r0
 800af3a:	eb41 0303 	adc.w	r3, r1, r3
 800af3e:	f04f 0400 	mov.w	r4, #0
 800af42:	f04f 0500 	mov.w	r5, #0
 800af46:	00dd      	lsls	r5, r3, #3
 800af48:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800af4c:	00d4      	lsls	r4, r2, #3
 800af4e:	4622      	mov	r2, r4
 800af50:	462b      	mov	r3, r5
 800af52:	eb12 0a00 	adds.w	sl, r2, r0
 800af56:	eb43 0b01 	adc.w	fp, r3, r1
 800af5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af5c:	685b      	ldr	r3, [r3, #4]
 800af5e:	4618      	mov	r0, r3
 800af60:	f04f 0100 	mov.w	r1, #0
 800af64:	f04f 0200 	mov.w	r2, #0
 800af68:	f04f 0300 	mov.w	r3, #0
 800af6c:	008b      	lsls	r3, r1, #2
 800af6e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800af72:	0082      	lsls	r2, r0, #2
 800af74:	4650      	mov	r0, sl
 800af76:	4659      	mov	r1, fp
 800af78:	f7f5 fe8e 	bl	8000c98 <__aeabi_uldivmod>
 800af7c:	4602      	mov	r2, r0
 800af7e:	460b      	mov	r3, r1
 800af80:	4b0e      	ldr	r3, [pc, #56]	; (800afbc <UART_SetConfig+0x38c>)
 800af82:	fba3 1302 	umull	r1, r3, r3, r2
 800af86:	095b      	lsrs	r3, r3, #5
 800af88:	2164      	movs	r1, #100	; 0x64
 800af8a:	fb01 f303 	mul.w	r3, r1, r3
 800af8e:	1ad3      	subs	r3, r2, r3
 800af90:	011b      	lsls	r3, r3, #4
 800af92:	3332      	adds	r3, #50	; 0x32
 800af94:	4a09      	ldr	r2, [pc, #36]	; (800afbc <UART_SetConfig+0x38c>)
 800af96:	fba2 2303 	umull	r2, r3, r2, r3
 800af9a:	095b      	lsrs	r3, r3, #5
 800af9c:	f003 020f 	and.w	r2, r3, #15
 800afa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	4432      	add	r2, r6
 800afa6:	609a      	str	r2, [r3, #8]
}
 800afa8:	bf00      	nop
 800afaa:	377c      	adds	r7, #124	; 0x7c
 800afac:	46bd      	mov	sp, r7
 800afae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afb2:	bf00      	nop
 800afb4:	40011000 	.word	0x40011000
 800afb8:	40011400 	.word	0x40011400
 800afbc:	51eb851f 	.word	0x51eb851f

0800afc0 <atoi>:
 800afc0:	220a      	movs	r2, #10
 800afc2:	2100      	movs	r1, #0
 800afc4:	f001 bc50 	b.w	800c868 <strtol>

0800afc8 <__errno>:
 800afc8:	4b01      	ldr	r3, [pc, #4]	; (800afd0 <__errno+0x8>)
 800afca:	6818      	ldr	r0, [r3, #0]
 800afcc:	4770      	bx	lr
 800afce:	bf00      	nop
 800afd0:	20000074 	.word	0x20000074

0800afd4 <__libc_init_array>:
 800afd4:	b570      	push	{r4, r5, r6, lr}
 800afd6:	4d0d      	ldr	r5, [pc, #52]	; (800b00c <__libc_init_array+0x38>)
 800afd8:	4c0d      	ldr	r4, [pc, #52]	; (800b010 <__libc_init_array+0x3c>)
 800afda:	1b64      	subs	r4, r4, r5
 800afdc:	10a4      	asrs	r4, r4, #2
 800afde:	2600      	movs	r6, #0
 800afe0:	42a6      	cmp	r6, r4
 800afe2:	d109      	bne.n	800aff8 <__libc_init_array+0x24>
 800afe4:	4d0b      	ldr	r5, [pc, #44]	; (800b014 <__libc_init_array+0x40>)
 800afe6:	4c0c      	ldr	r4, [pc, #48]	; (800b018 <__libc_init_array+0x44>)
 800afe8:	f004 fb12 	bl	800f610 <_init>
 800afec:	1b64      	subs	r4, r4, r5
 800afee:	10a4      	asrs	r4, r4, #2
 800aff0:	2600      	movs	r6, #0
 800aff2:	42a6      	cmp	r6, r4
 800aff4:	d105      	bne.n	800b002 <__libc_init_array+0x2e>
 800aff6:	bd70      	pop	{r4, r5, r6, pc}
 800aff8:	f855 3b04 	ldr.w	r3, [r5], #4
 800affc:	4798      	blx	r3
 800affe:	3601      	adds	r6, #1
 800b000:	e7ee      	b.n	800afe0 <__libc_init_array+0xc>
 800b002:	f855 3b04 	ldr.w	r3, [r5], #4
 800b006:	4798      	blx	r3
 800b008:	3601      	adds	r6, #1
 800b00a:	e7f2      	b.n	800aff2 <__libc_init_array+0x1e>
 800b00c:	08010280 	.word	0x08010280
 800b010:	08010280 	.word	0x08010280
 800b014:	08010280 	.word	0x08010280
 800b018:	08010284 	.word	0x08010284

0800b01c <memcpy>:
 800b01c:	440a      	add	r2, r1
 800b01e:	4291      	cmp	r1, r2
 800b020:	f100 33ff 	add.w	r3, r0, #4294967295
 800b024:	d100      	bne.n	800b028 <memcpy+0xc>
 800b026:	4770      	bx	lr
 800b028:	b510      	push	{r4, lr}
 800b02a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b02e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b032:	4291      	cmp	r1, r2
 800b034:	d1f9      	bne.n	800b02a <memcpy+0xe>
 800b036:	bd10      	pop	{r4, pc}

0800b038 <memset>:
 800b038:	4402      	add	r2, r0
 800b03a:	4603      	mov	r3, r0
 800b03c:	4293      	cmp	r3, r2
 800b03e:	d100      	bne.n	800b042 <memset+0xa>
 800b040:	4770      	bx	lr
 800b042:	f803 1b01 	strb.w	r1, [r3], #1
 800b046:	e7f9      	b.n	800b03c <memset+0x4>

0800b048 <__cvt>:
 800b048:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b04c:	ec55 4b10 	vmov	r4, r5, d0
 800b050:	2d00      	cmp	r5, #0
 800b052:	460e      	mov	r6, r1
 800b054:	4619      	mov	r1, r3
 800b056:	462b      	mov	r3, r5
 800b058:	bfbb      	ittet	lt
 800b05a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b05e:	461d      	movlt	r5, r3
 800b060:	2300      	movge	r3, #0
 800b062:	232d      	movlt	r3, #45	; 0x2d
 800b064:	700b      	strb	r3, [r1, #0]
 800b066:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b068:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b06c:	4691      	mov	r9, r2
 800b06e:	f023 0820 	bic.w	r8, r3, #32
 800b072:	bfbc      	itt	lt
 800b074:	4622      	movlt	r2, r4
 800b076:	4614      	movlt	r4, r2
 800b078:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b07c:	d005      	beq.n	800b08a <__cvt+0x42>
 800b07e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b082:	d100      	bne.n	800b086 <__cvt+0x3e>
 800b084:	3601      	adds	r6, #1
 800b086:	2102      	movs	r1, #2
 800b088:	e000      	b.n	800b08c <__cvt+0x44>
 800b08a:	2103      	movs	r1, #3
 800b08c:	ab03      	add	r3, sp, #12
 800b08e:	9301      	str	r3, [sp, #4]
 800b090:	ab02      	add	r3, sp, #8
 800b092:	9300      	str	r3, [sp, #0]
 800b094:	ec45 4b10 	vmov	d0, r4, r5
 800b098:	4653      	mov	r3, sl
 800b09a:	4632      	mov	r2, r6
 800b09c:	f001 fc98 	bl	800c9d0 <_dtoa_r>
 800b0a0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b0a4:	4607      	mov	r7, r0
 800b0a6:	d102      	bne.n	800b0ae <__cvt+0x66>
 800b0a8:	f019 0f01 	tst.w	r9, #1
 800b0ac:	d022      	beq.n	800b0f4 <__cvt+0xac>
 800b0ae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b0b2:	eb07 0906 	add.w	r9, r7, r6
 800b0b6:	d110      	bne.n	800b0da <__cvt+0x92>
 800b0b8:	783b      	ldrb	r3, [r7, #0]
 800b0ba:	2b30      	cmp	r3, #48	; 0x30
 800b0bc:	d10a      	bne.n	800b0d4 <__cvt+0x8c>
 800b0be:	2200      	movs	r2, #0
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	4620      	mov	r0, r4
 800b0c4:	4629      	mov	r1, r5
 800b0c6:	f7f5 fd07 	bl	8000ad8 <__aeabi_dcmpeq>
 800b0ca:	b918      	cbnz	r0, 800b0d4 <__cvt+0x8c>
 800b0cc:	f1c6 0601 	rsb	r6, r6, #1
 800b0d0:	f8ca 6000 	str.w	r6, [sl]
 800b0d4:	f8da 3000 	ldr.w	r3, [sl]
 800b0d8:	4499      	add	r9, r3
 800b0da:	2200      	movs	r2, #0
 800b0dc:	2300      	movs	r3, #0
 800b0de:	4620      	mov	r0, r4
 800b0e0:	4629      	mov	r1, r5
 800b0e2:	f7f5 fcf9 	bl	8000ad8 <__aeabi_dcmpeq>
 800b0e6:	b108      	cbz	r0, 800b0ec <__cvt+0xa4>
 800b0e8:	f8cd 900c 	str.w	r9, [sp, #12]
 800b0ec:	2230      	movs	r2, #48	; 0x30
 800b0ee:	9b03      	ldr	r3, [sp, #12]
 800b0f0:	454b      	cmp	r3, r9
 800b0f2:	d307      	bcc.n	800b104 <__cvt+0xbc>
 800b0f4:	9b03      	ldr	r3, [sp, #12]
 800b0f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b0f8:	1bdb      	subs	r3, r3, r7
 800b0fa:	4638      	mov	r0, r7
 800b0fc:	6013      	str	r3, [r2, #0]
 800b0fe:	b004      	add	sp, #16
 800b100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b104:	1c59      	adds	r1, r3, #1
 800b106:	9103      	str	r1, [sp, #12]
 800b108:	701a      	strb	r2, [r3, #0]
 800b10a:	e7f0      	b.n	800b0ee <__cvt+0xa6>

0800b10c <__exponent>:
 800b10c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b10e:	4603      	mov	r3, r0
 800b110:	2900      	cmp	r1, #0
 800b112:	bfb8      	it	lt
 800b114:	4249      	neglt	r1, r1
 800b116:	f803 2b02 	strb.w	r2, [r3], #2
 800b11a:	bfb4      	ite	lt
 800b11c:	222d      	movlt	r2, #45	; 0x2d
 800b11e:	222b      	movge	r2, #43	; 0x2b
 800b120:	2909      	cmp	r1, #9
 800b122:	7042      	strb	r2, [r0, #1]
 800b124:	dd2a      	ble.n	800b17c <__exponent+0x70>
 800b126:	f10d 0407 	add.w	r4, sp, #7
 800b12a:	46a4      	mov	ip, r4
 800b12c:	270a      	movs	r7, #10
 800b12e:	46a6      	mov	lr, r4
 800b130:	460a      	mov	r2, r1
 800b132:	fb91 f6f7 	sdiv	r6, r1, r7
 800b136:	fb07 1516 	mls	r5, r7, r6, r1
 800b13a:	3530      	adds	r5, #48	; 0x30
 800b13c:	2a63      	cmp	r2, #99	; 0x63
 800b13e:	f104 34ff 	add.w	r4, r4, #4294967295
 800b142:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b146:	4631      	mov	r1, r6
 800b148:	dcf1      	bgt.n	800b12e <__exponent+0x22>
 800b14a:	3130      	adds	r1, #48	; 0x30
 800b14c:	f1ae 0502 	sub.w	r5, lr, #2
 800b150:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b154:	1c44      	adds	r4, r0, #1
 800b156:	4629      	mov	r1, r5
 800b158:	4561      	cmp	r1, ip
 800b15a:	d30a      	bcc.n	800b172 <__exponent+0x66>
 800b15c:	f10d 0209 	add.w	r2, sp, #9
 800b160:	eba2 020e 	sub.w	r2, r2, lr
 800b164:	4565      	cmp	r5, ip
 800b166:	bf88      	it	hi
 800b168:	2200      	movhi	r2, #0
 800b16a:	4413      	add	r3, r2
 800b16c:	1a18      	subs	r0, r3, r0
 800b16e:	b003      	add	sp, #12
 800b170:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b172:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b176:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b17a:	e7ed      	b.n	800b158 <__exponent+0x4c>
 800b17c:	2330      	movs	r3, #48	; 0x30
 800b17e:	3130      	adds	r1, #48	; 0x30
 800b180:	7083      	strb	r3, [r0, #2]
 800b182:	70c1      	strb	r1, [r0, #3]
 800b184:	1d03      	adds	r3, r0, #4
 800b186:	e7f1      	b.n	800b16c <__exponent+0x60>

0800b188 <_printf_float>:
 800b188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b18c:	ed2d 8b02 	vpush	{d8}
 800b190:	b08d      	sub	sp, #52	; 0x34
 800b192:	460c      	mov	r4, r1
 800b194:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b198:	4616      	mov	r6, r2
 800b19a:	461f      	mov	r7, r3
 800b19c:	4605      	mov	r5, r0
 800b19e:	f002 fe79 	bl	800de94 <_localeconv_r>
 800b1a2:	f8d0 a000 	ldr.w	sl, [r0]
 800b1a6:	4650      	mov	r0, sl
 800b1a8:	f7f5 f81a 	bl	80001e0 <strlen>
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	930a      	str	r3, [sp, #40]	; 0x28
 800b1b0:	6823      	ldr	r3, [r4, #0]
 800b1b2:	9305      	str	r3, [sp, #20]
 800b1b4:	f8d8 3000 	ldr.w	r3, [r8]
 800b1b8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b1bc:	3307      	adds	r3, #7
 800b1be:	f023 0307 	bic.w	r3, r3, #7
 800b1c2:	f103 0208 	add.w	r2, r3, #8
 800b1c6:	f8c8 2000 	str.w	r2, [r8]
 800b1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ce:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b1d2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b1d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b1da:	9307      	str	r3, [sp, #28]
 800b1dc:	f8cd 8018 	str.w	r8, [sp, #24]
 800b1e0:	ee08 0a10 	vmov	s16, r0
 800b1e4:	4b9f      	ldr	r3, [pc, #636]	; (800b464 <_printf_float+0x2dc>)
 800b1e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b1ea:	f04f 32ff 	mov.w	r2, #4294967295
 800b1ee:	f7f5 fca5 	bl	8000b3c <__aeabi_dcmpun>
 800b1f2:	bb88      	cbnz	r0, 800b258 <_printf_float+0xd0>
 800b1f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b1f8:	4b9a      	ldr	r3, [pc, #616]	; (800b464 <_printf_float+0x2dc>)
 800b1fa:	f04f 32ff 	mov.w	r2, #4294967295
 800b1fe:	f7f5 fc7f 	bl	8000b00 <__aeabi_dcmple>
 800b202:	bb48      	cbnz	r0, 800b258 <_printf_float+0xd0>
 800b204:	2200      	movs	r2, #0
 800b206:	2300      	movs	r3, #0
 800b208:	4640      	mov	r0, r8
 800b20a:	4649      	mov	r1, r9
 800b20c:	f7f5 fc6e 	bl	8000aec <__aeabi_dcmplt>
 800b210:	b110      	cbz	r0, 800b218 <_printf_float+0x90>
 800b212:	232d      	movs	r3, #45	; 0x2d
 800b214:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b218:	4b93      	ldr	r3, [pc, #588]	; (800b468 <_printf_float+0x2e0>)
 800b21a:	4894      	ldr	r0, [pc, #592]	; (800b46c <_printf_float+0x2e4>)
 800b21c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b220:	bf94      	ite	ls
 800b222:	4698      	movls	r8, r3
 800b224:	4680      	movhi	r8, r0
 800b226:	2303      	movs	r3, #3
 800b228:	6123      	str	r3, [r4, #16]
 800b22a:	9b05      	ldr	r3, [sp, #20]
 800b22c:	f023 0204 	bic.w	r2, r3, #4
 800b230:	6022      	str	r2, [r4, #0]
 800b232:	f04f 0900 	mov.w	r9, #0
 800b236:	9700      	str	r7, [sp, #0]
 800b238:	4633      	mov	r3, r6
 800b23a:	aa0b      	add	r2, sp, #44	; 0x2c
 800b23c:	4621      	mov	r1, r4
 800b23e:	4628      	mov	r0, r5
 800b240:	f000 f9d8 	bl	800b5f4 <_printf_common>
 800b244:	3001      	adds	r0, #1
 800b246:	f040 8090 	bne.w	800b36a <_printf_float+0x1e2>
 800b24a:	f04f 30ff 	mov.w	r0, #4294967295
 800b24e:	b00d      	add	sp, #52	; 0x34
 800b250:	ecbd 8b02 	vpop	{d8}
 800b254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b258:	4642      	mov	r2, r8
 800b25a:	464b      	mov	r3, r9
 800b25c:	4640      	mov	r0, r8
 800b25e:	4649      	mov	r1, r9
 800b260:	f7f5 fc6c 	bl	8000b3c <__aeabi_dcmpun>
 800b264:	b140      	cbz	r0, 800b278 <_printf_float+0xf0>
 800b266:	464b      	mov	r3, r9
 800b268:	2b00      	cmp	r3, #0
 800b26a:	bfbc      	itt	lt
 800b26c:	232d      	movlt	r3, #45	; 0x2d
 800b26e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b272:	487f      	ldr	r0, [pc, #508]	; (800b470 <_printf_float+0x2e8>)
 800b274:	4b7f      	ldr	r3, [pc, #508]	; (800b474 <_printf_float+0x2ec>)
 800b276:	e7d1      	b.n	800b21c <_printf_float+0x94>
 800b278:	6863      	ldr	r3, [r4, #4]
 800b27a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b27e:	9206      	str	r2, [sp, #24]
 800b280:	1c5a      	adds	r2, r3, #1
 800b282:	d13f      	bne.n	800b304 <_printf_float+0x17c>
 800b284:	2306      	movs	r3, #6
 800b286:	6063      	str	r3, [r4, #4]
 800b288:	9b05      	ldr	r3, [sp, #20]
 800b28a:	6861      	ldr	r1, [r4, #4]
 800b28c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b290:	2300      	movs	r3, #0
 800b292:	9303      	str	r3, [sp, #12]
 800b294:	ab0a      	add	r3, sp, #40	; 0x28
 800b296:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b29a:	ab09      	add	r3, sp, #36	; 0x24
 800b29c:	ec49 8b10 	vmov	d0, r8, r9
 800b2a0:	9300      	str	r3, [sp, #0]
 800b2a2:	6022      	str	r2, [r4, #0]
 800b2a4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b2a8:	4628      	mov	r0, r5
 800b2aa:	f7ff fecd 	bl	800b048 <__cvt>
 800b2ae:	9b06      	ldr	r3, [sp, #24]
 800b2b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b2b2:	2b47      	cmp	r3, #71	; 0x47
 800b2b4:	4680      	mov	r8, r0
 800b2b6:	d108      	bne.n	800b2ca <_printf_float+0x142>
 800b2b8:	1cc8      	adds	r0, r1, #3
 800b2ba:	db02      	blt.n	800b2c2 <_printf_float+0x13a>
 800b2bc:	6863      	ldr	r3, [r4, #4]
 800b2be:	4299      	cmp	r1, r3
 800b2c0:	dd41      	ble.n	800b346 <_printf_float+0x1be>
 800b2c2:	f1ab 0b02 	sub.w	fp, fp, #2
 800b2c6:	fa5f fb8b 	uxtb.w	fp, fp
 800b2ca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b2ce:	d820      	bhi.n	800b312 <_printf_float+0x18a>
 800b2d0:	3901      	subs	r1, #1
 800b2d2:	465a      	mov	r2, fp
 800b2d4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b2d8:	9109      	str	r1, [sp, #36]	; 0x24
 800b2da:	f7ff ff17 	bl	800b10c <__exponent>
 800b2de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b2e0:	1813      	adds	r3, r2, r0
 800b2e2:	2a01      	cmp	r2, #1
 800b2e4:	4681      	mov	r9, r0
 800b2e6:	6123      	str	r3, [r4, #16]
 800b2e8:	dc02      	bgt.n	800b2f0 <_printf_float+0x168>
 800b2ea:	6822      	ldr	r2, [r4, #0]
 800b2ec:	07d2      	lsls	r2, r2, #31
 800b2ee:	d501      	bpl.n	800b2f4 <_printf_float+0x16c>
 800b2f0:	3301      	adds	r3, #1
 800b2f2:	6123      	str	r3, [r4, #16]
 800b2f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d09c      	beq.n	800b236 <_printf_float+0xae>
 800b2fc:	232d      	movs	r3, #45	; 0x2d
 800b2fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b302:	e798      	b.n	800b236 <_printf_float+0xae>
 800b304:	9a06      	ldr	r2, [sp, #24]
 800b306:	2a47      	cmp	r2, #71	; 0x47
 800b308:	d1be      	bne.n	800b288 <_printf_float+0x100>
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d1bc      	bne.n	800b288 <_printf_float+0x100>
 800b30e:	2301      	movs	r3, #1
 800b310:	e7b9      	b.n	800b286 <_printf_float+0xfe>
 800b312:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b316:	d118      	bne.n	800b34a <_printf_float+0x1c2>
 800b318:	2900      	cmp	r1, #0
 800b31a:	6863      	ldr	r3, [r4, #4]
 800b31c:	dd0b      	ble.n	800b336 <_printf_float+0x1ae>
 800b31e:	6121      	str	r1, [r4, #16]
 800b320:	b913      	cbnz	r3, 800b328 <_printf_float+0x1a0>
 800b322:	6822      	ldr	r2, [r4, #0]
 800b324:	07d0      	lsls	r0, r2, #31
 800b326:	d502      	bpl.n	800b32e <_printf_float+0x1a6>
 800b328:	3301      	adds	r3, #1
 800b32a:	440b      	add	r3, r1
 800b32c:	6123      	str	r3, [r4, #16]
 800b32e:	65a1      	str	r1, [r4, #88]	; 0x58
 800b330:	f04f 0900 	mov.w	r9, #0
 800b334:	e7de      	b.n	800b2f4 <_printf_float+0x16c>
 800b336:	b913      	cbnz	r3, 800b33e <_printf_float+0x1b6>
 800b338:	6822      	ldr	r2, [r4, #0]
 800b33a:	07d2      	lsls	r2, r2, #31
 800b33c:	d501      	bpl.n	800b342 <_printf_float+0x1ba>
 800b33e:	3302      	adds	r3, #2
 800b340:	e7f4      	b.n	800b32c <_printf_float+0x1a4>
 800b342:	2301      	movs	r3, #1
 800b344:	e7f2      	b.n	800b32c <_printf_float+0x1a4>
 800b346:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b34a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b34c:	4299      	cmp	r1, r3
 800b34e:	db05      	blt.n	800b35c <_printf_float+0x1d4>
 800b350:	6823      	ldr	r3, [r4, #0]
 800b352:	6121      	str	r1, [r4, #16]
 800b354:	07d8      	lsls	r0, r3, #31
 800b356:	d5ea      	bpl.n	800b32e <_printf_float+0x1a6>
 800b358:	1c4b      	adds	r3, r1, #1
 800b35a:	e7e7      	b.n	800b32c <_printf_float+0x1a4>
 800b35c:	2900      	cmp	r1, #0
 800b35e:	bfd4      	ite	le
 800b360:	f1c1 0202 	rsble	r2, r1, #2
 800b364:	2201      	movgt	r2, #1
 800b366:	4413      	add	r3, r2
 800b368:	e7e0      	b.n	800b32c <_printf_float+0x1a4>
 800b36a:	6823      	ldr	r3, [r4, #0]
 800b36c:	055a      	lsls	r2, r3, #21
 800b36e:	d407      	bmi.n	800b380 <_printf_float+0x1f8>
 800b370:	6923      	ldr	r3, [r4, #16]
 800b372:	4642      	mov	r2, r8
 800b374:	4631      	mov	r1, r6
 800b376:	4628      	mov	r0, r5
 800b378:	47b8      	blx	r7
 800b37a:	3001      	adds	r0, #1
 800b37c:	d12c      	bne.n	800b3d8 <_printf_float+0x250>
 800b37e:	e764      	b.n	800b24a <_printf_float+0xc2>
 800b380:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b384:	f240 80e0 	bls.w	800b548 <_printf_float+0x3c0>
 800b388:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b38c:	2200      	movs	r2, #0
 800b38e:	2300      	movs	r3, #0
 800b390:	f7f5 fba2 	bl	8000ad8 <__aeabi_dcmpeq>
 800b394:	2800      	cmp	r0, #0
 800b396:	d034      	beq.n	800b402 <_printf_float+0x27a>
 800b398:	4a37      	ldr	r2, [pc, #220]	; (800b478 <_printf_float+0x2f0>)
 800b39a:	2301      	movs	r3, #1
 800b39c:	4631      	mov	r1, r6
 800b39e:	4628      	mov	r0, r5
 800b3a0:	47b8      	blx	r7
 800b3a2:	3001      	adds	r0, #1
 800b3a4:	f43f af51 	beq.w	800b24a <_printf_float+0xc2>
 800b3a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b3ac:	429a      	cmp	r2, r3
 800b3ae:	db02      	blt.n	800b3b6 <_printf_float+0x22e>
 800b3b0:	6823      	ldr	r3, [r4, #0]
 800b3b2:	07d8      	lsls	r0, r3, #31
 800b3b4:	d510      	bpl.n	800b3d8 <_printf_float+0x250>
 800b3b6:	ee18 3a10 	vmov	r3, s16
 800b3ba:	4652      	mov	r2, sl
 800b3bc:	4631      	mov	r1, r6
 800b3be:	4628      	mov	r0, r5
 800b3c0:	47b8      	blx	r7
 800b3c2:	3001      	adds	r0, #1
 800b3c4:	f43f af41 	beq.w	800b24a <_printf_float+0xc2>
 800b3c8:	f04f 0800 	mov.w	r8, #0
 800b3cc:	f104 091a 	add.w	r9, r4, #26
 800b3d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3d2:	3b01      	subs	r3, #1
 800b3d4:	4543      	cmp	r3, r8
 800b3d6:	dc09      	bgt.n	800b3ec <_printf_float+0x264>
 800b3d8:	6823      	ldr	r3, [r4, #0]
 800b3da:	079b      	lsls	r3, r3, #30
 800b3dc:	f100 8105 	bmi.w	800b5ea <_printf_float+0x462>
 800b3e0:	68e0      	ldr	r0, [r4, #12]
 800b3e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3e4:	4298      	cmp	r0, r3
 800b3e6:	bfb8      	it	lt
 800b3e8:	4618      	movlt	r0, r3
 800b3ea:	e730      	b.n	800b24e <_printf_float+0xc6>
 800b3ec:	2301      	movs	r3, #1
 800b3ee:	464a      	mov	r2, r9
 800b3f0:	4631      	mov	r1, r6
 800b3f2:	4628      	mov	r0, r5
 800b3f4:	47b8      	blx	r7
 800b3f6:	3001      	adds	r0, #1
 800b3f8:	f43f af27 	beq.w	800b24a <_printf_float+0xc2>
 800b3fc:	f108 0801 	add.w	r8, r8, #1
 800b400:	e7e6      	b.n	800b3d0 <_printf_float+0x248>
 800b402:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b404:	2b00      	cmp	r3, #0
 800b406:	dc39      	bgt.n	800b47c <_printf_float+0x2f4>
 800b408:	4a1b      	ldr	r2, [pc, #108]	; (800b478 <_printf_float+0x2f0>)
 800b40a:	2301      	movs	r3, #1
 800b40c:	4631      	mov	r1, r6
 800b40e:	4628      	mov	r0, r5
 800b410:	47b8      	blx	r7
 800b412:	3001      	adds	r0, #1
 800b414:	f43f af19 	beq.w	800b24a <_printf_float+0xc2>
 800b418:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b41c:	4313      	orrs	r3, r2
 800b41e:	d102      	bne.n	800b426 <_printf_float+0x29e>
 800b420:	6823      	ldr	r3, [r4, #0]
 800b422:	07d9      	lsls	r1, r3, #31
 800b424:	d5d8      	bpl.n	800b3d8 <_printf_float+0x250>
 800b426:	ee18 3a10 	vmov	r3, s16
 800b42a:	4652      	mov	r2, sl
 800b42c:	4631      	mov	r1, r6
 800b42e:	4628      	mov	r0, r5
 800b430:	47b8      	blx	r7
 800b432:	3001      	adds	r0, #1
 800b434:	f43f af09 	beq.w	800b24a <_printf_float+0xc2>
 800b438:	f04f 0900 	mov.w	r9, #0
 800b43c:	f104 0a1a 	add.w	sl, r4, #26
 800b440:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b442:	425b      	negs	r3, r3
 800b444:	454b      	cmp	r3, r9
 800b446:	dc01      	bgt.n	800b44c <_printf_float+0x2c4>
 800b448:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b44a:	e792      	b.n	800b372 <_printf_float+0x1ea>
 800b44c:	2301      	movs	r3, #1
 800b44e:	4652      	mov	r2, sl
 800b450:	4631      	mov	r1, r6
 800b452:	4628      	mov	r0, r5
 800b454:	47b8      	blx	r7
 800b456:	3001      	adds	r0, #1
 800b458:	f43f aef7 	beq.w	800b24a <_printf_float+0xc2>
 800b45c:	f109 0901 	add.w	r9, r9, #1
 800b460:	e7ee      	b.n	800b440 <_printf_float+0x2b8>
 800b462:	bf00      	nop
 800b464:	7fefffff 	.word	0x7fefffff
 800b468:	0800fd68 	.word	0x0800fd68
 800b46c:	0800fd6c 	.word	0x0800fd6c
 800b470:	0800fd74 	.word	0x0800fd74
 800b474:	0800fd70 	.word	0x0800fd70
 800b478:	0800fd78 	.word	0x0800fd78
 800b47c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b47e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b480:	429a      	cmp	r2, r3
 800b482:	bfa8      	it	ge
 800b484:	461a      	movge	r2, r3
 800b486:	2a00      	cmp	r2, #0
 800b488:	4691      	mov	r9, r2
 800b48a:	dc37      	bgt.n	800b4fc <_printf_float+0x374>
 800b48c:	f04f 0b00 	mov.w	fp, #0
 800b490:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b494:	f104 021a 	add.w	r2, r4, #26
 800b498:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b49a:	9305      	str	r3, [sp, #20]
 800b49c:	eba3 0309 	sub.w	r3, r3, r9
 800b4a0:	455b      	cmp	r3, fp
 800b4a2:	dc33      	bgt.n	800b50c <_printf_float+0x384>
 800b4a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b4a8:	429a      	cmp	r2, r3
 800b4aa:	db3b      	blt.n	800b524 <_printf_float+0x39c>
 800b4ac:	6823      	ldr	r3, [r4, #0]
 800b4ae:	07da      	lsls	r2, r3, #31
 800b4b0:	d438      	bmi.n	800b524 <_printf_float+0x39c>
 800b4b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b4b4:	9b05      	ldr	r3, [sp, #20]
 800b4b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b4b8:	1ad3      	subs	r3, r2, r3
 800b4ba:	eba2 0901 	sub.w	r9, r2, r1
 800b4be:	4599      	cmp	r9, r3
 800b4c0:	bfa8      	it	ge
 800b4c2:	4699      	movge	r9, r3
 800b4c4:	f1b9 0f00 	cmp.w	r9, #0
 800b4c8:	dc35      	bgt.n	800b536 <_printf_float+0x3ae>
 800b4ca:	f04f 0800 	mov.w	r8, #0
 800b4ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b4d2:	f104 0a1a 	add.w	sl, r4, #26
 800b4d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b4da:	1a9b      	subs	r3, r3, r2
 800b4dc:	eba3 0309 	sub.w	r3, r3, r9
 800b4e0:	4543      	cmp	r3, r8
 800b4e2:	f77f af79 	ble.w	800b3d8 <_printf_float+0x250>
 800b4e6:	2301      	movs	r3, #1
 800b4e8:	4652      	mov	r2, sl
 800b4ea:	4631      	mov	r1, r6
 800b4ec:	4628      	mov	r0, r5
 800b4ee:	47b8      	blx	r7
 800b4f0:	3001      	adds	r0, #1
 800b4f2:	f43f aeaa 	beq.w	800b24a <_printf_float+0xc2>
 800b4f6:	f108 0801 	add.w	r8, r8, #1
 800b4fa:	e7ec      	b.n	800b4d6 <_printf_float+0x34e>
 800b4fc:	4613      	mov	r3, r2
 800b4fe:	4631      	mov	r1, r6
 800b500:	4642      	mov	r2, r8
 800b502:	4628      	mov	r0, r5
 800b504:	47b8      	blx	r7
 800b506:	3001      	adds	r0, #1
 800b508:	d1c0      	bne.n	800b48c <_printf_float+0x304>
 800b50a:	e69e      	b.n	800b24a <_printf_float+0xc2>
 800b50c:	2301      	movs	r3, #1
 800b50e:	4631      	mov	r1, r6
 800b510:	4628      	mov	r0, r5
 800b512:	9205      	str	r2, [sp, #20]
 800b514:	47b8      	blx	r7
 800b516:	3001      	adds	r0, #1
 800b518:	f43f ae97 	beq.w	800b24a <_printf_float+0xc2>
 800b51c:	9a05      	ldr	r2, [sp, #20]
 800b51e:	f10b 0b01 	add.w	fp, fp, #1
 800b522:	e7b9      	b.n	800b498 <_printf_float+0x310>
 800b524:	ee18 3a10 	vmov	r3, s16
 800b528:	4652      	mov	r2, sl
 800b52a:	4631      	mov	r1, r6
 800b52c:	4628      	mov	r0, r5
 800b52e:	47b8      	blx	r7
 800b530:	3001      	adds	r0, #1
 800b532:	d1be      	bne.n	800b4b2 <_printf_float+0x32a>
 800b534:	e689      	b.n	800b24a <_printf_float+0xc2>
 800b536:	9a05      	ldr	r2, [sp, #20]
 800b538:	464b      	mov	r3, r9
 800b53a:	4442      	add	r2, r8
 800b53c:	4631      	mov	r1, r6
 800b53e:	4628      	mov	r0, r5
 800b540:	47b8      	blx	r7
 800b542:	3001      	adds	r0, #1
 800b544:	d1c1      	bne.n	800b4ca <_printf_float+0x342>
 800b546:	e680      	b.n	800b24a <_printf_float+0xc2>
 800b548:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b54a:	2a01      	cmp	r2, #1
 800b54c:	dc01      	bgt.n	800b552 <_printf_float+0x3ca>
 800b54e:	07db      	lsls	r3, r3, #31
 800b550:	d538      	bpl.n	800b5c4 <_printf_float+0x43c>
 800b552:	2301      	movs	r3, #1
 800b554:	4642      	mov	r2, r8
 800b556:	4631      	mov	r1, r6
 800b558:	4628      	mov	r0, r5
 800b55a:	47b8      	blx	r7
 800b55c:	3001      	adds	r0, #1
 800b55e:	f43f ae74 	beq.w	800b24a <_printf_float+0xc2>
 800b562:	ee18 3a10 	vmov	r3, s16
 800b566:	4652      	mov	r2, sl
 800b568:	4631      	mov	r1, r6
 800b56a:	4628      	mov	r0, r5
 800b56c:	47b8      	blx	r7
 800b56e:	3001      	adds	r0, #1
 800b570:	f43f ae6b 	beq.w	800b24a <_printf_float+0xc2>
 800b574:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b578:	2200      	movs	r2, #0
 800b57a:	2300      	movs	r3, #0
 800b57c:	f7f5 faac 	bl	8000ad8 <__aeabi_dcmpeq>
 800b580:	b9d8      	cbnz	r0, 800b5ba <_printf_float+0x432>
 800b582:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b584:	f108 0201 	add.w	r2, r8, #1
 800b588:	3b01      	subs	r3, #1
 800b58a:	4631      	mov	r1, r6
 800b58c:	4628      	mov	r0, r5
 800b58e:	47b8      	blx	r7
 800b590:	3001      	adds	r0, #1
 800b592:	d10e      	bne.n	800b5b2 <_printf_float+0x42a>
 800b594:	e659      	b.n	800b24a <_printf_float+0xc2>
 800b596:	2301      	movs	r3, #1
 800b598:	4652      	mov	r2, sl
 800b59a:	4631      	mov	r1, r6
 800b59c:	4628      	mov	r0, r5
 800b59e:	47b8      	blx	r7
 800b5a0:	3001      	adds	r0, #1
 800b5a2:	f43f ae52 	beq.w	800b24a <_printf_float+0xc2>
 800b5a6:	f108 0801 	add.w	r8, r8, #1
 800b5aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5ac:	3b01      	subs	r3, #1
 800b5ae:	4543      	cmp	r3, r8
 800b5b0:	dcf1      	bgt.n	800b596 <_printf_float+0x40e>
 800b5b2:	464b      	mov	r3, r9
 800b5b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b5b8:	e6dc      	b.n	800b374 <_printf_float+0x1ec>
 800b5ba:	f04f 0800 	mov.w	r8, #0
 800b5be:	f104 0a1a 	add.w	sl, r4, #26
 800b5c2:	e7f2      	b.n	800b5aa <_printf_float+0x422>
 800b5c4:	2301      	movs	r3, #1
 800b5c6:	4642      	mov	r2, r8
 800b5c8:	e7df      	b.n	800b58a <_printf_float+0x402>
 800b5ca:	2301      	movs	r3, #1
 800b5cc:	464a      	mov	r2, r9
 800b5ce:	4631      	mov	r1, r6
 800b5d0:	4628      	mov	r0, r5
 800b5d2:	47b8      	blx	r7
 800b5d4:	3001      	adds	r0, #1
 800b5d6:	f43f ae38 	beq.w	800b24a <_printf_float+0xc2>
 800b5da:	f108 0801 	add.w	r8, r8, #1
 800b5de:	68e3      	ldr	r3, [r4, #12]
 800b5e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b5e2:	1a5b      	subs	r3, r3, r1
 800b5e4:	4543      	cmp	r3, r8
 800b5e6:	dcf0      	bgt.n	800b5ca <_printf_float+0x442>
 800b5e8:	e6fa      	b.n	800b3e0 <_printf_float+0x258>
 800b5ea:	f04f 0800 	mov.w	r8, #0
 800b5ee:	f104 0919 	add.w	r9, r4, #25
 800b5f2:	e7f4      	b.n	800b5de <_printf_float+0x456>

0800b5f4 <_printf_common>:
 800b5f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5f8:	4616      	mov	r6, r2
 800b5fa:	4699      	mov	r9, r3
 800b5fc:	688a      	ldr	r2, [r1, #8]
 800b5fe:	690b      	ldr	r3, [r1, #16]
 800b600:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b604:	4293      	cmp	r3, r2
 800b606:	bfb8      	it	lt
 800b608:	4613      	movlt	r3, r2
 800b60a:	6033      	str	r3, [r6, #0]
 800b60c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b610:	4607      	mov	r7, r0
 800b612:	460c      	mov	r4, r1
 800b614:	b10a      	cbz	r2, 800b61a <_printf_common+0x26>
 800b616:	3301      	adds	r3, #1
 800b618:	6033      	str	r3, [r6, #0]
 800b61a:	6823      	ldr	r3, [r4, #0]
 800b61c:	0699      	lsls	r1, r3, #26
 800b61e:	bf42      	ittt	mi
 800b620:	6833      	ldrmi	r3, [r6, #0]
 800b622:	3302      	addmi	r3, #2
 800b624:	6033      	strmi	r3, [r6, #0]
 800b626:	6825      	ldr	r5, [r4, #0]
 800b628:	f015 0506 	ands.w	r5, r5, #6
 800b62c:	d106      	bne.n	800b63c <_printf_common+0x48>
 800b62e:	f104 0a19 	add.w	sl, r4, #25
 800b632:	68e3      	ldr	r3, [r4, #12]
 800b634:	6832      	ldr	r2, [r6, #0]
 800b636:	1a9b      	subs	r3, r3, r2
 800b638:	42ab      	cmp	r3, r5
 800b63a:	dc26      	bgt.n	800b68a <_printf_common+0x96>
 800b63c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b640:	1e13      	subs	r3, r2, #0
 800b642:	6822      	ldr	r2, [r4, #0]
 800b644:	bf18      	it	ne
 800b646:	2301      	movne	r3, #1
 800b648:	0692      	lsls	r2, r2, #26
 800b64a:	d42b      	bmi.n	800b6a4 <_printf_common+0xb0>
 800b64c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b650:	4649      	mov	r1, r9
 800b652:	4638      	mov	r0, r7
 800b654:	47c0      	blx	r8
 800b656:	3001      	adds	r0, #1
 800b658:	d01e      	beq.n	800b698 <_printf_common+0xa4>
 800b65a:	6823      	ldr	r3, [r4, #0]
 800b65c:	68e5      	ldr	r5, [r4, #12]
 800b65e:	6832      	ldr	r2, [r6, #0]
 800b660:	f003 0306 	and.w	r3, r3, #6
 800b664:	2b04      	cmp	r3, #4
 800b666:	bf08      	it	eq
 800b668:	1aad      	subeq	r5, r5, r2
 800b66a:	68a3      	ldr	r3, [r4, #8]
 800b66c:	6922      	ldr	r2, [r4, #16]
 800b66e:	bf0c      	ite	eq
 800b670:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b674:	2500      	movne	r5, #0
 800b676:	4293      	cmp	r3, r2
 800b678:	bfc4      	itt	gt
 800b67a:	1a9b      	subgt	r3, r3, r2
 800b67c:	18ed      	addgt	r5, r5, r3
 800b67e:	2600      	movs	r6, #0
 800b680:	341a      	adds	r4, #26
 800b682:	42b5      	cmp	r5, r6
 800b684:	d11a      	bne.n	800b6bc <_printf_common+0xc8>
 800b686:	2000      	movs	r0, #0
 800b688:	e008      	b.n	800b69c <_printf_common+0xa8>
 800b68a:	2301      	movs	r3, #1
 800b68c:	4652      	mov	r2, sl
 800b68e:	4649      	mov	r1, r9
 800b690:	4638      	mov	r0, r7
 800b692:	47c0      	blx	r8
 800b694:	3001      	adds	r0, #1
 800b696:	d103      	bne.n	800b6a0 <_printf_common+0xac>
 800b698:	f04f 30ff 	mov.w	r0, #4294967295
 800b69c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6a0:	3501      	adds	r5, #1
 800b6a2:	e7c6      	b.n	800b632 <_printf_common+0x3e>
 800b6a4:	18e1      	adds	r1, r4, r3
 800b6a6:	1c5a      	adds	r2, r3, #1
 800b6a8:	2030      	movs	r0, #48	; 0x30
 800b6aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b6ae:	4422      	add	r2, r4
 800b6b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b6b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b6b8:	3302      	adds	r3, #2
 800b6ba:	e7c7      	b.n	800b64c <_printf_common+0x58>
 800b6bc:	2301      	movs	r3, #1
 800b6be:	4622      	mov	r2, r4
 800b6c0:	4649      	mov	r1, r9
 800b6c2:	4638      	mov	r0, r7
 800b6c4:	47c0      	blx	r8
 800b6c6:	3001      	adds	r0, #1
 800b6c8:	d0e6      	beq.n	800b698 <_printf_common+0xa4>
 800b6ca:	3601      	adds	r6, #1
 800b6cc:	e7d9      	b.n	800b682 <_printf_common+0x8e>
	...

0800b6d0 <_printf_i>:
 800b6d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b6d4:	460c      	mov	r4, r1
 800b6d6:	4691      	mov	r9, r2
 800b6d8:	7e27      	ldrb	r7, [r4, #24]
 800b6da:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b6dc:	2f78      	cmp	r7, #120	; 0x78
 800b6de:	4680      	mov	r8, r0
 800b6e0:	469a      	mov	sl, r3
 800b6e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b6e6:	d807      	bhi.n	800b6f8 <_printf_i+0x28>
 800b6e8:	2f62      	cmp	r7, #98	; 0x62
 800b6ea:	d80a      	bhi.n	800b702 <_printf_i+0x32>
 800b6ec:	2f00      	cmp	r7, #0
 800b6ee:	f000 80d8 	beq.w	800b8a2 <_printf_i+0x1d2>
 800b6f2:	2f58      	cmp	r7, #88	; 0x58
 800b6f4:	f000 80a3 	beq.w	800b83e <_printf_i+0x16e>
 800b6f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b6fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b700:	e03a      	b.n	800b778 <_printf_i+0xa8>
 800b702:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b706:	2b15      	cmp	r3, #21
 800b708:	d8f6      	bhi.n	800b6f8 <_printf_i+0x28>
 800b70a:	a001      	add	r0, pc, #4	; (adr r0, 800b710 <_printf_i+0x40>)
 800b70c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b710:	0800b769 	.word	0x0800b769
 800b714:	0800b77d 	.word	0x0800b77d
 800b718:	0800b6f9 	.word	0x0800b6f9
 800b71c:	0800b6f9 	.word	0x0800b6f9
 800b720:	0800b6f9 	.word	0x0800b6f9
 800b724:	0800b6f9 	.word	0x0800b6f9
 800b728:	0800b77d 	.word	0x0800b77d
 800b72c:	0800b6f9 	.word	0x0800b6f9
 800b730:	0800b6f9 	.word	0x0800b6f9
 800b734:	0800b6f9 	.word	0x0800b6f9
 800b738:	0800b6f9 	.word	0x0800b6f9
 800b73c:	0800b889 	.word	0x0800b889
 800b740:	0800b7ad 	.word	0x0800b7ad
 800b744:	0800b86b 	.word	0x0800b86b
 800b748:	0800b6f9 	.word	0x0800b6f9
 800b74c:	0800b6f9 	.word	0x0800b6f9
 800b750:	0800b8ab 	.word	0x0800b8ab
 800b754:	0800b6f9 	.word	0x0800b6f9
 800b758:	0800b7ad 	.word	0x0800b7ad
 800b75c:	0800b6f9 	.word	0x0800b6f9
 800b760:	0800b6f9 	.word	0x0800b6f9
 800b764:	0800b873 	.word	0x0800b873
 800b768:	680b      	ldr	r3, [r1, #0]
 800b76a:	1d1a      	adds	r2, r3, #4
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	600a      	str	r2, [r1, #0]
 800b770:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b774:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b778:	2301      	movs	r3, #1
 800b77a:	e0a3      	b.n	800b8c4 <_printf_i+0x1f4>
 800b77c:	6825      	ldr	r5, [r4, #0]
 800b77e:	6808      	ldr	r0, [r1, #0]
 800b780:	062e      	lsls	r6, r5, #24
 800b782:	f100 0304 	add.w	r3, r0, #4
 800b786:	d50a      	bpl.n	800b79e <_printf_i+0xce>
 800b788:	6805      	ldr	r5, [r0, #0]
 800b78a:	600b      	str	r3, [r1, #0]
 800b78c:	2d00      	cmp	r5, #0
 800b78e:	da03      	bge.n	800b798 <_printf_i+0xc8>
 800b790:	232d      	movs	r3, #45	; 0x2d
 800b792:	426d      	negs	r5, r5
 800b794:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b798:	485e      	ldr	r0, [pc, #376]	; (800b914 <_printf_i+0x244>)
 800b79a:	230a      	movs	r3, #10
 800b79c:	e019      	b.n	800b7d2 <_printf_i+0x102>
 800b79e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b7a2:	6805      	ldr	r5, [r0, #0]
 800b7a4:	600b      	str	r3, [r1, #0]
 800b7a6:	bf18      	it	ne
 800b7a8:	b22d      	sxthne	r5, r5
 800b7aa:	e7ef      	b.n	800b78c <_printf_i+0xbc>
 800b7ac:	680b      	ldr	r3, [r1, #0]
 800b7ae:	6825      	ldr	r5, [r4, #0]
 800b7b0:	1d18      	adds	r0, r3, #4
 800b7b2:	6008      	str	r0, [r1, #0]
 800b7b4:	0628      	lsls	r0, r5, #24
 800b7b6:	d501      	bpl.n	800b7bc <_printf_i+0xec>
 800b7b8:	681d      	ldr	r5, [r3, #0]
 800b7ba:	e002      	b.n	800b7c2 <_printf_i+0xf2>
 800b7bc:	0669      	lsls	r1, r5, #25
 800b7be:	d5fb      	bpl.n	800b7b8 <_printf_i+0xe8>
 800b7c0:	881d      	ldrh	r5, [r3, #0]
 800b7c2:	4854      	ldr	r0, [pc, #336]	; (800b914 <_printf_i+0x244>)
 800b7c4:	2f6f      	cmp	r7, #111	; 0x6f
 800b7c6:	bf0c      	ite	eq
 800b7c8:	2308      	moveq	r3, #8
 800b7ca:	230a      	movne	r3, #10
 800b7cc:	2100      	movs	r1, #0
 800b7ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b7d2:	6866      	ldr	r6, [r4, #4]
 800b7d4:	60a6      	str	r6, [r4, #8]
 800b7d6:	2e00      	cmp	r6, #0
 800b7d8:	bfa2      	ittt	ge
 800b7da:	6821      	ldrge	r1, [r4, #0]
 800b7dc:	f021 0104 	bicge.w	r1, r1, #4
 800b7e0:	6021      	strge	r1, [r4, #0]
 800b7e2:	b90d      	cbnz	r5, 800b7e8 <_printf_i+0x118>
 800b7e4:	2e00      	cmp	r6, #0
 800b7e6:	d04d      	beq.n	800b884 <_printf_i+0x1b4>
 800b7e8:	4616      	mov	r6, r2
 800b7ea:	fbb5 f1f3 	udiv	r1, r5, r3
 800b7ee:	fb03 5711 	mls	r7, r3, r1, r5
 800b7f2:	5dc7      	ldrb	r7, [r0, r7]
 800b7f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b7f8:	462f      	mov	r7, r5
 800b7fa:	42bb      	cmp	r3, r7
 800b7fc:	460d      	mov	r5, r1
 800b7fe:	d9f4      	bls.n	800b7ea <_printf_i+0x11a>
 800b800:	2b08      	cmp	r3, #8
 800b802:	d10b      	bne.n	800b81c <_printf_i+0x14c>
 800b804:	6823      	ldr	r3, [r4, #0]
 800b806:	07df      	lsls	r7, r3, #31
 800b808:	d508      	bpl.n	800b81c <_printf_i+0x14c>
 800b80a:	6923      	ldr	r3, [r4, #16]
 800b80c:	6861      	ldr	r1, [r4, #4]
 800b80e:	4299      	cmp	r1, r3
 800b810:	bfde      	ittt	le
 800b812:	2330      	movle	r3, #48	; 0x30
 800b814:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b818:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b81c:	1b92      	subs	r2, r2, r6
 800b81e:	6122      	str	r2, [r4, #16]
 800b820:	f8cd a000 	str.w	sl, [sp]
 800b824:	464b      	mov	r3, r9
 800b826:	aa03      	add	r2, sp, #12
 800b828:	4621      	mov	r1, r4
 800b82a:	4640      	mov	r0, r8
 800b82c:	f7ff fee2 	bl	800b5f4 <_printf_common>
 800b830:	3001      	adds	r0, #1
 800b832:	d14c      	bne.n	800b8ce <_printf_i+0x1fe>
 800b834:	f04f 30ff 	mov.w	r0, #4294967295
 800b838:	b004      	add	sp, #16
 800b83a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b83e:	4835      	ldr	r0, [pc, #212]	; (800b914 <_printf_i+0x244>)
 800b840:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b844:	6823      	ldr	r3, [r4, #0]
 800b846:	680e      	ldr	r6, [r1, #0]
 800b848:	061f      	lsls	r7, r3, #24
 800b84a:	f856 5b04 	ldr.w	r5, [r6], #4
 800b84e:	600e      	str	r6, [r1, #0]
 800b850:	d514      	bpl.n	800b87c <_printf_i+0x1ac>
 800b852:	07d9      	lsls	r1, r3, #31
 800b854:	bf44      	itt	mi
 800b856:	f043 0320 	orrmi.w	r3, r3, #32
 800b85a:	6023      	strmi	r3, [r4, #0]
 800b85c:	b91d      	cbnz	r5, 800b866 <_printf_i+0x196>
 800b85e:	6823      	ldr	r3, [r4, #0]
 800b860:	f023 0320 	bic.w	r3, r3, #32
 800b864:	6023      	str	r3, [r4, #0]
 800b866:	2310      	movs	r3, #16
 800b868:	e7b0      	b.n	800b7cc <_printf_i+0xfc>
 800b86a:	6823      	ldr	r3, [r4, #0]
 800b86c:	f043 0320 	orr.w	r3, r3, #32
 800b870:	6023      	str	r3, [r4, #0]
 800b872:	2378      	movs	r3, #120	; 0x78
 800b874:	4828      	ldr	r0, [pc, #160]	; (800b918 <_printf_i+0x248>)
 800b876:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b87a:	e7e3      	b.n	800b844 <_printf_i+0x174>
 800b87c:	065e      	lsls	r6, r3, #25
 800b87e:	bf48      	it	mi
 800b880:	b2ad      	uxthmi	r5, r5
 800b882:	e7e6      	b.n	800b852 <_printf_i+0x182>
 800b884:	4616      	mov	r6, r2
 800b886:	e7bb      	b.n	800b800 <_printf_i+0x130>
 800b888:	680b      	ldr	r3, [r1, #0]
 800b88a:	6826      	ldr	r6, [r4, #0]
 800b88c:	6960      	ldr	r0, [r4, #20]
 800b88e:	1d1d      	adds	r5, r3, #4
 800b890:	600d      	str	r5, [r1, #0]
 800b892:	0635      	lsls	r5, r6, #24
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	d501      	bpl.n	800b89c <_printf_i+0x1cc>
 800b898:	6018      	str	r0, [r3, #0]
 800b89a:	e002      	b.n	800b8a2 <_printf_i+0x1d2>
 800b89c:	0671      	lsls	r1, r6, #25
 800b89e:	d5fb      	bpl.n	800b898 <_printf_i+0x1c8>
 800b8a0:	8018      	strh	r0, [r3, #0]
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	6123      	str	r3, [r4, #16]
 800b8a6:	4616      	mov	r6, r2
 800b8a8:	e7ba      	b.n	800b820 <_printf_i+0x150>
 800b8aa:	680b      	ldr	r3, [r1, #0]
 800b8ac:	1d1a      	adds	r2, r3, #4
 800b8ae:	600a      	str	r2, [r1, #0]
 800b8b0:	681e      	ldr	r6, [r3, #0]
 800b8b2:	6862      	ldr	r2, [r4, #4]
 800b8b4:	2100      	movs	r1, #0
 800b8b6:	4630      	mov	r0, r6
 800b8b8:	f7f4 fc9a 	bl	80001f0 <memchr>
 800b8bc:	b108      	cbz	r0, 800b8c2 <_printf_i+0x1f2>
 800b8be:	1b80      	subs	r0, r0, r6
 800b8c0:	6060      	str	r0, [r4, #4]
 800b8c2:	6863      	ldr	r3, [r4, #4]
 800b8c4:	6123      	str	r3, [r4, #16]
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b8cc:	e7a8      	b.n	800b820 <_printf_i+0x150>
 800b8ce:	6923      	ldr	r3, [r4, #16]
 800b8d0:	4632      	mov	r2, r6
 800b8d2:	4649      	mov	r1, r9
 800b8d4:	4640      	mov	r0, r8
 800b8d6:	47d0      	blx	sl
 800b8d8:	3001      	adds	r0, #1
 800b8da:	d0ab      	beq.n	800b834 <_printf_i+0x164>
 800b8dc:	6823      	ldr	r3, [r4, #0]
 800b8de:	079b      	lsls	r3, r3, #30
 800b8e0:	d413      	bmi.n	800b90a <_printf_i+0x23a>
 800b8e2:	68e0      	ldr	r0, [r4, #12]
 800b8e4:	9b03      	ldr	r3, [sp, #12]
 800b8e6:	4298      	cmp	r0, r3
 800b8e8:	bfb8      	it	lt
 800b8ea:	4618      	movlt	r0, r3
 800b8ec:	e7a4      	b.n	800b838 <_printf_i+0x168>
 800b8ee:	2301      	movs	r3, #1
 800b8f0:	4632      	mov	r2, r6
 800b8f2:	4649      	mov	r1, r9
 800b8f4:	4640      	mov	r0, r8
 800b8f6:	47d0      	blx	sl
 800b8f8:	3001      	adds	r0, #1
 800b8fa:	d09b      	beq.n	800b834 <_printf_i+0x164>
 800b8fc:	3501      	adds	r5, #1
 800b8fe:	68e3      	ldr	r3, [r4, #12]
 800b900:	9903      	ldr	r1, [sp, #12]
 800b902:	1a5b      	subs	r3, r3, r1
 800b904:	42ab      	cmp	r3, r5
 800b906:	dcf2      	bgt.n	800b8ee <_printf_i+0x21e>
 800b908:	e7eb      	b.n	800b8e2 <_printf_i+0x212>
 800b90a:	2500      	movs	r5, #0
 800b90c:	f104 0619 	add.w	r6, r4, #25
 800b910:	e7f5      	b.n	800b8fe <_printf_i+0x22e>
 800b912:	bf00      	nop
 800b914:	0800fd7a 	.word	0x0800fd7a
 800b918:	0800fd8b 	.word	0x0800fd8b

0800b91c <siprintf>:
 800b91c:	b40e      	push	{r1, r2, r3}
 800b91e:	b500      	push	{lr}
 800b920:	b09c      	sub	sp, #112	; 0x70
 800b922:	ab1d      	add	r3, sp, #116	; 0x74
 800b924:	9002      	str	r0, [sp, #8]
 800b926:	9006      	str	r0, [sp, #24]
 800b928:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b92c:	4809      	ldr	r0, [pc, #36]	; (800b954 <siprintf+0x38>)
 800b92e:	9107      	str	r1, [sp, #28]
 800b930:	9104      	str	r1, [sp, #16]
 800b932:	4909      	ldr	r1, [pc, #36]	; (800b958 <siprintf+0x3c>)
 800b934:	f853 2b04 	ldr.w	r2, [r3], #4
 800b938:	9105      	str	r1, [sp, #20]
 800b93a:	6800      	ldr	r0, [r0, #0]
 800b93c:	9301      	str	r3, [sp, #4]
 800b93e:	a902      	add	r1, sp, #8
 800b940:	f003 f89a 	bl	800ea78 <_svfiprintf_r>
 800b944:	9b02      	ldr	r3, [sp, #8]
 800b946:	2200      	movs	r2, #0
 800b948:	701a      	strb	r2, [r3, #0]
 800b94a:	b01c      	add	sp, #112	; 0x70
 800b94c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b950:	b003      	add	sp, #12
 800b952:	4770      	bx	lr
 800b954:	20000074 	.word	0x20000074
 800b958:	ffff0208 	.word	0xffff0208

0800b95c <strcat>:
 800b95c:	b510      	push	{r4, lr}
 800b95e:	4602      	mov	r2, r0
 800b960:	7814      	ldrb	r4, [r2, #0]
 800b962:	4613      	mov	r3, r2
 800b964:	3201      	adds	r2, #1
 800b966:	2c00      	cmp	r4, #0
 800b968:	d1fa      	bne.n	800b960 <strcat+0x4>
 800b96a:	3b01      	subs	r3, #1
 800b96c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b970:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b974:	2a00      	cmp	r2, #0
 800b976:	d1f9      	bne.n	800b96c <strcat+0x10>
 800b978:	bd10      	pop	{r4, pc}

0800b97a <strcpy>:
 800b97a:	4603      	mov	r3, r0
 800b97c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b980:	f803 2b01 	strb.w	r2, [r3], #1
 800b984:	2a00      	cmp	r2, #0
 800b986:	d1f9      	bne.n	800b97c <strcpy+0x2>
 800b988:	4770      	bx	lr

0800b98a <sulp>:
 800b98a:	b570      	push	{r4, r5, r6, lr}
 800b98c:	4604      	mov	r4, r0
 800b98e:	460d      	mov	r5, r1
 800b990:	ec45 4b10 	vmov	d0, r4, r5
 800b994:	4616      	mov	r6, r2
 800b996:	f002 fe0b 	bl	800e5b0 <__ulp>
 800b99a:	ec51 0b10 	vmov	r0, r1, d0
 800b99e:	b17e      	cbz	r6, 800b9c0 <sulp+0x36>
 800b9a0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b9a4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	dd09      	ble.n	800b9c0 <sulp+0x36>
 800b9ac:	051b      	lsls	r3, r3, #20
 800b9ae:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b9b2:	2400      	movs	r4, #0
 800b9b4:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b9b8:	4622      	mov	r2, r4
 800b9ba:	462b      	mov	r3, r5
 800b9bc:	f7f4 fe24 	bl	8000608 <__aeabi_dmul>
 800b9c0:	bd70      	pop	{r4, r5, r6, pc}
 800b9c2:	0000      	movs	r0, r0
 800b9c4:	0000      	movs	r0, r0
	...

0800b9c8 <_strtod_l>:
 800b9c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9cc:	b0a3      	sub	sp, #140	; 0x8c
 800b9ce:	461f      	mov	r7, r3
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	931e      	str	r3, [sp, #120]	; 0x78
 800b9d4:	4ba4      	ldr	r3, [pc, #656]	; (800bc68 <_strtod_l+0x2a0>)
 800b9d6:	9219      	str	r2, [sp, #100]	; 0x64
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	9307      	str	r3, [sp, #28]
 800b9dc:	4604      	mov	r4, r0
 800b9de:	4618      	mov	r0, r3
 800b9e0:	4688      	mov	r8, r1
 800b9e2:	f7f4 fbfd 	bl	80001e0 <strlen>
 800b9e6:	f04f 0a00 	mov.w	sl, #0
 800b9ea:	4605      	mov	r5, r0
 800b9ec:	f04f 0b00 	mov.w	fp, #0
 800b9f0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800b9f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b9f6:	781a      	ldrb	r2, [r3, #0]
 800b9f8:	2a2b      	cmp	r2, #43	; 0x2b
 800b9fa:	d04c      	beq.n	800ba96 <_strtod_l+0xce>
 800b9fc:	d839      	bhi.n	800ba72 <_strtod_l+0xaa>
 800b9fe:	2a0d      	cmp	r2, #13
 800ba00:	d832      	bhi.n	800ba68 <_strtod_l+0xa0>
 800ba02:	2a08      	cmp	r2, #8
 800ba04:	d832      	bhi.n	800ba6c <_strtod_l+0xa4>
 800ba06:	2a00      	cmp	r2, #0
 800ba08:	d03c      	beq.n	800ba84 <_strtod_l+0xbc>
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	930e      	str	r3, [sp, #56]	; 0x38
 800ba0e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800ba10:	7833      	ldrb	r3, [r6, #0]
 800ba12:	2b30      	cmp	r3, #48	; 0x30
 800ba14:	f040 80b4 	bne.w	800bb80 <_strtod_l+0x1b8>
 800ba18:	7873      	ldrb	r3, [r6, #1]
 800ba1a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ba1e:	2b58      	cmp	r3, #88	; 0x58
 800ba20:	d16c      	bne.n	800bafc <_strtod_l+0x134>
 800ba22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ba24:	9301      	str	r3, [sp, #4]
 800ba26:	ab1e      	add	r3, sp, #120	; 0x78
 800ba28:	9702      	str	r7, [sp, #8]
 800ba2a:	9300      	str	r3, [sp, #0]
 800ba2c:	4a8f      	ldr	r2, [pc, #572]	; (800bc6c <_strtod_l+0x2a4>)
 800ba2e:	ab1f      	add	r3, sp, #124	; 0x7c
 800ba30:	a91d      	add	r1, sp, #116	; 0x74
 800ba32:	4620      	mov	r0, r4
 800ba34:	f001 ff26 	bl	800d884 <__gethex>
 800ba38:	f010 0707 	ands.w	r7, r0, #7
 800ba3c:	4605      	mov	r5, r0
 800ba3e:	d005      	beq.n	800ba4c <_strtod_l+0x84>
 800ba40:	2f06      	cmp	r7, #6
 800ba42:	d12a      	bne.n	800ba9a <_strtod_l+0xd2>
 800ba44:	3601      	adds	r6, #1
 800ba46:	2300      	movs	r3, #0
 800ba48:	961d      	str	r6, [sp, #116]	; 0x74
 800ba4a:	930e      	str	r3, [sp, #56]	; 0x38
 800ba4c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	f040 8596 	bne.w	800c580 <_strtod_l+0xbb8>
 800ba54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ba56:	b1db      	cbz	r3, 800ba90 <_strtod_l+0xc8>
 800ba58:	4652      	mov	r2, sl
 800ba5a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ba5e:	ec43 2b10 	vmov	d0, r2, r3
 800ba62:	b023      	add	sp, #140	; 0x8c
 800ba64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba68:	2a20      	cmp	r2, #32
 800ba6a:	d1ce      	bne.n	800ba0a <_strtod_l+0x42>
 800ba6c:	3301      	adds	r3, #1
 800ba6e:	931d      	str	r3, [sp, #116]	; 0x74
 800ba70:	e7c0      	b.n	800b9f4 <_strtod_l+0x2c>
 800ba72:	2a2d      	cmp	r2, #45	; 0x2d
 800ba74:	d1c9      	bne.n	800ba0a <_strtod_l+0x42>
 800ba76:	2201      	movs	r2, #1
 800ba78:	920e      	str	r2, [sp, #56]	; 0x38
 800ba7a:	1c5a      	adds	r2, r3, #1
 800ba7c:	921d      	str	r2, [sp, #116]	; 0x74
 800ba7e:	785b      	ldrb	r3, [r3, #1]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d1c4      	bne.n	800ba0e <_strtod_l+0x46>
 800ba84:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ba86:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	f040 8576 	bne.w	800c57c <_strtod_l+0xbb4>
 800ba90:	4652      	mov	r2, sl
 800ba92:	465b      	mov	r3, fp
 800ba94:	e7e3      	b.n	800ba5e <_strtod_l+0x96>
 800ba96:	2200      	movs	r2, #0
 800ba98:	e7ee      	b.n	800ba78 <_strtod_l+0xb0>
 800ba9a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ba9c:	b13a      	cbz	r2, 800baae <_strtod_l+0xe6>
 800ba9e:	2135      	movs	r1, #53	; 0x35
 800baa0:	a820      	add	r0, sp, #128	; 0x80
 800baa2:	f002 fe90 	bl	800e7c6 <__copybits>
 800baa6:	991e      	ldr	r1, [sp, #120]	; 0x78
 800baa8:	4620      	mov	r0, r4
 800baaa:	f002 fa55 	bl	800df58 <_Bfree>
 800baae:	3f01      	subs	r7, #1
 800bab0:	2f05      	cmp	r7, #5
 800bab2:	d807      	bhi.n	800bac4 <_strtod_l+0xfc>
 800bab4:	e8df f007 	tbb	[pc, r7]
 800bab8:	1d180b0e 	.word	0x1d180b0e
 800babc:	030e      	.short	0x030e
 800babe:	f04f 0b00 	mov.w	fp, #0
 800bac2:	46da      	mov	sl, fp
 800bac4:	0728      	lsls	r0, r5, #28
 800bac6:	d5c1      	bpl.n	800ba4c <_strtod_l+0x84>
 800bac8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800bacc:	e7be      	b.n	800ba4c <_strtod_l+0x84>
 800bace:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800bad2:	e7f7      	b.n	800bac4 <_strtod_l+0xfc>
 800bad4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800bad8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800bada:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800bade:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800bae2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800bae6:	e7ed      	b.n	800bac4 <_strtod_l+0xfc>
 800bae8:	f8df b184 	ldr.w	fp, [pc, #388]	; 800bc70 <_strtod_l+0x2a8>
 800baec:	f04f 0a00 	mov.w	sl, #0
 800baf0:	e7e8      	b.n	800bac4 <_strtod_l+0xfc>
 800baf2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800baf6:	f04f 3aff 	mov.w	sl, #4294967295
 800bafa:	e7e3      	b.n	800bac4 <_strtod_l+0xfc>
 800bafc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bafe:	1c5a      	adds	r2, r3, #1
 800bb00:	921d      	str	r2, [sp, #116]	; 0x74
 800bb02:	785b      	ldrb	r3, [r3, #1]
 800bb04:	2b30      	cmp	r3, #48	; 0x30
 800bb06:	d0f9      	beq.n	800bafc <_strtod_l+0x134>
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d09f      	beq.n	800ba4c <_strtod_l+0x84>
 800bb0c:	2301      	movs	r3, #1
 800bb0e:	f04f 0900 	mov.w	r9, #0
 800bb12:	9304      	str	r3, [sp, #16]
 800bb14:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bb16:	930a      	str	r3, [sp, #40]	; 0x28
 800bb18:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800bb1c:	464f      	mov	r7, r9
 800bb1e:	220a      	movs	r2, #10
 800bb20:	981d      	ldr	r0, [sp, #116]	; 0x74
 800bb22:	7806      	ldrb	r6, [r0, #0]
 800bb24:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800bb28:	b2d9      	uxtb	r1, r3
 800bb2a:	2909      	cmp	r1, #9
 800bb2c:	d92a      	bls.n	800bb84 <_strtod_l+0x1bc>
 800bb2e:	9907      	ldr	r1, [sp, #28]
 800bb30:	462a      	mov	r2, r5
 800bb32:	f003 fa5e 	bl	800eff2 <strncmp>
 800bb36:	b398      	cbz	r0, 800bba0 <_strtod_l+0x1d8>
 800bb38:	2000      	movs	r0, #0
 800bb3a:	4633      	mov	r3, r6
 800bb3c:	463d      	mov	r5, r7
 800bb3e:	9007      	str	r0, [sp, #28]
 800bb40:	4602      	mov	r2, r0
 800bb42:	2b65      	cmp	r3, #101	; 0x65
 800bb44:	d001      	beq.n	800bb4a <_strtod_l+0x182>
 800bb46:	2b45      	cmp	r3, #69	; 0x45
 800bb48:	d118      	bne.n	800bb7c <_strtod_l+0x1b4>
 800bb4a:	b91d      	cbnz	r5, 800bb54 <_strtod_l+0x18c>
 800bb4c:	9b04      	ldr	r3, [sp, #16]
 800bb4e:	4303      	orrs	r3, r0
 800bb50:	d098      	beq.n	800ba84 <_strtod_l+0xbc>
 800bb52:	2500      	movs	r5, #0
 800bb54:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800bb58:	f108 0301 	add.w	r3, r8, #1
 800bb5c:	931d      	str	r3, [sp, #116]	; 0x74
 800bb5e:	f898 3001 	ldrb.w	r3, [r8, #1]
 800bb62:	2b2b      	cmp	r3, #43	; 0x2b
 800bb64:	d075      	beq.n	800bc52 <_strtod_l+0x28a>
 800bb66:	2b2d      	cmp	r3, #45	; 0x2d
 800bb68:	d07b      	beq.n	800bc62 <_strtod_l+0x29a>
 800bb6a:	f04f 0c00 	mov.w	ip, #0
 800bb6e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800bb72:	2909      	cmp	r1, #9
 800bb74:	f240 8082 	bls.w	800bc7c <_strtod_l+0x2b4>
 800bb78:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800bb7c:	2600      	movs	r6, #0
 800bb7e:	e09d      	b.n	800bcbc <_strtod_l+0x2f4>
 800bb80:	2300      	movs	r3, #0
 800bb82:	e7c4      	b.n	800bb0e <_strtod_l+0x146>
 800bb84:	2f08      	cmp	r7, #8
 800bb86:	bfd8      	it	le
 800bb88:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800bb8a:	f100 0001 	add.w	r0, r0, #1
 800bb8e:	bfda      	itte	le
 800bb90:	fb02 3301 	mlale	r3, r2, r1, r3
 800bb94:	9309      	strle	r3, [sp, #36]	; 0x24
 800bb96:	fb02 3909 	mlagt	r9, r2, r9, r3
 800bb9a:	3701      	adds	r7, #1
 800bb9c:	901d      	str	r0, [sp, #116]	; 0x74
 800bb9e:	e7bf      	b.n	800bb20 <_strtod_l+0x158>
 800bba0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bba2:	195a      	adds	r2, r3, r5
 800bba4:	921d      	str	r2, [sp, #116]	; 0x74
 800bba6:	5d5b      	ldrb	r3, [r3, r5]
 800bba8:	2f00      	cmp	r7, #0
 800bbaa:	d037      	beq.n	800bc1c <_strtod_l+0x254>
 800bbac:	9007      	str	r0, [sp, #28]
 800bbae:	463d      	mov	r5, r7
 800bbb0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800bbb4:	2a09      	cmp	r2, #9
 800bbb6:	d912      	bls.n	800bbde <_strtod_l+0x216>
 800bbb8:	2201      	movs	r2, #1
 800bbba:	e7c2      	b.n	800bb42 <_strtod_l+0x17a>
 800bbbc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bbbe:	1c5a      	adds	r2, r3, #1
 800bbc0:	921d      	str	r2, [sp, #116]	; 0x74
 800bbc2:	785b      	ldrb	r3, [r3, #1]
 800bbc4:	3001      	adds	r0, #1
 800bbc6:	2b30      	cmp	r3, #48	; 0x30
 800bbc8:	d0f8      	beq.n	800bbbc <_strtod_l+0x1f4>
 800bbca:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800bbce:	2a08      	cmp	r2, #8
 800bbd0:	f200 84db 	bhi.w	800c58a <_strtod_l+0xbc2>
 800bbd4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800bbd6:	9007      	str	r0, [sp, #28]
 800bbd8:	2000      	movs	r0, #0
 800bbda:	920a      	str	r2, [sp, #40]	; 0x28
 800bbdc:	4605      	mov	r5, r0
 800bbde:	3b30      	subs	r3, #48	; 0x30
 800bbe0:	f100 0201 	add.w	r2, r0, #1
 800bbe4:	d014      	beq.n	800bc10 <_strtod_l+0x248>
 800bbe6:	9907      	ldr	r1, [sp, #28]
 800bbe8:	4411      	add	r1, r2
 800bbea:	9107      	str	r1, [sp, #28]
 800bbec:	462a      	mov	r2, r5
 800bbee:	eb00 0e05 	add.w	lr, r0, r5
 800bbf2:	210a      	movs	r1, #10
 800bbf4:	4572      	cmp	r2, lr
 800bbf6:	d113      	bne.n	800bc20 <_strtod_l+0x258>
 800bbf8:	182a      	adds	r2, r5, r0
 800bbfa:	2a08      	cmp	r2, #8
 800bbfc:	f105 0501 	add.w	r5, r5, #1
 800bc00:	4405      	add	r5, r0
 800bc02:	dc1c      	bgt.n	800bc3e <_strtod_l+0x276>
 800bc04:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bc06:	220a      	movs	r2, #10
 800bc08:	fb02 3301 	mla	r3, r2, r1, r3
 800bc0c:	9309      	str	r3, [sp, #36]	; 0x24
 800bc0e:	2200      	movs	r2, #0
 800bc10:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bc12:	1c59      	adds	r1, r3, #1
 800bc14:	911d      	str	r1, [sp, #116]	; 0x74
 800bc16:	785b      	ldrb	r3, [r3, #1]
 800bc18:	4610      	mov	r0, r2
 800bc1a:	e7c9      	b.n	800bbb0 <_strtod_l+0x1e8>
 800bc1c:	4638      	mov	r0, r7
 800bc1e:	e7d2      	b.n	800bbc6 <_strtod_l+0x1fe>
 800bc20:	2a08      	cmp	r2, #8
 800bc22:	dc04      	bgt.n	800bc2e <_strtod_l+0x266>
 800bc24:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800bc26:	434e      	muls	r6, r1
 800bc28:	9609      	str	r6, [sp, #36]	; 0x24
 800bc2a:	3201      	adds	r2, #1
 800bc2c:	e7e2      	b.n	800bbf4 <_strtod_l+0x22c>
 800bc2e:	f102 0c01 	add.w	ip, r2, #1
 800bc32:	f1bc 0f10 	cmp.w	ip, #16
 800bc36:	bfd8      	it	le
 800bc38:	fb01 f909 	mulle.w	r9, r1, r9
 800bc3c:	e7f5      	b.n	800bc2a <_strtod_l+0x262>
 800bc3e:	2d10      	cmp	r5, #16
 800bc40:	bfdc      	itt	le
 800bc42:	220a      	movle	r2, #10
 800bc44:	fb02 3909 	mlale	r9, r2, r9, r3
 800bc48:	e7e1      	b.n	800bc0e <_strtod_l+0x246>
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	9307      	str	r3, [sp, #28]
 800bc4e:	2201      	movs	r2, #1
 800bc50:	e77c      	b.n	800bb4c <_strtod_l+0x184>
 800bc52:	f04f 0c00 	mov.w	ip, #0
 800bc56:	f108 0302 	add.w	r3, r8, #2
 800bc5a:	931d      	str	r3, [sp, #116]	; 0x74
 800bc5c:	f898 3002 	ldrb.w	r3, [r8, #2]
 800bc60:	e785      	b.n	800bb6e <_strtod_l+0x1a6>
 800bc62:	f04f 0c01 	mov.w	ip, #1
 800bc66:	e7f6      	b.n	800bc56 <_strtod_l+0x28e>
 800bc68:	080100f0 	.word	0x080100f0
 800bc6c:	0800fd9c 	.word	0x0800fd9c
 800bc70:	7ff00000 	.word	0x7ff00000
 800bc74:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bc76:	1c59      	adds	r1, r3, #1
 800bc78:	911d      	str	r1, [sp, #116]	; 0x74
 800bc7a:	785b      	ldrb	r3, [r3, #1]
 800bc7c:	2b30      	cmp	r3, #48	; 0x30
 800bc7e:	d0f9      	beq.n	800bc74 <_strtod_l+0x2ac>
 800bc80:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800bc84:	2908      	cmp	r1, #8
 800bc86:	f63f af79 	bhi.w	800bb7c <_strtod_l+0x1b4>
 800bc8a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800bc8e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bc90:	9308      	str	r3, [sp, #32]
 800bc92:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bc94:	1c59      	adds	r1, r3, #1
 800bc96:	911d      	str	r1, [sp, #116]	; 0x74
 800bc98:	785b      	ldrb	r3, [r3, #1]
 800bc9a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800bc9e:	2e09      	cmp	r6, #9
 800bca0:	d937      	bls.n	800bd12 <_strtod_l+0x34a>
 800bca2:	9e08      	ldr	r6, [sp, #32]
 800bca4:	1b89      	subs	r1, r1, r6
 800bca6:	2908      	cmp	r1, #8
 800bca8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800bcac:	dc02      	bgt.n	800bcb4 <_strtod_l+0x2ec>
 800bcae:	4576      	cmp	r6, lr
 800bcb0:	bfa8      	it	ge
 800bcb2:	4676      	movge	r6, lr
 800bcb4:	f1bc 0f00 	cmp.w	ip, #0
 800bcb8:	d000      	beq.n	800bcbc <_strtod_l+0x2f4>
 800bcba:	4276      	negs	r6, r6
 800bcbc:	2d00      	cmp	r5, #0
 800bcbe:	d14f      	bne.n	800bd60 <_strtod_l+0x398>
 800bcc0:	9904      	ldr	r1, [sp, #16]
 800bcc2:	4301      	orrs	r1, r0
 800bcc4:	f47f aec2 	bne.w	800ba4c <_strtod_l+0x84>
 800bcc8:	2a00      	cmp	r2, #0
 800bcca:	f47f aedb 	bne.w	800ba84 <_strtod_l+0xbc>
 800bcce:	2b69      	cmp	r3, #105	; 0x69
 800bcd0:	d027      	beq.n	800bd22 <_strtod_l+0x35a>
 800bcd2:	dc24      	bgt.n	800bd1e <_strtod_l+0x356>
 800bcd4:	2b49      	cmp	r3, #73	; 0x49
 800bcd6:	d024      	beq.n	800bd22 <_strtod_l+0x35a>
 800bcd8:	2b4e      	cmp	r3, #78	; 0x4e
 800bcda:	f47f aed3 	bne.w	800ba84 <_strtod_l+0xbc>
 800bcde:	499e      	ldr	r1, [pc, #632]	; (800bf58 <_strtod_l+0x590>)
 800bce0:	a81d      	add	r0, sp, #116	; 0x74
 800bce2:	f002 f827 	bl	800dd34 <__match>
 800bce6:	2800      	cmp	r0, #0
 800bce8:	f43f aecc 	beq.w	800ba84 <_strtod_l+0xbc>
 800bcec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bcee:	781b      	ldrb	r3, [r3, #0]
 800bcf0:	2b28      	cmp	r3, #40	; 0x28
 800bcf2:	d12d      	bne.n	800bd50 <_strtod_l+0x388>
 800bcf4:	4999      	ldr	r1, [pc, #612]	; (800bf5c <_strtod_l+0x594>)
 800bcf6:	aa20      	add	r2, sp, #128	; 0x80
 800bcf8:	a81d      	add	r0, sp, #116	; 0x74
 800bcfa:	f002 f82f 	bl	800dd5c <__hexnan>
 800bcfe:	2805      	cmp	r0, #5
 800bd00:	d126      	bne.n	800bd50 <_strtod_l+0x388>
 800bd02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bd04:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800bd08:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800bd0c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800bd10:	e69c      	b.n	800ba4c <_strtod_l+0x84>
 800bd12:	210a      	movs	r1, #10
 800bd14:	fb01 3e0e 	mla	lr, r1, lr, r3
 800bd18:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800bd1c:	e7b9      	b.n	800bc92 <_strtod_l+0x2ca>
 800bd1e:	2b6e      	cmp	r3, #110	; 0x6e
 800bd20:	e7db      	b.n	800bcda <_strtod_l+0x312>
 800bd22:	498f      	ldr	r1, [pc, #572]	; (800bf60 <_strtod_l+0x598>)
 800bd24:	a81d      	add	r0, sp, #116	; 0x74
 800bd26:	f002 f805 	bl	800dd34 <__match>
 800bd2a:	2800      	cmp	r0, #0
 800bd2c:	f43f aeaa 	beq.w	800ba84 <_strtod_l+0xbc>
 800bd30:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bd32:	498c      	ldr	r1, [pc, #560]	; (800bf64 <_strtod_l+0x59c>)
 800bd34:	3b01      	subs	r3, #1
 800bd36:	a81d      	add	r0, sp, #116	; 0x74
 800bd38:	931d      	str	r3, [sp, #116]	; 0x74
 800bd3a:	f001 fffb 	bl	800dd34 <__match>
 800bd3e:	b910      	cbnz	r0, 800bd46 <_strtod_l+0x37e>
 800bd40:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bd42:	3301      	adds	r3, #1
 800bd44:	931d      	str	r3, [sp, #116]	; 0x74
 800bd46:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800bf74 <_strtod_l+0x5ac>
 800bd4a:	f04f 0a00 	mov.w	sl, #0
 800bd4e:	e67d      	b.n	800ba4c <_strtod_l+0x84>
 800bd50:	4885      	ldr	r0, [pc, #532]	; (800bf68 <_strtod_l+0x5a0>)
 800bd52:	f003 f8ed 	bl	800ef30 <nan>
 800bd56:	ed8d 0b04 	vstr	d0, [sp, #16]
 800bd5a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800bd5e:	e675      	b.n	800ba4c <_strtod_l+0x84>
 800bd60:	9b07      	ldr	r3, [sp, #28]
 800bd62:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd64:	1af3      	subs	r3, r6, r3
 800bd66:	2f00      	cmp	r7, #0
 800bd68:	bf08      	it	eq
 800bd6a:	462f      	moveq	r7, r5
 800bd6c:	2d10      	cmp	r5, #16
 800bd6e:	9308      	str	r3, [sp, #32]
 800bd70:	46a8      	mov	r8, r5
 800bd72:	bfa8      	it	ge
 800bd74:	f04f 0810 	movge.w	r8, #16
 800bd78:	f7f4 fbcc 	bl	8000514 <__aeabi_ui2d>
 800bd7c:	2d09      	cmp	r5, #9
 800bd7e:	4682      	mov	sl, r0
 800bd80:	468b      	mov	fp, r1
 800bd82:	dd13      	ble.n	800bdac <_strtod_l+0x3e4>
 800bd84:	4b79      	ldr	r3, [pc, #484]	; (800bf6c <_strtod_l+0x5a4>)
 800bd86:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800bd8a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800bd8e:	f7f4 fc3b 	bl	8000608 <__aeabi_dmul>
 800bd92:	4682      	mov	sl, r0
 800bd94:	4648      	mov	r0, r9
 800bd96:	468b      	mov	fp, r1
 800bd98:	f7f4 fbbc 	bl	8000514 <__aeabi_ui2d>
 800bd9c:	4602      	mov	r2, r0
 800bd9e:	460b      	mov	r3, r1
 800bda0:	4650      	mov	r0, sl
 800bda2:	4659      	mov	r1, fp
 800bda4:	f7f4 fa7a 	bl	800029c <__adddf3>
 800bda8:	4682      	mov	sl, r0
 800bdaa:	468b      	mov	fp, r1
 800bdac:	2d0f      	cmp	r5, #15
 800bdae:	dc38      	bgt.n	800be22 <_strtod_l+0x45a>
 800bdb0:	9b08      	ldr	r3, [sp, #32]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	f43f ae4a 	beq.w	800ba4c <_strtod_l+0x84>
 800bdb8:	dd24      	ble.n	800be04 <_strtod_l+0x43c>
 800bdba:	2b16      	cmp	r3, #22
 800bdbc:	dc0b      	bgt.n	800bdd6 <_strtod_l+0x40e>
 800bdbe:	4d6b      	ldr	r5, [pc, #428]	; (800bf6c <_strtod_l+0x5a4>)
 800bdc0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800bdc4:	e9d5 0100 	ldrd	r0, r1, [r5]
 800bdc8:	4652      	mov	r2, sl
 800bdca:	465b      	mov	r3, fp
 800bdcc:	f7f4 fc1c 	bl	8000608 <__aeabi_dmul>
 800bdd0:	4682      	mov	sl, r0
 800bdd2:	468b      	mov	fp, r1
 800bdd4:	e63a      	b.n	800ba4c <_strtod_l+0x84>
 800bdd6:	9a08      	ldr	r2, [sp, #32]
 800bdd8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800bddc:	4293      	cmp	r3, r2
 800bdde:	db20      	blt.n	800be22 <_strtod_l+0x45a>
 800bde0:	4c62      	ldr	r4, [pc, #392]	; (800bf6c <_strtod_l+0x5a4>)
 800bde2:	f1c5 050f 	rsb	r5, r5, #15
 800bde6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800bdea:	4652      	mov	r2, sl
 800bdec:	465b      	mov	r3, fp
 800bdee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bdf2:	f7f4 fc09 	bl	8000608 <__aeabi_dmul>
 800bdf6:	9b08      	ldr	r3, [sp, #32]
 800bdf8:	1b5d      	subs	r5, r3, r5
 800bdfa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800bdfe:	e9d4 2300 	ldrd	r2, r3, [r4]
 800be02:	e7e3      	b.n	800bdcc <_strtod_l+0x404>
 800be04:	9b08      	ldr	r3, [sp, #32]
 800be06:	3316      	adds	r3, #22
 800be08:	db0b      	blt.n	800be22 <_strtod_l+0x45a>
 800be0a:	9b07      	ldr	r3, [sp, #28]
 800be0c:	4a57      	ldr	r2, [pc, #348]	; (800bf6c <_strtod_l+0x5a4>)
 800be0e:	1b9e      	subs	r6, r3, r6
 800be10:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800be14:	e9d6 2300 	ldrd	r2, r3, [r6]
 800be18:	4650      	mov	r0, sl
 800be1a:	4659      	mov	r1, fp
 800be1c:	f7f4 fd1e 	bl	800085c <__aeabi_ddiv>
 800be20:	e7d6      	b.n	800bdd0 <_strtod_l+0x408>
 800be22:	9b08      	ldr	r3, [sp, #32]
 800be24:	eba5 0808 	sub.w	r8, r5, r8
 800be28:	4498      	add	r8, r3
 800be2a:	f1b8 0f00 	cmp.w	r8, #0
 800be2e:	dd71      	ble.n	800bf14 <_strtod_l+0x54c>
 800be30:	f018 030f 	ands.w	r3, r8, #15
 800be34:	d00a      	beq.n	800be4c <_strtod_l+0x484>
 800be36:	494d      	ldr	r1, [pc, #308]	; (800bf6c <_strtod_l+0x5a4>)
 800be38:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800be3c:	4652      	mov	r2, sl
 800be3e:	465b      	mov	r3, fp
 800be40:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be44:	f7f4 fbe0 	bl	8000608 <__aeabi_dmul>
 800be48:	4682      	mov	sl, r0
 800be4a:	468b      	mov	fp, r1
 800be4c:	f038 080f 	bics.w	r8, r8, #15
 800be50:	d04d      	beq.n	800beee <_strtod_l+0x526>
 800be52:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800be56:	dd22      	ble.n	800be9e <_strtod_l+0x4d6>
 800be58:	2500      	movs	r5, #0
 800be5a:	462e      	mov	r6, r5
 800be5c:	9509      	str	r5, [sp, #36]	; 0x24
 800be5e:	9507      	str	r5, [sp, #28]
 800be60:	2322      	movs	r3, #34	; 0x22
 800be62:	f8df b110 	ldr.w	fp, [pc, #272]	; 800bf74 <_strtod_l+0x5ac>
 800be66:	6023      	str	r3, [r4, #0]
 800be68:	f04f 0a00 	mov.w	sl, #0
 800be6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be6e:	2b00      	cmp	r3, #0
 800be70:	f43f adec 	beq.w	800ba4c <_strtod_l+0x84>
 800be74:	991e      	ldr	r1, [sp, #120]	; 0x78
 800be76:	4620      	mov	r0, r4
 800be78:	f002 f86e 	bl	800df58 <_Bfree>
 800be7c:	9907      	ldr	r1, [sp, #28]
 800be7e:	4620      	mov	r0, r4
 800be80:	f002 f86a 	bl	800df58 <_Bfree>
 800be84:	4631      	mov	r1, r6
 800be86:	4620      	mov	r0, r4
 800be88:	f002 f866 	bl	800df58 <_Bfree>
 800be8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800be8e:	4620      	mov	r0, r4
 800be90:	f002 f862 	bl	800df58 <_Bfree>
 800be94:	4629      	mov	r1, r5
 800be96:	4620      	mov	r0, r4
 800be98:	f002 f85e 	bl	800df58 <_Bfree>
 800be9c:	e5d6      	b.n	800ba4c <_strtod_l+0x84>
 800be9e:	2300      	movs	r3, #0
 800bea0:	ea4f 1828 	mov.w	r8, r8, asr #4
 800bea4:	4650      	mov	r0, sl
 800bea6:	4659      	mov	r1, fp
 800bea8:	4699      	mov	r9, r3
 800beaa:	f1b8 0f01 	cmp.w	r8, #1
 800beae:	dc21      	bgt.n	800bef4 <_strtod_l+0x52c>
 800beb0:	b10b      	cbz	r3, 800beb6 <_strtod_l+0x4ee>
 800beb2:	4682      	mov	sl, r0
 800beb4:	468b      	mov	fp, r1
 800beb6:	4b2e      	ldr	r3, [pc, #184]	; (800bf70 <_strtod_l+0x5a8>)
 800beb8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800bebc:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800bec0:	4652      	mov	r2, sl
 800bec2:	465b      	mov	r3, fp
 800bec4:	e9d9 0100 	ldrd	r0, r1, [r9]
 800bec8:	f7f4 fb9e 	bl	8000608 <__aeabi_dmul>
 800becc:	4b29      	ldr	r3, [pc, #164]	; (800bf74 <_strtod_l+0x5ac>)
 800bece:	460a      	mov	r2, r1
 800bed0:	400b      	ands	r3, r1
 800bed2:	4929      	ldr	r1, [pc, #164]	; (800bf78 <_strtod_l+0x5b0>)
 800bed4:	428b      	cmp	r3, r1
 800bed6:	4682      	mov	sl, r0
 800bed8:	d8be      	bhi.n	800be58 <_strtod_l+0x490>
 800beda:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800bede:	428b      	cmp	r3, r1
 800bee0:	bf86      	itte	hi
 800bee2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800bf7c <_strtod_l+0x5b4>
 800bee6:	f04f 3aff 	movhi.w	sl, #4294967295
 800beea:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800beee:	2300      	movs	r3, #0
 800bef0:	9304      	str	r3, [sp, #16]
 800bef2:	e081      	b.n	800bff8 <_strtod_l+0x630>
 800bef4:	f018 0f01 	tst.w	r8, #1
 800bef8:	d007      	beq.n	800bf0a <_strtod_l+0x542>
 800befa:	4b1d      	ldr	r3, [pc, #116]	; (800bf70 <_strtod_l+0x5a8>)
 800befc:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800bf00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf04:	f7f4 fb80 	bl	8000608 <__aeabi_dmul>
 800bf08:	2301      	movs	r3, #1
 800bf0a:	f109 0901 	add.w	r9, r9, #1
 800bf0e:	ea4f 0868 	mov.w	r8, r8, asr #1
 800bf12:	e7ca      	b.n	800beaa <_strtod_l+0x4e2>
 800bf14:	d0eb      	beq.n	800beee <_strtod_l+0x526>
 800bf16:	f1c8 0800 	rsb	r8, r8, #0
 800bf1a:	f018 020f 	ands.w	r2, r8, #15
 800bf1e:	d00a      	beq.n	800bf36 <_strtod_l+0x56e>
 800bf20:	4b12      	ldr	r3, [pc, #72]	; (800bf6c <_strtod_l+0x5a4>)
 800bf22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bf26:	4650      	mov	r0, sl
 800bf28:	4659      	mov	r1, fp
 800bf2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf2e:	f7f4 fc95 	bl	800085c <__aeabi_ddiv>
 800bf32:	4682      	mov	sl, r0
 800bf34:	468b      	mov	fp, r1
 800bf36:	ea5f 1828 	movs.w	r8, r8, asr #4
 800bf3a:	d0d8      	beq.n	800beee <_strtod_l+0x526>
 800bf3c:	f1b8 0f1f 	cmp.w	r8, #31
 800bf40:	dd1e      	ble.n	800bf80 <_strtod_l+0x5b8>
 800bf42:	2500      	movs	r5, #0
 800bf44:	462e      	mov	r6, r5
 800bf46:	9509      	str	r5, [sp, #36]	; 0x24
 800bf48:	9507      	str	r5, [sp, #28]
 800bf4a:	2322      	movs	r3, #34	; 0x22
 800bf4c:	f04f 0a00 	mov.w	sl, #0
 800bf50:	f04f 0b00 	mov.w	fp, #0
 800bf54:	6023      	str	r3, [r4, #0]
 800bf56:	e789      	b.n	800be6c <_strtod_l+0x4a4>
 800bf58:	0800fd75 	.word	0x0800fd75
 800bf5c:	0800fdb0 	.word	0x0800fdb0
 800bf60:	0800fd6d 	.word	0x0800fd6d
 800bf64:	0800ffa8 	.word	0x0800ffa8
 800bf68:	0800fea3 	.word	0x0800fea3
 800bf6c:	08010190 	.word	0x08010190
 800bf70:	08010168 	.word	0x08010168
 800bf74:	7ff00000 	.word	0x7ff00000
 800bf78:	7ca00000 	.word	0x7ca00000
 800bf7c:	7fefffff 	.word	0x7fefffff
 800bf80:	f018 0310 	ands.w	r3, r8, #16
 800bf84:	bf18      	it	ne
 800bf86:	236a      	movne	r3, #106	; 0x6a
 800bf88:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800c340 <_strtod_l+0x978>
 800bf8c:	9304      	str	r3, [sp, #16]
 800bf8e:	4650      	mov	r0, sl
 800bf90:	4659      	mov	r1, fp
 800bf92:	2300      	movs	r3, #0
 800bf94:	f018 0f01 	tst.w	r8, #1
 800bf98:	d004      	beq.n	800bfa4 <_strtod_l+0x5dc>
 800bf9a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800bf9e:	f7f4 fb33 	bl	8000608 <__aeabi_dmul>
 800bfa2:	2301      	movs	r3, #1
 800bfa4:	ea5f 0868 	movs.w	r8, r8, asr #1
 800bfa8:	f109 0908 	add.w	r9, r9, #8
 800bfac:	d1f2      	bne.n	800bf94 <_strtod_l+0x5cc>
 800bfae:	b10b      	cbz	r3, 800bfb4 <_strtod_l+0x5ec>
 800bfb0:	4682      	mov	sl, r0
 800bfb2:	468b      	mov	fp, r1
 800bfb4:	9b04      	ldr	r3, [sp, #16]
 800bfb6:	b1bb      	cbz	r3, 800bfe8 <_strtod_l+0x620>
 800bfb8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800bfbc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	4659      	mov	r1, fp
 800bfc4:	dd10      	ble.n	800bfe8 <_strtod_l+0x620>
 800bfc6:	2b1f      	cmp	r3, #31
 800bfc8:	f340 8128 	ble.w	800c21c <_strtod_l+0x854>
 800bfcc:	2b34      	cmp	r3, #52	; 0x34
 800bfce:	bfde      	ittt	le
 800bfd0:	3b20      	suble	r3, #32
 800bfd2:	f04f 32ff 	movle.w	r2, #4294967295
 800bfd6:	fa02 f303 	lslle.w	r3, r2, r3
 800bfda:	f04f 0a00 	mov.w	sl, #0
 800bfde:	bfcc      	ite	gt
 800bfe0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800bfe4:	ea03 0b01 	andle.w	fp, r3, r1
 800bfe8:	2200      	movs	r2, #0
 800bfea:	2300      	movs	r3, #0
 800bfec:	4650      	mov	r0, sl
 800bfee:	4659      	mov	r1, fp
 800bff0:	f7f4 fd72 	bl	8000ad8 <__aeabi_dcmpeq>
 800bff4:	2800      	cmp	r0, #0
 800bff6:	d1a4      	bne.n	800bf42 <_strtod_l+0x57a>
 800bff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bffa:	9300      	str	r3, [sp, #0]
 800bffc:	990a      	ldr	r1, [sp, #40]	; 0x28
 800bffe:	462b      	mov	r3, r5
 800c000:	463a      	mov	r2, r7
 800c002:	4620      	mov	r0, r4
 800c004:	f002 f814 	bl	800e030 <__s2b>
 800c008:	9009      	str	r0, [sp, #36]	; 0x24
 800c00a:	2800      	cmp	r0, #0
 800c00c:	f43f af24 	beq.w	800be58 <_strtod_l+0x490>
 800c010:	9b07      	ldr	r3, [sp, #28]
 800c012:	1b9e      	subs	r6, r3, r6
 800c014:	9b08      	ldr	r3, [sp, #32]
 800c016:	2b00      	cmp	r3, #0
 800c018:	bfb4      	ite	lt
 800c01a:	4633      	movlt	r3, r6
 800c01c:	2300      	movge	r3, #0
 800c01e:	9310      	str	r3, [sp, #64]	; 0x40
 800c020:	9b08      	ldr	r3, [sp, #32]
 800c022:	2500      	movs	r5, #0
 800c024:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c028:	9318      	str	r3, [sp, #96]	; 0x60
 800c02a:	462e      	mov	r6, r5
 800c02c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c02e:	4620      	mov	r0, r4
 800c030:	6859      	ldr	r1, [r3, #4]
 800c032:	f001 ff51 	bl	800ded8 <_Balloc>
 800c036:	9007      	str	r0, [sp, #28]
 800c038:	2800      	cmp	r0, #0
 800c03a:	f43f af11 	beq.w	800be60 <_strtod_l+0x498>
 800c03e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c040:	691a      	ldr	r2, [r3, #16]
 800c042:	3202      	adds	r2, #2
 800c044:	f103 010c 	add.w	r1, r3, #12
 800c048:	0092      	lsls	r2, r2, #2
 800c04a:	300c      	adds	r0, #12
 800c04c:	f7fe ffe6 	bl	800b01c <memcpy>
 800c050:	ec4b ab10 	vmov	d0, sl, fp
 800c054:	aa20      	add	r2, sp, #128	; 0x80
 800c056:	a91f      	add	r1, sp, #124	; 0x7c
 800c058:	4620      	mov	r0, r4
 800c05a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800c05e:	f002 fb23 	bl	800e6a8 <__d2b>
 800c062:	901e      	str	r0, [sp, #120]	; 0x78
 800c064:	2800      	cmp	r0, #0
 800c066:	f43f aefb 	beq.w	800be60 <_strtod_l+0x498>
 800c06a:	2101      	movs	r1, #1
 800c06c:	4620      	mov	r0, r4
 800c06e:	f002 f879 	bl	800e164 <__i2b>
 800c072:	4606      	mov	r6, r0
 800c074:	2800      	cmp	r0, #0
 800c076:	f43f aef3 	beq.w	800be60 <_strtod_l+0x498>
 800c07a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c07c:	9904      	ldr	r1, [sp, #16]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	bfab      	itete	ge
 800c082:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800c084:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800c086:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800c088:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800c08c:	bfac      	ite	ge
 800c08e:	eb03 0902 	addge.w	r9, r3, r2
 800c092:	1ad7      	sublt	r7, r2, r3
 800c094:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c096:	eba3 0801 	sub.w	r8, r3, r1
 800c09a:	4490      	add	r8, r2
 800c09c:	4ba3      	ldr	r3, [pc, #652]	; (800c32c <_strtod_l+0x964>)
 800c09e:	f108 38ff 	add.w	r8, r8, #4294967295
 800c0a2:	4598      	cmp	r8, r3
 800c0a4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c0a8:	f280 80cc 	bge.w	800c244 <_strtod_l+0x87c>
 800c0ac:	eba3 0308 	sub.w	r3, r3, r8
 800c0b0:	2b1f      	cmp	r3, #31
 800c0b2:	eba2 0203 	sub.w	r2, r2, r3
 800c0b6:	f04f 0101 	mov.w	r1, #1
 800c0ba:	f300 80b6 	bgt.w	800c22a <_strtod_l+0x862>
 800c0be:	fa01 f303 	lsl.w	r3, r1, r3
 800c0c2:	9311      	str	r3, [sp, #68]	; 0x44
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	930c      	str	r3, [sp, #48]	; 0x30
 800c0c8:	eb09 0802 	add.w	r8, r9, r2
 800c0cc:	9b04      	ldr	r3, [sp, #16]
 800c0ce:	45c1      	cmp	r9, r8
 800c0d0:	4417      	add	r7, r2
 800c0d2:	441f      	add	r7, r3
 800c0d4:	464b      	mov	r3, r9
 800c0d6:	bfa8      	it	ge
 800c0d8:	4643      	movge	r3, r8
 800c0da:	42bb      	cmp	r3, r7
 800c0dc:	bfa8      	it	ge
 800c0de:	463b      	movge	r3, r7
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	bfc2      	ittt	gt
 800c0e4:	eba8 0803 	subgt.w	r8, r8, r3
 800c0e8:	1aff      	subgt	r7, r7, r3
 800c0ea:	eba9 0903 	subgt.w	r9, r9, r3
 800c0ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	dd17      	ble.n	800c124 <_strtod_l+0x75c>
 800c0f4:	4631      	mov	r1, r6
 800c0f6:	461a      	mov	r2, r3
 800c0f8:	4620      	mov	r0, r4
 800c0fa:	f002 f8ef 	bl	800e2dc <__pow5mult>
 800c0fe:	4606      	mov	r6, r0
 800c100:	2800      	cmp	r0, #0
 800c102:	f43f aead 	beq.w	800be60 <_strtod_l+0x498>
 800c106:	4601      	mov	r1, r0
 800c108:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c10a:	4620      	mov	r0, r4
 800c10c:	f002 f840 	bl	800e190 <__multiply>
 800c110:	900f      	str	r0, [sp, #60]	; 0x3c
 800c112:	2800      	cmp	r0, #0
 800c114:	f43f aea4 	beq.w	800be60 <_strtod_l+0x498>
 800c118:	991e      	ldr	r1, [sp, #120]	; 0x78
 800c11a:	4620      	mov	r0, r4
 800c11c:	f001 ff1c 	bl	800df58 <_Bfree>
 800c120:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c122:	931e      	str	r3, [sp, #120]	; 0x78
 800c124:	f1b8 0f00 	cmp.w	r8, #0
 800c128:	f300 8091 	bgt.w	800c24e <_strtod_l+0x886>
 800c12c:	9b08      	ldr	r3, [sp, #32]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	dd08      	ble.n	800c144 <_strtod_l+0x77c>
 800c132:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c134:	9907      	ldr	r1, [sp, #28]
 800c136:	4620      	mov	r0, r4
 800c138:	f002 f8d0 	bl	800e2dc <__pow5mult>
 800c13c:	9007      	str	r0, [sp, #28]
 800c13e:	2800      	cmp	r0, #0
 800c140:	f43f ae8e 	beq.w	800be60 <_strtod_l+0x498>
 800c144:	2f00      	cmp	r7, #0
 800c146:	dd08      	ble.n	800c15a <_strtod_l+0x792>
 800c148:	9907      	ldr	r1, [sp, #28]
 800c14a:	463a      	mov	r2, r7
 800c14c:	4620      	mov	r0, r4
 800c14e:	f002 f91f 	bl	800e390 <__lshift>
 800c152:	9007      	str	r0, [sp, #28]
 800c154:	2800      	cmp	r0, #0
 800c156:	f43f ae83 	beq.w	800be60 <_strtod_l+0x498>
 800c15a:	f1b9 0f00 	cmp.w	r9, #0
 800c15e:	dd08      	ble.n	800c172 <_strtod_l+0x7aa>
 800c160:	4631      	mov	r1, r6
 800c162:	464a      	mov	r2, r9
 800c164:	4620      	mov	r0, r4
 800c166:	f002 f913 	bl	800e390 <__lshift>
 800c16a:	4606      	mov	r6, r0
 800c16c:	2800      	cmp	r0, #0
 800c16e:	f43f ae77 	beq.w	800be60 <_strtod_l+0x498>
 800c172:	9a07      	ldr	r2, [sp, #28]
 800c174:	991e      	ldr	r1, [sp, #120]	; 0x78
 800c176:	4620      	mov	r0, r4
 800c178:	f002 f992 	bl	800e4a0 <__mdiff>
 800c17c:	4605      	mov	r5, r0
 800c17e:	2800      	cmp	r0, #0
 800c180:	f43f ae6e 	beq.w	800be60 <_strtod_l+0x498>
 800c184:	68c3      	ldr	r3, [r0, #12]
 800c186:	930f      	str	r3, [sp, #60]	; 0x3c
 800c188:	2300      	movs	r3, #0
 800c18a:	60c3      	str	r3, [r0, #12]
 800c18c:	4631      	mov	r1, r6
 800c18e:	f002 f96b 	bl	800e468 <__mcmp>
 800c192:	2800      	cmp	r0, #0
 800c194:	da65      	bge.n	800c262 <_strtod_l+0x89a>
 800c196:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c198:	ea53 030a 	orrs.w	r3, r3, sl
 800c19c:	f040 8087 	bne.w	800c2ae <_strtod_l+0x8e6>
 800c1a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	f040 8082 	bne.w	800c2ae <_strtod_l+0x8e6>
 800c1aa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c1ae:	0d1b      	lsrs	r3, r3, #20
 800c1b0:	051b      	lsls	r3, r3, #20
 800c1b2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c1b6:	d97a      	bls.n	800c2ae <_strtod_l+0x8e6>
 800c1b8:	696b      	ldr	r3, [r5, #20]
 800c1ba:	b913      	cbnz	r3, 800c1c2 <_strtod_l+0x7fa>
 800c1bc:	692b      	ldr	r3, [r5, #16]
 800c1be:	2b01      	cmp	r3, #1
 800c1c0:	dd75      	ble.n	800c2ae <_strtod_l+0x8e6>
 800c1c2:	4629      	mov	r1, r5
 800c1c4:	2201      	movs	r2, #1
 800c1c6:	4620      	mov	r0, r4
 800c1c8:	f002 f8e2 	bl	800e390 <__lshift>
 800c1cc:	4631      	mov	r1, r6
 800c1ce:	4605      	mov	r5, r0
 800c1d0:	f002 f94a 	bl	800e468 <__mcmp>
 800c1d4:	2800      	cmp	r0, #0
 800c1d6:	dd6a      	ble.n	800c2ae <_strtod_l+0x8e6>
 800c1d8:	9904      	ldr	r1, [sp, #16]
 800c1da:	4a55      	ldr	r2, [pc, #340]	; (800c330 <_strtod_l+0x968>)
 800c1dc:	465b      	mov	r3, fp
 800c1de:	2900      	cmp	r1, #0
 800c1e0:	f000 8085 	beq.w	800c2ee <_strtod_l+0x926>
 800c1e4:	ea02 010b 	and.w	r1, r2, fp
 800c1e8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c1ec:	dc7f      	bgt.n	800c2ee <_strtod_l+0x926>
 800c1ee:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c1f2:	f77f aeaa 	ble.w	800bf4a <_strtod_l+0x582>
 800c1f6:	4a4f      	ldr	r2, [pc, #316]	; (800c334 <_strtod_l+0x96c>)
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800c1fe:	4650      	mov	r0, sl
 800c200:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800c204:	4659      	mov	r1, fp
 800c206:	f7f4 f9ff 	bl	8000608 <__aeabi_dmul>
 800c20a:	460b      	mov	r3, r1
 800c20c:	4303      	orrs	r3, r0
 800c20e:	bf08      	it	eq
 800c210:	2322      	moveq	r3, #34	; 0x22
 800c212:	4682      	mov	sl, r0
 800c214:	468b      	mov	fp, r1
 800c216:	bf08      	it	eq
 800c218:	6023      	streq	r3, [r4, #0]
 800c21a:	e62b      	b.n	800be74 <_strtod_l+0x4ac>
 800c21c:	f04f 32ff 	mov.w	r2, #4294967295
 800c220:	fa02 f303 	lsl.w	r3, r2, r3
 800c224:	ea03 0a0a 	and.w	sl, r3, sl
 800c228:	e6de      	b.n	800bfe8 <_strtod_l+0x620>
 800c22a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800c22e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800c232:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800c236:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800c23a:	fa01 f308 	lsl.w	r3, r1, r8
 800c23e:	930c      	str	r3, [sp, #48]	; 0x30
 800c240:	9111      	str	r1, [sp, #68]	; 0x44
 800c242:	e741      	b.n	800c0c8 <_strtod_l+0x700>
 800c244:	2300      	movs	r3, #0
 800c246:	930c      	str	r3, [sp, #48]	; 0x30
 800c248:	2301      	movs	r3, #1
 800c24a:	9311      	str	r3, [sp, #68]	; 0x44
 800c24c:	e73c      	b.n	800c0c8 <_strtod_l+0x700>
 800c24e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800c250:	4642      	mov	r2, r8
 800c252:	4620      	mov	r0, r4
 800c254:	f002 f89c 	bl	800e390 <__lshift>
 800c258:	901e      	str	r0, [sp, #120]	; 0x78
 800c25a:	2800      	cmp	r0, #0
 800c25c:	f47f af66 	bne.w	800c12c <_strtod_l+0x764>
 800c260:	e5fe      	b.n	800be60 <_strtod_l+0x498>
 800c262:	465f      	mov	r7, fp
 800c264:	d16e      	bne.n	800c344 <_strtod_l+0x97c>
 800c266:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c268:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c26c:	b342      	cbz	r2, 800c2c0 <_strtod_l+0x8f8>
 800c26e:	4a32      	ldr	r2, [pc, #200]	; (800c338 <_strtod_l+0x970>)
 800c270:	4293      	cmp	r3, r2
 800c272:	d128      	bne.n	800c2c6 <_strtod_l+0x8fe>
 800c274:	9b04      	ldr	r3, [sp, #16]
 800c276:	4650      	mov	r0, sl
 800c278:	b1eb      	cbz	r3, 800c2b6 <_strtod_l+0x8ee>
 800c27a:	4a2d      	ldr	r2, [pc, #180]	; (800c330 <_strtod_l+0x968>)
 800c27c:	403a      	ands	r2, r7
 800c27e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800c282:	f04f 31ff 	mov.w	r1, #4294967295
 800c286:	d819      	bhi.n	800c2bc <_strtod_l+0x8f4>
 800c288:	0d12      	lsrs	r2, r2, #20
 800c28a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c28e:	fa01 f303 	lsl.w	r3, r1, r3
 800c292:	4298      	cmp	r0, r3
 800c294:	d117      	bne.n	800c2c6 <_strtod_l+0x8fe>
 800c296:	4b29      	ldr	r3, [pc, #164]	; (800c33c <_strtod_l+0x974>)
 800c298:	429f      	cmp	r7, r3
 800c29a:	d102      	bne.n	800c2a2 <_strtod_l+0x8da>
 800c29c:	3001      	adds	r0, #1
 800c29e:	f43f addf 	beq.w	800be60 <_strtod_l+0x498>
 800c2a2:	4b23      	ldr	r3, [pc, #140]	; (800c330 <_strtod_l+0x968>)
 800c2a4:	403b      	ands	r3, r7
 800c2a6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800c2aa:	f04f 0a00 	mov.w	sl, #0
 800c2ae:	9b04      	ldr	r3, [sp, #16]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d1a0      	bne.n	800c1f6 <_strtod_l+0x82e>
 800c2b4:	e5de      	b.n	800be74 <_strtod_l+0x4ac>
 800c2b6:	f04f 33ff 	mov.w	r3, #4294967295
 800c2ba:	e7ea      	b.n	800c292 <_strtod_l+0x8ca>
 800c2bc:	460b      	mov	r3, r1
 800c2be:	e7e8      	b.n	800c292 <_strtod_l+0x8ca>
 800c2c0:	ea53 030a 	orrs.w	r3, r3, sl
 800c2c4:	d088      	beq.n	800c1d8 <_strtod_l+0x810>
 800c2c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c2c8:	b1db      	cbz	r3, 800c302 <_strtod_l+0x93a>
 800c2ca:	423b      	tst	r3, r7
 800c2cc:	d0ef      	beq.n	800c2ae <_strtod_l+0x8e6>
 800c2ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c2d0:	9a04      	ldr	r2, [sp, #16]
 800c2d2:	4650      	mov	r0, sl
 800c2d4:	4659      	mov	r1, fp
 800c2d6:	b1c3      	cbz	r3, 800c30a <_strtod_l+0x942>
 800c2d8:	f7ff fb57 	bl	800b98a <sulp>
 800c2dc:	4602      	mov	r2, r0
 800c2de:	460b      	mov	r3, r1
 800c2e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c2e4:	f7f3 ffda 	bl	800029c <__adddf3>
 800c2e8:	4682      	mov	sl, r0
 800c2ea:	468b      	mov	fp, r1
 800c2ec:	e7df      	b.n	800c2ae <_strtod_l+0x8e6>
 800c2ee:	4013      	ands	r3, r2
 800c2f0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c2f4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c2f8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c2fc:	f04f 3aff 	mov.w	sl, #4294967295
 800c300:	e7d5      	b.n	800c2ae <_strtod_l+0x8e6>
 800c302:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c304:	ea13 0f0a 	tst.w	r3, sl
 800c308:	e7e0      	b.n	800c2cc <_strtod_l+0x904>
 800c30a:	f7ff fb3e 	bl	800b98a <sulp>
 800c30e:	4602      	mov	r2, r0
 800c310:	460b      	mov	r3, r1
 800c312:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c316:	f7f3 ffbf 	bl	8000298 <__aeabi_dsub>
 800c31a:	2200      	movs	r2, #0
 800c31c:	2300      	movs	r3, #0
 800c31e:	4682      	mov	sl, r0
 800c320:	468b      	mov	fp, r1
 800c322:	f7f4 fbd9 	bl	8000ad8 <__aeabi_dcmpeq>
 800c326:	2800      	cmp	r0, #0
 800c328:	d0c1      	beq.n	800c2ae <_strtod_l+0x8e6>
 800c32a:	e60e      	b.n	800bf4a <_strtod_l+0x582>
 800c32c:	fffffc02 	.word	0xfffffc02
 800c330:	7ff00000 	.word	0x7ff00000
 800c334:	39500000 	.word	0x39500000
 800c338:	000fffff 	.word	0x000fffff
 800c33c:	7fefffff 	.word	0x7fefffff
 800c340:	0800fdc8 	.word	0x0800fdc8
 800c344:	4631      	mov	r1, r6
 800c346:	4628      	mov	r0, r5
 800c348:	f002 fa0a 	bl	800e760 <__ratio>
 800c34c:	ec59 8b10 	vmov	r8, r9, d0
 800c350:	ee10 0a10 	vmov	r0, s0
 800c354:	2200      	movs	r2, #0
 800c356:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c35a:	4649      	mov	r1, r9
 800c35c:	f7f4 fbd0 	bl	8000b00 <__aeabi_dcmple>
 800c360:	2800      	cmp	r0, #0
 800c362:	d07c      	beq.n	800c45e <_strtod_l+0xa96>
 800c364:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c366:	2b00      	cmp	r3, #0
 800c368:	d04c      	beq.n	800c404 <_strtod_l+0xa3c>
 800c36a:	4b95      	ldr	r3, [pc, #596]	; (800c5c0 <_strtod_l+0xbf8>)
 800c36c:	2200      	movs	r2, #0
 800c36e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800c372:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800c5c0 <_strtod_l+0xbf8>
 800c376:	f04f 0800 	mov.w	r8, #0
 800c37a:	4b92      	ldr	r3, [pc, #584]	; (800c5c4 <_strtod_l+0xbfc>)
 800c37c:	403b      	ands	r3, r7
 800c37e:	9311      	str	r3, [sp, #68]	; 0x44
 800c380:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c382:	4b91      	ldr	r3, [pc, #580]	; (800c5c8 <_strtod_l+0xc00>)
 800c384:	429a      	cmp	r2, r3
 800c386:	f040 80b2 	bne.w	800c4ee <_strtod_l+0xb26>
 800c38a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c38e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c392:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800c396:	ec4b ab10 	vmov	d0, sl, fp
 800c39a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800c39e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c3a2:	f002 f905 	bl	800e5b0 <__ulp>
 800c3a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c3aa:	ec53 2b10 	vmov	r2, r3, d0
 800c3ae:	f7f4 f92b 	bl	8000608 <__aeabi_dmul>
 800c3b2:	4652      	mov	r2, sl
 800c3b4:	465b      	mov	r3, fp
 800c3b6:	f7f3 ff71 	bl	800029c <__adddf3>
 800c3ba:	460b      	mov	r3, r1
 800c3bc:	4981      	ldr	r1, [pc, #516]	; (800c5c4 <_strtod_l+0xbfc>)
 800c3be:	4a83      	ldr	r2, [pc, #524]	; (800c5cc <_strtod_l+0xc04>)
 800c3c0:	4019      	ands	r1, r3
 800c3c2:	4291      	cmp	r1, r2
 800c3c4:	4682      	mov	sl, r0
 800c3c6:	d95e      	bls.n	800c486 <_strtod_l+0xabe>
 800c3c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c3ca:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800c3ce:	4293      	cmp	r3, r2
 800c3d0:	d103      	bne.n	800c3da <_strtod_l+0xa12>
 800c3d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3d4:	3301      	adds	r3, #1
 800c3d6:	f43f ad43 	beq.w	800be60 <_strtod_l+0x498>
 800c3da:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800c5d8 <_strtod_l+0xc10>
 800c3de:	f04f 3aff 	mov.w	sl, #4294967295
 800c3e2:	991e      	ldr	r1, [sp, #120]	; 0x78
 800c3e4:	4620      	mov	r0, r4
 800c3e6:	f001 fdb7 	bl	800df58 <_Bfree>
 800c3ea:	9907      	ldr	r1, [sp, #28]
 800c3ec:	4620      	mov	r0, r4
 800c3ee:	f001 fdb3 	bl	800df58 <_Bfree>
 800c3f2:	4631      	mov	r1, r6
 800c3f4:	4620      	mov	r0, r4
 800c3f6:	f001 fdaf 	bl	800df58 <_Bfree>
 800c3fa:	4629      	mov	r1, r5
 800c3fc:	4620      	mov	r0, r4
 800c3fe:	f001 fdab 	bl	800df58 <_Bfree>
 800c402:	e613      	b.n	800c02c <_strtod_l+0x664>
 800c404:	f1ba 0f00 	cmp.w	sl, #0
 800c408:	d11b      	bne.n	800c442 <_strtod_l+0xa7a>
 800c40a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c40e:	b9f3      	cbnz	r3, 800c44e <_strtod_l+0xa86>
 800c410:	4b6b      	ldr	r3, [pc, #428]	; (800c5c0 <_strtod_l+0xbf8>)
 800c412:	2200      	movs	r2, #0
 800c414:	4640      	mov	r0, r8
 800c416:	4649      	mov	r1, r9
 800c418:	f7f4 fb68 	bl	8000aec <__aeabi_dcmplt>
 800c41c:	b9d0      	cbnz	r0, 800c454 <_strtod_l+0xa8c>
 800c41e:	4640      	mov	r0, r8
 800c420:	4649      	mov	r1, r9
 800c422:	4b6b      	ldr	r3, [pc, #428]	; (800c5d0 <_strtod_l+0xc08>)
 800c424:	2200      	movs	r2, #0
 800c426:	f7f4 f8ef 	bl	8000608 <__aeabi_dmul>
 800c42a:	4680      	mov	r8, r0
 800c42c:	4689      	mov	r9, r1
 800c42e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c432:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800c436:	931b      	str	r3, [sp, #108]	; 0x6c
 800c438:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800c43c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800c440:	e79b      	b.n	800c37a <_strtod_l+0x9b2>
 800c442:	f1ba 0f01 	cmp.w	sl, #1
 800c446:	d102      	bne.n	800c44e <_strtod_l+0xa86>
 800c448:	2f00      	cmp	r7, #0
 800c44a:	f43f ad7e 	beq.w	800bf4a <_strtod_l+0x582>
 800c44e:	4b61      	ldr	r3, [pc, #388]	; (800c5d4 <_strtod_l+0xc0c>)
 800c450:	2200      	movs	r2, #0
 800c452:	e78c      	b.n	800c36e <_strtod_l+0x9a6>
 800c454:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800c5d0 <_strtod_l+0xc08>
 800c458:	f04f 0800 	mov.w	r8, #0
 800c45c:	e7e7      	b.n	800c42e <_strtod_l+0xa66>
 800c45e:	4b5c      	ldr	r3, [pc, #368]	; (800c5d0 <_strtod_l+0xc08>)
 800c460:	4640      	mov	r0, r8
 800c462:	4649      	mov	r1, r9
 800c464:	2200      	movs	r2, #0
 800c466:	f7f4 f8cf 	bl	8000608 <__aeabi_dmul>
 800c46a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c46c:	4680      	mov	r8, r0
 800c46e:	4689      	mov	r9, r1
 800c470:	b933      	cbnz	r3, 800c480 <_strtod_l+0xab8>
 800c472:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c476:	9012      	str	r0, [sp, #72]	; 0x48
 800c478:	9313      	str	r3, [sp, #76]	; 0x4c
 800c47a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800c47e:	e7dd      	b.n	800c43c <_strtod_l+0xa74>
 800c480:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800c484:	e7f9      	b.n	800c47a <_strtod_l+0xab2>
 800c486:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800c48a:	9b04      	ldr	r3, [sp, #16]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d1a8      	bne.n	800c3e2 <_strtod_l+0xa1a>
 800c490:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c494:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c496:	0d1b      	lsrs	r3, r3, #20
 800c498:	051b      	lsls	r3, r3, #20
 800c49a:	429a      	cmp	r2, r3
 800c49c:	d1a1      	bne.n	800c3e2 <_strtod_l+0xa1a>
 800c49e:	4640      	mov	r0, r8
 800c4a0:	4649      	mov	r1, r9
 800c4a2:	f7f4 fc11 	bl	8000cc8 <__aeabi_d2lz>
 800c4a6:	f7f4 f881 	bl	80005ac <__aeabi_l2d>
 800c4aa:	4602      	mov	r2, r0
 800c4ac:	460b      	mov	r3, r1
 800c4ae:	4640      	mov	r0, r8
 800c4b0:	4649      	mov	r1, r9
 800c4b2:	f7f3 fef1 	bl	8000298 <__aeabi_dsub>
 800c4b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c4b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c4bc:	ea43 030a 	orr.w	r3, r3, sl
 800c4c0:	4313      	orrs	r3, r2
 800c4c2:	4680      	mov	r8, r0
 800c4c4:	4689      	mov	r9, r1
 800c4c6:	d053      	beq.n	800c570 <_strtod_l+0xba8>
 800c4c8:	a335      	add	r3, pc, #212	; (adr r3, 800c5a0 <_strtod_l+0xbd8>)
 800c4ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ce:	f7f4 fb0d 	bl	8000aec <__aeabi_dcmplt>
 800c4d2:	2800      	cmp	r0, #0
 800c4d4:	f47f acce 	bne.w	800be74 <_strtod_l+0x4ac>
 800c4d8:	a333      	add	r3, pc, #204	; (adr r3, 800c5a8 <_strtod_l+0xbe0>)
 800c4da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4de:	4640      	mov	r0, r8
 800c4e0:	4649      	mov	r1, r9
 800c4e2:	f7f4 fb21 	bl	8000b28 <__aeabi_dcmpgt>
 800c4e6:	2800      	cmp	r0, #0
 800c4e8:	f43f af7b 	beq.w	800c3e2 <_strtod_l+0xa1a>
 800c4ec:	e4c2      	b.n	800be74 <_strtod_l+0x4ac>
 800c4ee:	9b04      	ldr	r3, [sp, #16]
 800c4f0:	b333      	cbz	r3, 800c540 <_strtod_l+0xb78>
 800c4f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c4f4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c4f8:	d822      	bhi.n	800c540 <_strtod_l+0xb78>
 800c4fa:	a32d      	add	r3, pc, #180	; (adr r3, 800c5b0 <_strtod_l+0xbe8>)
 800c4fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c500:	4640      	mov	r0, r8
 800c502:	4649      	mov	r1, r9
 800c504:	f7f4 fafc 	bl	8000b00 <__aeabi_dcmple>
 800c508:	b1a0      	cbz	r0, 800c534 <_strtod_l+0xb6c>
 800c50a:	4649      	mov	r1, r9
 800c50c:	4640      	mov	r0, r8
 800c50e:	f7f4 fb53 	bl	8000bb8 <__aeabi_d2uiz>
 800c512:	2801      	cmp	r0, #1
 800c514:	bf38      	it	cc
 800c516:	2001      	movcc	r0, #1
 800c518:	f7f3 fffc 	bl	8000514 <__aeabi_ui2d>
 800c51c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c51e:	4680      	mov	r8, r0
 800c520:	4689      	mov	r9, r1
 800c522:	bb13      	cbnz	r3, 800c56a <_strtod_l+0xba2>
 800c524:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c528:	9014      	str	r0, [sp, #80]	; 0x50
 800c52a:	9315      	str	r3, [sp, #84]	; 0x54
 800c52c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c530:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800c534:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c536:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c538:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c53c:	1a9b      	subs	r3, r3, r2
 800c53e:	930d      	str	r3, [sp, #52]	; 0x34
 800c540:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c544:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800c548:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c54c:	f002 f830 	bl	800e5b0 <__ulp>
 800c550:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c554:	ec53 2b10 	vmov	r2, r3, d0
 800c558:	f7f4 f856 	bl	8000608 <__aeabi_dmul>
 800c55c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c560:	f7f3 fe9c 	bl	800029c <__adddf3>
 800c564:	4682      	mov	sl, r0
 800c566:	468b      	mov	fp, r1
 800c568:	e78f      	b.n	800c48a <_strtod_l+0xac2>
 800c56a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800c56e:	e7dd      	b.n	800c52c <_strtod_l+0xb64>
 800c570:	a311      	add	r3, pc, #68	; (adr r3, 800c5b8 <_strtod_l+0xbf0>)
 800c572:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c576:	f7f4 fab9 	bl	8000aec <__aeabi_dcmplt>
 800c57a:	e7b4      	b.n	800c4e6 <_strtod_l+0xb1e>
 800c57c:	2300      	movs	r3, #0
 800c57e:	930e      	str	r3, [sp, #56]	; 0x38
 800c580:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c582:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c584:	6013      	str	r3, [r2, #0]
 800c586:	f7ff ba65 	b.w	800ba54 <_strtod_l+0x8c>
 800c58a:	2b65      	cmp	r3, #101	; 0x65
 800c58c:	f43f ab5d 	beq.w	800bc4a <_strtod_l+0x282>
 800c590:	2b45      	cmp	r3, #69	; 0x45
 800c592:	f43f ab5a 	beq.w	800bc4a <_strtod_l+0x282>
 800c596:	2201      	movs	r2, #1
 800c598:	f7ff bb92 	b.w	800bcc0 <_strtod_l+0x2f8>
 800c59c:	f3af 8000 	nop.w
 800c5a0:	94a03595 	.word	0x94a03595
 800c5a4:	3fdfffff 	.word	0x3fdfffff
 800c5a8:	35afe535 	.word	0x35afe535
 800c5ac:	3fe00000 	.word	0x3fe00000
 800c5b0:	ffc00000 	.word	0xffc00000
 800c5b4:	41dfffff 	.word	0x41dfffff
 800c5b8:	94a03595 	.word	0x94a03595
 800c5bc:	3fcfffff 	.word	0x3fcfffff
 800c5c0:	3ff00000 	.word	0x3ff00000
 800c5c4:	7ff00000 	.word	0x7ff00000
 800c5c8:	7fe00000 	.word	0x7fe00000
 800c5cc:	7c9fffff 	.word	0x7c9fffff
 800c5d0:	3fe00000 	.word	0x3fe00000
 800c5d4:	bff00000 	.word	0xbff00000
 800c5d8:	7fefffff 	.word	0x7fefffff

0800c5dc <strtod>:
 800c5dc:	460a      	mov	r2, r1
 800c5de:	4601      	mov	r1, r0
 800c5e0:	4802      	ldr	r0, [pc, #8]	; (800c5ec <strtod+0x10>)
 800c5e2:	4b03      	ldr	r3, [pc, #12]	; (800c5f0 <strtod+0x14>)
 800c5e4:	6800      	ldr	r0, [r0, #0]
 800c5e6:	f7ff b9ef 	b.w	800b9c8 <_strtod_l>
 800c5ea:	bf00      	nop
 800c5ec:	20000074 	.word	0x20000074
 800c5f0:	200000dc 	.word	0x200000dc

0800c5f4 <strtof>:
 800c5f4:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 800c5f8:	4e26      	ldr	r6, [pc, #152]	; (800c694 <strtof+0xa0>)
 800c5fa:	4b27      	ldr	r3, [pc, #156]	; (800c698 <strtof+0xa4>)
 800c5fc:	460a      	mov	r2, r1
 800c5fe:	ed2d 8b02 	vpush	{d8}
 800c602:	4601      	mov	r1, r0
 800c604:	6830      	ldr	r0, [r6, #0]
 800c606:	f7ff f9df 	bl	800b9c8 <_strtod_l>
 800c60a:	ec55 4b10 	vmov	r4, r5, d0
 800c60e:	ee10 2a10 	vmov	r2, s0
 800c612:	ee10 0a10 	vmov	r0, s0
 800c616:	462b      	mov	r3, r5
 800c618:	4629      	mov	r1, r5
 800c61a:	f7f4 fa8f 	bl	8000b3c <__aeabi_dcmpun>
 800c61e:	b190      	cbz	r0, 800c646 <strtof+0x52>
 800c620:	2d00      	cmp	r5, #0
 800c622:	481e      	ldr	r0, [pc, #120]	; (800c69c <strtof+0xa8>)
 800c624:	da09      	bge.n	800c63a <strtof+0x46>
 800c626:	f002 fc9b 	bl	800ef60 <nanf>
 800c62a:	eeb1 8a40 	vneg.f32	s16, s0
 800c62e:	eeb0 0a48 	vmov.f32	s0, s16
 800c632:	ecbd 8b02 	vpop	{d8}
 800c636:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800c63a:	ecbd 8b02 	vpop	{d8}
 800c63e:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
 800c642:	f002 bc8d 	b.w	800ef60 <nanf>
 800c646:	4620      	mov	r0, r4
 800c648:	4629      	mov	r1, r5
 800c64a:	f7f4 fad5 	bl	8000bf8 <__aeabi_d2f>
 800c64e:	ee08 0a10 	vmov	s16, r0
 800c652:	eddf 7a13 	vldr	s15, [pc, #76]	; 800c6a0 <strtof+0xac>
 800c656:	eeb0 7ac8 	vabs.f32	s14, s16
 800c65a:	eeb4 7a67 	vcmp.f32	s14, s15
 800c65e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c662:	dde4      	ble.n	800c62e <strtof+0x3a>
 800c664:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
 800c668:	4b0e      	ldr	r3, [pc, #56]	; (800c6a4 <strtof+0xb0>)
 800c66a:	f04f 32ff 	mov.w	r2, #4294967295
 800c66e:	4620      	mov	r0, r4
 800c670:	4649      	mov	r1, r9
 800c672:	f7f4 fa63 	bl	8000b3c <__aeabi_dcmpun>
 800c676:	b940      	cbnz	r0, 800c68a <strtof+0x96>
 800c678:	4b0a      	ldr	r3, [pc, #40]	; (800c6a4 <strtof+0xb0>)
 800c67a:	f04f 32ff 	mov.w	r2, #4294967295
 800c67e:	4620      	mov	r0, r4
 800c680:	4649      	mov	r1, r9
 800c682:	f7f4 fa3d 	bl	8000b00 <__aeabi_dcmple>
 800c686:	2800      	cmp	r0, #0
 800c688:	d0d1      	beq.n	800c62e <strtof+0x3a>
 800c68a:	6833      	ldr	r3, [r6, #0]
 800c68c:	2222      	movs	r2, #34	; 0x22
 800c68e:	601a      	str	r2, [r3, #0]
 800c690:	e7cd      	b.n	800c62e <strtof+0x3a>
 800c692:	bf00      	nop
 800c694:	20000074 	.word	0x20000074
 800c698:	200000dc 	.word	0x200000dc
 800c69c:	0800fea3 	.word	0x0800fea3
 800c6a0:	7f7fffff 	.word	0x7f7fffff
 800c6a4:	7fefffff 	.word	0x7fefffff

0800c6a8 <strtok>:
 800c6a8:	4b16      	ldr	r3, [pc, #88]	; (800c704 <strtok+0x5c>)
 800c6aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c6ac:	681e      	ldr	r6, [r3, #0]
 800c6ae:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800c6b0:	4605      	mov	r5, r0
 800c6b2:	b9fc      	cbnz	r4, 800c6f4 <strtok+0x4c>
 800c6b4:	2050      	movs	r0, #80	; 0x50
 800c6b6:	9101      	str	r1, [sp, #4]
 800c6b8:	f001 fbf4 	bl	800dea4 <malloc>
 800c6bc:	9901      	ldr	r1, [sp, #4]
 800c6be:	65b0      	str	r0, [r6, #88]	; 0x58
 800c6c0:	4602      	mov	r2, r0
 800c6c2:	b920      	cbnz	r0, 800c6ce <strtok+0x26>
 800c6c4:	4b10      	ldr	r3, [pc, #64]	; (800c708 <strtok+0x60>)
 800c6c6:	4811      	ldr	r0, [pc, #68]	; (800c70c <strtok+0x64>)
 800c6c8:	2157      	movs	r1, #87	; 0x57
 800c6ca:	f000 f8d7 	bl	800c87c <__assert_func>
 800c6ce:	e9c0 4400 	strd	r4, r4, [r0]
 800c6d2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800c6d6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800c6da:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800c6de:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800c6e2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800c6e6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800c6ea:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800c6ee:	6184      	str	r4, [r0, #24]
 800c6f0:	7704      	strb	r4, [r0, #28]
 800c6f2:	6244      	str	r4, [r0, #36]	; 0x24
 800c6f4:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800c6f6:	2301      	movs	r3, #1
 800c6f8:	4628      	mov	r0, r5
 800c6fa:	b002      	add	sp, #8
 800c6fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c700:	f000 b806 	b.w	800c710 <__strtok_r>
 800c704:	20000074 	.word	0x20000074
 800c708:	0800fdf0 	.word	0x0800fdf0
 800c70c:	0800fe07 	.word	0x0800fe07

0800c710 <__strtok_r>:
 800c710:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c712:	b908      	cbnz	r0, 800c718 <__strtok_r+0x8>
 800c714:	6810      	ldr	r0, [r2, #0]
 800c716:	b188      	cbz	r0, 800c73c <__strtok_r+0x2c>
 800c718:	4604      	mov	r4, r0
 800c71a:	4620      	mov	r0, r4
 800c71c:	f814 5b01 	ldrb.w	r5, [r4], #1
 800c720:	460f      	mov	r7, r1
 800c722:	f817 6b01 	ldrb.w	r6, [r7], #1
 800c726:	b91e      	cbnz	r6, 800c730 <__strtok_r+0x20>
 800c728:	b965      	cbnz	r5, 800c744 <__strtok_r+0x34>
 800c72a:	6015      	str	r5, [r2, #0]
 800c72c:	4628      	mov	r0, r5
 800c72e:	e005      	b.n	800c73c <__strtok_r+0x2c>
 800c730:	42b5      	cmp	r5, r6
 800c732:	d1f6      	bne.n	800c722 <__strtok_r+0x12>
 800c734:	2b00      	cmp	r3, #0
 800c736:	d1f0      	bne.n	800c71a <__strtok_r+0xa>
 800c738:	6014      	str	r4, [r2, #0]
 800c73a:	7003      	strb	r3, [r0, #0]
 800c73c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c73e:	461c      	mov	r4, r3
 800c740:	e00c      	b.n	800c75c <__strtok_r+0x4c>
 800c742:	b915      	cbnz	r5, 800c74a <__strtok_r+0x3a>
 800c744:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c748:	460e      	mov	r6, r1
 800c74a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800c74e:	42ab      	cmp	r3, r5
 800c750:	d1f7      	bne.n	800c742 <__strtok_r+0x32>
 800c752:	2b00      	cmp	r3, #0
 800c754:	d0f3      	beq.n	800c73e <__strtok_r+0x2e>
 800c756:	2300      	movs	r3, #0
 800c758:	f804 3c01 	strb.w	r3, [r4, #-1]
 800c75c:	6014      	str	r4, [r2, #0]
 800c75e:	e7ed      	b.n	800c73c <__strtok_r+0x2c>

0800c760 <_strtol_l.isra.0>:
 800c760:	2b01      	cmp	r3, #1
 800c762:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c766:	d001      	beq.n	800c76c <_strtol_l.isra.0+0xc>
 800c768:	2b24      	cmp	r3, #36	; 0x24
 800c76a:	d906      	bls.n	800c77a <_strtol_l.isra.0+0x1a>
 800c76c:	f7fe fc2c 	bl	800afc8 <__errno>
 800c770:	2316      	movs	r3, #22
 800c772:	6003      	str	r3, [r0, #0]
 800c774:	2000      	movs	r0, #0
 800c776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c77a:	4f3a      	ldr	r7, [pc, #232]	; (800c864 <_strtol_l.isra.0+0x104>)
 800c77c:	468e      	mov	lr, r1
 800c77e:	4676      	mov	r6, lr
 800c780:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800c784:	5de5      	ldrb	r5, [r4, r7]
 800c786:	f015 0508 	ands.w	r5, r5, #8
 800c78a:	d1f8      	bne.n	800c77e <_strtol_l.isra.0+0x1e>
 800c78c:	2c2d      	cmp	r4, #45	; 0x2d
 800c78e:	d134      	bne.n	800c7fa <_strtol_l.isra.0+0x9a>
 800c790:	f89e 4000 	ldrb.w	r4, [lr]
 800c794:	f04f 0801 	mov.w	r8, #1
 800c798:	f106 0e02 	add.w	lr, r6, #2
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d05c      	beq.n	800c85a <_strtol_l.isra.0+0xfa>
 800c7a0:	2b10      	cmp	r3, #16
 800c7a2:	d10c      	bne.n	800c7be <_strtol_l.isra.0+0x5e>
 800c7a4:	2c30      	cmp	r4, #48	; 0x30
 800c7a6:	d10a      	bne.n	800c7be <_strtol_l.isra.0+0x5e>
 800c7a8:	f89e 4000 	ldrb.w	r4, [lr]
 800c7ac:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c7b0:	2c58      	cmp	r4, #88	; 0x58
 800c7b2:	d14d      	bne.n	800c850 <_strtol_l.isra.0+0xf0>
 800c7b4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800c7b8:	2310      	movs	r3, #16
 800c7ba:	f10e 0e02 	add.w	lr, lr, #2
 800c7be:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800c7c2:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c7c6:	2600      	movs	r6, #0
 800c7c8:	fbbc f9f3 	udiv	r9, ip, r3
 800c7cc:	4635      	mov	r5, r6
 800c7ce:	fb03 ca19 	mls	sl, r3, r9, ip
 800c7d2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800c7d6:	2f09      	cmp	r7, #9
 800c7d8:	d818      	bhi.n	800c80c <_strtol_l.isra.0+0xac>
 800c7da:	463c      	mov	r4, r7
 800c7dc:	42a3      	cmp	r3, r4
 800c7de:	dd24      	ble.n	800c82a <_strtol_l.isra.0+0xca>
 800c7e0:	2e00      	cmp	r6, #0
 800c7e2:	db1f      	blt.n	800c824 <_strtol_l.isra.0+0xc4>
 800c7e4:	45a9      	cmp	r9, r5
 800c7e6:	d31d      	bcc.n	800c824 <_strtol_l.isra.0+0xc4>
 800c7e8:	d101      	bne.n	800c7ee <_strtol_l.isra.0+0x8e>
 800c7ea:	45a2      	cmp	sl, r4
 800c7ec:	db1a      	blt.n	800c824 <_strtol_l.isra.0+0xc4>
 800c7ee:	fb05 4503 	mla	r5, r5, r3, r4
 800c7f2:	2601      	movs	r6, #1
 800c7f4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800c7f8:	e7eb      	b.n	800c7d2 <_strtol_l.isra.0+0x72>
 800c7fa:	2c2b      	cmp	r4, #43	; 0x2b
 800c7fc:	bf08      	it	eq
 800c7fe:	f89e 4000 	ldrbeq.w	r4, [lr]
 800c802:	46a8      	mov	r8, r5
 800c804:	bf08      	it	eq
 800c806:	f106 0e02 	addeq.w	lr, r6, #2
 800c80a:	e7c7      	b.n	800c79c <_strtol_l.isra.0+0x3c>
 800c80c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800c810:	2f19      	cmp	r7, #25
 800c812:	d801      	bhi.n	800c818 <_strtol_l.isra.0+0xb8>
 800c814:	3c37      	subs	r4, #55	; 0x37
 800c816:	e7e1      	b.n	800c7dc <_strtol_l.isra.0+0x7c>
 800c818:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800c81c:	2f19      	cmp	r7, #25
 800c81e:	d804      	bhi.n	800c82a <_strtol_l.isra.0+0xca>
 800c820:	3c57      	subs	r4, #87	; 0x57
 800c822:	e7db      	b.n	800c7dc <_strtol_l.isra.0+0x7c>
 800c824:	f04f 36ff 	mov.w	r6, #4294967295
 800c828:	e7e4      	b.n	800c7f4 <_strtol_l.isra.0+0x94>
 800c82a:	2e00      	cmp	r6, #0
 800c82c:	da05      	bge.n	800c83a <_strtol_l.isra.0+0xda>
 800c82e:	2322      	movs	r3, #34	; 0x22
 800c830:	6003      	str	r3, [r0, #0]
 800c832:	4665      	mov	r5, ip
 800c834:	b942      	cbnz	r2, 800c848 <_strtol_l.isra.0+0xe8>
 800c836:	4628      	mov	r0, r5
 800c838:	e79d      	b.n	800c776 <_strtol_l.isra.0+0x16>
 800c83a:	f1b8 0f00 	cmp.w	r8, #0
 800c83e:	d000      	beq.n	800c842 <_strtol_l.isra.0+0xe2>
 800c840:	426d      	negs	r5, r5
 800c842:	2a00      	cmp	r2, #0
 800c844:	d0f7      	beq.n	800c836 <_strtol_l.isra.0+0xd6>
 800c846:	b10e      	cbz	r6, 800c84c <_strtol_l.isra.0+0xec>
 800c848:	f10e 31ff 	add.w	r1, lr, #4294967295
 800c84c:	6011      	str	r1, [r2, #0]
 800c84e:	e7f2      	b.n	800c836 <_strtol_l.isra.0+0xd6>
 800c850:	2430      	movs	r4, #48	; 0x30
 800c852:	2b00      	cmp	r3, #0
 800c854:	d1b3      	bne.n	800c7be <_strtol_l.isra.0+0x5e>
 800c856:	2308      	movs	r3, #8
 800c858:	e7b1      	b.n	800c7be <_strtol_l.isra.0+0x5e>
 800c85a:	2c30      	cmp	r4, #48	; 0x30
 800c85c:	d0a4      	beq.n	800c7a8 <_strtol_l.isra.0+0x48>
 800c85e:	230a      	movs	r3, #10
 800c860:	e7ad      	b.n	800c7be <_strtol_l.isra.0+0x5e>
 800c862:	bf00      	nop
 800c864:	0800fea5 	.word	0x0800fea5

0800c868 <strtol>:
 800c868:	4613      	mov	r3, r2
 800c86a:	460a      	mov	r2, r1
 800c86c:	4601      	mov	r1, r0
 800c86e:	4802      	ldr	r0, [pc, #8]	; (800c878 <strtol+0x10>)
 800c870:	6800      	ldr	r0, [r0, #0]
 800c872:	f7ff bf75 	b.w	800c760 <_strtol_l.isra.0>
 800c876:	bf00      	nop
 800c878:	20000074 	.word	0x20000074

0800c87c <__assert_func>:
 800c87c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c87e:	4614      	mov	r4, r2
 800c880:	461a      	mov	r2, r3
 800c882:	4b09      	ldr	r3, [pc, #36]	; (800c8a8 <__assert_func+0x2c>)
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	4605      	mov	r5, r0
 800c888:	68d8      	ldr	r0, [r3, #12]
 800c88a:	b14c      	cbz	r4, 800c8a0 <__assert_func+0x24>
 800c88c:	4b07      	ldr	r3, [pc, #28]	; (800c8ac <__assert_func+0x30>)
 800c88e:	9100      	str	r1, [sp, #0]
 800c890:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c894:	4906      	ldr	r1, [pc, #24]	; (800c8b0 <__assert_func+0x34>)
 800c896:	462b      	mov	r3, r5
 800c898:	f000 ff5c 	bl	800d754 <fiprintf>
 800c89c:	f002 fc9c 	bl	800f1d8 <abort>
 800c8a0:	4b04      	ldr	r3, [pc, #16]	; (800c8b4 <__assert_func+0x38>)
 800c8a2:	461c      	mov	r4, r3
 800c8a4:	e7f3      	b.n	800c88e <__assert_func+0x12>
 800c8a6:	bf00      	nop
 800c8a8:	20000074 	.word	0x20000074
 800c8ac:	0800fe68 	.word	0x0800fe68
 800c8b0:	0800fe75 	.word	0x0800fe75
 800c8b4:	0800fea3 	.word	0x0800fea3

0800c8b8 <quorem>:
 800c8b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8bc:	6903      	ldr	r3, [r0, #16]
 800c8be:	690c      	ldr	r4, [r1, #16]
 800c8c0:	42a3      	cmp	r3, r4
 800c8c2:	4607      	mov	r7, r0
 800c8c4:	f2c0 8081 	blt.w	800c9ca <quorem+0x112>
 800c8c8:	3c01      	subs	r4, #1
 800c8ca:	f101 0814 	add.w	r8, r1, #20
 800c8ce:	f100 0514 	add.w	r5, r0, #20
 800c8d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c8d6:	9301      	str	r3, [sp, #4]
 800c8d8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c8dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c8e0:	3301      	adds	r3, #1
 800c8e2:	429a      	cmp	r2, r3
 800c8e4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c8e8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c8ec:	fbb2 f6f3 	udiv	r6, r2, r3
 800c8f0:	d331      	bcc.n	800c956 <quorem+0x9e>
 800c8f2:	f04f 0e00 	mov.w	lr, #0
 800c8f6:	4640      	mov	r0, r8
 800c8f8:	46ac      	mov	ip, r5
 800c8fa:	46f2      	mov	sl, lr
 800c8fc:	f850 2b04 	ldr.w	r2, [r0], #4
 800c900:	b293      	uxth	r3, r2
 800c902:	fb06 e303 	mla	r3, r6, r3, lr
 800c906:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c90a:	b29b      	uxth	r3, r3
 800c90c:	ebaa 0303 	sub.w	r3, sl, r3
 800c910:	0c12      	lsrs	r2, r2, #16
 800c912:	f8dc a000 	ldr.w	sl, [ip]
 800c916:	fb06 e202 	mla	r2, r6, r2, lr
 800c91a:	fa13 f38a 	uxtah	r3, r3, sl
 800c91e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c922:	fa1f fa82 	uxth.w	sl, r2
 800c926:	f8dc 2000 	ldr.w	r2, [ip]
 800c92a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800c92e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c932:	b29b      	uxth	r3, r3
 800c934:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c938:	4581      	cmp	r9, r0
 800c93a:	f84c 3b04 	str.w	r3, [ip], #4
 800c93e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c942:	d2db      	bcs.n	800c8fc <quorem+0x44>
 800c944:	f855 300b 	ldr.w	r3, [r5, fp]
 800c948:	b92b      	cbnz	r3, 800c956 <quorem+0x9e>
 800c94a:	9b01      	ldr	r3, [sp, #4]
 800c94c:	3b04      	subs	r3, #4
 800c94e:	429d      	cmp	r5, r3
 800c950:	461a      	mov	r2, r3
 800c952:	d32e      	bcc.n	800c9b2 <quorem+0xfa>
 800c954:	613c      	str	r4, [r7, #16]
 800c956:	4638      	mov	r0, r7
 800c958:	f001 fd86 	bl	800e468 <__mcmp>
 800c95c:	2800      	cmp	r0, #0
 800c95e:	db24      	blt.n	800c9aa <quorem+0xf2>
 800c960:	3601      	adds	r6, #1
 800c962:	4628      	mov	r0, r5
 800c964:	f04f 0c00 	mov.w	ip, #0
 800c968:	f858 2b04 	ldr.w	r2, [r8], #4
 800c96c:	f8d0 e000 	ldr.w	lr, [r0]
 800c970:	b293      	uxth	r3, r2
 800c972:	ebac 0303 	sub.w	r3, ip, r3
 800c976:	0c12      	lsrs	r2, r2, #16
 800c978:	fa13 f38e 	uxtah	r3, r3, lr
 800c97c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c980:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c984:	b29b      	uxth	r3, r3
 800c986:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c98a:	45c1      	cmp	r9, r8
 800c98c:	f840 3b04 	str.w	r3, [r0], #4
 800c990:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c994:	d2e8      	bcs.n	800c968 <quorem+0xb0>
 800c996:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c99a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c99e:	b922      	cbnz	r2, 800c9aa <quorem+0xf2>
 800c9a0:	3b04      	subs	r3, #4
 800c9a2:	429d      	cmp	r5, r3
 800c9a4:	461a      	mov	r2, r3
 800c9a6:	d30a      	bcc.n	800c9be <quorem+0x106>
 800c9a8:	613c      	str	r4, [r7, #16]
 800c9aa:	4630      	mov	r0, r6
 800c9ac:	b003      	add	sp, #12
 800c9ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9b2:	6812      	ldr	r2, [r2, #0]
 800c9b4:	3b04      	subs	r3, #4
 800c9b6:	2a00      	cmp	r2, #0
 800c9b8:	d1cc      	bne.n	800c954 <quorem+0x9c>
 800c9ba:	3c01      	subs	r4, #1
 800c9bc:	e7c7      	b.n	800c94e <quorem+0x96>
 800c9be:	6812      	ldr	r2, [r2, #0]
 800c9c0:	3b04      	subs	r3, #4
 800c9c2:	2a00      	cmp	r2, #0
 800c9c4:	d1f0      	bne.n	800c9a8 <quorem+0xf0>
 800c9c6:	3c01      	subs	r4, #1
 800c9c8:	e7eb      	b.n	800c9a2 <quorem+0xea>
 800c9ca:	2000      	movs	r0, #0
 800c9cc:	e7ee      	b.n	800c9ac <quorem+0xf4>
	...

0800c9d0 <_dtoa_r>:
 800c9d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9d4:	ed2d 8b02 	vpush	{d8}
 800c9d8:	ec57 6b10 	vmov	r6, r7, d0
 800c9dc:	b095      	sub	sp, #84	; 0x54
 800c9de:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c9e0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c9e4:	9105      	str	r1, [sp, #20]
 800c9e6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800c9ea:	4604      	mov	r4, r0
 800c9ec:	9209      	str	r2, [sp, #36]	; 0x24
 800c9ee:	930f      	str	r3, [sp, #60]	; 0x3c
 800c9f0:	b975      	cbnz	r5, 800ca10 <_dtoa_r+0x40>
 800c9f2:	2010      	movs	r0, #16
 800c9f4:	f001 fa56 	bl	800dea4 <malloc>
 800c9f8:	4602      	mov	r2, r0
 800c9fa:	6260      	str	r0, [r4, #36]	; 0x24
 800c9fc:	b920      	cbnz	r0, 800ca08 <_dtoa_r+0x38>
 800c9fe:	4bb2      	ldr	r3, [pc, #712]	; (800ccc8 <_dtoa_r+0x2f8>)
 800ca00:	21ea      	movs	r1, #234	; 0xea
 800ca02:	48b2      	ldr	r0, [pc, #712]	; (800cccc <_dtoa_r+0x2fc>)
 800ca04:	f7ff ff3a 	bl	800c87c <__assert_func>
 800ca08:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ca0c:	6005      	str	r5, [r0, #0]
 800ca0e:	60c5      	str	r5, [r0, #12]
 800ca10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ca12:	6819      	ldr	r1, [r3, #0]
 800ca14:	b151      	cbz	r1, 800ca2c <_dtoa_r+0x5c>
 800ca16:	685a      	ldr	r2, [r3, #4]
 800ca18:	604a      	str	r2, [r1, #4]
 800ca1a:	2301      	movs	r3, #1
 800ca1c:	4093      	lsls	r3, r2
 800ca1e:	608b      	str	r3, [r1, #8]
 800ca20:	4620      	mov	r0, r4
 800ca22:	f001 fa99 	bl	800df58 <_Bfree>
 800ca26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ca28:	2200      	movs	r2, #0
 800ca2a:	601a      	str	r2, [r3, #0]
 800ca2c:	1e3b      	subs	r3, r7, #0
 800ca2e:	bfb9      	ittee	lt
 800ca30:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ca34:	9303      	strlt	r3, [sp, #12]
 800ca36:	2300      	movge	r3, #0
 800ca38:	f8c8 3000 	strge.w	r3, [r8]
 800ca3c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800ca40:	4ba3      	ldr	r3, [pc, #652]	; (800ccd0 <_dtoa_r+0x300>)
 800ca42:	bfbc      	itt	lt
 800ca44:	2201      	movlt	r2, #1
 800ca46:	f8c8 2000 	strlt.w	r2, [r8]
 800ca4a:	ea33 0309 	bics.w	r3, r3, r9
 800ca4e:	d11b      	bne.n	800ca88 <_dtoa_r+0xb8>
 800ca50:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ca52:	f242 730f 	movw	r3, #9999	; 0x270f
 800ca56:	6013      	str	r3, [r2, #0]
 800ca58:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ca5c:	4333      	orrs	r3, r6
 800ca5e:	f000 857a 	beq.w	800d556 <_dtoa_r+0xb86>
 800ca62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ca64:	b963      	cbnz	r3, 800ca80 <_dtoa_r+0xb0>
 800ca66:	4b9b      	ldr	r3, [pc, #620]	; (800ccd4 <_dtoa_r+0x304>)
 800ca68:	e024      	b.n	800cab4 <_dtoa_r+0xe4>
 800ca6a:	4b9b      	ldr	r3, [pc, #620]	; (800ccd8 <_dtoa_r+0x308>)
 800ca6c:	9300      	str	r3, [sp, #0]
 800ca6e:	3308      	adds	r3, #8
 800ca70:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ca72:	6013      	str	r3, [r2, #0]
 800ca74:	9800      	ldr	r0, [sp, #0]
 800ca76:	b015      	add	sp, #84	; 0x54
 800ca78:	ecbd 8b02 	vpop	{d8}
 800ca7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca80:	4b94      	ldr	r3, [pc, #592]	; (800ccd4 <_dtoa_r+0x304>)
 800ca82:	9300      	str	r3, [sp, #0]
 800ca84:	3303      	adds	r3, #3
 800ca86:	e7f3      	b.n	800ca70 <_dtoa_r+0xa0>
 800ca88:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ca8c:	2200      	movs	r2, #0
 800ca8e:	ec51 0b17 	vmov	r0, r1, d7
 800ca92:	2300      	movs	r3, #0
 800ca94:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800ca98:	f7f4 f81e 	bl	8000ad8 <__aeabi_dcmpeq>
 800ca9c:	4680      	mov	r8, r0
 800ca9e:	b158      	cbz	r0, 800cab8 <_dtoa_r+0xe8>
 800caa0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800caa2:	2301      	movs	r3, #1
 800caa4:	6013      	str	r3, [r2, #0]
 800caa6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	f000 8551 	beq.w	800d550 <_dtoa_r+0xb80>
 800caae:	488b      	ldr	r0, [pc, #556]	; (800ccdc <_dtoa_r+0x30c>)
 800cab0:	6018      	str	r0, [r3, #0]
 800cab2:	1e43      	subs	r3, r0, #1
 800cab4:	9300      	str	r3, [sp, #0]
 800cab6:	e7dd      	b.n	800ca74 <_dtoa_r+0xa4>
 800cab8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800cabc:	aa12      	add	r2, sp, #72	; 0x48
 800cabe:	a913      	add	r1, sp, #76	; 0x4c
 800cac0:	4620      	mov	r0, r4
 800cac2:	f001 fdf1 	bl	800e6a8 <__d2b>
 800cac6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800caca:	4683      	mov	fp, r0
 800cacc:	2d00      	cmp	r5, #0
 800cace:	d07c      	beq.n	800cbca <_dtoa_r+0x1fa>
 800cad0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cad2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800cad6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cada:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800cade:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800cae2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800cae6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800caea:	4b7d      	ldr	r3, [pc, #500]	; (800cce0 <_dtoa_r+0x310>)
 800caec:	2200      	movs	r2, #0
 800caee:	4630      	mov	r0, r6
 800caf0:	4639      	mov	r1, r7
 800caf2:	f7f3 fbd1 	bl	8000298 <__aeabi_dsub>
 800caf6:	a36e      	add	r3, pc, #440	; (adr r3, 800ccb0 <_dtoa_r+0x2e0>)
 800caf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cafc:	f7f3 fd84 	bl	8000608 <__aeabi_dmul>
 800cb00:	a36d      	add	r3, pc, #436	; (adr r3, 800ccb8 <_dtoa_r+0x2e8>)
 800cb02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb06:	f7f3 fbc9 	bl	800029c <__adddf3>
 800cb0a:	4606      	mov	r6, r0
 800cb0c:	4628      	mov	r0, r5
 800cb0e:	460f      	mov	r7, r1
 800cb10:	f7f3 fd10 	bl	8000534 <__aeabi_i2d>
 800cb14:	a36a      	add	r3, pc, #424	; (adr r3, 800ccc0 <_dtoa_r+0x2f0>)
 800cb16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb1a:	f7f3 fd75 	bl	8000608 <__aeabi_dmul>
 800cb1e:	4602      	mov	r2, r0
 800cb20:	460b      	mov	r3, r1
 800cb22:	4630      	mov	r0, r6
 800cb24:	4639      	mov	r1, r7
 800cb26:	f7f3 fbb9 	bl	800029c <__adddf3>
 800cb2a:	4606      	mov	r6, r0
 800cb2c:	460f      	mov	r7, r1
 800cb2e:	f7f4 f81b 	bl	8000b68 <__aeabi_d2iz>
 800cb32:	2200      	movs	r2, #0
 800cb34:	4682      	mov	sl, r0
 800cb36:	2300      	movs	r3, #0
 800cb38:	4630      	mov	r0, r6
 800cb3a:	4639      	mov	r1, r7
 800cb3c:	f7f3 ffd6 	bl	8000aec <__aeabi_dcmplt>
 800cb40:	b148      	cbz	r0, 800cb56 <_dtoa_r+0x186>
 800cb42:	4650      	mov	r0, sl
 800cb44:	f7f3 fcf6 	bl	8000534 <__aeabi_i2d>
 800cb48:	4632      	mov	r2, r6
 800cb4a:	463b      	mov	r3, r7
 800cb4c:	f7f3 ffc4 	bl	8000ad8 <__aeabi_dcmpeq>
 800cb50:	b908      	cbnz	r0, 800cb56 <_dtoa_r+0x186>
 800cb52:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cb56:	f1ba 0f16 	cmp.w	sl, #22
 800cb5a:	d854      	bhi.n	800cc06 <_dtoa_r+0x236>
 800cb5c:	4b61      	ldr	r3, [pc, #388]	; (800cce4 <_dtoa_r+0x314>)
 800cb5e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800cb62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb66:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cb6a:	f7f3 ffbf 	bl	8000aec <__aeabi_dcmplt>
 800cb6e:	2800      	cmp	r0, #0
 800cb70:	d04b      	beq.n	800cc0a <_dtoa_r+0x23a>
 800cb72:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cb76:	2300      	movs	r3, #0
 800cb78:	930e      	str	r3, [sp, #56]	; 0x38
 800cb7a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cb7c:	1b5d      	subs	r5, r3, r5
 800cb7e:	1e6b      	subs	r3, r5, #1
 800cb80:	9304      	str	r3, [sp, #16]
 800cb82:	bf43      	ittte	mi
 800cb84:	2300      	movmi	r3, #0
 800cb86:	f1c5 0801 	rsbmi	r8, r5, #1
 800cb8a:	9304      	strmi	r3, [sp, #16]
 800cb8c:	f04f 0800 	movpl.w	r8, #0
 800cb90:	f1ba 0f00 	cmp.w	sl, #0
 800cb94:	db3b      	blt.n	800cc0e <_dtoa_r+0x23e>
 800cb96:	9b04      	ldr	r3, [sp, #16]
 800cb98:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800cb9c:	4453      	add	r3, sl
 800cb9e:	9304      	str	r3, [sp, #16]
 800cba0:	2300      	movs	r3, #0
 800cba2:	9306      	str	r3, [sp, #24]
 800cba4:	9b05      	ldr	r3, [sp, #20]
 800cba6:	2b09      	cmp	r3, #9
 800cba8:	d869      	bhi.n	800cc7e <_dtoa_r+0x2ae>
 800cbaa:	2b05      	cmp	r3, #5
 800cbac:	bfc4      	itt	gt
 800cbae:	3b04      	subgt	r3, #4
 800cbb0:	9305      	strgt	r3, [sp, #20]
 800cbb2:	9b05      	ldr	r3, [sp, #20]
 800cbb4:	f1a3 0302 	sub.w	r3, r3, #2
 800cbb8:	bfcc      	ite	gt
 800cbba:	2500      	movgt	r5, #0
 800cbbc:	2501      	movle	r5, #1
 800cbbe:	2b03      	cmp	r3, #3
 800cbc0:	d869      	bhi.n	800cc96 <_dtoa_r+0x2c6>
 800cbc2:	e8df f003 	tbb	[pc, r3]
 800cbc6:	4e2c      	.short	0x4e2c
 800cbc8:	5a4c      	.short	0x5a4c
 800cbca:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800cbce:	441d      	add	r5, r3
 800cbd0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800cbd4:	2b20      	cmp	r3, #32
 800cbd6:	bfc1      	itttt	gt
 800cbd8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800cbdc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800cbe0:	fa09 f303 	lslgt.w	r3, r9, r3
 800cbe4:	fa26 f000 	lsrgt.w	r0, r6, r0
 800cbe8:	bfda      	itte	le
 800cbea:	f1c3 0320 	rsble	r3, r3, #32
 800cbee:	fa06 f003 	lslle.w	r0, r6, r3
 800cbf2:	4318      	orrgt	r0, r3
 800cbf4:	f7f3 fc8e 	bl	8000514 <__aeabi_ui2d>
 800cbf8:	2301      	movs	r3, #1
 800cbfa:	4606      	mov	r6, r0
 800cbfc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800cc00:	3d01      	subs	r5, #1
 800cc02:	9310      	str	r3, [sp, #64]	; 0x40
 800cc04:	e771      	b.n	800caea <_dtoa_r+0x11a>
 800cc06:	2301      	movs	r3, #1
 800cc08:	e7b6      	b.n	800cb78 <_dtoa_r+0x1a8>
 800cc0a:	900e      	str	r0, [sp, #56]	; 0x38
 800cc0c:	e7b5      	b.n	800cb7a <_dtoa_r+0x1aa>
 800cc0e:	f1ca 0300 	rsb	r3, sl, #0
 800cc12:	9306      	str	r3, [sp, #24]
 800cc14:	2300      	movs	r3, #0
 800cc16:	eba8 080a 	sub.w	r8, r8, sl
 800cc1a:	930d      	str	r3, [sp, #52]	; 0x34
 800cc1c:	e7c2      	b.n	800cba4 <_dtoa_r+0x1d4>
 800cc1e:	2300      	movs	r3, #0
 800cc20:	9308      	str	r3, [sp, #32]
 800cc22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	dc39      	bgt.n	800cc9c <_dtoa_r+0x2cc>
 800cc28:	f04f 0901 	mov.w	r9, #1
 800cc2c:	f8cd 9004 	str.w	r9, [sp, #4]
 800cc30:	464b      	mov	r3, r9
 800cc32:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800cc36:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800cc38:	2200      	movs	r2, #0
 800cc3a:	6042      	str	r2, [r0, #4]
 800cc3c:	2204      	movs	r2, #4
 800cc3e:	f102 0614 	add.w	r6, r2, #20
 800cc42:	429e      	cmp	r6, r3
 800cc44:	6841      	ldr	r1, [r0, #4]
 800cc46:	d92f      	bls.n	800cca8 <_dtoa_r+0x2d8>
 800cc48:	4620      	mov	r0, r4
 800cc4a:	f001 f945 	bl	800ded8 <_Balloc>
 800cc4e:	9000      	str	r0, [sp, #0]
 800cc50:	2800      	cmp	r0, #0
 800cc52:	d14b      	bne.n	800ccec <_dtoa_r+0x31c>
 800cc54:	4b24      	ldr	r3, [pc, #144]	; (800cce8 <_dtoa_r+0x318>)
 800cc56:	4602      	mov	r2, r0
 800cc58:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800cc5c:	e6d1      	b.n	800ca02 <_dtoa_r+0x32>
 800cc5e:	2301      	movs	r3, #1
 800cc60:	e7de      	b.n	800cc20 <_dtoa_r+0x250>
 800cc62:	2300      	movs	r3, #0
 800cc64:	9308      	str	r3, [sp, #32]
 800cc66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc68:	eb0a 0903 	add.w	r9, sl, r3
 800cc6c:	f109 0301 	add.w	r3, r9, #1
 800cc70:	2b01      	cmp	r3, #1
 800cc72:	9301      	str	r3, [sp, #4]
 800cc74:	bfb8      	it	lt
 800cc76:	2301      	movlt	r3, #1
 800cc78:	e7dd      	b.n	800cc36 <_dtoa_r+0x266>
 800cc7a:	2301      	movs	r3, #1
 800cc7c:	e7f2      	b.n	800cc64 <_dtoa_r+0x294>
 800cc7e:	2501      	movs	r5, #1
 800cc80:	2300      	movs	r3, #0
 800cc82:	9305      	str	r3, [sp, #20]
 800cc84:	9508      	str	r5, [sp, #32]
 800cc86:	f04f 39ff 	mov.w	r9, #4294967295
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	f8cd 9004 	str.w	r9, [sp, #4]
 800cc90:	2312      	movs	r3, #18
 800cc92:	9209      	str	r2, [sp, #36]	; 0x24
 800cc94:	e7cf      	b.n	800cc36 <_dtoa_r+0x266>
 800cc96:	2301      	movs	r3, #1
 800cc98:	9308      	str	r3, [sp, #32]
 800cc9a:	e7f4      	b.n	800cc86 <_dtoa_r+0x2b6>
 800cc9c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800cca0:	f8cd 9004 	str.w	r9, [sp, #4]
 800cca4:	464b      	mov	r3, r9
 800cca6:	e7c6      	b.n	800cc36 <_dtoa_r+0x266>
 800cca8:	3101      	adds	r1, #1
 800ccaa:	6041      	str	r1, [r0, #4]
 800ccac:	0052      	lsls	r2, r2, #1
 800ccae:	e7c6      	b.n	800cc3e <_dtoa_r+0x26e>
 800ccb0:	636f4361 	.word	0x636f4361
 800ccb4:	3fd287a7 	.word	0x3fd287a7
 800ccb8:	8b60c8b3 	.word	0x8b60c8b3
 800ccbc:	3fc68a28 	.word	0x3fc68a28
 800ccc0:	509f79fb 	.word	0x509f79fb
 800ccc4:	3fd34413 	.word	0x3fd34413
 800ccc8:	0800fdf0 	.word	0x0800fdf0
 800cccc:	0800ffb2 	.word	0x0800ffb2
 800ccd0:	7ff00000 	.word	0x7ff00000
 800ccd4:	0800ffae 	.word	0x0800ffae
 800ccd8:	0800ffa5 	.word	0x0800ffa5
 800ccdc:	0800fd79 	.word	0x0800fd79
 800cce0:	3ff80000 	.word	0x3ff80000
 800cce4:	08010190 	.word	0x08010190
 800cce8:	08010011 	.word	0x08010011
 800ccec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ccee:	9a00      	ldr	r2, [sp, #0]
 800ccf0:	601a      	str	r2, [r3, #0]
 800ccf2:	9b01      	ldr	r3, [sp, #4]
 800ccf4:	2b0e      	cmp	r3, #14
 800ccf6:	f200 80ad 	bhi.w	800ce54 <_dtoa_r+0x484>
 800ccfa:	2d00      	cmp	r5, #0
 800ccfc:	f000 80aa 	beq.w	800ce54 <_dtoa_r+0x484>
 800cd00:	f1ba 0f00 	cmp.w	sl, #0
 800cd04:	dd36      	ble.n	800cd74 <_dtoa_r+0x3a4>
 800cd06:	4ac3      	ldr	r2, [pc, #780]	; (800d014 <_dtoa_r+0x644>)
 800cd08:	f00a 030f 	and.w	r3, sl, #15
 800cd0c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cd10:	ed93 7b00 	vldr	d7, [r3]
 800cd14:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800cd18:	ea4f 172a 	mov.w	r7, sl, asr #4
 800cd1c:	eeb0 8a47 	vmov.f32	s16, s14
 800cd20:	eef0 8a67 	vmov.f32	s17, s15
 800cd24:	d016      	beq.n	800cd54 <_dtoa_r+0x384>
 800cd26:	4bbc      	ldr	r3, [pc, #752]	; (800d018 <_dtoa_r+0x648>)
 800cd28:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cd2c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cd30:	f7f3 fd94 	bl	800085c <__aeabi_ddiv>
 800cd34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cd38:	f007 070f 	and.w	r7, r7, #15
 800cd3c:	2503      	movs	r5, #3
 800cd3e:	4eb6      	ldr	r6, [pc, #728]	; (800d018 <_dtoa_r+0x648>)
 800cd40:	b957      	cbnz	r7, 800cd58 <_dtoa_r+0x388>
 800cd42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cd46:	ec53 2b18 	vmov	r2, r3, d8
 800cd4a:	f7f3 fd87 	bl	800085c <__aeabi_ddiv>
 800cd4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cd52:	e029      	b.n	800cda8 <_dtoa_r+0x3d8>
 800cd54:	2502      	movs	r5, #2
 800cd56:	e7f2      	b.n	800cd3e <_dtoa_r+0x36e>
 800cd58:	07f9      	lsls	r1, r7, #31
 800cd5a:	d508      	bpl.n	800cd6e <_dtoa_r+0x39e>
 800cd5c:	ec51 0b18 	vmov	r0, r1, d8
 800cd60:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cd64:	f7f3 fc50 	bl	8000608 <__aeabi_dmul>
 800cd68:	ec41 0b18 	vmov	d8, r0, r1
 800cd6c:	3501      	adds	r5, #1
 800cd6e:	107f      	asrs	r7, r7, #1
 800cd70:	3608      	adds	r6, #8
 800cd72:	e7e5      	b.n	800cd40 <_dtoa_r+0x370>
 800cd74:	f000 80a6 	beq.w	800cec4 <_dtoa_r+0x4f4>
 800cd78:	f1ca 0600 	rsb	r6, sl, #0
 800cd7c:	4ba5      	ldr	r3, [pc, #660]	; (800d014 <_dtoa_r+0x644>)
 800cd7e:	4fa6      	ldr	r7, [pc, #664]	; (800d018 <_dtoa_r+0x648>)
 800cd80:	f006 020f 	and.w	r2, r6, #15
 800cd84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cd88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd8c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cd90:	f7f3 fc3a 	bl	8000608 <__aeabi_dmul>
 800cd94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cd98:	1136      	asrs	r6, r6, #4
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	2502      	movs	r5, #2
 800cd9e:	2e00      	cmp	r6, #0
 800cda0:	f040 8085 	bne.w	800ceae <_dtoa_r+0x4de>
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d1d2      	bne.n	800cd4e <_dtoa_r+0x37e>
 800cda8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	f000 808c 	beq.w	800cec8 <_dtoa_r+0x4f8>
 800cdb0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800cdb4:	4b99      	ldr	r3, [pc, #612]	; (800d01c <_dtoa_r+0x64c>)
 800cdb6:	2200      	movs	r2, #0
 800cdb8:	4630      	mov	r0, r6
 800cdba:	4639      	mov	r1, r7
 800cdbc:	f7f3 fe96 	bl	8000aec <__aeabi_dcmplt>
 800cdc0:	2800      	cmp	r0, #0
 800cdc2:	f000 8081 	beq.w	800cec8 <_dtoa_r+0x4f8>
 800cdc6:	9b01      	ldr	r3, [sp, #4]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d07d      	beq.n	800cec8 <_dtoa_r+0x4f8>
 800cdcc:	f1b9 0f00 	cmp.w	r9, #0
 800cdd0:	dd3c      	ble.n	800ce4c <_dtoa_r+0x47c>
 800cdd2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800cdd6:	9307      	str	r3, [sp, #28]
 800cdd8:	2200      	movs	r2, #0
 800cdda:	4b91      	ldr	r3, [pc, #580]	; (800d020 <_dtoa_r+0x650>)
 800cddc:	4630      	mov	r0, r6
 800cdde:	4639      	mov	r1, r7
 800cde0:	f7f3 fc12 	bl	8000608 <__aeabi_dmul>
 800cde4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cde8:	3501      	adds	r5, #1
 800cdea:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800cdee:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800cdf2:	4628      	mov	r0, r5
 800cdf4:	f7f3 fb9e 	bl	8000534 <__aeabi_i2d>
 800cdf8:	4632      	mov	r2, r6
 800cdfa:	463b      	mov	r3, r7
 800cdfc:	f7f3 fc04 	bl	8000608 <__aeabi_dmul>
 800ce00:	4b88      	ldr	r3, [pc, #544]	; (800d024 <_dtoa_r+0x654>)
 800ce02:	2200      	movs	r2, #0
 800ce04:	f7f3 fa4a 	bl	800029c <__adddf3>
 800ce08:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ce0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ce10:	9303      	str	r3, [sp, #12]
 800ce12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d15c      	bne.n	800ced2 <_dtoa_r+0x502>
 800ce18:	4b83      	ldr	r3, [pc, #524]	; (800d028 <_dtoa_r+0x658>)
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	4630      	mov	r0, r6
 800ce1e:	4639      	mov	r1, r7
 800ce20:	f7f3 fa3a 	bl	8000298 <__aeabi_dsub>
 800ce24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ce28:	4606      	mov	r6, r0
 800ce2a:	460f      	mov	r7, r1
 800ce2c:	f7f3 fe7c 	bl	8000b28 <__aeabi_dcmpgt>
 800ce30:	2800      	cmp	r0, #0
 800ce32:	f040 8296 	bne.w	800d362 <_dtoa_r+0x992>
 800ce36:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ce3a:	4630      	mov	r0, r6
 800ce3c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ce40:	4639      	mov	r1, r7
 800ce42:	f7f3 fe53 	bl	8000aec <__aeabi_dcmplt>
 800ce46:	2800      	cmp	r0, #0
 800ce48:	f040 8288 	bne.w	800d35c <_dtoa_r+0x98c>
 800ce4c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ce50:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ce54:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	f2c0 8158 	blt.w	800d10c <_dtoa_r+0x73c>
 800ce5c:	f1ba 0f0e 	cmp.w	sl, #14
 800ce60:	f300 8154 	bgt.w	800d10c <_dtoa_r+0x73c>
 800ce64:	4b6b      	ldr	r3, [pc, #428]	; (800d014 <_dtoa_r+0x644>)
 800ce66:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ce6a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ce6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	f280 80e3 	bge.w	800d03c <_dtoa_r+0x66c>
 800ce76:	9b01      	ldr	r3, [sp, #4]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	f300 80df 	bgt.w	800d03c <_dtoa_r+0x66c>
 800ce7e:	f040 826d 	bne.w	800d35c <_dtoa_r+0x98c>
 800ce82:	4b69      	ldr	r3, [pc, #420]	; (800d028 <_dtoa_r+0x658>)
 800ce84:	2200      	movs	r2, #0
 800ce86:	4640      	mov	r0, r8
 800ce88:	4649      	mov	r1, r9
 800ce8a:	f7f3 fbbd 	bl	8000608 <__aeabi_dmul>
 800ce8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ce92:	f7f3 fe3f 	bl	8000b14 <__aeabi_dcmpge>
 800ce96:	9e01      	ldr	r6, [sp, #4]
 800ce98:	4637      	mov	r7, r6
 800ce9a:	2800      	cmp	r0, #0
 800ce9c:	f040 8243 	bne.w	800d326 <_dtoa_r+0x956>
 800cea0:	9d00      	ldr	r5, [sp, #0]
 800cea2:	2331      	movs	r3, #49	; 0x31
 800cea4:	f805 3b01 	strb.w	r3, [r5], #1
 800cea8:	f10a 0a01 	add.w	sl, sl, #1
 800ceac:	e23f      	b.n	800d32e <_dtoa_r+0x95e>
 800ceae:	07f2      	lsls	r2, r6, #31
 800ceb0:	d505      	bpl.n	800cebe <_dtoa_r+0x4ee>
 800ceb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ceb6:	f7f3 fba7 	bl	8000608 <__aeabi_dmul>
 800ceba:	3501      	adds	r5, #1
 800cebc:	2301      	movs	r3, #1
 800cebe:	1076      	asrs	r6, r6, #1
 800cec0:	3708      	adds	r7, #8
 800cec2:	e76c      	b.n	800cd9e <_dtoa_r+0x3ce>
 800cec4:	2502      	movs	r5, #2
 800cec6:	e76f      	b.n	800cda8 <_dtoa_r+0x3d8>
 800cec8:	9b01      	ldr	r3, [sp, #4]
 800ceca:	f8cd a01c 	str.w	sl, [sp, #28]
 800cece:	930c      	str	r3, [sp, #48]	; 0x30
 800ced0:	e78d      	b.n	800cdee <_dtoa_r+0x41e>
 800ced2:	9900      	ldr	r1, [sp, #0]
 800ced4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ced6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ced8:	4b4e      	ldr	r3, [pc, #312]	; (800d014 <_dtoa_r+0x644>)
 800ceda:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cede:	4401      	add	r1, r0
 800cee0:	9102      	str	r1, [sp, #8]
 800cee2:	9908      	ldr	r1, [sp, #32]
 800cee4:	eeb0 8a47 	vmov.f32	s16, s14
 800cee8:	eef0 8a67 	vmov.f32	s17, s15
 800ceec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cef0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cef4:	2900      	cmp	r1, #0
 800cef6:	d045      	beq.n	800cf84 <_dtoa_r+0x5b4>
 800cef8:	494c      	ldr	r1, [pc, #304]	; (800d02c <_dtoa_r+0x65c>)
 800cefa:	2000      	movs	r0, #0
 800cefc:	f7f3 fcae 	bl	800085c <__aeabi_ddiv>
 800cf00:	ec53 2b18 	vmov	r2, r3, d8
 800cf04:	f7f3 f9c8 	bl	8000298 <__aeabi_dsub>
 800cf08:	9d00      	ldr	r5, [sp, #0]
 800cf0a:	ec41 0b18 	vmov	d8, r0, r1
 800cf0e:	4639      	mov	r1, r7
 800cf10:	4630      	mov	r0, r6
 800cf12:	f7f3 fe29 	bl	8000b68 <__aeabi_d2iz>
 800cf16:	900c      	str	r0, [sp, #48]	; 0x30
 800cf18:	f7f3 fb0c 	bl	8000534 <__aeabi_i2d>
 800cf1c:	4602      	mov	r2, r0
 800cf1e:	460b      	mov	r3, r1
 800cf20:	4630      	mov	r0, r6
 800cf22:	4639      	mov	r1, r7
 800cf24:	f7f3 f9b8 	bl	8000298 <__aeabi_dsub>
 800cf28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cf2a:	3330      	adds	r3, #48	; 0x30
 800cf2c:	f805 3b01 	strb.w	r3, [r5], #1
 800cf30:	ec53 2b18 	vmov	r2, r3, d8
 800cf34:	4606      	mov	r6, r0
 800cf36:	460f      	mov	r7, r1
 800cf38:	f7f3 fdd8 	bl	8000aec <__aeabi_dcmplt>
 800cf3c:	2800      	cmp	r0, #0
 800cf3e:	d165      	bne.n	800d00c <_dtoa_r+0x63c>
 800cf40:	4632      	mov	r2, r6
 800cf42:	463b      	mov	r3, r7
 800cf44:	4935      	ldr	r1, [pc, #212]	; (800d01c <_dtoa_r+0x64c>)
 800cf46:	2000      	movs	r0, #0
 800cf48:	f7f3 f9a6 	bl	8000298 <__aeabi_dsub>
 800cf4c:	ec53 2b18 	vmov	r2, r3, d8
 800cf50:	f7f3 fdcc 	bl	8000aec <__aeabi_dcmplt>
 800cf54:	2800      	cmp	r0, #0
 800cf56:	f040 80b9 	bne.w	800d0cc <_dtoa_r+0x6fc>
 800cf5a:	9b02      	ldr	r3, [sp, #8]
 800cf5c:	429d      	cmp	r5, r3
 800cf5e:	f43f af75 	beq.w	800ce4c <_dtoa_r+0x47c>
 800cf62:	4b2f      	ldr	r3, [pc, #188]	; (800d020 <_dtoa_r+0x650>)
 800cf64:	ec51 0b18 	vmov	r0, r1, d8
 800cf68:	2200      	movs	r2, #0
 800cf6a:	f7f3 fb4d 	bl	8000608 <__aeabi_dmul>
 800cf6e:	4b2c      	ldr	r3, [pc, #176]	; (800d020 <_dtoa_r+0x650>)
 800cf70:	ec41 0b18 	vmov	d8, r0, r1
 800cf74:	2200      	movs	r2, #0
 800cf76:	4630      	mov	r0, r6
 800cf78:	4639      	mov	r1, r7
 800cf7a:	f7f3 fb45 	bl	8000608 <__aeabi_dmul>
 800cf7e:	4606      	mov	r6, r0
 800cf80:	460f      	mov	r7, r1
 800cf82:	e7c4      	b.n	800cf0e <_dtoa_r+0x53e>
 800cf84:	ec51 0b17 	vmov	r0, r1, d7
 800cf88:	f7f3 fb3e 	bl	8000608 <__aeabi_dmul>
 800cf8c:	9b02      	ldr	r3, [sp, #8]
 800cf8e:	9d00      	ldr	r5, [sp, #0]
 800cf90:	930c      	str	r3, [sp, #48]	; 0x30
 800cf92:	ec41 0b18 	vmov	d8, r0, r1
 800cf96:	4639      	mov	r1, r7
 800cf98:	4630      	mov	r0, r6
 800cf9a:	f7f3 fde5 	bl	8000b68 <__aeabi_d2iz>
 800cf9e:	9011      	str	r0, [sp, #68]	; 0x44
 800cfa0:	f7f3 fac8 	bl	8000534 <__aeabi_i2d>
 800cfa4:	4602      	mov	r2, r0
 800cfa6:	460b      	mov	r3, r1
 800cfa8:	4630      	mov	r0, r6
 800cfaa:	4639      	mov	r1, r7
 800cfac:	f7f3 f974 	bl	8000298 <__aeabi_dsub>
 800cfb0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cfb2:	3330      	adds	r3, #48	; 0x30
 800cfb4:	f805 3b01 	strb.w	r3, [r5], #1
 800cfb8:	9b02      	ldr	r3, [sp, #8]
 800cfba:	429d      	cmp	r5, r3
 800cfbc:	4606      	mov	r6, r0
 800cfbe:	460f      	mov	r7, r1
 800cfc0:	f04f 0200 	mov.w	r2, #0
 800cfc4:	d134      	bne.n	800d030 <_dtoa_r+0x660>
 800cfc6:	4b19      	ldr	r3, [pc, #100]	; (800d02c <_dtoa_r+0x65c>)
 800cfc8:	ec51 0b18 	vmov	r0, r1, d8
 800cfcc:	f7f3 f966 	bl	800029c <__adddf3>
 800cfd0:	4602      	mov	r2, r0
 800cfd2:	460b      	mov	r3, r1
 800cfd4:	4630      	mov	r0, r6
 800cfd6:	4639      	mov	r1, r7
 800cfd8:	f7f3 fda6 	bl	8000b28 <__aeabi_dcmpgt>
 800cfdc:	2800      	cmp	r0, #0
 800cfde:	d175      	bne.n	800d0cc <_dtoa_r+0x6fc>
 800cfe0:	ec53 2b18 	vmov	r2, r3, d8
 800cfe4:	4911      	ldr	r1, [pc, #68]	; (800d02c <_dtoa_r+0x65c>)
 800cfe6:	2000      	movs	r0, #0
 800cfe8:	f7f3 f956 	bl	8000298 <__aeabi_dsub>
 800cfec:	4602      	mov	r2, r0
 800cfee:	460b      	mov	r3, r1
 800cff0:	4630      	mov	r0, r6
 800cff2:	4639      	mov	r1, r7
 800cff4:	f7f3 fd7a 	bl	8000aec <__aeabi_dcmplt>
 800cff8:	2800      	cmp	r0, #0
 800cffa:	f43f af27 	beq.w	800ce4c <_dtoa_r+0x47c>
 800cffe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d000:	1e6b      	subs	r3, r5, #1
 800d002:	930c      	str	r3, [sp, #48]	; 0x30
 800d004:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d008:	2b30      	cmp	r3, #48	; 0x30
 800d00a:	d0f8      	beq.n	800cffe <_dtoa_r+0x62e>
 800d00c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800d010:	e04a      	b.n	800d0a8 <_dtoa_r+0x6d8>
 800d012:	bf00      	nop
 800d014:	08010190 	.word	0x08010190
 800d018:	08010168 	.word	0x08010168
 800d01c:	3ff00000 	.word	0x3ff00000
 800d020:	40240000 	.word	0x40240000
 800d024:	401c0000 	.word	0x401c0000
 800d028:	40140000 	.word	0x40140000
 800d02c:	3fe00000 	.word	0x3fe00000
 800d030:	4baf      	ldr	r3, [pc, #700]	; (800d2f0 <_dtoa_r+0x920>)
 800d032:	f7f3 fae9 	bl	8000608 <__aeabi_dmul>
 800d036:	4606      	mov	r6, r0
 800d038:	460f      	mov	r7, r1
 800d03a:	e7ac      	b.n	800cf96 <_dtoa_r+0x5c6>
 800d03c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d040:	9d00      	ldr	r5, [sp, #0]
 800d042:	4642      	mov	r2, r8
 800d044:	464b      	mov	r3, r9
 800d046:	4630      	mov	r0, r6
 800d048:	4639      	mov	r1, r7
 800d04a:	f7f3 fc07 	bl	800085c <__aeabi_ddiv>
 800d04e:	f7f3 fd8b 	bl	8000b68 <__aeabi_d2iz>
 800d052:	9002      	str	r0, [sp, #8]
 800d054:	f7f3 fa6e 	bl	8000534 <__aeabi_i2d>
 800d058:	4642      	mov	r2, r8
 800d05a:	464b      	mov	r3, r9
 800d05c:	f7f3 fad4 	bl	8000608 <__aeabi_dmul>
 800d060:	4602      	mov	r2, r0
 800d062:	460b      	mov	r3, r1
 800d064:	4630      	mov	r0, r6
 800d066:	4639      	mov	r1, r7
 800d068:	f7f3 f916 	bl	8000298 <__aeabi_dsub>
 800d06c:	9e02      	ldr	r6, [sp, #8]
 800d06e:	9f01      	ldr	r7, [sp, #4]
 800d070:	3630      	adds	r6, #48	; 0x30
 800d072:	f805 6b01 	strb.w	r6, [r5], #1
 800d076:	9e00      	ldr	r6, [sp, #0]
 800d078:	1bae      	subs	r6, r5, r6
 800d07a:	42b7      	cmp	r7, r6
 800d07c:	4602      	mov	r2, r0
 800d07e:	460b      	mov	r3, r1
 800d080:	d137      	bne.n	800d0f2 <_dtoa_r+0x722>
 800d082:	f7f3 f90b 	bl	800029c <__adddf3>
 800d086:	4642      	mov	r2, r8
 800d088:	464b      	mov	r3, r9
 800d08a:	4606      	mov	r6, r0
 800d08c:	460f      	mov	r7, r1
 800d08e:	f7f3 fd4b 	bl	8000b28 <__aeabi_dcmpgt>
 800d092:	b9c8      	cbnz	r0, 800d0c8 <_dtoa_r+0x6f8>
 800d094:	4642      	mov	r2, r8
 800d096:	464b      	mov	r3, r9
 800d098:	4630      	mov	r0, r6
 800d09a:	4639      	mov	r1, r7
 800d09c:	f7f3 fd1c 	bl	8000ad8 <__aeabi_dcmpeq>
 800d0a0:	b110      	cbz	r0, 800d0a8 <_dtoa_r+0x6d8>
 800d0a2:	9b02      	ldr	r3, [sp, #8]
 800d0a4:	07d9      	lsls	r1, r3, #31
 800d0a6:	d40f      	bmi.n	800d0c8 <_dtoa_r+0x6f8>
 800d0a8:	4620      	mov	r0, r4
 800d0aa:	4659      	mov	r1, fp
 800d0ac:	f000 ff54 	bl	800df58 <_Bfree>
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	702b      	strb	r3, [r5, #0]
 800d0b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d0b6:	f10a 0001 	add.w	r0, sl, #1
 800d0ba:	6018      	str	r0, [r3, #0]
 800d0bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	f43f acd8 	beq.w	800ca74 <_dtoa_r+0xa4>
 800d0c4:	601d      	str	r5, [r3, #0]
 800d0c6:	e4d5      	b.n	800ca74 <_dtoa_r+0xa4>
 800d0c8:	f8cd a01c 	str.w	sl, [sp, #28]
 800d0cc:	462b      	mov	r3, r5
 800d0ce:	461d      	mov	r5, r3
 800d0d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d0d4:	2a39      	cmp	r2, #57	; 0x39
 800d0d6:	d108      	bne.n	800d0ea <_dtoa_r+0x71a>
 800d0d8:	9a00      	ldr	r2, [sp, #0]
 800d0da:	429a      	cmp	r2, r3
 800d0dc:	d1f7      	bne.n	800d0ce <_dtoa_r+0x6fe>
 800d0de:	9a07      	ldr	r2, [sp, #28]
 800d0e0:	9900      	ldr	r1, [sp, #0]
 800d0e2:	3201      	adds	r2, #1
 800d0e4:	9207      	str	r2, [sp, #28]
 800d0e6:	2230      	movs	r2, #48	; 0x30
 800d0e8:	700a      	strb	r2, [r1, #0]
 800d0ea:	781a      	ldrb	r2, [r3, #0]
 800d0ec:	3201      	adds	r2, #1
 800d0ee:	701a      	strb	r2, [r3, #0]
 800d0f0:	e78c      	b.n	800d00c <_dtoa_r+0x63c>
 800d0f2:	4b7f      	ldr	r3, [pc, #508]	; (800d2f0 <_dtoa_r+0x920>)
 800d0f4:	2200      	movs	r2, #0
 800d0f6:	f7f3 fa87 	bl	8000608 <__aeabi_dmul>
 800d0fa:	2200      	movs	r2, #0
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	4606      	mov	r6, r0
 800d100:	460f      	mov	r7, r1
 800d102:	f7f3 fce9 	bl	8000ad8 <__aeabi_dcmpeq>
 800d106:	2800      	cmp	r0, #0
 800d108:	d09b      	beq.n	800d042 <_dtoa_r+0x672>
 800d10a:	e7cd      	b.n	800d0a8 <_dtoa_r+0x6d8>
 800d10c:	9a08      	ldr	r2, [sp, #32]
 800d10e:	2a00      	cmp	r2, #0
 800d110:	f000 80c4 	beq.w	800d29c <_dtoa_r+0x8cc>
 800d114:	9a05      	ldr	r2, [sp, #20]
 800d116:	2a01      	cmp	r2, #1
 800d118:	f300 80a8 	bgt.w	800d26c <_dtoa_r+0x89c>
 800d11c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d11e:	2a00      	cmp	r2, #0
 800d120:	f000 80a0 	beq.w	800d264 <_dtoa_r+0x894>
 800d124:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d128:	9e06      	ldr	r6, [sp, #24]
 800d12a:	4645      	mov	r5, r8
 800d12c:	9a04      	ldr	r2, [sp, #16]
 800d12e:	2101      	movs	r1, #1
 800d130:	441a      	add	r2, r3
 800d132:	4620      	mov	r0, r4
 800d134:	4498      	add	r8, r3
 800d136:	9204      	str	r2, [sp, #16]
 800d138:	f001 f814 	bl	800e164 <__i2b>
 800d13c:	4607      	mov	r7, r0
 800d13e:	2d00      	cmp	r5, #0
 800d140:	dd0b      	ble.n	800d15a <_dtoa_r+0x78a>
 800d142:	9b04      	ldr	r3, [sp, #16]
 800d144:	2b00      	cmp	r3, #0
 800d146:	dd08      	ble.n	800d15a <_dtoa_r+0x78a>
 800d148:	42ab      	cmp	r3, r5
 800d14a:	9a04      	ldr	r2, [sp, #16]
 800d14c:	bfa8      	it	ge
 800d14e:	462b      	movge	r3, r5
 800d150:	eba8 0803 	sub.w	r8, r8, r3
 800d154:	1aed      	subs	r5, r5, r3
 800d156:	1ad3      	subs	r3, r2, r3
 800d158:	9304      	str	r3, [sp, #16]
 800d15a:	9b06      	ldr	r3, [sp, #24]
 800d15c:	b1fb      	cbz	r3, 800d19e <_dtoa_r+0x7ce>
 800d15e:	9b08      	ldr	r3, [sp, #32]
 800d160:	2b00      	cmp	r3, #0
 800d162:	f000 809f 	beq.w	800d2a4 <_dtoa_r+0x8d4>
 800d166:	2e00      	cmp	r6, #0
 800d168:	dd11      	ble.n	800d18e <_dtoa_r+0x7be>
 800d16a:	4639      	mov	r1, r7
 800d16c:	4632      	mov	r2, r6
 800d16e:	4620      	mov	r0, r4
 800d170:	f001 f8b4 	bl	800e2dc <__pow5mult>
 800d174:	465a      	mov	r2, fp
 800d176:	4601      	mov	r1, r0
 800d178:	4607      	mov	r7, r0
 800d17a:	4620      	mov	r0, r4
 800d17c:	f001 f808 	bl	800e190 <__multiply>
 800d180:	4659      	mov	r1, fp
 800d182:	9007      	str	r0, [sp, #28]
 800d184:	4620      	mov	r0, r4
 800d186:	f000 fee7 	bl	800df58 <_Bfree>
 800d18a:	9b07      	ldr	r3, [sp, #28]
 800d18c:	469b      	mov	fp, r3
 800d18e:	9b06      	ldr	r3, [sp, #24]
 800d190:	1b9a      	subs	r2, r3, r6
 800d192:	d004      	beq.n	800d19e <_dtoa_r+0x7ce>
 800d194:	4659      	mov	r1, fp
 800d196:	4620      	mov	r0, r4
 800d198:	f001 f8a0 	bl	800e2dc <__pow5mult>
 800d19c:	4683      	mov	fp, r0
 800d19e:	2101      	movs	r1, #1
 800d1a0:	4620      	mov	r0, r4
 800d1a2:	f000 ffdf 	bl	800e164 <__i2b>
 800d1a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	4606      	mov	r6, r0
 800d1ac:	dd7c      	ble.n	800d2a8 <_dtoa_r+0x8d8>
 800d1ae:	461a      	mov	r2, r3
 800d1b0:	4601      	mov	r1, r0
 800d1b2:	4620      	mov	r0, r4
 800d1b4:	f001 f892 	bl	800e2dc <__pow5mult>
 800d1b8:	9b05      	ldr	r3, [sp, #20]
 800d1ba:	2b01      	cmp	r3, #1
 800d1bc:	4606      	mov	r6, r0
 800d1be:	dd76      	ble.n	800d2ae <_dtoa_r+0x8de>
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	9306      	str	r3, [sp, #24]
 800d1c4:	6933      	ldr	r3, [r6, #16]
 800d1c6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d1ca:	6918      	ldr	r0, [r3, #16]
 800d1cc:	f000 ff7a 	bl	800e0c4 <__hi0bits>
 800d1d0:	f1c0 0020 	rsb	r0, r0, #32
 800d1d4:	9b04      	ldr	r3, [sp, #16]
 800d1d6:	4418      	add	r0, r3
 800d1d8:	f010 001f 	ands.w	r0, r0, #31
 800d1dc:	f000 8086 	beq.w	800d2ec <_dtoa_r+0x91c>
 800d1e0:	f1c0 0320 	rsb	r3, r0, #32
 800d1e4:	2b04      	cmp	r3, #4
 800d1e6:	dd7f      	ble.n	800d2e8 <_dtoa_r+0x918>
 800d1e8:	f1c0 001c 	rsb	r0, r0, #28
 800d1ec:	9b04      	ldr	r3, [sp, #16]
 800d1ee:	4403      	add	r3, r0
 800d1f0:	4480      	add	r8, r0
 800d1f2:	4405      	add	r5, r0
 800d1f4:	9304      	str	r3, [sp, #16]
 800d1f6:	f1b8 0f00 	cmp.w	r8, #0
 800d1fa:	dd05      	ble.n	800d208 <_dtoa_r+0x838>
 800d1fc:	4659      	mov	r1, fp
 800d1fe:	4642      	mov	r2, r8
 800d200:	4620      	mov	r0, r4
 800d202:	f001 f8c5 	bl	800e390 <__lshift>
 800d206:	4683      	mov	fp, r0
 800d208:	9b04      	ldr	r3, [sp, #16]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	dd05      	ble.n	800d21a <_dtoa_r+0x84a>
 800d20e:	4631      	mov	r1, r6
 800d210:	461a      	mov	r2, r3
 800d212:	4620      	mov	r0, r4
 800d214:	f001 f8bc 	bl	800e390 <__lshift>
 800d218:	4606      	mov	r6, r0
 800d21a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d069      	beq.n	800d2f4 <_dtoa_r+0x924>
 800d220:	4631      	mov	r1, r6
 800d222:	4658      	mov	r0, fp
 800d224:	f001 f920 	bl	800e468 <__mcmp>
 800d228:	2800      	cmp	r0, #0
 800d22a:	da63      	bge.n	800d2f4 <_dtoa_r+0x924>
 800d22c:	2300      	movs	r3, #0
 800d22e:	4659      	mov	r1, fp
 800d230:	220a      	movs	r2, #10
 800d232:	4620      	mov	r0, r4
 800d234:	f000 feb2 	bl	800df9c <__multadd>
 800d238:	9b08      	ldr	r3, [sp, #32]
 800d23a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d23e:	4683      	mov	fp, r0
 800d240:	2b00      	cmp	r3, #0
 800d242:	f000 818f 	beq.w	800d564 <_dtoa_r+0xb94>
 800d246:	4639      	mov	r1, r7
 800d248:	2300      	movs	r3, #0
 800d24a:	220a      	movs	r2, #10
 800d24c:	4620      	mov	r0, r4
 800d24e:	f000 fea5 	bl	800df9c <__multadd>
 800d252:	f1b9 0f00 	cmp.w	r9, #0
 800d256:	4607      	mov	r7, r0
 800d258:	f300 808e 	bgt.w	800d378 <_dtoa_r+0x9a8>
 800d25c:	9b05      	ldr	r3, [sp, #20]
 800d25e:	2b02      	cmp	r3, #2
 800d260:	dc50      	bgt.n	800d304 <_dtoa_r+0x934>
 800d262:	e089      	b.n	800d378 <_dtoa_r+0x9a8>
 800d264:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d266:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d26a:	e75d      	b.n	800d128 <_dtoa_r+0x758>
 800d26c:	9b01      	ldr	r3, [sp, #4]
 800d26e:	1e5e      	subs	r6, r3, #1
 800d270:	9b06      	ldr	r3, [sp, #24]
 800d272:	42b3      	cmp	r3, r6
 800d274:	bfbf      	itttt	lt
 800d276:	9b06      	ldrlt	r3, [sp, #24]
 800d278:	9606      	strlt	r6, [sp, #24]
 800d27a:	1af2      	sublt	r2, r6, r3
 800d27c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800d27e:	bfb6      	itet	lt
 800d280:	189b      	addlt	r3, r3, r2
 800d282:	1b9e      	subge	r6, r3, r6
 800d284:	930d      	strlt	r3, [sp, #52]	; 0x34
 800d286:	9b01      	ldr	r3, [sp, #4]
 800d288:	bfb8      	it	lt
 800d28a:	2600      	movlt	r6, #0
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	bfb5      	itete	lt
 800d290:	eba8 0503 	sublt.w	r5, r8, r3
 800d294:	9b01      	ldrge	r3, [sp, #4]
 800d296:	2300      	movlt	r3, #0
 800d298:	4645      	movge	r5, r8
 800d29a:	e747      	b.n	800d12c <_dtoa_r+0x75c>
 800d29c:	9e06      	ldr	r6, [sp, #24]
 800d29e:	9f08      	ldr	r7, [sp, #32]
 800d2a0:	4645      	mov	r5, r8
 800d2a2:	e74c      	b.n	800d13e <_dtoa_r+0x76e>
 800d2a4:	9a06      	ldr	r2, [sp, #24]
 800d2a6:	e775      	b.n	800d194 <_dtoa_r+0x7c4>
 800d2a8:	9b05      	ldr	r3, [sp, #20]
 800d2aa:	2b01      	cmp	r3, #1
 800d2ac:	dc18      	bgt.n	800d2e0 <_dtoa_r+0x910>
 800d2ae:	9b02      	ldr	r3, [sp, #8]
 800d2b0:	b9b3      	cbnz	r3, 800d2e0 <_dtoa_r+0x910>
 800d2b2:	9b03      	ldr	r3, [sp, #12]
 800d2b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d2b8:	b9a3      	cbnz	r3, 800d2e4 <_dtoa_r+0x914>
 800d2ba:	9b03      	ldr	r3, [sp, #12]
 800d2bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d2c0:	0d1b      	lsrs	r3, r3, #20
 800d2c2:	051b      	lsls	r3, r3, #20
 800d2c4:	b12b      	cbz	r3, 800d2d2 <_dtoa_r+0x902>
 800d2c6:	9b04      	ldr	r3, [sp, #16]
 800d2c8:	3301      	adds	r3, #1
 800d2ca:	9304      	str	r3, [sp, #16]
 800d2cc:	f108 0801 	add.w	r8, r8, #1
 800d2d0:	2301      	movs	r3, #1
 800d2d2:	9306      	str	r3, [sp, #24]
 800d2d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	f47f af74 	bne.w	800d1c4 <_dtoa_r+0x7f4>
 800d2dc:	2001      	movs	r0, #1
 800d2de:	e779      	b.n	800d1d4 <_dtoa_r+0x804>
 800d2e0:	2300      	movs	r3, #0
 800d2e2:	e7f6      	b.n	800d2d2 <_dtoa_r+0x902>
 800d2e4:	9b02      	ldr	r3, [sp, #8]
 800d2e6:	e7f4      	b.n	800d2d2 <_dtoa_r+0x902>
 800d2e8:	d085      	beq.n	800d1f6 <_dtoa_r+0x826>
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	301c      	adds	r0, #28
 800d2ee:	e77d      	b.n	800d1ec <_dtoa_r+0x81c>
 800d2f0:	40240000 	.word	0x40240000
 800d2f4:	9b01      	ldr	r3, [sp, #4]
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	dc38      	bgt.n	800d36c <_dtoa_r+0x99c>
 800d2fa:	9b05      	ldr	r3, [sp, #20]
 800d2fc:	2b02      	cmp	r3, #2
 800d2fe:	dd35      	ble.n	800d36c <_dtoa_r+0x99c>
 800d300:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800d304:	f1b9 0f00 	cmp.w	r9, #0
 800d308:	d10d      	bne.n	800d326 <_dtoa_r+0x956>
 800d30a:	4631      	mov	r1, r6
 800d30c:	464b      	mov	r3, r9
 800d30e:	2205      	movs	r2, #5
 800d310:	4620      	mov	r0, r4
 800d312:	f000 fe43 	bl	800df9c <__multadd>
 800d316:	4601      	mov	r1, r0
 800d318:	4606      	mov	r6, r0
 800d31a:	4658      	mov	r0, fp
 800d31c:	f001 f8a4 	bl	800e468 <__mcmp>
 800d320:	2800      	cmp	r0, #0
 800d322:	f73f adbd 	bgt.w	800cea0 <_dtoa_r+0x4d0>
 800d326:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d328:	9d00      	ldr	r5, [sp, #0]
 800d32a:	ea6f 0a03 	mvn.w	sl, r3
 800d32e:	f04f 0800 	mov.w	r8, #0
 800d332:	4631      	mov	r1, r6
 800d334:	4620      	mov	r0, r4
 800d336:	f000 fe0f 	bl	800df58 <_Bfree>
 800d33a:	2f00      	cmp	r7, #0
 800d33c:	f43f aeb4 	beq.w	800d0a8 <_dtoa_r+0x6d8>
 800d340:	f1b8 0f00 	cmp.w	r8, #0
 800d344:	d005      	beq.n	800d352 <_dtoa_r+0x982>
 800d346:	45b8      	cmp	r8, r7
 800d348:	d003      	beq.n	800d352 <_dtoa_r+0x982>
 800d34a:	4641      	mov	r1, r8
 800d34c:	4620      	mov	r0, r4
 800d34e:	f000 fe03 	bl	800df58 <_Bfree>
 800d352:	4639      	mov	r1, r7
 800d354:	4620      	mov	r0, r4
 800d356:	f000 fdff 	bl	800df58 <_Bfree>
 800d35a:	e6a5      	b.n	800d0a8 <_dtoa_r+0x6d8>
 800d35c:	2600      	movs	r6, #0
 800d35e:	4637      	mov	r7, r6
 800d360:	e7e1      	b.n	800d326 <_dtoa_r+0x956>
 800d362:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800d364:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800d368:	4637      	mov	r7, r6
 800d36a:	e599      	b.n	800cea0 <_dtoa_r+0x4d0>
 800d36c:	9b08      	ldr	r3, [sp, #32]
 800d36e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800d372:	2b00      	cmp	r3, #0
 800d374:	f000 80fd 	beq.w	800d572 <_dtoa_r+0xba2>
 800d378:	2d00      	cmp	r5, #0
 800d37a:	dd05      	ble.n	800d388 <_dtoa_r+0x9b8>
 800d37c:	4639      	mov	r1, r7
 800d37e:	462a      	mov	r2, r5
 800d380:	4620      	mov	r0, r4
 800d382:	f001 f805 	bl	800e390 <__lshift>
 800d386:	4607      	mov	r7, r0
 800d388:	9b06      	ldr	r3, [sp, #24]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d05c      	beq.n	800d448 <_dtoa_r+0xa78>
 800d38e:	6879      	ldr	r1, [r7, #4]
 800d390:	4620      	mov	r0, r4
 800d392:	f000 fda1 	bl	800ded8 <_Balloc>
 800d396:	4605      	mov	r5, r0
 800d398:	b928      	cbnz	r0, 800d3a6 <_dtoa_r+0x9d6>
 800d39a:	4b80      	ldr	r3, [pc, #512]	; (800d59c <_dtoa_r+0xbcc>)
 800d39c:	4602      	mov	r2, r0
 800d39e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d3a2:	f7ff bb2e 	b.w	800ca02 <_dtoa_r+0x32>
 800d3a6:	693a      	ldr	r2, [r7, #16]
 800d3a8:	3202      	adds	r2, #2
 800d3aa:	0092      	lsls	r2, r2, #2
 800d3ac:	f107 010c 	add.w	r1, r7, #12
 800d3b0:	300c      	adds	r0, #12
 800d3b2:	f7fd fe33 	bl	800b01c <memcpy>
 800d3b6:	2201      	movs	r2, #1
 800d3b8:	4629      	mov	r1, r5
 800d3ba:	4620      	mov	r0, r4
 800d3bc:	f000 ffe8 	bl	800e390 <__lshift>
 800d3c0:	9b00      	ldr	r3, [sp, #0]
 800d3c2:	3301      	adds	r3, #1
 800d3c4:	9301      	str	r3, [sp, #4]
 800d3c6:	9b00      	ldr	r3, [sp, #0]
 800d3c8:	444b      	add	r3, r9
 800d3ca:	9307      	str	r3, [sp, #28]
 800d3cc:	9b02      	ldr	r3, [sp, #8]
 800d3ce:	f003 0301 	and.w	r3, r3, #1
 800d3d2:	46b8      	mov	r8, r7
 800d3d4:	9306      	str	r3, [sp, #24]
 800d3d6:	4607      	mov	r7, r0
 800d3d8:	9b01      	ldr	r3, [sp, #4]
 800d3da:	4631      	mov	r1, r6
 800d3dc:	3b01      	subs	r3, #1
 800d3de:	4658      	mov	r0, fp
 800d3e0:	9302      	str	r3, [sp, #8]
 800d3e2:	f7ff fa69 	bl	800c8b8 <quorem>
 800d3e6:	4603      	mov	r3, r0
 800d3e8:	3330      	adds	r3, #48	; 0x30
 800d3ea:	9004      	str	r0, [sp, #16]
 800d3ec:	4641      	mov	r1, r8
 800d3ee:	4658      	mov	r0, fp
 800d3f0:	9308      	str	r3, [sp, #32]
 800d3f2:	f001 f839 	bl	800e468 <__mcmp>
 800d3f6:	463a      	mov	r2, r7
 800d3f8:	4681      	mov	r9, r0
 800d3fa:	4631      	mov	r1, r6
 800d3fc:	4620      	mov	r0, r4
 800d3fe:	f001 f84f 	bl	800e4a0 <__mdiff>
 800d402:	68c2      	ldr	r2, [r0, #12]
 800d404:	9b08      	ldr	r3, [sp, #32]
 800d406:	4605      	mov	r5, r0
 800d408:	bb02      	cbnz	r2, 800d44c <_dtoa_r+0xa7c>
 800d40a:	4601      	mov	r1, r0
 800d40c:	4658      	mov	r0, fp
 800d40e:	f001 f82b 	bl	800e468 <__mcmp>
 800d412:	9b08      	ldr	r3, [sp, #32]
 800d414:	4602      	mov	r2, r0
 800d416:	4629      	mov	r1, r5
 800d418:	4620      	mov	r0, r4
 800d41a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800d41e:	f000 fd9b 	bl	800df58 <_Bfree>
 800d422:	9b05      	ldr	r3, [sp, #20]
 800d424:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d426:	9d01      	ldr	r5, [sp, #4]
 800d428:	ea43 0102 	orr.w	r1, r3, r2
 800d42c:	9b06      	ldr	r3, [sp, #24]
 800d42e:	430b      	orrs	r3, r1
 800d430:	9b08      	ldr	r3, [sp, #32]
 800d432:	d10d      	bne.n	800d450 <_dtoa_r+0xa80>
 800d434:	2b39      	cmp	r3, #57	; 0x39
 800d436:	d029      	beq.n	800d48c <_dtoa_r+0xabc>
 800d438:	f1b9 0f00 	cmp.w	r9, #0
 800d43c:	dd01      	ble.n	800d442 <_dtoa_r+0xa72>
 800d43e:	9b04      	ldr	r3, [sp, #16]
 800d440:	3331      	adds	r3, #49	; 0x31
 800d442:	9a02      	ldr	r2, [sp, #8]
 800d444:	7013      	strb	r3, [r2, #0]
 800d446:	e774      	b.n	800d332 <_dtoa_r+0x962>
 800d448:	4638      	mov	r0, r7
 800d44a:	e7b9      	b.n	800d3c0 <_dtoa_r+0x9f0>
 800d44c:	2201      	movs	r2, #1
 800d44e:	e7e2      	b.n	800d416 <_dtoa_r+0xa46>
 800d450:	f1b9 0f00 	cmp.w	r9, #0
 800d454:	db06      	blt.n	800d464 <_dtoa_r+0xa94>
 800d456:	9905      	ldr	r1, [sp, #20]
 800d458:	ea41 0909 	orr.w	r9, r1, r9
 800d45c:	9906      	ldr	r1, [sp, #24]
 800d45e:	ea59 0101 	orrs.w	r1, r9, r1
 800d462:	d120      	bne.n	800d4a6 <_dtoa_r+0xad6>
 800d464:	2a00      	cmp	r2, #0
 800d466:	ddec      	ble.n	800d442 <_dtoa_r+0xa72>
 800d468:	4659      	mov	r1, fp
 800d46a:	2201      	movs	r2, #1
 800d46c:	4620      	mov	r0, r4
 800d46e:	9301      	str	r3, [sp, #4]
 800d470:	f000 ff8e 	bl	800e390 <__lshift>
 800d474:	4631      	mov	r1, r6
 800d476:	4683      	mov	fp, r0
 800d478:	f000 fff6 	bl	800e468 <__mcmp>
 800d47c:	2800      	cmp	r0, #0
 800d47e:	9b01      	ldr	r3, [sp, #4]
 800d480:	dc02      	bgt.n	800d488 <_dtoa_r+0xab8>
 800d482:	d1de      	bne.n	800d442 <_dtoa_r+0xa72>
 800d484:	07da      	lsls	r2, r3, #31
 800d486:	d5dc      	bpl.n	800d442 <_dtoa_r+0xa72>
 800d488:	2b39      	cmp	r3, #57	; 0x39
 800d48a:	d1d8      	bne.n	800d43e <_dtoa_r+0xa6e>
 800d48c:	9a02      	ldr	r2, [sp, #8]
 800d48e:	2339      	movs	r3, #57	; 0x39
 800d490:	7013      	strb	r3, [r2, #0]
 800d492:	462b      	mov	r3, r5
 800d494:	461d      	mov	r5, r3
 800d496:	3b01      	subs	r3, #1
 800d498:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d49c:	2a39      	cmp	r2, #57	; 0x39
 800d49e:	d050      	beq.n	800d542 <_dtoa_r+0xb72>
 800d4a0:	3201      	adds	r2, #1
 800d4a2:	701a      	strb	r2, [r3, #0]
 800d4a4:	e745      	b.n	800d332 <_dtoa_r+0x962>
 800d4a6:	2a00      	cmp	r2, #0
 800d4a8:	dd03      	ble.n	800d4b2 <_dtoa_r+0xae2>
 800d4aa:	2b39      	cmp	r3, #57	; 0x39
 800d4ac:	d0ee      	beq.n	800d48c <_dtoa_r+0xabc>
 800d4ae:	3301      	adds	r3, #1
 800d4b0:	e7c7      	b.n	800d442 <_dtoa_r+0xa72>
 800d4b2:	9a01      	ldr	r2, [sp, #4]
 800d4b4:	9907      	ldr	r1, [sp, #28]
 800d4b6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d4ba:	428a      	cmp	r2, r1
 800d4bc:	d02a      	beq.n	800d514 <_dtoa_r+0xb44>
 800d4be:	4659      	mov	r1, fp
 800d4c0:	2300      	movs	r3, #0
 800d4c2:	220a      	movs	r2, #10
 800d4c4:	4620      	mov	r0, r4
 800d4c6:	f000 fd69 	bl	800df9c <__multadd>
 800d4ca:	45b8      	cmp	r8, r7
 800d4cc:	4683      	mov	fp, r0
 800d4ce:	f04f 0300 	mov.w	r3, #0
 800d4d2:	f04f 020a 	mov.w	r2, #10
 800d4d6:	4641      	mov	r1, r8
 800d4d8:	4620      	mov	r0, r4
 800d4da:	d107      	bne.n	800d4ec <_dtoa_r+0xb1c>
 800d4dc:	f000 fd5e 	bl	800df9c <__multadd>
 800d4e0:	4680      	mov	r8, r0
 800d4e2:	4607      	mov	r7, r0
 800d4e4:	9b01      	ldr	r3, [sp, #4]
 800d4e6:	3301      	adds	r3, #1
 800d4e8:	9301      	str	r3, [sp, #4]
 800d4ea:	e775      	b.n	800d3d8 <_dtoa_r+0xa08>
 800d4ec:	f000 fd56 	bl	800df9c <__multadd>
 800d4f0:	4639      	mov	r1, r7
 800d4f2:	4680      	mov	r8, r0
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	220a      	movs	r2, #10
 800d4f8:	4620      	mov	r0, r4
 800d4fa:	f000 fd4f 	bl	800df9c <__multadd>
 800d4fe:	4607      	mov	r7, r0
 800d500:	e7f0      	b.n	800d4e4 <_dtoa_r+0xb14>
 800d502:	f1b9 0f00 	cmp.w	r9, #0
 800d506:	9a00      	ldr	r2, [sp, #0]
 800d508:	bfcc      	ite	gt
 800d50a:	464d      	movgt	r5, r9
 800d50c:	2501      	movle	r5, #1
 800d50e:	4415      	add	r5, r2
 800d510:	f04f 0800 	mov.w	r8, #0
 800d514:	4659      	mov	r1, fp
 800d516:	2201      	movs	r2, #1
 800d518:	4620      	mov	r0, r4
 800d51a:	9301      	str	r3, [sp, #4]
 800d51c:	f000 ff38 	bl	800e390 <__lshift>
 800d520:	4631      	mov	r1, r6
 800d522:	4683      	mov	fp, r0
 800d524:	f000 ffa0 	bl	800e468 <__mcmp>
 800d528:	2800      	cmp	r0, #0
 800d52a:	dcb2      	bgt.n	800d492 <_dtoa_r+0xac2>
 800d52c:	d102      	bne.n	800d534 <_dtoa_r+0xb64>
 800d52e:	9b01      	ldr	r3, [sp, #4]
 800d530:	07db      	lsls	r3, r3, #31
 800d532:	d4ae      	bmi.n	800d492 <_dtoa_r+0xac2>
 800d534:	462b      	mov	r3, r5
 800d536:	461d      	mov	r5, r3
 800d538:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d53c:	2a30      	cmp	r2, #48	; 0x30
 800d53e:	d0fa      	beq.n	800d536 <_dtoa_r+0xb66>
 800d540:	e6f7      	b.n	800d332 <_dtoa_r+0x962>
 800d542:	9a00      	ldr	r2, [sp, #0]
 800d544:	429a      	cmp	r2, r3
 800d546:	d1a5      	bne.n	800d494 <_dtoa_r+0xac4>
 800d548:	f10a 0a01 	add.w	sl, sl, #1
 800d54c:	2331      	movs	r3, #49	; 0x31
 800d54e:	e779      	b.n	800d444 <_dtoa_r+0xa74>
 800d550:	4b13      	ldr	r3, [pc, #76]	; (800d5a0 <_dtoa_r+0xbd0>)
 800d552:	f7ff baaf 	b.w	800cab4 <_dtoa_r+0xe4>
 800d556:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d558:	2b00      	cmp	r3, #0
 800d55a:	f47f aa86 	bne.w	800ca6a <_dtoa_r+0x9a>
 800d55e:	4b11      	ldr	r3, [pc, #68]	; (800d5a4 <_dtoa_r+0xbd4>)
 800d560:	f7ff baa8 	b.w	800cab4 <_dtoa_r+0xe4>
 800d564:	f1b9 0f00 	cmp.w	r9, #0
 800d568:	dc03      	bgt.n	800d572 <_dtoa_r+0xba2>
 800d56a:	9b05      	ldr	r3, [sp, #20]
 800d56c:	2b02      	cmp	r3, #2
 800d56e:	f73f aec9 	bgt.w	800d304 <_dtoa_r+0x934>
 800d572:	9d00      	ldr	r5, [sp, #0]
 800d574:	4631      	mov	r1, r6
 800d576:	4658      	mov	r0, fp
 800d578:	f7ff f99e 	bl	800c8b8 <quorem>
 800d57c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800d580:	f805 3b01 	strb.w	r3, [r5], #1
 800d584:	9a00      	ldr	r2, [sp, #0]
 800d586:	1aaa      	subs	r2, r5, r2
 800d588:	4591      	cmp	r9, r2
 800d58a:	ddba      	ble.n	800d502 <_dtoa_r+0xb32>
 800d58c:	4659      	mov	r1, fp
 800d58e:	2300      	movs	r3, #0
 800d590:	220a      	movs	r2, #10
 800d592:	4620      	mov	r0, r4
 800d594:	f000 fd02 	bl	800df9c <__multadd>
 800d598:	4683      	mov	fp, r0
 800d59a:	e7eb      	b.n	800d574 <_dtoa_r+0xba4>
 800d59c:	08010011 	.word	0x08010011
 800d5a0:	0800fd78 	.word	0x0800fd78
 800d5a4:	0800ffa5 	.word	0x0800ffa5

0800d5a8 <std>:
 800d5a8:	2300      	movs	r3, #0
 800d5aa:	b510      	push	{r4, lr}
 800d5ac:	4604      	mov	r4, r0
 800d5ae:	e9c0 3300 	strd	r3, r3, [r0]
 800d5b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d5b6:	6083      	str	r3, [r0, #8]
 800d5b8:	8181      	strh	r1, [r0, #12]
 800d5ba:	6643      	str	r3, [r0, #100]	; 0x64
 800d5bc:	81c2      	strh	r2, [r0, #14]
 800d5be:	6183      	str	r3, [r0, #24]
 800d5c0:	4619      	mov	r1, r3
 800d5c2:	2208      	movs	r2, #8
 800d5c4:	305c      	adds	r0, #92	; 0x5c
 800d5c6:	f7fd fd37 	bl	800b038 <memset>
 800d5ca:	4b05      	ldr	r3, [pc, #20]	; (800d5e0 <std+0x38>)
 800d5cc:	6263      	str	r3, [r4, #36]	; 0x24
 800d5ce:	4b05      	ldr	r3, [pc, #20]	; (800d5e4 <std+0x3c>)
 800d5d0:	62a3      	str	r3, [r4, #40]	; 0x28
 800d5d2:	4b05      	ldr	r3, [pc, #20]	; (800d5e8 <std+0x40>)
 800d5d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d5d6:	4b05      	ldr	r3, [pc, #20]	; (800d5ec <std+0x44>)
 800d5d8:	6224      	str	r4, [r4, #32]
 800d5da:	6323      	str	r3, [r4, #48]	; 0x30
 800d5dc:	bd10      	pop	{r4, pc}
 800d5de:	bf00      	nop
 800d5e0:	0800ef6d 	.word	0x0800ef6d
 800d5e4:	0800ef8f 	.word	0x0800ef8f
 800d5e8:	0800efc7 	.word	0x0800efc7
 800d5ec:	0800efeb 	.word	0x0800efeb

0800d5f0 <_cleanup_r>:
 800d5f0:	4901      	ldr	r1, [pc, #4]	; (800d5f8 <_cleanup_r+0x8>)
 800d5f2:	f000 b8c1 	b.w	800d778 <_fwalk_reent>
 800d5f6:	bf00      	nop
 800d5f8:	0800f315 	.word	0x0800f315

0800d5fc <__sfmoreglue>:
 800d5fc:	b570      	push	{r4, r5, r6, lr}
 800d5fe:	1e4a      	subs	r2, r1, #1
 800d600:	2568      	movs	r5, #104	; 0x68
 800d602:	4355      	muls	r5, r2
 800d604:	460e      	mov	r6, r1
 800d606:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d60a:	f001 f97f 	bl	800e90c <_malloc_r>
 800d60e:	4604      	mov	r4, r0
 800d610:	b140      	cbz	r0, 800d624 <__sfmoreglue+0x28>
 800d612:	2100      	movs	r1, #0
 800d614:	e9c0 1600 	strd	r1, r6, [r0]
 800d618:	300c      	adds	r0, #12
 800d61a:	60a0      	str	r0, [r4, #8]
 800d61c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d620:	f7fd fd0a 	bl	800b038 <memset>
 800d624:	4620      	mov	r0, r4
 800d626:	bd70      	pop	{r4, r5, r6, pc}

0800d628 <__sfp_lock_acquire>:
 800d628:	4801      	ldr	r0, [pc, #4]	; (800d630 <__sfp_lock_acquire+0x8>)
 800d62a:	f000 bc38 	b.w	800de9e <__retarget_lock_acquire_recursive>
 800d62e:	bf00      	nop
 800d630:	20000748 	.word	0x20000748

0800d634 <__sfp_lock_release>:
 800d634:	4801      	ldr	r0, [pc, #4]	; (800d63c <__sfp_lock_release+0x8>)
 800d636:	f000 bc33 	b.w	800dea0 <__retarget_lock_release_recursive>
 800d63a:	bf00      	nop
 800d63c:	20000748 	.word	0x20000748

0800d640 <__sinit_lock_acquire>:
 800d640:	4801      	ldr	r0, [pc, #4]	; (800d648 <__sinit_lock_acquire+0x8>)
 800d642:	f000 bc2c 	b.w	800de9e <__retarget_lock_acquire_recursive>
 800d646:	bf00      	nop
 800d648:	20000743 	.word	0x20000743

0800d64c <__sinit_lock_release>:
 800d64c:	4801      	ldr	r0, [pc, #4]	; (800d654 <__sinit_lock_release+0x8>)
 800d64e:	f000 bc27 	b.w	800dea0 <__retarget_lock_release_recursive>
 800d652:	bf00      	nop
 800d654:	20000743 	.word	0x20000743

0800d658 <__sinit>:
 800d658:	b510      	push	{r4, lr}
 800d65a:	4604      	mov	r4, r0
 800d65c:	f7ff fff0 	bl	800d640 <__sinit_lock_acquire>
 800d660:	69a3      	ldr	r3, [r4, #24]
 800d662:	b11b      	cbz	r3, 800d66c <__sinit+0x14>
 800d664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d668:	f7ff bff0 	b.w	800d64c <__sinit_lock_release>
 800d66c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d670:	6523      	str	r3, [r4, #80]	; 0x50
 800d672:	4b13      	ldr	r3, [pc, #76]	; (800d6c0 <__sinit+0x68>)
 800d674:	4a13      	ldr	r2, [pc, #76]	; (800d6c4 <__sinit+0x6c>)
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	62a2      	str	r2, [r4, #40]	; 0x28
 800d67a:	42a3      	cmp	r3, r4
 800d67c:	bf04      	itt	eq
 800d67e:	2301      	moveq	r3, #1
 800d680:	61a3      	streq	r3, [r4, #24]
 800d682:	4620      	mov	r0, r4
 800d684:	f000 f820 	bl	800d6c8 <__sfp>
 800d688:	6060      	str	r0, [r4, #4]
 800d68a:	4620      	mov	r0, r4
 800d68c:	f000 f81c 	bl	800d6c8 <__sfp>
 800d690:	60a0      	str	r0, [r4, #8]
 800d692:	4620      	mov	r0, r4
 800d694:	f000 f818 	bl	800d6c8 <__sfp>
 800d698:	2200      	movs	r2, #0
 800d69a:	60e0      	str	r0, [r4, #12]
 800d69c:	2104      	movs	r1, #4
 800d69e:	6860      	ldr	r0, [r4, #4]
 800d6a0:	f7ff ff82 	bl	800d5a8 <std>
 800d6a4:	68a0      	ldr	r0, [r4, #8]
 800d6a6:	2201      	movs	r2, #1
 800d6a8:	2109      	movs	r1, #9
 800d6aa:	f7ff ff7d 	bl	800d5a8 <std>
 800d6ae:	68e0      	ldr	r0, [r4, #12]
 800d6b0:	2202      	movs	r2, #2
 800d6b2:	2112      	movs	r1, #18
 800d6b4:	f7ff ff78 	bl	800d5a8 <std>
 800d6b8:	2301      	movs	r3, #1
 800d6ba:	61a3      	str	r3, [r4, #24]
 800d6bc:	e7d2      	b.n	800d664 <__sinit+0xc>
 800d6be:	bf00      	nop
 800d6c0:	0800fd64 	.word	0x0800fd64
 800d6c4:	0800d5f1 	.word	0x0800d5f1

0800d6c8 <__sfp>:
 800d6c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6ca:	4607      	mov	r7, r0
 800d6cc:	f7ff ffac 	bl	800d628 <__sfp_lock_acquire>
 800d6d0:	4b1e      	ldr	r3, [pc, #120]	; (800d74c <__sfp+0x84>)
 800d6d2:	681e      	ldr	r6, [r3, #0]
 800d6d4:	69b3      	ldr	r3, [r6, #24]
 800d6d6:	b913      	cbnz	r3, 800d6de <__sfp+0x16>
 800d6d8:	4630      	mov	r0, r6
 800d6da:	f7ff ffbd 	bl	800d658 <__sinit>
 800d6de:	3648      	adds	r6, #72	; 0x48
 800d6e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d6e4:	3b01      	subs	r3, #1
 800d6e6:	d503      	bpl.n	800d6f0 <__sfp+0x28>
 800d6e8:	6833      	ldr	r3, [r6, #0]
 800d6ea:	b30b      	cbz	r3, 800d730 <__sfp+0x68>
 800d6ec:	6836      	ldr	r6, [r6, #0]
 800d6ee:	e7f7      	b.n	800d6e0 <__sfp+0x18>
 800d6f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d6f4:	b9d5      	cbnz	r5, 800d72c <__sfp+0x64>
 800d6f6:	4b16      	ldr	r3, [pc, #88]	; (800d750 <__sfp+0x88>)
 800d6f8:	60e3      	str	r3, [r4, #12]
 800d6fa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d6fe:	6665      	str	r5, [r4, #100]	; 0x64
 800d700:	f000 fbcc 	bl	800de9c <__retarget_lock_init_recursive>
 800d704:	f7ff ff96 	bl	800d634 <__sfp_lock_release>
 800d708:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d70c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d710:	6025      	str	r5, [r4, #0]
 800d712:	61a5      	str	r5, [r4, #24]
 800d714:	2208      	movs	r2, #8
 800d716:	4629      	mov	r1, r5
 800d718:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d71c:	f7fd fc8c 	bl	800b038 <memset>
 800d720:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d724:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d728:	4620      	mov	r0, r4
 800d72a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d72c:	3468      	adds	r4, #104	; 0x68
 800d72e:	e7d9      	b.n	800d6e4 <__sfp+0x1c>
 800d730:	2104      	movs	r1, #4
 800d732:	4638      	mov	r0, r7
 800d734:	f7ff ff62 	bl	800d5fc <__sfmoreglue>
 800d738:	4604      	mov	r4, r0
 800d73a:	6030      	str	r0, [r6, #0]
 800d73c:	2800      	cmp	r0, #0
 800d73e:	d1d5      	bne.n	800d6ec <__sfp+0x24>
 800d740:	f7ff ff78 	bl	800d634 <__sfp_lock_release>
 800d744:	230c      	movs	r3, #12
 800d746:	603b      	str	r3, [r7, #0]
 800d748:	e7ee      	b.n	800d728 <__sfp+0x60>
 800d74a:	bf00      	nop
 800d74c:	0800fd64 	.word	0x0800fd64
 800d750:	ffff0001 	.word	0xffff0001

0800d754 <fiprintf>:
 800d754:	b40e      	push	{r1, r2, r3}
 800d756:	b503      	push	{r0, r1, lr}
 800d758:	4601      	mov	r1, r0
 800d75a:	ab03      	add	r3, sp, #12
 800d75c:	4805      	ldr	r0, [pc, #20]	; (800d774 <fiprintf+0x20>)
 800d75e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d762:	6800      	ldr	r0, [r0, #0]
 800d764:	9301      	str	r3, [sp, #4]
 800d766:	f001 fab1 	bl	800eccc <_vfiprintf_r>
 800d76a:	b002      	add	sp, #8
 800d76c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d770:	b003      	add	sp, #12
 800d772:	4770      	bx	lr
 800d774:	20000074 	.word	0x20000074

0800d778 <_fwalk_reent>:
 800d778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d77c:	4606      	mov	r6, r0
 800d77e:	4688      	mov	r8, r1
 800d780:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d784:	2700      	movs	r7, #0
 800d786:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d78a:	f1b9 0901 	subs.w	r9, r9, #1
 800d78e:	d505      	bpl.n	800d79c <_fwalk_reent+0x24>
 800d790:	6824      	ldr	r4, [r4, #0]
 800d792:	2c00      	cmp	r4, #0
 800d794:	d1f7      	bne.n	800d786 <_fwalk_reent+0xe>
 800d796:	4638      	mov	r0, r7
 800d798:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d79c:	89ab      	ldrh	r3, [r5, #12]
 800d79e:	2b01      	cmp	r3, #1
 800d7a0:	d907      	bls.n	800d7b2 <_fwalk_reent+0x3a>
 800d7a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d7a6:	3301      	adds	r3, #1
 800d7a8:	d003      	beq.n	800d7b2 <_fwalk_reent+0x3a>
 800d7aa:	4629      	mov	r1, r5
 800d7ac:	4630      	mov	r0, r6
 800d7ae:	47c0      	blx	r8
 800d7b0:	4307      	orrs	r7, r0
 800d7b2:	3568      	adds	r5, #104	; 0x68
 800d7b4:	e7e9      	b.n	800d78a <_fwalk_reent+0x12>

0800d7b6 <rshift>:
 800d7b6:	6903      	ldr	r3, [r0, #16]
 800d7b8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d7bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d7c0:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d7c4:	f100 0414 	add.w	r4, r0, #20
 800d7c8:	dd45      	ble.n	800d856 <rshift+0xa0>
 800d7ca:	f011 011f 	ands.w	r1, r1, #31
 800d7ce:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d7d2:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d7d6:	d10c      	bne.n	800d7f2 <rshift+0x3c>
 800d7d8:	f100 0710 	add.w	r7, r0, #16
 800d7dc:	4629      	mov	r1, r5
 800d7de:	42b1      	cmp	r1, r6
 800d7e0:	d334      	bcc.n	800d84c <rshift+0x96>
 800d7e2:	1a9b      	subs	r3, r3, r2
 800d7e4:	009b      	lsls	r3, r3, #2
 800d7e6:	1eea      	subs	r2, r5, #3
 800d7e8:	4296      	cmp	r6, r2
 800d7ea:	bf38      	it	cc
 800d7ec:	2300      	movcc	r3, #0
 800d7ee:	4423      	add	r3, r4
 800d7f0:	e015      	b.n	800d81e <rshift+0x68>
 800d7f2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d7f6:	f1c1 0820 	rsb	r8, r1, #32
 800d7fa:	40cf      	lsrs	r7, r1
 800d7fc:	f105 0e04 	add.w	lr, r5, #4
 800d800:	46a1      	mov	r9, r4
 800d802:	4576      	cmp	r6, lr
 800d804:	46f4      	mov	ip, lr
 800d806:	d815      	bhi.n	800d834 <rshift+0x7e>
 800d808:	1a9b      	subs	r3, r3, r2
 800d80a:	009a      	lsls	r2, r3, #2
 800d80c:	3a04      	subs	r2, #4
 800d80e:	3501      	adds	r5, #1
 800d810:	42ae      	cmp	r6, r5
 800d812:	bf38      	it	cc
 800d814:	2200      	movcc	r2, #0
 800d816:	18a3      	adds	r3, r4, r2
 800d818:	50a7      	str	r7, [r4, r2]
 800d81a:	b107      	cbz	r7, 800d81e <rshift+0x68>
 800d81c:	3304      	adds	r3, #4
 800d81e:	1b1a      	subs	r2, r3, r4
 800d820:	42a3      	cmp	r3, r4
 800d822:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d826:	bf08      	it	eq
 800d828:	2300      	moveq	r3, #0
 800d82a:	6102      	str	r2, [r0, #16]
 800d82c:	bf08      	it	eq
 800d82e:	6143      	streq	r3, [r0, #20]
 800d830:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d834:	f8dc c000 	ldr.w	ip, [ip]
 800d838:	fa0c fc08 	lsl.w	ip, ip, r8
 800d83c:	ea4c 0707 	orr.w	r7, ip, r7
 800d840:	f849 7b04 	str.w	r7, [r9], #4
 800d844:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d848:	40cf      	lsrs	r7, r1
 800d84a:	e7da      	b.n	800d802 <rshift+0x4c>
 800d84c:	f851 cb04 	ldr.w	ip, [r1], #4
 800d850:	f847 cf04 	str.w	ip, [r7, #4]!
 800d854:	e7c3      	b.n	800d7de <rshift+0x28>
 800d856:	4623      	mov	r3, r4
 800d858:	e7e1      	b.n	800d81e <rshift+0x68>

0800d85a <__hexdig_fun>:
 800d85a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d85e:	2b09      	cmp	r3, #9
 800d860:	d802      	bhi.n	800d868 <__hexdig_fun+0xe>
 800d862:	3820      	subs	r0, #32
 800d864:	b2c0      	uxtb	r0, r0
 800d866:	4770      	bx	lr
 800d868:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d86c:	2b05      	cmp	r3, #5
 800d86e:	d801      	bhi.n	800d874 <__hexdig_fun+0x1a>
 800d870:	3847      	subs	r0, #71	; 0x47
 800d872:	e7f7      	b.n	800d864 <__hexdig_fun+0xa>
 800d874:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d878:	2b05      	cmp	r3, #5
 800d87a:	d801      	bhi.n	800d880 <__hexdig_fun+0x26>
 800d87c:	3827      	subs	r0, #39	; 0x27
 800d87e:	e7f1      	b.n	800d864 <__hexdig_fun+0xa>
 800d880:	2000      	movs	r0, #0
 800d882:	4770      	bx	lr

0800d884 <__gethex>:
 800d884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d888:	ed2d 8b02 	vpush	{d8}
 800d88c:	b089      	sub	sp, #36	; 0x24
 800d88e:	ee08 0a10 	vmov	s16, r0
 800d892:	9304      	str	r3, [sp, #16]
 800d894:	4bbc      	ldr	r3, [pc, #752]	; (800db88 <__gethex+0x304>)
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	9301      	str	r3, [sp, #4]
 800d89a:	4618      	mov	r0, r3
 800d89c:	468b      	mov	fp, r1
 800d89e:	4690      	mov	r8, r2
 800d8a0:	f7f2 fc9e 	bl	80001e0 <strlen>
 800d8a4:	9b01      	ldr	r3, [sp, #4]
 800d8a6:	f8db 2000 	ldr.w	r2, [fp]
 800d8aa:	4403      	add	r3, r0
 800d8ac:	4682      	mov	sl, r0
 800d8ae:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800d8b2:	9305      	str	r3, [sp, #20]
 800d8b4:	1c93      	adds	r3, r2, #2
 800d8b6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d8ba:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d8be:	32fe      	adds	r2, #254	; 0xfe
 800d8c0:	18d1      	adds	r1, r2, r3
 800d8c2:	461f      	mov	r7, r3
 800d8c4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d8c8:	9100      	str	r1, [sp, #0]
 800d8ca:	2830      	cmp	r0, #48	; 0x30
 800d8cc:	d0f8      	beq.n	800d8c0 <__gethex+0x3c>
 800d8ce:	f7ff ffc4 	bl	800d85a <__hexdig_fun>
 800d8d2:	4604      	mov	r4, r0
 800d8d4:	2800      	cmp	r0, #0
 800d8d6:	d13a      	bne.n	800d94e <__gethex+0xca>
 800d8d8:	9901      	ldr	r1, [sp, #4]
 800d8da:	4652      	mov	r2, sl
 800d8dc:	4638      	mov	r0, r7
 800d8de:	f001 fb88 	bl	800eff2 <strncmp>
 800d8e2:	4605      	mov	r5, r0
 800d8e4:	2800      	cmp	r0, #0
 800d8e6:	d168      	bne.n	800d9ba <__gethex+0x136>
 800d8e8:	f817 000a 	ldrb.w	r0, [r7, sl]
 800d8ec:	eb07 060a 	add.w	r6, r7, sl
 800d8f0:	f7ff ffb3 	bl	800d85a <__hexdig_fun>
 800d8f4:	2800      	cmp	r0, #0
 800d8f6:	d062      	beq.n	800d9be <__gethex+0x13a>
 800d8f8:	4633      	mov	r3, r6
 800d8fa:	7818      	ldrb	r0, [r3, #0]
 800d8fc:	2830      	cmp	r0, #48	; 0x30
 800d8fe:	461f      	mov	r7, r3
 800d900:	f103 0301 	add.w	r3, r3, #1
 800d904:	d0f9      	beq.n	800d8fa <__gethex+0x76>
 800d906:	f7ff ffa8 	bl	800d85a <__hexdig_fun>
 800d90a:	2301      	movs	r3, #1
 800d90c:	fab0 f480 	clz	r4, r0
 800d910:	0964      	lsrs	r4, r4, #5
 800d912:	4635      	mov	r5, r6
 800d914:	9300      	str	r3, [sp, #0]
 800d916:	463a      	mov	r2, r7
 800d918:	4616      	mov	r6, r2
 800d91a:	3201      	adds	r2, #1
 800d91c:	7830      	ldrb	r0, [r6, #0]
 800d91e:	f7ff ff9c 	bl	800d85a <__hexdig_fun>
 800d922:	2800      	cmp	r0, #0
 800d924:	d1f8      	bne.n	800d918 <__gethex+0x94>
 800d926:	9901      	ldr	r1, [sp, #4]
 800d928:	4652      	mov	r2, sl
 800d92a:	4630      	mov	r0, r6
 800d92c:	f001 fb61 	bl	800eff2 <strncmp>
 800d930:	b980      	cbnz	r0, 800d954 <__gethex+0xd0>
 800d932:	b94d      	cbnz	r5, 800d948 <__gethex+0xc4>
 800d934:	eb06 050a 	add.w	r5, r6, sl
 800d938:	462a      	mov	r2, r5
 800d93a:	4616      	mov	r6, r2
 800d93c:	3201      	adds	r2, #1
 800d93e:	7830      	ldrb	r0, [r6, #0]
 800d940:	f7ff ff8b 	bl	800d85a <__hexdig_fun>
 800d944:	2800      	cmp	r0, #0
 800d946:	d1f8      	bne.n	800d93a <__gethex+0xb6>
 800d948:	1bad      	subs	r5, r5, r6
 800d94a:	00ad      	lsls	r5, r5, #2
 800d94c:	e004      	b.n	800d958 <__gethex+0xd4>
 800d94e:	2400      	movs	r4, #0
 800d950:	4625      	mov	r5, r4
 800d952:	e7e0      	b.n	800d916 <__gethex+0x92>
 800d954:	2d00      	cmp	r5, #0
 800d956:	d1f7      	bne.n	800d948 <__gethex+0xc4>
 800d958:	7833      	ldrb	r3, [r6, #0]
 800d95a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d95e:	2b50      	cmp	r3, #80	; 0x50
 800d960:	d13b      	bne.n	800d9da <__gethex+0x156>
 800d962:	7873      	ldrb	r3, [r6, #1]
 800d964:	2b2b      	cmp	r3, #43	; 0x2b
 800d966:	d02c      	beq.n	800d9c2 <__gethex+0x13e>
 800d968:	2b2d      	cmp	r3, #45	; 0x2d
 800d96a:	d02e      	beq.n	800d9ca <__gethex+0x146>
 800d96c:	1c71      	adds	r1, r6, #1
 800d96e:	f04f 0900 	mov.w	r9, #0
 800d972:	7808      	ldrb	r0, [r1, #0]
 800d974:	f7ff ff71 	bl	800d85a <__hexdig_fun>
 800d978:	1e43      	subs	r3, r0, #1
 800d97a:	b2db      	uxtb	r3, r3
 800d97c:	2b18      	cmp	r3, #24
 800d97e:	d82c      	bhi.n	800d9da <__gethex+0x156>
 800d980:	f1a0 0210 	sub.w	r2, r0, #16
 800d984:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d988:	f7ff ff67 	bl	800d85a <__hexdig_fun>
 800d98c:	1e43      	subs	r3, r0, #1
 800d98e:	b2db      	uxtb	r3, r3
 800d990:	2b18      	cmp	r3, #24
 800d992:	d91d      	bls.n	800d9d0 <__gethex+0x14c>
 800d994:	f1b9 0f00 	cmp.w	r9, #0
 800d998:	d000      	beq.n	800d99c <__gethex+0x118>
 800d99a:	4252      	negs	r2, r2
 800d99c:	4415      	add	r5, r2
 800d99e:	f8cb 1000 	str.w	r1, [fp]
 800d9a2:	b1e4      	cbz	r4, 800d9de <__gethex+0x15a>
 800d9a4:	9b00      	ldr	r3, [sp, #0]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	bf14      	ite	ne
 800d9aa:	2700      	movne	r7, #0
 800d9ac:	2706      	moveq	r7, #6
 800d9ae:	4638      	mov	r0, r7
 800d9b0:	b009      	add	sp, #36	; 0x24
 800d9b2:	ecbd 8b02 	vpop	{d8}
 800d9b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9ba:	463e      	mov	r6, r7
 800d9bc:	4625      	mov	r5, r4
 800d9be:	2401      	movs	r4, #1
 800d9c0:	e7ca      	b.n	800d958 <__gethex+0xd4>
 800d9c2:	f04f 0900 	mov.w	r9, #0
 800d9c6:	1cb1      	adds	r1, r6, #2
 800d9c8:	e7d3      	b.n	800d972 <__gethex+0xee>
 800d9ca:	f04f 0901 	mov.w	r9, #1
 800d9ce:	e7fa      	b.n	800d9c6 <__gethex+0x142>
 800d9d0:	230a      	movs	r3, #10
 800d9d2:	fb03 0202 	mla	r2, r3, r2, r0
 800d9d6:	3a10      	subs	r2, #16
 800d9d8:	e7d4      	b.n	800d984 <__gethex+0x100>
 800d9da:	4631      	mov	r1, r6
 800d9dc:	e7df      	b.n	800d99e <__gethex+0x11a>
 800d9de:	1bf3      	subs	r3, r6, r7
 800d9e0:	3b01      	subs	r3, #1
 800d9e2:	4621      	mov	r1, r4
 800d9e4:	2b07      	cmp	r3, #7
 800d9e6:	dc0b      	bgt.n	800da00 <__gethex+0x17c>
 800d9e8:	ee18 0a10 	vmov	r0, s16
 800d9ec:	f000 fa74 	bl	800ded8 <_Balloc>
 800d9f0:	4604      	mov	r4, r0
 800d9f2:	b940      	cbnz	r0, 800da06 <__gethex+0x182>
 800d9f4:	4b65      	ldr	r3, [pc, #404]	; (800db8c <__gethex+0x308>)
 800d9f6:	4602      	mov	r2, r0
 800d9f8:	21de      	movs	r1, #222	; 0xde
 800d9fa:	4865      	ldr	r0, [pc, #404]	; (800db90 <__gethex+0x30c>)
 800d9fc:	f7fe ff3e 	bl	800c87c <__assert_func>
 800da00:	3101      	adds	r1, #1
 800da02:	105b      	asrs	r3, r3, #1
 800da04:	e7ee      	b.n	800d9e4 <__gethex+0x160>
 800da06:	f100 0914 	add.w	r9, r0, #20
 800da0a:	f04f 0b00 	mov.w	fp, #0
 800da0e:	f1ca 0301 	rsb	r3, sl, #1
 800da12:	f8cd 9008 	str.w	r9, [sp, #8]
 800da16:	f8cd b000 	str.w	fp, [sp]
 800da1a:	9306      	str	r3, [sp, #24]
 800da1c:	42b7      	cmp	r7, r6
 800da1e:	d340      	bcc.n	800daa2 <__gethex+0x21e>
 800da20:	9802      	ldr	r0, [sp, #8]
 800da22:	9b00      	ldr	r3, [sp, #0]
 800da24:	f840 3b04 	str.w	r3, [r0], #4
 800da28:	eba0 0009 	sub.w	r0, r0, r9
 800da2c:	1080      	asrs	r0, r0, #2
 800da2e:	0146      	lsls	r6, r0, #5
 800da30:	6120      	str	r0, [r4, #16]
 800da32:	4618      	mov	r0, r3
 800da34:	f000 fb46 	bl	800e0c4 <__hi0bits>
 800da38:	1a30      	subs	r0, r6, r0
 800da3a:	f8d8 6000 	ldr.w	r6, [r8]
 800da3e:	42b0      	cmp	r0, r6
 800da40:	dd63      	ble.n	800db0a <__gethex+0x286>
 800da42:	1b87      	subs	r7, r0, r6
 800da44:	4639      	mov	r1, r7
 800da46:	4620      	mov	r0, r4
 800da48:	f000 fee0 	bl	800e80c <__any_on>
 800da4c:	4682      	mov	sl, r0
 800da4e:	b1a8      	cbz	r0, 800da7c <__gethex+0x1f8>
 800da50:	1e7b      	subs	r3, r7, #1
 800da52:	1159      	asrs	r1, r3, #5
 800da54:	f003 021f 	and.w	r2, r3, #31
 800da58:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800da5c:	f04f 0a01 	mov.w	sl, #1
 800da60:	fa0a f202 	lsl.w	r2, sl, r2
 800da64:	420a      	tst	r2, r1
 800da66:	d009      	beq.n	800da7c <__gethex+0x1f8>
 800da68:	4553      	cmp	r3, sl
 800da6a:	dd05      	ble.n	800da78 <__gethex+0x1f4>
 800da6c:	1eb9      	subs	r1, r7, #2
 800da6e:	4620      	mov	r0, r4
 800da70:	f000 fecc 	bl	800e80c <__any_on>
 800da74:	2800      	cmp	r0, #0
 800da76:	d145      	bne.n	800db04 <__gethex+0x280>
 800da78:	f04f 0a02 	mov.w	sl, #2
 800da7c:	4639      	mov	r1, r7
 800da7e:	4620      	mov	r0, r4
 800da80:	f7ff fe99 	bl	800d7b6 <rshift>
 800da84:	443d      	add	r5, r7
 800da86:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800da8a:	42ab      	cmp	r3, r5
 800da8c:	da4c      	bge.n	800db28 <__gethex+0x2a4>
 800da8e:	ee18 0a10 	vmov	r0, s16
 800da92:	4621      	mov	r1, r4
 800da94:	f000 fa60 	bl	800df58 <_Bfree>
 800da98:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800da9a:	2300      	movs	r3, #0
 800da9c:	6013      	str	r3, [r2, #0]
 800da9e:	27a3      	movs	r7, #163	; 0xa3
 800daa0:	e785      	b.n	800d9ae <__gethex+0x12a>
 800daa2:	1e73      	subs	r3, r6, #1
 800daa4:	9a05      	ldr	r2, [sp, #20]
 800daa6:	9303      	str	r3, [sp, #12]
 800daa8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800daac:	4293      	cmp	r3, r2
 800daae:	d019      	beq.n	800dae4 <__gethex+0x260>
 800dab0:	f1bb 0f20 	cmp.w	fp, #32
 800dab4:	d107      	bne.n	800dac6 <__gethex+0x242>
 800dab6:	9b02      	ldr	r3, [sp, #8]
 800dab8:	9a00      	ldr	r2, [sp, #0]
 800daba:	f843 2b04 	str.w	r2, [r3], #4
 800dabe:	9302      	str	r3, [sp, #8]
 800dac0:	2300      	movs	r3, #0
 800dac2:	9300      	str	r3, [sp, #0]
 800dac4:	469b      	mov	fp, r3
 800dac6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800daca:	f7ff fec6 	bl	800d85a <__hexdig_fun>
 800dace:	9b00      	ldr	r3, [sp, #0]
 800dad0:	f000 000f 	and.w	r0, r0, #15
 800dad4:	fa00 f00b 	lsl.w	r0, r0, fp
 800dad8:	4303      	orrs	r3, r0
 800dada:	9300      	str	r3, [sp, #0]
 800dadc:	f10b 0b04 	add.w	fp, fp, #4
 800dae0:	9b03      	ldr	r3, [sp, #12]
 800dae2:	e00d      	b.n	800db00 <__gethex+0x27c>
 800dae4:	9b03      	ldr	r3, [sp, #12]
 800dae6:	9a06      	ldr	r2, [sp, #24]
 800dae8:	4413      	add	r3, r2
 800daea:	42bb      	cmp	r3, r7
 800daec:	d3e0      	bcc.n	800dab0 <__gethex+0x22c>
 800daee:	4618      	mov	r0, r3
 800daf0:	9901      	ldr	r1, [sp, #4]
 800daf2:	9307      	str	r3, [sp, #28]
 800daf4:	4652      	mov	r2, sl
 800daf6:	f001 fa7c 	bl	800eff2 <strncmp>
 800dafa:	9b07      	ldr	r3, [sp, #28]
 800dafc:	2800      	cmp	r0, #0
 800dafe:	d1d7      	bne.n	800dab0 <__gethex+0x22c>
 800db00:	461e      	mov	r6, r3
 800db02:	e78b      	b.n	800da1c <__gethex+0x198>
 800db04:	f04f 0a03 	mov.w	sl, #3
 800db08:	e7b8      	b.n	800da7c <__gethex+0x1f8>
 800db0a:	da0a      	bge.n	800db22 <__gethex+0x29e>
 800db0c:	1a37      	subs	r7, r6, r0
 800db0e:	4621      	mov	r1, r4
 800db10:	ee18 0a10 	vmov	r0, s16
 800db14:	463a      	mov	r2, r7
 800db16:	f000 fc3b 	bl	800e390 <__lshift>
 800db1a:	1bed      	subs	r5, r5, r7
 800db1c:	4604      	mov	r4, r0
 800db1e:	f100 0914 	add.w	r9, r0, #20
 800db22:	f04f 0a00 	mov.w	sl, #0
 800db26:	e7ae      	b.n	800da86 <__gethex+0x202>
 800db28:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800db2c:	42a8      	cmp	r0, r5
 800db2e:	dd72      	ble.n	800dc16 <__gethex+0x392>
 800db30:	1b45      	subs	r5, r0, r5
 800db32:	42ae      	cmp	r6, r5
 800db34:	dc36      	bgt.n	800dba4 <__gethex+0x320>
 800db36:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800db3a:	2b02      	cmp	r3, #2
 800db3c:	d02a      	beq.n	800db94 <__gethex+0x310>
 800db3e:	2b03      	cmp	r3, #3
 800db40:	d02c      	beq.n	800db9c <__gethex+0x318>
 800db42:	2b01      	cmp	r3, #1
 800db44:	d115      	bne.n	800db72 <__gethex+0x2ee>
 800db46:	42ae      	cmp	r6, r5
 800db48:	d113      	bne.n	800db72 <__gethex+0x2ee>
 800db4a:	2e01      	cmp	r6, #1
 800db4c:	d10b      	bne.n	800db66 <__gethex+0x2e2>
 800db4e:	9a04      	ldr	r2, [sp, #16]
 800db50:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800db54:	6013      	str	r3, [r2, #0]
 800db56:	2301      	movs	r3, #1
 800db58:	6123      	str	r3, [r4, #16]
 800db5a:	f8c9 3000 	str.w	r3, [r9]
 800db5e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800db60:	2762      	movs	r7, #98	; 0x62
 800db62:	601c      	str	r4, [r3, #0]
 800db64:	e723      	b.n	800d9ae <__gethex+0x12a>
 800db66:	1e71      	subs	r1, r6, #1
 800db68:	4620      	mov	r0, r4
 800db6a:	f000 fe4f 	bl	800e80c <__any_on>
 800db6e:	2800      	cmp	r0, #0
 800db70:	d1ed      	bne.n	800db4e <__gethex+0x2ca>
 800db72:	ee18 0a10 	vmov	r0, s16
 800db76:	4621      	mov	r1, r4
 800db78:	f000 f9ee 	bl	800df58 <_Bfree>
 800db7c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800db7e:	2300      	movs	r3, #0
 800db80:	6013      	str	r3, [r2, #0]
 800db82:	2750      	movs	r7, #80	; 0x50
 800db84:	e713      	b.n	800d9ae <__gethex+0x12a>
 800db86:	bf00      	nop
 800db88:	080100f0 	.word	0x080100f0
 800db8c:	08010011 	.word	0x08010011
 800db90:	08010084 	.word	0x08010084
 800db94:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800db96:	2b00      	cmp	r3, #0
 800db98:	d1eb      	bne.n	800db72 <__gethex+0x2ee>
 800db9a:	e7d8      	b.n	800db4e <__gethex+0x2ca>
 800db9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d1d5      	bne.n	800db4e <__gethex+0x2ca>
 800dba2:	e7e6      	b.n	800db72 <__gethex+0x2ee>
 800dba4:	1e6f      	subs	r7, r5, #1
 800dba6:	f1ba 0f00 	cmp.w	sl, #0
 800dbaa:	d131      	bne.n	800dc10 <__gethex+0x38c>
 800dbac:	b127      	cbz	r7, 800dbb8 <__gethex+0x334>
 800dbae:	4639      	mov	r1, r7
 800dbb0:	4620      	mov	r0, r4
 800dbb2:	f000 fe2b 	bl	800e80c <__any_on>
 800dbb6:	4682      	mov	sl, r0
 800dbb8:	117b      	asrs	r3, r7, #5
 800dbba:	2101      	movs	r1, #1
 800dbbc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800dbc0:	f007 071f 	and.w	r7, r7, #31
 800dbc4:	fa01 f707 	lsl.w	r7, r1, r7
 800dbc8:	421f      	tst	r7, r3
 800dbca:	4629      	mov	r1, r5
 800dbcc:	4620      	mov	r0, r4
 800dbce:	bf18      	it	ne
 800dbd0:	f04a 0a02 	orrne.w	sl, sl, #2
 800dbd4:	1b76      	subs	r6, r6, r5
 800dbd6:	f7ff fdee 	bl	800d7b6 <rshift>
 800dbda:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800dbde:	2702      	movs	r7, #2
 800dbe0:	f1ba 0f00 	cmp.w	sl, #0
 800dbe4:	d048      	beq.n	800dc78 <__gethex+0x3f4>
 800dbe6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dbea:	2b02      	cmp	r3, #2
 800dbec:	d015      	beq.n	800dc1a <__gethex+0x396>
 800dbee:	2b03      	cmp	r3, #3
 800dbf0:	d017      	beq.n	800dc22 <__gethex+0x39e>
 800dbf2:	2b01      	cmp	r3, #1
 800dbf4:	d109      	bne.n	800dc0a <__gethex+0x386>
 800dbf6:	f01a 0f02 	tst.w	sl, #2
 800dbfa:	d006      	beq.n	800dc0a <__gethex+0x386>
 800dbfc:	f8d9 0000 	ldr.w	r0, [r9]
 800dc00:	ea4a 0a00 	orr.w	sl, sl, r0
 800dc04:	f01a 0f01 	tst.w	sl, #1
 800dc08:	d10e      	bne.n	800dc28 <__gethex+0x3a4>
 800dc0a:	f047 0710 	orr.w	r7, r7, #16
 800dc0e:	e033      	b.n	800dc78 <__gethex+0x3f4>
 800dc10:	f04f 0a01 	mov.w	sl, #1
 800dc14:	e7d0      	b.n	800dbb8 <__gethex+0x334>
 800dc16:	2701      	movs	r7, #1
 800dc18:	e7e2      	b.n	800dbe0 <__gethex+0x35c>
 800dc1a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dc1c:	f1c3 0301 	rsb	r3, r3, #1
 800dc20:	9315      	str	r3, [sp, #84]	; 0x54
 800dc22:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d0f0      	beq.n	800dc0a <__gethex+0x386>
 800dc28:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800dc2c:	f104 0314 	add.w	r3, r4, #20
 800dc30:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800dc34:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800dc38:	f04f 0c00 	mov.w	ip, #0
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc42:	f1b2 3fff 	cmp.w	r2, #4294967295
 800dc46:	d01c      	beq.n	800dc82 <__gethex+0x3fe>
 800dc48:	3201      	adds	r2, #1
 800dc4a:	6002      	str	r2, [r0, #0]
 800dc4c:	2f02      	cmp	r7, #2
 800dc4e:	f104 0314 	add.w	r3, r4, #20
 800dc52:	d13f      	bne.n	800dcd4 <__gethex+0x450>
 800dc54:	f8d8 2000 	ldr.w	r2, [r8]
 800dc58:	3a01      	subs	r2, #1
 800dc5a:	42b2      	cmp	r2, r6
 800dc5c:	d10a      	bne.n	800dc74 <__gethex+0x3f0>
 800dc5e:	1171      	asrs	r1, r6, #5
 800dc60:	2201      	movs	r2, #1
 800dc62:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dc66:	f006 061f 	and.w	r6, r6, #31
 800dc6a:	fa02 f606 	lsl.w	r6, r2, r6
 800dc6e:	421e      	tst	r6, r3
 800dc70:	bf18      	it	ne
 800dc72:	4617      	movne	r7, r2
 800dc74:	f047 0720 	orr.w	r7, r7, #32
 800dc78:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dc7a:	601c      	str	r4, [r3, #0]
 800dc7c:	9b04      	ldr	r3, [sp, #16]
 800dc7e:	601d      	str	r5, [r3, #0]
 800dc80:	e695      	b.n	800d9ae <__gethex+0x12a>
 800dc82:	4299      	cmp	r1, r3
 800dc84:	f843 cc04 	str.w	ip, [r3, #-4]
 800dc88:	d8d8      	bhi.n	800dc3c <__gethex+0x3b8>
 800dc8a:	68a3      	ldr	r3, [r4, #8]
 800dc8c:	459b      	cmp	fp, r3
 800dc8e:	db19      	blt.n	800dcc4 <__gethex+0x440>
 800dc90:	6861      	ldr	r1, [r4, #4]
 800dc92:	ee18 0a10 	vmov	r0, s16
 800dc96:	3101      	adds	r1, #1
 800dc98:	f000 f91e 	bl	800ded8 <_Balloc>
 800dc9c:	4681      	mov	r9, r0
 800dc9e:	b918      	cbnz	r0, 800dca8 <__gethex+0x424>
 800dca0:	4b1a      	ldr	r3, [pc, #104]	; (800dd0c <__gethex+0x488>)
 800dca2:	4602      	mov	r2, r0
 800dca4:	2184      	movs	r1, #132	; 0x84
 800dca6:	e6a8      	b.n	800d9fa <__gethex+0x176>
 800dca8:	6922      	ldr	r2, [r4, #16]
 800dcaa:	3202      	adds	r2, #2
 800dcac:	f104 010c 	add.w	r1, r4, #12
 800dcb0:	0092      	lsls	r2, r2, #2
 800dcb2:	300c      	adds	r0, #12
 800dcb4:	f7fd f9b2 	bl	800b01c <memcpy>
 800dcb8:	4621      	mov	r1, r4
 800dcba:	ee18 0a10 	vmov	r0, s16
 800dcbe:	f000 f94b 	bl	800df58 <_Bfree>
 800dcc2:	464c      	mov	r4, r9
 800dcc4:	6923      	ldr	r3, [r4, #16]
 800dcc6:	1c5a      	adds	r2, r3, #1
 800dcc8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dccc:	6122      	str	r2, [r4, #16]
 800dcce:	2201      	movs	r2, #1
 800dcd0:	615a      	str	r2, [r3, #20]
 800dcd2:	e7bb      	b.n	800dc4c <__gethex+0x3c8>
 800dcd4:	6922      	ldr	r2, [r4, #16]
 800dcd6:	455a      	cmp	r2, fp
 800dcd8:	dd0b      	ble.n	800dcf2 <__gethex+0x46e>
 800dcda:	2101      	movs	r1, #1
 800dcdc:	4620      	mov	r0, r4
 800dcde:	f7ff fd6a 	bl	800d7b6 <rshift>
 800dce2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dce6:	3501      	adds	r5, #1
 800dce8:	42ab      	cmp	r3, r5
 800dcea:	f6ff aed0 	blt.w	800da8e <__gethex+0x20a>
 800dcee:	2701      	movs	r7, #1
 800dcf0:	e7c0      	b.n	800dc74 <__gethex+0x3f0>
 800dcf2:	f016 061f 	ands.w	r6, r6, #31
 800dcf6:	d0fa      	beq.n	800dcee <__gethex+0x46a>
 800dcf8:	449a      	add	sl, r3
 800dcfa:	f1c6 0620 	rsb	r6, r6, #32
 800dcfe:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800dd02:	f000 f9df 	bl	800e0c4 <__hi0bits>
 800dd06:	42b0      	cmp	r0, r6
 800dd08:	dbe7      	blt.n	800dcda <__gethex+0x456>
 800dd0a:	e7f0      	b.n	800dcee <__gethex+0x46a>
 800dd0c:	08010011 	.word	0x08010011

0800dd10 <L_shift>:
 800dd10:	f1c2 0208 	rsb	r2, r2, #8
 800dd14:	0092      	lsls	r2, r2, #2
 800dd16:	b570      	push	{r4, r5, r6, lr}
 800dd18:	f1c2 0620 	rsb	r6, r2, #32
 800dd1c:	6843      	ldr	r3, [r0, #4]
 800dd1e:	6804      	ldr	r4, [r0, #0]
 800dd20:	fa03 f506 	lsl.w	r5, r3, r6
 800dd24:	432c      	orrs	r4, r5
 800dd26:	40d3      	lsrs	r3, r2
 800dd28:	6004      	str	r4, [r0, #0]
 800dd2a:	f840 3f04 	str.w	r3, [r0, #4]!
 800dd2e:	4288      	cmp	r0, r1
 800dd30:	d3f4      	bcc.n	800dd1c <L_shift+0xc>
 800dd32:	bd70      	pop	{r4, r5, r6, pc}

0800dd34 <__match>:
 800dd34:	b530      	push	{r4, r5, lr}
 800dd36:	6803      	ldr	r3, [r0, #0]
 800dd38:	3301      	adds	r3, #1
 800dd3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dd3e:	b914      	cbnz	r4, 800dd46 <__match+0x12>
 800dd40:	6003      	str	r3, [r0, #0]
 800dd42:	2001      	movs	r0, #1
 800dd44:	bd30      	pop	{r4, r5, pc}
 800dd46:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd4a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800dd4e:	2d19      	cmp	r5, #25
 800dd50:	bf98      	it	ls
 800dd52:	3220      	addls	r2, #32
 800dd54:	42a2      	cmp	r2, r4
 800dd56:	d0f0      	beq.n	800dd3a <__match+0x6>
 800dd58:	2000      	movs	r0, #0
 800dd5a:	e7f3      	b.n	800dd44 <__match+0x10>

0800dd5c <__hexnan>:
 800dd5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd60:	680b      	ldr	r3, [r1, #0]
 800dd62:	6801      	ldr	r1, [r0, #0]
 800dd64:	115e      	asrs	r6, r3, #5
 800dd66:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800dd6a:	f013 031f 	ands.w	r3, r3, #31
 800dd6e:	b087      	sub	sp, #28
 800dd70:	bf18      	it	ne
 800dd72:	3604      	addne	r6, #4
 800dd74:	2500      	movs	r5, #0
 800dd76:	1f37      	subs	r7, r6, #4
 800dd78:	4682      	mov	sl, r0
 800dd7a:	4690      	mov	r8, r2
 800dd7c:	9301      	str	r3, [sp, #4]
 800dd7e:	f846 5c04 	str.w	r5, [r6, #-4]
 800dd82:	46b9      	mov	r9, r7
 800dd84:	463c      	mov	r4, r7
 800dd86:	9502      	str	r5, [sp, #8]
 800dd88:	46ab      	mov	fp, r5
 800dd8a:	784a      	ldrb	r2, [r1, #1]
 800dd8c:	1c4b      	adds	r3, r1, #1
 800dd8e:	9303      	str	r3, [sp, #12]
 800dd90:	b342      	cbz	r2, 800dde4 <__hexnan+0x88>
 800dd92:	4610      	mov	r0, r2
 800dd94:	9105      	str	r1, [sp, #20]
 800dd96:	9204      	str	r2, [sp, #16]
 800dd98:	f7ff fd5f 	bl	800d85a <__hexdig_fun>
 800dd9c:	2800      	cmp	r0, #0
 800dd9e:	d14f      	bne.n	800de40 <__hexnan+0xe4>
 800dda0:	9a04      	ldr	r2, [sp, #16]
 800dda2:	9905      	ldr	r1, [sp, #20]
 800dda4:	2a20      	cmp	r2, #32
 800dda6:	d818      	bhi.n	800ddda <__hexnan+0x7e>
 800dda8:	9b02      	ldr	r3, [sp, #8]
 800ddaa:	459b      	cmp	fp, r3
 800ddac:	dd13      	ble.n	800ddd6 <__hexnan+0x7a>
 800ddae:	454c      	cmp	r4, r9
 800ddb0:	d206      	bcs.n	800ddc0 <__hexnan+0x64>
 800ddb2:	2d07      	cmp	r5, #7
 800ddb4:	dc04      	bgt.n	800ddc0 <__hexnan+0x64>
 800ddb6:	462a      	mov	r2, r5
 800ddb8:	4649      	mov	r1, r9
 800ddba:	4620      	mov	r0, r4
 800ddbc:	f7ff ffa8 	bl	800dd10 <L_shift>
 800ddc0:	4544      	cmp	r4, r8
 800ddc2:	d950      	bls.n	800de66 <__hexnan+0x10a>
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	f1a4 0904 	sub.w	r9, r4, #4
 800ddca:	f844 3c04 	str.w	r3, [r4, #-4]
 800ddce:	f8cd b008 	str.w	fp, [sp, #8]
 800ddd2:	464c      	mov	r4, r9
 800ddd4:	461d      	mov	r5, r3
 800ddd6:	9903      	ldr	r1, [sp, #12]
 800ddd8:	e7d7      	b.n	800dd8a <__hexnan+0x2e>
 800ddda:	2a29      	cmp	r2, #41	; 0x29
 800dddc:	d156      	bne.n	800de8c <__hexnan+0x130>
 800ddde:	3102      	adds	r1, #2
 800dde0:	f8ca 1000 	str.w	r1, [sl]
 800dde4:	f1bb 0f00 	cmp.w	fp, #0
 800dde8:	d050      	beq.n	800de8c <__hexnan+0x130>
 800ddea:	454c      	cmp	r4, r9
 800ddec:	d206      	bcs.n	800ddfc <__hexnan+0xa0>
 800ddee:	2d07      	cmp	r5, #7
 800ddf0:	dc04      	bgt.n	800ddfc <__hexnan+0xa0>
 800ddf2:	462a      	mov	r2, r5
 800ddf4:	4649      	mov	r1, r9
 800ddf6:	4620      	mov	r0, r4
 800ddf8:	f7ff ff8a 	bl	800dd10 <L_shift>
 800ddfc:	4544      	cmp	r4, r8
 800ddfe:	d934      	bls.n	800de6a <__hexnan+0x10e>
 800de00:	f1a8 0204 	sub.w	r2, r8, #4
 800de04:	4623      	mov	r3, r4
 800de06:	f853 1b04 	ldr.w	r1, [r3], #4
 800de0a:	f842 1f04 	str.w	r1, [r2, #4]!
 800de0e:	429f      	cmp	r7, r3
 800de10:	d2f9      	bcs.n	800de06 <__hexnan+0xaa>
 800de12:	1b3b      	subs	r3, r7, r4
 800de14:	f023 0303 	bic.w	r3, r3, #3
 800de18:	3304      	adds	r3, #4
 800de1a:	3401      	adds	r4, #1
 800de1c:	3e03      	subs	r6, #3
 800de1e:	42b4      	cmp	r4, r6
 800de20:	bf88      	it	hi
 800de22:	2304      	movhi	r3, #4
 800de24:	4443      	add	r3, r8
 800de26:	2200      	movs	r2, #0
 800de28:	f843 2b04 	str.w	r2, [r3], #4
 800de2c:	429f      	cmp	r7, r3
 800de2e:	d2fb      	bcs.n	800de28 <__hexnan+0xcc>
 800de30:	683b      	ldr	r3, [r7, #0]
 800de32:	b91b      	cbnz	r3, 800de3c <__hexnan+0xe0>
 800de34:	4547      	cmp	r7, r8
 800de36:	d127      	bne.n	800de88 <__hexnan+0x12c>
 800de38:	2301      	movs	r3, #1
 800de3a:	603b      	str	r3, [r7, #0]
 800de3c:	2005      	movs	r0, #5
 800de3e:	e026      	b.n	800de8e <__hexnan+0x132>
 800de40:	3501      	adds	r5, #1
 800de42:	2d08      	cmp	r5, #8
 800de44:	f10b 0b01 	add.w	fp, fp, #1
 800de48:	dd06      	ble.n	800de58 <__hexnan+0xfc>
 800de4a:	4544      	cmp	r4, r8
 800de4c:	d9c3      	bls.n	800ddd6 <__hexnan+0x7a>
 800de4e:	2300      	movs	r3, #0
 800de50:	f844 3c04 	str.w	r3, [r4, #-4]
 800de54:	2501      	movs	r5, #1
 800de56:	3c04      	subs	r4, #4
 800de58:	6822      	ldr	r2, [r4, #0]
 800de5a:	f000 000f 	and.w	r0, r0, #15
 800de5e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800de62:	6022      	str	r2, [r4, #0]
 800de64:	e7b7      	b.n	800ddd6 <__hexnan+0x7a>
 800de66:	2508      	movs	r5, #8
 800de68:	e7b5      	b.n	800ddd6 <__hexnan+0x7a>
 800de6a:	9b01      	ldr	r3, [sp, #4]
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d0df      	beq.n	800de30 <__hexnan+0xd4>
 800de70:	f04f 32ff 	mov.w	r2, #4294967295
 800de74:	f1c3 0320 	rsb	r3, r3, #32
 800de78:	fa22 f303 	lsr.w	r3, r2, r3
 800de7c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800de80:	401a      	ands	r2, r3
 800de82:	f846 2c04 	str.w	r2, [r6, #-4]
 800de86:	e7d3      	b.n	800de30 <__hexnan+0xd4>
 800de88:	3f04      	subs	r7, #4
 800de8a:	e7d1      	b.n	800de30 <__hexnan+0xd4>
 800de8c:	2004      	movs	r0, #4
 800de8e:	b007      	add	sp, #28
 800de90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800de94 <_localeconv_r>:
 800de94:	4800      	ldr	r0, [pc, #0]	; (800de98 <_localeconv_r+0x4>)
 800de96:	4770      	bx	lr
 800de98:	200001cc 	.word	0x200001cc

0800de9c <__retarget_lock_init_recursive>:
 800de9c:	4770      	bx	lr

0800de9e <__retarget_lock_acquire_recursive>:
 800de9e:	4770      	bx	lr

0800dea0 <__retarget_lock_release_recursive>:
 800dea0:	4770      	bx	lr
	...

0800dea4 <malloc>:
 800dea4:	4b02      	ldr	r3, [pc, #8]	; (800deb0 <malloc+0xc>)
 800dea6:	4601      	mov	r1, r0
 800dea8:	6818      	ldr	r0, [r3, #0]
 800deaa:	f000 bd2f 	b.w	800e90c <_malloc_r>
 800deae:	bf00      	nop
 800deb0:	20000074 	.word	0x20000074

0800deb4 <__ascii_mbtowc>:
 800deb4:	b082      	sub	sp, #8
 800deb6:	b901      	cbnz	r1, 800deba <__ascii_mbtowc+0x6>
 800deb8:	a901      	add	r1, sp, #4
 800deba:	b142      	cbz	r2, 800dece <__ascii_mbtowc+0x1a>
 800debc:	b14b      	cbz	r3, 800ded2 <__ascii_mbtowc+0x1e>
 800debe:	7813      	ldrb	r3, [r2, #0]
 800dec0:	600b      	str	r3, [r1, #0]
 800dec2:	7812      	ldrb	r2, [r2, #0]
 800dec4:	1e10      	subs	r0, r2, #0
 800dec6:	bf18      	it	ne
 800dec8:	2001      	movne	r0, #1
 800deca:	b002      	add	sp, #8
 800decc:	4770      	bx	lr
 800dece:	4610      	mov	r0, r2
 800ded0:	e7fb      	b.n	800deca <__ascii_mbtowc+0x16>
 800ded2:	f06f 0001 	mvn.w	r0, #1
 800ded6:	e7f8      	b.n	800deca <__ascii_mbtowc+0x16>

0800ded8 <_Balloc>:
 800ded8:	b570      	push	{r4, r5, r6, lr}
 800deda:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800dedc:	4604      	mov	r4, r0
 800dede:	460d      	mov	r5, r1
 800dee0:	b976      	cbnz	r6, 800df00 <_Balloc+0x28>
 800dee2:	2010      	movs	r0, #16
 800dee4:	f7ff ffde 	bl	800dea4 <malloc>
 800dee8:	4602      	mov	r2, r0
 800deea:	6260      	str	r0, [r4, #36]	; 0x24
 800deec:	b920      	cbnz	r0, 800def8 <_Balloc+0x20>
 800deee:	4b18      	ldr	r3, [pc, #96]	; (800df50 <_Balloc+0x78>)
 800def0:	4818      	ldr	r0, [pc, #96]	; (800df54 <_Balloc+0x7c>)
 800def2:	2166      	movs	r1, #102	; 0x66
 800def4:	f7fe fcc2 	bl	800c87c <__assert_func>
 800def8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800defc:	6006      	str	r6, [r0, #0]
 800defe:	60c6      	str	r6, [r0, #12]
 800df00:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800df02:	68f3      	ldr	r3, [r6, #12]
 800df04:	b183      	cbz	r3, 800df28 <_Balloc+0x50>
 800df06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800df08:	68db      	ldr	r3, [r3, #12]
 800df0a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800df0e:	b9b8      	cbnz	r0, 800df40 <_Balloc+0x68>
 800df10:	2101      	movs	r1, #1
 800df12:	fa01 f605 	lsl.w	r6, r1, r5
 800df16:	1d72      	adds	r2, r6, #5
 800df18:	0092      	lsls	r2, r2, #2
 800df1a:	4620      	mov	r0, r4
 800df1c:	f000 fc97 	bl	800e84e <_calloc_r>
 800df20:	b160      	cbz	r0, 800df3c <_Balloc+0x64>
 800df22:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800df26:	e00e      	b.n	800df46 <_Balloc+0x6e>
 800df28:	2221      	movs	r2, #33	; 0x21
 800df2a:	2104      	movs	r1, #4
 800df2c:	4620      	mov	r0, r4
 800df2e:	f000 fc8e 	bl	800e84e <_calloc_r>
 800df32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800df34:	60f0      	str	r0, [r6, #12]
 800df36:	68db      	ldr	r3, [r3, #12]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d1e4      	bne.n	800df06 <_Balloc+0x2e>
 800df3c:	2000      	movs	r0, #0
 800df3e:	bd70      	pop	{r4, r5, r6, pc}
 800df40:	6802      	ldr	r2, [r0, #0]
 800df42:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800df46:	2300      	movs	r3, #0
 800df48:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800df4c:	e7f7      	b.n	800df3e <_Balloc+0x66>
 800df4e:	bf00      	nop
 800df50:	0800fdf0 	.word	0x0800fdf0
 800df54:	08010104 	.word	0x08010104

0800df58 <_Bfree>:
 800df58:	b570      	push	{r4, r5, r6, lr}
 800df5a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800df5c:	4605      	mov	r5, r0
 800df5e:	460c      	mov	r4, r1
 800df60:	b976      	cbnz	r6, 800df80 <_Bfree+0x28>
 800df62:	2010      	movs	r0, #16
 800df64:	f7ff ff9e 	bl	800dea4 <malloc>
 800df68:	4602      	mov	r2, r0
 800df6a:	6268      	str	r0, [r5, #36]	; 0x24
 800df6c:	b920      	cbnz	r0, 800df78 <_Bfree+0x20>
 800df6e:	4b09      	ldr	r3, [pc, #36]	; (800df94 <_Bfree+0x3c>)
 800df70:	4809      	ldr	r0, [pc, #36]	; (800df98 <_Bfree+0x40>)
 800df72:	218a      	movs	r1, #138	; 0x8a
 800df74:	f7fe fc82 	bl	800c87c <__assert_func>
 800df78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800df7c:	6006      	str	r6, [r0, #0]
 800df7e:	60c6      	str	r6, [r0, #12]
 800df80:	b13c      	cbz	r4, 800df92 <_Bfree+0x3a>
 800df82:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800df84:	6862      	ldr	r2, [r4, #4]
 800df86:	68db      	ldr	r3, [r3, #12]
 800df88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800df8c:	6021      	str	r1, [r4, #0]
 800df8e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800df92:	bd70      	pop	{r4, r5, r6, pc}
 800df94:	0800fdf0 	.word	0x0800fdf0
 800df98:	08010104 	.word	0x08010104

0800df9c <__multadd>:
 800df9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfa0:	690e      	ldr	r6, [r1, #16]
 800dfa2:	4607      	mov	r7, r0
 800dfa4:	4698      	mov	r8, r3
 800dfa6:	460c      	mov	r4, r1
 800dfa8:	f101 0014 	add.w	r0, r1, #20
 800dfac:	2300      	movs	r3, #0
 800dfae:	6805      	ldr	r5, [r0, #0]
 800dfb0:	b2a9      	uxth	r1, r5
 800dfb2:	fb02 8101 	mla	r1, r2, r1, r8
 800dfb6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800dfba:	0c2d      	lsrs	r5, r5, #16
 800dfbc:	fb02 c505 	mla	r5, r2, r5, ip
 800dfc0:	b289      	uxth	r1, r1
 800dfc2:	3301      	adds	r3, #1
 800dfc4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800dfc8:	429e      	cmp	r6, r3
 800dfca:	f840 1b04 	str.w	r1, [r0], #4
 800dfce:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800dfd2:	dcec      	bgt.n	800dfae <__multadd+0x12>
 800dfd4:	f1b8 0f00 	cmp.w	r8, #0
 800dfd8:	d022      	beq.n	800e020 <__multadd+0x84>
 800dfda:	68a3      	ldr	r3, [r4, #8]
 800dfdc:	42b3      	cmp	r3, r6
 800dfde:	dc19      	bgt.n	800e014 <__multadd+0x78>
 800dfe0:	6861      	ldr	r1, [r4, #4]
 800dfe2:	4638      	mov	r0, r7
 800dfe4:	3101      	adds	r1, #1
 800dfe6:	f7ff ff77 	bl	800ded8 <_Balloc>
 800dfea:	4605      	mov	r5, r0
 800dfec:	b928      	cbnz	r0, 800dffa <__multadd+0x5e>
 800dfee:	4602      	mov	r2, r0
 800dff0:	4b0d      	ldr	r3, [pc, #52]	; (800e028 <__multadd+0x8c>)
 800dff2:	480e      	ldr	r0, [pc, #56]	; (800e02c <__multadd+0x90>)
 800dff4:	21b5      	movs	r1, #181	; 0xb5
 800dff6:	f7fe fc41 	bl	800c87c <__assert_func>
 800dffa:	6922      	ldr	r2, [r4, #16]
 800dffc:	3202      	adds	r2, #2
 800dffe:	f104 010c 	add.w	r1, r4, #12
 800e002:	0092      	lsls	r2, r2, #2
 800e004:	300c      	adds	r0, #12
 800e006:	f7fd f809 	bl	800b01c <memcpy>
 800e00a:	4621      	mov	r1, r4
 800e00c:	4638      	mov	r0, r7
 800e00e:	f7ff ffa3 	bl	800df58 <_Bfree>
 800e012:	462c      	mov	r4, r5
 800e014:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800e018:	3601      	adds	r6, #1
 800e01a:	f8c3 8014 	str.w	r8, [r3, #20]
 800e01e:	6126      	str	r6, [r4, #16]
 800e020:	4620      	mov	r0, r4
 800e022:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e026:	bf00      	nop
 800e028:	08010011 	.word	0x08010011
 800e02c:	08010104 	.word	0x08010104

0800e030 <__s2b>:
 800e030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e034:	460c      	mov	r4, r1
 800e036:	4615      	mov	r5, r2
 800e038:	461f      	mov	r7, r3
 800e03a:	2209      	movs	r2, #9
 800e03c:	3308      	adds	r3, #8
 800e03e:	4606      	mov	r6, r0
 800e040:	fb93 f3f2 	sdiv	r3, r3, r2
 800e044:	2100      	movs	r1, #0
 800e046:	2201      	movs	r2, #1
 800e048:	429a      	cmp	r2, r3
 800e04a:	db09      	blt.n	800e060 <__s2b+0x30>
 800e04c:	4630      	mov	r0, r6
 800e04e:	f7ff ff43 	bl	800ded8 <_Balloc>
 800e052:	b940      	cbnz	r0, 800e066 <__s2b+0x36>
 800e054:	4602      	mov	r2, r0
 800e056:	4b19      	ldr	r3, [pc, #100]	; (800e0bc <__s2b+0x8c>)
 800e058:	4819      	ldr	r0, [pc, #100]	; (800e0c0 <__s2b+0x90>)
 800e05a:	21ce      	movs	r1, #206	; 0xce
 800e05c:	f7fe fc0e 	bl	800c87c <__assert_func>
 800e060:	0052      	lsls	r2, r2, #1
 800e062:	3101      	adds	r1, #1
 800e064:	e7f0      	b.n	800e048 <__s2b+0x18>
 800e066:	9b08      	ldr	r3, [sp, #32]
 800e068:	6143      	str	r3, [r0, #20]
 800e06a:	2d09      	cmp	r5, #9
 800e06c:	f04f 0301 	mov.w	r3, #1
 800e070:	6103      	str	r3, [r0, #16]
 800e072:	dd16      	ble.n	800e0a2 <__s2b+0x72>
 800e074:	f104 0909 	add.w	r9, r4, #9
 800e078:	46c8      	mov	r8, r9
 800e07a:	442c      	add	r4, r5
 800e07c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e080:	4601      	mov	r1, r0
 800e082:	3b30      	subs	r3, #48	; 0x30
 800e084:	220a      	movs	r2, #10
 800e086:	4630      	mov	r0, r6
 800e088:	f7ff ff88 	bl	800df9c <__multadd>
 800e08c:	45a0      	cmp	r8, r4
 800e08e:	d1f5      	bne.n	800e07c <__s2b+0x4c>
 800e090:	f1a5 0408 	sub.w	r4, r5, #8
 800e094:	444c      	add	r4, r9
 800e096:	1b2d      	subs	r5, r5, r4
 800e098:	1963      	adds	r3, r4, r5
 800e09a:	42bb      	cmp	r3, r7
 800e09c:	db04      	blt.n	800e0a8 <__s2b+0x78>
 800e09e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e0a2:	340a      	adds	r4, #10
 800e0a4:	2509      	movs	r5, #9
 800e0a6:	e7f6      	b.n	800e096 <__s2b+0x66>
 800e0a8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e0ac:	4601      	mov	r1, r0
 800e0ae:	3b30      	subs	r3, #48	; 0x30
 800e0b0:	220a      	movs	r2, #10
 800e0b2:	4630      	mov	r0, r6
 800e0b4:	f7ff ff72 	bl	800df9c <__multadd>
 800e0b8:	e7ee      	b.n	800e098 <__s2b+0x68>
 800e0ba:	bf00      	nop
 800e0bc:	08010011 	.word	0x08010011
 800e0c0:	08010104 	.word	0x08010104

0800e0c4 <__hi0bits>:
 800e0c4:	0c03      	lsrs	r3, r0, #16
 800e0c6:	041b      	lsls	r3, r3, #16
 800e0c8:	b9d3      	cbnz	r3, 800e100 <__hi0bits+0x3c>
 800e0ca:	0400      	lsls	r0, r0, #16
 800e0cc:	2310      	movs	r3, #16
 800e0ce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e0d2:	bf04      	itt	eq
 800e0d4:	0200      	lsleq	r0, r0, #8
 800e0d6:	3308      	addeq	r3, #8
 800e0d8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e0dc:	bf04      	itt	eq
 800e0de:	0100      	lsleq	r0, r0, #4
 800e0e0:	3304      	addeq	r3, #4
 800e0e2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e0e6:	bf04      	itt	eq
 800e0e8:	0080      	lsleq	r0, r0, #2
 800e0ea:	3302      	addeq	r3, #2
 800e0ec:	2800      	cmp	r0, #0
 800e0ee:	db05      	blt.n	800e0fc <__hi0bits+0x38>
 800e0f0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e0f4:	f103 0301 	add.w	r3, r3, #1
 800e0f8:	bf08      	it	eq
 800e0fa:	2320      	moveq	r3, #32
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	4770      	bx	lr
 800e100:	2300      	movs	r3, #0
 800e102:	e7e4      	b.n	800e0ce <__hi0bits+0xa>

0800e104 <__lo0bits>:
 800e104:	6803      	ldr	r3, [r0, #0]
 800e106:	f013 0207 	ands.w	r2, r3, #7
 800e10a:	4601      	mov	r1, r0
 800e10c:	d00b      	beq.n	800e126 <__lo0bits+0x22>
 800e10e:	07da      	lsls	r2, r3, #31
 800e110:	d424      	bmi.n	800e15c <__lo0bits+0x58>
 800e112:	0798      	lsls	r0, r3, #30
 800e114:	bf49      	itett	mi
 800e116:	085b      	lsrmi	r3, r3, #1
 800e118:	089b      	lsrpl	r3, r3, #2
 800e11a:	2001      	movmi	r0, #1
 800e11c:	600b      	strmi	r3, [r1, #0]
 800e11e:	bf5c      	itt	pl
 800e120:	600b      	strpl	r3, [r1, #0]
 800e122:	2002      	movpl	r0, #2
 800e124:	4770      	bx	lr
 800e126:	b298      	uxth	r0, r3
 800e128:	b9b0      	cbnz	r0, 800e158 <__lo0bits+0x54>
 800e12a:	0c1b      	lsrs	r3, r3, #16
 800e12c:	2010      	movs	r0, #16
 800e12e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e132:	bf04      	itt	eq
 800e134:	0a1b      	lsreq	r3, r3, #8
 800e136:	3008      	addeq	r0, #8
 800e138:	071a      	lsls	r2, r3, #28
 800e13a:	bf04      	itt	eq
 800e13c:	091b      	lsreq	r3, r3, #4
 800e13e:	3004      	addeq	r0, #4
 800e140:	079a      	lsls	r2, r3, #30
 800e142:	bf04      	itt	eq
 800e144:	089b      	lsreq	r3, r3, #2
 800e146:	3002      	addeq	r0, #2
 800e148:	07da      	lsls	r2, r3, #31
 800e14a:	d403      	bmi.n	800e154 <__lo0bits+0x50>
 800e14c:	085b      	lsrs	r3, r3, #1
 800e14e:	f100 0001 	add.w	r0, r0, #1
 800e152:	d005      	beq.n	800e160 <__lo0bits+0x5c>
 800e154:	600b      	str	r3, [r1, #0]
 800e156:	4770      	bx	lr
 800e158:	4610      	mov	r0, r2
 800e15a:	e7e8      	b.n	800e12e <__lo0bits+0x2a>
 800e15c:	2000      	movs	r0, #0
 800e15e:	4770      	bx	lr
 800e160:	2020      	movs	r0, #32
 800e162:	4770      	bx	lr

0800e164 <__i2b>:
 800e164:	b510      	push	{r4, lr}
 800e166:	460c      	mov	r4, r1
 800e168:	2101      	movs	r1, #1
 800e16a:	f7ff feb5 	bl	800ded8 <_Balloc>
 800e16e:	4602      	mov	r2, r0
 800e170:	b928      	cbnz	r0, 800e17e <__i2b+0x1a>
 800e172:	4b05      	ldr	r3, [pc, #20]	; (800e188 <__i2b+0x24>)
 800e174:	4805      	ldr	r0, [pc, #20]	; (800e18c <__i2b+0x28>)
 800e176:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e17a:	f7fe fb7f 	bl	800c87c <__assert_func>
 800e17e:	2301      	movs	r3, #1
 800e180:	6144      	str	r4, [r0, #20]
 800e182:	6103      	str	r3, [r0, #16]
 800e184:	bd10      	pop	{r4, pc}
 800e186:	bf00      	nop
 800e188:	08010011 	.word	0x08010011
 800e18c:	08010104 	.word	0x08010104

0800e190 <__multiply>:
 800e190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e194:	4614      	mov	r4, r2
 800e196:	690a      	ldr	r2, [r1, #16]
 800e198:	6923      	ldr	r3, [r4, #16]
 800e19a:	429a      	cmp	r2, r3
 800e19c:	bfb8      	it	lt
 800e19e:	460b      	movlt	r3, r1
 800e1a0:	460d      	mov	r5, r1
 800e1a2:	bfbc      	itt	lt
 800e1a4:	4625      	movlt	r5, r4
 800e1a6:	461c      	movlt	r4, r3
 800e1a8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800e1ac:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e1b0:	68ab      	ldr	r3, [r5, #8]
 800e1b2:	6869      	ldr	r1, [r5, #4]
 800e1b4:	eb0a 0709 	add.w	r7, sl, r9
 800e1b8:	42bb      	cmp	r3, r7
 800e1ba:	b085      	sub	sp, #20
 800e1bc:	bfb8      	it	lt
 800e1be:	3101      	addlt	r1, #1
 800e1c0:	f7ff fe8a 	bl	800ded8 <_Balloc>
 800e1c4:	b930      	cbnz	r0, 800e1d4 <__multiply+0x44>
 800e1c6:	4602      	mov	r2, r0
 800e1c8:	4b42      	ldr	r3, [pc, #264]	; (800e2d4 <__multiply+0x144>)
 800e1ca:	4843      	ldr	r0, [pc, #268]	; (800e2d8 <__multiply+0x148>)
 800e1cc:	f240 115d 	movw	r1, #349	; 0x15d
 800e1d0:	f7fe fb54 	bl	800c87c <__assert_func>
 800e1d4:	f100 0614 	add.w	r6, r0, #20
 800e1d8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800e1dc:	4633      	mov	r3, r6
 800e1de:	2200      	movs	r2, #0
 800e1e0:	4543      	cmp	r3, r8
 800e1e2:	d31e      	bcc.n	800e222 <__multiply+0x92>
 800e1e4:	f105 0c14 	add.w	ip, r5, #20
 800e1e8:	f104 0314 	add.w	r3, r4, #20
 800e1ec:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800e1f0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800e1f4:	9202      	str	r2, [sp, #8]
 800e1f6:	ebac 0205 	sub.w	r2, ip, r5
 800e1fa:	3a15      	subs	r2, #21
 800e1fc:	f022 0203 	bic.w	r2, r2, #3
 800e200:	3204      	adds	r2, #4
 800e202:	f105 0115 	add.w	r1, r5, #21
 800e206:	458c      	cmp	ip, r1
 800e208:	bf38      	it	cc
 800e20a:	2204      	movcc	r2, #4
 800e20c:	9201      	str	r2, [sp, #4]
 800e20e:	9a02      	ldr	r2, [sp, #8]
 800e210:	9303      	str	r3, [sp, #12]
 800e212:	429a      	cmp	r2, r3
 800e214:	d808      	bhi.n	800e228 <__multiply+0x98>
 800e216:	2f00      	cmp	r7, #0
 800e218:	dc55      	bgt.n	800e2c6 <__multiply+0x136>
 800e21a:	6107      	str	r7, [r0, #16]
 800e21c:	b005      	add	sp, #20
 800e21e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e222:	f843 2b04 	str.w	r2, [r3], #4
 800e226:	e7db      	b.n	800e1e0 <__multiply+0x50>
 800e228:	f8b3 a000 	ldrh.w	sl, [r3]
 800e22c:	f1ba 0f00 	cmp.w	sl, #0
 800e230:	d020      	beq.n	800e274 <__multiply+0xe4>
 800e232:	f105 0e14 	add.w	lr, r5, #20
 800e236:	46b1      	mov	r9, r6
 800e238:	2200      	movs	r2, #0
 800e23a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800e23e:	f8d9 b000 	ldr.w	fp, [r9]
 800e242:	b2a1      	uxth	r1, r4
 800e244:	fa1f fb8b 	uxth.w	fp, fp
 800e248:	fb0a b101 	mla	r1, sl, r1, fp
 800e24c:	4411      	add	r1, r2
 800e24e:	f8d9 2000 	ldr.w	r2, [r9]
 800e252:	0c24      	lsrs	r4, r4, #16
 800e254:	0c12      	lsrs	r2, r2, #16
 800e256:	fb0a 2404 	mla	r4, sl, r4, r2
 800e25a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800e25e:	b289      	uxth	r1, r1
 800e260:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800e264:	45f4      	cmp	ip, lr
 800e266:	f849 1b04 	str.w	r1, [r9], #4
 800e26a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800e26e:	d8e4      	bhi.n	800e23a <__multiply+0xaa>
 800e270:	9901      	ldr	r1, [sp, #4]
 800e272:	5072      	str	r2, [r6, r1]
 800e274:	9a03      	ldr	r2, [sp, #12]
 800e276:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e27a:	3304      	adds	r3, #4
 800e27c:	f1b9 0f00 	cmp.w	r9, #0
 800e280:	d01f      	beq.n	800e2c2 <__multiply+0x132>
 800e282:	6834      	ldr	r4, [r6, #0]
 800e284:	f105 0114 	add.w	r1, r5, #20
 800e288:	46b6      	mov	lr, r6
 800e28a:	f04f 0a00 	mov.w	sl, #0
 800e28e:	880a      	ldrh	r2, [r1, #0]
 800e290:	f8be b002 	ldrh.w	fp, [lr, #2]
 800e294:	fb09 b202 	mla	r2, r9, r2, fp
 800e298:	4492      	add	sl, r2
 800e29a:	b2a4      	uxth	r4, r4
 800e29c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800e2a0:	f84e 4b04 	str.w	r4, [lr], #4
 800e2a4:	f851 4b04 	ldr.w	r4, [r1], #4
 800e2a8:	f8be 2000 	ldrh.w	r2, [lr]
 800e2ac:	0c24      	lsrs	r4, r4, #16
 800e2ae:	fb09 2404 	mla	r4, r9, r4, r2
 800e2b2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800e2b6:	458c      	cmp	ip, r1
 800e2b8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e2bc:	d8e7      	bhi.n	800e28e <__multiply+0xfe>
 800e2be:	9a01      	ldr	r2, [sp, #4]
 800e2c0:	50b4      	str	r4, [r6, r2]
 800e2c2:	3604      	adds	r6, #4
 800e2c4:	e7a3      	b.n	800e20e <__multiply+0x7e>
 800e2c6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d1a5      	bne.n	800e21a <__multiply+0x8a>
 800e2ce:	3f01      	subs	r7, #1
 800e2d0:	e7a1      	b.n	800e216 <__multiply+0x86>
 800e2d2:	bf00      	nop
 800e2d4:	08010011 	.word	0x08010011
 800e2d8:	08010104 	.word	0x08010104

0800e2dc <__pow5mult>:
 800e2dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e2e0:	4615      	mov	r5, r2
 800e2e2:	f012 0203 	ands.w	r2, r2, #3
 800e2e6:	4606      	mov	r6, r0
 800e2e8:	460f      	mov	r7, r1
 800e2ea:	d007      	beq.n	800e2fc <__pow5mult+0x20>
 800e2ec:	4c25      	ldr	r4, [pc, #148]	; (800e384 <__pow5mult+0xa8>)
 800e2ee:	3a01      	subs	r2, #1
 800e2f0:	2300      	movs	r3, #0
 800e2f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e2f6:	f7ff fe51 	bl	800df9c <__multadd>
 800e2fa:	4607      	mov	r7, r0
 800e2fc:	10ad      	asrs	r5, r5, #2
 800e2fe:	d03d      	beq.n	800e37c <__pow5mult+0xa0>
 800e300:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e302:	b97c      	cbnz	r4, 800e324 <__pow5mult+0x48>
 800e304:	2010      	movs	r0, #16
 800e306:	f7ff fdcd 	bl	800dea4 <malloc>
 800e30a:	4602      	mov	r2, r0
 800e30c:	6270      	str	r0, [r6, #36]	; 0x24
 800e30e:	b928      	cbnz	r0, 800e31c <__pow5mult+0x40>
 800e310:	4b1d      	ldr	r3, [pc, #116]	; (800e388 <__pow5mult+0xac>)
 800e312:	481e      	ldr	r0, [pc, #120]	; (800e38c <__pow5mult+0xb0>)
 800e314:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e318:	f7fe fab0 	bl	800c87c <__assert_func>
 800e31c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e320:	6004      	str	r4, [r0, #0]
 800e322:	60c4      	str	r4, [r0, #12]
 800e324:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e328:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e32c:	b94c      	cbnz	r4, 800e342 <__pow5mult+0x66>
 800e32e:	f240 2171 	movw	r1, #625	; 0x271
 800e332:	4630      	mov	r0, r6
 800e334:	f7ff ff16 	bl	800e164 <__i2b>
 800e338:	2300      	movs	r3, #0
 800e33a:	f8c8 0008 	str.w	r0, [r8, #8]
 800e33e:	4604      	mov	r4, r0
 800e340:	6003      	str	r3, [r0, #0]
 800e342:	f04f 0900 	mov.w	r9, #0
 800e346:	07eb      	lsls	r3, r5, #31
 800e348:	d50a      	bpl.n	800e360 <__pow5mult+0x84>
 800e34a:	4639      	mov	r1, r7
 800e34c:	4622      	mov	r2, r4
 800e34e:	4630      	mov	r0, r6
 800e350:	f7ff ff1e 	bl	800e190 <__multiply>
 800e354:	4639      	mov	r1, r7
 800e356:	4680      	mov	r8, r0
 800e358:	4630      	mov	r0, r6
 800e35a:	f7ff fdfd 	bl	800df58 <_Bfree>
 800e35e:	4647      	mov	r7, r8
 800e360:	106d      	asrs	r5, r5, #1
 800e362:	d00b      	beq.n	800e37c <__pow5mult+0xa0>
 800e364:	6820      	ldr	r0, [r4, #0]
 800e366:	b938      	cbnz	r0, 800e378 <__pow5mult+0x9c>
 800e368:	4622      	mov	r2, r4
 800e36a:	4621      	mov	r1, r4
 800e36c:	4630      	mov	r0, r6
 800e36e:	f7ff ff0f 	bl	800e190 <__multiply>
 800e372:	6020      	str	r0, [r4, #0]
 800e374:	f8c0 9000 	str.w	r9, [r0]
 800e378:	4604      	mov	r4, r0
 800e37a:	e7e4      	b.n	800e346 <__pow5mult+0x6a>
 800e37c:	4638      	mov	r0, r7
 800e37e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e382:	bf00      	nop
 800e384:	08010258 	.word	0x08010258
 800e388:	0800fdf0 	.word	0x0800fdf0
 800e38c:	08010104 	.word	0x08010104

0800e390 <__lshift>:
 800e390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e394:	460c      	mov	r4, r1
 800e396:	6849      	ldr	r1, [r1, #4]
 800e398:	6923      	ldr	r3, [r4, #16]
 800e39a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e39e:	68a3      	ldr	r3, [r4, #8]
 800e3a0:	4607      	mov	r7, r0
 800e3a2:	4691      	mov	r9, r2
 800e3a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e3a8:	f108 0601 	add.w	r6, r8, #1
 800e3ac:	42b3      	cmp	r3, r6
 800e3ae:	db0b      	blt.n	800e3c8 <__lshift+0x38>
 800e3b0:	4638      	mov	r0, r7
 800e3b2:	f7ff fd91 	bl	800ded8 <_Balloc>
 800e3b6:	4605      	mov	r5, r0
 800e3b8:	b948      	cbnz	r0, 800e3ce <__lshift+0x3e>
 800e3ba:	4602      	mov	r2, r0
 800e3bc:	4b28      	ldr	r3, [pc, #160]	; (800e460 <__lshift+0xd0>)
 800e3be:	4829      	ldr	r0, [pc, #164]	; (800e464 <__lshift+0xd4>)
 800e3c0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e3c4:	f7fe fa5a 	bl	800c87c <__assert_func>
 800e3c8:	3101      	adds	r1, #1
 800e3ca:	005b      	lsls	r3, r3, #1
 800e3cc:	e7ee      	b.n	800e3ac <__lshift+0x1c>
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	f100 0114 	add.w	r1, r0, #20
 800e3d4:	f100 0210 	add.w	r2, r0, #16
 800e3d8:	4618      	mov	r0, r3
 800e3da:	4553      	cmp	r3, sl
 800e3dc:	db33      	blt.n	800e446 <__lshift+0xb6>
 800e3de:	6920      	ldr	r0, [r4, #16]
 800e3e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e3e4:	f104 0314 	add.w	r3, r4, #20
 800e3e8:	f019 091f 	ands.w	r9, r9, #31
 800e3ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e3f0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e3f4:	d02b      	beq.n	800e44e <__lshift+0xbe>
 800e3f6:	f1c9 0e20 	rsb	lr, r9, #32
 800e3fa:	468a      	mov	sl, r1
 800e3fc:	2200      	movs	r2, #0
 800e3fe:	6818      	ldr	r0, [r3, #0]
 800e400:	fa00 f009 	lsl.w	r0, r0, r9
 800e404:	4302      	orrs	r2, r0
 800e406:	f84a 2b04 	str.w	r2, [sl], #4
 800e40a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e40e:	459c      	cmp	ip, r3
 800e410:	fa22 f20e 	lsr.w	r2, r2, lr
 800e414:	d8f3      	bhi.n	800e3fe <__lshift+0x6e>
 800e416:	ebac 0304 	sub.w	r3, ip, r4
 800e41a:	3b15      	subs	r3, #21
 800e41c:	f023 0303 	bic.w	r3, r3, #3
 800e420:	3304      	adds	r3, #4
 800e422:	f104 0015 	add.w	r0, r4, #21
 800e426:	4584      	cmp	ip, r0
 800e428:	bf38      	it	cc
 800e42a:	2304      	movcc	r3, #4
 800e42c:	50ca      	str	r2, [r1, r3]
 800e42e:	b10a      	cbz	r2, 800e434 <__lshift+0xa4>
 800e430:	f108 0602 	add.w	r6, r8, #2
 800e434:	3e01      	subs	r6, #1
 800e436:	4638      	mov	r0, r7
 800e438:	612e      	str	r6, [r5, #16]
 800e43a:	4621      	mov	r1, r4
 800e43c:	f7ff fd8c 	bl	800df58 <_Bfree>
 800e440:	4628      	mov	r0, r5
 800e442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e446:	f842 0f04 	str.w	r0, [r2, #4]!
 800e44a:	3301      	adds	r3, #1
 800e44c:	e7c5      	b.n	800e3da <__lshift+0x4a>
 800e44e:	3904      	subs	r1, #4
 800e450:	f853 2b04 	ldr.w	r2, [r3], #4
 800e454:	f841 2f04 	str.w	r2, [r1, #4]!
 800e458:	459c      	cmp	ip, r3
 800e45a:	d8f9      	bhi.n	800e450 <__lshift+0xc0>
 800e45c:	e7ea      	b.n	800e434 <__lshift+0xa4>
 800e45e:	bf00      	nop
 800e460:	08010011 	.word	0x08010011
 800e464:	08010104 	.word	0x08010104

0800e468 <__mcmp>:
 800e468:	b530      	push	{r4, r5, lr}
 800e46a:	6902      	ldr	r2, [r0, #16]
 800e46c:	690c      	ldr	r4, [r1, #16]
 800e46e:	1b12      	subs	r2, r2, r4
 800e470:	d10e      	bne.n	800e490 <__mcmp+0x28>
 800e472:	f100 0314 	add.w	r3, r0, #20
 800e476:	3114      	adds	r1, #20
 800e478:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e47c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e480:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e484:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e488:	42a5      	cmp	r5, r4
 800e48a:	d003      	beq.n	800e494 <__mcmp+0x2c>
 800e48c:	d305      	bcc.n	800e49a <__mcmp+0x32>
 800e48e:	2201      	movs	r2, #1
 800e490:	4610      	mov	r0, r2
 800e492:	bd30      	pop	{r4, r5, pc}
 800e494:	4283      	cmp	r3, r0
 800e496:	d3f3      	bcc.n	800e480 <__mcmp+0x18>
 800e498:	e7fa      	b.n	800e490 <__mcmp+0x28>
 800e49a:	f04f 32ff 	mov.w	r2, #4294967295
 800e49e:	e7f7      	b.n	800e490 <__mcmp+0x28>

0800e4a0 <__mdiff>:
 800e4a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4a4:	460c      	mov	r4, r1
 800e4a6:	4606      	mov	r6, r0
 800e4a8:	4611      	mov	r1, r2
 800e4aa:	4620      	mov	r0, r4
 800e4ac:	4617      	mov	r7, r2
 800e4ae:	f7ff ffdb 	bl	800e468 <__mcmp>
 800e4b2:	1e05      	subs	r5, r0, #0
 800e4b4:	d110      	bne.n	800e4d8 <__mdiff+0x38>
 800e4b6:	4629      	mov	r1, r5
 800e4b8:	4630      	mov	r0, r6
 800e4ba:	f7ff fd0d 	bl	800ded8 <_Balloc>
 800e4be:	b930      	cbnz	r0, 800e4ce <__mdiff+0x2e>
 800e4c0:	4b39      	ldr	r3, [pc, #228]	; (800e5a8 <__mdiff+0x108>)
 800e4c2:	4602      	mov	r2, r0
 800e4c4:	f240 2132 	movw	r1, #562	; 0x232
 800e4c8:	4838      	ldr	r0, [pc, #224]	; (800e5ac <__mdiff+0x10c>)
 800e4ca:	f7fe f9d7 	bl	800c87c <__assert_func>
 800e4ce:	2301      	movs	r3, #1
 800e4d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e4d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4d8:	bfa4      	itt	ge
 800e4da:	463b      	movge	r3, r7
 800e4dc:	4627      	movge	r7, r4
 800e4de:	4630      	mov	r0, r6
 800e4e0:	6879      	ldr	r1, [r7, #4]
 800e4e2:	bfa6      	itte	ge
 800e4e4:	461c      	movge	r4, r3
 800e4e6:	2500      	movge	r5, #0
 800e4e8:	2501      	movlt	r5, #1
 800e4ea:	f7ff fcf5 	bl	800ded8 <_Balloc>
 800e4ee:	b920      	cbnz	r0, 800e4fa <__mdiff+0x5a>
 800e4f0:	4b2d      	ldr	r3, [pc, #180]	; (800e5a8 <__mdiff+0x108>)
 800e4f2:	4602      	mov	r2, r0
 800e4f4:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e4f8:	e7e6      	b.n	800e4c8 <__mdiff+0x28>
 800e4fa:	693e      	ldr	r6, [r7, #16]
 800e4fc:	60c5      	str	r5, [r0, #12]
 800e4fe:	6925      	ldr	r5, [r4, #16]
 800e500:	f107 0114 	add.w	r1, r7, #20
 800e504:	f104 0914 	add.w	r9, r4, #20
 800e508:	f100 0e14 	add.w	lr, r0, #20
 800e50c:	f107 0210 	add.w	r2, r7, #16
 800e510:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800e514:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800e518:	46f2      	mov	sl, lr
 800e51a:	2700      	movs	r7, #0
 800e51c:	f859 3b04 	ldr.w	r3, [r9], #4
 800e520:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e524:	fa1f f883 	uxth.w	r8, r3
 800e528:	fa17 f78b 	uxtah	r7, r7, fp
 800e52c:	0c1b      	lsrs	r3, r3, #16
 800e52e:	eba7 0808 	sub.w	r8, r7, r8
 800e532:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e536:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e53a:	fa1f f888 	uxth.w	r8, r8
 800e53e:	141f      	asrs	r7, r3, #16
 800e540:	454d      	cmp	r5, r9
 800e542:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e546:	f84a 3b04 	str.w	r3, [sl], #4
 800e54a:	d8e7      	bhi.n	800e51c <__mdiff+0x7c>
 800e54c:	1b2b      	subs	r3, r5, r4
 800e54e:	3b15      	subs	r3, #21
 800e550:	f023 0303 	bic.w	r3, r3, #3
 800e554:	3304      	adds	r3, #4
 800e556:	3415      	adds	r4, #21
 800e558:	42a5      	cmp	r5, r4
 800e55a:	bf38      	it	cc
 800e55c:	2304      	movcc	r3, #4
 800e55e:	4419      	add	r1, r3
 800e560:	4473      	add	r3, lr
 800e562:	469e      	mov	lr, r3
 800e564:	460d      	mov	r5, r1
 800e566:	4565      	cmp	r5, ip
 800e568:	d30e      	bcc.n	800e588 <__mdiff+0xe8>
 800e56a:	f10c 0203 	add.w	r2, ip, #3
 800e56e:	1a52      	subs	r2, r2, r1
 800e570:	f022 0203 	bic.w	r2, r2, #3
 800e574:	3903      	subs	r1, #3
 800e576:	458c      	cmp	ip, r1
 800e578:	bf38      	it	cc
 800e57a:	2200      	movcc	r2, #0
 800e57c:	441a      	add	r2, r3
 800e57e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e582:	b17b      	cbz	r3, 800e5a4 <__mdiff+0x104>
 800e584:	6106      	str	r6, [r0, #16]
 800e586:	e7a5      	b.n	800e4d4 <__mdiff+0x34>
 800e588:	f855 8b04 	ldr.w	r8, [r5], #4
 800e58c:	fa17 f488 	uxtah	r4, r7, r8
 800e590:	1422      	asrs	r2, r4, #16
 800e592:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800e596:	b2a4      	uxth	r4, r4
 800e598:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800e59c:	f84e 4b04 	str.w	r4, [lr], #4
 800e5a0:	1417      	asrs	r7, r2, #16
 800e5a2:	e7e0      	b.n	800e566 <__mdiff+0xc6>
 800e5a4:	3e01      	subs	r6, #1
 800e5a6:	e7ea      	b.n	800e57e <__mdiff+0xde>
 800e5a8:	08010011 	.word	0x08010011
 800e5ac:	08010104 	.word	0x08010104

0800e5b0 <__ulp>:
 800e5b0:	b082      	sub	sp, #8
 800e5b2:	ed8d 0b00 	vstr	d0, [sp]
 800e5b6:	9b01      	ldr	r3, [sp, #4]
 800e5b8:	4912      	ldr	r1, [pc, #72]	; (800e604 <__ulp+0x54>)
 800e5ba:	4019      	ands	r1, r3
 800e5bc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800e5c0:	2900      	cmp	r1, #0
 800e5c2:	dd05      	ble.n	800e5d0 <__ulp+0x20>
 800e5c4:	2200      	movs	r2, #0
 800e5c6:	460b      	mov	r3, r1
 800e5c8:	ec43 2b10 	vmov	d0, r2, r3
 800e5cc:	b002      	add	sp, #8
 800e5ce:	4770      	bx	lr
 800e5d0:	4249      	negs	r1, r1
 800e5d2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800e5d6:	ea4f 5021 	mov.w	r0, r1, asr #20
 800e5da:	f04f 0200 	mov.w	r2, #0
 800e5de:	f04f 0300 	mov.w	r3, #0
 800e5e2:	da04      	bge.n	800e5ee <__ulp+0x3e>
 800e5e4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800e5e8:	fa41 f300 	asr.w	r3, r1, r0
 800e5ec:	e7ec      	b.n	800e5c8 <__ulp+0x18>
 800e5ee:	f1a0 0114 	sub.w	r1, r0, #20
 800e5f2:	291e      	cmp	r1, #30
 800e5f4:	bfda      	itte	le
 800e5f6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800e5fa:	fa20 f101 	lsrle.w	r1, r0, r1
 800e5fe:	2101      	movgt	r1, #1
 800e600:	460a      	mov	r2, r1
 800e602:	e7e1      	b.n	800e5c8 <__ulp+0x18>
 800e604:	7ff00000 	.word	0x7ff00000

0800e608 <__b2d>:
 800e608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e60a:	6905      	ldr	r5, [r0, #16]
 800e60c:	f100 0714 	add.w	r7, r0, #20
 800e610:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800e614:	1f2e      	subs	r6, r5, #4
 800e616:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800e61a:	4620      	mov	r0, r4
 800e61c:	f7ff fd52 	bl	800e0c4 <__hi0bits>
 800e620:	f1c0 0320 	rsb	r3, r0, #32
 800e624:	280a      	cmp	r0, #10
 800e626:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800e6a4 <__b2d+0x9c>
 800e62a:	600b      	str	r3, [r1, #0]
 800e62c:	dc14      	bgt.n	800e658 <__b2d+0x50>
 800e62e:	f1c0 0e0b 	rsb	lr, r0, #11
 800e632:	fa24 f10e 	lsr.w	r1, r4, lr
 800e636:	42b7      	cmp	r7, r6
 800e638:	ea41 030c 	orr.w	r3, r1, ip
 800e63c:	bf34      	ite	cc
 800e63e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e642:	2100      	movcs	r1, #0
 800e644:	3015      	adds	r0, #21
 800e646:	fa04 f000 	lsl.w	r0, r4, r0
 800e64a:	fa21 f10e 	lsr.w	r1, r1, lr
 800e64e:	ea40 0201 	orr.w	r2, r0, r1
 800e652:	ec43 2b10 	vmov	d0, r2, r3
 800e656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e658:	42b7      	cmp	r7, r6
 800e65a:	bf3a      	itte	cc
 800e65c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e660:	f1a5 0608 	subcc.w	r6, r5, #8
 800e664:	2100      	movcs	r1, #0
 800e666:	380b      	subs	r0, #11
 800e668:	d017      	beq.n	800e69a <__b2d+0x92>
 800e66a:	f1c0 0c20 	rsb	ip, r0, #32
 800e66e:	fa04 f500 	lsl.w	r5, r4, r0
 800e672:	42be      	cmp	r6, r7
 800e674:	fa21 f40c 	lsr.w	r4, r1, ip
 800e678:	ea45 0504 	orr.w	r5, r5, r4
 800e67c:	bf8c      	ite	hi
 800e67e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800e682:	2400      	movls	r4, #0
 800e684:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800e688:	fa01 f000 	lsl.w	r0, r1, r0
 800e68c:	fa24 f40c 	lsr.w	r4, r4, ip
 800e690:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e694:	ea40 0204 	orr.w	r2, r0, r4
 800e698:	e7db      	b.n	800e652 <__b2d+0x4a>
 800e69a:	ea44 030c 	orr.w	r3, r4, ip
 800e69e:	460a      	mov	r2, r1
 800e6a0:	e7d7      	b.n	800e652 <__b2d+0x4a>
 800e6a2:	bf00      	nop
 800e6a4:	3ff00000 	.word	0x3ff00000

0800e6a8 <__d2b>:
 800e6a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e6ac:	4689      	mov	r9, r1
 800e6ae:	2101      	movs	r1, #1
 800e6b0:	ec57 6b10 	vmov	r6, r7, d0
 800e6b4:	4690      	mov	r8, r2
 800e6b6:	f7ff fc0f 	bl	800ded8 <_Balloc>
 800e6ba:	4604      	mov	r4, r0
 800e6bc:	b930      	cbnz	r0, 800e6cc <__d2b+0x24>
 800e6be:	4602      	mov	r2, r0
 800e6c0:	4b25      	ldr	r3, [pc, #148]	; (800e758 <__d2b+0xb0>)
 800e6c2:	4826      	ldr	r0, [pc, #152]	; (800e75c <__d2b+0xb4>)
 800e6c4:	f240 310a 	movw	r1, #778	; 0x30a
 800e6c8:	f7fe f8d8 	bl	800c87c <__assert_func>
 800e6cc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e6d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e6d4:	bb35      	cbnz	r5, 800e724 <__d2b+0x7c>
 800e6d6:	2e00      	cmp	r6, #0
 800e6d8:	9301      	str	r3, [sp, #4]
 800e6da:	d028      	beq.n	800e72e <__d2b+0x86>
 800e6dc:	4668      	mov	r0, sp
 800e6de:	9600      	str	r6, [sp, #0]
 800e6e0:	f7ff fd10 	bl	800e104 <__lo0bits>
 800e6e4:	9900      	ldr	r1, [sp, #0]
 800e6e6:	b300      	cbz	r0, 800e72a <__d2b+0x82>
 800e6e8:	9a01      	ldr	r2, [sp, #4]
 800e6ea:	f1c0 0320 	rsb	r3, r0, #32
 800e6ee:	fa02 f303 	lsl.w	r3, r2, r3
 800e6f2:	430b      	orrs	r3, r1
 800e6f4:	40c2      	lsrs	r2, r0
 800e6f6:	6163      	str	r3, [r4, #20]
 800e6f8:	9201      	str	r2, [sp, #4]
 800e6fa:	9b01      	ldr	r3, [sp, #4]
 800e6fc:	61a3      	str	r3, [r4, #24]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	bf14      	ite	ne
 800e702:	2202      	movne	r2, #2
 800e704:	2201      	moveq	r2, #1
 800e706:	6122      	str	r2, [r4, #16]
 800e708:	b1d5      	cbz	r5, 800e740 <__d2b+0x98>
 800e70a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e70e:	4405      	add	r5, r0
 800e710:	f8c9 5000 	str.w	r5, [r9]
 800e714:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e718:	f8c8 0000 	str.w	r0, [r8]
 800e71c:	4620      	mov	r0, r4
 800e71e:	b003      	add	sp, #12
 800e720:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e724:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e728:	e7d5      	b.n	800e6d6 <__d2b+0x2e>
 800e72a:	6161      	str	r1, [r4, #20]
 800e72c:	e7e5      	b.n	800e6fa <__d2b+0x52>
 800e72e:	a801      	add	r0, sp, #4
 800e730:	f7ff fce8 	bl	800e104 <__lo0bits>
 800e734:	9b01      	ldr	r3, [sp, #4]
 800e736:	6163      	str	r3, [r4, #20]
 800e738:	2201      	movs	r2, #1
 800e73a:	6122      	str	r2, [r4, #16]
 800e73c:	3020      	adds	r0, #32
 800e73e:	e7e3      	b.n	800e708 <__d2b+0x60>
 800e740:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e744:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e748:	f8c9 0000 	str.w	r0, [r9]
 800e74c:	6918      	ldr	r0, [r3, #16]
 800e74e:	f7ff fcb9 	bl	800e0c4 <__hi0bits>
 800e752:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e756:	e7df      	b.n	800e718 <__d2b+0x70>
 800e758:	08010011 	.word	0x08010011
 800e75c:	08010104 	.word	0x08010104

0800e760 <__ratio>:
 800e760:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e764:	4688      	mov	r8, r1
 800e766:	4669      	mov	r1, sp
 800e768:	4681      	mov	r9, r0
 800e76a:	f7ff ff4d 	bl	800e608 <__b2d>
 800e76e:	a901      	add	r1, sp, #4
 800e770:	4640      	mov	r0, r8
 800e772:	ec55 4b10 	vmov	r4, r5, d0
 800e776:	f7ff ff47 	bl	800e608 <__b2d>
 800e77a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e77e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e782:	eba3 0c02 	sub.w	ip, r3, r2
 800e786:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e78a:	1a9b      	subs	r3, r3, r2
 800e78c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e790:	ec51 0b10 	vmov	r0, r1, d0
 800e794:	2b00      	cmp	r3, #0
 800e796:	bfd6      	itet	le
 800e798:	460a      	movle	r2, r1
 800e79a:	462a      	movgt	r2, r5
 800e79c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e7a0:	468b      	mov	fp, r1
 800e7a2:	462f      	mov	r7, r5
 800e7a4:	bfd4      	ite	le
 800e7a6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800e7aa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e7ae:	4620      	mov	r0, r4
 800e7b0:	ee10 2a10 	vmov	r2, s0
 800e7b4:	465b      	mov	r3, fp
 800e7b6:	4639      	mov	r1, r7
 800e7b8:	f7f2 f850 	bl	800085c <__aeabi_ddiv>
 800e7bc:	ec41 0b10 	vmov	d0, r0, r1
 800e7c0:	b003      	add	sp, #12
 800e7c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e7c6 <__copybits>:
 800e7c6:	3901      	subs	r1, #1
 800e7c8:	b570      	push	{r4, r5, r6, lr}
 800e7ca:	1149      	asrs	r1, r1, #5
 800e7cc:	6914      	ldr	r4, [r2, #16]
 800e7ce:	3101      	adds	r1, #1
 800e7d0:	f102 0314 	add.w	r3, r2, #20
 800e7d4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e7d8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e7dc:	1f05      	subs	r5, r0, #4
 800e7de:	42a3      	cmp	r3, r4
 800e7e0:	d30c      	bcc.n	800e7fc <__copybits+0x36>
 800e7e2:	1aa3      	subs	r3, r4, r2
 800e7e4:	3b11      	subs	r3, #17
 800e7e6:	f023 0303 	bic.w	r3, r3, #3
 800e7ea:	3211      	adds	r2, #17
 800e7ec:	42a2      	cmp	r2, r4
 800e7ee:	bf88      	it	hi
 800e7f0:	2300      	movhi	r3, #0
 800e7f2:	4418      	add	r0, r3
 800e7f4:	2300      	movs	r3, #0
 800e7f6:	4288      	cmp	r0, r1
 800e7f8:	d305      	bcc.n	800e806 <__copybits+0x40>
 800e7fa:	bd70      	pop	{r4, r5, r6, pc}
 800e7fc:	f853 6b04 	ldr.w	r6, [r3], #4
 800e800:	f845 6f04 	str.w	r6, [r5, #4]!
 800e804:	e7eb      	b.n	800e7de <__copybits+0x18>
 800e806:	f840 3b04 	str.w	r3, [r0], #4
 800e80a:	e7f4      	b.n	800e7f6 <__copybits+0x30>

0800e80c <__any_on>:
 800e80c:	f100 0214 	add.w	r2, r0, #20
 800e810:	6900      	ldr	r0, [r0, #16]
 800e812:	114b      	asrs	r3, r1, #5
 800e814:	4298      	cmp	r0, r3
 800e816:	b510      	push	{r4, lr}
 800e818:	db11      	blt.n	800e83e <__any_on+0x32>
 800e81a:	dd0a      	ble.n	800e832 <__any_on+0x26>
 800e81c:	f011 011f 	ands.w	r1, r1, #31
 800e820:	d007      	beq.n	800e832 <__any_on+0x26>
 800e822:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e826:	fa24 f001 	lsr.w	r0, r4, r1
 800e82a:	fa00 f101 	lsl.w	r1, r0, r1
 800e82e:	428c      	cmp	r4, r1
 800e830:	d10b      	bne.n	800e84a <__any_on+0x3e>
 800e832:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e836:	4293      	cmp	r3, r2
 800e838:	d803      	bhi.n	800e842 <__any_on+0x36>
 800e83a:	2000      	movs	r0, #0
 800e83c:	bd10      	pop	{r4, pc}
 800e83e:	4603      	mov	r3, r0
 800e840:	e7f7      	b.n	800e832 <__any_on+0x26>
 800e842:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e846:	2900      	cmp	r1, #0
 800e848:	d0f5      	beq.n	800e836 <__any_on+0x2a>
 800e84a:	2001      	movs	r0, #1
 800e84c:	e7f6      	b.n	800e83c <__any_on+0x30>

0800e84e <_calloc_r>:
 800e84e:	b513      	push	{r0, r1, r4, lr}
 800e850:	434a      	muls	r2, r1
 800e852:	4611      	mov	r1, r2
 800e854:	9201      	str	r2, [sp, #4]
 800e856:	f000 f859 	bl	800e90c <_malloc_r>
 800e85a:	4604      	mov	r4, r0
 800e85c:	b118      	cbz	r0, 800e866 <_calloc_r+0x18>
 800e85e:	9a01      	ldr	r2, [sp, #4]
 800e860:	2100      	movs	r1, #0
 800e862:	f7fc fbe9 	bl	800b038 <memset>
 800e866:	4620      	mov	r0, r4
 800e868:	b002      	add	sp, #8
 800e86a:	bd10      	pop	{r4, pc}

0800e86c <_free_r>:
 800e86c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e86e:	2900      	cmp	r1, #0
 800e870:	d048      	beq.n	800e904 <_free_r+0x98>
 800e872:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e876:	9001      	str	r0, [sp, #4]
 800e878:	2b00      	cmp	r3, #0
 800e87a:	f1a1 0404 	sub.w	r4, r1, #4
 800e87e:	bfb8      	it	lt
 800e880:	18e4      	addlt	r4, r4, r3
 800e882:	f000 fe13 	bl	800f4ac <__malloc_lock>
 800e886:	4a20      	ldr	r2, [pc, #128]	; (800e908 <_free_r+0x9c>)
 800e888:	9801      	ldr	r0, [sp, #4]
 800e88a:	6813      	ldr	r3, [r2, #0]
 800e88c:	4615      	mov	r5, r2
 800e88e:	b933      	cbnz	r3, 800e89e <_free_r+0x32>
 800e890:	6063      	str	r3, [r4, #4]
 800e892:	6014      	str	r4, [r2, #0]
 800e894:	b003      	add	sp, #12
 800e896:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e89a:	f000 be0d 	b.w	800f4b8 <__malloc_unlock>
 800e89e:	42a3      	cmp	r3, r4
 800e8a0:	d90b      	bls.n	800e8ba <_free_r+0x4e>
 800e8a2:	6821      	ldr	r1, [r4, #0]
 800e8a4:	1862      	adds	r2, r4, r1
 800e8a6:	4293      	cmp	r3, r2
 800e8a8:	bf04      	itt	eq
 800e8aa:	681a      	ldreq	r2, [r3, #0]
 800e8ac:	685b      	ldreq	r3, [r3, #4]
 800e8ae:	6063      	str	r3, [r4, #4]
 800e8b0:	bf04      	itt	eq
 800e8b2:	1852      	addeq	r2, r2, r1
 800e8b4:	6022      	streq	r2, [r4, #0]
 800e8b6:	602c      	str	r4, [r5, #0]
 800e8b8:	e7ec      	b.n	800e894 <_free_r+0x28>
 800e8ba:	461a      	mov	r2, r3
 800e8bc:	685b      	ldr	r3, [r3, #4]
 800e8be:	b10b      	cbz	r3, 800e8c4 <_free_r+0x58>
 800e8c0:	42a3      	cmp	r3, r4
 800e8c2:	d9fa      	bls.n	800e8ba <_free_r+0x4e>
 800e8c4:	6811      	ldr	r1, [r2, #0]
 800e8c6:	1855      	adds	r5, r2, r1
 800e8c8:	42a5      	cmp	r5, r4
 800e8ca:	d10b      	bne.n	800e8e4 <_free_r+0x78>
 800e8cc:	6824      	ldr	r4, [r4, #0]
 800e8ce:	4421      	add	r1, r4
 800e8d0:	1854      	adds	r4, r2, r1
 800e8d2:	42a3      	cmp	r3, r4
 800e8d4:	6011      	str	r1, [r2, #0]
 800e8d6:	d1dd      	bne.n	800e894 <_free_r+0x28>
 800e8d8:	681c      	ldr	r4, [r3, #0]
 800e8da:	685b      	ldr	r3, [r3, #4]
 800e8dc:	6053      	str	r3, [r2, #4]
 800e8de:	4421      	add	r1, r4
 800e8e0:	6011      	str	r1, [r2, #0]
 800e8e2:	e7d7      	b.n	800e894 <_free_r+0x28>
 800e8e4:	d902      	bls.n	800e8ec <_free_r+0x80>
 800e8e6:	230c      	movs	r3, #12
 800e8e8:	6003      	str	r3, [r0, #0]
 800e8ea:	e7d3      	b.n	800e894 <_free_r+0x28>
 800e8ec:	6825      	ldr	r5, [r4, #0]
 800e8ee:	1961      	adds	r1, r4, r5
 800e8f0:	428b      	cmp	r3, r1
 800e8f2:	bf04      	itt	eq
 800e8f4:	6819      	ldreq	r1, [r3, #0]
 800e8f6:	685b      	ldreq	r3, [r3, #4]
 800e8f8:	6063      	str	r3, [r4, #4]
 800e8fa:	bf04      	itt	eq
 800e8fc:	1949      	addeq	r1, r1, r5
 800e8fe:	6021      	streq	r1, [r4, #0]
 800e900:	6054      	str	r4, [r2, #4]
 800e902:	e7c7      	b.n	800e894 <_free_r+0x28>
 800e904:	b003      	add	sp, #12
 800e906:	bd30      	pop	{r4, r5, pc}
 800e908:	2000028c 	.word	0x2000028c

0800e90c <_malloc_r>:
 800e90c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e90e:	1ccd      	adds	r5, r1, #3
 800e910:	f025 0503 	bic.w	r5, r5, #3
 800e914:	3508      	adds	r5, #8
 800e916:	2d0c      	cmp	r5, #12
 800e918:	bf38      	it	cc
 800e91a:	250c      	movcc	r5, #12
 800e91c:	2d00      	cmp	r5, #0
 800e91e:	4606      	mov	r6, r0
 800e920:	db01      	blt.n	800e926 <_malloc_r+0x1a>
 800e922:	42a9      	cmp	r1, r5
 800e924:	d903      	bls.n	800e92e <_malloc_r+0x22>
 800e926:	230c      	movs	r3, #12
 800e928:	6033      	str	r3, [r6, #0]
 800e92a:	2000      	movs	r0, #0
 800e92c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e92e:	f000 fdbd 	bl	800f4ac <__malloc_lock>
 800e932:	4921      	ldr	r1, [pc, #132]	; (800e9b8 <_malloc_r+0xac>)
 800e934:	680a      	ldr	r2, [r1, #0]
 800e936:	4614      	mov	r4, r2
 800e938:	b99c      	cbnz	r4, 800e962 <_malloc_r+0x56>
 800e93a:	4f20      	ldr	r7, [pc, #128]	; (800e9bc <_malloc_r+0xb0>)
 800e93c:	683b      	ldr	r3, [r7, #0]
 800e93e:	b923      	cbnz	r3, 800e94a <_malloc_r+0x3e>
 800e940:	4621      	mov	r1, r4
 800e942:	4630      	mov	r0, r6
 800e944:	f000 fafc 	bl	800ef40 <_sbrk_r>
 800e948:	6038      	str	r0, [r7, #0]
 800e94a:	4629      	mov	r1, r5
 800e94c:	4630      	mov	r0, r6
 800e94e:	f000 faf7 	bl	800ef40 <_sbrk_r>
 800e952:	1c43      	adds	r3, r0, #1
 800e954:	d123      	bne.n	800e99e <_malloc_r+0x92>
 800e956:	230c      	movs	r3, #12
 800e958:	6033      	str	r3, [r6, #0]
 800e95a:	4630      	mov	r0, r6
 800e95c:	f000 fdac 	bl	800f4b8 <__malloc_unlock>
 800e960:	e7e3      	b.n	800e92a <_malloc_r+0x1e>
 800e962:	6823      	ldr	r3, [r4, #0]
 800e964:	1b5b      	subs	r3, r3, r5
 800e966:	d417      	bmi.n	800e998 <_malloc_r+0x8c>
 800e968:	2b0b      	cmp	r3, #11
 800e96a:	d903      	bls.n	800e974 <_malloc_r+0x68>
 800e96c:	6023      	str	r3, [r4, #0]
 800e96e:	441c      	add	r4, r3
 800e970:	6025      	str	r5, [r4, #0]
 800e972:	e004      	b.n	800e97e <_malloc_r+0x72>
 800e974:	6863      	ldr	r3, [r4, #4]
 800e976:	42a2      	cmp	r2, r4
 800e978:	bf0c      	ite	eq
 800e97a:	600b      	streq	r3, [r1, #0]
 800e97c:	6053      	strne	r3, [r2, #4]
 800e97e:	4630      	mov	r0, r6
 800e980:	f000 fd9a 	bl	800f4b8 <__malloc_unlock>
 800e984:	f104 000b 	add.w	r0, r4, #11
 800e988:	1d23      	adds	r3, r4, #4
 800e98a:	f020 0007 	bic.w	r0, r0, #7
 800e98e:	1ac2      	subs	r2, r0, r3
 800e990:	d0cc      	beq.n	800e92c <_malloc_r+0x20>
 800e992:	1a1b      	subs	r3, r3, r0
 800e994:	50a3      	str	r3, [r4, r2]
 800e996:	e7c9      	b.n	800e92c <_malloc_r+0x20>
 800e998:	4622      	mov	r2, r4
 800e99a:	6864      	ldr	r4, [r4, #4]
 800e99c:	e7cc      	b.n	800e938 <_malloc_r+0x2c>
 800e99e:	1cc4      	adds	r4, r0, #3
 800e9a0:	f024 0403 	bic.w	r4, r4, #3
 800e9a4:	42a0      	cmp	r0, r4
 800e9a6:	d0e3      	beq.n	800e970 <_malloc_r+0x64>
 800e9a8:	1a21      	subs	r1, r4, r0
 800e9aa:	4630      	mov	r0, r6
 800e9ac:	f000 fac8 	bl	800ef40 <_sbrk_r>
 800e9b0:	3001      	adds	r0, #1
 800e9b2:	d1dd      	bne.n	800e970 <_malloc_r+0x64>
 800e9b4:	e7cf      	b.n	800e956 <_malloc_r+0x4a>
 800e9b6:	bf00      	nop
 800e9b8:	2000028c 	.word	0x2000028c
 800e9bc:	20000290 	.word	0x20000290

0800e9c0 <__ssputs_r>:
 800e9c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e9c4:	688e      	ldr	r6, [r1, #8]
 800e9c6:	429e      	cmp	r6, r3
 800e9c8:	4682      	mov	sl, r0
 800e9ca:	460c      	mov	r4, r1
 800e9cc:	4690      	mov	r8, r2
 800e9ce:	461f      	mov	r7, r3
 800e9d0:	d838      	bhi.n	800ea44 <__ssputs_r+0x84>
 800e9d2:	898a      	ldrh	r2, [r1, #12]
 800e9d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e9d8:	d032      	beq.n	800ea40 <__ssputs_r+0x80>
 800e9da:	6825      	ldr	r5, [r4, #0]
 800e9dc:	6909      	ldr	r1, [r1, #16]
 800e9de:	eba5 0901 	sub.w	r9, r5, r1
 800e9e2:	6965      	ldr	r5, [r4, #20]
 800e9e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e9e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e9ec:	3301      	adds	r3, #1
 800e9ee:	444b      	add	r3, r9
 800e9f0:	106d      	asrs	r5, r5, #1
 800e9f2:	429d      	cmp	r5, r3
 800e9f4:	bf38      	it	cc
 800e9f6:	461d      	movcc	r5, r3
 800e9f8:	0553      	lsls	r3, r2, #21
 800e9fa:	d531      	bpl.n	800ea60 <__ssputs_r+0xa0>
 800e9fc:	4629      	mov	r1, r5
 800e9fe:	f7ff ff85 	bl	800e90c <_malloc_r>
 800ea02:	4606      	mov	r6, r0
 800ea04:	b950      	cbnz	r0, 800ea1c <__ssputs_r+0x5c>
 800ea06:	230c      	movs	r3, #12
 800ea08:	f8ca 3000 	str.w	r3, [sl]
 800ea0c:	89a3      	ldrh	r3, [r4, #12]
 800ea0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea12:	81a3      	strh	r3, [r4, #12]
 800ea14:	f04f 30ff 	mov.w	r0, #4294967295
 800ea18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea1c:	6921      	ldr	r1, [r4, #16]
 800ea1e:	464a      	mov	r2, r9
 800ea20:	f7fc fafc 	bl	800b01c <memcpy>
 800ea24:	89a3      	ldrh	r3, [r4, #12]
 800ea26:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ea2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ea2e:	81a3      	strh	r3, [r4, #12]
 800ea30:	6126      	str	r6, [r4, #16]
 800ea32:	6165      	str	r5, [r4, #20]
 800ea34:	444e      	add	r6, r9
 800ea36:	eba5 0509 	sub.w	r5, r5, r9
 800ea3a:	6026      	str	r6, [r4, #0]
 800ea3c:	60a5      	str	r5, [r4, #8]
 800ea3e:	463e      	mov	r6, r7
 800ea40:	42be      	cmp	r6, r7
 800ea42:	d900      	bls.n	800ea46 <__ssputs_r+0x86>
 800ea44:	463e      	mov	r6, r7
 800ea46:	4632      	mov	r2, r6
 800ea48:	6820      	ldr	r0, [r4, #0]
 800ea4a:	4641      	mov	r1, r8
 800ea4c:	f000 fd14 	bl	800f478 <memmove>
 800ea50:	68a3      	ldr	r3, [r4, #8]
 800ea52:	6822      	ldr	r2, [r4, #0]
 800ea54:	1b9b      	subs	r3, r3, r6
 800ea56:	4432      	add	r2, r6
 800ea58:	60a3      	str	r3, [r4, #8]
 800ea5a:	6022      	str	r2, [r4, #0]
 800ea5c:	2000      	movs	r0, #0
 800ea5e:	e7db      	b.n	800ea18 <__ssputs_r+0x58>
 800ea60:	462a      	mov	r2, r5
 800ea62:	f000 fd2f 	bl	800f4c4 <_realloc_r>
 800ea66:	4606      	mov	r6, r0
 800ea68:	2800      	cmp	r0, #0
 800ea6a:	d1e1      	bne.n	800ea30 <__ssputs_r+0x70>
 800ea6c:	6921      	ldr	r1, [r4, #16]
 800ea6e:	4650      	mov	r0, sl
 800ea70:	f7ff fefc 	bl	800e86c <_free_r>
 800ea74:	e7c7      	b.n	800ea06 <__ssputs_r+0x46>
	...

0800ea78 <_svfiprintf_r>:
 800ea78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea7c:	4698      	mov	r8, r3
 800ea7e:	898b      	ldrh	r3, [r1, #12]
 800ea80:	061b      	lsls	r3, r3, #24
 800ea82:	b09d      	sub	sp, #116	; 0x74
 800ea84:	4607      	mov	r7, r0
 800ea86:	460d      	mov	r5, r1
 800ea88:	4614      	mov	r4, r2
 800ea8a:	d50e      	bpl.n	800eaaa <_svfiprintf_r+0x32>
 800ea8c:	690b      	ldr	r3, [r1, #16]
 800ea8e:	b963      	cbnz	r3, 800eaaa <_svfiprintf_r+0x32>
 800ea90:	2140      	movs	r1, #64	; 0x40
 800ea92:	f7ff ff3b 	bl	800e90c <_malloc_r>
 800ea96:	6028      	str	r0, [r5, #0]
 800ea98:	6128      	str	r0, [r5, #16]
 800ea9a:	b920      	cbnz	r0, 800eaa6 <_svfiprintf_r+0x2e>
 800ea9c:	230c      	movs	r3, #12
 800ea9e:	603b      	str	r3, [r7, #0]
 800eaa0:	f04f 30ff 	mov.w	r0, #4294967295
 800eaa4:	e0d1      	b.n	800ec4a <_svfiprintf_r+0x1d2>
 800eaa6:	2340      	movs	r3, #64	; 0x40
 800eaa8:	616b      	str	r3, [r5, #20]
 800eaaa:	2300      	movs	r3, #0
 800eaac:	9309      	str	r3, [sp, #36]	; 0x24
 800eaae:	2320      	movs	r3, #32
 800eab0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eab4:	f8cd 800c 	str.w	r8, [sp, #12]
 800eab8:	2330      	movs	r3, #48	; 0x30
 800eaba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ec64 <_svfiprintf_r+0x1ec>
 800eabe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eac2:	f04f 0901 	mov.w	r9, #1
 800eac6:	4623      	mov	r3, r4
 800eac8:	469a      	mov	sl, r3
 800eaca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eace:	b10a      	cbz	r2, 800ead4 <_svfiprintf_r+0x5c>
 800ead0:	2a25      	cmp	r2, #37	; 0x25
 800ead2:	d1f9      	bne.n	800eac8 <_svfiprintf_r+0x50>
 800ead4:	ebba 0b04 	subs.w	fp, sl, r4
 800ead8:	d00b      	beq.n	800eaf2 <_svfiprintf_r+0x7a>
 800eada:	465b      	mov	r3, fp
 800eadc:	4622      	mov	r2, r4
 800eade:	4629      	mov	r1, r5
 800eae0:	4638      	mov	r0, r7
 800eae2:	f7ff ff6d 	bl	800e9c0 <__ssputs_r>
 800eae6:	3001      	adds	r0, #1
 800eae8:	f000 80aa 	beq.w	800ec40 <_svfiprintf_r+0x1c8>
 800eaec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eaee:	445a      	add	r2, fp
 800eaf0:	9209      	str	r2, [sp, #36]	; 0x24
 800eaf2:	f89a 3000 	ldrb.w	r3, [sl]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	f000 80a2 	beq.w	800ec40 <_svfiprintf_r+0x1c8>
 800eafc:	2300      	movs	r3, #0
 800eafe:	f04f 32ff 	mov.w	r2, #4294967295
 800eb02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eb06:	f10a 0a01 	add.w	sl, sl, #1
 800eb0a:	9304      	str	r3, [sp, #16]
 800eb0c:	9307      	str	r3, [sp, #28]
 800eb0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eb12:	931a      	str	r3, [sp, #104]	; 0x68
 800eb14:	4654      	mov	r4, sl
 800eb16:	2205      	movs	r2, #5
 800eb18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb1c:	4851      	ldr	r0, [pc, #324]	; (800ec64 <_svfiprintf_r+0x1ec>)
 800eb1e:	f7f1 fb67 	bl	80001f0 <memchr>
 800eb22:	9a04      	ldr	r2, [sp, #16]
 800eb24:	b9d8      	cbnz	r0, 800eb5e <_svfiprintf_r+0xe6>
 800eb26:	06d0      	lsls	r0, r2, #27
 800eb28:	bf44      	itt	mi
 800eb2a:	2320      	movmi	r3, #32
 800eb2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eb30:	0711      	lsls	r1, r2, #28
 800eb32:	bf44      	itt	mi
 800eb34:	232b      	movmi	r3, #43	; 0x2b
 800eb36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eb3a:	f89a 3000 	ldrb.w	r3, [sl]
 800eb3e:	2b2a      	cmp	r3, #42	; 0x2a
 800eb40:	d015      	beq.n	800eb6e <_svfiprintf_r+0xf6>
 800eb42:	9a07      	ldr	r2, [sp, #28]
 800eb44:	4654      	mov	r4, sl
 800eb46:	2000      	movs	r0, #0
 800eb48:	f04f 0c0a 	mov.w	ip, #10
 800eb4c:	4621      	mov	r1, r4
 800eb4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eb52:	3b30      	subs	r3, #48	; 0x30
 800eb54:	2b09      	cmp	r3, #9
 800eb56:	d94e      	bls.n	800ebf6 <_svfiprintf_r+0x17e>
 800eb58:	b1b0      	cbz	r0, 800eb88 <_svfiprintf_r+0x110>
 800eb5a:	9207      	str	r2, [sp, #28]
 800eb5c:	e014      	b.n	800eb88 <_svfiprintf_r+0x110>
 800eb5e:	eba0 0308 	sub.w	r3, r0, r8
 800eb62:	fa09 f303 	lsl.w	r3, r9, r3
 800eb66:	4313      	orrs	r3, r2
 800eb68:	9304      	str	r3, [sp, #16]
 800eb6a:	46a2      	mov	sl, r4
 800eb6c:	e7d2      	b.n	800eb14 <_svfiprintf_r+0x9c>
 800eb6e:	9b03      	ldr	r3, [sp, #12]
 800eb70:	1d19      	adds	r1, r3, #4
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	9103      	str	r1, [sp, #12]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	bfbb      	ittet	lt
 800eb7a:	425b      	neglt	r3, r3
 800eb7c:	f042 0202 	orrlt.w	r2, r2, #2
 800eb80:	9307      	strge	r3, [sp, #28]
 800eb82:	9307      	strlt	r3, [sp, #28]
 800eb84:	bfb8      	it	lt
 800eb86:	9204      	strlt	r2, [sp, #16]
 800eb88:	7823      	ldrb	r3, [r4, #0]
 800eb8a:	2b2e      	cmp	r3, #46	; 0x2e
 800eb8c:	d10c      	bne.n	800eba8 <_svfiprintf_r+0x130>
 800eb8e:	7863      	ldrb	r3, [r4, #1]
 800eb90:	2b2a      	cmp	r3, #42	; 0x2a
 800eb92:	d135      	bne.n	800ec00 <_svfiprintf_r+0x188>
 800eb94:	9b03      	ldr	r3, [sp, #12]
 800eb96:	1d1a      	adds	r2, r3, #4
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	9203      	str	r2, [sp, #12]
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	bfb8      	it	lt
 800eba0:	f04f 33ff 	movlt.w	r3, #4294967295
 800eba4:	3402      	adds	r4, #2
 800eba6:	9305      	str	r3, [sp, #20]
 800eba8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ec74 <_svfiprintf_r+0x1fc>
 800ebac:	7821      	ldrb	r1, [r4, #0]
 800ebae:	2203      	movs	r2, #3
 800ebb0:	4650      	mov	r0, sl
 800ebb2:	f7f1 fb1d 	bl	80001f0 <memchr>
 800ebb6:	b140      	cbz	r0, 800ebca <_svfiprintf_r+0x152>
 800ebb8:	2340      	movs	r3, #64	; 0x40
 800ebba:	eba0 000a 	sub.w	r0, r0, sl
 800ebbe:	fa03 f000 	lsl.w	r0, r3, r0
 800ebc2:	9b04      	ldr	r3, [sp, #16]
 800ebc4:	4303      	orrs	r3, r0
 800ebc6:	3401      	adds	r4, #1
 800ebc8:	9304      	str	r3, [sp, #16]
 800ebca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ebce:	4826      	ldr	r0, [pc, #152]	; (800ec68 <_svfiprintf_r+0x1f0>)
 800ebd0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ebd4:	2206      	movs	r2, #6
 800ebd6:	f7f1 fb0b 	bl	80001f0 <memchr>
 800ebda:	2800      	cmp	r0, #0
 800ebdc:	d038      	beq.n	800ec50 <_svfiprintf_r+0x1d8>
 800ebde:	4b23      	ldr	r3, [pc, #140]	; (800ec6c <_svfiprintf_r+0x1f4>)
 800ebe0:	bb1b      	cbnz	r3, 800ec2a <_svfiprintf_r+0x1b2>
 800ebe2:	9b03      	ldr	r3, [sp, #12]
 800ebe4:	3307      	adds	r3, #7
 800ebe6:	f023 0307 	bic.w	r3, r3, #7
 800ebea:	3308      	adds	r3, #8
 800ebec:	9303      	str	r3, [sp, #12]
 800ebee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ebf0:	4433      	add	r3, r6
 800ebf2:	9309      	str	r3, [sp, #36]	; 0x24
 800ebf4:	e767      	b.n	800eac6 <_svfiprintf_r+0x4e>
 800ebf6:	fb0c 3202 	mla	r2, ip, r2, r3
 800ebfa:	460c      	mov	r4, r1
 800ebfc:	2001      	movs	r0, #1
 800ebfe:	e7a5      	b.n	800eb4c <_svfiprintf_r+0xd4>
 800ec00:	2300      	movs	r3, #0
 800ec02:	3401      	adds	r4, #1
 800ec04:	9305      	str	r3, [sp, #20]
 800ec06:	4619      	mov	r1, r3
 800ec08:	f04f 0c0a 	mov.w	ip, #10
 800ec0c:	4620      	mov	r0, r4
 800ec0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ec12:	3a30      	subs	r2, #48	; 0x30
 800ec14:	2a09      	cmp	r2, #9
 800ec16:	d903      	bls.n	800ec20 <_svfiprintf_r+0x1a8>
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d0c5      	beq.n	800eba8 <_svfiprintf_r+0x130>
 800ec1c:	9105      	str	r1, [sp, #20]
 800ec1e:	e7c3      	b.n	800eba8 <_svfiprintf_r+0x130>
 800ec20:	fb0c 2101 	mla	r1, ip, r1, r2
 800ec24:	4604      	mov	r4, r0
 800ec26:	2301      	movs	r3, #1
 800ec28:	e7f0      	b.n	800ec0c <_svfiprintf_r+0x194>
 800ec2a:	ab03      	add	r3, sp, #12
 800ec2c:	9300      	str	r3, [sp, #0]
 800ec2e:	462a      	mov	r2, r5
 800ec30:	4b0f      	ldr	r3, [pc, #60]	; (800ec70 <_svfiprintf_r+0x1f8>)
 800ec32:	a904      	add	r1, sp, #16
 800ec34:	4638      	mov	r0, r7
 800ec36:	f7fc faa7 	bl	800b188 <_printf_float>
 800ec3a:	1c42      	adds	r2, r0, #1
 800ec3c:	4606      	mov	r6, r0
 800ec3e:	d1d6      	bne.n	800ebee <_svfiprintf_r+0x176>
 800ec40:	89ab      	ldrh	r3, [r5, #12]
 800ec42:	065b      	lsls	r3, r3, #25
 800ec44:	f53f af2c 	bmi.w	800eaa0 <_svfiprintf_r+0x28>
 800ec48:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ec4a:	b01d      	add	sp, #116	; 0x74
 800ec4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec50:	ab03      	add	r3, sp, #12
 800ec52:	9300      	str	r3, [sp, #0]
 800ec54:	462a      	mov	r2, r5
 800ec56:	4b06      	ldr	r3, [pc, #24]	; (800ec70 <_svfiprintf_r+0x1f8>)
 800ec58:	a904      	add	r1, sp, #16
 800ec5a:	4638      	mov	r0, r7
 800ec5c:	f7fc fd38 	bl	800b6d0 <_printf_i>
 800ec60:	e7eb      	b.n	800ec3a <_svfiprintf_r+0x1c2>
 800ec62:	bf00      	nop
 800ec64:	08010264 	.word	0x08010264
 800ec68:	0801026e 	.word	0x0801026e
 800ec6c:	0800b189 	.word	0x0800b189
 800ec70:	0800e9c1 	.word	0x0800e9c1
 800ec74:	0801026a 	.word	0x0801026a

0800ec78 <__sfputc_r>:
 800ec78:	6893      	ldr	r3, [r2, #8]
 800ec7a:	3b01      	subs	r3, #1
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	b410      	push	{r4}
 800ec80:	6093      	str	r3, [r2, #8]
 800ec82:	da08      	bge.n	800ec96 <__sfputc_r+0x1e>
 800ec84:	6994      	ldr	r4, [r2, #24]
 800ec86:	42a3      	cmp	r3, r4
 800ec88:	db01      	blt.n	800ec8e <__sfputc_r+0x16>
 800ec8a:	290a      	cmp	r1, #10
 800ec8c:	d103      	bne.n	800ec96 <__sfputc_r+0x1e>
 800ec8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ec92:	f000 b9c1 	b.w	800f018 <__swbuf_r>
 800ec96:	6813      	ldr	r3, [r2, #0]
 800ec98:	1c58      	adds	r0, r3, #1
 800ec9a:	6010      	str	r0, [r2, #0]
 800ec9c:	7019      	strb	r1, [r3, #0]
 800ec9e:	4608      	mov	r0, r1
 800eca0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eca4:	4770      	bx	lr

0800eca6 <__sfputs_r>:
 800eca6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eca8:	4606      	mov	r6, r0
 800ecaa:	460f      	mov	r7, r1
 800ecac:	4614      	mov	r4, r2
 800ecae:	18d5      	adds	r5, r2, r3
 800ecb0:	42ac      	cmp	r4, r5
 800ecb2:	d101      	bne.n	800ecb8 <__sfputs_r+0x12>
 800ecb4:	2000      	movs	r0, #0
 800ecb6:	e007      	b.n	800ecc8 <__sfputs_r+0x22>
 800ecb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ecbc:	463a      	mov	r2, r7
 800ecbe:	4630      	mov	r0, r6
 800ecc0:	f7ff ffda 	bl	800ec78 <__sfputc_r>
 800ecc4:	1c43      	adds	r3, r0, #1
 800ecc6:	d1f3      	bne.n	800ecb0 <__sfputs_r+0xa>
 800ecc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800eccc <_vfiprintf_r>:
 800eccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecd0:	460d      	mov	r5, r1
 800ecd2:	b09d      	sub	sp, #116	; 0x74
 800ecd4:	4614      	mov	r4, r2
 800ecd6:	4698      	mov	r8, r3
 800ecd8:	4606      	mov	r6, r0
 800ecda:	b118      	cbz	r0, 800ece4 <_vfiprintf_r+0x18>
 800ecdc:	6983      	ldr	r3, [r0, #24]
 800ecde:	b90b      	cbnz	r3, 800ece4 <_vfiprintf_r+0x18>
 800ece0:	f7fe fcba 	bl	800d658 <__sinit>
 800ece4:	4b89      	ldr	r3, [pc, #548]	; (800ef0c <_vfiprintf_r+0x240>)
 800ece6:	429d      	cmp	r5, r3
 800ece8:	d11b      	bne.n	800ed22 <_vfiprintf_r+0x56>
 800ecea:	6875      	ldr	r5, [r6, #4]
 800ecec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ecee:	07d9      	lsls	r1, r3, #31
 800ecf0:	d405      	bmi.n	800ecfe <_vfiprintf_r+0x32>
 800ecf2:	89ab      	ldrh	r3, [r5, #12]
 800ecf4:	059a      	lsls	r2, r3, #22
 800ecf6:	d402      	bmi.n	800ecfe <_vfiprintf_r+0x32>
 800ecf8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ecfa:	f7ff f8d0 	bl	800de9e <__retarget_lock_acquire_recursive>
 800ecfe:	89ab      	ldrh	r3, [r5, #12]
 800ed00:	071b      	lsls	r3, r3, #28
 800ed02:	d501      	bpl.n	800ed08 <_vfiprintf_r+0x3c>
 800ed04:	692b      	ldr	r3, [r5, #16]
 800ed06:	b9eb      	cbnz	r3, 800ed44 <_vfiprintf_r+0x78>
 800ed08:	4629      	mov	r1, r5
 800ed0a:	4630      	mov	r0, r6
 800ed0c:	f000 f9f6 	bl	800f0fc <__swsetup_r>
 800ed10:	b1c0      	cbz	r0, 800ed44 <_vfiprintf_r+0x78>
 800ed12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ed14:	07dc      	lsls	r4, r3, #31
 800ed16:	d50e      	bpl.n	800ed36 <_vfiprintf_r+0x6a>
 800ed18:	f04f 30ff 	mov.w	r0, #4294967295
 800ed1c:	b01d      	add	sp, #116	; 0x74
 800ed1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed22:	4b7b      	ldr	r3, [pc, #492]	; (800ef10 <_vfiprintf_r+0x244>)
 800ed24:	429d      	cmp	r5, r3
 800ed26:	d101      	bne.n	800ed2c <_vfiprintf_r+0x60>
 800ed28:	68b5      	ldr	r5, [r6, #8]
 800ed2a:	e7df      	b.n	800ecec <_vfiprintf_r+0x20>
 800ed2c:	4b79      	ldr	r3, [pc, #484]	; (800ef14 <_vfiprintf_r+0x248>)
 800ed2e:	429d      	cmp	r5, r3
 800ed30:	bf08      	it	eq
 800ed32:	68f5      	ldreq	r5, [r6, #12]
 800ed34:	e7da      	b.n	800ecec <_vfiprintf_r+0x20>
 800ed36:	89ab      	ldrh	r3, [r5, #12]
 800ed38:	0598      	lsls	r0, r3, #22
 800ed3a:	d4ed      	bmi.n	800ed18 <_vfiprintf_r+0x4c>
 800ed3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ed3e:	f7ff f8af 	bl	800dea0 <__retarget_lock_release_recursive>
 800ed42:	e7e9      	b.n	800ed18 <_vfiprintf_r+0x4c>
 800ed44:	2300      	movs	r3, #0
 800ed46:	9309      	str	r3, [sp, #36]	; 0x24
 800ed48:	2320      	movs	r3, #32
 800ed4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ed4e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ed52:	2330      	movs	r3, #48	; 0x30
 800ed54:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ef18 <_vfiprintf_r+0x24c>
 800ed58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ed5c:	f04f 0901 	mov.w	r9, #1
 800ed60:	4623      	mov	r3, r4
 800ed62:	469a      	mov	sl, r3
 800ed64:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ed68:	b10a      	cbz	r2, 800ed6e <_vfiprintf_r+0xa2>
 800ed6a:	2a25      	cmp	r2, #37	; 0x25
 800ed6c:	d1f9      	bne.n	800ed62 <_vfiprintf_r+0x96>
 800ed6e:	ebba 0b04 	subs.w	fp, sl, r4
 800ed72:	d00b      	beq.n	800ed8c <_vfiprintf_r+0xc0>
 800ed74:	465b      	mov	r3, fp
 800ed76:	4622      	mov	r2, r4
 800ed78:	4629      	mov	r1, r5
 800ed7a:	4630      	mov	r0, r6
 800ed7c:	f7ff ff93 	bl	800eca6 <__sfputs_r>
 800ed80:	3001      	adds	r0, #1
 800ed82:	f000 80aa 	beq.w	800eeda <_vfiprintf_r+0x20e>
 800ed86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ed88:	445a      	add	r2, fp
 800ed8a:	9209      	str	r2, [sp, #36]	; 0x24
 800ed8c:	f89a 3000 	ldrb.w	r3, [sl]
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	f000 80a2 	beq.w	800eeda <_vfiprintf_r+0x20e>
 800ed96:	2300      	movs	r3, #0
 800ed98:	f04f 32ff 	mov.w	r2, #4294967295
 800ed9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eda0:	f10a 0a01 	add.w	sl, sl, #1
 800eda4:	9304      	str	r3, [sp, #16]
 800eda6:	9307      	str	r3, [sp, #28]
 800eda8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800edac:	931a      	str	r3, [sp, #104]	; 0x68
 800edae:	4654      	mov	r4, sl
 800edb0:	2205      	movs	r2, #5
 800edb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800edb6:	4858      	ldr	r0, [pc, #352]	; (800ef18 <_vfiprintf_r+0x24c>)
 800edb8:	f7f1 fa1a 	bl	80001f0 <memchr>
 800edbc:	9a04      	ldr	r2, [sp, #16]
 800edbe:	b9d8      	cbnz	r0, 800edf8 <_vfiprintf_r+0x12c>
 800edc0:	06d1      	lsls	r1, r2, #27
 800edc2:	bf44      	itt	mi
 800edc4:	2320      	movmi	r3, #32
 800edc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800edca:	0713      	lsls	r3, r2, #28
 800edcc:	bf44      	itt	mi
 800edce:	232b      	movmi	r3, #43	; 0x2b
 800edd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800edd4:	f89a 3000 	ldrb.w	r3, [sl]
 800edd8:	2b2a      	cmp	r3, #42	; 0x2a
 800edda:	d015      	beq.n	800ee08 <_vfiprintf_r+0x13c>
 800eddc:	9a07      	ldr	r2, [sp, #28]
 800edde:	4654      	mov	r4, sl
 800ede0:	2000      	movs	r0, #0
 800ede2:	f04f 0c0a 	mov.w	ip, #10
 800ede6:	4621      	mov	r1, r4
 800ede8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800edec:	3b30      	subs	r3, #48	; 0x30
 800edee:	2b09      	cmp	r3, #9
 800edf0:	d94e      	bls.n	800ee90 <_vfiprintf_r+0x1c4>
 800edf2:	b1b0      	cbz	r0, 800ee22 <_vfiprintf_r+0x156>
 800edf4:	9207      	str	r2, [sp, #28]
 800edf6:	e014      	b.n	800ee22 <_vfiprintf_r+0x156>
 800edf8:	eba0 0308 	sub.w	r3, r0, r8
 800edfc:	fa09 f303 	lsl.w	r3, r9, r3
 800ee00:	4313      	orrs	r3, r2
 800ee02:	9304      	str	r3, [sp, #16]
 800ee04:	46a2      	mov	sl, r4
 800ee06:	e7d2      	b.n	800edae <_vfiprintf_r+0xe2>
 800ee08:	9b03      	ldr	r3, [sp, #12]
 800ee0a:	1d19      	adds	r1, r3, #4
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	9103      	str	r1, [sp, #12]
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	bfbb      	ittet	lt
 800ee14:	425b      	neglt	r3, r3
 800ee16:	f042 0202 	orrlt.w	r2, r2, #2
 800ee1a:	9307      	strge	r3, [sp, #28]
 800ee1c:	9307      	strlt	r3, [sp, #28]
 800ee1e:	bfb8      	it	lt
 800ee20:	9204      	strlt	r2, [sp, #16]
 800ee22:	7823      	ldrb	r3, [r4, #0]
 800ee24:	2b2e      	cmp	r3, #46	; 0x2e
 800ee26:	d10c      	bne.n	800ee42 <_vfiprintf_r+0x176>
 800ee28:	7863      	ldrb	r3, [r4, #1]
 800ee2a:	2b2a      	cmp	r3, #42	; 0x2a
 800ee2c:	d135      	bne.n	800ee9a <_vfiprintf_r+0x1ce>
 800ee2e:	9b03      	ldr	r3, [sp, #12]
 800ee30:	1d1a      	adds	r2, r3, #4
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	9203      	str	r2, [sp, #12]
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	bfb8      	it	lt
 800ee3a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ee3e:	3402      	adds	r4, #2
 800ee40:	9305      	str	r3, [sp, #20]
 800ee42:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ef28 <_vfiprintf_r+0x25c>
 800ee46:	7821      	ldrb	r1, [r4, #0]
 800ee48:	2203      	movs	r2, #3
 800ee4a:	4650      	mov	r0, sl
 800ee4c:	f7f1 f9d0 	bl	80001f0 <memchr>
 800ee50:	b140      	cbz	r0, 800ee64 <_vfiprintf_r+0x198>
 800ee52:	2340      	movs	r3, #64	; 0x40
 800ee54:	eba0 000a 	sub.w	r0, r0, sl
 800ee58:	fa03 f000 	lsl.w	r0, r3, r0
 800ee5c:	9b04      	ldr	r3, [sp, #16]
 800ee5e:	4303      	orrs	r3, r0
 800ee60:	3401      	adds	r4, #1
 800ee62:	9304      	str	r3, [sp, #16]
 800ee64:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee68:	482c      	ldr	r0, [pc, #176]	; (800ef1c <_vfiprintf_r+0x250>)
 800ee6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ee6e:	2206      	movs	r2, #6
 800ee70:	f7f1 f9be 	bl	80001f0 <memchr>
 800ee74:	2800      	cmp	r0, #0
 800ee76:	d03f      	beq.n	800eef8 <_vfiprintf_r+0x22c>
 800ee78:	4b29      	ldr	r3, [pc, #164]	; (800ef20 <_vfiprintf_r+0x254>)
 800ee7a:	bb1b      	cbnz	r3, 800eec4 <_vfiprintf_r+0x1f8>
 800ee7c:	9b03      	ldr	r3, [sp, #12]
 800ee7e:	3307      	adds	r3, #7
 800ee80:	f023 0307 	bic.w	r3, r3, #7
 800ee84:	3308      	adds	r3, #8
 800ee86:	9303      	str	r3, [sp, #12]
 800ee88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee8a:	443b      	add	r3, r7
 800ee8c:	9309      	str	r3, [sp, #36]	; 0x24
 800ee8e:	e767      	b.n	800ed60 <_vfiprintf_r+0x94>
 800ee90:	fb0c 3202 	mla	r2, ip, r2, r3
 800ee94:	460c      	mov	r4, r1
 800ee96:	2001      	movs	r0, #1
 800ee98:	e7a5      	b.n	800ede6 <_vfiprintf_r+0x11a>
 800ee9a:	2300      	movs	r3, #0
 800ee9c:	3401      	adds	r4, #1
 800ee9e:	9305      	str	r3, [sp, #20]
 800eea0:	4619      	mov	r1, r3
 800eea2:	f04f 0c0a 	mov.w	ip, #10
 800eea6:	4620      	mov	r0, r4
 800eea8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eeac:	3a30      	subs	r2, #48	; 0x30
 800eeae:	2a09      	cmp	r2, #9
 800eeb0:	d903      	bls.n	800eeba <_vfiprintf_r+0x1ee>
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d0c5      	beq.n	800ee42 <_vfiprintf_r+0x176>
 800eeb6:	9105      	str	r1, [sp, #20]
 800eeb8:	e7c3      	b.n	800ee42 <_vfiprintf_r+0x176>
 800eeba:	fb0c 2101 	mla	r1, ip, r1, r2
 800eebe:	4604      	mov	r4, r0
 800eec0:	2301      	movs	r3, #1
 800eec2:	e7f0      	b.n	800eea6 <_vfiprintf_r+0x1da>
 800eec4:	ab03      	add	r3, sp, #12
 800eec6:	9300      	str	r3, [sp, #0]
 800eec8:	462a      	mov	r2, r5
 800eeca:	4b16      	ldr	r3, [pc, #88]	; (800ef24 <_vfiprintf_r+0x258>)
 800eecc:	a904      	add	r1, sp, #16
 800eece:	4630      	mov	r0, r6
 800eed0:	f7fc f95a 	bl	800b188 <_printf_float>
 800eed4:	4607      	mov	r7, r0
 800eed6:	1c78      	adds	r0, r7, #1
 800eed8:	d1d6      	bne.n	800ee88 <_vfiprintf_r+0x1bc>
 800eeda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eedc:	07d9      	lsls	r1, r3, #31
 800eede:	d405      	bmi.n	800eeec <_vfiprintf_r+0x220>
 800eee0:	89ab      	ldrh	r3, [r5, #12]
 800eee2:	059a      	lsls	r2, r3, #22
 800eee4:	d402      	bmi.n	800eeec <_vfiprintf_r+0x220>
 800eee6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eee8:	f7fe ffda 	bl	800dea0 <__retarget_lock_release_recursive>
 800eeec:	89ab      	ldrh	r3, [r5, #12]
 800eeee:	065b      	lsls	r3, r3, #25
 800eef0:	f53f af12 	bmi.w	800ed18 <_vfiprintf_r+0x4c>
 800eef4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eef6:	e711      	b.n	800ed1c <_vfiprintf_r+0x50>
 800eef8:	ab03      	add	r3, sp, #12
 800eefa:	9300      	str	r3, [sp, #0]
 800eefc:	462a      	mov	r2, r5
 800eefe:	4b09      	ldr	r3, [pc, #36]	; (800ef24 <_vfiprintf_r+0x258>)
 800ef00:	a904      	add	r1, sp, #16
 800ef02:	4630      	mov	r0, r6
 800ef04:	f7fc fbe4 	bl	800b6d0 <_printf_i>
 800ef08:	e7e4      	b.n	800eed4 <_vfiprintf_r+0x208>
 800ef0a:	bf00      	nop
 800ef0c:	08010044 	.word	0x08010044
 800ef10:	08010064 	.word	0x08010064
 800ef14:	08010024 	.word	0x08010024
 800ef18:	08010264 	.word	0x08010264
 800ef1c:	0801026e 	.word	0x0801026e
 800ef20:	0800b189 	.word	0x0800b189
 800ef24:	0800eca7 	.word	0x0800eca7
 800ef28:	0801026a 	.word	0x0801026a
 800ef2c:	00000000 	.word	0x00000000

0800ef30 <nan>:
 800ef30:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ef38 <nan+0x8>
 800ef34:	4770      	bx	lr
 800ef36:	bf00      	nop
 800ef38:	00000000 	.word	0x00000000
 800ef3c:	7ff80000 	.word	0x7ff80000

0800ef40 <_sbrk_r>:
 800ef40:	b538      	push	{r3, r4, r5, lr}
 800ef42:	4d06      	ldr	r5, [pc, #24]	; (800ef5c <_sbrk_r+0x1c>)
 800ef44:	2300      	movs	r3, #0
 800ef46:	4604      	mov	r4, r0
 800ef48:	4608      	mov	r0, r1
 800ef4a:	602b      	str	r3, [r5, #0]
 800ef4c:	f7f6 fe4a 	bl	8005be4 <_sbrk>
 800ef50:	1c43      	adds	r3, r0, #1
 800ef52:	d102      	bne.n	800ef5a <_sbrk_r+0x1a>
 800ef54:	682b      	ldr	r3, [r5, #0]
 800ef56:	b103      	cbz	r3, 800ef5a <_sbrk_r+0x1a>
 800ef58:	6023      	str	r3, [r4, #0]
 800ef5a:	bd38      	pop	{r3, r4, r5, pc}
 800ef5c:	2000074c 	.word	0x2000074c

0800ef60 <nanf>:
 800ef60:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ef68 <nanf+0x8>
 800ef64:	4770      	bx	lr
 800ef66:	bf00      	nop
 800ef68:	7fc00000 	.word	0x7fc00000

0800ef6c <__sread>:
 800ef6c:	b510      	push	{r4, lr}
 800ef6e:	460c      	mov	r4, r1
 800ef70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef74:	f000 facc 	bl	800f510 <_read_r>
 800ef78:	2800      	cmp	r0, #0
 800ef7a:	bfab      	itete	ge
 800ef7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ef7e:	89a3      	ldrhlt	r3, [r4, #12]
 800ef80:	181b      	addge	r3, r3, r0
 800ef82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ef86:	bfac      	ite	ge
 800ef88:	6563      	strge	r3, [r4, #84]	; 0x54
 800ef8a:	81a3      	strhlt	r3, [r4, #12]
 800ef8c:	bd10      	pop	{r4, pc}

0800ef8e <__swrite>:
 800ef8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef92:	461f      	mov	r7, r3
 800ef94:	898b      	ldrh	r3, [r1, #12]
 800ef96:	05db      	lsls	r3, r3, #23
 800ef98:	4605      	mov	r5, r0
 800ef9a:	460c      	mov	r4, r1
 800ef9c:	4616      	mov	r6, r2
 800ef9e:	d505      	bpl.n	800efac <__swrite+0x1e>
 800efa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800efa4:	2302      	movs	r3, #2
 800efa6:	2200      	movs	r2, #0
 800efa8:	f000 f9f0 	bl	800f38c <_lseek_r>
 800efac:	89a3      	ldrh	r3, [r4, #12]
 800efae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800efb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800efb6:	81a3      	strh	r3, [r4, #12]
 800efb8:	4632      	mov	r2, r6
 800efba:	463b      	mov	r3, r7
 800efbc:	4628      	mov	r0, r5
 800efbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800efc2:	f000 b889 	b.w	800f0d8 <_write_r>

0800efc6 <__sseek>:
 800efc6:	b510      	push	{r4, lr}
 800efc8:	460c      	mov	r4, r1
 800efca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800efce:	f000 f9dd 	bl	800f38c <_lseek_r>
 800efd2:	1c43      	adds	r3, r0, #1
 800efd4:	89a3      	ldrh	r3, [r4, #12]
 800efd6:	bf15      	itete	ne
 800efd8:	6560      	strne	r0, [r4, #84]	; 0x54
 800efda:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800efde:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800efe2:	81a3      	strheq	r3, [r4, #12]
 800efe4:	bf18      	it	ne
 800efe6:	81a3      	strhne	r3, [r4, #12]
 800efe8:	bd10      	pop	{r4, pc}

0800efea <__sclose>:
 800efea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800efee:	f000 b8fb 	b.w	800f1e8 <_close_r>

0800eff2 <strncmp>:
 800eff2:	b510      	push	{r4, lr}
 800eff4:	b16a      	cbz	r2, 800f012 <strncmp+0x20>
 800eff6:	3901      	subs	r1, #1
 800eff8:	1884      	adds	r4, r0, r2
 800effa:	f810 3b01 	ldrb.w	r3, [r0], #1
 800effe:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f002:	4293      	cmp	r3, r2
 800f004:	d103      	bne.n	800f00e <strncmp+0x1c>
 800f006:	42a0      	cmp	r0, r4
 800f008:	d001      	beq.n	800f00e <strncmp+0x1c>
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d1f5      	bne.n	800effa <strncmp+0x8>
 800f00e:	1a98      	subs	r0, r3, r2
 800f010:	bd10      	pop	{r4, pc}
 800f012:	4610      	mov	r0, r2
 800f014:	e7fc      	b.n	800f010 <strncmp+0x1e>
	...

0800f018 <__swbuf_r>:
 800f018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f01a:	460e      	mov	r6, r1
 800f01c:	4614      	mov	r4, r2
 800f01e:	4605      	mov	r5, r0
 800f020:	b118      	cbz	r0, 800f02a <__swbuf_r+0x12>
 800f022:	6983      	ldr	r3, [r0, #24]
 800f024:	b90b      	cbnz	r3, 800f02a <__swbuf_r+0x12>
 800f026:	f7fe fb17 	bl	800d658 <__sinit>
 800f02a:	4b21      	ldr	r3, [pc, #132]	; (800f0b0 <__swbuf_r+0x98>)
 800f02c:	429c      	cmp	r4, r3
 800f02e:	d12b      	bne.n	800f088 <__swbuf_r+0x70>
 800f030:	686c      	ldr	r4, [r5, #4]
 800f032:	69a3      	ldr	r3, [r4, #24]
 800f034:	60a3      	str	r3, [r4, #8]
 800f036:	89a3      	ldrh	r3, [r4, #12]
 800f038:	071a      	lsls	r2, r3, #28
 800f03a:	d52f      	bpl.n	800f09c <__swbuf_r+0x84>
 800f03c:	6923      	ldr	r3, [r4, #16]
 800f03e:	b36b      	cbz	r3, 800f09c <__swbuf_r+0x84>
 800f040:	6923      	ldr	r3, [r4, #16]
 800f042:	6820      	ldr	r0, [r4, #0]
 800f044:	1ac0      	subs	r0, r0, r3
 800f046:	6963      	ldr	r3, [r4, #20]
 800f048:	b2f6      	uxtb	r6, r6
 800f04a:	4283      	cmp	r3, r0
 800f04c:	4637      	mov	r7, r6
 800f04e:	dc04      	bgt.n	800f05a <__swbuf_r+0x42>
 800f050:	4621      	mov	r1, r4
 800f052:	4628      	mov	r0, r5
 800f054:	f000 f95e 	bl	800f314 <_fflush_r>
 800f058:	bb30      	cbnz	r0, 800f0a8 <__swbuf_r+0x90>
 800f05a:	68a3      	ldr	r3, [r4, #8]
 800f05c:	3b01      	subs	r3, #1
 800f05e:	60a3      	str	r3, [r4, #8]
 800f060:	6823      	ldr	r3, [r4, #0]
 800f062:	1c5a      	adds	r2, r3, #1
 800f064:	6022      	str	r2, [r4, #0]
 800f066:	701e      	strb	r6, [r3, #0]
 800f068:	6963      	ldr	r3, [r4, #20]
 800f06a:	3001      	adds	r0, #1
 800f06c:	4283      	cmp	r3, r0
 800f06e:	d004      	beq.n	800f07a <__swbuf_r+0x62>
 800f070:	89a3      	ldrh	r3, [r4, #12]
 800f072:	07db      	lsls	r3, r3, #31
 800f074:	d506      	bpl.n	800f084 <__swbuf_r+0x6c>
 800f076:	2e0a      	cmp	r6, #10
 800f078:	d104      	bne.n	800f084 <__swbuf_r+0x6c>
 800f07a:	4621      	mov	r1, r4
 800f07c:	4628      	mov	r0, r5
 800f07e:	f000 f949 	bl	800f314 <_fflush_r>
 800f082:	b988      	cbnz	r0, 800f0a8 <__swbuf_r+0x90>
 800f084:	4638      	mov	r0, r7
 800f086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f088:	4b0a      	ldr	r3, [pc, #40]	; (800f0b4 <__swbuf_r+0x9c>)
 800f08a:	429c      	cmp	r4, r3
 800f08c:	d101      	bne.n	800f092 <__swbuf_r+0x7a>
 800f08e:	68ac      	ldr	r4, [r5, #8]
 800f090:	e7cf      	b.n	800f032 <__swbuf_r+0x1a>
 800f092:	4b09      	ldr	r3, [pc, #36]	; (800f0b8 <__swbuf_r+0xa0>)
 800f094:	429c      	cmp	r4, r3
 800f096:	bf08      	it	eq
 800f098:	68ec      	ldreq	r4, [r5, #12]
 800f09a:	e7ca      	b.n	800f032 <__swbuf_r+0x1a>
 800f09c:	4621      	mov	r1, r4
 800f09e:	4628      	mov	r0, r5
 800f0a0:	f000 f82c 	bl	800f0fc <__swsetup_r>
 800f0a4:	2800      	cmp	r0, #0
 800f0a6:	d0cb      	beq.n	800f040 <__swbuf_r+0x28>
 800f0a8:	f04f 37ff 	mov.w	r7, #4294967295
 800f0ac:	e7ea      	b.n	800f084 <__swbuf_r+0x6c>
 800f0ae:	bf00      	nop
 800f0b0:	08010044 	.word	0x08010044
 800f0b4:	08010064 	.word	0x08010064
 800f0b8:	08010024 	.word	0x08010024

0800f0bc <__ascii_wctomb>:
 800f0bc:	b149      	cbz	r1, 800f0d2 <__ascii_wctomb+0x16>
 800f0be:	2aff      	cmp	r2, #255	; 0xff
 800f0c0:	bf85      	ittet	hi
 800f0c2:	238a      	movhi	r3, #138	; 0x8a
 800f0c4:	6003      	strhi	r3, [r0, #0]
 800f0c6:	700a      	strbls	r2, [r1, #0]
 800f0c8:	f04f 30ff 	movhi.w	r0, #4294967295
 800f0cc:	bf98      	it	ls
 800f0ce:	2001      	movls	r0, #1
 800f0d0:	4770      	bx	lr
 800f0d2:	4608      	mov	r0, r1
 800f0d4:	4770      	bx	lr
	...

0800f0d8 <_write_r>:
 800f0d8:	b538      	push	{r3, r4, r5, lr}
 800f0da:	4d07      	ldr	r5, [pc, #28]	; (800f0f8 <_write_r+0x20>)
 800f0dc:	4604      	mov	r4, r0
 800f0de:	4608      	mov	r0, r1
 800f0e0:	4611      	mov	r1, r2
 800f0e2:	2200      	movs	r2, #0
 800f0e4:	602a      	str	r2, [r5, #0]
 800f0e6:	461a      	mov	r2, r3
 800f0e8:	f7f6 fd2b 	bl	8005b42 <_write>
 800f0ec:	1c43      	adds	r3, r0, #1
 800f0ee:	d102      	bne.n	800f0f6 <_write_r+0x1e>
 800f0f0:	682b      	ldr	r3, [r5, #0]
 800f0f2:	b103      	cbz	r3, 800f0f6 <_write_r+0x1e>
 800f0f4:	6023      	str	r3, [r4, #0]
 800f0f6:	bd38      	pop	{r3, r4, r5, pc}
 800f0f8:	2000074c 	.word	0x2000074c

0800f0fc <__swsetup_r>:
 800f0fc:	4b32      	ldr	r3, [pc, #200]	; (800f1c8 <__swsetup_r+0xcc>)
 800f0fe:	b570      	push	{r4, r5, r6, lr}
 800f100:	681d      	ldr	r5, [r3, #0]
 800f102:	4606      	mov	r6, r0
 800f104:	460c      	mov	r4, r1
 800f106:	b125      	cbz	r5, 800f112 <__swsetup_r+0x16>
 800f108:	69ab      	ldr	r3, [r5, #24]
 800f10a:	b913      	cbnz	r3, 800f112 <__swsetup_r+0x16>
 800f10c:	4628      	mov	r0, r5
 800f10e:	f7fe faa3 	bl	800d658 <__sinit>
 800f112:	4b2e      	ldr	r3, [pc, #184]	; (800f1cc <__swsetup_r+0xd0>)
 800f114:	429c      	cmp	r4, r3
 800f116:	d10f      	bne.n	800f138 <__swsetup_r+0x3c>
 800f118:	686c      	ldr	r4, [r5, #4]
 800f11a:	89a3      	ldrh	r3, [r4, #12]
 800f11c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f120:	0719      	lsls	r1, r3, #28
 800f122:	d42c      	bmi.n	800f17e <__swsetup_r+0x82>
 800f124:	06dd      	lsls	r5, r3, #27
 800f126:	d411      	bmi.n	800f14c <__swsetup_r+0x50>
 800f128:	2309      	movs	r3, #9
 800f12a:	6033      	str	r3, [r6, #0]
 800f12c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f130:	81a3      	strh	r3, [r4, #12]
 800f132:	f04f 30ff 	mov.w	r0, #4294967295
 800f136:	e03e      	b.n	800f1b6 <__swsetup_r+0xba>
 800f138:	4b25      	ldr	r3, [pc, #148]	; (800f1d0 <__swsetup_r+0xd4>)
 800f13a:	429c      	cmp	r4, r3
 800f13c:	d101      	bne.n	800f142 <__swsetup_r+0x46>
 800f13e:	68ac      	ldr	r4, [r5, #8]
 800f140:	e7eb      	b.n	800f11a <__swsetup_r+0x1e>
 800f142:	4b24      	ldr	r3, [pc, #144]	; (800f1d4 <__swsetup_r+0xd8>)
 800f144:	429c      	cmp	r4, r3
 800f146:	bf08      	it	eq
 800f148:	68ec      	ldreq	r4, [r5, #12]
 800f14a:	e7e6      	b.n	800f11a <__swsetup_r+0x1e>
 800f14c:	0758      	lsls	r0, r3, #29
 800f14e:	d512      	bpl.n	800f176 <__swsetup_r+0x7a>
 800f150:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f152:	b141      	cbz	r1, 800f166 <__swsetup_r+0x6a>
 800f154:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f158:	4299      	cmp	r1, r3
 800f15a:	d002      	beq.n	800f162 <__swsetup_r+0x66>
 800f15c:	4630      	mov	r0, r6
 800f15e:	f7ff fb85 	bl	800e86c <_free_r>
 800f162:	2300      	movs	r3, #0
 800f164:	6363      	str	r3, [r4, #52]	; 0x34
 800f166:	89a3      	ldrh	r3, [r4, #12]
 800f168:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f16c:	81a3      	strh	r3, [r4, #12]
 800f16e:	2300      	movs	r3, #0
 800f170:	6063      	str	r3, [r4, #4]
 800f172:	6923      	ldr	r3, [r4, #16]
 800f174:	6023      	str	r3, [r4, #0]
 800f176:	89a3      	ldrh	r3, [r4, #12]
 800f178:	f043 0308 	orr.w	r3, r3, #8
 800f17c:	81a3      	strh	r3, [r4, #12]
 800f17e:	6923      	ldr	r3, [r4, #16]
 800f180:	b94b      	cbnz	r3, 800f196 <__swsetup_r+0x9a>
 800f182:	89a3      	ldrh	r3, [r4, #12]
 800f184:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f188:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f18c:	d003      	beq.n	800f196 <__swsetup_r+0x9a>
 800f18e:	4621      	mov	r1, r4
 800f190:	4630      	mov	r0, r6
 800f192:	f000 f931 	bl	800f3f8 <__smakebuf_r>
 800f196:	89a0      	ldrh	r0, [r4, #12]
 800f198:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f19c:	f010 0301 	ands.w	r3, r0, #1
 800f1a0:	d00a      	beq.n	800f1b8 <__swsetup_r+0xbc>
 800f1a2:	2300      	movs	r3, #0
 800f1a4:	60a3      	str	r3, [r4, #8]
 800f1a6:	6963      	ldr	r3, [r4, #20]
 800f1a8:	425b      	negs	r3, r3
 800f1aa:	61a3      	str	r3, [r4, #24]
 800f1ac:	6923      	ldr	r3, [r4, #16]
 800f1ae:	b943      	cbnz	r3, 800f1c2 <__swsetup_r+0xc6>
 800f1b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f1b4:	d1ba      	bne.n	800f12c <__swsetup_r+0x30>
 800f1b6:	bd70      	pop	{r4, r5, r6, pc}
 800f1b8:	0781      	lsls	r1, r0, #30
 800f1ba:	bf58      	it	pl
 800f1bc:	6963      	ldrpl	r3, [r4, #20]
 800f1be:	60a3      	str	r3, [r4, #8]
 800f1c0:	e7f4      	b.n	800f1ac <__swsetup_r+0xb0>
 800f1c2:	2000      	movs	r0, #0
 800f1c4:	e7f7      	b.n	800f1b6 <__swsetup_r+0xba>
 800f1c6:	bf00      	nop
 800f1c8:	20000074 	.word	0x20000074
 800f1cc:	08010044 	.word	0x08010044
 800f1d0:	08010064 	.word	0x08010064
 800f1d4:	08010024 	.word	0x08010024

0800f1d8 <abort>:
 800f1d8:	b508      	push	{r3, lr}
 800f1da:	2006      	movs	r0, #6
 800f1dc:	f000 f9d2 	bl	800f584 <raise>
 800f1e0:	2001      	movs	r0, #1
 800f1e2:	f7f6 fc87 	bl	8005af4 <_exit>
	...

0800f1e8 <_close_r>:
 800f1e8:	b538      	push	{r3, r4, r5, lr}
 800f1ea:	4d06      	ldr	r5, [pc, #24]	; (800f204 <_close_r+0x1c>)
 800f1ec:	2300      	movs	r3, #0
 800f1ee:	4604      	mov	r4, r0
 800f1f0:	4608      	mov	r0, r1
 800f1f2:	602b      	str	r3, [r5, #0]
 800f1f4:	f7f6 fcc1 	bl	8005b7a <_close>
 800f1f8:	1c43      	adds	r3, r0, #1
 800f1fa:	d102      	bne.n	800f202 <_close_r+0x1a>
 800f1fc:	682b      	ldr	r3, [r5, #0]
 800f1fe:	b103      	cbz	r3, 800f202 <_close_r+0x1a>
 800f200:	6023      	str	r3, [r4, #0]
 800f202:	bd38      	pop	{r3, r4, r5, pc}
 800f204:	2000074c 	.word	0x2000074c

0800f208 <__sflush_r>:
 800f208:	898a      	ldrh	r2, [r1, #12]
 800f20a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f20e:	4605      	mov	r5, r0
 800f210:	0710      	lsls	r0, r2, #28
 800f212:	460c      	mov	r4, r1
 800f214:	d458      	bmi.n	800f2c8 <__sflush_r+0xc0>
 800f216:	684b      	ldr	r3, [r1, #4]
 800f218:	2b00      	cmp	r3, #0
 800f21a:	dc05      	bgt.n	800f228 <__sflush_r+0x20>
 800f21c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f21e:	2b00      	cmp	r3, #0
 800f220:	dc02      	bgt.n	800f228 <__sflush_r+0x20>
 800f222:	2000      	movs	r0, #0
 800f224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f228:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f22a:	2e00      	cmp	r6, #0
 800f22c:	d0f9      	beq.n	800f222 <__sflush_r+0x1a>
 800f22e:	2300      	movs	r3, #0
 800f230:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f234:	682f      	ldr	r7, [r5, #0]
 800f236:	602b      	str	r3, [r5, #0]
 800f238:	d032      	beq.n	800f2a0 <__sflush_r+0x98>
 800f23a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f23c:	89a3      	ldrh	r3, [r4, #12]
 800f23e:	075a      	lsls	r2, r3, #29
 800f240:	d505      	bpl.n	800f24e <__sflush_r+0x46>
 800f242:	6863      	ldr	r3, [r4, #4]
 800f244:	1ac0      	subs	r0, r0, r3
 800f246:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f248:	b10b      	cbz	r3, 800f24e <__sflush_r+0x46>
 800f24a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f24c:	1ac0      	subs	r0, r0, r3
 800f24e:	2300      	movs	r3, #0
 800f250:	4602      	mov	r2, r0
 800f252:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f254:	6a21      	ldr	r1, [r4, #32]
 800f256:	4628      	mov	r0, r5
 800f258:	47b0      	blx	r6
 800f25a:	1c43      	adds	r3, r0, #1
 800f25c:	89a3      	ldrh	r3, [r4, #12]
 800f25e:	d106      	bne.n	800f26e <__sflush_r+0x66>
 800f260:	6829      	ldr	r1, [r5, #0]
 800f262:	291d      	cmp	r1, #29
 800f264:	d82c      	bhi.n	800f2c0 <__sflush_r+0xb8>
 800f266:	4a2a      	ldr	r2, [pc, #168]	; (800f310 <__sflush_r+0x108>)
 800f268:	40ca      	lsrs	r2, r1
 800f26a:	07d6      	lsls	r6, r2, #31
 800f26c:	d528      	bpl.n	800f2c0 <__sflush_r+0xb8>
 800f26e:	2200      	movs	r2, #0
 800f270:	6062      	str	r2, [r4, #4]
 800f272:	04d9      	lsls	r1, r3, #19
 800f274:	6922      	ldr	r2, [r4, #16]
 800f276:	6022      	str	r2, [r4, #0]
 800f278:	d504      	bpl.n	800f284 <__sflush_r+0x7c>
 800f27a:	1c42      	adds	r2, r0, #1
 800f27c:	d101      	bne.n	800f282 <__sflush_r+0x7a>
 800f27e:	682b      	ldr	r3, [r5, #0]
 800f280:	b903      	cbnz	r3, 800f284 <__sflush_r+0x7c>
 800f282:	6560      	str	r0, [r4, #84]	; 0x54
 800f284:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f286:	602f      	str	r7, [r5, #0]
 800f288:	2900      	cmp	r1, #0
 800f28a:	d0ca      	beq.n	800f222 <__sflush_r+0x1a>
 800f28c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f290:	4299      	cmp	r1, r3
 800f292:	d002      	beq.n	800f29a <__sflush_r+0x92>
 800f294:	4628      	mov	r0, r5
 800f296:	f7ff fae9 	bl	800e86c <_free_r>
 800f29a:	2000      	movs	r0, #0
 800f29c:	6360      	str	r0, [r4, #52]	; 0x34
 800f29e:	e7c1      	b.n	800f224 <__sflush_r+0x1c>
 800f2a0:	6a21      	ldr	r1, [r4, #32]
 800f2a2:	2301      	movs	r3, #1
 800f2a4:	4628      	mov	r0, r5
 800f2a6:	47b0      	blx	r6
 800f2a8:	1c41      	adds	r1, r0, #1
 800f2aa:	d1c7      	bne.n	800f23c <__sflush_r+0x34>
 800f2ac:	682b      	ldr	r3, [r5, #0]
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d0c4      	beq.n	800f23c <__sflush_r+0x34>
 800f2b2:	2b1d      	cmp	r3, #29
 800f2b4:	d001      	beq.n	800f2ba <__sflush_r+0xb2>
 800f2b6:	2b16      	cmp	r3, #22
 800f2b8:	d101      	bne.n	800f2be <__sflush_r+0xb6>
 800f2ba:	602f      	str	r7, [r5, #0]
 800f2bc:	e7b1      	b.n	800f222 <__sflush_r+0x1a>
 800f2be:	89a3      	ldrh	r3, [r4, #12]
 800f2c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f2c4:	81a3      	strh	r3, [r4, #12]
 800f2c6:	e7ad      	b.n	800f224 <__sflush_r+0x1c>
 800f2c8:	690f      	ldr	r7, [r1, #16]
 800f2ca:	2f00      	cmp	r7, #0
 800f2cc:	d0a9      	beq.n	800f222 <__sflush_r+0x1a>
 800f2ce:	0793      	lsls	r3, r2, #30
 800f2d0:	680e      	ldr	r6, [r1, #0]
 800f2d2:	bf08      	it	eq
 800f2d4:	694b      	ldreq	r3, [r1, #20]
 800f2d6:	600f      	str	r7, [r1, #0]
 800f2d8:	bf18      	it	ne
 800f2da:	2300      	movne	r3, #0
 800f2dc:	eba6 0807 	sub.w	r8, r6, r7
 800f2e0:	608b      	str	r3, [r1, #8]
 800f2e2:	f1b8 0f00 	cmp.w	r8, #0
 800f2e6:	dd9c      	ble.n	800f222 <__sflush_r+0x1a>
 800f2e8:	6a21      	ldr	r1, [r4, #32]
 800f2ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f2ec:	4643      	mov	r3, r8
 800f2ee:	463a      	mov	r2, r7
 800f2f0:	4628      	mov	r0, r5
 800f2f2:	47b0      	blx	r6
 800f2f4:	2800      	cmp	r0, #0
 800f2f6:	dc06      	bgt.n	800f306 <__sflush_r+0xfe>
 800f2f8:	89a3      	ldrh	r3, [r4, #12]
 800f2fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f2fe:	81a3      	strh	r3, [r4, #12]
 800f300:	f04f 30ff 	mov.w	r0, #4294967295
 800f304:	e78e      	b.n	800f224 <__sflush_r+0x1c>
 800f306:	4407      	add	r7, r0
 800f308:	eba8 0800 	sub.w	r8, r8, r0
 800f30c:	e7e9      	b.n	800f2e2 <__sflush_r+0xda>
 800f30e:	bf00      	nop
 800f310:	20400001 	.word	0x20400001

0800f314 <_fflush_r>:
 800f314:	b538      	push	{r3, r4, r5, lr}
 800f316:	690b      	ldr	r3, [r1, #16]
 800f318:	4605      	mov	r5, r0
 800f31a:	460c      	mov	r4, r1
 800f31c:	b913      	cbnz	r3, 800f324 <_fflush_r+0x10>
 800f31e:	2500      	movs	r5, #0
 800f320:	4628      	mov	r0, r5
 800f322:	bd38      	pop	{r3, r4, r5, pc}
 800f324:	b118      	cbz	r0, 800f32e <_fflush_r+0x1a>
 800f326:	6983      	ldr	r3, [r0, #24]
 800f328:	b90b      	cbnz	r3, 800f32e <_fflush_r+0x1a>
 800f32a:	f7fe f995 	bl	800d658 <__sinit>
 800f32e:	4b14      	ldr	r3, [pc, #80]	; (800f380 <_fflush_r+0x6c>)
 800f330:	429c      	cmp	r4, r3
 800f332:	d11b      	bne.n	800f36c <_fflush_r+0x58>
 800f334:	686c      	ldr	r4, [r5, #4]
 800f336:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d0ef      	beq.n	800f31e <_fflush_r+0xa>
 800f33e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f340:	07d0      	lsls	r0, r2, #31
 800f342:	d404      	bmi.n	800f34e <_fflush_r+0x3a>
 800f344:	0599      	lsls	r1, r3, #22
 800f346:	d402      	bmi.n	800f34e <_fflush_r+0x3a>
 800f348:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f34a:	f7fe fda8 	bl	800de9e <__retarget_lock_acquire_recursive>
 800f34e:	4628      	mov	r0, r5
 800f350:	4621      	mov	r1, r4
 800f352:	f7ff ff59 	bl	800f208 <__sflush_r>
 800f356:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f358:	07da      	lsls	r2, r3, #31
 800f35a:	4605      	mov	r5, r0
 800f35c:	d4e0      	bmi.n	800f320 <_fflush_r+0xc>
 800f35e:	89a3      	ldrh	r3, [r4, #12]
 800f360:	059b      	lsls	r3, r3, #22
 800f362:	d4dd      	bmi.n	800f320 <_fflush_r+0xc>
 800f364:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f366:	f7fe fd9b 	bl	800dea0 <__retarget_lock_release_recursive>
 800f36a:	e7d9      	b.n	800f320 <_fflush_r+0xc>
 800f36c:	4b05      	ldr	r3, [pc, #20]	; (800f384 <_fflush_r+0x70>)
 800f36e:	429c      	cmp	r4, r3
 800f370:	d101      	bne.n	800f376 <_fflush_r+0x62>
 800f372:	68ac      	ldr	r4, [r5, #8]
 800f374:	e7df      	b.n	800f336 <_fflush_r+0x22>
 800f376:	4b04      	ldr	r3, [pc, #16]	; (800f388 <_fflush_r+0x74>)
 800f378:	429c      	cmp	r4, r3
 800f37a:	bf08      	it	eq
 800f37c:	68ec      	ldreq	r4, [r5, #12]
 800f37e:	e7da      	b.n	800f336 <_fflush_r+0x22>
 800f380:	08010044 	.word	0x08010044
 800f384:	08010064 	.word	0x08010064
 800f388:	08010024 	.word	0x08010024

0800f38c <_lseek_r>:
 800f38c:	b538      	push	{r3, r4, r5, lr}
 800f38e:	4d07      	ldr	r5, [pc, #28]	; (800f3ac <_lseek_r+0x20>)
 800f390:	4604      	mov	r4, r0
 800f392:	4608      	mov	r0, r1
 800f394:	4611      	mov	r1, r2
 800f396:	2200      	movs	r2, #0
 800f398:	602a      	str	r2, [r5, #0]
 800f39a:	461a      	mov	r2, r3
 800f39c:	f7f6 fc14 	bl	8005bc8 <_lseek>
 800f3a0:	1c43      	adds	r3, r0, #1
 800f3a2:	d102      	bne.n	800f3aa <_lseek_r+0x1e>
 800f3a4:	682b      	ldr	r3, [r5, #0]
 800f3a6:	b103      	cbz	r3, 800f3aa <_lseek_r+0x1e>
 800f3a8:	6023      	str	r3, [r4, #0]
 800f3aa:	bd38      	pop	{r3, r4, r5, pc}
 800f3ac:	2000074c 	.word	0x2000074c

0800f3b0 <__swhatbuf_r>:
 800f3b0:	b570      	push	{r4, r5, r6, lr}
 800f3b2:	460e      	mov	r6, r1
 800f3b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f3b8:	2900      	cmp	r1, #0
 800f3ba:	b096      	sub	sp, #88	; 0x58
 800f3bc:	4614      	mov	r4, r2
 800f3be:	461d      	mov	r5, r3
 800f3c0:	da07      	bge.n	800f3d2 <__swhatbuf_r+0x22>
 800f3c2:	2300      	movs	r3, #0
 800f3c4:	602b      	str	r3, [r5, #0]
 800f3c6:	89b3      	ldrh	r3, [r6, #12]
 800f3c8:	061a      	lsls	r2, r3, #24
 800f3ca:	d410      	bmi.n	800f3ee <__swhatbuf_r+0x3e>
 800f3cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f3d0:	e00e      	b.n	800f3f0 <__swhatbuf_r+0x40>
 800f3d2:	466a      	mov	r2, sp
 800f3d4:	f000 f8f2 	bl	800f5bc <_fstat_r>
 800f3d8:	2800      	cmp	r0, #0
 800f3da:	dbf2      	blt.n	800f3c2 <__swhatbuf_r+0x12>
 800f3dc:	9a01      	ldr	r2, [sp, #4]
 800f3de:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f3e2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f3e6:	425a      	negs	r2, r3
 800f3e8:	415a      	adcs	r2, r3
 800f3ea:	602a      	str	r2, [r5, #0]
 800f3ec:	e7ee      	b.n	800f3cc <__swhatbuf_r+0x1c>
 800f3ee:	2340      	movs	r3, #64	; 0x40
 800f3f0:	2000      	movs	r0, #0
 800f3f2:	6023      	str	r3, [r4, #0]
 800f3f4:	b016      	add	sp, #88	; 0x58
 800f3f6:	bd70      	pop	{r4, r5, r6, pc}

0800f3f8 <__smakebuf_r>:
 800f3f8:	898b      	ldrh	r3, [r1, #12]
 800f3fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f3fc:	079d      	lsls	r5, r3, #30
 800f3fe:	4606      	mov	r6, r0
 800f400:	460c      	mov	r4, r1
 800f402:	d507      	bpl.n	800f414 <__smakebuf_r+0x1c>
 800f404:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f408:	6023      	str	r3, [r4, #0]
 800f40a:	6123      	str	r3, [r4, #16]
 800f40c:	2301      	movs	r3, #1
 800f40e:	6163      	str	r3, [r4, #20]
 800f410:	b002      	add	sp, #8
 800f412:	bd70      	pop	{r4, r5, r6, pc}
 800f414:	ab01      	add	r3, sp, #4
 800f416:	466a      	mov	r2, sp
 800f418:	f7ff ffca 	bl	800f3b0 <__swhatbuf_r>
 800f41c:	9900      	ldr	r1, [sp, #0]
 800f41e:	4605      	mov	r5, r0
 800f420:	4630      	mov	r0, r6
 800f422:	f7ff fa73 	bl	800e90c <_malloc_r>
 800f426:	b948      	cbnz	r0, 800f43c <__smakebuf_r+0x44>
 800f428:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f42c:	059a      	lsls	r2, r3, #22
 800f42e:	d4ef      	bmi.n	800f410 <__smakebuf_r+0x18>
 800f430:	f023 0303 	bic.w	r3, r3, #3
 800f434:	f043 0302 	orr.w	r3, r3, #2
 800f438:	81a3      	strh	r3, [r4, #12]
 800f43a:	e7e3      	b.n	800f404 <__smakebuf_r+0xc>
 800f43c:	4b0d      	ldr	r3, [pc, #52]	; (800f474 <__smakebuf_r+0x7c>)
 800f43e:	62b3      	str	r3, [r6, #40]	; 0x28
 800f440:	89a3      	ldrh	r3, [r4, #12]
 800f442:	6020      	str	r0, [r4, #0]
 800f444:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f448:	81a3      	strh	r3, [r4, #12]
 800f44a:	9b00      	ldr	r3, [sp, #0]
 800f44c:	6163      	str	r3, [r4, #20]
 800f44e:	9b01      	ldr	r3, [sp, #4]
 800f450:	6120      	str	r0, [r4, #16]
 800f452:	b15b      	cbz	r3, 800f46c <__smakebuf_r+0x74>
 800f454:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f458:	4630      	mov	r0, r6
 800f45a:	f000 f8c1 	bl	800f5e0 <_isatty_r>
 800f45e:	b128      	cbz	r0, 800f46c <__smakebuf_r+0x74>
 800f460:	89a3      	ldrh	r3, [r4, #12]
 800f462:	f023 0303 	bic.w	r3, r3, #3
 800f466:	f043 0301 	orr.w	r3, r3, #1
 800f46a:	81a3      	strh	r3, [r4, #12]
 800f46c:	89a0      	ldrh	r0, [r4, #12]
 800f46e:	4305      	orrs	r5, r0
 800f470:	81a5      	strh	r5, [r4, #12]
 800f472:	e7cd      	b.n	800f410 <__smakebuf_r+0x18>
 800f474:	0800d5f1 	.word	0x0800d5f1

0800f478 <memmove>:
 800f478:	4288      	cmp	r0, r1
 800f47a:	b510      	push	{r4, lr}
 800f47c:	eb01 0402 	add.w	r4, r1, r2
 800f480:	d902      	bls.n	800f488 <memmove+0x10>
 800f482:	4284      	cmp	r4, r0
 800f484:	4623      	mov	r3, r4
 800f486:	d807      	bhi.n	800f498 <memmove+0x20>
 800f488:	1e43      	subs	r3, r0, #1
 800f48a:	42a1      	cmp	r1, r4
 800f48c:	d008      	beq.n	800f4a0 <memmove+0x28>
 800f48e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f492:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f496:	e7f8      	b.n	800f48a <memmove+0x12>
 800f498:	4402      	add	r2, r0
 800f49a:	4601      	mov	r1, r0
 800f49c:	428a      	cmp	r2, r1
 800f49e:	d100      	bne.n	800f4a2 <memmove+0x2a>
 800f4a0:	bd10      	pop	{r4, pc}
 800f4a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f4a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f4aa:	e7f7      	b.n	800f49c <memmove+0x24>

0800f4ac <__malloc_lock>:
 800f4ac:	4801      	ldr	r0, [pc, #4]	; (800f4b4 <__malloc_lock+0x8>)
 800f4ae:	f7fe bcf6 	b.w	800de9e <__retarget_lock_acquire_recursive>
 800f4b2:	bf00      	nop
 800f4b4:	20000744 	.word	0x20000744

0800f4b8 <__malloc_unlock>:
 800f4b8:	4801      	ldr	r0, [pc, #4]	; (800f4c0 <__malloc_unlock+0x8>)
 800f4ba:	f7fe bcf1 	b.w	800dea0 <__retarget_lock_release_recursive>
 800f4be:	bf00      	nop
 800f4c0:	20000744 	.word	0x20000744

0800f4c4 <_realloc_r>:
 800f4c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4c6:	4607      	mov	r7, r0
 800f4c8:	4614      	mov	r4, r2
 800f4ca:	460e      	mov	r6, r1
 800f4cc:	b921      	cbnz	r1, 800f4d8 <_realloc_r+0x14>
 800f4ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f4d2:	4611      	mov	r1, r2
 800f4d4:	f7ff ba1a 	b.w	800e90c <_malloc_r>
 800f4d8:	b922      	cbnz	r2, 800f4e4 <_realloc_r+0x20>
 800f4da:	f7ff f9c7 	bl	800e86c <_free_r>
 800f4de:	4625      	mov	r5, r4
 800f4e0:	4628      	mov	r0, r5
 800f4e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f4e4:	f000 f88c 	bl	800f600 <_malloc_usable_size_r>
 800f4e8:	42a0      	cmp	r0, r4
 800f4ea:	d20f      	bcs.n	800f50c <_realloc_r+0x48>
 800f4ec:	4621      	mov	r1, r4
 800f4ee:	4638      	mov	r0, r7
 800f4f0:	f7ff fa0c 	bl	800e90c <_malloc_r>
 800f4f4:	4605      	mov	r5, r0
 800f4f6:	2800      	cmp	r0, #0
 800f4f8:	d0f2      	beq.n	800f4e0 <_realloc_r+0x1c>
 800f4fa:	4631      	mov	r1, r6
 800f4fc:	4622      	mov	r2, r4
 800f4fe:	f7fb fd8d 	bl	800b01c <memcpy>
 800f502:	4631      	mov	r1, r6
 800f504:	4638      	mov	r0, r7
 800f506:	f7ff f9b1 	bl	800e86c <_free_r>
 800f50a:	e7e9      	b.n	800f4e0 <_realloc_r+0x1c>
 800f50c:	4635      	mov	r5, r6
 800f50e:	e7e7      	b.n	800f4e0 <_realloc_r+0x1c>

0800f510 <_read_r>:
 800f510:	b538      	push	{r3, r4, r5, lr}
 800f512:	4d07      	ldr	r5, [pc, #28]	; (800f530 <_read_r+0x20>)
 800f514:	4604      	mov	r4, r0
 800f516:	4608      	mov	r0, r1
 800f518:	4611      	mov	r1, r2
 800f51a:	2200      	movs	r2, #0
 800f51c:	602a      	str	r2, [r5, #0]
 800f51e:	461a      	mov	r2, r3
 800f520:	f7f6 faf2 	bl	8005b08 <_read>
 800f524:	1c43      	adds	r3, r0, #1
 800f526:	d102      	bne.n	800f52e <_read_r+0x1e>
 800f528:	682b      	ldr	r3, [r5, #0]
 800f52a:	b103      	cbz	r3, 800f52e <_read_r+0x1e>
 800f52c:	6023      	str	r3, [r4, #0]
 800f52e:	bd38      	pop	{r3, r4, r5, pc}
 800f530:	2000074c 	.word	0x2000074c

0800f534 <_raise_r>:
 800f534:	291f      	cmp	r1, #31
 800f536:	b538      	push	{r3, r4, r5, lr}
 800f538:	4604      	mov	r4, r0
 800f53a:	460d      	mov	r5, r1
 800f53c:	d904      	bls.n	800f548 <_raise_r+0x14>
 800f53e:	2316      	movs	r3, #22
 800f540:	6003      	str	r3, [r0, #0]
 800f542:	f04f 30ff 	mov.w	r0, #4294967295
 800f546:	bd38      	pop	{r3, r4, r5, pc}
 800f548:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f54a:	b112      	cbz	r2, 800f552 <_raise_r+0x1e>
 800f54c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f550:	b94b      	cbnz	r3, 800f566 <_raise_r+0x32>
 800f552:	4620      	mov	r0, r4
 800f554:	f000 f830 	bl	800f5b8 <_getpid_r>
 800f558:	462a      	mov	r2, r5
 800f55a:	4601      	mov	r1, r0
 800f55c:	4620      	mov	r0, r4
 800f55e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f562:	f000 b817 	b.w	800f594 <_kill_r>
 800f566:	2b01      	cmp	r3, #1
 800f568:	d00a      	beq.n	800f580 <_raise_r+0x4c>
 800f56a:	1c59      	adds	r1, r3, #1
 800f56c:	d103      	bne.n	800f576 <_raise_r+0x42>
 800f56e:	2316      	movs	r3, #22
 800f570:	6003      	str	r3, [r0, #0]
 800f572:	2001      	movs	r0, #1
 800f574:	e7e7      	b.n	800f546 <_raise_r+0x12>
 800f576:	2400      	movs	r4, #0
 800f578:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f57c:	4628      	mov	r0, r5
 800f57e:	4798      	blx	r3
 800f580:	2000      	movs	r0, #0
 800f582:	e7e0      	b.n	800f546 <_raise_r+0x12>

0800f584 <raise>:
 800f584:	4b02      	ldr	r3, [pc, #8]	; (800f590 <raise+0xc>)
 800f586:	4601      	mov	r1, r0
 800f588:	6818      	ldr	r0, [r3, #0]
 800f58a:	f7ff bfd3 	b.w	800f534 <_raise_r>
 800f58e:	bf00      	nop
 800f590:	20000074 	.word	0x20000074

0800f594 <_kill_r>:
 800f594:	b538      	push	{r3, r4, r5, lr}
 800f596:	4d07      	ldr	r5, [pc, #28]	; (800f5b4 <_kill_r+0x20>)
 800f598:	2300      	movs	r3, #0
 800f59a:	4604      	mov	r4, r0
 800f59c:	4608      	mov	r0, r1
 800f59e:	4611      	mov	r1, r2
 800f5a0:	602b      	str	r3, [r5, #0]
 800f5a2:	f7f6 fa97 	bl	8005ad4 <_kill>
 800f5a6:	1c43      	adds	r3, r0, #1
 800f5a8:	d102      	bne.n	800f5b0 <_kill_r+0x1c>
 800f5aa:	682b      	ldr	r3, [r5, #0]
 800f5ac:	b103      	cbz	r3, 800f5b0 <_kill_r+0x1c>
 800f5ae:	6023      	str	r3, [r4, #0]
 800f5b0:	bd38      	pop	{r3, r4, r5, pc}
 800f5b2:	bf00      	nop
 800f5b4:	2000074c 	.word	0x2000074c

0800f5b8 <_getpid_r>:
 800f5b8:	f7f6 ba84 	b.w	8005ac4 <_getpid>

0800f5bc <_fstat_r>:
 800f5bc:	b538      	push	{r3, r4, r5, lr}
 800f5be:	4d07      	ldr	r5, [pc, #28]	; (800f5dc <_fstat_r+0x20>)
 800f5c0:	2300      	movs	r3, #0
 800f5c2:	4604      	mov	r4, r0
 800f5c4:	4608      	mov	r0, r1
 800f5c6:	4611      	mov	r1, r2
 800f5c8:	602b      	str	r3, [r5, #0]
 800f5ca:	f7f6 fae2 	bl	8005b92 <_fstat>
 800f5ce:	1c43      	adds	r3, r0, #1
 800f5d0:	d102      	bne.n	800f5d8 <_fstat_r+0x1c>
 800f5d2:	682b      	ldr	r3, [r5, #0]
 800f5d4:	b103      	cbz	r3, 800f5d8 <_fstat_r+0x1c>
 800f5d6:	6023      	str	r3, [r4, #0]
 800f5d8:	bd38      	pop	{r3, r4, r5, pc}
 800f5da:	bf00      	nop
 800f5dc:	2000074c 	.word	0x2000074c

0800f5e0 <_isatty_r>:
 800f5e0:	b538      	push	{r3, r4, r5, lr}
 800f5e2:	4d06      	ldr	r5, [pc, #24]	; (800f5fc <_isatty_r+0x1c>)
 800f5e4:	2300      	movs	r3, #0
 800f5e6:	4604      	mov	r4, r0
 800f5e8:	4608      	mov	r0, r1
 800f5ea:	602b      	str	r3, [r5, #0]
 800f5ec:	f7f6 fae1 	bl	8005bb2 <_isatty>
 800f5f0:	1c43      	adds	r3, r0, #1
 800f5f2:	d102      	bne.n	800f5fa <_isatty_r+0x1a>
 800f5f4:	682b      	ldr	r3, [r5, #0]
 800f5f6:	b103      	cbz	r3, 800f5fa <_isatty_r+0x1a>
 800f5f8:	6023      	str	r3, [r4, #0]
 800f5fa:	bd38      	pop	{r3, r4, r5, pc}
 800f5fc:	2000074c 	.word	0x2000074c

0800f600 <_malloc_usable_size_r>:
 800f600:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f604:	1f18      	subs	r0, r3, #4
 800f606:	2b00      	cmp	r3, #0
 800f608:	bfbc      	itt	lt
 800f60a:	580b      	ldrlt	r3, [r1, r0]
 800f60c:	18c0      	addlt	r0, r0, r3
 800f60e:	4770      	bx	lr

0800f610 <_init>:
 800f610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f612:	bf00      	nop
 800f614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f616:	bc08      	pop	{r3}
 800f618:	469e      	mov	lr, r3
 800f61a:	4770      	bx	lr

0800f61c <_fini>:
 800f61c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f61e:	bf00      	nop
 800f620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f622:	bc08      	pop	{r3}
 800f624:	469e      	mov	lr, r3
 800f626:	4770      	bx	lr

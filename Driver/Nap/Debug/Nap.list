
Nap.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ed70  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bf0  0800ef10  0800ef10  0001ef10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fb00  0800fb00  00020234  2**0
                  CONTENTS
  4 .ARM          00000008  0800fb00  0800fb00  0001fb00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fb08  0800fb08  00020234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fb08  0800fb08  0001fb08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fb0c  0800fb0c  0001fb0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000234  20000000  0800fb10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000534  20000234  0800fd44  00020234  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000768  0800fd44  00020768  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024b12  00000000  00000000  00020264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004367  00000000  00000000  00044d76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001798  00000000  00000000  000490e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001650  00000000  00000000  0004a878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bad6  00000000  00000000  0004bec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e506  00000000  00000000  0006799e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0479  00000000  00000000  00085ea4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012631d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007930  00000000  00000000  00126370  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000234 	.word	0x20000234
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800eef8 	.word	0x0800eef8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000238 	.word	0x20000238
 80001dc:	0800eef8 	.word	0x0800eef8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a4 	b.w	8000ff8 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468c      	mov	ip, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	f040 8083 	bne.w	8000e4a <__udivmoddi4+0x116>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d947      	bls.n	8000dda <__udivmoddi4+0xa6>
 8000d4a:	fab2 f282 	clz	r2, r2
 8000d4e:	b142      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	f1c2 0020 	rsb	r0, r2, #32
 8000d54:	fa24 f000 	lsr.w	r0, r4, r0
 8000d58:	4091      	lsls	r1, r2
 8000d5a:	4097      	lsls	r7, r2
 8000d5c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d60:	4094      	lsls	r4, r2
 8000d62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d66:	0c23      	lsrs	r3, r4, #16
 8000d68:	fbbc f6f8 	udiv	r6, ip, r8
 8000d6c:	fa1f fe87 	uxth.w	lr, r7
 8000d70:	fb08 c116 	mls	r1, r8, r6, ip
 8000d74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d78:	fb06 f10e 	mul.w	r1, r6, lr
 8000d7c:	4299      	cmp	r1, r3
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x60>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d86:	f080 8119 	bcs.w	8000fbc <__udivmoddi4+0x288>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 8116 	bls.w	8000fbc <__udivmoddi4+0x288>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b2a4      	uxth	r4, r4
 8000d98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000da0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	d909      	bls.n	8000dc0 <__udivmoddi4+0x8c>
 8000dac:	193c      	adds	r4, r7, r4
 8000dae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db2:	f080 8105 	bcs.w	8000fc0 <__udivmoddi4+0x28c>
 8000db6:	45a6      	cmp	lr, r4
 8000db8:	f240 8102 	bls.w	8000fc0 <__udivmoddi4+0x28c>
 8000dbc:	3802      	subs	r0, #2
 8000dbe:	443c      	add	r4, r7
 8000dc0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc4:	eba4 040e 	sub.w	r4, r4, lr
 8000dc8:	2600      	movs	r6, #0
 8000dca:	b11d      	cbz	r5, 8000dd4 <__udivmoddi4+0xa0>
 8000dcc:	40d4      	lsrs	r4, r2
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	b902      	cbnz	r2, 8000dde <__udivmoddi4+0xaa>
 8000ddc:	deff      	udf	#255	; 0xff
 8000dde:	fab2 f282 	clz	r2, r2
 8000de2:	2a00      	cmp	r2, #0
 8000de4:	d150      	bne.n	8000e88 <__udivmoddi4+0x154>
 8000de6:	1bcb      	subs	r3, r1, r7
 8000de8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dec:	fa1f f887 	uxth.w	r8, r7
 8000df0:	2601      	movs	r6, #1
 8000df2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000df6:	0c21      	lsrs	r1, r4, #16
 8000df8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dfc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e00:	fb08 f30c 	mul.w	r3, r8, ip
 8000e04:	428b      	cmp	r3, r1
 8000e06:	d907      	bls.n	8000e18 <__udivmoddi4+0xe4>
 8000e08:	1879      	adds	r1, r7, r1
 8000e0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e0e:	d202      	bcs.n	8000e16 <__udivmoddi4+0xe2>
 8000e10:	428b      	cmp	r3, r1
 8000e12:	f200 80e9 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e16:	4684      	mov	ip, r0
 8000e18:	1ac9      	subs	r1, r1, r3
 8000e1a:	b2a3      	uxth	r3, r4
 8000e1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e28:	fb08 f800 	mul.w	r8, r8, r0
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	d907      	bls.n	8000e40 <__udivmoddi4+0x10c>
 8000e30:	193c      	adds	r4, r7, r4
 8000e32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x10a>
 8000e38:	45a0      	cmp	r8, r4
 8000e3a:	f200 80d9 	bhi.w	8000ff0 <__udivmoddi4+0x2bc>
 8000e3e:	4618      	mov	r0, r3
 8000e40:	eba4 0408 	sub.w	r4, r4, r8
 8000e44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e48:	e7bf      	b.n	8000dca <__udivmoddi4+0x96>
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d909      	bls.n	8000e62 <__udivmoddi4+0x12e>
 8000e4e:	2d00      	cmp	r5, #0
 8000e50:	f000 80b1 	beq.w	8000fb6 <__udivmoddi4+0x282>
 8000e54:	2600      	movs	r6, #0
 8000e56:	e9c5 0100 	strd	r0, r1, [r5]
 8000e5a:	4630      	mov	r0, r6
 8000e5c:	4631      	mov	r1, r6
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	fab3 f683 	clz	r6, r3
 8000e66:	2e00      	cmp	r6, #0
 8000e68:	d14a      	bne.n	8000f00 <__udivmoddi4+0x1cc>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d302      	bcc.n	8000e74 <__udivmoddi4+0x140>
 8000e6e:	4282      	cmp	r2, r0
 8000e70:	f200 80b8 	bhi.w	8000fe4 <__udivmoddi4+0x2b0>
 8000e74:	1a84      	subs	r4, r0, r2
 8000e76:	eb61 0103 	sbc.w	r1, r1, r3
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	468c      	mov	ip, r1
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	d0a8      	beq.n	8000dd4 <__udivmoddi4+0xa0>
 8000e82:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e86:	e7a5      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e90:	4097      	lsls	r7, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e9a:	40d9      	lsrs	r1, r3
 8000e9c:	4330      	orrs	r0, r6
 8000e9e:	0c03      	lsrs	r3, r0, #16
 8000ea0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ea4:	fa1f f887 	uxth.w	r8, r7
 8000ea8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000eac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eb0:	fb06 f108 	mul.w	r1, r6, r8
 8000eb4:	4299      	cmp	r1, r3
 8000eb6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eba:	d909      	bls.n	8000ed0 <__udivmoddi4+0x19c>
 8000ebc:	18fb      	adds	r3, r7, r3
 8000ebe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ec2:	f080 808d 	bcs.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ec6:	4299      	cmp	r1, r3
 8000ec8:	f240 808a 	bls.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	443b      	add	r3, r7
 8000ed0:	1a5b      	subs	r3, r3, r1
 8000ed2:	b281      	uxth	r1, r0
 8000ed4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000edc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee0:	fb00 f308 	mul.w	r3, r0, r8
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	d907      	bls.n	8000ef8 <__udivmoddi4+0x1c4>
 8000ee8:	1879      	adds	r1, r7, r1
 8000eea:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eee:	d273      	bcs.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef0:	428b      	cmp	r3, r1
 8000ef2:	d971      	bls.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4439      	add	r1, r7
 8000ef8:	1acb      	subs	r3, r1, r3
 8000efa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000efe:	e778      	b.n	8000df2 <__udivmoddi4+0xbe>
 8000f00:	f1c6 0c20 	rsb	ip, r6, #32
 8000f04:	fa03 f406 	lsl.w	r4, r3, r6
 8000f08:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f0c:	431c      	orrs	r4, r3
 8000f0e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f12:	fa01 f306 	lsl.w	r3, r1, r6
 8000f16:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f1a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f1e:	431f      	orrs	r7, r3
 8000f20:	0c3b      	lsrs	r3, r7, #16
 8000f22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f26:	fa1f f884 	uxth.w	r8, r4
 8000f2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f2e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f32:	fb09 fa08 	mul.w	sl, r9, r8
 8000f36:	458a      	cmp	sl, r1
 8000f38:	fa02 f206 	lsl.w	r2, r2, r6
 8000f3c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f40:	d908      	bls.n	8000f54 <__udivmoddi4+0x220>
 8000f42:	1861      	adds	r1, r4, r1
 8000f44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f48:	d248      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4a:	458a      	cmp	sl, r1
 8000f4c:	d946      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f52:	4421      	add	r1, r4
 8000f54:	eba1 010a 	sub.w	r1, r1, sl
 8000f58:	b2bf      	uxth	r7, r7
 8000f5a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f62:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f66:	fb00 f808 	mul.w	r8, r0, r8
 8000f6a:	45b8      	cmp	r8, r7
 8000f6c:	d907      	bls.n	8000f7e <__udivmoddi4+0x24a>
 8000f6e:	19e7      	adds	r7, r4, r7
 8000f70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f74:	d22e      	bcs.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f76:	45b8      	cmp	r8, r7
 8000f78:	d92c      	bls.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f7a:	3802      	subs	r0, #2
 8000f7c:	4427      	add	r7, r4
 8000f7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f82:	eba7 0708 	sub.w	r7, r7, r8
 8000f86:	fba0 8902 	umull	r8, r9, r0, r2
 8000f8a:	454f      	cmp	r7, r9
 8000f8c:	46c6      	mov	lr, r8
 8000f8e:	4649      	mov	r1, r9
 8000f90:	d31a      	bcc.n	8000fc8 <__udivmoddi4+0x294>
 8000f92:	d017      	beq.n	8000fc4 <__udivmoddi4+0x290>
 8000f94:	b15d      	cbz	r5, 8000fae <__udivmoddi4+0x27a>
 8000f96:	ebb3 020e 	subs.w	r2, r3, lr
 8000f9a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f9e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fa2:	40f2      	lsrs	r2, r6
 8000fa4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fa8:	40f7      	lsrs	r7, r6
 8000faa:	e9c5 2700 	strd	r2, r7, [r5]
 8000fae:	2600      	movs	r6, #0
 8000fb0:	4631      	mov	r1, r6
 8000fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e70b      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e9      	b.n	8000d94 <__udivmoddi4+0x60>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6fd      	b.n	8000dc0 <__udivmoddi4+0x8c>
 8000fc4:	4543      	cmp	r3, r8
 8000fc6:	d2e5      	bcs.n	8000f94 <__udivmoddi4+0x260>
 8000fc8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fcc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7df      	b.n	8000f94 <__udivmoddi4+0x260>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e7d2      	b.n	8000f7e <__udivmoddi4+0x24a>
 8000fd8:	4660      	mov	r0, ip
 8000fda:	e78d      	b.n	8000ef8 <__udivmoddi4+0x1c4>
 8000fdc:	4681      	mov	r9, r0
 8000fde:	e7b9      	b.n	8000f54 <__udivmoddi4+0x220>
 8000fe0:	4666      	mov	r6, ip
 8000fe2:	e775      	b.n	8000ed0 <__udivmoddi4+0x19c>
 8000fe4:	4630      	mov	r0, r6
 8000fe6:	e74a      	b.n	8000e7e <__udivmoddi4+0x14a>
 8000fe8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fec:	4439      	add	r1, r7
 8000fee:	e713      	b.n	8000e18 <__udivmoddi4+0xe4>
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	443c      	add	r4, r7
 8000ff4:	e724      	b.n	8000e40 <__udivmoddi4+0x10c>
 8000ff6:	bf00      	nop

08000ff8 <__aeabi_idiv0>:
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <Menu_system_control>:
static void Path_Solver(uint8_t line_no);
static void Path_show(void);
void Running(void);

/* Function declaration ----------------------------------------------------*/
void Menu_system_control(uint8_t Menu_type, uint8_t line) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	460a      	mov	r2, r1
 8001006:	71fb      	strb	r3, [r7, #7]
 8001008:	4613      	mov	r3, r2
 800100a:	71bb      	strb	r3, [r7, #6]
	switch (Menu_type) {
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	2b09      	cmp	r3, #9
 8001010:	d839      	bhi.n	8001086 <Menu_system_control+0x8a>
 8001012:	a201      	add	r2, pc, #4	; (adr r2, 8001018 <Menu_system_control+0x1c>)
 8001014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001018:	08001041 	.word	0x08001041
 800101c:	08001047 	.word	0x08001047
 8001020:	08001051 	.word	0x08001051
 8001024:	08001057 	.word	0x08001057
 8001028:	08001061 	.word	0x08001061
 800102c:	0800106b 	.word	0x0800106b
 8001030:	08001071 	.word	0x08001071
 8001034:	08001087 	.word	0x08001087
 8001038:	08001077 	.word	0x08001077
 800103c:	08001081 	.word	0x08001081
	case Running_Process:
		Running();
 8001040:	f002 feb2 	bl	8003da8 <Running>
		break;
 8001044:	e01f      	b.n	8001086 <Menu_system_control+0x8a>
	case Main_menu:
		Mainmenu(line);
 8001046:	79bb      	ldrb	r3, [r7, #6]
 8001048:	4618      	mov	r0, r3
 800104a:	f000 f821 	bl	8001090 <Mainmenu>
		break;
 800104e:	e01a      	b.n	8001086 <Menu_system_control+0x8a>
	case Color_Processing:
		Color_Studying_process();
 8001050:	f000 fad6 	bl	8001600 <Color_Studying_process>
		break;
 8001054:	e017      	b.n	8001086 <Menu_system_control+0x8a>
	case PID_Menu:
		PID_menu(line);
 8001056:	79bb      	ldrb	r3, [r7, #6]
 8001058:	4618      	mov	r0, r3
 800105a:	f000 f923 	bl	80012a4 <PID_menu>
		break;
 800105e:	e012      	b.n	8001086 <Menu_system_control+0x8a>
	case Engine_menu:
		Speed_menu(line);
 8001060:	79bb      	ldrb	r3, [r7, #6]
 8001062:	4618      	mov	r0, r3
 8001064:	f000 fa3c 	bl	80014e0 <Speed_menu>
		break;
 8001068:	e00d      	b.n	8001086 <Menu_system_control+0x8a>
	case LineDetect_Show:
		LineDetect_show();
 800106a:	f000 fb63 	bl	8001734 <LineDetect_show>
		break;
 800106e:	e00a      	b.n	8001086 <Menu_system_control+0x8a>
	case Wifi_connect:
		Wifi_Connect_establish();
 8001070:	f000 fc72 	bl	8001958 <Wifi_Connect_establish>
		break;
 8001074:	e007      	b.n	8001086 <Menu_system_control+0x8a>
	case Path_solver_menu:
		Path_Solver(line);
 8001076:	79bb      	ldrb	r3, [r7, #6]
 8001078:	4618      	mov	r0, r3
 800107a:	f000 fc79 	bl	8001970 <Path_Solver>
		break;
 800107e:	e002      	b.n	8001086 <Menu_system_control+0x8a>
	case Path_show_menu:
		Path_show();
 8001080:	f000 fd50 	bl	8001b24 <Path_show>
		break;
 8001084:	bf00      	nop
	}
}
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop

08001090 <Mainmenu>:

static void Mainmenu(uint8_t line) {
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	71fb      	strb	r3, [r7, #7]
	switch (line) {
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	3b01      	subs	r3, #1
 800109e:	2b07      	cmp	r3, #7
 80010a0:	f200 80dc 	bhi.w	800125c <Mainmenu+0x1cc>
 80010a4:	a201      	add	r2, pc, #4	; (adr r2, 80010ac <Mainmenu+0x1c>)
 80010a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010aa:	bf00      	nop
 80010ac:	080010cd 	.word	0x080010cd
 80010b0:	080010ff 	.word	0x080010ff
 80010b4:	08001131 	.word	0x08001131
 80010b8:	08001163 	.word	0x08001163
 80010bc:	08001195 	.word	0x08001195
 80010c0:	080011c7 	.word	0x080011c7
 80010c4:	080011f9 	.word	0x080011f9
 80010c8:	0800122b 	.word	0x0800122b
	case 1:
		lcd_send_cmd(0x80 | 0x00);
 80010cc:	2080      	movs	r0, #128	; 0x80
 80010ce:	f000 ff5d 	bl	8001f8c <lcd_send_cmd>
		lcd_send_string(">Car Run            ");
 80010d2:	4864      	ldr	r0, [pc, #400]	; (8001264 <Mainmenu+0x1d4>)
 80010d4:	f001 f80b 	bl	80020ee <lcd_send_string>
		lcd_send_cmd(0x80 | 0x40);
 80010d8:	20c0      	movs	r0, #192	; 0xc0
 80010da:	f000 ff57 	bl	8001f8c <lcd_send_cmd>
		lcd_send_string(" Color studying     ");
 80010de:	4862      	ldr	r0, [pc, #392]	; (8001268 <Mainmenu+0x1d8>)
 80010e0:	f001 f805 	bl	80020ee <lcd_send_string>
		lcd_send_cmd(0x80 | 0x14);
 80010e4:	2094      	movs	r0, #148	; 0x94
 80010e6:	f000 ff51 	bl	8001f8c <lcd_send_cmd>
		lcd_send_string(" PID value modify   ");
 80010ea:	4860      	ldr	r0, [pc, #384]	; (800126c <Mainmenu+0x1dc>)
 80010ec:	f000 ffff 	bl	80020ee <lcd_send_string>
		lcd_send_cmd(0x80 | 0x54);
 80010f0:	20d4      	movs	r0, #212	; 0xd4
 80010f2:	f000 ff4b 	bl	8001f8c <lcd_send_cmd>
		lcd_send_string(" Max speed config   ");
 80010f6:	485e      	ldr	r0, [pc, #376]	; (8001270 <Mainmenu+0x1e0>)
 80010f8:	f000 fff9 	bl	80020ee <lcd_send_string>
		break;
 80010fc:	e0ae      	b.n	800125c <Mainmenu+0x1cc>
	case 2:
		lcd_send_cmd(0x80 | 0x00);
 80010fe:	2080      	movs	r0, #128	; 0x80
 8001100:	f000 ff44 	bl	8001f8c <lcd_send_cmd>
		lcd_send_string(" Car Run            ");
 8001104:	485b      	ldr	r0, [pc, #364]	; (8001274 <Mainmenu+0x1e4>)
 8001106:	f000 fff2 	bl	80020ee <lcd_send_string>
		lcd_send_cmd(0x80 | 0x40);
 800110a:	20c0      	movs	r0, #192	; 0xc0
 800110c:	f000 ff3e 	bl	8001f8c <lcd_send_cmd>
		lcd_send_string(">Color studying     ");
 8001110:	4859      	ldr	r0, [pc, #356]	; (8001278 <Mainmenu+0x1e8>)
 8001112:	f000 ffec 	bl	80020ee <lcd_send_string>
		lcd_send_cmd(0x80 | 0x14);
 8001116:	2094      	movs	r0, #148	; 0x94
 8001118:	f000 ff38 	bl	8001f8c <lcd_send_cmd>
		lcd_send_string(" PID value modify   ");
 800111c:	4853      	ldr	r0, [pc, #332]	; (800126c <Mainmenu+0x1dc>)
 800111e:	f000 ffe6 	bl	80020ee <lcd_send_string>
		lcd_send_cmd(0x80 | 0x54);
 8001122:	20d4      	movs	r0, #212	; 0xd4
 8001124:	f000 ff32 	bl	8001f8c <lcd_send_cmd>
		lcd_send_string(" Max speed config   ");
 8001128:	4851      	ldr	r0, [pc, #324]	; (8001270 <Mainmenu+0x1e0>)
 800112a:	f000 ffe0 	bl	80020ee <lcd_send_string>
		break;
 800112e:	e095      	b.n	800125c <Mainmenu+0x1cc>
	case 3:
		lcd_send_cmd(0x80 | 0x00);
 8001130:	2080      	movs	r0, #128	; 0x80
 8001132:	f000 ff2b 	bl	8001f8c <lcd_send_cmd>
		lcd_send_string(" Car Run            ");
 8001136:	484f      	ldr	r0, [pc, #316]	; (8001274 <Mainmenu+0x1e4>)
 8001138:	f000 ffd9 	bl	80020ee <lcd_send_string>
		lcd_send_cmd(0x80 | 0x40);
 800113c:	20c0      	movs	r0, #192	; 0xc0
 800113e:	f000 ff25 	bl	8001f8c <lcd_send_cmd>
		lcd_send_string(" Color studying     ");
 8001142:	4849      	ldr	r0, [pc, #292]	; (8001268 <Mainmenu+0x1d8>)
 8001144:	f000 ffd3 	bl	80020ee <lcd_send_string>
		lcd_send_cmd(0x80 | 0x14);
 8001148:	2094      	movs	r0, #148	; 0x94
 800114a:	f000 ff1f 	bl	8001f8c <lcd_send_cmd>
		lcd_send_string(">PID value modify   ");
 800114e:	484b      	ldr	r0, [pc, #300]	; (800127c <Mainmenu+0x1ec>)
 8001150:	f000 ffcd 	bl	80020ee <lcd_send_string>
		lcd_send_cmd(0x80 | 0x54);
 8001154:	20d4      	movs	r0, #212	; 0xd4
 8001156:	f000 ff19 	bl	8001f8c <lcd_send_cmd>
		lcd_send_string(" Max speed config   ");
 800115a:	4845      	ldr	r0, [pc, #276]	; (8001270 <Mainmenu+0x1e0>)
 800115c:	f000 ffc7 	bl	80020ee <lcd_send_string>
		break;
 8001160:	e07c      	b.n	800125c <Mainmenu+0x1cc>
	case 4:
		lcd_send_cmd(0x80 | 0x00);
 8001162:	2080      	movs	r0, #128	; 0x80
 8001164:	f000 ff12 	bl	8001f8c <lcd_send_cmd>
		lcd_send_string(" Car Run            ");
 8001168:	4842      	ldr	r0, [pc, #264]	; (8001274 <Mainmenu+0x1e4>)
 800116a:	f000 ffc0 	bl	80020ee <lcd_send_string>
		lcd_send_cmd(0x80 | 0x40);
 800116e:	20c0      	movs	r0, #192	; 0xc0
 8001170:	f000 ff0c 	bl	8001f8c <lcd_send_cmd>
		lcd_send_string(" Color studying     ");
 8001174:	483c      	ldr	r0, [pc, #240]	; (8001268 <Mainmenu+0x1d8>)
 8001176:	f000 ffba 	bl	80020ee <lcd_send_string>
		lcd_send_cmd(0x80 | 0x14);
 800117a:	2094      	movs	r0, #148	; 0x94
 800117c:	f000 ff06 	bl	8001f8c <lcd_send_cmd>
		lcd_send_string(" PID value modify   ");
 8001180:	483a      	ldr	r0, [pc, #232]	; (800126c <Mainmenu+0x1dc>)
 8001182:	f000 ffb4 	bl	80020ee <lcd_send_string>
		lcd_send_cmd(0x80 | 0x54);
 8001186:	20d4      	movs	r0, #212	; 0xd4
 8001188:	f000 ff00 	bl	8001f8c <lcd_send_cmd>
		lcd_send_string(">Max speed config   ");
 800118c:	483c      	ldr	r0, [pc, #240]	; (8001280 <Mainmenu+0x1f0>)
 800118e:	f000 ffae 	bl	80020ee <lcd_send_string>
		break;
 8001192:	e063      	b.n	800125c <Mainmenu+0x1cc>
	case 5:
		lcd_send_cmd(0x80 | 0x00);
 8001194:	2080      	movs	r0, #128	; 0x80
 8001196:	f000 fef9 	bl	8001f8c <lcd_send_cmd>
		lcd_send_string(">Line Detect show   ");
 800119a:	483a      	ldr	r0, [pc, #232]	; (8001284 <Mainmenu+0x1f4>)
 800119c:	f000 ffa7 	bl	80020ee <lcd_send_string>
		lcd_send_cmd(0x80 | 0x40);
 80011a0:	20c0      	movs	r0, #192	; 0xc0
 80011a2:	f000 fef3 	bl	8001f8c <lcd_send_cmd>
		lcd_send_string(" Save system value  ");
 80011a6:	4838      	ldr	r0, [pc, #224]	; (8001288 <Mainmenu+0x1f8>)
 80011a8:	f000 ffa1 	bl	80020ee <lcd_send_string>
		lcd_send_cmd(0x80 | 0x14);
 80011ac:	2094      	movs	r0, #148	; 0x94
 80011ae:	f000 feed 	bl	8001f8c <lcd_send_cmd>
		lcd_send_string(" Wifi Connect       ");
 80011b2:	4836      	ldr	r0, [pc, #216]	; (800128c <Mainmenu+0x1fc>)
 80011b4:	f000 ff9b 	bl	80020ee <lcd_send_string>
		lcd_send_cmd(0x80 | 0x54);
 80011b8:	20d4      	movs	r0, #212	; 0xd4
 80011ba:	f000 fee7 	bl	8001f8c <lcd_send_cmd>
		lcd_send_string(" Path Solver        ");
 80011be:	4834      	ldr	r0, [pc, #208]	; (8001290 <Mainmenu+0x200>)
 80011c0:	f000 ff95 	bl	80020ee <lcd_send_string>
		break;
 80011c4:	e04a      	b.n	800125c <Mainmenu+0x1cc>
	case 6:
		lcd_send_cmd(0x80 | 0x00);
 80011c6:	2080      	movs	r0, #128	; 0x80
 80011c8:	f000 fee0 	bl	8001f8c <lcd_send_cmd>
		lcd_send_string(" Line Detect show   ");
 80011cc:	4831      	ldr	r0, [pc, #196]	; (8001294 <Mainmenu+0x204>)
 80011ce:	f000 ff8e 	bl	80020ee <lcd_send_string>
		lcd_send_cmd(0x80 | 0x40);
 80011d2:	20c0      	movs	r0, #192	; 0xc0
 80011d4:	f000 feda 	bl	8001f8c <lcd_send_cmd>
		lcd_send_string(">Save system value  ");
 80011d8:	482f      	ldr	r0, [pc, #188]	; (8001298 <Mainmenu+0x208>)
 80011da:	f000 ff88 	bl	80020ee <lcd_send_string>
		lcd_send_cmd(0x80 | 0x14);
 80011de:	2094      	movs	r0, #148	; 0x94
 80011e0:	f000 fed4 	bl	8001f8c <lcd_send_cmd>
		lcd_send_string(" Wifi Connect       ");
 80011e4:	4829      	ldr	r0, [pc, #164]	; (800128c <Mainmenu+0x1fc>)
 80011e6:	f000 ff82 	bl	80020ee <lcd_send_string>
		lcd_send_cmd(0x80 | 0x54);
 80011ea:	20d4      	movs	r0, #212	; 0xd4
 80011ec:	f000 fece 	bl	8001f8c <lcd_send_cmd>
		lcd_send_string(" Path Solver        ");
 80011f0:	4827      	ldr	r0, [pc, #156]	; (8001290 <Mainmenu+0x200>)
 80011f2:	f000 ff7c 	bl	80020ee <lcd_send_string>
		break;
 80011f6:	e031      	b.n	800125c <Mainmenu+0x1cc>
	case 7:
		lcd_send_cmd(0x80 | 0x00);
 80011f8:	2080      	movs	r0, #128	; 0x80
 80011fa:	f000 fec7 	bl	8001f8c <lcd_send_cmd>
		lcd_send_string(" Line Detect show   ");
 80011fe:	4825      	ldr	r0, [pc, #148]	; (8001294 <Mainmenu+0x204>)
 8001200:	f000 ff75 	bl	80020ee <lcd_send_string>
		lcd_send_cmd(0x80 | 0x40);
 8001204:	20c0      	movs	r0, #192	; 0xc0
 8001206:	f000 fec1 	bl	8001f8c <lcd_send_cmd>
		lcd_send_string(" Save system value  ");
 800120a:	481f      	ldr	r0, [pc, #124]	; (8001288 <Mainmenu+0x1f8>)
 800120c:	f000 ff6f 	bl	80020ee <lcd_send_string>
		lcd_send_cmd(0x80 | 0x14);
 8001210:	2094      	movs	r0, #148	; 0x94
 8001212:	f000 febb 	bl	8001f8c <lcd_send_cmd>
		lcd_send_string(">Wifi Connect       ");
 8001216:	4821      	ldr	r0, [pc, #132]	; (800129c <Mainmenu+0x20c>)
 8001218:	f000 ff69 	bl	80020ee <lcd_send_string>
		lcd_send_cmd(0x80 | 0x54);
 800121c:	20d4      	movs	r0, #212	; 0xd4
 800121e:	f000 feb5 	bl	8001f8c <lcd_send_cmd>
		lcd_send_string(" Path Solver        ");
 8001222:	481b      	ldr	r0, [pc, #108]	; (8001290 <Mainmenu+0x200>)
 8001224:	f000 ff63 	bl	80020ee <lcd_send_string>
		break;
 8001228:	e018      	b.n	800125c <Mainmenu+0x1cc>
	case 8:
		lcd_send_cmd(0x80 | 0x00);
 800122a:	2080      	movs	r0, #128	; 0x80
 800122c:	f000 feae 	bl	8001f8c <lcd_send_cmd>
		lcd_send_string(" Line Detect show   ");
 8001230:	4818      	ldr	r0, [pc, #96]	; (8001294 <Mainmenu+0x204>)
 8001232:	f000 ff5c 	bl	80020ee <lcd_send_string>
		lcd_send_cmd(0x80 | 0x40);
 8001236:	20c0      	movs	r0, #192	; 0xc0
 8001238:	f000 fea8 	bl	8001f8c <lcd_send_cmd>
		lcd_send_string(" Save system value  ");
 800123c:	4812      	ldr	r0, [pc, #72]	; (8001288 <Mainmenu+0x1f8>)
 800123e:	f000 ff56 	bl	80020ee <lcd_send_string>
		lcd_send_cmd(0x80 | 0x14);
 8001242:	2094      	movs	r0, #148	; 0x94
 8001244:	f000 fea2 	bl	8001f8c <lcd_send_cmd>
		lcd_send_string(" Wifi Connect       ");
 8001248:	4810      	ldr	r0, [pc, #64]	; (800128c <Mainmenu+0x1fc>)
 800124a:	f000 ff50 	bl	80020ee <lcd_send_string>
		lcd_send_cmd(0x80 | 0x54);
 800124e:	20d4      	movs	r0, #212	; 0xd4
 8001250:	f000 fe9c 	bl	8001f8c <lcd_send_cmd>
		lcd_send_string(">Path Solver        ");
 8001254:	4812      	ldr	r0, [pc, #72]	; (80012a0 <Mainmenu+0x210>)
 8001256:	f000 ff4a 	bl	80020ee <lcd_send_string>
		break;
 800125a:	bf00      	nop
	}
}
 800125c:	bf00      	nop
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	0800ef10 	.word	0x0800ef10
 8001268:	0800ef28 	.word	0x0800ef28
 800126c:	0800ef40 	.word	0x0800ef40
 8001270:	0800ef58 	.word	0x0800ef58
 8001274:	0800ef70 	.word	0x0800ef70
 8001278:	0800ef88 	.word	0x0800ef88
 800127c:	0800efa0 	.word	0x0800efa0
 8001280:	0800efb8 	.word	0x0800efb8
 8001284:	0800efd0 	.word	0x0800efd0
 8001288:	0800efe8 	.word	0x0800efe8
 800128c:	0800f000 	.word	0x0800f000
 8001290:	0800f018 	.word	0x0800f018
 8001294:	0800f030 	.word	0x0800f030
 8001298:	0800f048 	.word	0x0800f048
 800129c:	0800f060 	.word	0x0800f060
 80012a0:	0800f078 	.word	0x0800f078

080012a4 <PID_menu>:

static void PID_menu(uint8_t line) {
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4603      	mov	r3, r0
 80012ac:	71fb      	strb	r3, [r7, #7]

	switch (line) {
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	3b01      	subs	r3, #1
 80012b2:	2b03      	cmp	r3, #3
 80012b4:	f200 80f4 	bhi.w	80014a0 <PID_menu+0x1fc>
 80012b8:	a201      	add	r2, pc, #4	; (adr r2, 80012c0 <PID_menu+0x1c>)
 80012ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012be:	bf00      	nop
 80012c0:	080012d1 	.word	0x080012d1
 80012c4:	08001345 	.word	0x08001345
 80012c8:	080013b9 	.word	0x080013b9
 80012cc:	0800142d 	.word	0x0800142d
	case 1:
		sprintf(kp_str, ">Kp = %.2f         ", Kp);
 80012d0:	4b75      	ldr	r3, [pc, #468]	; (80014a8 <PID_menu+0x204>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff f93f 	bl	8000558 <__aeabi_f2d>
 80012da:	4602      	mov	r2, r0
 80012dc:	460b      	mov	r3, r1
 80012de:	4973      	ldr	r1, [pc, #460]	; (80014ac <PID_menu+0x208>)
 80012e0:	4873      	ldr	r0, [pc, #460]	; (80014b0 <PID_menu+0x20c>)
 80012e2:	f009 ff8f 	bl	800b204 <siprintf>
		lcd_send_cmd(0x80 | 0x00);
 80012e6:	2080      	movs	r0, #128	; 0x80
 80012e8:	f000 fe50 	bl	8001f8c <lcd_send_cmd>
		lcd_send_string(kp_str);
 80012ec:	4870      	ldr	r0, [pc, #448]	; (80014b0 <PID_menu+0x20c>)
 80012ee:	f000 fefe 	bl	80020ee <lcd_send_string>
		sprintf(ki_str, " Ki = %.2f         ", Ki);
 80012f2:	4b70      	ldr	r3, [pc, #448]	; (80014b4 <PID_menu+0x210>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff f92e 	bl	8000558 <__aeabi_f2d>
 80012fc:	4602      	mov	r2, r0
 80012fe:	460b      	mov	r3, r1
 8001300:	496d      	ldr	r1, [pc, #436]	; (80014b8 <PID_menu+0x214>)
 8001302:	486e      	ldr	r0, [pc, #440]	; (80014bc <PID_menu+0x218>)
 8001304:	f009 ff7e 	bl	800b204 <siprintf>
		lcd_send_cmd(0x80 | 0x40);
 8001308:	20c0      	movs	r0, #192	; 0xc0
 800130a:	f000 fe3f 	bl	8001f8c <lcd_send_cmd>
		lcd_send_string(ki_str);
 800130e:	486b      	ldr	r0, [pc, #428]	; (80014bc <PID_menu+0x218>)
 8001310:	f000 feed 	bl	80020ee <lcd_send_string>
		sprintf(kd_str, " Kd = %.2f         ", Kd);
 8001314:	4b6a      	ldr	r3, [pc, #424]	; (80014c0 <PID_menu+0x21c>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff f91d 	bl	8000558 <__aeabi_f2d>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	4968      	ldr	r1, [pc, #416]	; (80014c4 <PID_menu+0x220>)
 8001324:	4868      	ldr	r0, [pc, #416]	; (80014c8 <PID_menu+0x224>)
 8001326:	f009 ff6d 	bl	800b204 <siprintf>
		lcd_send_cmd(0x80 | 0x14);
 800132a:	2094      	movs	r0, #148	; 0x94
 800132c:	f000 fe2e 	bl	8001f8c <lcd_send_cmd>
		lcd_send_string(kd_str);
 8001330:	4865      	ldr	r0, [pc, #404]	; (80014c8 <PID_menu+0x224>)
 8001332:	f000 fedc 	bl	80020ee <lcd_send_string>
		lcd_send_cmd(0x80 | 0x54);
 8001336:	20d4      	movs	r0, #212	; 0xd4
 8001338:	f000 fe28 	bl	8001f8c <lcd_send_cmd>
		lcd_send_string(" Return to main menu");
 800133c:	4863      	ldr	r0, [pc, #396]	; (80014cc <PID_menu+0x228>)
 800133e:	f000 fed6 	bl	80020ee <lcd_send_string>
		break;
 8001342:	e0ad      	b.n	80014a0 <PID_menu+0x1fc>
	case 2:
		sprintf(kp_str, " Kp = %.2f         ", Kp);
 8001344:	4b58      	ldr	r3, [pc, #352]	; (80014a8 <PID_menu+0x204>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff f905 	bl	8000558 <__aeabi_f2d>
 800134e:	4602      	mov	r2, r0
 8001350:	460b      	mov	r3, r1
 8001352:	495f      	ldr	r1, [pc, #380]	; (80014d0 <PID_menu+0x22c>)
 8001354:	4856      	ldr	r0, [pc, #344]	; (80014b0 <PID_menu+0x20c>)
 8001356:	f009 ff55 	bl	800b204 <siprintf>
		lcd_send_cmd(0x80 | 0x00);
 800135a:	2080      	movs	r0, #128	; 0x80
 800135c:	f000 fe16 	bl	8001f8c <lcd_send_cmd>
		lcd_send_string(kp_str);
 8001360:	4853      	ldr	r0, [pc, #332]	; (80014b0 <PID_menu+0x20c>)
 8001362:	f000 fec4 	bl	80020ee <lcd_send_string>
		sprintf(ki_str, ">Ki = %.2f         ", Ki);
 8001366:	4b53      	ldr	r3, [pc, #332]	; (80014b4 <PID_menu+0x210>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff f8f4 	bl	8000558 <__aeabi_f2d>
 8001370:	4602      	mov	r2, r0
 8001372:	460b      	mov	r3, r1
 8001374:	4957      	ldr	r1, [pc, #348]	; (80014d4 <PID_menu+0x230>)
 8001376:	4851      	ldr	r0, [pc, #324]	; (80014bc <PID_menu+0x218>)
 8001378:	f009 ff44 	bl	800b204 <siprintf>
		lcd_send_cmd(0x80 | 0x40);
 800137c:	20c0      	movs	r0, #192	; 0xc0
 800137e:	f000 fe05 	bl	8001f8c <lcd_send_cmd>
		lcd_send_string(ki_str);
 8001382:	484e      	ldr	r0, [pc, #312]	; (80014bc <PID_menu+0x218>)
 8001384:	f000 feb3 	bl	80020ee <lcd_send_string>
		sprintf(kd_str, " Kd = %.2f         ", Kd);
 8001388:	4b4d      	ldr	r3, [pc, #308]	; (80014c0 <PID_menu+0x21c>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff f8e3 	bl	8000558 <__aeabi_f2d>
 8001392:	4602      	mov	r2, r0
 8001394:	460b      	mov	r3, r1
 8001396:	494b      	ldr	r1, [pc, #300]	; (80014c4 <PID_menu+0x220>)
 8001398:	484b      	ldr	r0, [pc, #300]	; (80014c8 <PID_menu+0x224>)
 800139a:	f009 ff33 	bl	800b204 <siprintf>
		lcd_send_cmd(0x80 | 0x14);
 800139e:	2094      	movs	r0, #148	; 0x94
 80013a0:	f000 fdf4 	bl	8001f8c <lcd_send_cmd>
		lcd_send_string(kd_str);
 80013a4:	4848      	ldr	r0, [pc, #288]	; (80014c8 <PID_menu+0x224>)
 80013a6:	f000 fea2 	bl	80020ee <lcd_send_string>
		lcd_send_cmd(0x80 | 0x54);
 80013aa:	20d4      	movs	r0, #212	; 0xd4
 80013ac:	f000 fdee 	bl	8001f8c <lcd_send_cmd>
		lcd_send_string(" Return to main menu");
 80013b0:	4846      	ldr	r0, [pc, #280]	; (80014cc <PID_menu+0x228>)
 80013b2:	f000 fe9c 	bl	80020ee <lcd_send_string>
		break;
 80013b6:	e073      	b.n	80014a0 <PID_menu+0x1fc>
	case 3:
		sprintf(kp_str, " Kp = %.2f         ", Kp);
 80013b8:	4b3b      	ldr	r3, [pc, #236]	; (80014a8 <PID_menu+0x204>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff f8cb 	bl	8000558 <__aeabi_f2d>
 80013c2:	4602      	mov	r2, r0
 80013c4:	460b      	mov	r3, r1
 80013c6:	4942      	ldr	r1, [pc, #264]	; (80014d0 <PID_menu+0x22c>)
 80013c8:	4839      	ldr	r0, [pc, #228]	; (80014b0 <PID_menu+0x20c>)
 80013ca:	f009 ff1b 	bl	800b204 <siprintf>
		lcd_send_cmd(0x80 | 0x00);
 80013ce:	2080      	movs	r0, #128	; 0x80
 80013d0:	f000 fddc 	bl	8001f8c <lcd_send_cmd>
		lcd_send_string(kp_str);
 80013d4:	4836      	ldr	r0, [pc, #216]	; (80014b0 <PID_menu+0x20c>)
 80013d6:	f000 fe8a 	bl	80020ee <lcd_send_string>
		sprintf(ki_str, " Ki = %.2f         ", Ki);
 80013da:	4b36      	ldr	r3, [pc, #216]	; (80014b4 <PID_menu+0x210>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff f8ba 	bl	8000558 <__aeabi_f2d>
 80013e4:	4602      	mov	r2, r0
 80013e6:	460b      	mov	r3, r1
 80013e8:	4933      	ldr	r1, [pc, #204]	; (80014b8 <PID_menu+0x214>)
 80013ea:	4834      	ldr	r0, [pc, #208]	; (80014bc <PID_menu+0x218>)
 80013ec:	f009 ff0a 	bl	800b204 <siprintf>
		lcd_send_cmd(0x80 | 0x40);
 80013f0:	20c0      	movs	r0, #192	; 0xc0
 80013f2:	f000 fdcb 	bl	8001f8c <lcd_send_cmd>
		lcd_send_string(ki_str);
 80013f6:	4831      	ldr	r0, [pc, #196]	; (80014bc <PID_menu+0x218>)
 80013f8:	f000 fe79 	bl	80020ee <lcd_send_string>
		sprintf(kd_str, ">Kd = %.2f         ", Kd);
 80013fc:	4b30      	ldr	r3, [pc, #192]	; (80014c0 <PID_menu+0x21c>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff f8a9 	bl	8000558 <__aeabi_f2d>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
 800140a:	4933      	ldr	r1, [pc, #204]	; (80014d8 <PID_menu+0x234>)
 800140c:	482e      	ldr	r0, [pc, #184]	; (80014c8 <PID_menu+0x224>)
 800140e:	f009 fef9 	bl	800b204 <siprintf>
		lcd_send_cmd(0x80 | 0x14);
 8001412:	2094      	movs	r0, #148	; 0x94
 8001414:	f000 fdba 	bl	8001f8c <lcd_send_cmd>
		lcd_send_string(kd_str);
 8001418:	482b      	ldr	r0, [pc, #172]	; (80014c8 <PID_menu+0x224>)
 800141a:	f000 fe68 	bl	80020ee <lcd_send_string>
		lcd_send_cmd(0x80 | 0x54);
 800141e:	20d4      	movs	r0, #212	; 0xd4
 8001420:	f000 fdb4 	bl	8001f8c <lcd_send_cmd>
		lcd_send_string(" Return to main menu");
 8001424:	4829      	ldr	r0, [pc, #164]	; (80014cc <PID_menu+0x228>)
 8001426:	f000 fe62 	bl	80020ee <lcd_send_string>
		break;
 800142a:	e039      	b.n	80014a0 <PID_menu+0x1fc>
	case 4:
		sprintf(kp_str, " Kp = %.2f         ", Kp);
 800142c:	4b1e      	ldr	r3, [pc, #120]	; (80014a8 <PID_menu+0x204>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff f891 	bl	8000558 <__aeabi_f2d>
 8001436:	4602      	mov	r2, r0
 8001438:	460b      	mov	r3, r1
 800143a:	4925      	ldr	r1, [pc, #148]	; (80014d0 <PID_menu+0x22c>)
 800143c:	481c      	ldr	r0, [pc, #112]	; (80014b0 <PID_menu+0x20c>)
 800143e:	f009 fee1 	bl	800b204 <siprintf>
		lcd_send_cmd(0x80 | 0x00);
 8001442:	2080      	movs	r0, #128	; 0x80
 8001444:	f000 fda2 	bl	8001f8c <lcd_send_cmd>
		lcd_send_string(kp_str);
 8001448:	4819      	ldr	r0, [pc, #100]	; (80014b0 <PID_menu+0x20c>)
 800144a:	f000 fe50 	bl	80020ee <lcd_send_string>
		sprintf(ki_str, " Ki = %.2f         ", Ki);
 800144e:	4b19      	ldr	r3, [pc, #100]	; (80014b4 <PID_menu+0x210>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff f880 	bl	8000558 <__aeabi_f2d>
 8001458:	4602      	mov	r2, r0
 800145a:	460b      	mov	r3, r1
 800145c:	4916      	ldr	r1, [pc, #88]	; (80014b8 <PID_menu+0x214>)
 800145e:	4817      	ldr	r0, [pc, #92]	; (80014bc <PID_menu+0x218>)
 8001460:	f009 fed0 	bl	800b204 <siprintf>
		lcd_send_cmd(0x80 | 0x40);
 8001464:	20c0      	movs	r0, #192	; 0xc0
 8001466:	f000 fd91 	bl	8001f8c <lcd_send_cmd>
		lcd_send_string(ki_str);
 800146a:	4814      	ldr	r0, [pc, #80]	; (80014bc <PID_menu+0x218>)
 800146c:	f000 fe3f 	bl	80020ee <lcd_send_string>
		sprintf(kd_str, " Kd = %.2f         ", Kd);
 8001470:	4b13      	ldr	r3, [pc, #76]	; (80014c0 <PID_menu+0x21c>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff f86f 	bl	8000558 <__aeabi_f2d>
 800147a:	4602      	mov	r2, r0
 800147c:	460b      	mov	r3, r1
 800147e:	4911      	ldr	r1, [pc, #68]	; (80014c4 <PID_menu+0x220>)
 8001480:	4811      	ldr	r0, [pc, #68]	; (80014c8 <PID_menu+0x224>)
 8001482:	f009 febf 	bl	800b204 <siprintf>
		lcd_send_cmd(0x80 | 0x14);
 8001486:	2094      	movs	r0, #148	; 0x94
 8001488:	f000 fd80 	bl	8001f8c <lcd_send_cmd>
		lcd_send_string(kd_str);
 800148c:	480e      	ldr	r0, [pc, #56]	; (80014c8 <PID_menu+0x224>)
 800148e:	f000 fe2e 	bl	80020ee <lcd_send_string>
		lcd_send_cmd(0x80 | 0x54);
 8001492:	20d4      	movs	r0, #212	; 0xd4
 8001494:	f000 fd7a 	bl	8001f8c <lcd_send_cmd>
		lcd_send_string(">Return to main menu");
 8001498:	4810      	ldr	r0, [pc, #64]	; (80014dc <PID_menu+0x238>)
 800149a:	f000 fe28 	bl	80020ee <lcd_send_string>
		break;
 800149e:	bf00      	nop
	}
}
 80014a0:	bf00      	nop
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	2000001c 	.word	0x2000001c
 80014ac:	0800f090 	.word	0x0800f090
 80014b0:	20000308 	.word	0x20000308
 80014b4:	2000027c 	.word	0x2000027c
 80014b8:	0800f0a4 	.word	0x0800f0a4
 80014bc:	200002bc 	.word	0x200002bc
 80014c0:	20000020 	.word	0x20000020
 80014c4:	0800f0b8 	.word	0x0800f0b8
 80014c8:	200002e8 	.word	0x200002e8
 80014cc:	0800f0cc 	.word	0x0800f0cc
 80014d0:	0800f0e4 	.word	0x0800f0e4
 80014d4:	0800f0f8 	.word	0x0800f0f8
 80014d8:	0800f10c 	.word	0x0800f10c
 80014dc:	0800f120 	.word	0x0800f120

080014e0 <Speed_menu>:
static void Speed_menu(uint8_t line) {
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	71fb      	strb	r3, [r7, #7]
	switch (line) {
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	2b03      	cmp	r3, #3
 80014ee:	d04c      	beq.n	800158a <Speed_menu+0xaa>
 80014f0:	2b03      	cmp	r3, #3
 80014f2:	dc6d      	bgt.n	80015d0 <Speed_menu+0xf0>
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d002      	beq.n	80014fe <Speed_menu+0x1e>
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d023      	beq.n	8001544 <Speed_menu+0x64>
		lcd_send_string(Right_str);
		lcd_send_cmd(0x80 | 0x14);
		lcd_send_string(">Return to main menu");
		break;
	}
}
 80014fc:	e068      	b.n	80015d0 <Speed_menu+0xf0>
		sprintf(Left_str, ">Left Eng = %d", Left);
 80014fe:	4b36      	ldr	r3, [pc, #216]	; (80015d8 <Speed_menu+0xf8>)
 8001500:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001504:	461a      	mov	r2, r3
 8001506:	4935      	ldr	r1, [pc, #212]	; (80015dc <Speed_menu+0xfc>)
 8001508:	4835      	ldr	r0, [pc, #212]	; (80015e0 <Speed_menu+0x100>)
 800150a:	f009 fe7b 	bl	800b204 <siprintf>
		lcd_send_cmd(0x80 | 0x00);
 800150e:	2080      	movs	r0, #128	; 0x80
 8001510:	f000 fd3c 	bl	8001f8c <lcd_send_cmd>
		lcd_send_string(Left_str);
 8001514:	4832      	ldr	r0, [pc, #200]	; (80015e0 <Speed_menu+0x100>)
 8001516:	f000 fdea 	bl	80020ee <lcd_send_string>
		sprintf(Right_str, " Right Eng = %d", Right);
 800151a:	4b32      	ldr	r3, [pc, #200]	; (80015e4 <Speed_menu+0x104>)
 800151c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001520:	461a      	mov	r2, r3
 8001522:	4931      	ldr	r1, [pc, #196]	; (80015e8 <Speed_menu+0x108>)
 8001524:	4831      	ldr	r0, [pc, #196]	; (80015ec <Speed_menu+0x10c>)
 8001526:	f009 fe6d 	bl	800b204 <siprintf>
		lcd_send_cmd(0x80 | 0x40);
 800152a:	20c0      	movs	r0, #192	; 0xc0
 800152c:	f000 fd2e 	bl	8001f8c <lcd_send_cmd>
		lcd_send_string(Right_str);
 8001530:	482e      	ldr	r0, [pc, #184]	; (80015ec <Speed_menu+0x10c>)
 8001532:	f000 fddc 	bl	80020ee <lcd_send_string>
		lcd_send_cmd(0x80 | 0x14);
 8001536:	2094      	movs	r0, #148	; 0x94
 8001538:	f000 fd28 	bl	8001f8c <lcd_send_cmd>
		lcd_send_string(" Return to main menu");
 800153c:	482c      	ldr	r0, [pc, #176]	; (80015f0 <Speed_menu+0x110>)
 800153e:	f000 fdd6 	bl	80020ee <lcd_send_string>
		break;
 8001542:	e045      	b.n	80015d0 <Speed_menu+0xf0>
		sprintf(Left_str, " Left Eng = %d", Left);
 8001544:	4b24      	ldr	r3, [pc, #144]	; (80015d8 <Speed_menu+0xf8>)
 8001546:	f9b3 3000 	ldrsh.w	r3, [r3]
 800154a:	461a      	mov	r2, r3
 800154c:	4929      	ldr	r1, [pc, #164]	; (80015f4 <Speed_menu+0x114>)
 800154e:	4824      	ldr	r0, [pc, #144]	; (80015e0 <Speed_menu+0x100>)
 8001550:	f009 fe58 	bl	800b204 <siprintf>
		lcd_send_cmd(0x80 | 0x00);
 8001554:	2080      	movs	r0, #128	; 0x80
 8001556:	f000 fd19 	bl	8001f8c <lcd_send_cmd>
		lcd_send_string(Left_str);
 800155a:	4821      	ldr	r0, [pc, #132]	; (80015e0 <Speed_menu+0x100>)
 800155c:	f000 fdc7 	bl	80020ee <lcd_send_string>
		sprintf(Right_str, ">Right Eng = %d", Right);
 8001560:	4b20      	ldr	r3, [pc, #128]	; (80015e4 <Speed_menu+0x104>)
 8001562:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001566:	461a      	mov	r2, r3
 8001568:	4923      	ldr	r1, [pc, #140]	; (80015f8 <Speed_menu+0x118>)
 800156a:	4820      	ldr	r0, [pc, #128]	; (80015ec <Speed_menu+0x10c>)
 800156c:	f009 fe4a 	bl	800b204 <siprintf>
		lcd_send_cmd(0x80 | 0x40);
 8001570:	20c0      	movs	r0, #192	; 0xc0
 8001572:	f000 fd0b 	bl	8001f8c <lcd_send_cmd>
		lcd_send_string(Right_str);
 8001576:	481d      	ldr	r0, [pc, #116]	; (80015ec <Speed_menu+0x10c>)
 8001578:	f000 fdb9 	bl	80020ee <lcd_send_string>
		lcd_send_cmd(0x80 | 0x14);
 800157c:	2094      	movs	r0, #148	; 0x94
 800157e:	f000 fd05 	bl	8001f8c <lcd_send_cmd>
		lcd_send_string(" Return to main menu");
 8001582:	481b      	ldr	r0, [pc, #108]	; (80015f0 <Speed_menu+0x110>)
 8001584:	f000 fdb3 	bl	80020ee <lcd_send_string>
		break;
 8001588:	e022      	b.n	80015d0 <Speed_menu+0xf0>
		sprintf(Left_str, " Left Eng = %d", Left);
 800158a:	4b13      	ldr	r3, [pc, #76]	; (80015d8 <Speed_menu+0xf8>)
 800158c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001590:	461a      	mov	r2, r3
 8001592:	4918      	ldr	r1, [pc, #96]	; (80015f4 <Speed_menu+0x114>)
 8001594:	4812      	ldr	r0, [pc, #72]	; (80015e0 <Speed_menu+0x100>)
 8001596:	f009 fe35 	bl	800b204 <siprintf>
		lcd_send_cmd(0x80 | 0x00);
 800159a:	2080      	movs	r0, #128	; 0x80
 800159c:	f000 fcf6 	bl	8001f8c <lcd_send_cmd>
		lcd_send_string(Left_str);
 80015a0:	480f      	ldr	r0, [pc, #60]	; (80015e0 <Speed_menu+0x100>)
 80015a2:	f000 fda4 	bl	80020ee <lcd_send_string>
		sprintf(Right_str, " Right Eng = %d", Right);
 80015a6:	4b0f      	ldr	r3, [pc, #60]	; (80015e4 <Speed_menu+0x104>)
 80015a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015ac:	461a      	mov	r2, r3
 80015ae:	490e      	ldr	r1, [pc, #56]	; (80015e8 <Speed_menu+0x108>)
 80015b0:	480e      	ldr	r0, [pc, #56]	; (80015ec <Speed_menu+0x10c>)
 80015b2:	f009 fe27 	bl	800b204 <siprintf>
		lcd_send_cmd(0x80 | 0x40);
 80015b6:	20c0      	movs	r0, #192	; 0xc0
 80015b8:	f000 fce8 	bl	8001f8c <lcd_send_cmd>
		lcd_send_string(Right_str);
 80015bc:	480b      	ldr	r0, [pc, #44]	; (80015ec <Speed_menu+0x10c>)
 80015be:	f000 fd96 	bl	80020ee <lcd_send_string>
		lcd_send_cmd(0x80 | 0x14);
 80015c2:	2094      	movs	r0, #148	; 0x94
 80015c4:	f000 fce2 	bl	8001f8c <lcd_send_cmd>
		lcd_send_string(">Return to main menu");
 80015c8:	480c      	ldr	r0, [pc, #48]	; (80015fc <Speed_menu+0x11c>)
 80015ca:	f000 fd90 	bl	80020ee <lcd_send_string>
		break;
 80015ce:	bf00      	nop
}
 80015d0:	bf00      	nop
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	2000000c 	.word	0x2000000c
 80015dc:	0800f138 	.word	0x0800f138
 80015e0:	200002a8 	.word	0x200002a8
 80015e4:	2000000e 	.word	0x2000000e
 80015e8:	0800f148 	.word	0x0800f148
 80015ec:	20000294 	.word	0x20000294
 80015f0:	0800f0cc 	.word	0x0800f0cc
 80015f4:	0800f158 	.word	0x0800f158
 80015f8:	0800f168 	.word	0x0800f168
 80015fc:	0800f120 	.word	0x0800f120

08001600 <Color_Studying_process>:

static void Color_Studying_process(void) {
 8001600:	b580      	push	{r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af00      	add	r7, sp, #0
#ifdef	READ_WHITE_LINE
	uint16_t WhiteLine[] = {0 ,0 ,0 ,0, 0, 0};
 8001606:	463b      	mov	r3, r7
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	609a      	str	r2, [r3, #8]
#endif
#ifdef READ_BLACK_LINE
	uint16_t BlackLine[] = {0, 0, 0, 0, 0, 0};
#endif
	Color_Read = 1;
 8001610:	4b40      	ldr	r3, [pc, #256]	; (8001714 <Color_Studying_process+0x114>)
 8001612:	2201      	movs	r2, #1
 8001614:	701a      	strb	r2, [r3, #0]
	lcd_send_cmd(0x80 | 0x00);
 8001616:	2080      	movs	r0, #128	; 0x80
 8001618:	f000 fcb8 	bl	8001f8c <lcd_send_cmd>
	lcd_send_string("Out line read      ");
 800161c:	483e      	ldr	r0, [pc, #248]	; (8001718 <Color_Studying_process+0x118>)
 800161e:	f000 fd66 	bl	80020ee <lcd_send_string>
	lcd_send_cmd(0x80 | 0x40);
 8001622:	20c0      	movs	r0, #192	; 0xc0
 8001624:	f000 fcb2 	bl	8001f8c <lcd_send_cmd>
	lcd_send_string("Press B to begin   ");
 8001628:	483c      	ldr	r0, [pc, #240]	; (800171c <Color_Studying_process+0x11c>)
 800162a:	f000 fd60 	bl	80020ee <lcd_send_string>
	while(Color_Read){
 800162e:	e058      	b.n	80016e2 <Color_Studying_process+0xe2>
		if (HAL_GPIO_ReadPin(ButtonB_GPIO_Port, ButtonB_Pin) == 0)
 8001630:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001634:	483a      	ldr	r0, [pc, #232]	; (8001720 <Color_Studying_process+0x120>)
 8001636:	f005 fea1 	bl	800737c <HAL_GPIO_ReadPin>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d150      	bne.n	80016e2 <Color_Studying_process+0xe2>
		{
			while (HAL_GPIO_ReadPin(ButtonB_GPIO_Port, ButtonB_Pin) == 0)
 8001640:	e002      	b.n	8001648 <Color_Studying_process+0x48>
			{
				HAL_Delay(50);
 8001642:	2032      	movs	r0, #50	; 0x32
 8001644:	f003 ff8a 	bl	800555c <HAL_Delay>
			while (HAL_GPIO_ReadPin(ButtonB_GPIO_Port, ButtonB_Pin) == 0)
 8001648:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800164c:	4834      	ldr	r0, [pc, #208]	; (8001720 <Color_Studying_process+0x120>)
 800164e:	f005 fe95 	bl	800737c <HAL_GPIO_ReadPin>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d0f4      	beq.n	8001642 <Color_Studying_process+0x42>
			}
			for(int i=0;i<ADC_Sample_Times;i++)
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]
 800165c:	e023      	b.n	80016a6 <Color_Studying_process+0xa6>
			{
				for(int i=0;i<Number_of_Sensors;i++)
 800165e:	2300      	movs	r3, #0
 8001660:	613b      	str	r3, [r7, #16]
 8001662:	e01a      	b.n	800169a <Color_Studying_process+0x9a>
				{
#ifdef READ_WHITE_LINE
					if(Sensor_ADC_Value[i] > WhiteLine[i])
 8001664:	4a2f      	ldr	r2, [pc, #188]	; (8001724 <Color_Studying_process+0x124>)
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	f107 0118 	add.w	r1, r7, #24
 8001674:	440b      	add	r3, r1
 8001676:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800167a:	429a      	cmp	r2, r3
 800167c:	d90a      	bls.n	8001694 <Color_Studying_process+0x94>
					{
						WhiteLine[i] = Sensor_ADC_Value[i];
 800167e:	4a29      	ldr	r2, [pc, #164]	; (8001724 <Color_Studying_process+0x124>)
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	f107 0118 	add.w	r1, r7, #24
 800168e:	440b      	add	r3, r1
 8001690:	f823 2c18 	strh.w	r2, [r3, #-24]
				for(int i=0;i<Number_of_Sensors;i++)
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	3301      	adds	r3, #1
 8001698:	613b      	str	r3, [r7, #16]
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	2b05      	cmp	r3, #5
 800169e:	dde1      	ble.n	8001664 <Color_Studying_process+0x64>
			for(int i=0;i<ADC_Sample_Times;i++)
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	3301      	adds	r3, #1
 80016a4:	617b      	str	r3, [r7, #20]
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80016ac:	4293      	cmp	r3, r2
 80016ae:	ddd6      	ble.n	800165e <Color_Studying_process+0x5e>
					}
#endif
				}
			}
#ifdef READ_WHITE_LINE
			for(int i=0;i<Number_of_Sensors;i++)
 80016b0:	2300      	movs	r3, #0
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	e00f      	b.n	80016d6 <Color_Studying_process+0xd6>
			{
				Sensor_Threshold[i]=WhiteLine[i] - 10;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	f107 0218 	add.w	r2, r7, #24
 80016be:	4413      	add	r3, r2
 80016c0:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80016c4:	3b0a      	subs	r3, #10
 80016c6:	b299      	uxth	r1, r3
 80016c8:	4a17      	ldr	r2, [pc, #92]	; (8001728 <Color_Studying_process+0x128>)
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int i=0;i<Number_of_Sensors;i++)
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	3301      	adds	r3, #1
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	2b05      	cmp	r3, #5
 80016da:	ddec      	ble.n	80016b6 <Color_Studying_process+0xb6>
				}
				else
					Sensor_Threshold[i]=BlackLine[i];
			}
#endif
			Color_Read = 0;
 80016dc:	4b0d      	ldr	r3, [pc, #52]	; (8001714 <Color_Studying_process+0x114>)
 80016de:	2200      	movs	r2, #0
 80016e0:	701a      	strb	r2, [r3, #0]
	while(Color_Read){
 80016e2:	4b0c      	ldr	r3, [pc, #48]	; (8001714 <Color_Studying_process+0x114>)
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d1a2      	bne.n	8001630 <Color_Studying_process+0x30>
		}
	}
	lcd_clear();
 80016ea:	f000 fcaf 	bl	800204c <lcd_clear>
	lcd_send_cmd(0x80 | 0x00);
 80016ee:	2080      	movs	r0, #128	; 0x80
 80016f0:	f000 fc4c 	bl	8001f8c <lcd_send_cmd>
	lcd_send_string("Done               ");
 80016f4:	480d      	ldr	r0, [pc, #52]	; (800172c <Color_Studying_process+0x12c>)
 80016f6:	f000 fcfa 	bl	80020ee <lcd_send_string>
	HAL_Delay(200);
 80016fa:	20c8      	movs	r0, #200	; 0xc8
 80016fc:	f003 ff2e 	bl	800555c <HAL_Delay>
	Menu_type = Main_menu;
 8001700:	4b0b      	ldr	r3, [pc, #44]	; (8001730 <Color_Studying_process+0x130>)
 8001702:	2201      	movs	r2, #1
 8001704:	701a      	strb	r2, [r3, #0]
	lcd_clear();
 8001706:	f000 fca1 	bl	800204c <lcd_clear>
}
 800170a:	bf00      	nop
 800170c:	3718      	adds	r7, #24
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	20000002 	.word	0x20000002
 8001718:	0800f178 	.word	0x0800f178
 800171c:	0800f18c 	.word	0x0800f18c
 8001720:	40020800 	.word	0x40020800
 8001724:	200004a8 	.word	0x200004a8
 8001728:	20000010 	.word	0x20000010
 800172c:	0800f1a0 	.word	0x0800f1a0
 8001730:	20000001 	.word	0x20000001

08001734 <LineDetect_show>:

static void LineDetect_show(void) {
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x80 | 0x00);
 800173a:	2080      	movs	r0, #128	; 0x80
 800173c:	f000 fc26 	bl	8001f8c <lcd_send_cmd>
	lcd_send_string("Line Detect        ");
 8001740:	4859      	ldr	r0, [pc, #356]	; (80018a8 <LineDetect_show+0x174>)
 8001742:	f000 fcd4 	bl	80020ee <lcd_send_string>
	lcd_send_cmd(0x80 | 0x40);
 8001746:	20c0      	movs	r0, #192	; 0xc0
 8001748:	f000 fc20 	bl	8001f8c <lcd_send_cmd>
	lcd_send_string("Press C for cancel ");
 800174c:	4857      	ldr	r0, [pc, #348]	; (80018ac <LineDetect_show+0x178>)
 800174e:	f000 fcce 	bl	80020ee <lcd_send_string>
	while (cancel_menu) {
 8001752:	e09d      	b.n	8001890 <LineDetect_show+0x15c>
		for (int8_t i = 0; i < 6; i++) {
 8001754:	2300      	movs	r3, #0
 8001756:	71fb      	strb	r3, [r7, #7]
 8001758:	e095      	b.n	8001886 <LineDetect_show+0x152>
#ifdef READ_WHITE_LINE
			if (Sensor_ADC_Value[0] < Sensor_Threshold[0]) {
 800175a:	4b55      	ldr	r3, [pc, #340]	; (80018b0 <LineDetect_show+0x17c>)
 800175c:	881a      	ldrh	r2, [r3, #0]
 800175e:	4b55      	ldr	r3, [pc, #340]	; (80018b4 <LineDetect_show+0x180>)
 8001760:	881b      	ldrh	r3, [r3, #0]
 8001762:	429a      	cmp	r2, r3
 8001764:	d205      	bcs.n	8001772 <LineDetect_show+0x3e>
				lcd_send_cmd(0x80 | 0x16);
 8001766:	2096      	movs	r0, #150	; 0x96
 8001768:	f000 fc10 	bl	8001f8c <lcd_send_cmd>
				lcd_send_string("1");
 800176c:	4852      	ldr	r0, [pc, #328]	; (80018b8 <LineDetect_show+0x184>)
 800176e:	f000 fcbe 	bl	80020ee <lcd_send_string>
			}
			if (Sensor_ADC_Value[1] < Sensor_Threshold[1]) {
 8001772:	4b4f      	ldr	r3, [pc, #316]	; (80018b0 <LineDetect_show+0x17c>)
 8001774:	885a      	ldrh	r2, [r3, #2]
 8001776:	4b4f      	ldr	r3, [pc, #316]	; (80018b4 <LineDetect_show+0x180>)
 8001778:	885b      	ldrh	r3, [r3, #2]
 800177a:	429a      	cmp	r2, r3
 800177c:	d205      	bcs.n	800178a <LineDetect_show+0x56>
				lcd_send_cmd(0x80 | 0x18);
 800177e:	2098      	movs	r0, #152	; 0x98
 8001780:	f000 fc04 	bl	8001f8c <lcd_send_cmd>
				lcd_send_string("1");
 8001784:	484c      	ldr	r0, [pc, #304]	; (80018b8 <LineDetect_show+0x184>)
 8001786:	f000 fcb2 	bl	80020ee <lcd_send_string>
			}
			if (Sensor_ADC_Value[2] < Sensor_Threshold[2]) {
 800178a:	4b49      	ldr	r3, [pc, #292]	; (80018b0 <LineDetect_show+0x17c>)
 800178c:	889a      	ldrh	r2, [r3, #4]
 800178e:	4b49      	ldr	r3, [pc, #292]	; (80018b4 <LineDetect_show+0x180>)
 8001790:	889b      	ldrh	r3, [r3, #4]
 8001792:	429a      	cmp	r2, r3
 8001794:	d205      	bcs.n	80017a2 <LineDetect_show+0x6e>
				lcd_send_cmd(0x80 | 0x1A);
 8001796:	209a      	movs	r0, #154	; 0x9a
 8001798:	f000 fbf8 	bl	8001f8c <lcd_send_cmd>
				lcd_send_string("1");
 800179c:	4846      	ldr	r0, [pc, #280]	; (80018b8 <LineDetect_show+0x184>)
 800179e:	f000 fca6 	bl	80020ee <lcd_send_string>
			}
			if (Sensor_ADC_Value[3] < Sensor_Threshold[3]) {
 80017a2:	4b43      	ldr	r3, [pc, #268]	; (80018b0 <LineDetect_show+0x17c>)
 80017a4:	88da      	ldrh	r2, [r3, #6]
 80017a6:	4b43      	ldr	r3, [pc, #268]	; (80018b4 <LineDetect_show+0x180>)
 80017a8:	88db      	ldrh	r3, [r3, #6]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d205      	bcs.n	80017ba <LineDetect_show+0x86>
				lcd_send_cmd(0x80 | 0x1C);
 80017ae:	209c      	movs	r0, #156	; 0x9c
 80017b0:	f000 fbec 	bl	8001f8c <lcd_send_cmd>
				lcd_send_string("1");
 80017b4:	4840      	ldr	r0, [pc, #256]	; (80018b8 <LineDetect_show+0x184>)
 80017b6:	f000 fc9a 	bl	80020ee <lcd_send_string>
			}
			if (Sensor_ADC_Value[4] < Sensor_Threshold[4]) {
 80017ba:	4b3d      	ldr	r3, [pc, #244]	; (80018b0 <LineDetect_show+0x17c>)
 80017bc:	891a      	ldrh	r2, [r3, #8]
 80017be:	4b3d      	ldr	r3, [pc, #244]	; (80018b4 <LineDetect_show+0x180>)
 80017c0:	891b      	ldrh	r3, [r3, #8]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d205      	bcs.n	80017d2 <LineDetect_show+0x9e>
				lcd_send_cmd(0x80 | 0x1E);
 80017c6:	209e      	movs	r0, #158	; 0x9e
 80017c8:	f000 fbe0 	bl	8001f8c <lcd_send_cmd>
				lcd_send_string("1");
 80017cc:	483a      	ldr	r0, [pc, #232]	; (80018b8 <LineDetect_show+0x184>)
 80017ce:	f000 fc8e 	bl	80020ee <lcd_send_string>
			}
			if (Sensor_ADC_Value[5] < Sensor_Threshold[5]) {
 80017d2:	4b37      	ldr	r3, [pc, #220]	; (80018b0 <LineDetect_show+0x17c>)
 80017d4:	895a      	ldrh	r2, [r3, #10]
 80017d6:	4b37      	ldr	r3, [pc, #220]	; (80018b4 <LineDetect_show+0x180>)
 80017d8:	895b      	ldrh	r3, [r3, #10]
 80017da:	429a      	cmp	r2, r3
 80017dc:	d205      	bcs.n	80017ea <LineDetect_show+0xb6>
				lcd_send_cmd(0x80 | 0x20);
 80017de:	20a0      	movs	r0, #160	; 0xa0
 80017e0:	f000 fbd4 	bl	8001f8c <lcd_send_cmd>
				lcd_send_string("1");
 80017e4:	4834      	ldr	r0, [pc, #208]	; (80018b8 <LineDetect_show+0x184>)
 80017e6:	f000 fc82 	bl	80020ee <lcd_send_string>
			}
			if (Sensor_ADC_Value[0] >= Sensor_Threshold[0]) {
 80017ea:	4b31      	ldr	r3, [pc, #196]	; (80018b0 <LineDetect_show+0x17c>)
 80017ec:	881a      	ldrh	r2, [r3, #0]
 80017ee:	4b31      	ldr	r3, [pc, #196]	; (80018b4 <LineDetect_show+0x180>)
 80017f0:	881b      	ldrh	r3, [r3, #0]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d305      	bcc.n	8001802 <LineDetect_show+0xce>
				lcd_send_cmd(0x80 | 0x16);
 80017f6:	2096      	movs	r0, #150	; 0x96
 80017f8:	f000 fbc8 	bl	8001f8c <lcd_send_cmd>
				lcd_send_string(" ");
 80017fc:	482f      	ldr	r0, [pc, #188]	; (80018bc <LineDetect_show+0x188>)
 80017fe:	f000 fc76 	bl	80020ee <lcd_send_string>
			}
			if (Sensor_ADC_Value[1] >= Sensor_Threshold[1]) {
 8001802:	4b2b      	ldr	r3, [pc, #172]	; (80018b0 <LineDetect_show+0x17c>)
 8001804:	885a      	ldrh	r2, [r3, #2]
 8001806:	4b2b      	ldr	r3, [pc, #172]	; (80018b4 <LineDetect_show+0x180>)
 8001808:	885b      	ldrh	r3, [r3, #2]
 800180a:	429a      	cmp	r2, r3
 800180c:	d305      	bcc.n	800181a <LineDetect_show+0xe6>
				lcd_send_cmd(0x80 | 0x18);
 800180e:	2098      	movs	r0, #152	; 0x98
 8001810:	f000 fbbc 	bl	8001f8c <lcd_send_cmd>
				lcd_send_string(" ");
 8001814:	4829      	ldr	r0, [pc, #164]	; (80018bc <LineDetect_show+0x188>)
 8001816:	f000 fc6a 	bl	80020ee <lcd_send_string>
			}
			if (Sensor_ADC_Value[2] >= Sensor_Threshold[2]) {
 800181a:	4b25      	ldr	r3, [pc, #148]	; (80018b0 <LineDetect_show+0x17c>)
 800181c:	889a      	ldrh	r2, [r3, #4]
 800181e:	4b25      	ldr	r3, [pc, #148]	; (80018b4 <LineDetect_show+0x180>)
 8001820:	889b      	ldrh	r3, [r3, #4]
 8001822:	429a      	cmp	r2, r3
 8001824:	d305      	bcc.n	8001832 <LineDetect_show+0xfe>
				lcd_send_cmd(0x80 | 0x1A);
 8001826:	209a      	movs	r0, #154	; 0x9a
 8001828:	f000 fbb0 	bl	8001f8c <lcd_send_cmd>
				lcd_send_string(" ");
 800182c:	4823      	ldr	r0, [pc, #140]	; (80018bc <LineDetect_show+0x188>)
 800182e:	f000 fc5e 	bl	80020ee <lcd_send_string>
			}
			if (Sensor_ADC_Value[3] >= Sensor_Threshold[3]) {
 8001832:	4b1f      	ldr	r3, [pc, #124]	; (80018b0 <LineDetect_show+0x17c>)
 8001834:	88da      	ldrh	r2, [r3, #6]
 8001836:	4b1f      	ldr	r3, [pc, #124]	; (80018b4 <LineDetect_show+0x180>)
 8001838:	88db      	ldrh	r3, [r3, #6]
 800183a:	429a      	cmp	r2, r3
 800183c:	d305      	bcc.n	800184a <LineDetect_show+0x116>
				lcd_send_cmd(0x80 | 0x1C);
 800183e:	209c      	movs	r0, #156	; 0x9c
 8001840:	f000 fba4 	bl	8001f8c <lcd_send_cmd>
				lcd_send_string(" ");
 8001844:	481d      	ldr	r0, [pc, #116]	; (80018bc <LineDetect_show+0x188>)
 8001846:	f000 fc52 	bl	80020ee <lcd_send_string>
			}
			if (Sensor_ADC_Value[4] >= Sensor_Threshold[4]) {
 800184a:	4b19      	ldr	r3, [pc, #100]	; (80018b0 <LineDetect_show+0x17c>)
 800184c:	891a      	ldrh	r2, [r3, #8]
 800184e:	4b19      	ldr	r3, [pc, #100]	; (80018b4 <LineDetect_show+0x180>)
 8001850:	891b      	ldrh	r3, [r3, #8]
 8001852:	429a      	cmp	r2, r3
 8001854:	d305      	bcc.n	8001862 <LineDetect_show+0x12e>
				lcd_send_cmd(0x80 | 0x1E);
 8001856:	209e      	movs	r0, #158	; 0x9e
 8001858:	f000 fb98 	bl	8001f8c <lcd_send_cmd>
				lcd_send_string(" ");
 800185c:	4817      	ldr	r0, [pc, #92]	; (80018bc <LineDetect_show+0x188>)
 800185e:	f000 fc46 	bl	80020ee <lcd_send_string>
			}
			if (Sensor_ADC_Value[5] >= Sensor_Threshold[5]) {
 8001862:	4b13      	ldr	r3, [pc, #76]	; (80018b0 <LineDetect_show+0x17c>)
 8001864:	895a      	ldrh	r2, [r3, #10]
 8001866:	4b13      	ldr	r3, [pc, #76]	; (80018b4 <LineDetect_show+0x180>)
 8001868:	895b      	ldrh	r3, [r3, #10]
 800186a:	429a      	cmp	r2, r3
 800186c:	d305      	bcc.n	800187a <LineDetect_show+0x146>
				lcd_send_cmd(0x80 | 0x20);
 800186e:	20a0      	movs	r0, #160	; 0xa0
 8001870:	f000 fb8c 	bl	8001f8c <lcd_send_cmd>
				lcd_send_string(" ");
 8001874:	4811      	ldr	r0, [pc, #68]	; (80018bc <LineDetect_show+0x188>)
 8001876:	f000 fc3a 	bl	80020ee <lcd_send_string>
		for (int8_t i = 0; i < 6; i++) {
 800187a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187e:	b2db      	uxtb	r3, r3
 8001880:	3301      	adds	r3, #1
 8001882:	b2db      	uxtb	r3, r3
 8001884:	71fb      	strb	r3, [r7, #7]
 8001886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188a:	2b05      	cmp	r3, #5
 800188c:	f77f af65 	ble.w	800175a <LineDetect_show+0x26>
	while (cancel_menu) {
 8001890:	4b0b      	ldr	r3, [pc, #44]	; (80018c0 <LineDetect_show+0x18c>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2b00      	cmp	r3, #0
 8001896:	f47f af5d 	bne.w	8001754 <LineDetect_show+0x20>
				lcd_send_string(" ");
			}
#endif
		}
	}
	lcd_clear();
 800189a:	f000 fbd7 	bl	800204c <lcd_clear>
}
 800189e:	bf00      	nop
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	0800f1b4 	.word	0x0800f1b4
 80018ac:	0800f1c8 	.word	0x0800f1c8
 80018b0:	200004a8 	.word	0x200004a8
 80018b4:	20000010 	.word	0x20000010
 80018b8:	0800f1dc 	.word	0x0800f1dc
 80018bc:	0800f1e0 	.word	0x0800f1e0
 80018c0:	20000005 	.word	0x20000005

080018c4 <Saving_Process>:

static void Saving_Process(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
		sprintf(kp_val,"%.2f ",Kp);
 80018c8:	4b1a      	ldr	r3, [pc, #104]	; (8001934 <Saving_Process+0x70>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7fe fe43 	bl	8000558 <__aeabi_f2d>
 80018d2:	4602      	mov	r2, r0
 80018d4:	460b      	mov	r3, r1
 80018d6:	4918      	ldr	r1, [pc, #96]	; (8001938 <Saving_Process+0x74>)
 80018d8:	4818      	ldr	r0, [pc, #96]	; (800193c <Saving_Process+0x78>)
 80018da:	f009 fc93 	bl	800b204 <siprintf>
		strcat(string,kp_val);
 80018de:	4917      	ldr	r1, [pc, #92]	; (800193c <Saving_Process+0x78>)
 80018e0:	4817      	ldr	r0, [pc, #92]	; (8001940 <Saving_Process+0x7c>)
 80018e2:	f009 fcaf 	bl	800b244 <strcat>
		sprintf(ki_val,"%.2f ",Ki);
 80018e6:	4b17      	ldr	r3, [pc, #92]	; (8001944 <Saving_Process+0x80>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7fe fe34 	bl	8000558 <__aeabi_f2d>
 80018f0:	4602      	mov	r2, r0
 80018f2:	460b      	mov	r3, r1
 80018f4:	4910      	ldr	r1, [pc, #64]	; (8001938 <Saving_Process+0x74>)
 80018f6:	4814      	ldr	r0, [pc, #80]	; (8001948 <Saving_Process+0x84>)
 80018f8:	f009 fc84 	bl	800b204 <siprintf>
		strcat(string,ki_val);
 80018fc:	4912      	ldr	r1, [pc, #72]	; (8001948 <Saving_Process+0x84>)
 80018fe:	4810      	ldr	r0, [pc, #64]	; (8001940 <Saving_Process+0x7c>)
 8001900:	f009 fca0 	bl	800b244 <strcat>
		sprintf(kd_val,"%.2f ",Kd);
 8001904:	4b11      	ldr	r3, [pc, #68]	; (800194c <Saving_Process+0x88>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4618      	mov	r0, r3
 800190a:	f7fe fe25 	bl	8000558 <__aeabi_f2d>
 800190e:	4602      	mov	r2, r0
 8001910:	460b      	mov	r3, r1
 8001912:	4909      	ldr	r1, [pc, #36]	; (8001938 <Saving_Process+0x74>)
 8001914:	480e      	ldr	r0, [pc, #56]	; (8001950 <Saving_Process+0x8c>)
 8001916:	f009 fc75 	bl	800b204 <siprintf>
		strcat(string,kd_val);
 800191a:	490d      	ldr	r1, [pc, #52]	; (8001950 <Saving_Process+0x8c>)
 800191c:	4808      	ldr	r0, [pc, #32]	; (8001940 <Saving_Process+0x7c>)
 800191e:	f009 fc91 	bl	800b244 <strcat>
		Flash_Write_Data(0x08020000, string);
 8001922:	4907      	ldr	r1, [pc, #28]	; (8001940 <Saving_Process+0x7c>)
 8001924:	480b      	ldr	r0, [pc, #44]	; (8001954 <Saving_Process+0x90>)
 8001926:	f000 fac5 	bl	8001eb4 <Flash_Write_Data>
		HAL_NVIC_SystemReset();
 800192a:	f004 fc9c 	bl	8006266 <HAL_NVIC_SystemReset>
}
 800192e:	bf00      	nop
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	2000001c 	.word	0x2000001c
 8001938:	0800f1e4 	.word	0x0800f1e4
 800193c:	200004b4 	.word	0x200004b4
 8001940:	200002d4 	.word	0x200002d4
 8001944:	2000027c 	.word	0x2000027c
 8001948:	20000608 	.word	0x20000608
 800194c:	20000020 	.word	0x20000020
 8001950:	2000049c 	.word	0x2000049c
 8001954:	08020000 	.word	0x08020000

08001958 <Wifi_Connect_establish>:

static void Wifi_Connect_establish(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0

		Menu_type = Main_menu;
 800195c:	4b03      	ldr	r3, [pc, #12]	; (800196c <Wifi_Connect_establish+0x14>)
 800195e:	2201      	movs	r2, #1
 8001960:	701a      	strb	r2, [r3, #0]
		lcd_clear();
 8001962:	f000 fb73 	bl	800204c <lcd_clear>
}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	20000001 	.word	0x20000001

08001970 <Path_Solver>:
static void Path_Solver(uint8_t line)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	4603      	mov	r3, r0
 8001978:	71fb      	strb	r3, [r7, #7]
	switch (line) {
 800197a:	79fb      	ldrb	r3, [r7, #7]
 800197c:	3b01      	subs	r3, #1
 800197e:	2b03      	cmp	r3, #3
 8001980:	f200 80b0 	bhi.w	8001ae4 <Path_Solver+0x174>
 8001984:	a201      	add	r2, pc, #4	; (adr r2, 800198c <Path_Solver+0x1c>)
 8001986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800198a:	bf00      	nop
 800198c:	0800199d 	.word	0x0800199d
 8001990:	080019ef 	.word	0x080019ef
 8001994:	08001a41 	.word	0x08001a41
 8001998:	08001a93 	.word	0x08001a93
		case 1:
			sprintf(First_str, ">First Point: %2d  ", First_point);
 800199c:	4b53      	ldr	r3, [pc, #332]	; (8001aec <Path_Solver+0x17c>)
 800199e:	f993 3000 	ldrsb.w	r3, [r3]
 80019a2:	461a      	mov	r2, r3
 80019a4:	4952      	ldr	r1, [pc, #328]	; (8001af0 <Path_Solver+0x180>)
 80019a6:	4853      	ldr	r0, [pc, #332]	; (8001af4 <Path_Solver+0x184>)
 80019a8:	f009 fc2c 	bl	800b204 <siprintf>
			lcd_send_cmd(0x80 | 0x00);
 80019ac:	2080      	movs	r0, #128	; 0x80
 80019ae:	f000 faed 	bl	8001f8c <lcd_send_cmd>
			lcd_send_string(First_str);
 80019b2:	4850      	ldr	r0, [pc, #320]	; (8001af4 <Path_Solver+0x184>)
 80019b4:	f000 fb9b 	bl	80020ee <lcd_send_string>
			sprintf(Last_str, " Last Point: %2d    ", Last_point);
 80019b8:	4b4f      	ldr	r3, [pc, #316]	; (8001af8 <Path_Solver+0x188>)
 80019ba:	f993 3000 	ldrsb.w	r3, [r3]
 80019be:	461a      	mov	r2, r3
 80019c0:	494e      	ldr	r1, [pc, #312]	; (8001afc <Path_Solver+0x18c>)
 80019c2:	484f      	ldr	r0, [pc, #316]	; (8001b00 <Path_Solver+0x190>)
 80019c4:	f009 fc1e 	bl	800b204 <siprintf>
			lcd_send_cmd(0x80 | 0x40);
 80019c8:	20c0      	movs	r0, #192	; 0xc0
 80019ca:	f000 fadf 	bl	8001f8c <lcd_send_cmd>
			lcd_send_string(Last_str);
 80019ce:	484c      	ldr	r0, [pc, #304]	; (8001b00 <Path_Solver+0x190>)
 80019d0:	f000 fb8d 	bl	80020ee <lcd_send_string>
			lcd_send_cmd(0x80 | 0x14);
 80019d4:	2094      	movs	r0, #148	; 0x94
 80019d6:	f000 fad9 	bl	8001f8c <lcd_send_cmd>
			lcd_send_string(" Submit             ");
 80019da:	484a      	ldr	r0, [pc, #296]	; (8001b04 <Path_Solver+0x194>)
 80019dc:	f000 fb87 	bl	80020ee <lcd_send_string>
			lcd_send_cmd(0x80 | 0x54);
 80019e0:	20d4      	movs	r0, #212	; 0xd4
 80019e2:	f000 fad3 	bl	8001f8c <lcd_send_cmd>
			lcd_send_string(" Return to main menu");
 80019e6:	4848      	ldr	r0, [pc, #288]	; (8001b08 <Path_Solver+0x198>)
 80019e8:	f000 fb81 	bl	80020ee <lcd_send_string>
			break;
 80019ec:	e07a      	b.n	8001ae4 <Path_Solver+0x174>
		case 2:
			sprintf(First_str, " First Point: %2d  ", First_point);
 80019ee:	4b3f      	ldr	r3, [pc, #252]	; (8001aec <Path_Solver+0x17c>)
 80019f0:	f993 3000 	ldrsb.w	r3, [r3]
 80019f4:	461a      	mov	r2, r3
 80019f6:	4945      	ldr	r1, [pc, #276]	; (8001b0c <Path_Solver+0x19c>)
 80019f8:	483e      	ldr	r0, [pc, #248]	; (8001af4 <Path_Solver+0x184>)
 80019fa:	f009 fc03 	bl	800b204 <siprintf>
			lcd_send_cmd(0x80 | 0x00);
 80019fe:	2080      	movs	r0, #128	; 0x80
 8001a00:	f000 fac4 	bl	8001f8c <lcd_send_cmd>
			lcd_send_string(First_str);
 8001a04:	483b      	ldr	r0, [pc, #236]	; (8001af4 <Path_Solver+0x184>)
 8001a06:	f000 fb72 	bl	80020ee <lcd_send_string>
			sprintf(Last_str, ">Last Point: %2d    ", Last_point);
 8001a0a:	4b3b      	ldr	r3, [pc, #236]	; (8001af8 <Path_Solver+0x188>)
 8001a0c:	f993 3000 	ldrsb.w	r3, [r3]
 8001a10:	461a      	mov	r2, r3
 8001a12:	493f      	ldr	r1, [pc, #252]	; (8001b10 <Path_Solver+0x1a0>)
 8001a14:	483a      	ldr	r0, [pc, #232]	; (8001b00 <Path_Solver+0x190>)
 8001a16:	f009 fbf5 	bl	800b204 <siprintf>
			lcd_send_cmd(0x80 | 0x40);
 8001a1a:	20c0      	movs	r0, #192	; 0xc0
 8001a1c:	f000 fab6 	bl	8001f8c <lcd_send_cmd>
			lcd_send_string(Last_str);
 8001a20:	4837      	ldr	r0, [pc, #220]	; (8001b00 <Path_Solver+0x190>)
 8001a22:	f000 fb64 	bl	80020ee <lcd_send_string>
			lcd_send_cmd(0x80 | 0x14);
 8001a26:	2094      	movs	r0, #148	; 0x94
 8001a28:	f000 fab0 	bl	8001f8c <lcd_send_cmd>
			lcd_send_string(" Submit             ");
 8001a2c:	4835      	ldr	r0, [pc, #212]	; (8001b04 <Path_Solver+0x194>)
 8001a2e:	f000 fb5e 	bl	80020ee <lcd_send_string>
			lcd_send_cmd(0x80 | 0x54);
 8001a32:	20d4      	movs	r0, #212	; 0xd4
 8001a34:	f000 faaa 	bl	8001f8c <lcd_send_cmd>
			lcd_send_string(" Return to main menu");
 8001a38:	4833      	ldr	r0, [pc, #204]	; (8001b08 <Path_Solver+0x198>)
 8001a3a:	f000 fb58 	bl	80020ee <lcd_send_string>
			break;
 8001a3e:	e051      	b.n	8001ae4 <Path_Solver+0x174>
		case 3:
			sprintf(First_str, " First Point: %2d  ", First_point);
 8001a40:	4b2a      	ldr	r3, [pc, #168]	; (8001aec <Path_Solver+0x17c>)
 8001a42:	f993 3000 	ldrsb.w	r3, [r3]
 8001a46:	461a      	mov	r2, r3
 8001a48:	4930      	ldr	r1, [pc, #192]	; (8001b0c <Path_Solver+0x19c>)
 8001a4a:	482a      	ldr	r0, [pc, #168]	; (8001af4 <Path_Solver+0x184>)
 8001a4c:	f009 fbda 	bl	800b204 <siprintf>
			lcd_send_cmd(0x80 | 0x00);
 8001a50:	2080      	movs	r0, #128	; 0x80
 8001a52:	f000 fa9b 	bl	8001f8c <lcd_send_cmd>
			lcd_send_string(First_str);
 8001a56:	4827      	ldr	r0, [pc, #156]	; (8001af4 <Path_Solver+0x184>)
 8001a58:	f000 fb49 	bl	80020ee <lcd_send_string>
			sprintf(Last_str, " Last Point: %2d    ", Last_point);
 8001a5c:	4b26      	ldr	r3, [pc, #152]	; (8001af8 <Path_Solver+0x188>)
 8001a5e:	f993 3000 	ldrsb.w	r3, [r3]
 8001a62:	461a      	mov	r2, r3
 8001a64:	4925      	ldr	r1, [pc, #148]	; (8001afc <Path_Solver+0x18c>)
 8001a66:	4826      	ldr	r0, [pc, #152]	; (8001b00 <Path_Solver+0x190>)
 8001a68:	f009 fbcc 	bl	800b204 <siprintf>
			lcd_send_cmd(0x80 | 0x40);
 8001a6c:	20c0      	movs	r0, #192	; 0xc0
 8001a6e:	f000 fa8d 	bl	8001f8c <lcd_send_cmd>
			lcd_send_string(Last_str);
 8001a72:	4823      	ldr	r0, [pc, #140]	; (8001b00 <Path_Solver+0x190>)
 8001a74:	f000 fb3b 	bl	80020ee <lcd_send_string>
			lcd_send_cmd(0x80 | 0x14);
 8001a78:	2094      	movs	r0, #148	; 0x94
 8001a7a:	f000 fa87 	bl	8001f8c <lcd_send_cmd>
			lcd_send_string(">Submit             ");
 8001a7e:	4825      	ldr	r0, [pc, #148]	; (8001b14 <Path_Solver+0x1a4>)
 8001a80:	f000 fb35 	bl	80020ee <lcd_send_string>
			lcd_send_cmd(0x80 | 0x54);
 8001a84:	20d4      	movs	r0, #212	; 0xd4
 8001a86:	f000 fa81 	bl	8001f8c <lcd_send_cmd>
			lcd_send_string(" Return to main menu");
 8001a8a:	481f      	ldr	r0, [pc, #124]	; (8001b08 <Path_Solver+0x198>)
 8001a8c:	f000 fb2f 	bl	80020ee <lcd_send_string>
			break;
 8001a90:	e028      	b.n	8001ae4 <Path_Solver+0x174>
		case 4:
			sprintf(First_str, " First Point: %2d   ", First_point);
 8001a92:	4b16      	ldr	r3, [pc, #88]	; (8001aec <Path_Solver+0x17c>)
 8001a94:	f993 3000 	ldrsb.w	r3, [r3]
 8001a98:	461a      	mov	r2, r3
 8001a9a:	491f      	ldr	r1, [pc, #124]	; (8001b18 <Path_Solver+0x1a8>)
 8001a9c:	4815      	ldr	r0, [pc, #84]	; (8001af4 <Path_Solver+0x184>)
 8001a9e:	f009 fbb1 	bl	800b204 <siprintf>
			lcd_send_cmd(0x80 | 0x00);
 8001aa2:	2080      	movs	r0, #128	; 0x80
 8001aa4:	f000 fa72 	bl	8001f8c <lcd_send_cmd>
			lcd_send_string(First_str);
 8001aa8:	4812      	ldr	r0, [pc, #72]	; (8001af4 <Path_Solver+0x184>)
 8001aaa:	f000 fb20 	bl	80020ee <lcd_send_string>
			sprintf(Last_str, " Last Point: %2d     ", Last_point);
 8001aae:	4b12      	ldr	r3, [pc, #72]	; (8001af8 <Path_Solver+0x188>)
 8001ab0:	f993 3000 	ldrsb.w	r3, [r3]
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	4919      	ldr	r1, [pc, #100]	; (8001b1c <Path_Solver+0x1ac>)
 8001ab8:	4811      	ldr	r0, [pc, #68]	; (8001b00 <Path_Solver+0x190>)
 8001aba:	f009 fba3 	bl	800b204 <siprintf>
			lcd_send_cmd(0x80 | 0x40);
 8001abe:	20c0      	movs	r0, #192	; 0xc0
 8001ac0:	f000 fa64 	bl	8001f8c <lcd_send_cmd>
			lcd_send_string(Last_str);
 8001ac4:	480e      	ldr	r0, [pc, #56]	; (8001b00 <Path_Solver+0x190>)
 8001ac6:	f000 fb12 	bl	80020ee <lcd_send_string>
			lcd_send_cmd(0x80 | 0x14);
 8001aca:	2094      	movs	r0, #148	; 0x94
 8001acc:	f000 fa5e 	bl	8001f8c <lcd_send_cmd>
			lcd_send_string(" Submit             ");
 8001ad0:	480c      	ldr	r0, [pc, #48]	; (8001b04 <Path_Solver+0x194>)
 8001ad2:	f000 fb0c 	bl	80020ee <lcd_send_string>
			lcd_send_cmd(0x80 | 0x54);
 8001ad6:	20d4      	movs	r0, #212	; 0xd4
 8001ad8:	f000 fa58 	bl	8001f8c <lcd_send_cmd>
			lcd_send_string(">Return to main menu");
 8001adc:	4810      	ldr	r0, [pc, #64]	; (8001b20 <Path_Solver+0x1b0>)
 8001ade:	f000 fb06 	bl	80020ee <lcd_send_string>
			break;
 8001ae2:	bf00      	nop
	}
}
 8001ae4:	bf00      	nop
 8001ae6:	3708      	adds	r7, #8
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	2000026e 	.word	0x2000026e
 8001af0:	0800f1ec 	.word	0x0800f1ec
 8001af4:	20000330 	.word	0x20000330
 8001af8:	2000026f 	.word	0x2000026f
 8001afc:	0800f200 	.word	0x0800f200
 8001b00:	2000031c 	.word	0x2000031c
 8001b04:	0800f218 	.word	0x0800f218
 8001b08:	0800f0cc 	.word	0x0800f0cc
 8001b0c:	0800f230 	.word	0x0800f230
 8001b10:	0800f244 	.word	0x0800f244
 8001b14:	0800f25c 	.word	0x0800f25c
 8001b18:	0800f274 	.word	0x0800f274
 8001b1c:	0800f28c 	.word	0x0800f28c
 8001b20:	0800f120 	.word	0x0800f120

08001b24 <Path_show>:
static void Path_show(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af00      	add	r7, sp, #0
	char getPath_str[20];
	GetString(First_point, Last_point, getPath_str);
 8001b2a:	4b10      	ldr	r3, [pc, #64]	; (8001b6c <Path_show+0x48>)
 8001b2c:	f993 3000 	ldrsb.w	r3, [r3]
 8001b30:	4a0f      	ldr	r2, [pc, #60]	; (8001b70 <Path_show+0x4c>)
 8001b32:	f992 1000 	ldrsb.w	r1, [r2]
 8001b36:	1d3a      	adds	r2, r7, #4
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f001 fa3b 	bl	8002fb4 <GetString>
	lcd_send_cmd(0x80 | 0x00);
 8001b3e:	2080      	movs	r0, #128	; 0x80
 8001b40:	f000 fa24 	bl	8001f8c <lcd_send_cmd>
	lcd_send_string("Path direction      ");
 8001b44:	480b      	ldr	r0, [pc, #44]	; (8001b74 <Path_show+0x50>)
 8001b46:	f000 fad2 	bl	80020ee <lcd_send_string>
	lcd_send_cmd(0x80 | 0x40);
 8001b4a:	20c0      	movs	r0, #192	; 0xc0
 8001b4c:	f000 fa1e 	bl	8001f8c <lcd_send_cmd>
	lcd_send_string(getPath_str);
 8001b50:	1d3b      	adds	r3, r7, #4
 8001b52:	4618      	mov	r0, r3
 8001b54:	f000 facb 	bl	80020ee <lcd_send_string>
	lcd_send_cmd(0x80 | 0x14);
 8001b58:	2094      	movs	r0, #148	; 0x94
 8001b5a:	f000 fa17 	bl	8001f8c <lcd_send_cmd>
	lcd_send_string("Press C to return   ");
 8001b5e:	4806      	ldr	r0, [pc, #24]	; (8001b78 <Path_show+0x54>)
 8001b60:	f000 fac5 	bl	80020ee <lcd_send_string>
}
 8001b64:	bf00      	nop
 8001b66:	3718      	adds	r7, #24
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	2000026e 	.word	0x2000026e
 8001b70:	2000026f 	.word	0x2000026f
 8001b74:	0800f2a4 	.word	0x0800f2a4
 8001b78:	0800f2bc 	.word	0x0800f2bc

08001b7c <executeAction>:
void executeAction(uint8_t line) {
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	71fb      	strb	r3, [r7, #7]
	switch (line) {
 8001b86:	79fb      	ldrb	r3, [r7, #7]
 8001b88:	3b01      	subs	r3, #1
 8001b8a:	2b07      	cmp	r3, #7
 8001b8c:	f200 8119 	bhi.w	8001dc2 <executeAction+0x246>
 8001b90:	a201      	add	r2, pc, #4	; (adr r2, 8001b98 <executeAction+0x1c>)
 8001b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b96:	bf00      	nop
 8001b98:	08001bb9 	.word	0x08001bb9
 8001b9c:	08001c51 	.word	0x08001c51
 8001ba0:	08001ce3 	.word	0x08001ce3
 8001ba4:	08001d4f 	.word	0x08001d4f
 8001ba8:	08001d83 	.word	0x08001d83
 8001bac:	08001d9f 	.word	0x08001d9f
 8001bb0:	08001dab 	.word	0x08001dab
 8001bb4:	08001db7 	.word	0x08001db7
	case 1:
		switch (Menu_type) {
 8001bb8:	4b84      	ldr	r3, [pc, #528]	; (8001dcc <executeAction+0x250>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	3b01      	subs	r3, #1
 8001bbe:	2b07      	cmp	r3, #7
 8001bc0:	d843      	bhi.n	8001c4a <executeAction+0xce>
 8001bc2:	a201      	add	r2, pc, #4	; (adr r2, 8001bc8 <executeAction+0x4c>)
 8001bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bc8:	08001be9 	.word	0x08001be9
 8001bcc:	08001c4b 	.word	0x08001c4b
 8001bd0:	08001bf7 	.word	0x08001bf7
 8001bd4:	08001c13 	.word	0x08001c13
 8001bd8:	08001c4b 	.word	0x08001c4b
 8001bdc:	08001c4b 	.word	0x08001c4b
 8001be0:	08001c4b 	.word	0x08001c4b
 8001be4:	08001c2f 	.word	0x08001c2f
		case Main_menu:
			cancel_running = 1;
 8001be8:	4b79      	ldr	r3, [pc, #484]	; (8001dd0 <executeAction+0x254>)
 8001bea:	2201      	movs	r2, #1
 8001bec:	701a      	strb	r2, [r3, #0]
			Menu_type = Running_Process;
 8001bee:	4b77      	ldr	r3, [pc, #476]	; (8001dcc <executeAction+0x250>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	701a      	strb	r2, [r3, #0]
			break;
 8001bf4:	e029      	b.n	8001c4a <executeAction+0xce>
		case PID_Menu:
			if (Kp_modify_flag == 0) {
 8001bf6:	4b77      	ldr	r3, [pc, #476]	; (8001dd4 <executeAction+0x258>)
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d105      	bne.n	8001c0a <executeAction+0x8e>
				Kp_modify_flag = 1;
 8001bfe:	4b75      	ldr	r3, [pc, #468]	; (8001dd4 <executeAction+0x258>)
 8001c00:	2201      	movs	r2, #1
 8001c02:	701a      	strb	r2, [r3, #0]
				line = 1;
 8001c04:	2301      	movs	r3, #1
 8001c06:	71fb      	strb	r3, [r7, #7]
			} else {
				Kp_modify_flag = 0;
			}
			break;
 8001c08:	e01f      	b.n	8001c4a <executeAction+0xce>
				Kp_modify_flag = 0;
 8001c0a:	4b72      	ldr	r3, [pc, #456]	; (8001dd4 <executeAction+0x258>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	701a      	strb	r2, [r3, #0]
			break;
 8001c10:	e01b      	b.n	8001c4a <executeAction+0xce>
		case Engine_menu:
			if (Left_modify_flag == 0) {
 8001c12:	4b71      	ldr	r3, [pc, #452]	; (8001dd8 <executeAction+0x25c>)
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d105      	bne.n	8001c26 <executeAction+0xaa>
				Left_modify_flag = 1;
 8001c1a:	4b6f      	ldr	r3, [pc, #444]	; (8001dd8 <executeAction+0x25c>)
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	701a      	strb	r2, [r3, #0]
				line = 1;
 8001c20:	2301      	movs	r3, #1
 8001c22:	71fb      	strb	r3, [r7, #7]
			} else {
				Left_modify_flag = 0;
			}
			break;
 8001c24:	e011      	b.n	8001c4a <executeAction+0xce>
				Left_modify_flag = 0;
 8001c26:	4b6c      	ldr	r3, [pc, #432]	; (8001dd8 <executeAction+0x25c>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	701a      	strb	r2, [r3, #0]
			break;
 8001c2c:	e00d      	b.n	8001c4a <executeAction+0xce>
		case Path_solver_menu:
			if (First_point_modify_flag == 0){
 8001c2e:	4b6b      	ldr	r3, [pc, #428]	; (8001ddc <executeAction+0x260>)
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d105      	bne.n	8001c42 <executeAction+0xc6>
				First_point_modify_flag = 1;
 8001c36:	4b69      	ldr	r3, [pc, #420]	; (8001ddc <executeAction+0x260>)
 8001c38:	2201      	movs	r2, #1
 8001c3a:	701a      	strb	r2, [r3, #0]
				line = 1;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	71fb      	strb	r3, [r7, #7]
			}
			else
			{
				First_point_modify_flag = 0;
			}
			break;
 8001c40:	e002      	b.n	8001c48 <executeAction+0xcc>
				First_point_modify_flag = 0;
 8001c42:	4b66      	ldr	r3, [pc, #408]	; (8001ddc <executeAction+0x260>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	701a      	strb	r2, [r3, #0]
			break;
 8001c48:	bf00      	nop
		}

		lcd_clear();
 8001c4a:	f000 f9ff 	bl	800204c <lcd_clear>
		break;
 8001c4e:	e0b8      	b.n	8001dc2 <executeAction+0x246>

	case 2:
		switch (Menu_type) {
 8001c50:	4b5e      	ldr	r3, [pc, #376]	; (8001dcc <executeAction+0x250>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	3b01      	subs	r3, #1
 8001c56:	2b07      	cmp	r3, #7
 8001c58:	d840      	bhi.n	8001cdc <executeAction+0x160>
 8001c5a:	a201      	add	r2, pc, #4	; (adr r2, 8001c60 <executeAction+0xe4>)
 8001c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c60:	08001c81 	.word	0x08001c81
 8001c64:	08001cdd 	.word	0x08001cdd
 8001c68:	08001c89 	.word	0x08001c89
 8001c6c:	08001ca5 	.word	0x08001ca5
 8001c70:	08001cdd 	.word	0x08001cdd
 8001c74:	08001cdd 	.word	0x08001cdd
 8001c78:	08001cdd 	.word	0x08001cdd
 8001c7c:	08001cc1 	.word	0x08001cc1
		case Main_menu:
			Menu_type = Color_Processing;
 8001c80:	4b52      	ldr	r3, [pc, #328]	; (8001dcc <executeAction+0x250>)
 8001c82:	2202      	movs	r2, #2
 8001c84:	701a      	strb	r2, [r3, #0]
			break;
 8001c86:	e029      	b.n	8001cdc <executeAction+0x160>
		case PID_Menu:
			if (Ki_modify_flag == 0) {
 8001c88:	4b55      	ldr	r3, [pc, #340]	; (8001de0 <executeAction+0x264>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d105      	bne.n	8001c9c <executeAction+0x120>
				Ki_modify_flag = 1;
 8001c90:	4b53      	ldr	r3, [pc, #332]	; (8001de0 <executeAction+0x264>)
 8001c92:	2201      	movs	r2, #1
 8001c94:	701a      	strb	r2, [r3, #0]
				line = 2;
 8001c96:	2302      	movs	r3, #2
 8001c98:	71fb      	strb	r3, [r7, #7]
			} else {
				Ki_modify_flag = 0;
			}
			break;
 8001c9a:	e01f      	b.n	8001cdc <executeAction+0x160>
				Ki_modify_flag = 0;
 8001c9c:	4b50      	ldr	r3, [pc, #320]	; (8001de0 <executeAction+0x264>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	701a      	strb	r2, [r3, #0]
			break;
 8001ca2:	e01b      	b.n	8001cdc <executeAction+0x160>
		case Engine_menu:
			if (Right_modify_flag == 0) {
 8001ca4:	4b4f      	ldr	r3, [pc, #316]	; (8001de4 <executeAction+0x268>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d105      	bne.n	8001cb8 <executeAction+0x13c>
				Right_modify_flag = 1;
 8001cac:	4b4d      	ldr	r3, [pc, #308]	; (8001de4 <executeAction+0x268>)
 8001cae:	2201      	movs	r2, #1
 8001cb0:	701a      	strb	r2, [r3, #0]
				line = 2;
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	71fb      	strb	r3, [r7, #7]
			} else {
				Right_modify_flag = 0;
			}
			break;
 8001cb6:	e011      	b.n	8001cdc <executeAction+0x160>
				Right_modify_flag = 0;
 8001cb8:	4b4a      	ldr	r3, [pc, #296]	; (8001de4 <executeAction+0x268>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	701a      	strb	r2, [r3, #0]
			break;
 8001cbe:	e00d      	b.n	8001cdc <executeAction+0x160>
		case Path_solver_menu:
			if (Last_point_modify_flag == 0) {
 8001cc0:	4b49      	ldr	r3, [pc, #292]	; (8001de8 <executeAction+0x26c>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d105      	bne.n	8001cd4 <executeAction+0x158>
				Last_point_modify_flag = 1;
 8001cc8:	4b47      	ldr	r3, [pc, #284]	; (8001de8 <executeAction+0x26c>)
 8001cca:	2201      	movs	r2, #1
 8001ccc:	701a      	strb	r2, [r3, #0]
				line = 2;
 8001cce:	2302      	movs	r3, #2
 8001cd0:	71fb      	strb	r3, [r7, #7]
			} else {
				Last_point_modify_flag = 0;
			}
			break;
 8001cd2:	e002      	b.n	8001cda <executeAction+0x15e>
				Last_point_modify_flag = 0;
 8001cd4:	4b44      	ldr	r3, [pc, #272]	; (8001de8 <executeAction+0x26c>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	701a      	strb	r2, [r3, #0]
			break;
 8001cda:	bf00      	nop
		}

		lcd_clear();
 8001cdc:	f000 f9b6 	bl	800204c <lcd_clear>
		break;
 8001ce0:	e06f      	b.n	8001dc2 <executeAction+0x246>

	case 3:
		switch (Menu_type) {
 8001ce2:	4b3a      	ldr	r3, [pc, #232]	; (8001dcc <executeAction+0x250>)
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	2b07      	cmp	r3, #7
 8001cea:	d82d      	bhi.n	8001d48 <executeAction+0x1cc>
 8001cec:	a201      	add	r2, pc, #4	; (adr r2, 8001cf4 <executeAction+0x178>)
 8001cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cf2:	bf00      	nop
 8001cf4:	08001d15 	.word	0x08001d15
 8001cf8:	08001d49 	.word	0x08001d49
 8001cfc:	08001d1d 	.word	0x08001d1d
 8001d00:	08001d39 	.word	0x08001d39
 8001d04:	08001d49 	.word	0x08001d49
 8001d08:	08001d49 	.word	0x08001d49
 8001d0c:	08001d49 	.word	0x08001d49
 8001d10:	08001d41 	.word	0x08001d41
		case Main_menu:
			Menu_type = PID_Menu;
 8001d14:	4b2d      	ldr	r3, [pc, #180]	; (8001dcc <executeAction+0x250>)
 8001d16:	2203      	movs	r2, #3
 8001d18:	701a      	strb	r2, [r3, #0]
			break;
 8001d1a:	e015      	b.n	8001d48 <executeAction+0x1cc>
		case PID_Menu:
			if (Kd_modify_flag == 0) {
 8001d1c:	4b33      	ldr	r3, [pc, #204]	; (8001dec <executeAction+0x270>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d105      	bne.n	8001d30 <executeAction+0x1b4>
				Kd_modify_flag = 1;
 8001d24:	4b31      	ldr	r3, [pc, #196]	; (8001dec <executeAction+0x270>)
 8001d26:	2201      	movs	r2, #1
 8001d28:	701a      	strb	r2, [r3, #0]
				line = 3;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	71fb      	strb	r3, [r7, #7]
			} else {
				Kd_modify_flag = 0;
			}
			break;
 8001d2e:	e00b      	b.n	8001d48 <executeAction+0x1cc>
				Kd_modify_flag = 0;
 8001d30:	4b2e      	ldr	r3, [pc, #184]	; (8001dec <executeAction+0x270>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	701a      	strb	r2, [r3, #0]
			break;
 8001d36:	e007      	b.n	8001d48 <executeAction+0x1cc>
		case Engine_menu:
			Menu_type = Main_menu;
 8001d38:	4b24      	ldr	r3, [pc, #144]	; (8001dcc <executeAction+0x250>)
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	701a      	strb	r2, [r3, #0]
			break;
 8001d3e:	e003      	b.n	8001d48 <executeAction+0x1cc>
		case Path_solver_menu:
			Menu_type = Path_show_menu;
 8001d40:	4b22      	ldr	r3, [pc, #136]	; (8001dcc <executeAction+0x250>)
 8001d42:	2209      	movs	r2, #9
 8001d44:	701a      	strb	r2, [r3, #0]
			break;
 8001d46:	bf00      	nop
		}

		lcd_clear();
 8001d48:	f000 f980 	bl	800204c <lcd_clear>
		break;
 8001d4c:	e039      	b.n	8001dc2 <executeAction+0x246>

	case 4:
		switch (Menu_type) {
 8001d4e:	4b1f      	ldr	r3, [pc, #124]	; (8001dcc <executeAction+0x250>)
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	2b08      	cmp	r3, #8
 8001d54:	d00e      	beq.n	8001d74 <executeAction+0x1f8>
 8001d56:	2b08      	cmp	r3, #8
 8001d58:	dc10      	bgt.n	8001d7c <executeAction+0x200>
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d002      	beq.n	8001d64 <executeAction+0x1e8>
 8001d5e:	2b03      	cmp	r3, #3
 8001d60:	d004      	beq.n	8001d6c <executeAction+0x1f0>
 8001d62:	e00b      	b.n	8001d7c <executeAction+0x200>
		case Main_menu:
			Menu_type = Engine_menu;
 8001d64:	4b19      	ldr	r3, [pc, #100]	; (8001dcc <executeAction+0x250>)
 8001d66:	2204      	movs	r2, #4
 8001d68:	701a      	strb	r2, [r3, #0]
			break;
 8001d6a:	e007      	b.n	8001d7c <executeAction+0x200>
		case PID_Menu:
			Menu_type = Main_menu;
 8001d6c:	4b17      	ldr	r3, [pc, #92]	; (8001dcc <executeAction+0x250>)
 8001d6e:	2201      	movs	r2, #1
 8001d70:	701a      	strb	r2, [r3, #0]
			break;
 8001d72:	e003      	b.n	8001d7c <executeAction+0x200>
		case Path_solver_menu:
			Menu_type = Main_menu;
 8001d74:	4b15      	ldr	r3, [pc, #84]	; (8001dcc <executeAction+0x250>)
 8001d76:	2201      	movs	r2, #1
 8001d78:	701a      	strb	r2, [r3, #0]
			break;
 8001d7a:	bf00      	nop
		}
		lcd_clear();
 8001d7c:	f000 f966 	bl	800204c <lcd_clear>
		break;
 8001d80:	e01f      	b.n	8001dc2 <executeAction+0x246>

	case 5:
		switch (Menu_type) {
 8001d82:	4b12      	ldr	r3, [pc, #72]	; (8001dcc <executeAction+0x250>)
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d106      	bne.n	8001d98 <executeAction+0x21c>
		case Main_menu:
			cancel_menu = 1;
 8001d8a:	4b19      	ldr	r3, [pc, #100]	; (8001df0 <executeAction+0x274>)
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	701a      	strb	r2, [r3, #0]
			Menu_type = LineDetect_Show;
 8001d90:	4b0e      	ldr	r3, [pc, #56]	; (8001dcc <executeAction+0x250>)
 8001d92:	2205      	movs	r2, #5
 8001d94:	701a      	strb	r2, [r3, #0]
			break;
 8001d96:	bf00      	nop
		}
		lcd_clear();
 8001d98:	f000 f958 	bl	800204c <lcd_clear>
		break;
 8001d9c:	e011      	b.n	8001dc2 <executeAction+0x246>

	case 6:
		Saving_Process();
 8001d9e:	f7ff fd91 	bl	80018c4 <Saving_Process>
		Menu_type = Main_menu;
 8001da2:	4b0a      	ldr	r3, [pc, #40]	; (8001dcc <executeAction+0x250>)
 8001da4:	2201      	movs	r2, #1
 8001da6:	701a      	strb	r2, [r3, #0]
		break;
 8001da8:	e00b      	b.n	8001dc2 <executeAction+0x246>

	case 7:
		Menu_type = Wifi_connect;
 8001daa:	4b08      	ldr	r3, [pc, #32]	; (8001dcc <executeAction+0x250>)
 8001dac:	2206      	movs	r2, #6
 8001dae:	701a      	strb	r2, [r3, #0]
		lcd_clear();
 8001db0:	f000 f94c 	bl	800204c <lcd_clear>
		break;
 8001db4:	e005      	b.n	8001dc2 <executeAction+0x246>

	case 8:
		Menu_type = Path_solver_menu;
 8001db6:	4b05      	ldr	r3, [pc, #20]	; (8001dcc <executeAction+0x250>)
 8001db8:	2208      	movs	r2, #8
 8001dba:	701a      	strb	r2, [r3, #0]
		lcd_clear();
 8001dbc:	f000 f946 	bl	800204c <lcd_clear>
		break;
 8001dc0:	bf00      	nop
	}
}
 8001dc2:	bf00      	nop
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	20000001 	.word	0x20000001
 8001dd0:	20000006 	.word	0x20000006
 8001dd4:	20000265 	.word	0x20000265
 8001dd8:	20000268 	.word	0x20000268
 8001ddc:	2000026a 	.word	0x2000026a
 8001de0:	20000266 	.word	0x20000266
 8001de4:	20000269 	.word	0x20000269
 8001de8:	2000026b 	.word	0x2000026b
 8001dec:	20000267 	.word	0x20000267
 8001df0:	20000005 	.word	0x20000005

08001df4 <GetSector>:
  * @brief  Gets the sector of a given address
  * @param  None
  * @retval The sector of a given address
  */
static uint32_t GetSector(uint32_t Address)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	60fb      	str	r3, [r7, #12]

  if((Address < 0x08003FFF) && (Address >= 0x08000000))
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4a23      	ldr	r2, [pc, #140]	; (8001e90 <GetSector+0x9c>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d806      	bhi.n	8001e16 <GetSector+0x22>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001e0e:	d302      	bcc.n	8001e16 <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;
 8001e10:	2300      	movs	r3, #0
 8001e12:	60fb      	str	r3, [r7, #12]
 8001e14:	e035      	b.n	8001e82 <GetSector+0x8e>
  }
  else if((Address < 0x08007FFF) && (Address >= 0x08004000))
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a1e      	ldr	r2, [pc, #120]	; (8001e94 <GetSector+0xa0>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d806      	bhi.n	8001e2c <GetSector+0x38>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a1d      	ldr	r2, [pc, #116]	; (8001e98 <GetSector+0xa4>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d302      	bcc.n	8001e2c <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;
 8001e26:	2301      	movs	r3, #1
 8001e28:	60fb      	str	r3, [r7, #12]
 8001e2a:	e02a      	b.n	8001e82 <GetSector+0x8e>
  }
  else if((Address < 0x0800BFFF) && (Address >= 0x08008000))
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4a1b      	ldr	r2, [pc, #108]	; (8001e9c <GetSector+0xa8>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d806      	bhi.n	8001e42 <GetSector+0x4e>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4a1a      	ldr	r2, [pc, #104]	; (8001ea0 <GetSector+0xac>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d302      	bcc.n	8001e42 <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	60fb      	str	r3, [r7, #12]
 8001e40:	e01f      	b.n	8001e82 <GetSector+0x8e>
  }
  else if((Address < 0x0800FFFF) && (Address >= 0x0800C000))
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a17      	ldr	r2, [pc, #92]	; (8001ea4 <GetSector+0xb0>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d206      	bcs.n	8001e58 <GetSector+0x64>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a16      	ldr	r2, [pc, #88]	; (8001ea8 <GetSector+0xb4>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d302      	bcc.n	8001e58 <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;
 8001e52:	2303      	movs	r3, #3
 8001e54:	60fb      	str	r3, [r7, #12]
 8001e56:	e014      	b.n	8001e82 <GetSector+0x8e>
  }
  else if((Address < 0x0801FFFF) && (Address >= 0x08010000))
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	4a14      	ldr	r2, [pc, #80]	; (8001eac <GetSector+0xb8>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d206      	bcs.n	8001e6e <GetSector+0x7a>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	4a10      	ldr	r2, [pc, #64]	; (8001ea4 <GetSector+0xb0>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d902      	bls.n	8001e6e <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;
 8001e68:	2304      	movs	r3, #4
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	e009      	b.n	8001e82 <GetSector+0x8e>
  }
  else if((Address < 0x0803FFFF) && (Address >= 0x08020000))
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a0f      	ldr	r2, [pc, #60]	; (8001eb0 <GetSector+0xbc>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d205      	bcs.n	8001e82 <GetSector+0x8e>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a0c      	ldr	r2, [pc, #48]	; (8001eac <GetSector+0xb8>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d901      	bls.n	8001e82 <GetSector+0x8e>
  {
    sector = FLASH_SECTOR_5;
 8001e7e:	2305      	movs	r3, #5
 8001e80:	60fb      	str	r3, [r7, #12]
  }
  else if (Address < 0x081FFFFF) && (Address >= 0x081E0000)
  {
    sector = FLASH_SECTOR_23;
  }*/
  return sector;
 8001e82:	68fb      	ldr	r3, [r7, #12]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3714      	adds	r7, #20
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr
 8001e90:	08003ffe 	.word	0x08003ffe
 8001e94:	08007ffe 	.word	0x08007ffe
 8001e98:	08004000 	.word	0x08004000
 8001e9c:	0800bffe 	.word	0x0800bffe
 8001ea0:	08008000 	.word	0x08008000
 8001ea4:	0800ffff 	.word	0x0800ffff
 8001ea8:	0800c000 	.word	0x0800c000
 8001eac:	0801ffff 	.word	0x0801ffff
 8001eb0:	0803ffff 	.word	0x0803ffff

08001eb4 <Flash_Write_Data>:
}*/



uint32_t Flash_Write_Data (uint32_t StartSectorAddress, uint32_t * DATA_32)
{
 8001eb4:	b590      	push	{r4, r7, lr}
 8001eb6:	b089      	sub	sp, #36	; 0x24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	int sofar=0;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	61fb      	str	r3, [r7, #28]

	int numberofwords = (strlen(DATA_32)/4) + ((strlen(DATA_32) % 4) != 0);
 8001ec2:	6838      	ldr	r0, [r7, #0]
 8001ec4:	f7fe f98c 	bl	80001e0 <strlen>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	089c      	lsrs	r4, r3, #2
 8001ecc:	6838      	ldr	r0, [r7, #0]
 8001ece:	f7fe f987 	bl	80001e0 <strlen>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	f003 0303 	and.w	r3, r3, #3
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	bf14      	ite	ne
 8001edc:	2301      	movne	r3, #1
 8001ede:	2300      	moveq	r3, #0
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	4423      	add	r3, r4
 8001ee4:	61bb      	str	r3, [r7, #24]


	 /* Unlock the Flash to enable the flash control register access *************/
	  HAL_FLASH_Unlock();
 8001ee6:	f004 fe25 	bl	8006b34 <HAL_FLASH_Unlock>

	  /* Erase the user Flash area */

	  /* Get the number of sector to erase from 1st sector */

	  uint32_t StartSector = GetSector(StartSectorAddress);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f7ff ff82 	bl	8001df4 <GetSector>
 8001ef0:	6178      	str	r0, [r7, #20]
	  uint32_t EndSectorAddress = StartSectorAddress + numberofwords*4;
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4413      	add	r3, r2
 8001efc:	613b      	str	r3, [r7, #16]
	  uint32_t EndSector = GetSector(EndSectorAddress);
 8001efe:	6938      	ldr	r0, [r7, #16]
 8001f00:	f7ff ff78 	bl	8001df4 <GetSector>
 8001f04:	60f8      	str	r0, [r7, #12]

	  /* Fill EraseInit structure*/
	  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8001f06:	4b20      	ldr	r3, [pc, #128]	; (8001f88 <Flash_Write_Data+0xd4>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
	  EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8001f0c:	4b1e      	ldr	r3, [pc, #120]	; (8001f88 <Flash_Write_Data+0xd4>)
 8001f0e:	2202      	movs	r2, #2
 8001f10:	611a      	str	r2, [r3, #16]
	  EraseInitStruct.Sector        = StartSector;
 8001f12:	4a1d      	ldr	r2, [pc, #116]	; (8001f88 <Flash_Write_Data+0xd4>)
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	6093      	str	r3, [r2, #8]
	  EraseInitStruct.NbSectors     = (EndSector - StartSector) + 1;
 8001f18:	68fa      	ldr	r2, [r7, #12]
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	3301      	adds	r3, #1
 8001f20:	4a19      	ldr	r2, [pc, #100]	; (8001f88 <Flash_Write_Data+0xd4>)
 8001f22:	60d3      	str	r3, [r2, #12]

	  /* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
	     you have to make sure that these data are rewritten before they are accessed during code
	     execution. If this cannot be done safely, it is recommended to flush the caches by setting the
	     DCRST and ICRST bits in the FLASH_CR register. */
	  if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 8001f24:	f107 0308 	add.w	r3, r7, #8
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4817      	ldr	r0, [pc, #92]	; (8001f88 <Flash_Write_Data+0xd4>)
 8001f2c:	f004 ff80 	bl	8006e30 <HAL_FLASHEx_Erase>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d01d      	beq.n	8001f72 <Flash_Write_Data+0xbe>
	  {
		  return HAL_FLASH_GetError ();
 8001f36:	f004 fe2f 	bl	8006b98 <HAL_FLASH_GetError>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	e020      	b.n	8001f80 <Flash_Write_Data+0xcc>
	  /* Program the user Flash area word by word
	    (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartSectorAddress, DATA_32[sofar]) == HAL_OK)
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	683a      	ldr	r2, [r7, #0]
 8001f44:	4413      	add	r3, r2
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	461a      	mov	r2, r3
 8001f4a:	f04f 0300 	mov.w	r3, #0
 8001f4e:	6879      	ldr	r1, [r7, #4]
 8001f50:	2002      	movs	r0, #2
 8001f52:	f004 fd9b 	bl	8006a8c <HAL_FLASH_Program>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d106      	bne.n	8001f6a <Flash_Write_Data+0xb6>
	     {
	    	 StartSectorAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	3304      	adds	r3, #4
 8001f60:	607b      	str	r3, [r7, #4]
	    	 sofar++;
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	3301      	adds	r3, #1
 8001f66:	61fb      	str	r3, [r7, #28]
 8001f68:	e003      	b.n	8001f72 <Flash_Write_Data+0xbe>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 8001f6a:	f004 fe15 	bl	8006b98 <HAL_FLASH_GetError>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	e006      	b.n	8001f80 <Flash_Write_Data+0xcc>
	   while (sofar<numberofwords)
 8001f72:	69fa      	ldr	r2, [r7, #28]
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	dbe1      	blt.n	8001f3e <Flash_Write_Data+0x8a>
	     }
	   }

	  /* Lock the Flash to disable the flash control register access (recommended
	     to protect the FLASH memory against possible unwanted operation) *********/
	  HAL_FLASH_Lock();
 8001f7a:	f004 fdfd 	bl	8006b78 <HAL_FLASH_Lock>

	   return 0;
 8001f7e:	2300      	movs	r3, #0
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3724      	adds	r7, #36	; 0x24
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd90      	pop	{r4, r7, pc}
 8001f88:	20000250 	.word	0x20000250

08001f8c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c3;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af02      	add	r7, sp, #8
 8001f92:	4603      	mov	r3, r0
 8001f94:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8001f96:	79fb      	ldrb	r3, [r7, #7]
 8001f98:	f023 030f 	bic.w	r3, r3, #15
 8001f9c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8001f9e:	79fb      	ldrb	r3, [r7, #7]
 8001fa0:	011b      	lsls	r3, r3, #4
 8001fa2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001fa4:	7bfb      	ldrb	r3, [r7, #15]
 8001fa6:	f043 030c 	orr.w	r3, r3, #12
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8001fae:	7bfb      	ldrb	r3, [r7, #15]
 8001fb0:	f043 0308 	orr.w	r3, r3, #8
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001fb8:	7bbb      	ldrb	r3, [r7, #14]
 8001fba:	f043 030c 	orr.w	r3, r3, #12
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8001fc2:	7bbb      	ldrb	r3, [r7, #14]
 8001fc4:	f043 0308 	orr.w	r3, r3, #8
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c3, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001fcc:	f107 0208 	add.w	r2, r7, #8
 8001fd0:	2364      	movs	r3, #100	; 0x64
 8001fd2:	9300      	str	r3, [sp, #0]
 8001fd4:	2304      	movs	r3, #4
 8001fd6:	214e      	movs	r1, #78	; 0x4e
 8001fd8:	4803      	ldr	r0, [pc, #12]	; (8001fe8 <lcd_send_cmd+0x5c>)
 8001fda:	f005 fb5d 	bl	8007698 <HAL_I2C_Master_Transmit>
}
 8001fde:	bf00      	nop
 8001fe0:	3710      	adds	r7, #16
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	200003a8 	.word	0x200003a8

08001fec <lcd_send_data>:

void lcd_send_data (char data)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b086      	sub	sp, #24
 8001ff0:	af02      	add	r7, sp, #8
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8001ff6:	79fb      	ldrb	r3, [r7, #7]
 8001ff8:	f023 030f 	bic.w	r3, r3, #15
 8001ffc:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8001ffe:	79fb      	ldrb	r3, [r7, #7]
 8002000:	011b      	lsls	r3, r3, #4
 8002002:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 8002004:	7bfb      	ldrb	r3, [r7, #15]
 8002006:	f043 030d 	orr.w	r3, r3, #13
 800200a:	b2db      	uxtb	r3, r3
 800200c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 800200e:	7bfb      	ldrb	r3, [r7, #15]
 8002010:	f043 0309 	orr.w	r3, r3, #9
 8002014:	b2db      	uxtb	r3, r3
 8002016:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 8002018:	7bbb      	ldrb	r3, [r7, #14]
 800201a:	f043 030d 	orr.w	r3, r3, #13
 800201e:	b2db      	uxtb	r3, r3
 8002020:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 8002022:	7bbb      	ldrb	r3, [r7, #14]
 8002024:	f043 0309 	orr.w	r3, r3, #9
 8002028:	b2db      	uxtb	r3, r3
 800202a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c3, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800202c:	f107 0208 	add.w	r2, r7, #8
 8002030:	2364      	movs	r3, #100	; 0x64
 8002032:	9300      	str	r3, [sp, #0]
 8002034:	2304      	movs	r3, #4
 8002036:	214e      	movs	r1, #78	; 0x4e
 8002038:	4803      	ldr	r0, [pc, #12]	; (8002048 <lcd_send_data+0x5c>)
 800203a:	f005 fb2d 	bl	8007698 <HAL_I2C_Master_Transmit>
}
 800203e:	bf00      	nop
 8002040:	3710      	adds	r7, #16
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	200003a8 	.word	0x200003a8

0800204c <lcd_clear>:

void lcd_clear (void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x00);
 8002052:	2000      	movs	r0, #0
 8002054:	f7ff ff9a 	bl	8001f8c <lcd_send_cmd>
	for (int i=0; i<100; i++)
 8002058:	2300      	movs	r3, #0
 800205a:	607b      	str	r3, [r7, #4]
 800205c:	e005      	b.n	800206a <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 800205e:	2020      	movs	r0, #32
 8002060:	f7ff ffc4 	bl	8001fec <lcd_send_data>
	for (int i=0; i<100; i++)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	3301      	adds	r3, #1
 8002068:	607b      	str	r3, [r7, #4]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2b63      	cmp	r3, #99	; 0x63
 800206e:	ddf6      	ble.n	800205e <lcd_clear+0x12>
	}
}
 8002070:	bf00      	nop
 8002072:	bf00      	nop
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <lcd_init>:

void lcd_init (void)
{
 800207a:	b580      	push	{r7, lr}
 800207c:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 800207e:	2032      	movs	r0, #50	; 0x32
 8002080:	f003 fa6c 	bl	800555c <HAL_Delay>
	lcd_send_cmd (0x30);
 8002084:	2030      	movs	r0, #48	; 0x30
 8002086:	f7ff ff81 	bl	8001f8c <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 800208a:	2005      	movs	r0, #5
 800208c:	f003 fa66 	bl	800555c <HAL_Delay>
	lcd_send_cmd (0x30);
 8002090:	2030      	movs	r0, #48	; 0x30
 8002092:	f7ff ff7b 	bl	8001f8c <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8002096:	2001      	movs	r0, #1
 8002098:	f003 fa60 	bl	800555c <HAL_Delay>
	lcd_send_cmd (0x30);
 800209c:	2030      	movs	r0, #48	; 0x30
 800209e:	f7ff ff75 	bl	8001f8c <lcd_send_cmd>
	HAL_Delay(10);
 80020a2:	200a      	movs	r0, #10
 80020a4:	f003 fa5a 	bl	800555c <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80020a8:	2020      	movs	r0, #32
 80020aa:	f7ff ff6f 	bl	8001f8c <lcd_send_cmd>
	HAL_Delay(10);
 80020ae:	200a      	movs	r0, #10
 80020b0:	f003 fa54 	bl	800555c <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80020b4:	2028      	movs	r0, #40	; 0x28
 80020b6:	f7ff ff69 	bl	8001f8c <lcd_send_cmd>
	HAL_Delay(1);
 80020ba:	2001      	movs	r0, #1
 80020bc:	f003 fa4e 	bl	800555c <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80020c0:	2008      	movs	r0, #8
 80020c2:	f7ff ff63 	bl	8001f8c <lcd_send_cmd>
	HAL_Delay(1);
 80020c6:	2001      	movs	r0, #1
 80020c8:	f003 fa48 	bl	800555c <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80020cc:	2001      	movs	r0, #1
 80020ce:	f7ff ff5d 	bl	8001f8c <lcd_send_cmd>
	HAL_Delay(1);
 80020d2:	2001      	movs	r0, #1
 80020d4:	f003 fa42 	bl	800555c <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80020d8:	2006      	movs	r0, #6
 80020da:	f7ff ff57 	bl	8001f8c <lcd_send_cmd>
	HAL_Delay(1);
 80020de:	2001      	movs	r0, #1
 80020e0:	f003 fa3c 	bl	800555c <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80020e4:	200c      	movs	r0, #12
 80020e6:	f7ff ff51 	bl	8001f8c <lcd_send_cmd>
}
 80020ea:	bf00      	nop
 80020ec:	bd80      	pop	{r7, pc}

080020ee <lcd_send_string>:

void lcd_send_string (char *str)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b082      	sub	sp, #8
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80020f6:	e006      	b.n	8002106 <lcd_send_string+0x18>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	1c5a      	adds	r2, r3, #1
 80020fc:	607a      	str	r2, [r7, #4]
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff ff73 	bl	8001fec <lcd_send_data>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d1f4      	bne.n	80020f8 <lcd_send_string+0xa>
}
 800210e:	bf00      	nop
 8002110:	bf00      	nop
 8002112:	3708      	adds	r7, #8
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <MotorL_EnablePWM>:
 *  Created on: Apr 29, 2021
 *      Author: Duc Thang
 */
#include "HAL_MOTOR_CONTROL.h"
void MotorL_EnablePWM(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800211c:	2108      	movs	r1, #8
 800211e:	4802      	ldr	r0, [pc, #8]	; (8002128 <MotorL_EnablePWM+0x10>)
 8002120:	f006 fbee 	bl	8008900 <HAL_TIM_PWM_Start>
}
 8002124:	bf00      	nop
 8002126:	bd80      	pop	{r7, pc}
 8002128:	20000510 	.word	0x20000510

0800212c <MotorR_EnablePWM>:
void MotorL_DisablePWM(void)
{
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
}
void MotorR_EnablePWM(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8002130:	210c      	movs	r1, #12
 8002132:	4802      	ldr	r0, [pc, #8]	; (800213c <MotorR_EnablePWM+0x10>)
 8002134:	f006 fbe4 	bl	8008900 <HAL_TIM_PWM_Start>
}
 8002138:	bf00      	nop
 800213a:	bd80      	pop	{r7, pc}
 800213c:	20000510 	.word	0x20000510

08002140 <MotorL_SetPWM>:
void MotorR_DisablePWM(void)
{
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
}
void MotorL_SetPWM(int32_t PWMVal)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
	if(PWMVal >= 7200)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 800214e:	db03      	blt.n	8002158 <MotorL_SetPWM+0x18>
	{
		PWMVal = 7200;
 8002150:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 8002154:	607b      	str	r3, [r7, #4]
 8002156:	e005      	b.n	8002164 <MotorL_SetPWM+0x24>
	}
	else if(PWMVal <= -7200)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f513 5fe1 	cmn.w	r3, #7200	; 0x1c20
 800215e:	dc01      	bgt.n	8002164 <MotorL_SetPWM+0x24>
	{
		PWMVal = -7200;
 8002160:	4b0f      	ldr	r3, [pc, #60]	; (80021a0 <MotorL_SetPWM+0x60>)
 8002162:	607b      	str	r3, [r7, #4]
	}
	if(PWMVal >= 0)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	db0a      	blt.n	8002180 <MotorL_SetPWM+0x40>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 800216a:	2200      	movs	r2, #0
 800216c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002170:	480c      	ldr	r0, [pc, #48]	; (80021a4 <MotorL_SetPWM+0x64>)
 8002172:	f005 f91b 	bl	80073ac <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,PWMVal);
 8002176:	4b0c      	ldr	r3, [pc, #48]	; (80021a8 <MotorL_SetPWM+0x68>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	63da      	str	r2, [r3, #60]	; 0x3c
	else
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,7200+PWMVal);
	}
}
 800217e:	e00b      	b.n	8002198 <MotorL_SetPWM+0x58>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8002180:	2201      	movs	r2, #1
 8002182:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002186:	4807      	ldr	r0, [pc, #28]	; (80021a4 <MotorL_SetPWM+0x64>)
 8002188:	f005 f910 	bl	80073ac <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,7200+PWMVal);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f503 52e1 	add.w	r2, r3, #7200	; 0x1c20
 8002192:	4b05      	ldr	r3, [pc, #20]	; (80021a8 <MotorL_SetPWM+0x68>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002198:	bf00      	nop
 800219a:	3708      	adds	r7, #8
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	ffffe3e0 	.word	0xffffe3e0
 80021a4:	40020400 	.word	0x40020400
 80021a8:	20000510 	.word	0x20000510

080021ac <MotorR_SetPWM>:
void MotorR_SetPWM(int32_t PWMVal)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
	if(PWMVal >= 7200)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 80021ba:	db03      	blt.n	80021c4 <MotorR_SetPWM+0x18>
	{
		PWMVal = 7200;
 80021bc:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 80021c0:	607b      	str	r3, [r7, #4]
 80021c2:	e005      	b.n	80021d0 <MotorR_SetPWM+0x24>
	}
	else if(PWMVal <= -7200)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f513 5fe1 	cmn.w	r3, #7200	; 0x1c20
 80021ca:	dc01      	bgt.n	80021d0 <MotorR_SetPWM+0x24>
	{
		PWMVal = -7200;
 80021cc:	4b0e      	ldr	r3, [pc, #56]	; (8002208 <MotorR_SetPWM+0x5c>)
 80021ce:	607b      	str	r3, [r7, #4]
	}
	if(PWMVal >= 0)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	db09      	blt.n	80021ea <MotorR_SetPWM+0x3e>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80021d6:	2200      	movs	r2, #0
 80021d8:	2104      	movs	r1, #4
 80021da:	480c      	ldr	r0, [pc, #48]	; (800220c <MotorR_SetPWM+0x60>)
 80021dc:	f005 f8e6 	bl	80073ac <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,PWMVal);
 80021e0:	4b0b      	ldr	r3, [pc, #44]	; (8002210 <MotorR_SetPWM+0x64>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	641a      	str	r2, [r3, #64]	; 0x40
	else
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,7200+PWMVal);
	}
}
 80021e8:	e00a      	b.n	8002200 <MotorR_SetPWM+0x54>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 80021ea:	2201      	movs	r2, #1
 80021ec:	2104      	movs	r1, #4
 80021ee:	4807      	ldr	r0, [pc, #28]	; (800220c <MotorR_SetPWM+0x60>)
 80021f0:	f005 f8dc 	bl	80073ac <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,7200+PWMVal);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f503 52e1 	add.w	r2, r3, #7200	; 0x1c20
 80021fa:	4b05      	ldr	r3, [pc, #20]	; (8002210 <MotorR_SetPWM+0x64>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002200:	bf00      	nop
 8002202:	3708      	adds	r7, #8
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	ffffe3e0 	.word	0xffffe3e0
 800220c:	40020400 	.word	0x40020400
 8002210:	20000510 	.word	0x20000510

08002214 <Control_File>:
#include "Matrix_solver.h"
#define max 12
static void Control_File(int A[12][12][12])
{
 8002214:	b480      	push	{r7}
 8002216:	b085      	sub	sp, #20
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
    for (int8_t i = 0; i < 12; i++)
 800221c:	2300      	movs	r3, #0
 800221e:	73fb      	strb	r3, [r7, #15]
 8002220:	e035      	b.n	800228e <Control_File+0x7a>
        for (int8_t j = 0; j < 12; j++)
 8002222:	2300      	movs	r3, #0
 8002224:	73bb      	strb	r3, [r7, #14]
 8002226:	e028      	b.n	800227a <Control_File+0x66>
            for (int8_t k = 0; k < 5; k++)
 8002228:	2300      	movs	r3, #0
 800222a:	737b      	strb	r3, [r7, #13]
 800222c:	e01b      	b.n	8002266 <Control_File+0x52>
                A[i][j][k] = -1;
 800222e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8002232:	4613      	mov	r3, r2
 8002234:	00db      	lsls	r3, r3, #3
 8002236:	4413      	add	r3, r2
 8002238:	019b      	lsls	r3, r3, #6
 800223a:	461a      	mov	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	1899      	adds	r1, r3, r2
 8002240:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8002244:	f997 000d 	ldrsb.w	r0, [r7, #13]
 8002248:	4613      	mov	r3, r2
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	4413      	add	r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	4403      	add	r3, r0
 8002252:	f04f 32ff 	mov.w	r2, #4294967295
 8002256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            for (int8_t k = 0; k < 5; k++)
 800225a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800225e:	b2db      	uxtb	r3, r3
 8002260:	3301      	adds	r3, #1
 8002262:	b2db      	uxtb	r3, r3
 8002264:	737b      	strb	r3, [r7, #13]
 8002266:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800226a:	2b04      	cmp	r3, #4
 800226c:	dddf      	ble.n	800222e <Control_File+0x1a>
        for (int8_t j = 0; j < 12; j++)
 800226e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002272:	b2db      	uxtb	r3, r3
 8002274:	3301      	adds	r3, #1
 8002276:	b2db      	uxtb	r3, r3
 8002278:	73bb      	strb	r3, [r7, #14]
 800227a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800227e:	2b0b      	cmp	r3, #11
 8002280:	ddd2      	ble.n	8002228 <Control_File+0x14>
    for (int8_t i = 0; i < 12; i++)
 8002282:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002286:	b2db      	uxtb	r3, r3
 8002288:	3301      	adds	r3, #1
 800228a:	b2db      	uxtb	r3, r3
 800228c:	73fb      	strb	r3, [r7, #15]
 800228e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002292:	2b0b      	cmp	r3, #11
 8002294:	ddc5      	ble.n	8002222 <Control_File+0xe>
    //A[][][]=5;

    //di thang
    A[0][1][7] = 0;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	64da      	str	r2, [r3, #76]	; 0x4c
    A[1][0][2] = 0;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80022a2:	2200      	movs	r2, #0
 80022a4:	609a      	str	r2, [r3, #8]
    A[2][3][1] = 0;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 80022ac:	2200      	movs	r2, #0
 80022ae:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    A[3][2][4] = 0;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f503 63d8 	add.w	r3, r3, #1728	; 0x6c0
 80022b8:	2200      	movs	r2, #0
 80022ba:	671a      	str	r2, [r3, #112]	; 0x70
    A[4][5][3] = 0;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022c2:	2200      	movs	r2, #0
 80022c4:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
    A[5][4][6] = 0;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f503 6334 	add.w	r3, r3, #2880	; 0xb40
 80022ce:	2200      	movs	r2, #0
 80022d0:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
    A[6][7][5] = 0;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f503 6358 	add.w	r3, r3, #3456	; 0xd80
 80022da:	2200      	movs	r2, #0
 80022dc:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
    A[7][6][0] = 0;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f503 637c 	add.w	r3, r3, #4032	; 0xfc0
 80022e6:	2200      	movs	r2, #0
 80022e8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    A[8][9][6] = 0;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80022f2:	2200      	movs	r2, #0
 80022f4:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
    A[8][9][7] = 0;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80022fe:	2200      	movs	r2, #0
 8002300:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
    A[9][8][2] = 0;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 800230a:	2200      	movs	r2, #0
 800230c:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    A[9][8][3] = 0;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8002316:	2200      	movs	r2, #0
 8002318:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    A[10][11][0] = 0;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 8002322:	2200      	movs	r2, #0
 8002324:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
    A[10][11][1] = 0;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 800232e:	2200      	movs	r2, #0
 8002330:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    A[11][10][4] = 0;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 800233a:	2200      	movs	r2, #0
 800233c:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
    A[11][10][5] = 0;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 8002346:	2200      	movs	r2, #0
 8002348:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4

    //quay 180 đi thẳng
    A[0][1][10] = 1;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	659a      	str	r2, [r3, #88]	; 0x58
    A[0][1][1] = 1;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2201      	movs	r2, #1
 8002356:	635a      	str	r2, [r3, #52]	; 0x34
    A[1][0][0] = 1;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800235e:	2201      	movs	r2, #1
 8002360:	601a      	str	r2, [r3, #0]
    A[1][0][10] = 1;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8002368:	2201      	movs	r2, #1
 800236a:	629a      	str	r2, [r3, #40]	; 0x28
    A[2][3][3] = 1;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8002372:	2201      	movs	r2, #1
 8002374:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    A[2][3][9] = 1;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 800237e:	2201      	movs	r2, #1
 8002380:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    A[3][2][9] = 1;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f503 63d8 	add.w	r3, r3, #1728	; 0x6c0
 800238a:	2201      	movs	r2, #1
 800238c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    A[3][2][2] = 1;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f503 63d8 	add.w	r3, r3, #1728	; 0x6c0
 8002396:	2201      	movs	r2, #1
 8002398:	669a      	str	r2, [r3, #104]	; 0x68
    A[4][5][5] = 1;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023a0:	2201      	movs	r2, #1
 80023a2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    A[4][5][11] = 1;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023ac:	2201      	movs	r2, #1
 80023ae:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    A[5][4][4] = 1;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f503 6334 	add.w	r3, r3, #2880	; 0xb40
 80023b8:	2201      	movs	r2, #1
 80023ba:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    A[5][4][11] = 1;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f503 6334 	add.w	r3, r3, #2880	; 0xb40
 80023c4:	2201      	movs	r2, #1
 80023c6:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
    A[6][7][7] = 1;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f503 6358 	add.w	r3, r3, #3456	; 0xd80
 80023d0:	2201      	movs	r2, #1
 80023d2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
    A[6][7][8] = 1;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f503 6358 	add.w	r3, r3, #3456	; 0xd80
 80023dc:	2201      	movs	r2, #1
 80023de:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
    A[7][6][6] = 1;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f503 637c 	add.w	r3, r3, #4032	; 0xfc0
 80023e8:	2201      	movs	r2, #1
 80023ea:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    A[7][6][8] = 1;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f503 637c 	add.w	r3, r3, #4032	; 0xfc0
 80023f4:	2201      	movs	r2, #1
 80023f6:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    A[8][9][10] = 1;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002400:	2201      	movs	r2, #1
 8002402:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
    A[8][9][9] = 1;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800240c:	2201      	movs	r2, #1
 800240e:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
    A[8][9][11] = 1;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002418:	2201      	movs	r2, #1
 800241a:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
    A[9][8][8] = 1;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8002424:	2201      	movs	r2, #1
 8002426:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    A[9][8][10] = 1;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8002430:	2201      	movs	r2, #1
 8002432:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
    A[9][8][11] = 1;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 800243c:	2201      	movs	r2, #1
 800243e:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
    A[10][11][8] = 1;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 8002448:	2201      	movs	r2, #1
 800244a:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
    A[10][11][9] = 1;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 8002454:	2201      	movs	r2, #1
 8002456:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
    A[10][11][11] = 1;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 8002460:	2201      	movs	r2, #1
 8002462:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c
    A[11][10][8] = 1;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 800246c:	2201      	movs	r2, #1
 800246e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    A[11][10][9] = 1;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 8002478:	2201      	movs	r2, #1
 800247a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    A[11][10][10] = 1;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 8002484:	2201      	movs	r2, #1
 8002486:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208

    //quay 180 đi thẳng
    A[0][10][10] = 2;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2202      	movs	r2, #2
 800248e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
    A[0][10][1] = 2;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2202      	movs	r2, #2
 8002496:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
    A[1][2][2] = 2;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80024a0:	2202      	movs	r2, #2
 80024a2:	669a      	str	r2, [r3, #104]	; 0x68
    A[2][9][9] = 2;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 80024aa:	2202      	movs	r2, #2
 80024ac:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
    A[2][9][3] = 2;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 80024b6:	2202      	movs	r2, #2
 80024b8:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
    A[3][4][4] = 2;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f503 63d8 	add.w	r3, r3, #1728	; 0x6c0
 80024c2:	2202      	movs	r2, #2
 80024c4:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    A[4][11][5] = 2;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024ce:	2202      	movs	r2, #2
 80024d0:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
    A[5][6][6] = 2;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f503 6334 	add.w	r3, r3, #2880	; 0xb40
 80024da:	2202      	movs	r2, #2
 80024dc:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    A[6][8][8] = 2;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f503 6358 	add.w	r3, r3, #3456	; 0xd80
 80024e6:	2202      	movs	r2, #2
 80024e8:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    A[6][8][7] = 2;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f503 6358 	add.w	r3, r3, #3456	; 0xd80
 80024f2:	2202      	movs	r2, #2
 80024f4:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
    A[7][0][0] = 2;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f503 637c 	add.w	r3, r3, #4032	; 0xfc0
 80024fe:	2202      	movs	r2, #2
 8002500:	601a      	str	r2, [r3, #0]
    A[8][11][9] = 2;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002508:	2202      	movs	r2, #2
 800250a:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
    A[8][11][10] = 2;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002514:	2202      	movs	r2, #2
 8002516:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
    A[8][11][11] = 2;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002520:	2202      	movs	r2, #2
 8002522:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c
    A[8][7][6] = 2;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800252c:	2202      	movs	r2, #2
 800252e:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
    A[8][7][7] = 2;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002538:	2202      	movs	r2, #2
 800253a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
    A[9][3][2] = 2;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8002544:	2202      	movs	r2, #2
 8002546:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    A[9][3][3] = 2;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8002550:	2202      	movs	r2, #2
 8002552:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    A[9][10][8] = 2;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 800255c:	2202      	movs	r2, #2
 800255e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    A[9][10][10] = 2;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8002568:	2202      	movs	r2, #2
 800256a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
    A[9][10][11] = 2;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8002574:	2202      	movs	r2, #2
 8002576:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
    A[10][1][0] = 2;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 8002580:	2202      	movs	r2, #2
 8002582:	631a      	str	r2, [r3, #48]	; 0x30
    A[10][1][1] = 2;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 800258a:	2202      	movs	r2, #2
 800258c:	635a      	str	r2, [r3, #52]	; 0x34
    A[10][8][8] = 2;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 8002594:	2202      	movs	r2, #2
 8002596:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    A[10][8][9] = 2;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 80025a0:	2202      	movs	r2, #2
 80025a2:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
    A[10][8][11] = 2;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 80025ac:	2202      	movs	r2, #2
 80025ae:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
    A[11][5][4] = 2;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 80025b8:	2202      	movs	r2, #2
 80025ba:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    A[11][5][5] = 2;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 80025c4:	2202      	movs	r2, #2
 80025c6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    A[11][9][8] = 2;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 80025d0:	2202      	movs	r2, #2
 80025d2:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
    A[11][9][9] = 2;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 80025dc:	2202      	movs	r2, #2
 80025de:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
    A[11][9][10] = 2;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 80025e8:	2202      	movs	r2, #2
 80025ea:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8

    //thẳng phải
    A[0][10][7] = 3;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2203      	movs	r2, #3
 80025f2:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
    A[1][2][10] = 3;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80025fc:	2203      	movs	r2, #3
 80025fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    A[1][2][0] = 3;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8002608:	2203      	movs	r2, #3
 800260a:	661a      	str	r2, [r3, #96]	; 0x60
    A[2][9][1] = 3;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8002612:	2203      	movs	r2, #3
 8002614:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
    A[3][4][9] = 3;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f503 63d8 	add.w	r3, r3, #1728	; 0x6c0
 800261e:	2203      	movs	r2, #3
 8002620:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    A[3][4][2] = 3;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f503 63d8 	add.w	r3, r3, #1728	; 0x6c0
 800262a:	2203      	movs	r2, #3
 800262c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    A[4][11][3] = 3;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002636:	2203      	movs	r2, #3
 8002638:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    A[5][6][4] = 3;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f503 6334 	add.w	r3, r3, #2880	; 0xb40
 8002642:	2203      	movs	r2, #3
 8002644:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    A[5][6][11] = 3;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f503 6334 	add.w	r3, r3, #2880	; 0xb40
 800264e:	2203      	movs	r2, #3
 8002650:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
    A[6][8][5] = 3;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f503 6358 	add.w	r3, r3, #3456	; 0xd80
 800265a:	2203      	movs	r2, #3
 800265c:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    A[7][0][6] = 3;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f503 637c 	add.w	r3, r3, #4032	; 0xfc0
 8002666:	2203      	movs	r2, #3
 8002668:	619a      	str	r2, [r3, #24]
    A[7][0][8] = 3;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f503 637c 	add.w	r3, r3, #4032	; 0xfc0
 8002670:	2203      	movs	r2, #3
 8002672:	621a      	str	r2, [r3, #32]
    A[8][11][6] = 3;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800267a:	2203      	movs	r2, #3
 800267c:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
    A[8][11][7] = 3;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002686:	2203      	movs	r2, #3
 8002688:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
    A[8][7][9] = 3;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002692:	2203      	movs	r2, #3
 8002694:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
    A[8][7][10] = 3;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800269e:	2203      	movs	r2, #3
 80026a0:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    A[8][7][11] = 3;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80026aa:	2203      	movs	r2, #3
 80026ac:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    A[9][3][8] = 3;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 80026b6:	2203      	movs	r2, #3
 80026b8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    A[9][3][10] = 3;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 80026c2:	2203      	movs	r2, #3
 80026c4:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    A[9][3][11] = 3;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 80026ce:	2203      	movs	r2, #3
 80026d0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    A[9][10][2] = 3;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 80026da:	2203      	movs	r2, #3
 80026dc:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
    A[9][10][3] = 3;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 80026e6:	2203      	movs	r2, #3
 80026e8:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
    A[10][1][8] = 3;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 80026f2:	2203      	movs	r2, #3
 80026f4:	651a      	str	r2, [r3, #80]	; 0x50
    A[10][1][9] = 3;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 80026fc:	2203      	movs	r2, #3
 80026fe:	655a      	str	r2, [r3, #84]	; 0x54
    A[10][1][11] = 3;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 8002706:	2203      	movs	r2, #3
 8002708:	65da      	str	r2, [r3, #92]	; 0x5c
    A[10][8][0] = 3;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 8002710:	2203      	movs	r2, #3
 8002712:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    A[10][8][1] = 3;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 800271c:	2203      	movs	r2, #3
 800271e:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    A[11][5][8] = 3;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 8002728:	2203      	movs	r2, #3
 800272a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    A[11][5][9] = 3;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 8002734:	2203      	movs	r2, #3
 8002736:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    A[11][5][10] = 3;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 8002740:	2203      	movs	r2, #3
 8002742:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    A[11][9][4] = 3;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 800274c:	2203      	movs	r2, #3
 800274e:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
    A[11][9][5] = 3;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 8002758:	2203      	movs	r2, #3
 800275a:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4

    //thẳng, trái
    A[0][7][10] = 4;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2204      	movs	r2, #4
 8002762:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    A[0][7][1] = 4;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2204      	movs	r2, #4
 800276a:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
    A[1][10][2] = 4;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8002774:	2204      	movs	r2, #4
 8002776:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
    A[2][1][3] = 4;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8002780:	2204      	movs	r2, #4
 8002782:	63da      	str	r2, [r3, #60]	; 0x3c
    A[2][1][9] = 4;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 800278a:	2204      	movs	r2, #4
 800278c:	655a      	str	r2, [r3, #84]	; 0x54
    A[3][9][4] = 4;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f503 63d8 	add.w	r3, r3, #1728	; 0x6c0
 8002794:	2204      	movs	r2, #4
 8002796:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
    A[4][3][11] = 4;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027a0:	2204      	movs	r2, #4
 80027a2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    A[4][3][5] = 4;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027ac:	2204      	movs	r2, #4
 80027ae:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    A[5][11][6] = 4;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f503 6334 	add.w	r3, r3, #2880	; 0xb40
 80027b8:	2204      	movs	r2, #4
 80027ba:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
    A[6][5][7] = 4;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f503 6358 	add.w	r3, r3, #3456	; 0xd80
 80027c4:	2204      	movs	r2, #4
 80027c6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    A[6][5][8] = 4;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f503 6358 	add.w	r3, r3, #3456	; 0xd80
 80027d0:	2204      	movs	r2, #4
 80027d2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    A[7][8][0] = 4;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f503 637c 	add.w	r3, r3, #4032	; 0xfc0
 80027dc:	2204      	movs	r2, #4
 80027de:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    A[8][10][6] = 4;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80027e8:	2204      	movs	r2, #4
 80027ea:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
    A[8][10][7] = 4;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80027f4:	2204      	movs	r2, #4
 80027f6:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
    A[8][6][9] = 4;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002800:	2204      	movs	r2, #4
 8002802:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
    A[8][6][10] = 4;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800280c:	2204      	movs	r2, #4
 800280e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    A[8][6][11] = 4;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002818:	2204      	movs	r2, #4
 800281a:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
    A[9][2][8] = 4;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8002824:	2204      	movs	r2, #4
 8002826:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    A[9][2][10] = 4;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8002830:	2204      	movs	r2, #4
 8002832:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    A[9][2][11] = 4;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 800283c:	2204      	movs	r2, #4
 800283e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    A[9][11][2] = 4;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8002848:	2204      	movs	r2, #4
 800284a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
    A[9][11][3] = 4;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8002854:	2204      	movs	r2, #4
 8002856:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    A[10][0][8] = 4;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 8002860:	2204      	movs	r2, #4
 8002862:	621a      	str	r2, [r3, #32]
    A[10][0][9] = 4;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 800286a:	2204      	movs	r2, #4
 800286c:	625a      	str	r2, [r3, #36]	; 0x24
    A[10][0][11] = 4;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 8002874:	2204      	movs	r2, #4
 8002876:	62da      	str	r2, [r3, #44]	; 0x2c
    A[10][9][0] = 4;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 800287e:	2204      	movs	r2, #4
 8002880:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
    A[10][9][1] = 4;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 800288a:	2204      	movs	r2, #4
 800288c:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
    A[11][4][8] = 4;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 8002896:	2204      	movs	r2, #4
 8002898:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    A[11][4][9] = 4;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 80028a2:	2204      	movs	r2, #4
 80028a4:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    A[11][4][10] = 4;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 80028ae:	2204      	movs	r2, #4
 80028b0:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    A[11][8][4] = 4;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 80028ba:	2204      	movs	r2, #4
 80028bc:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    A[11][8][5] = 4;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 80028c6:	2204      	movs	r2, #4
 80028c8:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194

    //quay 180, thẳng, trái
    A[0][7][7] = 5;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2205      	movs	r2, #5
 80028d0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
    A[1][10][10] = 5;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80028da:	2205      	movs	r2, #5
 80028dc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
    A[1][10][0] = 5;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80028e6:	2205      	movs	r2, #5
 80028e8:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
    A[2][1][1] = 5;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 80028f2:	2205      	movs	r2, #5
 80028f4:	635a      	str	r2, [r3, #52]	; 0x34
    A[3][9][9] = 5;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f503 63d8 	add.w	r3, r3, #1728	; 0x6c0
 80028fc:	2205      	movs	r2, #5
 80028fe:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
    A[3][9][2] = 5;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f503 63d8 	add.w	r3, r3, #1728	; 0x6c0
 8002908:	2205      	movs	r2, #5
 800290a:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
    A[4][3][3] = 5;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002914:	2205      	movs	r2, #5
 8002916:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    A[4][11][11] = 2;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002920:	2202      	movs	r2, #2
 8002922:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c
    A[5][11][11] = 5;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f503 6334 	add.w	r3, r3, #2880	; 0xb40
 800292c:	2205      	movs	r2, #5
 800292e:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c
    A[5][11][4] = 5;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f503 6334 	add.w	r3, r3, #2880	; 0xb40
 8002938:	2205      	movs	r2, #5
 800293a:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
    A[6][5][5] = 5;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f503 6358 	add.w	r3, r3, #3456	; 0xd80
 8002944:	2205      	movs	r2, #5
 8002946:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    A[7][8][8] = 5;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f503 637c 	add.w	r3, r3, #4032	; 0xfc0
 8002950:	2205      	movs	r2, #5
 8002952:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    A[7][8][6] = 5;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f503 637c 	add.w	r3, r3, #4032	; 0xfc0
 800295c:	2205      	movs	r2, #5
 800295e:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    A[8][10][9] = 5;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002968:	2205      	movs	r2, #5
 800296a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    A[8][10][10] = 5;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002974:	2205      	movs	r2, #5
 8002976:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
    A[8][10][11] = 5;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002980:	2205      	movs	r2, #5
 8002982:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
    A[8][6][6] = 5;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800298c:	2205      	movs	r2, #5
 800298e:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    A[8][6][7] = 5;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002998:	2205      	movs	r2, #5
 800299a:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    A[9][2][2] = 5;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 80029a4:	2205      	movs	r2, #5
 80029a6:	669a      	str	r2, [r3, #104]	; 0x68
    A[9][2][3] = 5;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 80029ae:	2205      	movs	r2, #5
 80029b0:	66da      	str	r2, [r3, #108]	; 0x6c
    A[9][11][8] = 5;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 80029b8:	2205      	movs	r2, #5
 80029ba:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
    A[9][11][10] = 5;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 80029c4:	2205      	movs	r2, #5
 80029c6:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
    A[9][11][11] = 5;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 80029d0:	2205      	movs	r2, #5
 80029d2:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c
    A[10][0][0] = 5;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 80029dc:	2205      	movs	r2, #5
 80029de:	601a      	str	r2, [r3, #0]
    A[10][0][1] = 5;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 80029e6:	2205      	movs	r2, #5
 80029e8:	605a      	str	r2, [r3, #4]
    A[10][9][8] = 5;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 80029f0:	2205      	movs	r2, #5
 80029f2:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
    A[10][9][11] = 5;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 80029fc:	2205      	movs	r2, #5
 80029fe:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
    A[10][9][9] = 5;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 8002a08:	2205      	movs	r2, #5
 8002a0a:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
    A[11][4][4] = 5;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 8002a14:	2205      	movs	r2, #5
 8002a16:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    A[11][4][5] = 5;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 8002a20:	2205      	movs	r2, #5
 8002a22:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    A[11][8][8] = 5;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 8002a2c:	2205      	movs	r2, #5
 8002a2e:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    A[11][8][9] = 5;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 8002a38:	2205      	movs	r2, #5
 8002a3a:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
    A[11][8][10] = 5;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 8002a44:	2205      	movs	r2, #5
 8002a46:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
}
 8002a4a:	bf00      	nop
 8002a4c:	3714      	adds	r7, #20
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr

08002a56 <Dijkstra>:
static int Dijkstra(int A[12][12], int n, int D, int C, int result[max])
{
 8002a56:	b480      	push	{r7}
 8002a58:	b0a7      	sub	sp, #156	; 0x9c
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	60f8      	str	r0, [r7, #12]
 8002a5e:	60b9      	str	r1, [r7, #8]
 8002a60:	607a      	str	r2, [r7, #4]
 8002a62:	603b      	str	r3, [r7, #0]
    char DanhDau[max];
    int Nhan[max], Truoc[max], XP, min;
    for (int i = 0; i < n; i++)
 8002a64:	2300      	movs	r3, #0
 8002a66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002a6a:	e01e      	b.n	8002aaa <Dijkstra+0x54>
    {
        Nhan[i] = 999;
 8002a6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002a76:	4413      	add	r3, r2
 8002a78:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002a7c:	f843 2c58 	str.w	r2, [r3, #-88]
        DanhDau[i] = 0;
 8002a80:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8002a84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a88:	4413      	add	r3, r2
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	701a      	strb	r2, [r3, #0]
        Truoc[i] = D;
 8002a8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002a98:	4413      	add	r3, r2
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	f843 2c88 	str.w	r2, [r3, #-136]
    for (int i = 0; i < n; i++)
 8002aa0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002aaa:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	dbdb      	blt.n	8002a6c <Dijkstra+0x16>
    }
    Nhan[D] = 0;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002abc:	4413      	add	r3, r2
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f843 2c58 	str.w	r2, [r3, #-88]
    DanhDau[D] = 1;
 8002ac4:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4413      	add	r3, r2
 8002acc:	2201      	movs	r2, #1
 8002ace:	701a      	strb	r2, [r3, #0]
    XP = D;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    while (XP != C)
 8002ad6:	e0ad      	b.n	8002c34 <Dijkstra+0x1de>
    {
        for (int8_t j = 0; j < n; j++)
 8002ad8:	2300      	movs	r3, #0
 8002ada:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
 8002ade:	e066      	b.n	8002bae <Dijkstra+0x158>
            if (A[XP][j] > 0 && Nhan[j] > A[XP][j] + Nhan[XP] && DanhDau[j] == 0)
 8002ae0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	4413      	add	r3, r2
 8002aea:	011b      	lsls	r3, r3, #4
 8002aec:	461a      	mov	r2, r3
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	4413      	add	r3, r2
 8002af2:	f997 208b 	ldrsb.w	r2, [r7, #139]	; 0x8b
 8002af6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	dd50      	ble.n	8002ba0 <Dijkstra+0x14a>
 8002afe:	f997 308b 	ldrsb.w	r3, [r7, #139]	; 0x8b
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002b08:	4413      	add	r3, r2
 8002b0a:	f853 1c58 	ldr.w	r1, [r3, #-88]
 8002b0e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002b12:	4613      	mov	r3, r2
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	4413      	add	r3, r2
 8002b18:	011b      	lsls	r3, r3, #4
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	4413      	add	r3, r2
 8002b20:	f997 208b 	ldrsb.w	r2, [r7, #139]	; 0x8b
 8002b24:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002b28:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8002b32:	4403      	add	r3, r0
 8002b34:	f853 3c58 	ldr.w	r3, [r3, #-88]
 8002b38:	4413      	add	r3, r2
 8002b3a:	4299      	cmp	r1, r3
 8002b3c:	dd30      	ble.n	8002ba0 <Dijkstra+0x14a>
 8002b3e:	f997 308b 	ldrsb.w	r3, [r7, #139]	; 0x8b
 8002b42:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002b46:	4413      	add	r3, r2
 8002b48:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d127      	bne.n	8002ba0 <Dijkstra+0x14a>
            {
                Nhan[j] = A[XP][j] + Nhan[XP];
 8002b50:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002b54:	4613      	mov	r3, r2
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	4413      	add	r3, r2
 8002b5a:	011b      	lsls	r3, r3, #4
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	4413      	add	r3, r2
 8002b62:	f997 208b 	ldrsb.w	r2, [r7, #139]	; 0x8b
 8002b66:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002b6a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002b74:	4413      	add	r3, r2
 8002b76:	f853 2c58 	ldr.w	r2, [r3, #-88]
 8002b7a:	f997 308b 	ldrsb.w	r3, [r7, #139]	; 0x8b
 8002b7e:	440a      	add	r2, r1
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8002b86:	440b      	add	r3, r1
 8002b88:	f843 2c58 	str.w	r2, [r3, #-88]
                Truoc[j] = XP;
 8002b8c:	f997 308b 	ldrsb.w	r3, [r7, #139]	; 0x8b
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002b96:	4413      	add	r3, r2
 8002b98:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002b9c:	f843 2c88 	str.w	r2, [r3, #-136]
        for (int8_t j = 0; j < n; j++)
 8002ba0:	f997 308b 	ldrsb.w	r3, [r7, #139]	; 0x8b
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
 8002bae:	f997 308b 	ldrsb.w	r3, [r7, #139]	; 0x8b
 8002bb2:	68ba      	ldr	r2, [r7, #8]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	dc93      	bgt.n	8002ae0 <Dijkstra+0x8a>
            }
        min = 999;
 8002bb8:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002bbc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        for (int8_t j = 0; j < n; j++)
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
 8002bc6:	e029      	b.n	8002c1c <Dijkstra+0x1c6>
            if (min > Nhan[j] && DanhDau[j] == 0)
 8002bc8:	f997 308a 	ldrsb.w	r3, [r7, #138]	; 0x8a
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002bd2:	4413      	add	r3, r2
 8002bd4:	f853 3c58 	ldr.w	r3, [r3, #-88]
 8002bd8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	dd16      	ble.n	8002c0e <Dijkstra+0x1b8>
 8002be0:	f997 308a 	ldrsb.w	r3, [r7, #138]	; 0x8a
 8002be4:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002be8:	4413      	add	r3, r2
 8002bea:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d10d      	bne.n	8002c0e <Dijkstra+0x1b8>
            {
                min = Nhan[j];
 8002bf2:	f997 308a 	ldrsb.w	r3, [r7, #138]	; 0x8a
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002bfc:	4413      	add	r3, r2
 8002bfe:	f853 3c58 	ldr.w	r3, [r3, #-88]
 8002c02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                XP = j;
 8002c06:	f997 308a 	ldrsb.w	r3, [r7, #138]	; 0x8a
 8002c0a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        for (int8_t j = 0; j < n; j++)
 8002c0e:	f997 308a 	ldrsb.w	r3, [r7, #138]	; 0x8a
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	3301      	adds	r3, #1
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
 8002c1c:	f997 308a 	ldrsb.w	r3, [r7, #138]	; 0x8a
 8002c20:	68ba      	ldr	r2, [r7, #8]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	dcd0      	bgt.n	8002bc8 <Dijkstra+0x172>
            }
        DanhDau[XP] = 1;
 8002c26:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8002c2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002c2e:	4413      	add	r3, r2
 8002c30:	2201      	movs	r2, #1
 8002c32:	701a      	strb	r2, [r3, #0]
    while (XP != C)
 8002c34:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	f47f af4c 	bne.w	8002ad8 <Dijkstra+0x82>
    }
    int lenResult = Nhan[C] + 1;
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002c48:	4413      	add	r3, r2
 8002c4a:	f853 3c58 	ldr.w	r3, [r3, #-88]
 8002c4e:	3301      	adds	r3, #1
 8002c50:	67fb      	str	r3, [r7, #124]	; 0x7c
    int k = Nhan[C];
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002c5a:	4413      	add	r3, r2
 8002c5c:	f853 3c58 	ldr.w	r3, [r3, #-88]
 8002c60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    result[k--] = C;
 8002c64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c68:	1e5a      	subs	r2, r3, #1
 8002c6a:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8002c74:	4413      	add	r3, r2
 8002c76:	683a      	ldr	r2, [r7, #0]
 8002c78:	601a      	str	r2, [r3, #0]
    result[k--] = Truoc[C];
 8002c7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c7e:	1e5a      	subs	r2, r3, #1
 8002c80:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8002c8a:	441a      	add	r2, r3
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8002c94:	440b      	add	r3, r1
 8002c96:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8002c9a:	6013      	str	r3, [r2, #0]
    int i = Truoc[C];
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002ca4:	4413      	add	r3, r2
 8002ca6:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8002caa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    while (i != D)
 8002cae:	e015      	b.n	8002cdc <Dijkstra+0x286>
    {
        i = Truoc[i];
 8002cb0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002cba:	4413      	add	r3, r2
 8002cbc:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8002cc0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        result[k--] = i;
 8002cc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002cc8:	1e5a      	subs	r2, r3, #1
 8002cca:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8002cd4:	4413      	add	r3, r2
 8002cd6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002cda:	601a      	str	r2, [r3, #0]
    while (i != D)
 8002cdc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d1e4      	bne.n	8002cb0 <Dijkstra+0x25a>
    }
    return lenResult;
 8002ce6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	379c      	adds	r7, #156	; 0x9c
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <Control>:
static void Control(int C[12][12][12], char control[6][3], int result[4], int len, char controlArr[12][12], int truoc, int takeResult[4])
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b086      	sub	sp, #24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
 8002d00:	603b      	str	r3, [r7, #0]
    for (int8_t i = 0; i < len - 1; i++)
 8002d02:	2300      	movs	r3, #0
 8002d04:	75fb      	strb	r3, [r7, #23]
 8002d06:	e05e      	b.n	8002dc6 <Control+0xd2>
    {
        strcpy(controlArr[i], control[C[result[i]][result[i + 1]][truoc]]);
 8002d08:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	4413      	add	r3, r2
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	461a      	mov	r2, r3
 8002d16:	6a3b      	ldr	r3, [r7, #32]
 8002d18:	1898      	adds	r0, r3, r2
 8002d1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	4413      	add	r3, r2
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	461a      	mov	r2, r3
 8002d28:	4613      	mov	r3, r2
 8002d2a:	00db      	lsls	r3, r3, #3
 8002d2c:	4413      	add	r3, r2
 8002d2e:	019b      	lsls	r3, r3, #6
 8002d30:	461a      	mov	r2, r3
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	1899      	adds	r1, r3, r2
 8002d36:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	4413      	add	r3, r2
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	4613      	mov	r3, r2
 8002d46:	005b      	lsls	r3, r3, #1
 8002d48:	4413      	add	r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d4e:	4413      	add	r3, r2
 8002d50:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002d54:	461a      	mov	r2, r3
 8002d56:	4613      	mov	r3, r2
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	4413      	add	r3, r2
 8002d5c:	68ba      	ldr	r2, [r7, #8]
 8002d5e:	4413      	add	r3, r2
 8002d60:	4619      	mov	r1, r3
 8002d62:	f008 fa7e 	bl	800b262 <strcpy>
        // printf("%d", C[result[i]][result[i + 1]][truoc]);
        // printf("\n");
        // printf(control[C[result[i]][result[i + 1]][truoc]]);
        // printf("\n");
        takeResult[i] = C[result[i]][result[i + 1]][truoc];
 8002d66:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	4413      	add	r3, r2
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	461a      	mov	r2, r3
 8002d74:	4613      	mov	r3, r2
 8002d76:	00db      	lsls	r3, r3, #3
 8002d78:	4413      	add	r3, r2
 8002d7a:	019b      	lsls	r3, r3, #6
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	1898      	adds	r0, r3, r2
 8002d82:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002d86:	3301      	adds	r3, #1
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d98:	4419      	add	r1, r3
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	4413      	add	r3, r2
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002da4:	4413      	add	r3, r2
 8002da6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002daa:	600b      	str	r3, [r1, #0]
        truoc = result[i];
 8002dac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	4413      	add	r3, r2
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	627b      	str	r3, [r7, #36]	; 0x24
    for (int8_t i = 0; i < len - 1; i++)
 8002dba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	75fb      	strb	r3, [r7, #23]
 8002dc6:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	db9a      	blt.n	8002d08 <Control+0x14>
    }
}
 8002dd2:	bf00      	nop
 8002dd4:	bf00      	nop
 8002dd6:	3718      	adds	r7, #24
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <Solver>:
int8_t Solver(int Dau, int Cuoi, int Truoc, int takeResult[4], int Step[4], int Run_Str[8])
{
 8002ddc:	b5b0      	push	{r4, r5, r7, lr}
 8002dde:	f5ad 5df1 	sub.w	sp, sp, #7712	; 0x1e20
 8002de2:	b082      	sub	sp, #8
 8002de4:	af04      	add	r7, sp, #16
 8002de6:	f107 0418 	add.w	r4, r7, #24
 8002dea:	3c0c      	subs	r4, #12
 8002dec:	6020      	str	r0, [r4, #0]
 8002dee:	f107 0018 	add.w	r0, r7, #24
 8002df2:	3810      	subs	r0, #16
 8002df4:	6001      	str	r1, [r0, #0]
 8002df6:	f107 0118 	add.w	r1, r7, #24
 8002dfa:	3914      	subs	r1, #20
 8002dfc:	600a      	str	r2, [r1, #0]
 8002dfe:	f107 0218 	add.w	r2, r7, #24
 8002e02:	3a18      	subs	r2, #24
 8002e04:	6013      	str	r3, [r2, #0]
    char buffer[5] = {0};
 8002e06:	2300      	movs	r3, #0
 8002e08:	f507 52f0 	add.w	r2, r7, #7680	; 0x1e00
 8002e0c:	f102 020c 	add.w	r2, r2, #12
 8002e10:	6013      	str	r3, [r2, #0]
 8002e12:	2300      	movs	r3, #0
 8002e14:	f507 52f0 	add.w	r2, r7, #7680	; 0x1e00
 8002e18:	f102 0210 	add.w	r2, r2, #16
 8002e1c:	7013      	strb	r3, [r2, #0]
    char concat_buffer[20] = {0};
 8002e1e:	2300      	movs	r3, #0
 8002e20:	f507 52ef 	add.w	r2, r7, #7648	; 0x1de0
 8002e24:	f102 0218 	add.w	r2, r2, #24
 8002e28:	6013      	str	r3, [r2, #0]
 8002e2a:	f507 53ef 	add.w	r3, r7, #7648	; 0x1de0
 8002e2e:	f103 031c 	add.w	r3, r3, #28
 8002e32:	2200      	movs	r2, #0
 8002e34:	601a      	str	r2, [r3, #0]
 8002e36:	605a      	str	r2, [r3, #4]
 8002e38:	609a      	str	r2, [r3, #8]
 8002e3a:	60da      	str	r2, [r3, #12]
    char controlArr[12][12];
    const int A[12][12] = {
 8002e3c:	f507 53d9 	add.w	r3, r7, #6944	; 0x1b20
 8002e40:	f103 0308 	add.w	r3, r3, #8
 8002e44:	4a59      	ldr	r2, [pc, #356]	; (8002fac <Solver+0x1d0>)
 8002e46:	4618      	mov	r0, r3
 8002e48:	4611      	mov	r1, r2
 8002e4a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002e4e:	461a      	mov	r2, r3
 8002e50:	f007 fd58 	bl	800a904 <memcpy>
        {0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1},
        {0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1},
        {1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1},
        {0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0}};
    // int result[max];
    char control[6][3] = {"0", "1", "2", "3", "4", "5"};
 8002e54:	f507 53d8 	add.w	r3, r7, #6912	; 0x1b00
 8002e58:	f103 0314 	add.w	r3, r3, #20
 8002e5c:	4a54      	ldr	r2, [pc, #336]	; (8002fb0 <Solver+0x1d4>)
 8002e5e:	461c      	mov	r4, r3
 8002e60:	4615      	mov	r5, r2
 8002e62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e66:	682b      	ldr	r3, [r5, #0]
 8002e68:	8023      	strh	r3, [r4, #0]
    int C[12][12][12];
    Control_File(C);
 8002e6a:	f107 0318 	add.w	r3, r7, #24
 8002e6e:	3b04      	subs	r3, #4
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7ff f9cf 	bl	8002214 <Control_File>
    int length = Dijkstra(A, 12, Dau, Cuoi, Step);
 8002e76:	f107 0318 	add.w	r3, r7, #24
 8002e7a:	3b10      	subs	r3, #16
 8002e7c:	f107 0218 	add.w	r2, r7, #24
 8002e80:	3a0c      	subs	r2, #12
 8002e82:	f507 50d9 	add.w	r0, r7, #6944	; 0x1b20
 8002e86:	f100 0008 	add.w	r0, r0, #8
 8002e8a:	f507 51f1 	add.w	r1, r7, #7712	; 0x1e20
 8002e8e:	f101 0108 	add.w	r1, r1, #8
 8002e92:	6809      	ldr	r1, [r1, #0]
 8002e94:	9100      	str	r1, [sp, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6812      	ldr	r2, [r2, #0]
 8002e9a:	210c      	movs	r1, #12
 8002e9c:	f7ff fddb 	bl	8002a56 <Dijkstra>
 8002ea0:	f507 53f0 	add.w	r3, r7, #7680	; 0x1e00
 8002ea4:	f103 0314 	add.w	r3, r3, #20
 8002ea8:	6018      	str	r0, [r3, #0]
    Control(C, control, Step, length, controlArr, Truoc, takeResult);
 8002eaa:	f507 51d8 	add.w	r1, r7, #6912	; 0x1b00
 8002eae:	f101 0114 	add.w	r1, r1, #20
 8002eb2:	f107 0018 	add.w	r0, r7, #24
 8002eb6:	3804      	subs	r0, #4
 8002eb8:	f107 0318 	add.w	r3, r7, #24
 8002ebc:	3b18      	subs	r3, #24
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	9302      	str	r3, [sp, #8]
 8002ec2:	f107 0318 	add.w	r3, r7, #24
 8002ec6:	3b14      	subs	r3, #20
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	9301      	str	r3, [sp, #4]
 8002ecc:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 8002ed0:	f103 0308 	add.w	r3, r3, #8
 8002ed4:	9300      	str	r3, [sp, #0]
 8002ed6:	f507 53f0 	add.w	r3, r7, #7680	; 0x1e00
 8002eda:	f103 0314 	add.w	r3, r3, #20
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f507 52f1 	add.w	r2, r7, #7712	; 0x1e20
 8002ee4:	f102 0208 	add.w	r2, r2, #8
 8002ee8:	6812      	ldr	r2, [r2, #0]
 8002eea:	f7ff ff03 	bl	8002cf4 <Control>

    Run_Str[0] = 7;
 8002eee:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8002ef2:	f103 030c 	add.w	r3, r3, #12
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2207      	movs	r2, #7
 8002efa:	601a      	str	r2, [r3, #0]
	Run_Str[1] = takeResult[0];
 8002efc:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8002f00:	f103 030c 	add.w	r3, r3, #12
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	1d1a      	adds	r2, r3, #4
 8002f08:	f107 0318 	add.w	r3, r7, #24
 8002f0c:	3b18      	subs	r3, #24
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	6013      	str	r3, [r2, #0]
	Run_Str[2] = 7;
 8002f14:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8002f18:	f103 030c 	add.w	r3, r3, #12
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	3308      	adds	r3, #8
 8002f20:	2207      	movs	r2, #7
 8002f22:	601a      	str	r2, [r3, #0]
	Run_Str[3] = takeResult[1];
 8002f24:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8002f28:	f103 030c 	add.w	r3, r3, #12
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f103 020c 	add.w	r2, r3, #12
 8002f32:	f107 0318 	add.w	r3, r7, #24
 8002f36:	3b18      	subs	r3, #24
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	6013      	str	r3, [r2, #0]
	Run_Str[4] = 7;
 8002f3e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8002f42:	f103 030c 	add.w	r3, r3, #12
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	3310      	adds	r3, #16
 8002f4a:	2207      	movs	r2, #7
 8002f4c:	601a      	str	r2, [r3, #0]
	Run_Str[5] = takeResult[2];
 8002f4e:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8002f52:	f103 030c 	add.w	r3, r3, #12
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f103 0214 	add.w	r2, r3, #20
 8002f5c:	f107 0318 	add.w	r3, r7, #24
 8002f60:	3b18      	subs	r3, #24
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	6013      	str	r3, [r2, #0]
	Run_Str[6] = 7;
 8002f68:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8002f6c:	f103 030c 	add.w	r3, r3, #12
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	3318      	adds	r3, #24
 8002f74:	2207      	movs	r2, #7
 8002f76:	601a      	str	r2, [r3, #0]
	Run_Str[7] = takeResult[3];
 8002f78:	f507 53f1 	add.w	r3, r7, #7712	; 0x1e20
 8002f7c:	f103 030c 	add.w	r3, r3, #12
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f103 021c 	add.w	r2, r3, #28
 8002f86:	f107 0318 	add.w	r3, r7, #24
 8002f8a:	3b18      	subs	r3, #24
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	6013      	str	r3, [r2, #0]
    return length;
 8002f92:	f507 53f0 	add.w	r3, r7, #7680	; 0x1e00
 8002f96:	f103 0314 	add.w	r3, r3, #20
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	b25b      	sxtb	r3, r3
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f507 57f0 	add.w	r7, r7, #7680	; 0x1e00
 8002fa4:	3718      	adds	r7, #24
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bdb0      	pop	{r4, r5, r7, pc}
 8002faa:	bf00      	nop
 8002fac:	0800f2d4 	.word	0x0800f2d4
 8002fb0:	0800f514 	.word	0x0800f514

08002fb4 <GetString>:
void GetString(int8_t Dau,int8_t Cuoi ,char *Result)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b092      	sub	sp, #72	; 0x48
 8002fb8:	af02      	add	r7, sp, #8
 8002fba:	4603      	mov	r3, r0
 8002fbc:	603a      	str	r2, [r7, #0]
 8002fbe:	71fb      	strb	r3, [r7, #7]
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	71bb      	strb	r3, [r7, #6]
    char buffer[5] = {0};
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	633b      	str	r3, [r7, #48]	; 0x30
 8002fc8:	2300      	movs	r3, #0
 8002fca:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    char concat_buffer[20] = {0};
 8002fce:	2300      	movs	r3, #0
 8002fd0:	61fb      	str	r3, [r7, #28]
 8002fd2:	f107 0320 	add.w	r3, r7, #32
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	601a      	str	r2, [r3, #0]
 8002fda:	605a      	str	r2, [r3, #4]
 8002fdc:	609a      	str	r2, [r3, #8]
 8002fde:	60da      	str	r2, [r3, #12]
    int getStep[4];
    int length = Solver(Dau,Cuoi,12,0,getStep,0);
 8002fe0:	f997 0007 	ldrsb.w	r0, [r7, #7]
 8002fe4:	f997 1006 	ldrsb.w	r1, [r7, #6]
 8002fe8:	2300      	movs	r3, #0
 8002fea:	9301      	str	r3, [sp, #4]
 8002fec:	f107 030c 	add.w	r3, r7, #12
 8002ff0:	9300      	str	r3, [sp, #0]
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	220c      	movs	r2, #12
 8002ff6:	f7ff fef1 	bl	8002ddc <Solver>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	63bb      	str	r3, [r7, #56]	; 0x38
    for (int8_t i = 0; i < length; i++)
 8002ffe:	2300      	movs	r3, #0
 8003000:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003004:	e039      	b.n	800307a <GetString+0xc6>
    {
        if (i == length - 1)
 8003006:	f997 203f 	ldrsb.w	r2, [r7, #63]	; 0x3f
 800300a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800300c:	3b01      	subs	r3, #1
 800300e:	429a      	cmp	r2, r3
 8003010:	d116      	bne.n	8003040 <GetString+0x8c>
        {
            sprintf(buffer, "%d", getStep[i]);
 8003012:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800301c:	4413      	add	r3, r2
 800301e:	f853 2c34 	ldr.w	r2, [r3, #-52]
 8003022:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003026:	491c      	ldr	r1, [pc, #112]	; (8003098 <GetString+0xe4>)
 8003028:	4618      	mov	r0, r3
 800302a:	f008 f8eb 	bl	800b204 <siprintf>
            strcat(concat_buffer, buffer);
 800302e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003032:	f107 031c 	add.w	r3, r7, #28
 8003036:	4611      	mov	r1, r2
 8003038:	4618      	mov	r0, r3
 800303a:	f008 f903 	bl	800b244 <strcat>
 800303e:	e015      	b.n	800306c <GetString+0xb8>
        }
        else
        {
            sprintf(buffer, "%d -> ", getStep[i]);
 8003040:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800304a:	4413      	add	r3, r2
 800304c:	f853 2c34 	ldr.w	r2, [r3, #-52]
 8003050:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003054:	4911      	ldr	r1, [pc, #68]	; (800309c <GetString+0xe8>)
 8003056:	4618      	mov	r0, r3
 8003058:	f008 f8d4 	bl	800b204 <siprintf>
            strcat(concat_buffer, buffer);
 800305c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003060:	f107 031c 	add.w	r3, r7, #28
 8003064:	4611      	mov	r1, r2
 8003066:	4618      	mov	r0, r3
 8003068:	f008 f8ec 	bl	800b244 <strcat>
    for (int8_t i = 0; i < length; i++)
 800306c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8003070:	b2db      	uxtb	r3, r3
 8003072:	3301      	adds	r3, #1
 8003074:	b2db      	uxtb	r3, r3
 8003076:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800307a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800307e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003080:	429a      	cmp	r2, r3
 8003082:	dcc0      	bgt.n	8003006 <GetString+0x52>
        }
    }
    strcpy(Result, concat_buffer);
 8003084:	f107 031c 	add.w	r3, r7, #28
 8003088:	4619      	mov	r1, r3
 800308a:	6838      	ldr	r0, [r7, #0]
 800308c:	f008 f8e9 	bl	800b262 <strcpy>
}
 8003090:	bf00      	nop
 8003092:	3740      	adds	r7, #64	; 0x40
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	0800f528 	.word	0x0800f528
 800309c:	0800f52c 	.word	0x0800f52c

080030a0 <Line_Follower_PID>:
	PWM_Output_R = RPM_R*7200/388 + adder_R;
	return PWM_Output_R;
}
#endif
int16_t Line_Follower_PID (int Setpoint , int Error,PIDController *Car)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]
	Car->propotional = Setpoint - Error;
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	ee07 3a90 	vmov	s15, r3
 80030b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	edc3 7a08 	vstr	s15, [r3, #32]
	Car->integral = Car->integral + Error;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	ee07 3a90 	vmov	s15, r3
 80030cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	Car->derivative = Error - Car->previous_error;
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	ee07 3a90 	vmov	s15, r3
 80030e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	edd3 7a07 	vldr	s15, [r3, #28]
 80030ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	PID_val = (Car->Kp * Car->propotional) + (Car->Ki * Car->integral) + (Car->Kd * Car->derivative);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	ed93 7a01 	vldr	s14, [r3, #4]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	edd3 7a08 	vldr	s15, [r3, #32]
 8003100:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	edd3 6a02 	vldr	s13, [r3, #8]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003110:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003114:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	edd3 6a03 	vldr	s13, [r3, #12]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003124:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003128:	ee77 7a27 	vadd.f32	s15, s14, s15
 800312c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003130:	ee17 3a90 	vmov	r3, s15
 8003134:	b21a      	sxth	r2, r3
 8003136:	4b09      	ldr	r3, [pc, #36]	; (800315c <Line_Follower_PID+0xbc>)
 8003138:	801a      	strh	r2, [r3, #0]
	Car->previous_error = Error;
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	ee07 3a90 	vmov	s15, r3
 8003140:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	edc3 7a07 	vstr	s15, [r3, #28]
	return PID_val;
 800314a:	4b04      	ldr	r3, [pc, #16]	; (800315c <Line_Follower_PID+0xbc>)
 800314c:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8003150:	4618      	mov	r0, r3
 8003152:	3714      	adds	r7, #20
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr
 800315c:	2000034c 	.word	0x2000034c

08003160 <PIDController_Car_Init>:
void PIDController_Car_Init (PIDController *Car){
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
	Car->derivative = 0.0f;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f04f 0200 	mov.w	r2, #0
 800316e:	629a      	str	r2, [r3, #40]	; 0x28
	Car->integral = 0.0f;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f04f 0200 	mov.w	r2, #0
 8003176:	625a      	str	r2, [r3, #36]	; 0x24
	Car->previous_error = 0.0f;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f04f 0200 	mov.w	r2, #0
 800317e:	61da      	str	r2, [r3, #28]
	Car->adder_out = 0.0f;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003186:	bf00      	nop
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
	...

08003194 <__io_putchar>:
static void Go_Straight();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE {
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART2 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 0xFFFF);
 800319c:	1d39      	adds	r1, r7, #4
 800319e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80031a2:	2201      	movs	r2, #1
 80031a4:	4803      	ldr	r0, [pc, #12]	; (80031b4 <__io_putchar+0x20>)
 80031a6:	f006 fc04 	bl	80099b2 <HAL_UART_Transmit>
	return ch;
 80031aa:	687b      	ldr	r3, [r7, #4]
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3708      	adds	r7, #8
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	200005a0 	.word	0x200005a0

080031b8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b09c      	sub	sp, #112	; 0x70
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
	strcpy(Rx_Buffer_copied,Rx_Buffer);
 80031c0:	4999      	ldr	r1, [pc, #612]	; (8003428 <HAL_UART_RxCpltCallback+0x270>)
 80031c2:	489a      	ldr	r0, [pc, #616]	; (800342c <HAL_UART_RxCpltCallback+0x274>)
 80031c4:	f008 f84d 	bl	800b262 <strcpy>
	char *ID_number  = strtok(Rx_Buffer_copied," ");
 80031c8:	4999      	ldr	r1, [pc, #612]	; (8003430 <HAL_UART_RxCpltCallback+0x278>)
 80031ca:	4898      	ldr	r0, [pc, #608]	; (800342c <HAL_UART_RxCpltCallback+0x274>)
 80031cc:	f008 fee0 	bl	800bf90 <strtok>
 80031d0:	66f8      	str	r0, [r7, #108]	; 0x6c
	ID = strtod(ID_number,NULL);
 80031d2:	2100      	movs	r1, #0
 80031d4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80031d6:	f008 fe75 	bl	800bec4 <strtod>
 80031da:	ec53 2b10 	vmov	r2, r3, d0
 80031de:	4610      	mov	r0, r2
 80031e0:	4619      	mov	r1, r3
 80031e2:	f7fd fce9 	bl	8000bb8 <__aeabi_d2uiz>
 80031e6:	4603      	mov	r3, r0
 80031e8:	b2da      	uxtb	r2, r3
 80031ea:	4b92      	ldr	r3, [pc, #584]	; (8003434 <HAL_UART_RxCpltCallback+0x27c>)
 80031ec:	701a      	strb	r2, [r3, #0]
	if(ID == ID_PID_MESS)
 80031ee:	4b91      	ldr	r3, [pc, #580]	; (8003434 <HAL_UART_RxCpltCallback+0x27c>)
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d12a      	bne.n	800324c <HAL_UART_RxCpltCallback+0x94>
	{
		char *Data1 = strtok(NULL," ");
 80031f6:	498e      	ldr	r1, [pc, #568]	; (8003430 <HAL_UART_RxCpltCallback+0x278>)
 80031f8:	2000      	movs	r0, #0
 80031fa:	f008 fec9 	bl	800bf90 <strtok>
 80031fe:	65f8      	str	r0, [r7, #92]	; 0x5c
		char *Data2 = strtok(NULL," ");
 8003200:	498b      	ldr	r1, [pc, #556]	; (8003430 <HAL_UART_RxCpltCallback+0x278>)
 8003202:	2000      	movs	r0, #0
 8003204:	f008 fec4 	bl	800bf90 <strtok>
 8003208:	65b8      	str	r0, [r7, #88]	; 0x58
		char *Data3 = strtok(NULL,"");
 800320a:	498b      	ldr	r1, [pc, #556]	; (8003438 <HAL_UART_RxCpltCallback+0x280>)
 800320c:	2000      	movs	r0, #0
 800320e:	f008 febf 	bl	800bf90 <strtok>
 8003212:	6578      	str	r0, [r7, #84]	; 0x54
		Kp = strtof(Data1,NULL);
 8003214:	2100      	movs	r1, #0
 8003216:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8003218:	f008 fe60 	bl	800bedc <strtof>
 800321c:	eef0 7a40 	vmov.f32	s15, s0
 8003220:	4b86      	ldr	r3, [pc, #536]	; (800343c <HAL_UART_RxCpltCallback+0x284>)
 8003222:	edc3 7a00 	vstr	s15, [r3]
		Ki = strtof(Data2,NULL);
 8003226:	2100      	movs	r1, #0
 8003228:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800322a:	f008 fe57 	bl	800bedc <strtof>
 800322e:	eef0 7a40 	vmov.f32	s15, s0
 8003232:	4b83      	ldr	r3, [pc, #524]	; (8003440 <HAL_UART_RxCpltCallback+0x288>)
 8003234:	edc3 7a00 	vstr	s15, [r3]
		Kd = strtof(Data3,NULL);
 8003238:	2100      	movs	r1, #0
 800323a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800323c:	f008 fe4e 	bl	800bedc <strtof>
 8003240:	eef0 7a40 	vmov.f32	s15, s0
 8003244:	4b7f      	ldr	r3, [pc, #508]	; (8003444 <HAL_UART_RxCpltCallback+0x28c>)
 8003246:	edc3 7a00 	vstr	s15, [r3]
 800324a:	e0da      	b.n	8003402 <HAL_UART_RxCpltCallback+0x24a>
	}
	else if(ID == ID_STATUS_MESS)
 800324c:	4b79      	ldr	r3, [pc, #484]	; (8003434 <HAL_UART_RxCpltCallback+0x27c>)
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	2b02      	cmp	r3, #2
 8003252:	d10c      	bne.n	800326e <HAL_UART_RxCpltCallback+0xb6>
	{
		char *Data1 = strtok(NULL," ");
 8003254:	4976      	ldr	r1, [pc, #472]	; (8003430 <HAL_UART_RxCpltCallback+0x278>)
 8003256:	2000      	movs	r0, #0
 8003258:	f008 fe9a 	bl	800bf90 <strtok>
 800325c:	6638      	str	r0, [r7, #96]	; 0x60
		Status = (uint8_t)atoi(Data1);
 800325e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8003260:	f007 fb22 	bl	800a8a8 <atoi>
 8003264:	4603      	mov	r3, r0
 8003266:	b2da      	uxtb	r2, r3
 8003268:	4b77      	ldr	r3, [pc, #476]	; (8003448 <HAL_UART_RxCpltCallback+0x290>)
 800326a:	701a      	strb	r2, [r3, #0]
 800326c:	e0c9      	b.n	8003402 <HAL_UART_RxCpltCallback+0x24a>
	}
	else if(ID == ID_FIRST_LAST_MESS)
 800326e:	4b71      	ldr	r3, [pc, #452]	; (8003434 <HAL_UART_RxCpltCallback+0x27c>)
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	2b03      	cmp	r3, #3
 8003274:	d118      	bne.n	80032a8 <HAL_UART_RxCpltCallback+0xf0>
	{
		char *Data1 = strtok(NULL," ");
 8003276:	496e      	ldr	r1, [pc, #440]	; (8003430 <HAL_UART_RxCpltCallback+0x278>)
 8003278:	2000      	movs	r0, #0
 800327a:	f008 fe89 	bl	800bf90 <strtok>
 800327e:	66b8      	str	r0, [r7, #104]	; 0x68
		char *Data2 = strtok(NULL," ");
 8003280:	496b      	ldr	r1, [pc, #428]	; (8003430 <HAL_UART_RxCpltCallback+0x278>)
 8003282:	2000      	movs	r0, #0
 8003284:	f008 fe84 	bl	800bf90 <strtok>
 8003288:	6678      	str	r0, [r7, #100]	; 0x64
		First_point = atoi(Data1);
 800328a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800328c:	f007 fb0c 	bl	800a8a8 <atoi>
 8003290:	4603      	mov	r3, r0
 8003292:	b25a      	sxtb	r2, r3
 8003294:	4b6d      	ldr	r3, [pc, #436]	; (800344c <HAL_UART_RxCpltCallback+0x294>)
 8003296:	701a      	strb	r2, [r3, #0]
		Last_point = atoi(Data2);
 8003298:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800329a:	f007 fb05 	bl	800a8a8 <atoi>
 800329e:	4603      	mov	r3, r0
 80032a0:	b25a      	sxtb	r2, r3
 80032a2:	4b6b      	ldr	r3, [pc, #428]	; (8003450 <HAL_UART_RxCpltCallback+0x298>)
 80032a4:	701a      	strb	r2, [r3, #0]
 80032a6:	e0ac      	b.n	8003402 <HAL_UART_RxCpltCallback+0x24a>
	}
	else if(ID == DATA_ERROR_REQ && Trans_flag == DATA_TRANS_EN)
 80032a8:	4b62      	ldr	r3, [pc, #392]	; (8003434 <HAL_UART_RxCpltCallback+0x27c>)
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	2b04      	cmp	r3, #4
 80032ae:	d114      	bne.n	80032da <HAL_UART_RxCpltCallback+0x122>
 80032b0:	4b68      	ldr	r3, [pc, #416]	; (8003454 <HAL_UART_RxCpltCallback+0x29c>)
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d110      	bne.n	80032da <HAL_UART_RxCpltCallback+0x122>
	{
		char Error_Str[4];
		sprintf(Error_Str,"%d",Error_Val);
 80032b8:	4b67      	ldr	r3, [pc, #412]	; (8003458 <HAL_UART_RxCpltCallback+0x2a0>)
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80032c0:	4966      	ldr	r1, [pc, #408]	; (800345c <HAL_UART_RxCpltCallback+0x2a4>)
 80032c2:	4618      	mov	r0, r3
 80032c4:	f007 ff9e 	bl	800b204 <siprintf>
		HAL_UART_Transmit(&huart6, Error_Str, sizeof(Error_Str), 5000);
 80032c8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80032cc:	f241 3388 	movw	r3, #5000	; 0x1388
 80032d0:	2204      	movs	r2, #4
 80032d2:	4863      	ldr	r0, [pc, #396]	; (8003460 <HAL_UART_RxCpltCallback+0x2a8>)
 80032d4:	f006 fb6d 	bl	80099b2 <HAL_UART_Transmit>
	{
 80032d8:	e093      	b.n	8003402 <HAL_UART_RxCpltCallback+0x24a>
	}
	else if(ID == DATA_LEFT_REQ && Trans_flag == DATA_TRANS_EN)
 80032da:	4b56      	ldr	r3, [pc, #344]	; (8003434 <HAL_UART_RxCpltCallback+0x27c>)
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	2b05      	cmp	r3, #5
 80032e0:	d116      	bne.n	8003310 <HAL_UART_RxCpltCallback+0x158>
 80032e2:	4b5c      	ldr	r3, [pc, #368]	; (8003454 <HAL_UART_RxCpltCallback+0x29c>)
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d112      	bne.n	8003310 <HAL_UART_RxCpltCallback+0x158>
	{
		char Speed_Left_Str[5];
		sprintf(Speed_Left_Str,"%d",rateLeft);
 80032ea:	4b5e      	ldr	r3, [pc, #376]	; (8003464 <HAL_UART_RxCpltCallback+0x2ac>)
 80032ec:	881b      	ldrh	r3, [r3, #0]
 80032ee:	b21b      	sxth	r3, r3
 80032f0:	461a      	mov	r2, r3
 80032f2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80032f6:	4959      	ldr	r1, [pc, #356]	; (800345c <HAL_UART_RxCpltCallback+0x2a4>)
 80032f8:	4618      	mov	r0, r3
 80032fa:	f007 ff83 	bl	800b204 <siprintf>
		HAL_UART_Transmit(&huart6, Speed_Left_Str, sizeof(Speed_Left_Str),5000);
 80032fe:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8003302:	f241 3388 	movw	r3, #5000	; 0x1388
 8003306:	2205      	movs	r2, #5
 8003308:	4855      	ldr	r0, [pc, #340]	; (8003460 <HAL_UART_RxCpltCallback+0x2a8>)
 800330a:	f006 fb52 	bl	80099b2 <HAL_UART_Transmit>
	{
 800330e:	e078      	b.n	8003402 <HAL_UART_RxCpltCallback+0x24a>
	}
	else if(ID == DATA_RIGHT_REQ && Trans_flag == DATA_TRANS_EN)
 8003310:	4b48      	ldr	r3, [pc, #288]	; (8003434 <HAL_UART_RxCpltCallback+0x27c>)
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	2b06      	cmp	r3, #6
 8003316:	d116      	bne.n	8003346 <HAL_UART_RxCpltCallback+0x18e>
 8003318:	4b4e      	ldr	r3, [pc, #312]	; (8003454 <HAL_UART_RxCpltCallback+0x29c>)
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	2b01      	cmp	r3, #1
 800331e:	d112      	bne.n	8003346 <HAL_UART_RxCpltCallback+0x18e>
	{
		char Speed_Right_Str[5];
		sprintf(Speed_Right_Str,"%d",rateRight);
 8003320:	4b51      	ldr	r3, [pc, #324]	; (8003468 <HAL_UART_RxCpltCallback+0x2b0>)
 8003322:	881b      	ldrh	r3, [r3, #0]
 8003324:	b21b      	sxth	r3, r3
 8003326:	461a      	mov	r2, r3
 8003328:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800332c:	494b      	ldr	r1, [pc, #300]	; (800345c <HAL_UART_RxCpltCallback+0x2a4>)
 800332e:	4618      	mov	r0, r3
 8003330:	f007 ff68 	bl	800b204 <siprintf>
		HAL_UART_Transmit(&huart6, Speed_Right_Str, sizeof(Speed_Right_Str), 5000);
 8003334:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8003338:	f241 3388 	movw	r3, #5000	; 0x1388
 800333c:	2205      	movs	r2, #5
 800333e:	4848      	ldr	r0, [pc, #288]	; (8003460 <HAL_UART_RxCpltCallback+0x2a8>)
 8003340:	f006 fb37 	bl	80099b2 <HAL_UART_Transmit>
	{
 8003344:	e05d      	b.n	8003402 <HAL_UART_RxCpltCallback+0x24a>
	}
	else if(ID == DATA_PID_REQ)
 8003346:	4b3b      	ldr	r3, [pc, #236]	; (8003434 <HAL_UART_RxCpltCallback+0x27c>)
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	2b07      	cmp	r3, #7
 800334c:	d14b      	bne.n	80033e6 <HAL_UART_RxCpltCallback+0x22e>
	{
	  char Kp_string[Kp_Buffer_Size+1],Ki_string[Ki_Buffer_Size+1],Kd_string[Kd_Buffer_Size+1],Final_string[Send_Buffer_Size];
	  memset(Final_string,0,sizeof(Final_string));
 800334e:	f107 0310 	add.w	r3, r7, #16
 8003352:	2216      	movs	r2, #22
 8003354:	2100      	movs	r1, #0
 8003356:	4618      	mov	r0, r3
 8003358:	f007 fae2 	bl	800a920 <memset>
	  sprintf(Kp_string,"%06.2f ",Kp);
 800335c:	4b37      	ldr	r3, [pc, #220]	; (800343c <HAL_UART_RxCpltCallback+0x284>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4618      	mov	r0, r3
 8003362:	f7fd f8f9 	bl	8000558 <__aeabi_f2d>
 8003366:	4602      	mov	r2, r0
 8003368:	460b      	mov	r3, r1
 800336a:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800336e:	493f      	ldr	r1, [pc, #252]	; (800346c <HAL_UART_RxCpltCallback+0x2b4>)
 8003370:	f007 ff48 	bl	800b204 <siprintf>
	  sprintf(Ki_string,"%06.2f ",Ki);
 8003374:	4b32      	ldr	r3, [pc, #200]	; (8003440 <HAL_UART_RxCpltCallback+0x288>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4618      	mov	r0, r3
 800337a:	f7fd f8ed 	bl	8000558 <__aeabi_f2d>
 800337e:	4602      	mov	r2, r0
 8003380:	460b      	mov	r3, r1
 8003382:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8003386:	4939      	ldr	r1, [pc, #228]	; (800346c <HAL_UART_RxCpltCallback+0x2b4>)
 8003388:	f007 ff3c 	bl	800b204 <siprintf>
	  sprintf(Kd_string,"%06.2f\"",Kd);
 800338c:	4b2d      	ldr	r3, [pc, #180]	; (8003444 <HAL_UART_RxCpltCallback+0x28c>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4618      	mov	r0, r3
 8003392:	f7fd f8e1 	bl	8000558 <__aeabi_f2d>
 8003396:	4602      	mov	r2, r0
 8003398:	460b      	mov	r3, r1
 800339a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800339e:	4934      	ldr	r1, [pc, #208]	; (8003470 <HAL_UART_RxCpltCallback+0x2b8>)
 80033a0:	f007 ff30 	bl	800b204 <siprintf>
	  strcat(Final_string,Kp_string);
 80033a4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80033a8:	f107 0310 	add.w	r3, r7, #16
 80033ac:	4611      	mov	r1, r2
 80033ae:	4618      	mov	r0, r3
 80033b0:	f007 ff48 	bl	800b244 <strcat>
	  strcat(Final_string,Ki_string);
 80033b4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80033b8:	f107 0310 	add.w	r3, r7, #16
 80033bc:	4611      	mov	r1, r2
 80033be:	4618      	mov	r0, r3
 80033c0:	f007 ff40 	bl	800b244 <strcat>
	  strcat(Final_string,Kd_string);
 80033c4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80033c8:	f107 0310 	add.w	r3, r7, #16
 80033cc:	4611      	mov	r1, r2
 80033ce:	4618      	mov	r0, r3
 80033d0:	f007 ff38 	bl	800b244 <strcat>
	  HAL_UART_Transmit(&huart6, Final_string, sizeof(Final_string), 10000);
 80033d4:	f107 0110 	add.w	r1, r7, #16
 80033d8:	f242 7310 	movw	r3, #10000	; 0x2710
 80033dc:	2216      	movs	r2, #22
 80033de:	4820      	ldr	r0, [pc, #128]	; (8003460 <HAL_UART_RxCpltCallback+0x2a8>)
 80033e0:	f006 fae7 	bl	80099b2 <HAL_UART_Transmit>
 80033e4:	e00d      	b.n	8003402 <HAL_UART_RxCpltCallback+0x24a>
	}
	else if(ID == DATA_BOOT_REQ)
 80033e6:	4b13      	ldr	r3, [pc, #76]	; (8003434 <HAL_UART_RxCpltCallback+0x27c>)
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	2b08      	cmp	r3, #8
 80033ec:	d109      	bne.n	8003402 <HAL_UART_RxCpltCallback+0x24a>
	{
		char Boot[1] = "1";
 80033ee:	2331      	movs	r3, #49	; 0x31
 80033f0:	733b      	strb	r3, [r7, #12]
		HAL_UART_Transmit(&huart6, Boot, sizeof(Boot), 1000);
 80033f2:	f107 010c 	add.w	r1, r7, #12
 80033f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033fa:	2201      	movs	r2, #1
 80033fc:	4818      	ldr	r0, [pc, #96]	; (8003460 <HAL_UART_RxCpltCallback+0x2a8>)
 80033fe:	f006 fad8 	bl	80099b2 <HAL_UART_Transmit>
	}
	memset(Rx_Buffer_copied,0,sizeof(Rx_Buffer_copied));
 8003402:	2216      	movs	r2, #22
 8003404:	2100      	movs	r1, #0
 8003406:	4809      	ldr	r0, [pc, #36]	; (800342c <HAL_UART_RxCpltCallback+0x274>)
 8003408:	f007 fa8a 	bl	800a920 <memset>
	memset(Rx_Buffer,0,sizeof(Rx_Buffer));
 800340c:	2216      	movs	r2, #22
 800340e:	2100      	movs	r1, #0
 8003410:	4805      	ldr	r0, [pc, #20]	; (8003428 <HAL_UART_RxCpltCallback+0x270>)
 8003412:	f007 fa85 	bl	800a920 <memset>
	HAL_UART_Receive_IT(&huart6, Rx_Buffer, RECEIVE_BUFF_SIZE);
 8003416:	2216      	movs	r2, #22
 8003418:	4903      	ldr	r1, [pc, #12]	; (8003428 <HAL_UART_RxCpltCallback+0x270>)
 800341a:	4811      	ldr	r0, [pc, #68]	; (8003460 <HAL_UART_RxCpltCallback+0x2a8>)
 800341c:	f006 fb5b 	bl	8009ad6 <HAL_UART_Receive_IT>
}
 8003420:	bf00      	nop
 8003422:	3770      	adds	r7, #112	; 0x70
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	20000674 	.word	0x20000674
 800342c:	200005f0 	.word	0x200005f0
 8003430:	0800f534 	.word	0x0800f534
 8003434:	200004a6 	.word	0x200004a6
 8003438:	0800f538 	.word	0x0800f538
 800343c:	2000001c 	.word	0x2000001c
 8003440:	2000027c 	.word	0x2000027c
 8003444:	20000020 	.word	0x20000020
 8003448:	20000007 	.word	0x20000007
 800344c:	2000026e 	.word	0x2000026e
 8003450:	2000026f 	.word	0x2000026f
 8003454:	2000026c 	.word	0x2000026c
 8003458:	200004c4 	.word	0x200004c4
 800345c:	0800f53c 	.word	0x0800f53c
 8003460:	20000364 	.word	0x20000364
 8003464:	20000278 	.word	0x20000278
 8003468:	2000027a 	.word	0x2000027a
 800346c:	0800f540 	.word	0x0800f540
 8003470:	0800f548 	.word	0x0800f548

08003474 <Encoder_Read>:

void Encoder_Read()
{
 8003474:	b480      	push	{r7}
 8003476:	af00      	add	r7, sp, #0
	countLeft = __HAL_TIM_GET_COUNTER(&htim2);
 8003478:	4b08      	ldr	r3, [pc, #32]	; (800349c <Encoder_Read+0x28>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347e:	b21a      	sxth	r2, r3
 8003480:	4b07      	ldr	r3, [pc, #28]	; (80034a0 <Encoder_Read+0x2c>)
 8003482:	801a      	strh	r2, [r3, #0]
	countRight = __HAL_TIM_GET_COUNTER(&htim4);
 8003484:	4b07      	ldr	r3, [pc, #28]	; (80034a4 <Encoder_Read+0x30>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348a:	b21a      	sxth	r2, r3
 800348c:	4b06      	ldr	r3, [pc, #24]	; (80034a8 <Encoder_Read+0x34>)
 800348e:	801a      	strh	r2, [r3, #0]
}
 8003490:	bf00      	nop
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	200006dc 	.word	0x200006dc
 80034a0:	20000270 	.word	0x20000270
 80034a4:	20000454 	.word	0x20000454
 80034a8:	20000272 	.word	0x20000272

080034ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80034b2:	f001 ffe1 	bl	8005478 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80034b6:	f000 f883 	bl	80035c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80034ba:	f000 fbef 	bl	8003c9c <MX_GPIO_Init>
  MX_DMA_Init();
 80034be:	f000 fbcd 	bl	8003c5c <MX_DMA_Init>
  MX_USART6_UART_Init();
 80034c2:	f000 fba1 	bl	8003c08 <MX_USART6_UART_Init>
  MX_TIM2_Init();
 80034c6:	f000 f9e1 	bl	800388c <MX_TIM2_Init>
  MX_TIM3_Init();
 80034ca:	f000 fa33 	bl	8003934 <MX_TIM3_Init>
  MX_ADC1_Init();
 80034ce:	f000 f8e1 	bl	8003694 <MX_ADC1_Init>
  MX_TIM4_Init();
 80034d2:	f000 fa93 	bl	80039fc <MX_TIM4_Init>
  MX_I2C3_Init();
 80034d6:	f000 f975 	bl	80037c4 <MX_I2C3_Init>
  MX_TIM5_Init();
 80034da:	f000 fae3 	bl	8003aa4 <MX_TIM5_Init>
  MX_SPI2_Init();
 80034de:	f000 f99f 	bl	8003820 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80034e2:	f000 fb67 	bl	8003bb4 <MX_USART1_UART_Init>
  MX_TIM9_Init();
 80034e6:	f000 fb2b 	bl	8003b40 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 80034ea:	f7fe fdc6 	bl	800207a <lcd_init>
  MotorL_EnablePWM();
 80034ee:	f7fe fe13 	bl	8002118 <MotorL_EnablePWM>
  MotorR_EnablePWM();
 80034f2:	f7fe fe1b 	bl	800212c <MotorR_EnablePWM>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &Sensor_ADC_Value, 6);
 80034f6:	2206      	movs	r2, #6
 80034f8:	4924      	ldr	r1, [pc, #144]	; (800358c <main+0xe0>)
 80034fa:	4825      	ldr	r0, [pc, #148]	; (8003590 <main+0xe4>)
 80034fc:	f002 f9d6 	bl	80058ac <HAL_ADC_Start_DMA>
  HAL_UART_Receive_IT(&huart6, Rx_Buffer, RECEIVE_BUFF_SIZE);
 8003500:	2216      	movs	r2, #22
 8003502:	4924      	ldr	r1, [pc, #144]	; (8003594 <main+0xe8>)
 8003504:	4824      	ldr	r0, [pc, #144]	; (8003598 <main+0xec>)
 8003506:	f006 fae6 	bl	8009ad6 <HAL_UART_Receive_IT>
  /*Enable for encoder reading*/
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 800350a:	213c      	movs	r1, #60	; 0x3c
 800350c:	4823      	ldr	r0, [pc, #140]	; (800359c <main+0xf0>)
 800350e:	f005 fb4d 	bl	8008bac <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8003512:	213c      	movs	r1, #60	; 0x3c
 8003514:	4822      	ldr	r0, [pc, #136]	; (80035a0 <main+0xf4>)
 8003516:	f005 fb49 	bl	8008bac <HAL_TIM_Encoder_Start_IT>
  PIDController_Car_Init(&Car);
 800351a:	4822      	ldr	r0, [pc, #136]	; (80035a4 <main+0xf8>)
 800351c:	f7ff fe20 	bl	8003160 <PIDController_Car_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		if(LCD_INIT_FLAG == 1)
 8003520:	4b21      	ldr	r3, [pc, #132]	; (80035a8 <main+0xfc>)
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d114      	bne.n	8003552 <main+0xa6>
		{
			for(int i = 0; i < 3; i++)
 8003528:	2300      	movs	r3, #0
 800352a:	607b      	str	r3, [r7, #4]
 800352c:	e00b      	b.n	8003546 <main+0x9a>
			{
				lcd_init();
 800352e:	f7fe fda4 	bl	800207a <lcd_init>
				HAL_Delay(500);
 8003532:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003536:	f002 f811 	bl	800555c <HAL_Delay>
				lcd_send_cmd(0);
 800353a:	2000      	movs	r0, #0
 800353c:	f7fe fd26 	bl	8001f8c <lcd_send_cmd>
			for(int i = 0; i < 3; i++)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	3301      	adds	r3, #1
 8003544:	607b      	str	r3, [r7, #4]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2b02      	cmp	r3, #2
 800354a:	ddf0      	ble.n	800352e <main+0x82>
			}
			LCD_INIT_FLAG = 0;
 800354c:	4b16      	ldr	r3, [pc, #88]	; (80035a8 <main+0xfc>)
 800354e:	2200      	movs	r2, #0
 8003550:	701a      	strb	r2, [r3, #0]
		}
		lcd_send_cmd(1);
 8003552:	2001      	movs	r0, #1
 8003554:	f7fe fd1a 	bl	8001f8c <lcd_send_cmd>
		while (menu_display)
 8003558:	e013      	b.n	8003582 <main+0xd6>
		{
			Car.Kp = Kp;
 800355a:	4b14      	ldr	r3, [pc, #80]	; (80035ac <main+0x100>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a11      	ldr	r2, [pc, #68]	; (80035a4 <main+0xf8>)
 8003560:	6053      	str	r3, [r2, #4]
			Car.Kd = Kd;
 8003562:	4b13      	ldr	r3, [pc, #76]	; (80035b0 <main+0x104>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a0f      	ldr	r2, [pc, #60]	; (80035a4 <main+0xf8>)
 8003568:	60d3      	str	r3, [r2, #12]
			Menu_system_control(Menu_type, line);
 800356a:	4b12      	ldr	r3, [pc, #72]	; (80035b4 <main+0x108>)
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	4a12      	ldr	r2, [pc, #72]	; (80035b8 <main+0x10c>)
 8003570:	7812      	ldrb	r2, [r2, #0]
 8003572:	4611      	mov	r1, r2
 8003574:	4618      	mov	r0, r3
 8003576:	f7fd fd41 	bl	8000ffc <Menu_system_control>
			ScrollUp();
 800357a:	f000 ffaf 	bl	80044dc <ScrollUp>
			SelectItem();
 800357e:	f001 f8dd 	bl	800473c <SelectItem>
		while (menu_display)
 8003582:	4b0e      	ldr	r3, [pc, #56]	; (80035bc <main+0x110>)
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1e7      	bne.n	800355a <main+0xae>
		if(LCD_INIT_FLAG == 1)
 800358a:	e7c9      	b.n	8003520 <main+0x74>
 800358c:	200004a8 	.word	0x200004a8
 8003590:	20000558 	.word	0x20000558
 8003594:	20000674 	.word	0x20000674
 8003598:	20000364 	.word	0x20000364
 800359c:	20000454 	.word	0x20000454
 80035a0:	200006dc 	.word	0x200006dc
 80035a4:	20000024 	.word	0x20000024
 80035a8:	20000008 	.word	0x20000008
 80035ac:	2000001c 	.word	0x2000001c
 80035b0:	20000020 	.word	0x20000020
 80035b4:	20000001 	.word	0x20000001
 80035b8:	20000003 	.word	0x20000003
 80035bc:	20000000 	.word	0x20000000

080035c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b094      	sub	sp, #80	; 0x50
 80035c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80035c6:	f107 0320 	add.w	r3, r7, #32
 80035ca:	2230      	movs	r2, #48	; 0x30
 80035cc:	2100      	movs	r1, #0
 80035ce:	4618      	mov	r0, r3
 80035d0:	f007 f9a6 	bl	800a920 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80035d4:	f107 030c 	add.w	r3, r7, #12
 80035d8:	2200      	movs	r2, #0
 80035da:	601a      	str	r2, [r3, #0]
 80035dc:	605a      	str	r2, [r3, #4]
 80035de:	609a      	str	r2, [r3, #8]
 80035e0:	60da      	str	r2, [r3, #12]
 80035e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80035e4:	2300      	movs	r3, #0
 80035e6:	60bb      	str	r3, [r7, #8]
 80035e8:	4b28      	ldr	r3, [pc, #160]	; (800368c <SystemClock_Config+0xcc>)
 80035ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ec:	4a27      	ldr	r2, [pc, #156]	; (800368c <SystemClock_Config+0xcc>)
 80035ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035f2:	6413      	str	r3, [r2, #64]	; 0x40
 80035f4:	4b25      	ldr	r3, [pc, #148]	; (800368c <SystemClock_Config+0xcc>)
 80035f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035fc:	60bb      	str	r3, [r7, #8]
 80035fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003600:	2300      	movs	r3, #0
 8003602:	607b      	str	r3, [r7, #4]
 8003604:	4b22      	ldr	r3, [pc, #136]	; (8003690 <SystemClock_Config+0xd0>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800360c:	4a20      	ldr	r2, [pc, #128]	; (8003690 <SystemClock_Config+0xd0>)
 800360e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003612:	6013      	str	r3, [r2, #0]
 8003614:	4b1e      	ldr	r3, [pc, #120]	; (8003690 <SystemClock_Config+0xd0>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800361c:	607b      	str	r3, [r7, #4]
 800361e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003620:	2302      	movs	r3, #2
 8003622:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003624:	2301      	movs	r3, #1
 8003626:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003628:	2310      	movs	r3, #16
 800362a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800362c:	2302      	movs	r3, #2
 800362e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003630:	2300      	movs	r3, #0
 8003632:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003634:	2308      	movs	r3, #8
 8003636:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8003638:	2348      	movs	r3, #72	; 0x48
 800363a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800363c:	2302      	movs	r3, #2
 800363e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003640:	2304      	movs	r3, #4
 8003642:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003644:	f107 0320 	add.w	r3, r7, #32
 8003648:	4618      	mov	r0, r3
 800364a:	f004 fb2d 	bl	8007ca8 <HAL_RCC_OscConfig>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d001      	beq.n	8003658 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003654:	f001 fa74 	bl	8004b40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003658:	230f      	movs	r3, #15
 800365a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800365c:	2302      	movs	r3, #2
 800365e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003660:	2300      	movs	r3, #0
 8003662:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003664:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003668:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800366a:	2300      	movs	r3, #0
 800366c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800366e:	f107 030c 	add.w	r3, r7, #12
 8003672:	2102      	movs	r1, #2
 8003674:	4618      	mov	r0, r3
 8003676:	f004 fd8f 	bl	8008198 <HAL_RCC_ClockConfig>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d001      	beq.n	8003684 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8003680:	f001 fa5e 	bl	8004b40 <Error_Handler>
  }
}
 8003684:	bf00      	nop
 8003686:	3750      	adds	r7, #80	; 0x50
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	40023800 	.word	0x40023800
 8003690:	40007000 	.word	0x40007000

08003694 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800369a:	463b      	mov	r3, r7
 800369c:	2200      	movs	r2, #0
 800369e:	601a      	str	r2, [r3, #0]
 80036a0:	605a      	str	r2, [r3, #4]
 80036a2:	609a      	str	r2, [r3, #8]
 80036a4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80036a6:	4b44      	ldr	r3, [pc, #272]	; (80037b8 <MX_ADC1_Init+0x124>)
 80036a8:	4a44      	ldr	r2, [pc, #272]	; (80037bc <MX_ADC1_Init+0x128>)
 80036aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80036ac:	4b42      	ldr	r3, [pc, #264]	; (80037b8 <MX_ADC1_Init+0x124>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80036b2:	4b41      	ldr	r3, [pc, #260]	; (80037b8 <MX_ADC1_Init+0x124>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80036b8:	4b3f      	ldr	r3, [pc, #252]	; (80037b8 <MX_ADC1_Init+0x124>)
 80036ba:	2201      	movs	r2, #1
 80036bc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80036be:	4b3e      	ldr	r3, [pc, #248]	; (80037b8 <MX_ADC1_Init+0x124>)
 80036c0:	2201      	movs	r2, #1
 80036c2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80036c4:	4b3c      	ldr	r3, [pc, #240]	; (80037b8 <MX_ADC1_Init+0x124>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80036cc:	4b3a      	ldr	r3, [pc, #232]	; (80037b8 <MX_ADC1_Init+0x124>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80036d2:	4b39      	ldr	r3, [pc, #228]	; (80037b8 <MX_ADC1_Init+0x124>)
 80036d4:	4a3a      	ldr	r2, [pc, #232]	; (80037c0 <MX_ADC1_Init+0x12c>)
 80036d6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80036d8:	4b37      	ldr	r3, [pc, #220]	; (80037b8 <MX_ADC1_Init+0x124>)
 80036da:	2200      	movs	r2, #0
 80036dc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 80036de:	4b36      	ldr	r3, [pc, #216]	; (80037b8 <MX_ADC1_Init+0x124>)
 80036e0:	2206      	movs	r2, #6
 80036e2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80036e4:	4b34      	ldr	r3, [pc, #208]	; (80037b8 <MX_ADC1_Init+0x124>)
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80036ec:	4b32      	ldr	r3, [pc, #200]	; (80037b8 <MX_ADC1_Init+0x124>)
 80036ee:	2201      	movs	r2, #1
 80036f0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80036f2:	4831      	ldr	r0, [pc, #196]	; (80037b8 <MX_ADC1_Init+0x124>)
 80036f4:	f001 ff56 	bl	80055a4 <HAL_ADC_Init>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d001      	beq.n	8003702 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80036fe:	f001 fa1f 	bl	8004b40 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8003702:	2302      	movs	r3, #2
 8003704:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003706:	2301      	movs	r3, #1
 8003708:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800370a:	2303      	movs	r3, #3
 800370c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800370e:	463b      	mov	r3, r7
 8003710:	4619      	mov	r1, r3
 8003712:	4829      	ldr	r0, [pc, #164]	; (80037b8 <MX_ADC1_Init+0x124>)
 8003714:	f002 f9e2 	bl	8005adc <HAL_ADC_ConfigChannel>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d001      	beq.n	8003722 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800371e:	f001 fa0f 	bl	8004b40 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003722:	2303      	movs	r3, #3
 8003724:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003726:	2302      	movs	r3, #2
 8003728:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800372a:	463b      	mov	r3, r7
 800372c:	4619      	mov	r1, r3
 800372e:	4822      	ldr	r0, [pc, #136]	; (80037b8 <MX_ADC1_Init+0x124>)
 8003730:	f002 f9d4 	bl	8005adc <HAL_ADC_ConfigChannel>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d001      	beq.n	800373e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800373a:	f001 fa01 	bl	8004b40 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800373e:	2304      	movs	r3, #4
 8003740:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8003742:	2303      	movs	r3, #3
 8003744:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003746:	463b      	mov	r3, r7
 8003748:	4619      	mov	r1, r3
 800374a:	481b      	ldr	r0, [pc, #108]	; (80037b8 <MX_ADC1_Init+0x124>)
 800374c:	f002 f9c6 	bl	8005adc <HAL_ADC_ConfigChannel>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d001      	beq.n	800375a <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8003756:	f001 f9f3 	bl	8004b40 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800375a:	2305      	movs	r3, #5
 800375c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800375e:	2304      	movs	r3, #4
 8003760:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003762:	463b      	mov	r3, r7
 8003764:	4619      	mov	r1, r3
 8003766:	4814      	ldr	r0, [pc, #80]	; (80037b8 <MX_ADC1_Init+0x124>)
 8003768:	f002 f9b8 	bl	8005adc <HAL_ADC_ConfigChannel>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d001      	beq.n	8003776 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8003772:	f001 f9e5 	bl	8004b40 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8003776:	2306      	movs	r3, #6
 8003778:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800377a:	2305      	movs	r3, #5
 800377c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800377e:	463b      	mov	r3, r7
 8003780:	4619      	mov	r1, r3
 8003782:	480d      	ldr	r0, [pc, #52]	; (80037b8 <MX_ADC1_Init+0x124>)
 8003784:	f002 f9aa 	bl	8005adc <HAL_ADC_ConfigChannel>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d001      	beq.n	8003792 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 800378e:	f001 f9d7 	bl	8004b40 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8003792:	2307      	movs	r3, #7
 8003794:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8003796:	2306      	movs	r3, #6
 8003798:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800379a:	463b      	mov	r3, r7
 800379c:	4619      	mov	r1, r3
 800379e:	4806      	ldr	r0, [pc, #24]	; (80037b8 <MX_ADC1_Init+0x124>)
 80037a0:	f002 f99c 	bl	8005adc <HAL_ADC_ConfigChannel>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d001      	beq.n	80037ae <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 80037aa:	f001 f9c9 	bl	8004b40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80037ae:	bf00      	nop
 80037b0:	3710      	adds	r7, #16
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	20000558 	.word	0x20000558
 80037bc:	40012000 	.word	0x40012000
 80037c0:	0f000001 	.word	0x0f000001

080037c4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80037c8:	4b12      	ldr	r3, [pc, #72]	; (8003814 <MX_I2C3_Init+0x50>)
 80037ca:	4a13      	ldr	r2, [pc, #76]	; (8003818 <MX_I2C3_Init+0x54>)
 80037cc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80037ce:	4b11      	ldr	r3, [pc, #68]	; (8003814 <MX_I2C3_Init+0x50>)
 80037d0:	4a12      	ldr	r2, [pc, #72]	; (800381c <MX_I2C3_Init+0x58>)
 80037d2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80037d4:	4b0f      	ldr	r3, [pc, #60]	; (8003814 <MX_I2C3_Init+0x50>)
 80037d6:	2200      	movs	r2, #0
 80037d8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80037da:	4b0e      	ldr	r3, [pc, #56]	; (8003814 <MX_I2C3_Init+0x50>)
 80037dc:	2200      	movs	r2, #0
 80037de:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80037e0:	4b0c      	ldr	r3, [pc, #48]	; (8003814 <MX_I2C3_Init+0x50>)
 80037e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80037e6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80037e8:	4b0a      	ldr	r3, [pc, #40]	; (8003814 <MX_I2C3_Init+0x50>)
 80037ea:	2200      	movs	r2, #0
 80037ec:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80037ee:	4b09      	ldr	r3, [pc, #36]	; (8003814 <MX_I2C3_Init+0x50>)
 80037f0:	2200      	movs	r2, #0
 80037f2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80037f4:	4b07      	ldr	r3, [pc, #28]	; (8003814 <MX_I2C3_Init+0x50>)
 80037f6:	2200      	movs	r2, #0
 80037f8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80037fa:	4b06      	ldr	r3, [pc, #24]	; (8003814 <MX_I2C3_Init+0x50>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003800:	4804      	ldr	r0, [pc, #16]	; (8003814 <MX_I2C3_Init+0x50>)
 8003802:	f003 fe05 	bl	8007410 <HAL_I2C_Init>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d001      	beq.n	8003810 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800380c:	f001 f998 	bl	8004b40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003810:	bf00      	nop
 8003812:	bd80      	pop	{r7, pc}
 8003814:	200003a8 	.word	0x200003a8
 8003818:	40005c00 	.word	0x40005c00
 800381c:	000186a0 	.word	0x000186a0

08003820 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003824:	4b17      	ldr	r3, [pc, #92]	; (8003884 <MX_SPI2_Init+0x64>)
 8003826:	4a18      	ldr	r2, [pc, #96]	; (8003888 <MX_SPI2_Init+0x68>)
 8003828:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800382a:	4b16      	ldr	r3, [pc, #88]	; (8003884 <MX_SPI2_Init+0x64>)
 800382c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003830:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003832:	4b14      	ldr	r3, [pc, #80]	; (8003884 <MX_SPI2_Init+0x64>)
 8003834:	2200      	movs	r2, #0
 8003836:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003838:	4b12      	ldr	r3, [pc, #72]	; (8003884 <MX_SPI2_Init+0x64>)
 800383a:	2200      	movs	r2, #0
 800383c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800383e:	4b11      	ldr	r3, [pc, #68]	; (8003884 <MX_SPI2_Init+0x64>)
 8003840:	2200      	movs	r2, #0
 8003842:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003844:	4b0f      	ldr	r3, [pc, #60]	; (8003884 <MX_SPI2_Init+0x64>)
 8003846:	2200      	movs	r2, #0
 8003848:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800384a:	4b0e      	ldr	r3, [pc, #56]	; (8003884 <MX_SPI2_Init+0x64>)
 800384c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003850:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003852:	4b0c      	ldr	r3, [pc, #48]	; (8003884 <MX_SPI2_Init+0x64>)
 8003854:	2200      	movs	r2, #0
 8003856:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003858:	4b0a      	ldr	r3, [pc, #40]	; (8003884 <MX_SPI2_Init+0x64>)
 800385a:	2200      	movs	r2, #0
 800385c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800385e:	4b09      	ldr	r3, [pc, #36]	; (8003884 <MX_SPI2_Init+0x64>)
 8003860:	2200      	movs	r2, #0
 8003862:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003864:	4b07      	ldr	r3, [pc, #28]	; (8003884 <MX_SPI2_Init+0x64>)
 8003866:	2200      	movs	r2, #0
 8003868:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800386a:	4b06      	ldr	r3, [pc, #24]	; (8003884 <MX_SPI2_Init+0x64>)
 800386c:	220a      	movs	r2, #10
 800386e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003870:	4804      	ldr	r0, [pc, #16]	; (8003884 <MX_SPI2_Init+0x64>)
 8003872:	f004 fe8d 	bl	8008590 <HAL_SPI_Init>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d001      	beq.n	8003880 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800387c:	f001 f960 	bl	8004b40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003880:	bf00      	nop
 8003882:	bd80      	pop	{r7, pc}
 8003884:	200003fc 	.word	0x200003fc
 8003888:	40003800 	.word	0x40003800

0800388c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b08c      	sub	sp, #48	; 0x30
 8003890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003892:	f107 030c 	add.w	r3, r7, #12
 8003896:	2224      	movs	r2, #36	; 0x24
 8003898:	2100      	movs	r1, #0
 800389a:	4618      	mov	r0, r3
 800389c:	f007 f840 	bl	800a920 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038a0:	1d3b      	adds	r3, r7, #4
 80038a2:	2200      	movs	r2, #0
 80038a4:	601a      	str	r2, [r3, #0]
 80038a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80038a8:	4b21      	ldr	r3, [pc, #132]	; (8003930 <MX_TIM2_Init+0xa4>)
 80038aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80038ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80038b0:	4b1f      	ldr	r3, [pc, #124]	; (8003930 <MX_TIM2_Init+0xa4>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038b6:	4b1e      	ldr	r3, [pc, #120]	; (8003930 <MX_TIM2_Init+0xa4>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80038bc:	4b1c      	ldr	r3, [pc, #112]	; (8003930 <MX_TIM2_Init+0xa4>)
 80038be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80038c2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038c4:	4b1a      	ldr	r3, [pc, #104]	; (8003930 <MX_TIM2_Init+0xa4>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038ca:	4b19      	ldr	r3, [pc, #100]	; (8003930 <MX_TIM2_Init+0xa4>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80038d0:	2303      	movs	r3, #3
 80038d2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80038d4:	2302      	movs	r3, #2
 80038d6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80038d8:	2301      	movs	r3, #1
 80038da:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80038dc:	2300      	movs	r3, #0
 80038de:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80038e0:	2300      	movs	r3, #0
 80038e2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80038e4:	2302      	movs	r3, #2
 80038e6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80038e8:	2301      	movs	r3, #1
 80038ea:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80038ec:	2300      	movs	r3, #0
 80038ee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80038f0:	2300      	movs	r3, #0
 80038f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80038f4:	f107 030c 	add.w	r3, r7, #12
 80038f8:	4619      	mov	r1, r3
 80038fa:	480d      	ldr	r0, [pc, #52]	; (8003930 <MX_TIM2_Init+0xa4>)
 80038fc:	f005 f8b0 	bl	8008a60 <HAL_TIM_Encoder_Init>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8003906:	f001 f91b 	bl	8004b40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800390a:	2300      	movs	r3, #0
 800390c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800390e:	2300      	movs	r3, #0
 8003910:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003912:	1d3b      	adds	r3, r7, #4
 8003914:	4619      	mov	r1, r3
 8003916:	4806      	ldr	r0, [pc, #24]	; (8003930 <MX_TIM2_Init+0xa4>)
 8003918:	f005 ff7c 	bl	8009814 <HAL_TIMEx_MasterConfigSynchronization>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d001      	beq.n	8003926 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8003922:	f001 f90d 	bl	8004b40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003926:	bf00      	nop
 8003928:	3730      	adds	r7, #48	; 0x30
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	200006dc 	.word	0x200006dc

08003934 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b08a      	sub	sp, #40	; 0x28
 8003938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800393a:	f107 0320 	add.w	r3, r7, #32
 800393e:	2200      	movs	r2, #0
 8003940:	601a      	str	r2, [r3, #0]
 8003942:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003944:	1d3b      	adds	r3, r7, #4
 8003946:	2200      	movs	r2, #0
 8003948:	601a      	str	r2, [r3, #0]
 800394a:	605a      	str	r2, [r3, #4]
 800394c:	609a      	str	r2, [r3, #8]
 800394e:	60da      	str	r2, [r3, #12]
 8003950:	611a      	str	r2, [r3, #16]
 8003952:	615a      	str	r2, [r3, #20]
 8003954:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003956:	4b27      	ldr	r3, [pc, #156]	; (80039f4 <MX_TIM3_Init+0xc0>)
 8003958:	4a27      	ldr	r2, [pc, #156]	; (80039f8 <MX_TIM3_Init+0xc4>)
 800395a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800395c:	4b25      	ldr	r3, [pc, #148]	; (80039f4 <MX_TIM3_Init+0xc0>)
 800395e:	2200      	movs	r2, #0
 8003960:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003962:	4b24      	ldr	r3, [pc, #144]	; (80039f4 <MX_TIM3_Init+0xc0>)
 8003964:	2200      	movs	r2, #0
 8003966:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7199;
 8003968:	4b22      	ldr	r3, [pc, #136]	; (80039f4 <MX_TIM3_Init+0xc0>)
 800396a:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800396e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003970:	4b20      	ldr	r3, [pc, #128]	; (80039f4 <MX_TIM3_Init+0xc0>)
 8003972:	2200      	movs	r2, #0
 8003974:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003976:	4b1f      	ldr	r3, [pc, #124]	; (80039f4 <MX_TIM3_Init+0xc0>)
 8003978:	2200      	movs	r2, #0
 800397a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800397c:	481d      	ldr	r0, [pc, #116]	; (80039f4 <MX_TIM3_Init+0xc0>)
 800397e:	f004 ff70 	bl	8008862 <HAL_TIM_PWM_Init>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d001      	beq.n	800398c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8003988:	f001 f8da 	bl	8004b40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800398c:	2300      	movs	r3, #0
 800398e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003990:	2300      	movs	r3, #0
 8003992:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003994:	f107 0320 	add.w	r3, r7, #32
 8003998:	4619      	mov	r1, r3
 800399a:	4816      	ldr	r0, [pc, #88]	; (80039f4 <MX_TIM3_Init+0xc0>)
 800399c:	f005 ff3a 	bl	8009814 <HAL_TIMEx_MasterConfigSynchronization>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d001      	beq.n	80039aa <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80039a6:	f001 f8cb 	bl	8004b40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80039aa:	2360      	movs	r3, #96	; 0x60
 80039ac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80039ae:	2300      	movs	r3, #0
 80039b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80039b2:	2300      	movs	r3, #0
 80039b4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80039b6:	2300      	movs	r3, #0
 80039b8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80039ba:	1d3b      	adds	r3, r7, #4
 80039bc:	2208      	movs	r2, #8
 80039be:	4619      	mov	r1, r3
 80039c0:	480c      	ldr	r0, [pc, #48]	; (80039f4 <MX_TIM3_Init+0xc0>)
 80039c2:	f005 faa9 	bl	8008f18 <HAL_TIM_PWM_ConfigChannel>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d001      	beq.n	80039d0 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80039cc:	f001 f8b8 	bl	8004b40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80039d0:	1d3b      	adds	r3, r7, #4
 80039d2:	220c      	movs	r2, #12
 80039d4:	4619      	mov	r1, r3
 80039d6:	4807      	ldr	r0, [pc, #28]	; (80039f4 <MX_TIM3_Init+0xc0>)
 80039d8:	f005 fa9e 	bl	8008f18 <HAL_TIM_PWM_ConfigChannel>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80039e2:	f001 f8ad 	bl	8004b40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80039e6:	4803      	ldr	r0, [pc, #12]	; (80039f4 <MX_TIM3_Init+0xc0>)
 80039e8:	f001 fb12 	bl	8005010 <HAL_TIM_MspPostInit>

}
 80039ec:	bf00      	nop
 80039ee:	3728      	adds	r7, #40	; 0x28
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	20000510 	.word	0x20000510
 80039f8:	40000400 	.word	0x40000400

080039fc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b08c      	sub	sp, #48	; 0x30
 8003a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003a02:	f107 030c 	add.w	r3, r7, #12
 8003a06:	2224      	movs	r2, #36	; 0x24
 8003a08:	2100      	movs	r1, #0
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f006 ff88 	bl	800a920 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a10:	1d3b      	adds	r3, r7, #4
 8003a12:	2200      	movs	r2, #0
 8003a14:	601a      	str	r2, [r3, #0]
 8003a16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003a18:	4b20      	ldr	r3, [pc, #128]	; (8003a9c <MX_TIM4_Init+0xa0>)
 8003a1a:	4a21      	ldr	r2, [pc, #132]	; (8003aa0 <MX_TIM4_Init+0xa4>)
 8003a1c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003a1e:	4b1f      	ldr	r3, [pc, #124]	; (8003a9c <MX_TIM4_Init+0xa0>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a24:	4b1d      	ldr	r3, [pc, #116]	; (8003a9c <MX_TIM4_Init+0xa0>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003a2a:	4b1c      	ldr	r3, [pc, #112]	; (8003a9c <MX_TIM4_Init+0xa0>)
 8003a2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a30:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a32:	4b1a      	ldr	r3, [pc, #104]	; (8003a9c <MX_TIM4_Init+0xa0>)
 8003a34:	2200      	movs	r2, #0
 8003a36:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a38:	4b18      	ldr	r3, [pc, #96]	; (8003a9c <MX_TIM4_Init+0xa0>)
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8003a42:	2302      	movs	r3, #2
 8003a44:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003a46:	2301      	movs	r3, #1
 8003a48:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8003a52:	2302      	movs	r3, #2
 8003a54:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003a56:	2301      	movs	r3, #1
 8003a58:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003a62:	f107 030c 	add.w	r3, r7, #12
 8003a66:	4619      	mov	r1, r3
 8003a68:	480c      	ldr	r0, [pc, #48]	; (8003a9c <MX_TIM4_Init+0xa0>)
 8003a6a:	f004 fff9 	bl	8008a60 <HAL_TIM_Encoder_Init>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d001      	beq.n	8003a78 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8003a74:	f001 f864 	bl	8004b40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003a80:	1d3b      	adds	r3, r7, #4
 8003a82:	4619      	mov	r1, r3
 8003a84:	4805      	ldr	r0, [pc, #20]	; (8003a9c <MX_TIM4_Init+0xa0>)
 8003a86:	f005 fec5 	bl	8009814 <HAL_TIMEx_MasterConfigSynchronization>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d001      	beq.n	8003a94 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8003a90:	f001 f856 	bl	8004b40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003a94:	bf00      	nop
 8003a96:	3730      	adds	r7, #48	; 0x30
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	20000454 	.word	0x20000454
 8003aa0:	40000800 	.word	0x40000800

08003aa4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b086      	sub	sp, #24
 8003aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003aaa:	f107 0308 	add.w	r3, r7, #8
 8003aae:	2200      	movs	r2, #0
 8003ab0:	601a      	str	r2, [r3, #0]
 8003ab2:	605a      	str	r2, [r3, #4]
 8003ab4:	609a      	str	r2, [r3, #8]
 8003ab6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ab8:	463b      	mov	r3, r7
 8003aba:	2200      	movs	r2, #0
 8003abc:	601a      	str	r2, [r3, #0]
 8003abe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003ac0:	4b1d      	ldr	r3, [pc, #116]	; (8003b38 <MX_TIM5_Init+0x94>)
 8003ac2:	4a1e      	ldr	r2, [pc, #120]	; (8003b3c <MX_TIM5_Init+0x98>)
 8003ac4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 60;
 8003ac6:	4b1c      	ldr	r3, [pc, #112]	; (8003b38 <MX_TIM5_Init+0x94>)
 8003ac8:	223c      	movs	r2, #60	; 0x3c
 8003aca:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003acc:	4b1a      	ldr	r3, [pc, #104]	; (8003b38 <MX_TIM5_Init+0x94>)
 8003ace:	2200      	movs	r2, #0
 8003ad0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 59999;
 8003ad2:	4b19      	ldr	r3, [pc, #100]	; (8003b38 <MX_TIM5_Init+0x94>)
 8003ad4:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8003ad8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ada:	4b17      	ldr	r3, [pc, #92]	; (8003b38 <MX_TIM5_Init+0x94>)
 8003adc:	2200      	movs	r2, #0
 8003ade:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ae0:	4b15      	ldr	r3, [pc, #84]	; (8003b38 <MX_TIM5_Init+0x94>)
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003ae6:	4814      	ldr	r0, [pc, #80]	; (8003b38 <MX_TIM5_Init+0x94>)
 8003ae8:	f004 fddb 	bl	80086a2 <HAL_TIM_Base_Init>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d001      	beq.n	8003af6 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8003af2:	f001 f825 	bl	8004b40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003af6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003afa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003afc:	f107 0308 	add.w	r3, r7, #8
 8003b00:	4619      	mov	r1, r3
 8003b02:	480d      	ldr	r0, [pc, #52]	; (8003b38 <MX_TIM5_Init+0x94>)
 8003b04:	f005 faca 	bl	800909c <HAL_TIM_ConfigClockSource>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d001      	beq.n	8003b12 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8003b0e:	f001 f817 	bl	8004b40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b12:	2300      	movs	r3, #0
 8003b14:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b16:	2300      	movs	r3, #0
 8003b18:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003b1a:	463b      	mov	r3, r7
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	4806      	ldr	r0, [pc, #24]	; (8003b38 <MX_TIM5_Init+0x94>)
 8003b20:	f005 fe78 	bl	8009814 <HAL_TIMEx_MasterConfigSynchronization>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8003b2a:	f001 f809 	bl	8004b40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003b2e:	bf00      	nop
 8003b30:	3718      	adds	r7, #24
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	200004c8 	.word	0x200004c8
 8003b3c:	40000c00 	.word	0x40000c00

08003b40 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b46:	463b      	mov	r3, r7
 8003b48:	2200      	movs	r2, #0
 8003b4a:	601a      	str	r2, [r3, #0]
 8003b4c:	605a      	str	r2, [r3, #4]
 8003b4e:	609a      	str	r2, [r3, #8]
 8003b50:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8003b52:	4b16      	ldr	r3, [pc, #88]	; (8003bac <MX_TIM9_Init+0x6c>)
 8003b54:	4a16      	ldr	r2, [pc, #88]	; (8003bb0 <MX_TIM9_Init+0x70>)
 8003b56:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 71;
 8003b58:	4b14      	ldr	r3, [pc, #80]	; (8003bac <MX_TIM9_Init+0x6c>)
 8003b5a:	2247      	movs	r2, #71	; 0x47
 8003b5c:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b5e:	4b13      	ldr	r3, [pc, #76]	; (8003bac <MX_TIM9_Init+0x6c>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 9999;
 8003b64:	4b11      	ldr	r3, [pc, #68]	; (8003bac <MX_TIM9_Init+0x6c>)
 8003b66:	f242 720f 	movw	r2, #9999	; 0x270f
 8003b6a:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b6c:	4b0f      	ldr	r3, [pc, #60]	; (8003bac <MX_TIM9_Init+0x6c>)
 8003b6e:	2200      	movs	r2, #0
 8003b70:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b72:	4b0e      	ldr	r3, [pc, #56]	; (8003bac <MX_TIM9_Init+0x6c>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8003b78:	480c      	ldr	r0, [pc, #48]	; (8003bac <MX_TIM9_Init+0x6c>)
 8003b7a:	f004 fd92 	bl	80086a2 <HAL_TIM_Base_Init>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d001      	beq.n	8003b88 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8003b84:	f000 ffdc 	bl	8004b40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b8c:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8003b8e:	463b      	mov	r3, r7
 8003b90:	4619      	mov	r1, r3
 8003b92:	4806      	ldr	r0, [pc, #24]	; (8003bac <MX_TIM9_Init+0x6c>)
 8003b94:	f005 fa82 	bl	800909c <HAL_TIM_ConfigClockSource>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d001      	beq.n	8003ba2 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8003b9e:	f000 ffcf 	bl	8004b40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8003ba2:	bf00      	nop
 8003ba4:	3710      	adds	r7, #16
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	20000690 	.word	0x20000690
 8003bb0:	40014000 	.word	0x40014000

08003bb4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003bb8:	4b11      	ldr	r3, [pc, #68]	; (8003c00 <MX_USART1_UART_Init+0x4c>)
 8003bba:	4a12      	ldr	r2, [pc, #72]	; (8003c04 <MX_USART1_UART_Init+0x50>)
 8003bbc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003bbe:	4b10      	ldr	r3, [pc, #64]	; (8003c00 <MX_USART1_UART_Init+0x4c>)
 8003bc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003bc4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003bc6:	4b0e      	ldr	r3, [pc, #56]	; (8003c00 <MX_USART1_UART_Init+0x4c>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003bcc:	4b0c      	ldr	r3, [pc, #48]	; (8003c00 <MX_USART1_UART_Init+0x4c>)
 8003bce:	2200      	movs	r2, #0
 8003bd0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003bd2:	4b0b      	ldr	r3, [pc, #44]	; (8003c00 <MX_USART1_UART_Init+0x4c>)
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003bd8:	4b09      	ldr	r3, [pc, #36]	; (8003c00 <MX_USART1_UART_Init+0x4c>)
 8003bda:	220c      	movs	r2, #12
 8003bdc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003bde:	4b08      	ldr	r3, [pc, #32]	; (8003c00 <MX_USART1_UART_Init+0x4c>)
 8003be0:	2200      	movs	r2, #0
 8003be2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003be4:	4b06      	ldr	r3, [pc, #24]	; (8003c00 <MX_USART1_UART_Init+0x4c>)
 8003be6:	2200      	movs	r2, #0
 8003be8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003bea:	4805      	ldr	r0, [pc, #20]	; (8003c00 <MX_USART1_UART_Init+0x4c>)
 8003bec:	f005 fe94 	bl	8009918 <HAL_UART_Init>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d001      	beq.n	8003bfa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003bf6:	f000 ffa3 	bl	8004b40 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003bfa:	bf00      	nop
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	200005a0 	.word	0x200005a0
 8003c04:	40011000 	.word	0x40011000

08003c08 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003c0c:	4b11      	ldr	r3, [pc, #68]	; (8003c54 <MX_USART6_UART_Init+0x4c>)
 8003c0e:	4a12      	ldr	r2, [pc, #72]	; (8003c58 <MX_USART6_UART_Init+0x50>)
 8003c10:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8003c12:	4b10      	ldr	r3, [pc, #64]	; (8003c54 <MX_USART6_UART_Init+0x4c>)
 8003c14:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003c18:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003c1a:	4b0e      	ldr	r3, [pc, #56]	; (8003c54 <MX_USART6_UART_Init+0x4c>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003c20:	4b0c      	ldr	r3, [pc, #48]	; (8003c54 <MX_USART6_UART_Init+0x4c>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003c26:	4b0b      	ldr	r3, [pc, #44]	; (8003c54 <MX_USART6_UART_Init+0x4c>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003c2c:	4b09      	ldr	r3, [pc, #36]	; (8003c54 <MX_USART6_UART_Init+0x4c>)
 8003c2e:	220c      	movs	r2, #12
 8003c30:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c32:	4b08      	ldr	r3, [pc, #32]	; (8003c54 <MX_USART6_UART_Init+0x4c>)
 8003c34:	2200      	movs	r2, #0
 8003c36:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c38:	4b06      	ldr	r3, [pc, #24]	; (8003c54 <MX_USART6_UART_Init+0x4c>)
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003c3e:	4805      	ldr	r0, [pc, #20]	; (8003c54 <MX_USART6_UART_Init+0x4c>)
 8003c40:	f005 fe6a 	bl	8009918 <HAL_UART_Init>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d001      	beq.n	8003c4e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003c4a:	f000 ff79 	bl	8004b40 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003c4e:	bf00      	nop
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	20000364 	.word	0x20000364
 8003c58:	40011400 	.word	0x40011400

08003c5c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003c62:	2300      	movs	r3, #0
 8003c64:	607b      	str	r3, [r7, #4]
 8003c66:	4b0c      	ldr	r3, [pc, #48]	; (8003c98 <MX_DMA_Init+0x3c>)
 8003c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6a:	4a0b      	ldr	r2, [pc, #44]	; (8003c98 <MX_DMA_Init+0x3c>)
 8003c6c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003c70:	6313      	str	r3, [r2, #48]	; 0x30
 8003c72:	4b09      	ldr	r3, [pc, #36]	; (8003c98 <MX_DMA_Init+0x3c>)
 8003c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c7a:	607b      	str	r3, [r7, #4]
 8003c7c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003c7e:	2200      	movs	r2, #0
 8003c80:	2100      	movs	r1, #0
 8003c82:	2038      	movs	r0, #56	; 0x38
 8003c84:	f002 fac5 	bl	8006212 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003c88:	2038      	movs	r0, #56	; 0x38
 8003c8a:	f002 fade 	bl	800624a <HAL_NVIC_EnableIRQ>

}
 8003c8e:	bf00      	nop
 8003c90:	3708      	adds	r7, #8
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	40023800 	.word	0x40023800

08003c9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b08a      	sub	sp, #40	; 0x28
 8003ca0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ca2:	f107 0314 	add.w	r3, r7, #20
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	601a      	str	r2, [r3, #0]
 8003caa:	605a      	str	r2, [r3, #4]
 8003cac:	609a      	str	r2, [r3, #8]
 8003cae:	60da      	str	r2, [r3, #12]
 8003cb0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	613b      	str	r3, [r7, #16]
 8003cb6:	4b39      	ldr	r3, [pc, #228]	; (8003d9c <MX_GPIO_Init+0x100>)
 8003cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cba:	4a38      	ldr	r2, [pc, #224]	; (8003d9c <MX_GPIO_Init+0x100>)
 8003cbc:	f043 0304 	orr.w	r3, r3, #4
 8003cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8003cc2:	4b36      	ldr	r3, [pc, #216]	; (8003d9c <MX_GPIO_Init+0x100>)
 8003cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc6:	f003 0304 	and.w	r3, r3, #4
 8003cca:	613b      	str	r3, [r7, #16]
 8003ccc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003cce:	2300      	movs	r3, #0
 8003cd0:	60fb      	str	r3, [r7, #12]
 8003cd2:	4b32      	ldr	r3, [pc, #200]	; (8003d9c <MX_GPIO_Init+0x100>)
 8003cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd6:	4a31      	ldr	r2, [pc, #196]	; (8003d9c <MX_GPIO_Init+0x100>)
 8003cd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8003cde:	4b2f      	ldr	r3, [pc, #188]	; (8003d9c <MX_GPIO_Init+0x100>)
 8003ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ce6:	60fb      	str	r3, [r7, #12]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cea:	2300      	movs	r3, #0
 8003cec:	60bb      	str	r3, [r7, #8]
 8003cee:	4b2b      	ldr	r3, [pc, #172]	; (8003d9c <MX_GPIO_Init+0x100>)
 8003cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf2:	4a2a      	ldr	r2, [pc, #168]	; (8003d9c <MX_GPIO_Init+0x100>)
 8003cf4:	f043 0301 	orr.w	r3, r3, #1
 8003cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8003cfa:	4b28      	ldr	r3, [pc, #160]	; (8003d9c <MX_GPIO_Init+0x100>)
 8003cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfe:	f003 0301 	and.w	r3, r3, #1
 8003d02:	60bb      	str	r3, [r7, #8]
 8003d04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d06:	2300      	movs	r3, #0
 8003d08:	607b      	str	r3, [r7, #4]
 8003d0a:	4b24      	ldr	r3, [pc, #144]	; (8003d9c <MX_GPIO_Init+0x100>)
 8003d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d0e:	4a23      	ldr	r2, [pc, #140]	; (8003d9c <MX_GPIO_Init+0x100>)
 8003d10:	f043 0302 	orr.w	r3, r3, #2
 8003d14:	6313      	str	r3, [r2, #48]	; 0x30
 8003d16:	4b21      	ldr	r3, [pc, #132]	; (8003d9c <MX_GPIO_Init+0x100>)
 8003d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1a:	f003 0302 	and.w	r3, r3, #2
 8003d1e:	607b      	str	r3, [r7, #4]
 8003d20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_5, GPIO_PIN_RESET);
 8003d22:	2200      	movs	r2, #0
 8003d24:	f240 4124 	movw	r1, #1060	; 0x424
 8003d28:	481d      	ldr	r0, [pc, #116]	; (8003da0 <MX_GPIO_Init+0x104>)
 8003d2a:	f003 fb3f 	bl	80073ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ButtonC_Pin */
  GPIO_InitStruct.Pin = ButtonC_Pin;
 8003d2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003d34:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003d38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ButtonC_GPIO_Port, &GPIO_InitStruct);
 8003d3e:	f107 0314 	add.w	r3, r7, #20
 8003d42:	4619      	mov	r1, r3
 8003d44:	4817      	ldr	r0, [pc, #92]	; (8003da4 <MX_GPIO_Init+0x108>)
 8003d46:	f003 f995 	bl	8007074 <HAL_GPIO_Init>

  /*Configure GPIO pins : ButtonB_Pin ButtonA_Pin */
  GPIO_InitStruct.Pin = ButtonB_Pin|ButtonA_Pin;
 8003d4a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003d4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d50:	2300      	movs	r3, #0
 8003d52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d54:	2300      	movs	r3, #0
 8003d56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d58:	f107 0314 	add.w	r3, r7, #20
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	4811      	ldr	r0, [pc, #68]	; (8003da4 <MX_GPIO_Init+0x108>)
 8003d60:	f003 f988 	bl	8007074 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_5;
 8003d64:	f240 4324 	movw	r3, #1060	; 0x424
 8003d68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d72:	2300      	movs	r3, #0
 8003d74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d76:	f107 0314 	add.w	r3, r7, #20
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	4808      	ldr	r0, [pc, #32]	; (8003da0 <MX_GPIO_Init+0x104>)
 8003d7e:	f003 f979 	bl	8007074 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003d82:	2200      	movs	r2, #0
 8003d84:	2100      	movs	r1, #0
 8003d86:	2028      	movs	r0, #40	; 0x28
 8003d88:	f002 fa43 	bl	8006212 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003d8c:	2028      	movs	r0, #40	; 0x28
 8003d8e:	f002 fa5c 	bl	800624a <HAL_NVIC_EnableIRQ>

}
 8003d92:	bf00      	nop
 8003d94:	3728      	adds	r7, #40	; 0x28
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	40023800 	.word	0x40023800
 8003da0:	40020400 	.word	0x40020400
 8003da4:	40020800 	.word	0x40020800

08003da8 <Running>:

/* USER CODE BEGIN 4 */
void Running(void) // Activate the car for running
{
 8003da8:	b590      	push	{r4, r7, lr}
 8003daa:	b097      	sub	sp, #92	; 0x5c
 8003dac:	af02      	add	r7, sp, #8
	uint8_t Temp_Line;
	int8_t point_passed = -1;
 8003dae:	23ff      	movs	r3, #255	; 0xff
 8003db0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	int Instruction[8];
	int Map_Point[4],Turn_Instruction[4];
	int8_t Max_point_temp,Max_point;
	int8_t Spin_once = 0;
 8003db4:	2300      	movs	r3, #0
 8003db6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	Max_point_temp = Solver(First_point, Last_point, Previous_point, Turn_Instruction, Map_Point, Instruction);
 8003dba:	4bb8      	ldr	r3, [pc, #736]	; (800409c <Running+0x2f4>)
 8003dbc:	f993 3000 	ldrsb.w	r3, [r3]
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	4bb7      	ldr	r3, [pc, #732]	; (80040a0 <Running+0x2f8>)
 8003dc4:	f993 3000 	ldrsb.w	r3, [r3]
 8003dc8:	4619      	mov	r1, r3
 8003dca:	4bb6      	ldr	r3, [pc, #728]	; (80040a4 <Running+0x2fc>)
 8003dcc:	f993 3000 	ldrsb.w	r3, [r3]
 8003dd0:	461c      	mov	r4, r3
 8003dd2:	1d3a      	adds	r2, r7, #4
 8003dd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003dd8:	9301      	str	r3, [sp, #4]
 8003dda:	f107 0314 	add.w	r3, r7, #20
 8003dde:	9300      	str	r3, [sp, #0]
 8003de0:	4613      	mov	r3, r2
 8003de2:	4622      	mov	r2, r4
 8003de4:	f7fe fffa 	bl	8002ddc <Solver>
 8003de8:	4603      	mov	r3, r0
 8003dea:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	Max_point = Max_point_temp + (Max_point_temp - 1) - 1;
 8003dee:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8003df2:	337f      	adds	r3, #127	; 0x7f
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	005b      	lsls	r3, r3, #1
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	lcd_send_cmd(0x80 | 0x00);
 8003dfe:	2080      	movs	r0, #128	; 0x80
 8003e00:	f7fe f8c4 	bl	8001f8c <lcd_send_cmd>
	lcd_send_string("Car is Running!        ");
 8003e04:	48a8      	ldr	r0, [pc, #672]	; (80040a8 <Running+0x300>)
 8003e06:	f7fe f972 	bl	80020ee <lcd_send_string>
	lcd_send_cmd(0x80 | 0x40);
 8003e0a:	20c0      	movs	r0, #192	; 0xc0
 8003e0c:	f7fe f8be 	bl	8001f8c <lcd_send_cmd>
	lcd_send_string("Press C for cancel     ");
 8003e10:	48a6      	ldr	r0, [pc, #664]	; (80040ac <Running+0x304>)
 8003e12:	f7fe f96c 	bl	80020ee <lcd_send_string>
	Previous_Line = LINE_MIDDLE;
 8003e16:	4ba6      	ldr	r3, [pc, #664]	; (80040b0 <Running+0x308>)
 8003e18:	2203      	movs	r2, #3
 8003e1a:	701a      	strb	r2, [r3, #0]
	while (cancel_running) {
 8003e1c:	e1a4      	b.n	8004168 <Running+0x3c0>
		if(Begin_solving == 1){
 8003e1e:	4ba5      	ldr	r3, [pc, #660]	; (80040b4 <Running+0x30c>)
 8003e20:	f993 3000 	ldrsb.w	r3, [r3]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	f040 8194 	bne.w	8004152 <Running+0x3aa>
			unsigned long currentMillis  = HAL_GetTick();
 8003e2a:	f001 fb8b 	bl	8005544 <HAL_GetTick>
 8003e2e:	64b8      	str	r0, [r7, #72]	; 0x48
			Encoder_Read();
 8003e30:	f7ff fb20 	bl	8003474 <Encoder_Read>
			if(currentMillis  - previousMillis  >= interval)
 8003e34:	4ba0      	ldr	r3, [pc, #640]	; (80040b8 <Running+0x310>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d339      	bcc.n	8003eb8 <Running+0x110>
			{
				previousMillis  = previousMillis;
 8003e44:	4b9c      	ldr	r3, [pc, #624]	; (80040b8 <Running+0x310>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a9b      	ldr	r2, [pc, #620]	; (80040b8 <Running+0x310>)
 8003e4a:	6013      	str	r3, [r2, #0]
				rateLeft = (countLeft - countLeft_prv)*1345/374;
 8003e4c:	4b9b      	ldr	r3, [pc, #620]	; (80040bc <Running+0x314>)
 8003e4e:	881b      	ldrh	r3, [r3, #0]
 8003e50:	b21b      	sxth	r3, r3
 8003e52:	461a      	mov	r2, r3
 8003e54:	4b9a      	ldr	r3, [pc, #616]	; (80040c0 <Running+0x318>)
 8003e56:	881b      	ldrh	r3, [r3, #0]
 8003e58:	b21b      	sxth	r3, r3
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	f240 5241 	movw	r2, #1345	; 0x541
 8003e60:	fb02 f303 	mul.w	r3, r2, r3
 8003e64:	4a97      	ldr	r2, [pc, #604]	; (80040c4 <Running+0x31c>)
 8003e66:	fb82 1203 	smull	r1, r2, r2, r3
 8003e6a:	441a      	add	r2, r3
 8003e6c:	1212      	asrs	r2, r2, #8
 8003e6e:	17db      	asrs	r3, r3, #31
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	b21a      	sxth	r2, r3
 8003e74:	4b94      	ldr	r3, [pc, #592]	; (80040c8 <Running+0x320>)
 8003e76:	801a      	strh	r2, [r3, #0]
				rateRight = (countRight - countRight_prv)*1345/374;
 8003e78:	4b94      	ldr	r3, [pc, #592]	; (80040cc <Running+0x324>)
 8003e7a:	881b      	ldrh	r3, [r3, #0]
 8003e7c:	b21b      	sxth	r3, r3
 8003e7e:	461a      	mov	r2, r3
 8003e80:	4b93      	ldr	r3, [pc, #588]	; (80040d0 <Running+0x328>)
 8003e82:	881b      	ldrh	r3, [r3, #0]
 8003e84:	b21b      	sxth	r3, r3
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	f240 5241 	movw	r2, #1345	; 0x541
 8003e8c:	fb02 f303 	mul.w	r3, r2, r3
 8003e90:	4a8c      	ldr	r2, [pc, #560]	; (80040c4 <Running+0x31c>)
 8003e92:	fb82 1203 	smull	r1, r2, r2, r3
 8003e96:	441a      	add	r2, r3
 8003e98:	1212      	asrs	r2, r2, #8
 8003e9a:	17db      	asrs	r3, r3, #31
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	b21a      	sxth	r2, r3
 8003ea0:	4b8c      	ldr	r3, [pc, #560]	; (80040d4 <Running+0x32c>)
 8003ea2:	801a      	strh	r2, [r3, #0]
				countLeft_prv = countLeft;
 8003ea4:	4b85      	ldr	r3, [pc, #532]	; (80040bc <Running+0x314>)
 8003ea6:	881b      	ldrh	r3, [r3, #0]
 8003ea8:	b21a      	sxth	r2, r3
 8003eaa:	4b85      	ldr	r3, [pc, #532]	; (80040c0 <Running+0x318>)
 8003eac:	801a      	strh	r2, [r3, #0]
				countRight_prv = countRight;
 8003eae:	4b87      	ldr	r3, [pc, #540]	; (80040cc <Running+0x324>)
 8003eb0:	881b      	ldrh	r3, [r3, #0]
 8003eb2:	b21a      	sxth	r2, r3
 8003eb4:	4b86      	ldr	r3, [pc, #536]	; (80040d0 <Running+0x328>)
 8003eb6:	801a      	strh	r2, [r3, #0]
			}
			Sensor_Convert_A2D();
 8003eb8:	f000 fada 	bl	8004470 <Sensor_Convert_A2D>
			Go_Straight();
 8003ebc:	f000 f9ea 	bl	8004294 <Go_Straight>
			Temp_Line = (LineDetect & 0b10000100);
 8003ec0:	4b85      	ldr	r3, [pc, #532]	; (80040d8 <Running+0x330>)
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	f023 037b 	bic.w	r3, r3, #123	; 0x7b
 8003ec8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			if(Temp_Line == 0b10000000 || Temp_Line == 0b00000100 || Temp_Line == 0b10000100)
 8003ecc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003ed0:	2b80      	cmp	r3, #128	; 0x80
 8003ed2:	d007      	beq.n	8003ee4 <Running+0x13c>
 8003ed4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003ed8:	2b04      	cmp	r3, #4
 8003eda:	d003      	beq.n	8003ee4 <Running+0x13c>
 8003edc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003ee0:	2b84      	cmp	r3, #132	; 0x84
 8003ee2:	d13a      	bne.n	8003f5a <Running+0x1b2>
			{
				Sensor_Convert_A2D();
 8003ee4:	f000 fac4 	bl	8004470 <Sensor_Convert_A2D>
				Previous_Line = LINE_HALF_BLACK;
 8003ee8:	4b71      	ldr	r3, [pc, #452]	; (80040b0 <Running+0x308>)
 8003eea:	2201      	movs	r2, #1
 8003eec:	701a      	strb	r2, [r3, #0]
				if(point_passed == Max_point - 1)
 8003eee:	f997 204f 	ldrsb.w	r2, [r7, #79]	; 0x4f
 8003ef2:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d116      	bne.n	8003f2a <Running+0x182>
				{
					Max_point = 0;
 8003efc:	2300      	movs	r3, #0
 8003efe:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
					First_point = Last_point;
 8003f02:	4b67      	ldr	r3, [pc, #412]	; (80040a0 <Running+0x2f8>)
 8003f04:	f993 2000 	ldrsb.w	r2, [r3]
 8003f08:	4b64      	ldr	r3, [pc, #400]	; (800409c <Running+0x2f4>)
 8003f0a:	701a      	strb	r2, [r3, #0]
					Previous_point = Map_Point[Max_point_temp - 2];
 8003f0c:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 8003f10:	3b02      	subs	r3, #2
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003f18:	4413      	add	r3, r2
 8003f1a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003f1e:	b25a      	sxtb	r2, r3
 8003f20:	4b60      	ldr	r3, [pc, #384]	; (80040a4 <Running+0x2fc>)
 8003f22:	701a      	strb	r2, [r3, #0]
					cancel_running = 0;
 8003f24:	4b6d      	ldr	r3, [pc, #436]	; (80040dc <Running+0x334>)
 8003f26:	2200      	movs	r2, #0
 8003f28:	701a      	strb	r2, [r3, #0]
				}
				if(Spin_once == 0 && (Turn_Instruction[0] == TURN_180DEG_LEFT || Turn_Instruction[0] == TURN_180DEG_RIGHT || Turn_Instruction[0] == TURN_180DEG_STRAIGHT))
 8003f2a:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	f040 80e6 	bne.w	8004100 <Running+0x358>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2b05      	cmp	r3, #5
 8003f38:	d006      	beq.n	8003f48 <Running+0x1a0>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d003      	beq.n	8003f48 <Running+0x1a0>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	f040 80dc 	bne.w	8004100 <Running+0x358>
				{
					Turn_180_Deg();
 8003f48:	f000 f97e 	bl	8004248 <Turn_180_Deg>
					Previous_Line = LINE_HALF_BLACK;
 8003f4c:	4b58      	ldr	r3, [pc, #352]	; (80040b0 <Running+0x308>)
 8003f4e:	2201      	movs	r2, #1
 8003f50:	701a      	strb	r2, [r3, #0]
					Spin_once = 1;
 8003f52:	2301      	movs	r3, #1
 8003f54:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
				if(Spin_once == 0 && (Turn_Instruction[0] == TURN_180DEG_LEFT || Turn_Instruction[0] == TURN_180DEG_RIGHT || Turn_Instruction[0] == TURN_180DEG_STRAIGHT))
 8003f58:	e0d2      	b.n	8004100 <Running+0x358>
				}
			}

		/* Truong hop xe chay line giua ---------------------------------------*/
			else if (Temp_Line == 0b00000000)
 8003f5a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	f040 80cf 	bne.w	8004102 <Running+0x35a>
			{
				if (Previous_Line == LINE_HALF_BLACK)
 8003f64:	4b52      	ldr	r3, [pc, #328]	; (80040b0 <Running+0x308>)
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d147      	bne.n	8003ffc <Running+0x254>
				{
					Sensor_Convert_A2D();
 8003f6c:	f000 fa80 	bl	8004470 <Sensor_Convert_A2D>
					Go_Straight();
 8003f70:	f000 f990 	bl	8004294 <Go_Straight>
					point_passed = point_passed + 1;
 8003f74:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003f78:	3301      	adds	r3, #1
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

/*Step procesing BEGIN here */
					if(point_passed < Max_point)
 8003f80:	f997 204f 	ldrsb.w	r2, [r7, #79]	; 0x4f
 8003f84:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	da32      	bge.n	8003ff2 <Running+0x24a>
					{
						switch(Instruction[point_passed])
 8003f8c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003f96:	4413      	add	r3, r2
 8003f98:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003f9c:	2b07      	cmp	r3, #7
 8003f9e:	d829      	bhi.n	8003ff4 <Running+0x24c>
 8003fa0:	a201      	add	r2, pc, #4	; (adr r2, 8003fa8 <Running+0x200>)
 8003fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa6:	bf00      	nop
 8003fa8:	08003fdb 	.word	0x08003fdb
 8003fac:	08003fed 	.word	0x08003fed
 8003fb0:	08003fe7 	.word	0x08003fe7
 8003fb4:	08003fd5 	.word	0x08003fd5
 8003fb8:	08003fcf 	.word	0x08003fcf
 8003fbc:	08003fe1 	.word	0x08003fe1
 8003fc0:	08003ff5 	.word	0x08003ff5
 8003fc4:	08003fc9 	.word	0x08003fc9
						{
						case TURN_SKIP_POINT:
							Go_Straight();
 8003fc8:	f000 f964 	bl	8004294 <Go_Straight>
							break;
 8003fcc:	e012      	b.n	8003ff4 <Running+0x24c>
						case TURN_LEFT:
							Left_Turn();
 8003fce:	f000 f8ef 	bl	80041b0 <Left_Turn>
							break;
 8003fd2:	e00f      	b.n	8003ff4 <Running+0x24c>
						case TURN_RIGHT:
							Right_Turn();
 8003fd4:	f000 f912 	bl	80041fc <Right_Turn>
							break;
 8003fd8:	e00c      	b.n	8003ff4 <Running+0x24c>
						case TURN_SKIP:
							Go_Straight();
 8003fda:	f000 f95b 	bl	8004294 <Go_Straight>
							break;
 8003fde:	e009      	b.n	8003ff4 <Running+0x24c>
						case TURN_180DEG_LEFT:
							Left_Turn();
 8003fe0:	f000 f8e6 	bl	80041b0 <Left_Turn>
							break;
 8003fe4:	e006      	b.n	8003ff4 <Running+0x24c>
						case TURN_180DEG_RIGHT:
							Right_Turn();
 8003fe6:	f000 f909 	bl	80041fc <Right_Turn>
							break;
 8003fea:	e003      	b.n	8003ff4 <Running+0x24c>
						case TURN_180DEG_STRAIGHT:
							Go_Straight();
 8003fec:	f000 f952 	bl	8004294 <Go_Straight>
							break;
 8003ff0:	e000      	b.n	8003ff4 <Running+0x24c>
						}
					}
 8003ff2:	bf00      	nop

/*Step procesing END here */
					Previous_Line = LINE_MIDDLE;
 8003ff4:	4b2e      	ldr	r3, [pc, #184]	; (80040b0 <Running+0x308>)
 8003ff6:	2203      	movs	r2, #3
 8003ff8:	701a      	strb	r2, [r3, #0]
 8003ffa:	e082      	b.n	8004102 <Running+0x35a>
				}

				else if(Previous_Line == LINE_MIDDLE)
 8003ffc:	4b2c      	ldr	r3, [pc, #176]	; (80040b0 <Running+0x308>)
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	2b03      	cmp	r3, #3
 8004002:	d17e      	bne.n	8004102 <Running+0x35a>
				{
				Sensor_Convert_A2D();
 8004004:	f000 fa34 	bl	8004470 <Sensor_Convert_A2D>
				Error_Val = Error_Return(LineDetect);
 8004008:	4b33      	ldr	r3, [pc, #204]	; (80040d8 <Running+0x330>)
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	4618      	mov	r0, r3
 800400e:	f000 f993 	bl	8004338 <Error_Return>
 8004012:	4603      	mov	r3, r0
 8004014:	4a32      	ldr	r2, [pc, #200]	; (80040e0 <Running+0x338>)
 8004016:	6013      	str	r3, [r2, #0]
				int16_t PID_Val = Line_Follower_PID(3500,Error_Return(LineDetect),&Car);
 8004018:	4b2f      	ldr	r3, [pc, #188]	; (80040d8 <Running+0x330>)
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	4618      	mov	r0, r3
 800401e:	f000 f98b 	bl	8004338 <Error_Return>
 8004022:	4603      	mov	r3, r0
 8004024:	4a2f      	ldr	r2, [pc, #188]	; (80040e4 <Running+0x33c>)
 8004026:	4619      	mov	r1, r3
 8004028:	f640 50ac 	movw	r0, #3500	; 0xdac
 800402c:	f7ff f838 	bl	80030a0 <Line_Follower_PID>
 8004030:	4603      	mov	r3, r0
 8004032:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
				Motor_Speed_R = (Right + PID_Val);
 8004036:	4b2c      	ldr	r3, [pc, #176]	; (80040e8 <Running+0x340>)
 8004038:	f9b3 3000 	ldrsh.w	r3, [r3]
 800403c:	461a      	mov	r2, r3
 800403e:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8004042:	4413      	add	r3, r2
 8004044:	4a29      	ldr	r2, [pc, #164]	; (80040ec <Running+0x344>)
 8004046:	6013      	str	r3, [r2, #0]
				Motor_Speed_L = (Left - PID_Val);
 8004048:	4b29      	ldr	r3, [pc, #164]	; (80040f0 <Running+0x348>)
 800404a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800404e:	461a      	mov	r2, r3
 8004050:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	4a27      	ldr	r2, [pc, #156]	; (80040f4 <Running+0x34c>)
 8004058:	6013      	str	r3, [r2, #0]
				Motor_Speed_R = Constraint(Motor_Speed_R, -MAXSPEED_RIGHT,MAXSPEED_RIGHT);
 800405a:	4b24      	ldr	r3, [pc, #144]	; (80040ec <Running+0x344>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f640 42e4 	movw	r2, #3300	; 0xce4
 8004062:	4925      	ldr	r1, [pc, #148]	; (80040f8 <Running+0x350>)
 8004064:	4618      	mov	r0, r3
 8004066:	f000 f9e5 	bl	8004434 <Constraint>
 800406a:	4603      	mov	r3, r0
 800406c:	4a1f      	ldr	r2, [pc, #124]	; (80040ec <Running+0x344>)
 800406e:	6013      	str	r3, [r2, #0]
				Motor_Speed_L = Constraint(Motor_Speed_L, -MAXSPEED_LEFT,MAXSPEED_LEFT);
 8004070:	4b20      	ldr	r3, [pc, #128]	; (80040f4 <Running+0x34c>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f640 52a2 	movw	r2, #3490	; 0xda2
 8004078:	4920      	ldr	r1, [pc, #128]	; (80040fc <Running+0x354>)
 800407a:	4618      	mov	r0, r3
 800407c:	f000 f9da 	bl	8004434 <Constraint>
 8004080:	4603      	mov	r3, r0
 8004082:	4a1c      	ldr	r2, [pc, #112]	; (80040f4 <Running+0x34c>)
 8004084:	6013      	str	r3, [r2, #0]
				MotorR_SetPWM(Motor_Speed_R);
 8004086:	4b19      	ldr	r3, [pc, #100]	; (80040ec <Running+0x344>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4618      	mov	r0, r3
 800408c:	f7fe f88e 	bl	80021ac <MotorR_SetPWM>
				MotorL_SetPWM(Motor_Speed_L);
 8004090:	4b18      	ldr	r3, [pc, #96]	; (80040f4 <Running+0x34c>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4618      	mov	r0, r3
 8004096:	f7fe f853 	bl	8002140 <MotorL_SetPWM>
 800409a:	e032      	b.n	8004102 <Running+0x35a>
 800409c:	2000026e 	.word	0x2000026e
 80040a0:	2000026f 	.word	0x2000026f
 80040a4:	2000000a 	.word	0x2000000a
 80040a8:	0800f550 	.word	0x0800f550
 80040ac:	0800f568 	.word	0x0800f568
 80040b0:	20000009 	.word	0x20000009
 80040b4:	20000280 	.word	0x20000280
 80040b8:	20000284 	.word	0x20000284
 80040bc:	20000270 	.word	0x20000270
 80040c0:	20000274 	.word	0x20000274
 80040c4:	af3addc7 	.word	0xaf3addc7
 80040c8:	20000278 	.word	0x20000278
 80040cc:	20000272 	.word	0x20000272
 80040d0:	20000276 	.word	0x20000276
 80040d4:	2000027a 	.word	0x2000027a
 80040d8:	20000264 	.word	0x20000264
 80040dc:	20000006 	.word	0x20000006
 80040e0:	200004c4 	.word	0x200004c4
 80040e4:	20000024 	.word	0x20000024
 80040e8:	2000000e 	.word	0x2000000e
 80040ec:	20000730 	.word	0x20000730
 80040f0:	2000000c 	.word	0x2000000c
 80040f4:	2000072c 	.word	0x2000072c
 80040f8:	fffff31c 	.word	0xfffff31c
 80040fc:	fffff25e 	.word	0xfffff25e
				if(Spin_once == 0 && (Turn_Instruction[0] == TURN_180DEG_LEFT || Turn_Instruction[0] == TURN_180DEG_RIGHT || Turn_Instruction[0] == TURN_180DEG_STRAIGHT))
 8004100:	bf00      	nop
				}
			}

			if(Status == 0)
 8004102:	4b22      	ldr	r3, [pc, #136]	; (800418c <Running+0x3e4>)
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d10f      	bne.n	800412a <Running+0x382>
			{
				Trans_flag = DATA_TRANS_DIS;
 800410a:	4b21      	ldr	r3, [pc, #132]	; (8004190 <Running+0x3e8>)
 800410c:	2200      	movs	r2, #0
 800410e:	701a      	strb	r2, [r3, #0]
				lcd_send_cmd(0x80 | 0x00);
 8004110:	2080      	movs	r0, #128	; 0x80
 8004112:	f7fd ff3b 	bl	8001f8c <lcd_send_cmd>
				lcd_send_string("Car is Pause        ");
 8004116:	481f      	ldr	r0, [pc, #124]	; (8004194 <Running+0x3ec>)
 8004118:	f7fd ffe9 	bl	80020ee <lcd_send_string>
				MotorR_SetPWM(0);
 800411c:	2000      	movs	r0, #0
 800411e:	f7fe f845 	bl	80021ac <MotorR_SetPWM>
				MotorL_SetPWM(0);
 8004122:	2000      	movs	r0, #0
 8004124:	f7fe f80c 	bl	8002140 <MotorL_SetPWM>
 8004128:	e01e      	b.n	8004168 <Running+0x3c0>
			}
			else
			{
				Trans_flag = DATA_TRANS_EN;
 800412a:	4b19      	ldr	r3, [pc, #100]	; (8004190 <Running+0x3e8>)
 800412c:	2201      	movs	r2, #1
 800412e:	701a      	strb	r2, [r3, #0]
				lcd_send_cmd(0x80 | 0x00);
 8004130:	2080      	movs	r0, #128	; 0x80
 8004132:	f7fd ff2b 	bl	8001f8c <lcd_send_cmd>
				lcd_send_string("Car is Running!        ");
 8004136:	4818      	ldr	r0, [pc, #96]	; (8004198 <Running+0x3f0>)
 8004138:	f7fd ffd9 	bl	80020ee <lcd_send_string>
				MotorR_SetPWM(Motor_Speed_R);
 800413c:	4b17      	ldr	r3, [pc, #92]	; (800419c <Running+0x3f4>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4618      	mov	r0, r3
 8004142:	f7fe f833 	bl	80021ac <MotorR_SetPWM>
				MotorL_SetPWM(Motor_Speed_L);
 8004146:	4b16      	ldr	r3, [pc, #88]	; (80041a0 <Running+0x3f8>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4618      	mov	r0, r3
 800414c:	f7fd fff8 	bl	8002140 <MotorL_SetPWM>
 8004150:	e00a      	b.n	8004168 <Running+0x3c0>
			}
		}
		else if(Begin_solving == 0)
 8004152:	4b14      	ldr	r3, [pc, #80]	; (80041a4 <Running+0x3fc>)
 8004154:	f993 3000 	ldrsb.w	r3, [r3]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d105      	bne.n	8004168 <Running+0x3c0>
		{
			lcd_send_cmd(0x80 | 0x00);
 800415c:	2080      	movs	r0, #128	; 0x80
 800415e:	f7fd ff15 	bl	8001f8c <lcd_send_cmd>
			lcd_send_string("Input First & Last  ");
 8004162:	4811      	ldr	r0, [pc, #68]	; (80041a8 <Running+0x400>)
 8004164:	f7fd ffc3 	bl	80020ee <lcd_send_string>
	while (cancel_running) {
 8004168:	4b10      	ldr	r3, [pc, #64]	; (80041ac <Running+0x404>)
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	2b00      	cmp	r3, #0
 800416e:	f47f ae56 	bne.w	8003e1e <Running+0x76>
		}
	}
	MotorL_SetPWM(0);
 8004172:	2000      	movs	r0, #0
 8004174:	f7fd ffe4 	bl	8002140 <MotorL_SetPWM>
	MotorR_SetPWM(0);
 8004178:	2000      	movs	r0, #0
 800417a:	f7fe f817 	bl	80021ac <MotorR_SetPWM>
	lcd_clear();
 800417e:	f7fd ff65 	bl	800204c <lcd_clear>
}
 8004182:	bf00      	nop
 8004184:	3754      	adds	r7, #84	; 0x54
 8004186:	46bd      	mov	sp, r7
 8004188:	bd90      	pop	{r4, r7, pc}
 800418a:	bf00      	nop
 800418c:	20000007 	.word	0x20000007
 8004190:	2000026c 	.word	0x2000026c
 8004194:	0800f580 	.word	0x0800f580
 8004198:	0800f550 	.word	0x0800f550
 800419c:	20000730 	.word	0x20000730
 80041a0:	2000072c 	.word	0x2000072c
 80041a4:	20000280 	.word	0x20000280
 80041a8:	0800f598 	.word	0x0800f598
 80041ac:	20000006 	.word	0x20000006

080041b0 <Left_Turn>:

static void Left_Turn()
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	af00      	add	r7, sp, #0
	Sensor_Convert_A2D();
 80041b4:	f000 f95c 	bl	8004470 <Sensor_Convert_A2D>
	MotorR_SetPWM(4500);
 80041b8:	f241 1094 	movw	r0, #4500	; 0x1194
 80041bc:	f7fd fff6 	bl	80021ac <MotorR_SetPWM>
	MotorL_SetPWM(-3000);
 80041c0:	480c      	ldr	r0, [pc, #48]	; (80041f4 <Left_Turn+0x44>)
 80041c2:	f7fd ffbd 	bl	8002140 <MotorL_SetPWM>
	HAL_Delay(100);
 80041c6:	2064      	movs	r0, #100	; 0x64
 80041c8:	f001 f9c8 	bl	800555c <HAL_Delay>

	while((LineDetect & 0b11000000) <= 64)
 80041cc:	e001      	b.n	80041d2 <Left_Turn+0x22>
	{
		Sensor_Convert_A2D();
 80041ce:	f000 f94f 	bl	8004470 <Sensor_Convert_A2D>
	while((LineDetect & 0b11000000) <= 64)
 80041d2:	4b09      	ldr	r3, [pc, #36]	; (80041f8 <Left_Turn+0x48>)
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80041da:	2b40      	cmp	r3, #64	; 0x40
 80041dc:	ddf7      	ble.n	80041ce <Left_Turn+0x1e>
	}
	while(LineDetect != 0b00010000)
 80041de:	e001      	b.n	80041e4 <Left_Turn+0x34>
	{
		Sensor_Convert_A2D();
 80041e0:	f000 f946 	bl	8004470 <Sensor_Convert_A2D>
	while(LineDetect != 0b00010000)
 80041e4:	4b04      	ldr	r3, [pc, #16]	; (80041f8 <Left_Turn+0x48>)
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	2b10      	cmp	r3, #16
 80041ea:	d1f9      	bne.n	80041e0 <Left_Turn+0x30>
	}
}
 80041ec:	bf00      	nop
 80041ee:	bf00      	nop
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	fffff448 	.word	0xfffff448
 80041f8:	20000264 	.word	0x20000264

080041fc <Right_Turn>:
static void Right_Turn()
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	af00      	add	r7, sp, #0
	Sensor_Convert_A2D();
 8004200:	f000 f936 	bl	8004470 <Sensor_Convert_A2D>
	MotorL_SetPWM(5400);
 8004204:	f241 5018 	movw	r0, #5400	; 0x1518
 8004208:	f7fd ff9a 	bl	8002140 <MotorL_SetPWM>
	MotorR_SetPWM(-3900);
 800420c:	480b      	ldr	r0, [pc, #44]	; (800423c <Right_Turn+0x40>)
 800420e:	f7fd ffcd 	bl	80021ac <MotorR_SetPWM>
	while((LineDetect & 0b00001100) <= 8)
 8004212:	e001      	b.n	8004218 <Right_Turn+0x1c>
	{
		Sensor_Convert_A2D();
 8004214:	f000 f92c 	bl	8004470 <Sensor_Convert_A2D>
	while((LineDetect & 0b00001100) <= 8)
 8004218:	4b09      	ldr	r3, [pc, #36]	; (8004240 <Right_Turn+0x44>)
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	f003 030c 	and.w	r3, r3, #12
 8004220:	2b08      	cmp	r3, #8
 8004222:	ddf7      	ble.n	8004214 <Right_Turn+0x18>
	}
	while(LineDetect != 0b00010000)
 8004224:	e001      	b.n	800422a <Right_Turn+0x2e>
	{
		Sensor_Convert_A2D();
 8004226:	f000 f923 	bl	8004470 <Sensor_Convert_A2D>
	while(LineDetect != 0b00010000)
 800422a:	4b05      	ldr	r3, [pc, #20]	; (8004240 <Right_Turn+0x44>)
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	2b10      	cmp	r3, #16
 8004230:	d1f9      	bne.n	8004226 <Right_Turn+0x2a>
	}
	Flag_u8 = LINE_MIDDLE;
 8004232:	4b04      	ldr	r3, [pc, #16]	; (8004244 <Right_Turn+0x48>)
 8004234:	2203      	movs	r2, #3
 8004236:	701a      	strb	r2, [r3, #0]
}
 8004238:	bf00      	nop
 800423a:	bd80      	pop	{r7, pc}
 800423c:	fffff0c4 	.word	0xfffff0c4
 8004240:	20000264 	.word	0x20000264
 8004244:	2000026d 	.word	0x2000026d

08004248 <Turn_180_Deg>:
static void Turn_180_Deg()
{
 8004248:	b580      	push	{r7, lr}
 800424a:	af00      	add	r7, sp, #0
	MotorL_SetPWM(6200);
 800424c:	f641 0038 	movw	r0, #6200	; 0x1838
 8004250:	f7fd ff76 	bl	8002140 <MotorL_SetPWM>
	MotorR_SetPWM(-6200);
 8004254:	480d      	ldr	r0, [pc, #52]	; (800428c <Turn_180_Deg+0x44>)
 8004256:	f7fd ffa9 	bl	80021ac <MotorR_SetPWM>
	while(LineDetect != 0b00000000)
 800425a:	e001      	b.n	8004260 <Turn_180_Deg+0x18>
	{
		Sensor_Convert_A2D();
 800425c:	f000 f908 	bl	8004470 <Sensor_Convert_A2D>
	while(LineDetect != 0b00000000)
 8004260:	4b0b      	ldr	r3, [pc, #44]	; (8004290 <Turn_180_Deg+0x48>)
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d1f9      	bne.n	800425c <Turn_180_Deg+0x14>
	}
	while(LineDetect <= 3)
 8004268:	e001      	b.n	800426e <Turn_180_Deg+0x26>
	{
		Sensor_Convert_A2D();
 800426a:	f000 f901 	bl	8004470 <Sensor_Convert_A2D>
	while(LineDetect <= 3)
 800426e:	4b08      	ldr	r3, [pc, #32]	; (8004290 <Turn_180_Deg+0x48>)
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	2b03      	cmp	r3, #3
 8004274:	d9f9      	bls.n	800426a <Turn_180_Deg+0x22>
	}
	while(LineDetect != 0b00010000)
 8004276:	e001      	b.n	800427c <Turn_180_Deg+0x34>
	{
		Sensor_Convert_A2D();
 8004278:	f000 f8fa 	bl	8004470 <Sensor_Convert_A2D>
	while(LineDetect != 0b00010000)
 800427c:	4b04      	ldr	r3, [pc, #16]	; (8004290 <Turn_180_Deg+0x48>)
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	2b10      	cmp	r3, #16
 8004282:	d1f9      	bne.n	8004278 <Turn_180_Deg+0x30>
	}
}
 8004284:	bf00      	nop
 8004286:	bf00      	nop
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	ffffe7c8 	.word	0xffffe7c8
 8004290:	20000264 	.word	0x20000264

08004294 <Go_Straight>:
static void Go_Straight()
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
	Sensor_Convert_A2D();
 800429a:	f000 f8e9 	bl	8004470 <Sensor_Convert_A2D>
	int16_t PID_Val = Line_Follower_PID(3500,3500,&Car);
 800429e:	4a1f      	ldr	r2, [pc, #124]	; (800431c <Go_Straight+0x88>)
 80042a0:	f640 51ac 	movw	r1, #3500	; 0xdac
 80042a4:	f640 50ac 	movw	r0, #3500	; 0xdac
 80042a8:	f7fe fefa 	bl	80030a0 <Line_Follower_PID>
 80042ac:	4603      	mov	r3, r0
 80042ae:	80fb      	strh	r3, [r7, #6]
	Motor_Speed_R = (Right + PID_Val);
 80042b0:	4b1b      	ldr	r3, [pc, #108]	; (8004320 <Go_Straight+0x8c>)
 80042b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042b6:	461a      	mov	r2, r3
 80042b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042bc:	4413      	add	r3, r2
 80042be:	4a19      	ldr	r2, [pc, #100]	; (8004324 <Go_Straight+0x90>)
 80042c0:	6013      	str	r3, [r2, #0]
	Motor_Speed_L = (Left - PID_Val);
 80042c2:	4b19      	ldr	r3, [pc, #100]	; (8004328 <Go_Straight+0x94>)
 80042c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042c8:	461a      	mov	r2, r3
 80042ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	4a16      	ldr	r2, [pc, #88]	; (800432c <Go_Straight+0x98>)
 80042d2:	6013      	str	r3, [r2, #0]
	Motor_Speed_R = Constraint(Motor_Speed_R, -MAXSPEED_RIGHT,MAXSPEED_RIGHT);
 80042d4:	4b13      	ldr	r3, [pc, #76]	; (8004324 <Go_Straight+0x90>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f640 42e4 	movw	r2, #3300	; 0xce4
 80042dc:	4914      	ldr	r1, [pc, #80]	; (8004330 <Go_Straight+0x9c>)
 80042de:	4618      	mov	r0, r3
 80042e0:	f000 f8a8 	bl	8004434 <Constraint>
 80042e4:	4603      	mov	r3, r0
 80042e6:	4a0f      	ldr	r2, [pc, #60]	; (8004324 <Go_Straight+0x90>)
 80042e8:	6013      	str	r3, [r2, #0]
	Motor_Speed_L = Constraint(Motor_Speed_L, -MAXSPEED_LEFT,MAXSPEED_LEFT);
 80042ea:	4b10      	ldr	r3, [pc, #64]	; (800432c <Go_Straight+0x98>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f640 52a2 	movw	r2, #3490	; 0xda2
 80042f2:	4910      	ldr	r1, [pc, #64]	; (8004334 <Go_Straight+0xa0>)
 80042f4:	4618      	mov	r0, r3
 80042f6:	f000 f89d 	bl	8004434 <Constraint>
 80042fa:	4603      	mov	r3, r0
 80042fc:	4a0b      	ldr	r2, [pc, #44]	; (800432c <Go_Straight+0x98>)
 80042fe:	6013      	str	r3, [r2, #0]
	MotorR_SetPWM(Motor_Speed_R);
 8004300:	4b08      	ldr	r3, [pc, #32]	; (8004324 <Go_Straight+0x90>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4618      	mov	r0, r3
 8004306:	f7fd ff51 	bl	80021ac <MotorR_SetPWM>
	MotorL_SetPWM(Motor_Speed_L);
 800430a:	4b08      	ldr	r3, [pc, #32]	; (800432c <Go_Straight+0x98>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4618      	mov	r0, r3
 8004310:	f7fd ff16 	bl	8002140 <MotorL_SetPWM>
}
 8004314:	bf00      	nop
 8004316:	3708      	adds	r7, #8
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}
 800431c:	20000024 	.word	0x20000024
 8004320:	2000000e 	.word	0x2000000e
 8004324:	20000730 	.word	0x20000730
 8004328:	2000000c 	.word	0x2000000c
 800432c:	2000072c 	.word	0x2000072c
 8004330:	fffff31c 	.word	0xfffff31c
 8004334:	fffff25e 	.word	0xfffff25e

08004338 <Error_Return>:
static int Error_Return (uint8_t Sensor_Array){
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	4603      	mov	r3, r0
 8004340:	71fb      	strb	r3, [r7, #7]
	switch(Sensor_Array){
 8004342:	79fb      	ldrb	r3, [r7, #7]
 8004344:	2b60      	cmp	r3, #96	; 0x60
 8004346:	d066      	beq.n	8004416 <Error_Return+0xde>
 8004348:	2b60      	cmp	r3, #96	; 0x60
 800434a:	dc6a      	bgt.n	8004422 <Error_Return+0xea>
 800434c:	2b40      	cmp	r3, #64	; 0x40
 800434e:	d065      	beq.n	800441c <Error_Return+0xe4>
 8004350:	2b40      	cmp	r3, #64	; 0x40
 8004352:	dc66      	bgt.n	8004422 <Error_Return+0xea>
 8004354:	2b20      	cmp	r3, #32
 8004356:	dc49      	bgt.n	80043ec <Error_Return+0xb4>
 8004358:	2b00      	cmp	r3, #0
 800435a:	db62      	blt.n	8004422 <Error_Return+0xea>
 800435c:	2b20      	cmp	r3, #32
 800435e:	d860      	bhi.n	8004422 <Error_Return+0xea>
 8004360:	a201      	add	r2, pc, #4	; (adr r2, 8004368 <Error_Return+0x30>)
 8004362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004366:	bf00      	nop
 8004368:	08004405 	.word	0x08004405
 800436c:	08004423 	.word	0x08004423
 8004370:	08004423 	.word	0x08004423
 8004374:	08004423 	.word	0x08004423
 8004378:	08004423 	.word	0x08004423
 800437c:	08004423 	.word	0x08004423
 8004380:	08004423 	.word	0x08004423
 8004384:	08004423 	.word	0x08004423
 8004388:	080043f3 	.word	0x080043f3
 800438c:	08004423 	.word	0x08004423
 8004390:	08004423 	.word	0x08004423
 8004394:	08004423 	.word	0x08004423
 8004398:	08004423 	.word	0x08004423
 800439c:	08004423 	.word	0x08004423
 80043a0:	08004423 	.word	0x08004423
 80043a4:	08004423 	.word	0x08004423
 80043a8:	080043ff 	.word	0x080043ff
 80043ac:	08004423 	.word	0x08004423
 80043b0:	08004423 	.word	0x08004423
 80043b4:	08004423 	.word	0x08004423
 80043b8:	08004423 	.word	0x08004423
 80043bc:	08004423 	.word	0x08004423
 80043c0:	08004423 	.word	0x08004423
 80043c4:	08004423 	.word	0x08004423
 80043c8:	080043f9 	.word	0x080043f9
 80043cc:	08004423 	.word	0x08004423
 80043d0:	08004423 	.word	0x08004423
 80043d4:	08004423 	.word	0x08004423
 80043d8:	08004423 	.word	0x08004423
 80043dc:	08004423 	.word	0x08004423
 80043e0:	08004423 	.word	0x08004423
 80043e4:	08004423 	.word	0x08004423
 80043e8:	08004411 	.word	0x08004411
 80043ec:	2b30      	cmp	r3, #48	; 0x30
 80043ee:	d00c      	beq.n	800440a <Error_Return+0xd2>
 80043f0:	e017      	b.n	8004422 <Error_Return+0xea>
	case 0b00001000:
		return 4300;
 80043f2:	f241 03cc 	movw	r3, #4300	; 0x10cc
 80043f6:	e016      	b.n	8004426 <Error_Return+0xee>
		break;
	case 0b00011000:
		return 4000;
 80043f8:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80043fc:	e013      	b.n	8004426 <Error_Return+0xee>
		break;

	case 0b00010000:
		return 3800;
 80043fe:	f640 63d8 	movw	r3, #3800	; 0xed8
 8004402:	e010      	b.n	8004426 <Error_Return+0xee>
		break;

	case 0b00000000:
		return 3500;
 8004404:	f640 53ac 	movw	r3, #3500	; 0xdac
 8004408:	e00d      	b.n	8004426 <Error_Return+0xee>
		break;

	case 0b00110000:
		return 3500;
 800440a:	f640 53ac 	movw	r3, #3500	; 0xdac
 800440e:	e00a      	b.n	8004426 <Error_Return+0xee>
		break;

	case 0b00100000:
		return 3400;
 8004410:	f640 5348 	movw	r3, #3400	; 0xd48
 8004414:	e007      	b.n	8004426 <Error_Return+0xee>
		break;

	case 0b01100000:
		return 3000;
 8004416:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800441a:	e004      	b.n	8004426 <Error_Return+0xee>
		break;
	case 0b01000000:
		return 2600;
 800441c:	f640 2328 	movw	r3, #2600	; 0xa28
 8004420:	e001      	b.n	8004426 <Error_Return+0xee>
		break;
/*---------------------dont care------------------------*/
	default:
		return 3500;
 8004422:	f640 53ac 	movw	r3, #3500	; 0xdac
		break;
	}
}
 8004426:	4618      	mov	r0, r3
 8004428:	370c      	adds	r7, #12
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop

08004434 <Constraint>:
static int Constraint (int Present_Value,int Min,int Max){
 8004434:	b480      	push	{r7}
 8004436:	b085      	sub	sp, #20
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	607a      	str	r2, [r7, #4]
	if(Present_Value > Max){
 8004440:	68fa      	ldr	r2, [r7, #12]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	429a      	cmp	r2, r3
 8004446:	dd03      	ble.n	8004450 <Constraint+0x1c>
		return Present_Value = Max;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	60fb      	str	r3, [r7, #12]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	e008      	b.n	8004462 <Constraint+0x2e>
	}
	else if (Present_Value < Min ){
 8004450:	68fa      	ldr	r2, [r7, #12]
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	429a      	cmp	r2, r3
 8004456:	da03      	bge.n	8004460 <Constraint+0x2c>
		return Present_Value = Min;
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	60fb      	str	r3, [r7, #12]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	e000      	b.n	8004462 <Constraint+0x2e>
	}
	else
		return Present_Value;
 8004460:	68fb      	ldr	r3, [r7, #12]
}
 8004462:	4618      	mov	r0, r3
 8004464:	3714      	adds	r7, #20
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr
	...

08004470 <Sensor_Convert_A2D>:
static void Sensor_Convert_A2D()
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
	LineDetect = 0;
 8004476:	4b16      	ldr	r3, [pc, #88]	; (80044d0 <Sensor_Convert_A2D+0x60>)
 8004478:	2200      	movs	r2, #0
 800447a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 6; ++i)
 800447c:	2300      	movs	r3, #0
 800447e:	607b      	str	r3, [r7, #4]
 8004480:	e01b      	b.n	80044ba <Sensor_Convert_A2D+0x4a>
	{
		if (Sensor_ADC_Value[i] < Sensor_Threshold[i])
 8004482:	4a14      	ldr	r2, [pc, #80]	; (80044d4 <Sensor_Convert_A2D+0x64>)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800448a:	4913      	ldr	r1, [pc, #76]	; (80044d8 <Sensor_Convert_A2D+0x68>)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004492:	429a      	cmp	r2, r3
 8004494:	d20e      	bcs.n	80044b4 <Sensor_Convert_A2D+0x44>
		{
			sbi(LineDetect, (7 - i));
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f1c3 0307 	rsb	r3, r3, #7
 800449c:	2201      	movs	r2, #1
 800449e:	fa02 f303 	lsl.w	r3, r2, r3
 80044a2:	b25a      	sxtb	r2, r3
 80044a4:	4b0a      	ldr	r3, [pc, #40]	; (80044d0 <Sensor_Convert_A2D+0x60>)
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	b25b      	sxtb	r3, r3
 80044aa:	4313      	orrs	r3, r2
 80044ac:	b25b      	sxtb	r3, r3
 80044ae:	b2da      	uxtb	r2, r3
 80044b0:	4b07      	ldr	r3, [pc, #28]	; (80044d0 <Sensor_Convert_A2D+0x60>)
 80044b2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 6; ++i)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	3301      	adds	r3, #1
 80044b8:	607b      	str	r3, [r7, #4]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2b05      	cmp	r3, #5
 80044be:	dde0      	ble.n	8004482 <Sensor_Convert_A2D+0x12>
//			printf("0 ");
		}
	}
//	printf("\n");
//	HAL_Delay(100);
}
 80044c0:	bf00      	nop
 80044c2:	bf00      	nop
 80044c4:	370c      	adds	r7, #12
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop
 80044d0:	20000264 	.word	0x20000264
 80044d4:	200004a8 	.word	0x200004a8
 80044d8:	20000010 	.word	0x20000010

080044dc <ScrollUp>:
		char buffer[6];
		itoa (LineDetect,buffer,2);
		printf ("binary: %s\n",buffer);
}
void ScrollUp(void)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(ButtonA_GPIO_Port, ButtonA_Pin) == 0)
 80044e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80044e4:	4883      	ldr	r0, [pc, #524]	; (80046f4 <ScrollUp+0x218>)
 80044e6:	f002 ff49 	bl	800737c <HAL_GPIO_ReadPin>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	f040 80f6 	bne.w	80046de <ScrollUp+0x202>
	{
		while (HAL_GPIO_ReadPin(ButtonA_GPIO_Port, ButtonA_Pin) == 0)
 80044f2:	e002      	b.n	80044fa <ScrollUp+0x1e>
		{
			HAL_Delay(50);
 80044f4:	2032      	movs	r0, #50	; 0x32
 80044f6:	f001 f831 	bl	800555c <HAL_Delay>
		while (HAL_GPIO_ReadPin(ButtonA_GPIO_Port, ButtonA_Pin) == 0)
 80044fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80044fe:	487d      	ldr	r0, [pc, #500]	; (80046f4 <ScrollUp+0x218>)
 8004500:	f002 ff3c 	bl	800737c <HAL_GPIO_ReadPin>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d0f4      	beq.n	80044f4 <ScrollUp+0x18>
		}
		switch (Menu_type)
 800450a:	4b7b      	ldr	r3, [pc, #492]	; (80046f8 <ScrollUp+0x21c>)
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	3b01      	subs	r3, #1
 8004510:	2b07      	cmp	r3, #7
 8004512:	f200 80ed 	bhi.w	80046f0 <ScrollUp+0x214>
 8004516:	a201      	add	r2, pc, #4	; (adr r2, 800451c <ScrollUp+0x40>)
 8004518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800451c:	0800453d 	.word	0x0800453d
 8004520:	080046f1 	.word	0x080046f1
 8004524:	0800455b 	.word	0x0800455b
 8004528:	080045df 	.word	0x080045df
 800452c:	080046f1 	.word	0x080046f1
 8004530:	080046f1 	.word	0x080046f1
 8004534:	080046f1 	.word	0x080046f1
 8004538:	08004663 	.word	0x08004663
		{
		case Main_menu:
			line--;
 800453c:	4b6f      	ldr	r3, [pc, #444]	; (80046fc <ScrollUp+0x220>)
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	3b01      	subs	r3, #1
 8004542:	b2da      	uxtb	r2, r3
 8004544:	4b6d      	ldr	r3, [pc, #436]	; (80046fc <ScrollUp+0x220>)
 8004546:	701a      	strb	r2, [r3, #0]
			if (line < Number_of_Menu_firstline)
 8004548:	4b6c      	ldr	r3, [pc, #432]	; (80046fc <ScrollUp+0x220>)
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	2b00      	cmp	r3, #0
 800454e:	f040 80c8 	bne.w	80046e2 <ScrollUp+0x206>
			{
				line = Maximum_Menu_line;
 8004552:	4b6a      	ldr	r3, [pc, #424]	; (80046fc <ScrollUp+0x220>)
 8004554:	2208      	movs	r2, #8
 8004556:	701a      	strb	r2, [r3, #0]
			}
			break;
 8004558:	e0c3      	b.n	80046e2 <ScrollUp+0x206>
		case PID_Menu:
			line--;
 800455a:	4b68      	ldr	r3, [pc, #416]	; (80046fc <ScrollUp+0x220>)
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	3b01      	subs	r3, #1
 8004560:	b2da      	uxtb	r2, r3
 8004562:	4b66      	ldr	r3, [pc, #408]	; (80046fc <ScrollUp+0x220>)
 8004564:	701a      	strb	r2, [r3, #0]
			if (line < Number_of_Menu_firstline)
 8004566:	4b65      	ldr	r3, [pc, #404]	; (80046fc <ScrollUp+0x220>)
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d102      	bne.n	8004574 <ScrollUp+0x98>
			{
				line = Maximum_PID_line;
 800456e:	4b63      	ldr	r3, [pc, #396]	; (80046fc <ScrollUp+0x220>)
 8004570:	2204      	movs	r2, #4
 8004572:	701a      	strb	r2, [r3, #0]
			}
			if (Kp_modify_flag == 1)
 8004574:	4b62      	ldr	r3, [pc, #392]	; (8004700 <ScrollUp+0x224>)
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	2b01      	cmp	r3, #1
 800457a:	d10c      	bne.n	8004596 <ScrollUp+0xba>
			{
				Kp += Kp_amount;
 800457c:	4b61      	ldr	r3, [pc, #388]	; (8004704 <ScrollUp+0x228>)
 800457e:	edd3 7a00 	vldr	s15, [r3]
 8004582:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8004708 <ScrollUp+0x22c>
 8004586:	ee77 7a87 	vadd.f32	s15, s15, s14
 800458a:	4b5e      	ldr	r3, [pc, #376]	; (8004704 <ScrollUp+0x228>)
 800458c:	edc3 7a00 	vstr	s15, [r3]
				line = 1;
 8004590:	4b5a      	ldr	r3, [pc, #360]	; (80046fc <ScrollUp+0x220>)
 8004592:	2201      	movs	r2, #1
 8004594:	701a      	strb	r2, [r3, #0]
			}
			if (Ki_modify_flag == 1)
 8004596:	4b5d      	ldr	r3, [pc, #372]	; (800470c <ScrollUp+0x230>)
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	2b01      	cmp	r3, #1
 800459c:	d10c      	bne.n	80045b8 <ScrollUp+0xdc>
			{
				Ki += Ki_amount;
 800459e:	4b5c      	ldr	r3, [pc, #368]	; (8004710 <ScrollUp+0x234>)
 80045a0:	edd3 7a00 	vldr	s15, [r3]
 80045a4:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8004708 <ScrollUp+0x22c>
 80045a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80045ac:	4b58      	ldr	r3, [pc, #352]	; (8004710 <ScrollUp+0x234>)
 80045ae:	edc3 7a00 	vstr	s15, [r3]
				line = 2;
 80045b2:	4b52      	ldr	r3, [pc, #328]	; (80046fc <ScrollUp+0x220>)
 80045b4:	2202      	movs	r2, #2
 80045b6:	701a      	strb	r2, [r3, #0]
			}
			if (Kd_modify_flag == 1)
 80045b8:	4b56      	ldr	r3, [pc, #344]	; (8004714 <ScrollUp+0x238>)
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	2b01      	cmp	r3, #1
 80045be:	f040 8092 	bne.w	80046e6 <ScrollUp+0x20a>
			{
				Kd += Kd_amount;
 80045c2:	4b55      	ldr	r3, [pc, #340]	; (8004718 <ScrollUp+0x23c>)
 80045c4:	edd3 7a00 	vldr	s15, [r3]
 80045c8:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8004708 <ScrollUp+0x22c>
 80045cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80045d0:	4b51      	ldr	r3, [pc, #324]	; (8004718 <ScrollUp+0x23c>)
 80045d2:	edc3 7a00 	vstr	s15, [r3]
				line = 3;
 80045d6:	4b49      	ldr	r3, [pc, #292]	; (80046fc <ScrollUp+0x220>)
 80045d8:	2203      	movs	r2, #3
 80045da:	701a      	strb	r2, [r3, #0]
			}
			break;
 80045dc:	e083      	b.n	80046e6 <ScrollUp+0x20a>
		case Engine_menu:
			line--;
 80045de:	4b47      	ldr	r3, [pc, #284]	; (80046fc <ScrollUp+0x220>)
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	3b01      	subs	r3, #1
 80045e4:	b2da      	uxtb	r2, r3
 80045e6:	4b45      	ldr	r3, [pc, #276]	; (80046fc <ScrollUp+0x220>)
 80045e8:	701a      	strb	r2, [r3, #0]
			if (line < Number_of_Menu_firstline)
 80045ea:	4b44      	ldr	r3, [pc, #272]	; (80046fc <ScrollUp+0x220>)
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d102      	bne.n	80045f8 <ScrollUp+0x11c>
			{
				line = Maximum_Engine_line;
 80045f2:	4b42      	ldr	r3, [pc, #264]	; (80046fc <ScrollUp+0x220>)
 80045f4:	2203      	movs	r2, #3
 80045f6:	701a      	strb	r2, [r3, #0]
			}
			if (Left_modify_flag == 1)
 80045f8:	4b48      	ldr	r3, [pc, #288]	; (800471c <ScrollUp+0x240>)
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d115      	bne.n	800462c <ScrollUp+0x150>
			{
				Left += 100;
 8004600:	4b47      	ldr	r3, [pc, #284]	; (8004720 <ScrollUp+0x244>)
 8004602:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004606:	b29b      	uxth	r3, r3
 8004608:	3364      	adds	r3, #100	; 0x64
 800460a:	b29b      	uxth	r3, r3
 800460c:	b21a      	sxth	r2, r3
 800460e:	4b44      	ldr	r3, [pc, #272]	; (8004720 <ScrollUp+0x244>)
 8004610:	801a      	strh	r2, [r3, #0]
				line = 1;
 8004612:	4b3a      	ldr	r3, [pc, #232]	; (80046fc <ScrollUp+0x220>)
 8004614:	2201      	movs	r2, #1
 8004616:	701a      	strb	r2, [r3, #0]
				if (Left >= 7200)
 8004618:	4b41      	ldr	r3, [pc, #260]	; (8004720 <ScrollUp+0x244>)
 800461a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800461e:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 8004622:	db03      	blt.n	800462c <ScrollUp+0x150>
				{
					Left = 7200;
 8004624:	4b3e      	ldr	r3, [pc, #248]	; (8004720 <ScrollUp+0x244>)
 8004626:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 800462a:	801a      	strh	r2, [r3, #0]
				}
			}
			if (Right_modify_flag == 1)
 800462c:	4b3d      	ldr	r3, [pc, #244]	; (8004724 <ScrollUp+0x248>)
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	2b01      	cmp	r3, #1
 8004632:	d15a      	bne.n	80046ea <ScrollUp+0x20e>
			{
				Right += 100;
 8004634:	4b3c      	ldr	r3, [pc, #240]	; (8004728 <ScrollUp+0x24c>)
 8004636:	f9b3 3000 	ldrsh.w	r3, [r3]
 800463a:	b29b      	uxth	r3, r3
 800463c:	3364      	adds	r3, #100	; 0x64
 800463e:	b29b      	uxth	r3, r3
 8004640:	b21a      	sxth	r2, r3
 8004642:	4b39      	ldr	r3, [pc, #228]	; (8004728 <ScrollUp+0x24c>)
 8004644:	801a      	strh	r2, [r3, #0]
				line = 2;
 8004646:	4b2d      	ldr	r3, [pc, #180]	; (80046fc <ScrollUp+0x220>)
 8004648:	2202      	movs	r2, #2
 800464a:	701a      	strb	r2, [r3, #0]
				if (Right >= 7200)
 800464c:	4b36      	ldr	r3, [pc, #216]	; (8004728 <ScrollUp+0x24c>)
 800464e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004652:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 8004656:	db48      	blt.n	80046ea <ScrollUp+0x20e>
				{
					Right = 7200;
 8004658:	4b33      	ldr	r3, [pc, #204]	; (8004728 <ScrollUp+0x24c>)
 800465a:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 800465e:	801a      	strh	r2, [r3, #0]
				}
			}
			break;
 8004660:	e043      	b.n	80046ea <ScrollUp+0x20e>
		case Path_solver:
			line--;
 8004662:	4b26      	ldr	r3, [pc, #152]	; (80046fc <ScrollUp+0x220>)
 8004664:	781b      	ldrb	r3, [r3, #0]
 8004666:	3b01      	subs	r3, #1
 8004668:	b2da      	uxtb	r2, r3
 800466a:	4b24      	ldr	r3, [pc, #144]	; (80046fc <ScrollUp+0x220>)
 800466c:	701a      	strb	r2, [r3, #0]
			if (line < Number_of_Menu_firstline)
 800466e:	4b23      	ldr	r3, [pc, #140]	; (80046fc <ScrollUp+0x220>)
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d102      	bne.n	800467c <ScrollUp+0x1a0>
			{
				line = Maximum_Path_Solver_line;
 8004676:	4b21      	ldr	r3, [pc, #132]	; (80046fc <ScrollUp+0x220>)
 8004678:	2204      	movs	r2, #4
 800467a:	701a      	strb	r2, [r3, #0]
			}
			if (First_point_modify_flag == 1)
 800467c:	4b2b      	ldr	r3, [pc, #172]	; (800472c <ScrollUp+0x250>)
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	2b01      	cmp	r3, #1
 8004682:	d113      	bne.n	80046ac <ScrollUp+0x1d0>
			{
				First_point += 1;
 8004684:	4b2a      	ldr	r3, [pc, #168]	; (8004730 <ScrollUp+0x254>)
 8004686:	f993 3000 	ldrsb.w	r3, [r3]
 800468a:	b2db      	uxtb	r3, r3
 800468c:	3301      	adds	r3, #1
 800468e:	b2db      	uxtb	r3, r3
 8004690:	b25a      	sxtb	r2, r3
 8004692:	4b27      	ldr	r3, [pc, #156]	; (8004730 <ScrollUp+0x254>)
 8004694:	701a      	strb	r2, [r3, #0]
				line = 1;
 8004696:	4b19      	ldr	r3, [pc, #100]	; (80046fc <ScrollUp+0x220>)
 8004698:	2201      	movs	r2, #1
 800469a:	701a      	strb	r2, [r3, #0]
				if(First_point>11)
 800469c:	4b24      	ldr	r3, [pc, #144]	; (8004730 <ScrollUp+0x254>)
 800469e:	f993 3000 	ldrsb.w	r3, [r3]
 80046a2:	2b0b      	cmp	r3, #11
 80046a4:	dd02      	ble.n	80046ac <ScrollUp+0x1d0>
				{
					First_point = 0;
 80046a6:	4b22      	ldr	r3, [pc, #136]	; (8004730 <ScrollUp+0x254>)
 80046a8:	2200      	movs	r2, #0
 80046aa:	701a      	strb	r2, [r3, #0]
				}
			}
			if (Last_point_modify_flag == 1)
 80046ac:	4b21      	ldr	r3, [pc, #132]	; (8004734 <ScrollUp+0x258>)
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d11c      	bne.n	80046ee <ScrollUp+0x212>
			{
				Last_point += 1;
 80046b4:	4b20      	ldr	r3, [pc, #128]	; (8004738 <ScrollUp+0x25c>)
 80046b6:	f993 3000 	ldrsb.w	r3, [r3]
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	3301      	adds	r3, #1
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	b25a      	sxtb	r2, r3
 80046c2:	4b1d      	ldr	r3, [pc, #116]	; (8004738 <ScrollUp+0x25c>)
 80046c4:	701a      	strb	r2, [r3, #0]
				line = 2;
 80046c6:	4b0d      	ldr	r3, [pc, #52]	; (80046fc <ScrollUp+0x220>)
 80046c8:	2202      	movs	r2, #2
 80046ca:	701a      	strb	r2, [r3, #0]
				if(Last_point>11)
 80046cc:	4b1a      	ldr	r3, [pc, #104]	; (8004738 <ScrollUp+0x25c>)
 80046ce:	f993 3000 	ldrsb.w	r3, [r3]
 80046d2:	2b0b      	cmp	r3, #11
 80046d4:	dd0b      	ble.n	80046ee <ScrollUp+0x212>
				{
					Last_point = 0;
 80046d6:	4b18      	ldr	r3, [pc, #96]	; (8004738 <ScrollUp+0x25c>)
 80046d8:	2200      	movs	r2, #0
 80046da:	701a      	strb	r2, [r3, #0]
				}
			}
			break;
 80046dc:	e007      	b.n	80046ee <ScrollUp+0x212>
		}
	}
 80046de:	bf00      	nop
 80046e0:	e006      	b.n	80046f0 <ScrollUp+0x214>
			break;
 80046e2:	bf00      	nop
 80046e4:	e004      	b.n	80046f0 <ScrollUp+0x214>
			break;
 80046e6:	bf00      	nop
 80046e8:	e002      	b.n	80046f0 <ScrollUp+0x214>
			break;
 80046ea:	bf00      	nop
 80046ec:	e000      	b.n	80046f0 <ScrollUp+0x214>
			break;
 80046ee:	bf00      	nop
}
 80046f0:	bf00      	nop
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	40020800 	.word	0x40020800
 80046f8:	20000001 	.word	0x20000001
 80046fc:	20000003 	.word	0x20000003
 8004700:	20000265 	.word	0x20000265
 8004704:	2000001c 	.word	0x2000001c
 8004708:	3c23d70a 	.word	0x3c23d70a
 800470c:	20000266 	.word	0x20000266
 8004710:	2000027c 	.word	0x2000027c
 8004714:	20000267 	.word	0x20000267
 8004718:	20000020 	.word	0x20000020
 800471c:	20000268 	.word	0x20000268
 8004720:	2000000c 	.word	0x2000000c
 8004724:	20000269 	.word	0x20000269
 8004728:	2000000e 	.word	0x2000000e
 800472c:	2000026a 	.word	0x2000026a
 8004730:	2000026e 	.word	0x2000026e
 8004734:	2000026b 	.word	0x2000026b
 8004738:	2000026f 	.word	0x2000026f

0800473c <SelectItem>:
void SelectItem(void)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(ButtonB_GPIO_Port, ButtonB_Pin) == 0) //Select button
 8004740:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004744:	481c      	ldr	r0, [pc, #112]	; (80047b8 <SelectItem+0x7c>)
 8004746:	f002 fe19 	bl	800737c <HAL_GPIO_ReadPin>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d131      	bne.n	80047b4 <SelectItem+0x78>
	{
		while (HAL_GPIO_ReadPin(ButtonB_GPIO_Port, ButtonB_Pin) == 0)
 8004750:	e002      	b.n	8004758 <SelectItem+0x1c>
		{
			HAL_Delay(50);
 8004752:	2032      	movs	r0, #50	; 0x32
 8004754:	f000 ff02 	bl	800555c <HAL_Delay>
		while (HAL_GPIO_ReadPin(ButtonB_GPIO_Port, ButtonB_Pin) == 0)
 8004758:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800475c:	4816      	ldr	r0, [pc, #88]	; (80047b8 <SelectItem+0x7c>)
 800475e:	f002 fe0d 	bl	800737c <HAL_GPIO_ReadPin>
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d0f4      	beq.n	8004752 <SelectItem+0x16>
		}
		executeAction(line);
 8004768:	4b14      	ldr	r3, [pc, #80]	; (80047bc <SelectItem+0x80>)
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	4618      	mov	r0, r3
 800476e:	f7fd fa05 	bl	8001b7c <executeAction>
		if (Kp_modify_flag == 1 || Ki_modify_flag == 1 || Kd_modify_flag == 1
 8004772:	4b13      	ldr	r3, [pc, #76]	; (80047c0 <SelectItem+0x84>)
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	2b01      	cmp	r3, #1
 8004778:	d017      	beq.n	80047aa <SelectItem+0x6e>
 800477a:	4b12      	ldr	r3, [pc, #72]	; (80047c4 <SelectItem+0x88>)
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	2b01      	cmp	r3, #1
 8004780:	d013      	beq.n	80047aa <SelectItem+0x6e>
 8004782:	4b11      	ldr	r3, [pc, #68]	; (80047c8 <SelectItem+0x8c>)
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	2b01      	cmp	r3, #1
 8004788:	d00f      	beq.n	80047aa <SelectItem+0x6e>
				|| Right_modify_flag == 1 || Left_modify_flag == 1 || First_point_modify_flag == 1 || Last_point_modify_flag == 1)
 800478a:	4b10      	ldr	r3, [pc, #64]	; (80047cc <SelectItem+0x90>)
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	2b01      	cmp	r3, #1
 8004790:	d00b      	beq.n	80047aa <SelectItem+0x6e>
 8004792:	4b0f      	ldr	r3, [pc, #60]	; (80047d0 <SelectItem+0x94>)
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	2b01      	cmp	r3, #1
 8004798:	d007      	beq.n	80047aa <SelectItem+0x6e>
 800479a:	4b0e      	ldr	r3, [pc, #56]	; (80047d4 <SelectItem+0x98>)
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d003      	beq.n	80047aa <SelectItem+0x6e>
 80047a2:	4b0d      	ldr	r3, [pc, #52]	; (80047d8 <SelectItem+0x9c>)
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d101      	bne.n	80047ae <SelectItem+0x72>
		{
			__NOP();
 80047aa:	bf00      	nop
		else
		{
			line = 1;
		}
	}
}
 80047ac:	e002      	b.n	80047b4 <SelectItem+0x78>
			line = 1;
 80047ae:	4b03      	ldr	r3, [pc, #12]	; (80047bc <SelectItem+0x80>)
 80047b0:	2201      	movs	r2, #1
 80047b2:	701a      	strb	r2, [r3, #0]
}
 80047b4:	bf00      	nop
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	40020800 	.word	0x40020800
 80047bc:	20000003 	.word	0x20000003
 80047c0:	20000265 	.word	0x20000265
 80047c4:	20000266 	.word	0x20000266
 80047c8:	20000267 	.word	0x20000267
 80047cc:	20000269 	.word	0x20000269
 80047d0:	20000268 	.word	0x20000268
 80047d4:	2000026a 	.word	0x2000026a
 80047d8:	2000026b 	.word	0x2000026b

080047dc <MultifunctionButton>:
void MultifunctionButton(void)
{
 80047dc:	b480      	push	{r7}
 80047de:	af00      	add	r7, sp, #0
	switch (Menu_type)
 80047e0:	4b9e      	ldr	r3, [pc, #632]	; (8004a5c <MultifunctionButton+0x280>)
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	2b09      	cmp	r3, #9
 80047e6:	f200 8133 	bhi.w	8004a50 <MultifunctionButton+0x274>
 80047ea:	a201      	add	r2, pc, #4	; (adr r2, 80047f0 <MultifunctionButton+0x14>)
 80047ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047f0:	08004819 	.word	0x08004819
 80047f4:	0800482d 	.word	0x0800482d
 80047f8:	080049b1 	.word	0x080049b1
 80047fc:	0800484b 	.word	0x0800484b
 8004800:	08004919 	.word	0x08004919
 8004804:	0800499d 	.word	0x0800499d
 8004808:	08004a51 	.word	0x08004a51
 800480c:	08004a51 	.word	0x08004a51
 8004810:	080049b9 	.word	0x080049b9
 8004814:	08004a35 	.word	0x08004a35
	{
	case Running_menu:
		Menu_type = Main_menu;
 8004818:	4b90      	ldr	r3, [pc, #576]	; (8004a5c <MultifunctionButton+0x280>)
 800481a:	2201      	movs	r2, #1
 800481c:	701a      	strb	r2, [r3, #0]
		line = 1;
 800481e:	4b90      	ldr	r3, [pc, #576]	; (8004a60 <MultifunctionButton+0x284>)
 8004820:	2201      	movs	r2, #1
 8004822:	701a      	strb	r2, [r3, #0]
		cancel_running = 0;
 8004824:	4b8f      	ldr	r3, [pc, #572]	; (8004a64 <MultifunctionButton+0x288>)
 8004826:	2200      	movs	r2, #0
 8004828:	701a      	strb	r2, [r3, #0]
		break;
 800482a:	e111      	b.n	8004a50 <MultifunctionButton+0x274>
	case Main_menu:
		line++;
 800482c:	4b8c      	ldr	r3, [pc, #560]	; (8004a60 <MultifunctionButton+0x284>)
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	3301      	adds	r3, #1
 8004832:	b2da      	uxtb	r2, r3
 8004834:	4b8a      	ldr	r3, [pc, #552]	; (8004a60 <MultifunctionButton+0x284>)
 8004836:	701a      	strb	r2, [r3, #0]
		if (line > Maximum_Menu_line)
 8004838:	4b89      	ldr	r3, [pc, #548]	; (8004a60 <MultifunctionButton+0x284>)
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	2b08      	cmp	r3, #8
 800483e:	f240 8100 	bls.w	8004a42 <MultifunctionButton+0x266>
		{
			line = Number_of_Menu_firstline;
 8004842:	4b87      	ldr	r3, [pc, #540]	; (8004a60 <MultifunctionButton+0x284>)
 8004844:	2201      	movs	r2, #1
 8004846:	701a      	strb	r2, [r3, #0]
		}
		break;
 8004848:	e0fb      	b.n	8004a42 <MultifunctionButton+0x266>
	case PID_Menu:
		line++;
 800484a:	4b85      	ldr	r3, [pc, #532]	; (8004a60 <MultifunctionButton+0x284>)
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	3301      	adds	r3, #1
 8004850:	b2da      	uxtb	r2, r3
 8004852:	4b83      	ldr	r3, [pc, #524]	; (8004a60 <MultifunctionButton+0x284>)
 8004854:	701a      	strb	r2, [r3, #0]
		if (line > Maximum_PID_line)
 8004856:	4b82      	ldr	r3, [pc, #520]	; (8004a60 <MultifunctionButton+0x284>)
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	2b04      	cmp	r3, #4
 800485c:	d902      	bls.n	8004864 <MultifunctionButton+0x88>
		{
			line = Number_of_Menu_firstline;
 800485e:	4b80      	ldr	r3, [pc, #512]	; (8004a60 <MultifunctionButton+0x284>)
 8004860:	2201      	movs	r2, #1
 8004862:	701a      	strb	r2, [r3, #0]
		}
		if (Kp_modify_flag == 1)
 8004864:	4b80      	ldr	r3, [pc, #512]	; (8004a68 <MultifunctionButton+0x28c>)
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	2b01      	cmp	r3, #1
 800486a:	d118      	bne.n	800489e <MultifunctionButton+0xc2>
		{
			Kp -= Kp_amount;
 800486c:	4b7f      	ldr	r3, [pc, #508]	; (8004a6c <MultifunctionButton+0x290>)
 800486e:	edd3 7a00 	vldr	s15, [r3]
 8004872:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8004a70 <MultifunctionButton+0x294>
 8004876:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800487a:	4b7c      	ldr	r3, [pc, #496]	; (8004a6c <MultifunctionButton+0x290>)
 800487c:	edc3 7a00 	vstr	s15, [r3]
			line = 1;
 8004880:	4b77      	ldr	r3, [pc, #476]	; (8004a60 <MultifunctionButton+0x284>)
 8004882:	2201      	movs	r2, #1
 8004884:	701a      	strb	r2, [r3, #0]
			if (Kp <= 0)
 8004886:	4b79      	ldr	r3, [pc, #484]	; (8004a6c <MultifunctionButton+0x290>)
 8004888:	edd3 7a00 	vldr	s15, [r3]
 800488c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004894:	d803      	bhi.n	800489e <MultifunctionButton+0xc2>
				{Kp = 0;}
 8004896:	4b75      	ldr	r3, [pc, #468]	; (8004a6c <MultifunctionButton+0x290>)
 8004898:	f04f 0200 	mov.w	r2, #0
 800489c:	601a      	str	r2, [r3, #0]
		}
		if (Ki_modify_flag == 1)
 800489e:	4b75      	ldr	r3, [pc, #468]	; (8004a74 <MultifunctionButton+0x298>)
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d118      	bne.n	80048d8 <MultifunctionButton+0xfc>
		{
			Ki -= Ki_amount;
 80048a6:	4b74      	ldr	r3, [pc, #464]	; (8004a78 <MultifunctionButton+0x29c>)
 80048a8:	edd3 7a00 	vldr	s15, [r3]
 80048ac:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8004a70 <MultifunctionButton+0x294>
 80048b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80048b4:	4b70      	ldr	r3, [pc, #448]	; (8004a78 <MultifunctionButton+0x29c>)
 80048b6:	edc3 7a00 	vstr	s15, [r3]
			line = 2;
 80048ba:	4b69      	ldr	r3, [pc, #420]	; (8004a60 <MultifunctionButton+0x284>)
 80048bc:	2202      	movs	r2, #2
 80048be:	701a      	strb	r2, [r3, #0]
			if (Ki <= 0)
 80048c0:	4b6d      	ldr	r3, [pc, #436]	; (8004a78 <MultifunctionButton+0x29c>)
 80048c2:	edd3 7a00 	vldr	s15, [r3]
 80048c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80048ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048ce:	d803      	bhi.n	80048d8 <MultifunctionButton+0xfc>
				{Ki = 0;}
 80048d0:	4b69      	ldr	r3, [pc, #420]	; (8004a78 <MultifunctionButton+0x29c>)
 80048d2:	f04f 0200 	mov.w	r2, #0
 80048d6:	601a      	str	r2, [r3, #0]
		}
		if (Kd_modify_flag == 1)
 80048d8:	4b68      	ldr	r3, [pc, #416]	; (8004a7c <MultifunctionButton+0x2a0>)
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	2b01      	cmp	r3, #1
 80048de:	f040 80b2 	bne.w	8004a46 <MultifunctionButton+0x26a>
		{
			Kd -= Kd_amount;
 80048e2:	4b67      	ldr	r3, [pc, #412]	; (8004a80 <MultifunctionButton+0x2a4>)
 80048e4:	edd3 7a00 	vldr	s15, [r3]
 80048e8:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8004a70 <MultifunctionButton+0x294>
 80048ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80048f0:	4b63      	ldr	r3, [pc, #396]	; (8004a80 <MultifunctionButton+0x2a4>)
 80048f2:	edc3 7a00 	vstr	s15, [r3]
			line = 3;
 80048f6:	4b5a      	ldr	r3, [pc, #360]	; (8004a60 <MultifunctionButton+0x284>)
 80048f8:	2203      	movs	r2, #3
 80048fa:	701a      	strb	r2, [r3, #0]
			if (Kd <= 0)
 80048fc:	4b60      	ldr	r3, [pc, #384]	; (8004a80 <MultifunctionButton+0x2a4>)
 80048fe:	edd3 7a00 	vldr	s15, [r3]
 8004902:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800490a:	d900      	bls.n	800490e <MultifunctionButton+0x132>
				{Kd = 0;}
		}
		break;
 800490c:	e09b      	b.n	8004a46 <MultifunctionButton+0x26a>
				{Kd = 0;}
 800490e:	4b5c      	ldr	r3, [pc, #368]	; (8004a80 <MultifunctionButton+0x2a4>)
 8004910:	f04f 0200 	mov.w	r2, #0
 8004914:	601a      	str	r2, [r3, #0]
		break;
 8004916:	e096      	b.n	8004a46 <MultifunctionButton+0x26a>
	case Engine_menu:
		line++;
 8004918:	4b51      	ldr	r3, [pc, #324]	; (8004a60 <MultifunctionButton+0x284>)
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	3301      	adds	r3, #1
 800491e:	b2da      	uxtb	r2, r3
 8004920:	4b4f      	ldr	r3, [pc, #316]	; (8004a60 <MultifunctionButton+0x284>)
 8004922:	701a      	strb	r2, [r3, #0]
		if (line > Maximum_Engine_line)
 8004924:	4b4e      	ldr	r3, [pc, #312]	; (8004a60 <MultifunctionButton+0x284>)
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	2b03      	cmp	r3, #3
 800492a:	d902      	bls.n	8004932 <MultifunctionButton+0x156>
		{
			line = Number_of_Menu_firstline;
 800492c:	4b4c      	ldr	r3, [pc, #304]	; (8004a60 <MultifunctionButton+0x284>)
 800492e:	2201      	movs	r2, #1
 8004930:	701a      	strb	r2, [r3, #0]
		}
		if (Left_modify_flag == 1)
 8004932:	4b54      	ldr	r3, [pc, #336]	; (8004a84 <MultifunctionButton+0x2a8>)
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	2b01      	cmp	r3, #1
 8004938:	d115      	bne.n	8004966 <MultifunctionButton+0x18a>
		{
			Left -= 100;
 800493a:	4b53      	ldr	r3, [pc, #332]	; (8004a88 <MultifunctionButton+0x2ac>)
 800493c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004940:	b29b      	uxth	r3, r3
 8004942:	3b64      	subs	r3, #100	; 0x64
 8004944:	b29b      	uxth	r3, r3
 8004946:	b21a      	sxth	r2, r3
 8004948:	4b4f      	ldr	r3, [pc, #316]	; (8004a88 <MultifunctionButton+0x2ac>)
 800494a:	801a      	strh	r2, [r3, #0]
			line = 1;
 800494c:	4b44      	ldr	r3, [pc, #272]	; (8004a60 <MultifunctionButton+0x284>)
 800494e:	2201      	movs	r2, #1
 8004950:	701a      	strb	r2, [r3, #0]
			if (Left <= -7200)
 8004952:	4b4d      	ldr	r3, [pc, #308]	; (8004a88 <MultifunctionButton+0x2ac>)
 8004954:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004958:	f513 5fe1 	cmn.w	r3, #7200	; 0x1c20
 800495c:	dc03      	bgt.n	8004966 <MultifunctionButton+0x18a>
				{Left = -7200;}
 800495e:	4b4a      	ldr	r3, [pc, #296]	; (8004a88 <MultifunctionButton+0x2ac>)
 8004960:	f24e 32e0 	movw	r2, #58336	; 0xe3e0
 8004964:	801a      	strh	r2, [r3, #0]
		}
		if (Right_modify_flag == 1)
 8004966:	4b49      	ldr	r3, [pc, #292]	; (8004a8c <MultifunctionButton+0x2b0>)
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	2b01      	cmp	r3, #1
 800496c:	d16d      	bne.n	8004a4a <MultifunctionButton+0x26e>
		{
			Right -= 100;
 800496e:	4b48      	ldr	r3, [pc, #288]	; (8004a90 <MultifunctionButton+0x2b4>)
 8004970:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004974:	b29b      	uxth	r3, r3
 8004976:	3b64      	subs	r3, #100	; 0x64
 8004978:	b29b      	uxth	r3, r3
 800497a:	b21a      	sxth	r2, r3
 800497c:	4b44      	ldr	r3, [pc, #272]	; (8004a90 <MultifunctionButton+0x2b4>)
 800497e:	801a      	strh	r2, [r3, #0]
			line = 2;
 8004980:	4b37      	ldr	r3, [pc, #220]	; (8004a60 <MultifunctionButton+0x284>)
 8004982:	2202      	movs	r2, #2
 8004984:	701a      	strb	r2, [r3, #0]
			if (Right <= -7200)
 8004986:	4b42      	ldr	r3, [pc, #264]	; (8004a90 <MultifunctionButton+0x2b4>)
 8004988:	f9b3 3000 	ldrsh.w	r3, [r3]
 800498c:	f513 5fe1 	cmn.w	r3, #7200	; 0x1c20
 8004990:	dc5b      	bgt.n	8004a4a <MultifunctionButton+0x26e>
				{Right = -7200;}
 8004992:	4b3f      	ldr	r3, [pc, #252]	; (8004a90 <MultifunctionButton+0x2b4>)
 8004994:	f24e 32e0 	movw	r2, #58336	; 0xe3e0
 8004998:	801a      	strh	r2, [r3, #0]
		}
		break;
 800499a:	e056      	b.n	8004a4a <MultifunctionButton+0x26e>
	case LineDetect_Show:
		Menu_type = Main_menu;
 800499c:	4b2f      	ldr	r3, [pc, #188]	; (8004a5c <MultifunctionButton+0x280>)
 800499e:	2201      	movs	r2, #1
 80049a0:	701a      	strb	r2, [r3, #0]
		line = 1;
 80049a2:	4b2f      	ldr	r3, [pc, #188]	; (8004a60 <MultifunctionButton+0x284>)
 80049a4:	2201      	movs	r2, #1
 80049a6:	701a      	strb	r2, [r3, #0]
		cancel_menu = 0;
 80049a8:	4b3a      	ldr	r3, [pc, #232]	; (8004a94 <MultifunctionButton+0x2b8>)
 80049aa:	2200      	movs	r2, #0
 80049ac:	701a      	strb	r2, [r3, #0]
		break;
 80049ae:	e04f      	b.n	8004a50 <MultifunctionButton+0x274>

	case Color_Processing:
		Color_Read = 0;
 80049b0:	4b39      	ldr	r3, [pc, #228]	; (8004a98 <MultifunctionButton+0x2bc>)
 80049b2:	2200      	movs	r2, #0
 80049b4:	701a      	strb	r2, [r3, #0]
		break;
 80049b6:	e04b      	b.n	8004a50 <MultifunctionButton+0x274>
	case Path_solver:
		line++;
 80049b8:	4b29      	ldr	r3, [pc, #164]	; (8004a60 <MultifunctionButton+0x284>)
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	3301      	adds	r3, #1
 80049be:	b2da      	uxtb	r2, r3
 80049c0:	4b27      	ldr	r3, [pc, #156]	; (8004a60 <MultifunctionButton+0x284>)
 80049c2:	701a      	strb	r2, [r3, #0]
		if (line > Maximum_Path_Solver_line)
 80049c4:	4b26      	ldr	r3, [pc, #152]	; (8004a60 <MultifunctionButton+0x284>)
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	2b04      	cmp	r3, #4
 80049ca:	d902      	bls.n	80049d2 <MultifunctionButton+0x1f6>
		{
			line = Number_of_Menu_firstline;
 80049cc:	4b24      	ldr	r3, [pc, #144]	; (8004a60 <MultifunctionButton+0x284>)
 80049ce:	2201      	movs	r2, #1
 80049d0:	701a      	strb	r2, [r3, #0]
		}
		if (First_point_modify_flag == 1)
 80049d2:	4b32      	ldr	r3, [pc, #200]	; (8004a9c <MultifunctionButton+0x2c0>)
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d113      	bne.n	8004a02 <MultifunctionButton+0x226>
		{
			First_point -= 1;
 80049da:	4b31      	ldr	r3, [pc, #196]	; (8004aa0 <MultifunctionButton+0x2c4>)
 80049dc:	f993 3000 	ldrsb.w	r3, [r3]
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	3b01      	subs	r3, #1
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	b25a      	sxtb	r2, r3
 80049e8:	4b2d      	ldr	r3, [pc, #180]	; (8004aa0 <MultifunctionButton+0x2c4>)
 80049ea:	701a      	strb	r2, [r3, #0]
			line = 1;
 80049ec:	4b1c      	ldr	r3, [pc, #112]	; (8004a60 <MultifunctionButton+0x284>)
 80049ee:	2201      	movs	r2, #1
 80049f0:	701a      	strb	r2, [r3, #0]
			if(First_point < 0)
 80049f2:	4b2b      	ldr	r3, [pc, #172]	; (8004aa0 <MultifunctionButton+0x2c4>)
 80049f4:	f993 3000 	ldrsb.w	r3, [r3]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	da02      	bge.n	8004a02 <MultifunctionButton+0x226>
			{
				First_point = 11;
 80049fc:	4b28      	ldr	r3, [pc, #160]	; (8004aa0 <MultifunctionButton+0x2c4>)
 80049fe:	220b      	movs	r2, #11
 8004a00:	701a      	strb	r2, [r3, #0]
			}
		}
		if (Last_point_modify_flag == 1)
 8004a02:	4b28      	ldr	r3, [pc, #160]	; (8004aa4 <MultifunctionButton+0x2c8>)
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d121      	bne.n	8004a4e <MultifunctionButton+0x272>
		{
			Last_point -= 1;
 8004a0a:	4b27      	ldr	r3, [pc, #156]	; (8004aa8 <MultifunctionButton+0x2cc>)
 8004a0c:	f993 3000 	ldrsb.w	r3, [r3]
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	3b01      	subs	r3, #1
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	b25a      	sxtb	r2, r3
 8004a18:	4b23      	ldr	r3, [pc, #140]	; (8004aa8 <MultifunctionButton+0x2cc>)
 8004a1a:	701a      	strb	r2, [r3, #0]
			line = 2;
 8004a1c:	4b10      	ldr	r3, [pc, #64]	; (8004a60 <MultifunctionButton+0x284>)
 8004a1e:	2202      	movs	r2, #2
 8004a20:	701a      	strb	r2, [r3, #0]
			if(Last_point < 0)
 8004a22:	4b21      	ldr	r3, [pc, #132]	; (8004aa8 <MultifunctionButton+0x2cc>)
 8004a24:	f993 3000 	ldrsb.w	r3, [r3]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	da10      	bge.n	8004a4e <MultifunctionButton+0x272>
			{
				Last_point = 11;
 8004a2c:	4b1e      	ldr	r3, [pc, #120]	; (8004aa8 <MultifunctionButton+0x2cc>)
 8004a2e:	220b      	movs	r2, #11
 8004a30:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
 8004a32:	e00c      	b.n	8004a4e <MultifunctionButton+0x272>
		case Path_show_menu:
			Menu_type = Path_solver;
 8004a34:	4b09      	ldr	r3, [pc, #36]	; (8004a5c <MultifunctionButton+0x280>)
 8004a36:	2208      	movs	r2, #8
 8004a38:	701a      	strb	r2, [r3, #0]
			line = 1;
 8004a3a:	4b09      	ldr	r3, [pc, #36]	; (8004a60 <MultifunctionButton+0x284>)
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	701a      	strb	r2, [r3, #0]
			break;
 8004a40:	e006      	b.n	8004a50 <MultifunctionButton+0x274>
		break;
 8004a42:	bf00      	nop
 8004a44:	e004      	b.n	8004a50 <MultifunctionButton+0x274>
		break;
 8004a46:	bf00      	nop
 8004a48:	e002      	b.n	8004a50 <MultifunctionButton+0x274>
		break;
 8004a4a:	bf00      	nop
 8004a4c:	e000      	b.n	8004a50 <MultifunctionButton+0x274>
		break;
 8004a4e:	bf00      	nop
	}

}
 8004a50:	bf00      	nop
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop
 8004a5c:	20000001 	.word	0x20000001
 8004a60:	20000003 	.word	0x20000003
 8004a64:	20000006 	.word	0x20000006
 8004a68:	20000265 	.word	0x20000265
 8004a6c:	2000001c 	.word	0x2000001c
 8004a70:	3c23d70a 	.word	0x3c23d70a
 8004a74:	20000266 	.word	0x20000266
 8004a78:	2000027c 	.word	0x2000027c
 8004a7c:	20000267 	.word	0x20000267
 8004a80:	20000020 	.word	0x20000020
 8004a84:	20000268 	.word	0x20000268
 8004a88:	2000000c 	.word	0x2000000c
 8004a8c:	20000269 	.word	0x20000269
 8004a90:	2000000e 	.word	0x2000000e
 8004a94:	20000005 	.word	0x20000005
 8004a98:	20000002 	.word	0x20000002
 8004a9c:	2000026a 	.word	0x2000026a
 8004aa0:	2000026e 	.word	0x2000026e
 8004aa4:	2000026b 	.word	0x2000026b
 8004aa8:	2000026f 	.word	0x2000026f

08004aac <HAL_GPIO_EXTI_Callback>:

//Deboucing button program
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b082      	sub	sp, #8
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == ButtonC_Pin && stateBTNC == 1)
 8004ab6:	88fb      	ldrh	r3, [r7, #6]
 8004ab8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004abc:	d10b      	bne.n	8004ad6 <HAL_GPIO_EXTI_Callback+0x2a>
 8004abe:	4b09      	ldr	r3, [pc, #36]	; (8004ae4 <HAL_GPIO_EXTI_Callback+0x38>)
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d106      	bne.n	8004ad6 <HAL_GPIO_EXTI_Callback+0x2a>
	{
		HAL_TIM_Base_Start_IT(&htim5);
 8004ac8:	4807      	ldr	r0, [pc, #28]	; (8004ae8 <HAL_GPIO_EXTI_Callback+0x3c>)
 8004aca:	f003 fe39 	bl	8008740 <HAL_TIM_Base_Start_IT>
		stateBTNC = 0;
 8004ace:	4b05      	ldr	r3, [pc, #20]	; (8004ae4 <HAL_GPIO_EXTI_Callback+0x38>)
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	701a      	strb	r2, [r3, #0]
 8004ad4:	e001      	b.n	8004ada <HAL_GPIO_EXTI_Callback+0x2e>
	}

	else
	{
		__NOP();
 8004ad6:	bf00      	nop
	}
}
 8004ad8:	bf00      	nop
 8004ada:	bf00      	nop
 8004adc:	3708      	adds	r7, #8
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	20000004 	.word	0x20000004
 8004ae8:	200004c8 	.word	0x200004c8

08004aec <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim5.Instance)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	4b0d      	ldr	r3, [pc, #52]	; (8004b30 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d112      	bne.n	8004b26 <HAL_TIM_PeriodElapsedCallback+0x3a>
	{
		if (HAL_GPIO_ReadPin(ButtonC_GPIO_Port, ButtonC_Pin)
 8004b00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004b04:	480b      	ldr	r0, [pc, #44]	; (8004b34 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8004b06:	f002 fc39 	bl	800737c <HAL_GPIO_ReadPin>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d10a      	bne.n	8004b26 <HAL_TIM_PeriodElapsedCallback+0x3a>
				== GPIO_PIN_RESET)
		{
			MultifunctionButton();
 8004b10:	f7ff fe64 	bl	80047dc <MultifunctionButton>
			menu_display = 1;
 8004b14:	4b08      	ldr	r3, [pc, #32]	; (8004b38 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8004b16:	2201      	movs	r2, #1
 8004b18:	701a      	strb	r2, [r3, #0]
			stateBTNC = 1;
 8004b1a:	4b08      	ldr	r3, [pc, #32]	; (8004b3c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim5);
 8004b20:	4803      	ldr	r0, [pc, #12]	; (8004b30 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8004b22:	f003 fe6f 	bl	8008804 <HAL_TIM_Base_Stop_IT>

		}
	}
}
 8004b26:	bf00      	nop
 8004b28:	3708      	adds	r7, #8
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	200004c8 	.word	0x200004c8
 8004b34:	40020800 	.word	0x40020800
 8004b38:	20000000 	.word	0x20000000
 8004b3c:	20000004 	.word	0x20000004

08004b40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004b40:	b480      	push	{r7}
 8004b42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004b44:	b672      	cpsid	i
}
 8004b46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8004b48:	e7fe      	b.n	8004b48 <Error_Handler+0x8>
	...

08004b4c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b52:	2300      	movs	r3, #0
 8004b54:	607b      	str	r3, [r7, #4]
 8004b56:	4b10      	ldr	r3, [pc, #64]	; (8004b98 <HAL_MspInit+0x4c>)
 8004b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b5a:	4a0f      	ldr	r2, [pc, #60]	; (8004b98 <HAL_MspInit+0x4c>)
 8004b5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b60:	6453      	str	r3, [r2, #68]	; 0x44
 8004b62:	4b0d      	ldr	r3, [pc, #52]	; (8004b98 <HAL_MspInit+0x4c>)
 8004b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b6a:	607b      	str	r3, [r7, #4]
 8004b6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004b6e:	2300      	movs	r3, #0
 8004b70:	603b      	str	r3, [r7, #0]
 8004b72:	4b09      	ldr	r3, [pc, #36]	; (8004b98 <HAL_MspInit+0x4c>)
 8004b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b76:	4a08      	ldr	r2, [pc, #32]	; (8004b98 <HAL_MspInit+0x4c>)
 8004b78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b7c:	6413      	str	r3, [r2, #64]	; 0x40
 8004b7e:	4b06      	ldr	r3, [pc, #24]	; (8004b98 <HAL_MspInit+0x4c>)
 8004b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b86:	603b      	str	r3, [r7, #0]
 8004b88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004b8a:	bf00      	nop
 8004b8c:	370c      	adds	r7, #12
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
 8004b96:	bf00      	nop
 8004b98:	40023800 	.word	0x40023800

08004b9c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b08a      	sub	sp, #40	; 0x28
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ba4:	f107 0314 	add.w	r3, r7, #20
 8004ba8:	2200      	movs	r2, #0
 8004baa:	601a      	str	r2, [r3, #0]
 8004bac:	605a      	str	r2, [r3, #4]
 8004bae:	609a      	str	r2, [r3, #8]
 8004bb0:	60da      	str	r2, [r3, #12]
 8004bb2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a33      	ldr	r2, [pc, #204]	; (8004c88 <HAL_ADC_MspInit+0xec>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d15f      	bne.n	8004c7e <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	613b      	str	r3, [r7, #16]
 8004bc2:	4b32      	ldr	r3, [pc, #200]	; (8004c8c <HAL_ADC_MspInit+0xf0>)
 8004bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bc6:	4a31      	ldr	r2, [pc, #196]	; (8004c8c <HAL_ADC_MspInit+0xf0>)
 8004bc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bcc:	6453      	str	r3, [r2, #68]	; 0x44
 8004bce:	4b2f      	ldr	r3, [pc, #188]	; (8004c8c <HAL_ADC_MspInit+0xf0>)
 8004bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bd6:	613b      	str	r3, [r7, #16]
 8004bd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bda:	2300      	movs	r3, #0
 8004bdc:	60fb      	str	r3, [r7, #12]
 8004bde:	4b2b      	ldr	r3, [pc, #172]	; (8004c8c <HAL_ADC_MspInit+0xf0>)
 8004be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be2:	4a2a      	ldr	r2, [pc, #168]	; (8004c8c <HAL_ADC_MspInit+0xf0>)
 8004be4:	f043 0301 	orr.w	r3, r3, #1
 8004be8:	6313      	str	r3, [r2, #48]	; 0x30
 8004bea:	4b28      	ldr	r3, [pc, #160]	; (8004c8c <HAL_ADC_MspInit+0xf0>)
 8004bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bee:	f003 0301 	and.w	r3, r3, #1
 8004bf2:	60fb      	str	r3, [r7, #12]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8004bf6:	23fc      	movs	r3, #252	; 0xfc
 8004bf8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c02:	f107 0314 	add.w	r3, r7, #20
 8004c06:	4619      	mov	r1, r3
 8004c08:	4821      	ldr	r0, [pc, #132]	; (8004c90 <HAL_ADC_MspInit+0xf4>)
 8004c0a:	f002 fa33 	bl	8007074 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8004c0e:	4b21      	ldr	r3, [pc, #132]	; (8004c94 <HAL_ADC_MspInit+0xf8>)
 8004c10:	4a21      	ldr	r2, [pc, #132]	; (8004c98 <HAL_ADC_MspInit+0xfc>)
 8004c12:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8004c14:	4b1f      	ldr	r3, [pc, #124]	; (8004c94 <HAL_ADC_MspInit+0xf8>)
 8004c16:	2200      	movs	r2, #0
 8004c18:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004c1a:	4b1e      	ldr	r3, [pc, #120]	; (8004c94 <HAL_ADC_MspInit+0xf8>)
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c20:	4b1c      	ldr	r3, [pc, #112]	; (8004c94 <HAL_ADC_MspInit+0xf8>)
 8004c22:	2200      	movs	r2, #0
 8004c24:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004c26:	4b1b      	ldr	r3, [pc, #108]	; (8004c94 <HAL_ADC_MspInit+0xf8>)
 8004c28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c2c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004c2e:	4b19      	ldr	r3, [pc, #100]	; (8004c94 <HAL_ADC_MspInit+0xf8>)
 8004c30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c34:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004c36:	4b17      	ldr	r3, [pc, #92]	; (8004c94 <HAL_ADC_MspInit+0xf8>)
 8004c38:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004c3c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004c3e:	4b15      	ldr	r3, [pc, #84]	; (8004c94 <HAL_ADC_MspInit+0xf8>)
 8004c40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c44:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004c46:	4b13      	ldr	r3, [pc, #76]	; (8004c94 <HAL_ADC_MspInit+0xf8>)
 8004c48:	2200      	movs	r2, #0
 8004c4a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004c4c:	4b11      	ldr	r3, [pc, #68]	; (8004c94 <HAL_ADC_MspInit+0xf8>)
 8004c4e:	2200      	movs	r2, #0
 8004c50:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004c52:	4810      	ldr	r0, [pc, #64]	; (8004c94 <HAL_ADC_MspInit+0xf8>)
 8004c54:	f001 fb18 	bl	8006288 <HAL_DMA_Init>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d001      	beq.n	8004c62 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8004c5e:	f7ff ff6f 	bl	8004b40 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a0b      	ldr	r2, [pc, #44]	; (8004c94 <HAL_ADC_MspInit+0xf8>)
 8004c66:	639a      	str	r2, [r3, #56]	; 0x38
 8004c68:	4a0a      	ldr	r2, [pc, #40]	; (8004c94 <HAL_ADC_MspInit+0xf8>)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8004c6e:	2200      	movs	r2, #0
 8004c70:	2100      	movs	r1, #0
 8004c72:	2012      	movs	r0, #18
 8004c74:	f001 facd 	bl	8006212 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8004c78:	2012      	movs	r0, #18
 8004c7a:	f001 fae6 	bl	800624a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004c7e:	bf00      	nop
 8004c80:	3728      	adds	r7, #40	; 0x28
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	40012000 	.word	0x40012000
 8004c8c:	40023800 	.word	0x40023800
 8004c90:	40020000 	.word	0x40020000
 8004c94:	20000614 	.word	0x20000614
 8004c98:	40026410 	.word	0x40026410

08004c9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b08a      	sub	sp, #40	; 0x28
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ca4:	f107 0314 	add.w	r3, r7, #20
 8004ca8:	2200      	movs	r2, #0
 8004caa:	601a      	str	r2, [r3, #0]
 8004cac:	605a      	str	r2, [r3, #4]
 8004cae:	609a      	str	r2, [r3, #8]
 8004cb0:	60da      	str	r2, [r3, #12]
 8004cb2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a28      	ldr	r2, [pc, #160]	; (8004d5c <HAL_I2C_MspInit+0xc0>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d14a      	bne.n	8004d54 <HAL_I2C_MspInit+0xb8>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	613b      	str	r3, [r7, #16]
 8004cc2:	4b27      	ldr	r3, [pc, #156]	; (8004d60 <HAL_I2C_MspInit+0xc4>)
 8004cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc6:	4a26      	ldr	r2, [pc, #152]	; (8004d60 <HAL_I2C_MspInit+0xc4>)
 8004cc8:	f043 0301 	orr.w	r3, r3, #1
 8004ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8004cce:	4b24      	ldr	r3, [pc, #144]	; (8004d60 <HAL_I2C_MspInit+0xc4>)
 8004cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd2:	f003 0301 	and.w	r3, r3, #1
 8004cd6:	613b      	str	r3, [r7, #16]
 8004cd8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004cda:	2300      	movs	r3, #0
 8004cdc:	60fb      	str	r3, [r7, #12]
 8004cde:	4b20      	ldr	r3, [pc, #128]	; (8004d60 <HAL_I2C_MspInit+0xc4>)
 8004ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce2:	4a1f      	ldr	r2, [pc, #124]	; (8004d60 <HAL_I2C_MspInit+0xc4>)
 8004ce4:	f043 0302 	orr.w	r3, r3, #2
 8004ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8004cea:	4b1d      	ldr	r3, [pc, #116]	; (8004d60 <HAL_I2C_MspInit+0xc4>)
 8004cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cee:	f003 0302 	and.w	r3, r3, #2
 8004cf2:	60fb      	str	r3, [r7, #12]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB4     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004cf6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004cfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004cfc:	2312      	movs	r3, #18
 8004cfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004d00:	2301      	movs	r3, #1
 8004d02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d04:	2303      	movs	r3, #3
 8004d06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004d08:	2304      	movs	r3, #4
 8004d0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d0c:	f107 0314 	add.w	r3, r7, #20
 8004d10:	4619      	mov	r1, r3
 8004d12:	4814      	ldr	r0, [pc, #80]	; (8004d64 <HAL_I2C_MspInit+0xc8>)
 8004d14:	f002 f9ae 	bl	8007074 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004d18:	2310      	movs	r3, #16
 8004d1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004d1c:	2312      	movs	r3, #18
 8004d1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004d20:	2301      	movs	r3, #1
 8004d22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d24:	2303      	movs	r3, #3
 8004d26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8004d28:	2309      	movs	r3, #9
 8004d2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d2c:	f107 0314 	add.w	r3, r7, #20
 8004d30:	4619      	mov	r1, r3
 8004d32:	480d      	ldr	r0, [pc, #52]	; (8004d68 <HAL_I2C_MspInit+0xcc>)
 8004d34:	f002 f99e 	bl	8007074 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004d38:	2300      	movs	r3, #0
 8004d3a:	60bb      	str	r3, [r7, #8]
 8004d3c:	4b08      	ldr	r3, [pc, #32]	; (8004d60 <HAL_I2C_MspInit+0xc4>)
 8004d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d40:	4a07      	ldr	r2, [pc, #28]	; (8004d60 <HAL_I2C_MspInit+0xc4>)
 8004d42:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004d46:	6413      	str	r3, [r2, #64]	; 0x40
 8004d48:	4b05      	ldr	r3, [pc, #20]	; (8004d60 <HAL_I2C_MspInit+0xc4>)
 8004d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d50:	60bb      	str	r3, [r7, #8]
 8004d52:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8004d54:	bf00      	nop
 8004d56:	3728      	adds	r7, #40	; 0x28
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	40005c00 	.word	0x40005c00
 8004d60:	40023800 	.word	0x40023800
 8004d64:	40020000 	.word	0x40020000
 8004d68:	40020400 	.word	0x40020400

08004d6c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b08a      	sub	sp, #40	; 0x28
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d74:	f107 0314 	add.w	r3, r7, #20
 8004d78:	2200      	movs	r2, #0
 8004d7a:	601a      	str	r2, [r3, #0]
 8004d7c:	605a      	str	r2, [r3, #4]
 8004d7e:	609a      	str	r2, [r3, #8]
 8004d80:	60da      	str	r2, [r3, #12]
 8004d82:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a19      	ldr	r2, [pc, #100]	; (8004df0 <HAL_SPI_MspInit+0x84>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d12c      	bne.n	8004de8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004d8e:	2300      	movs	r3, #0
 8004d90:	613b      	str	r3, [r7, #16]
 8004d92:	4b18      	ldr	r3, [pc, #96]	; (8004df4 <HAL_SPI_MspInit+0x88>)
 8004d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d96:	4a17      	ldr	r2, [pc, #92]	; (8004df4 <HAL_SPI_MspInit+0x88>)
 8004d98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d9c:	6413      	str	r3, [r2, #64]	; 0x40
 8004d9e:	4b15      	ldr	r3, [pc, #84]	; (8004df4 <HAL_SPI_MspInit+0x88>)
 8004da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004da6:	613b      	str	r3, [r7, #16]
 8004da8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004daa:	2300      	movs	r3, #0
 8004dac:	60fb      	str	r3, [r7, #12]
 8004dae:	4b11      	ldr	r3, [pc, #68]	; (8004df4 <HAL_SPI_MspInit+0x88>)
 8004db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db2:	4a10      	ldr	r2, [pc, #64]	; (8004df4 <HAL_SPI_MspInit+0x88>)
 8004db4:	f043 0302 	orr.w	r3, r3, #2
 8004db8:	6313      	str	r3, [r2, #48]	; 0x30
 8004dba:	4b0e      	ldr	r3, [pc, #56]	; (8004df4 <HAL_SPI_MspInit+0x88>)
 8004dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dbe:	f003 0302 	and.w	r3, r3, #2
 8004dc2:	60fb      	str	r3, [r7, #12]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004dc6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8004dca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dcc:	2302      	movs	r3, #2
 8004dce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004dd8:	2305      	movs	r3, #5
 8004dda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ddc:	f107 0314 	add.w	r3, r7, #20
 8004de0:	4619      	mov	r1, r3
 8004de2:	4805      	ldr	r0, [pc, #20]	; (8004df8 <HAL_SPI_MspInit+0x8c>)
 8004de4:	f002 f946 	bl	8007074 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004de8:	bf00      	nop
 8004dea:	3728      	adds	r7, #40	; 0x28
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	40003800 	.word	0x40003800
 8004df4:	40023800 	.word	0x40023800
 8004df8:	40020400 	.word	0x40020400

08004dfc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b08c      	sub	sp, #48	; 0x30
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e04:	f107 031c 	add.w	r3, r7, #28
 8004e08:	2200      	movs	r2, #0
 8004e0a:	601a      	str	r2, [r3, #0]
 8004e0c:	605a      	str	r2, [r3, #4]
 8004e0e:	609a      	str	r2, [r3, #8]
 8004e10:	60da      	str	r2, [r3, #12]
 8004e12:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e1c:	d153      	bne.n	8004ec6 <HAL_TIM_Encoder_MspInit+0xca>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004e1e:	2300      	movs	r3, #0
 8004e20:	61bb      	str	r3, [r7, #24]
 8004e22:	4b47      	ldr	r3, [pc, #284]	; (8004f40 <HAL_TIM_Encoder_MspInit+0x144>)
 8004e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e26:	4a46      	ldr	r2, [pc, #280]	; (8004f40 <HAL_TIM_Encoder_MspInit+0x144>)
 8004e28:	f043 0301 	orr.w	r3, r3, #1
 8004e2c:	6413      	str	r3, [r2, #64]	; 0x40
 8004e2e:	4b44      	ldr	r3, [pc, #272]	; (8004f40 <HAL_TIM_Encoder_MspInit+0x144>)
 8004e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e32:	f003 0301 	and.w	r3, r3, #1
 8004e36:	61bb      	str	r3, [r7, #24]
 8004e38:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	617b      	str	r3, [r7, #20]
 8004e3e:	4b40      	ldr	r3, [pc, #256]	; (8004f40 <HAL_TIM_Encoder_MspInit+0x144>)
 8004e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e42:	4a3f      	ldr	r2, [pc, #252]	; (8004f40 <HAL_TIM_Encoder_MspInit+0x144>)
 8004e44:	f043 0301 	orr.w	r3, r3, #1
 8004e48:	6313      	str	r3, [r2, #48]	; 0x30
 8004e4a:	4b3d      	ldr	r3, [pc, #244]	; (8004f40 <HAL_TIM_Encoder_MspInit+0x144>)
 8004e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e4e:	f003 0301 	and.w	r3, r3, #1
 8004e52:	617b      	str	r3, [r7, #20]
 8004e54:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e56:	2300      	movs	r3, #0
 8004e58:	613b      	str	r3, [r7, #16]
 8004e5a:	4b39      	ldr	r3, [pc, #228]	; (8004f40 <HAL_TIM_Encoder_MspInit+0x144>)
 8004e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e5e:	4a38      	ldr	r2, [pc, #224]	; (8004f40 <HAL_TIM_Encoder_MspInit+0x144>)
 8004e60:	f043 0302 	orr.w	r3, r3, #2
 8004e64:	6313      	str	r3, [r2, #48]	; 0x30
 8004e66:	4b36      	ldr	r3, [pc, #216]	; (8004f40 <HAL_TIM_Encoder_MspInit+0x144>)
 8004e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e6a:	f003 0302 	and.w	r3, r3, #2
 8004e6e:	613b      	str	r3, [r7, #16]
 8004e70:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004e72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e78:	2302      	movs	r3, #2
 8004e7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e80:	2300      	movs	r3, #0
 8004e82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004e84:	2301      	movs	r3, #1
 8004e86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e88:	f107 031c 	add.w	r3, r7, #28
 8004e8c:	4619      	mov	r1, r3
 8004e8e:	482d      	ldr	r0, [pc, #180]	; (8004f44 <HAL_TIM_Encoder_MspInit+0x148>)
 8004e90:	f002 f8f0 	bl	8007074 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004e94:	2308      	movs	r3, #8
 8004e96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e98:	2302      	movs	r3, #2
 8004e9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ea8:	f107 031c 	add.w	r3, r7, #28
 8004eac:	4619      	mov	r1, r3
 8004eae:	4826      	ldr	r0, [pc, #152]	; (8004f48 <HAL_TIM_Encoder_MspInit+0x14c>)
 8004eb0:	f002 f8e0 	bl	8007074 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	2100      	movs	r1, #0
 8004eb8:	201c      	movs	r0, #28
 8004eba:	f001 f9aa 	bl	8006212 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004ebe:	201c      	movs	r0, #28
 8004ec0:	f001 f9c3 	bl	800624a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004ec4:	e038      	b.n	8004f38 <HAL_TIM_Encoder_MspInit+0x13c>
  else if(htim_encoder->Instance==TIM4)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a20      	ldr	r2, [pc, #128]	; (8004f4c <HAL_TIM_Encoder_MspInit+0x150>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d133      	bne.n	8004f38 <HAL_TIM_Encoder_MspInit+0x13c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	60fb      	str	r3, [r7, #12]
 8004ed4:	4b1a      	ldr	r3, [pc, #104]	; (8004f40 <HAL_TIM_Encoder_MspInit+0x144>)
 8004ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed8:	4a19      	ldr	r2, [pc, #100]	; (8004f40 <HAL_TIM_Encoder_MspInit+0x144>)
 8004eda:	f043 0304 	orr.w	r3, r3, #4
 8004ede:	6413      	str	r3, [r2, #64]	; 0x40
 8004ee0:	4b17      	ldr	r3, [pc, #92]	; (8004f40 <HAL_TIM_Encoder_MspInit+0x144>)
 8004ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee4:	f003 0304 	and.w	r3, r3, #4
 8004ee8:	60fb      	str	r3, [r7, #12]
 8004eea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004eec:	2300      	movs	r3, #0
 8004eee:	60bb      	str	r3, [r7, #8]
 8004ef0:	4b13      	ldr	r3, [pc, #76]	; (8004f40 <HAL_TIM_Encoder_MspInit+0x144>)
 8004ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef4:	4a12      	ldr	r2, [pc, #72]	; (8004f40 <HAL_TIM_Encoder_MspInit+0x144>)
 8004ef6:	f043 0302 	orr.w	r3, r3, #2
 8004efa:	6313      	str	r3, [r2, #48]	; 0x30
 8004efc:	4b10      	ldr	r3, [pc, #64]	; (8004f40 <HAL_TIM_Encoder_MspInit+0x144>)
 8004efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f00:	f003 0302 	and.w	r3, r3, #2
 8004f04:	60bb      	str	r3, [r7, #8]
 8004f06:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004f08:	23c0      	movs	r3, #192	; 0xc0
 8004f0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f0c:	2302      	movs	r3, #2
 8004f0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f10:	2300      	movs	r3, #0
 8004f12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f14:	2300      	movs	r3, #0
 8004f16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004f18:	2302      	movs	r3, #2
 8004f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f1c:	f107 031c 	add.w	r3, r7, #28
 8004f20:	4619      	mov	r1, r3
 8004f22:	4809      	ldr	r0, [pc, #36]	; (8004f48 <HAL_TIM_Encoder_MspInit+0x14c>)
 8004f24:	f002 f8a6 	bl	8007074 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004f28:	2200      	movs	r2, #0
 8004f2a:	2100      	movs	r1, #0
 8004f2c:	201e      	movs	r0, #30
 8004f2e:	f001 f970 	bl	8006212 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004f32:	201e      	movs	r0, #30
 8004f34:	f001 f989 	bl	800624a <HAL_NVIC_EnableIRQ>
}
 8004f38:	bf00      	nop
 8004f3a:	3730      	adds	r7, #48	; 0x30
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	40023800 	.word	0x40023800
 8004f44:	40020000 	.word	0x40020000
 8004f48:	40020400 	.word	0x40020400
 8004f4c:	40000800 	.word	0x40000800

08004f50 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b085      	sub	sp, #20
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a0b      	ldr	r2, [pc, #44]	; (8004f8c <HAL_TIM_PWM_MspInit+0x3c>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d10d      	bne.n	8004f7e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004f62:	2300      	movs	r3, #0
 8004f64:	60fb      	str	r3, [r7, #12]
 8004f66:	4b0a      	ldr	r3, [pc, #40]	; (8004f90 <HAL_TIM_PWM_MspInit+0x40>)
 8004f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6a:	4a09      	ldr	r2, [pc, #36]	; (8004f90 <HAL_TIM_PWM_MspInit+0x40>)
 8004f6c:	f043 0302 	orr.w	r3, r3, #2
 8004f70:	6413      	str	r3, [r2, #64]	; 0x40
 8004f72:	4b07      	ldr	r3, [pc, #28]	; (8004f90 <HAL_TIM_PWM_MspInit+0x40>)
 8004f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f76:	f003 0302 	and.w	r3, r3, #2
 8004f7a:	60fb      	str	r3, [r7, #12]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004f7e:	bf00      	nop
 8004f80:	3714      	adds	r7, #20
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr
 8004f8a:	bf00      	nop
 8004f8c:	40000400 	.word	0x40000400
 8004f90:	40023800 	.word	0x40023800

08004f94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a18      	ldr	r2, [pc, #96]	; (8005004 <HAL_TIM_Base_MspInit+0x70>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d116      	bne.n	8004fd4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	60fb      	str	r3, [r7, #12]
 8004faa:	4b17      	ldr	r3, [pc, #92]	; (8005008 <HAL_TIM_Base_MspInit+0x74>)
 8004fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fae:	4a16      	ldr	r2, [pc, #88]	; (8005008 <HAL_TIM_Base_MspInit+0x74>)
 8004fb0:	f043 0308 	orr.w	r3, r3, #8
 8004fb4:	6413      	str	r3, [r2, #64]	; 0x40
 8004fb6:	4b14      	ldr	r3, [pc, #80]	; (8005008 <HAL_TIM_Base_MspInit+0x74>)
 8004fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fba:	f003 0308 	and.w	r3, r3, #8
 8004fbe:	60fb      	str	r3, [r7, #12]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	2100      	movs	r1, #0
 8004fc6:	2032      	movs	r0, #50	; 0x32
 8004fc8:	f001 f923 	bl	8006212 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004fcc:	2032      	movs	r0, #50	; 0x32
 8004fce:	f001 f93c 	bl	800624a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8004fd2:	e012      	b.n	8004ffa <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM9)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a0c      	ldr	r2, [pc, #48]	; (800500c <HAL_TIM_Base_MspInit+0x78>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d10d      	bne.n	8004ffa <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8004fde:	2300      	movs	r3, #0
 8004fe0:	60bb      	str	r3, [r7, #8]
 8004fe2:	4b09      	ldr	r3, [pc, #36]	; (8005008 <HAL_TIM_Base_MspInit+0x74>)
 8004fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fe6:	4a08      	ldr	r2, [pc, #32]	; (8005008 <HAL_TIM_Base_MspInit+0x74>)
 8004fe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fec:	6453      	str	r3, [r2, #68]	; 0x44
 8004fee:	4b06      	ldr	r3, [pc, #24]	; (8005008 <HAL_TIM_Base_MspInit+0x74>)
 8004ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ff2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ff6:	60bb      	str	r3, [r7, #8]
 8004ff8:	68bb      	ldr	r3, [r7, #8]
}
 8004ffa:	bf00      	nop
 8004ffc:	3710      	adds	r7, #16
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	40000c00 	.word	0x40000c00
 8005008:	40023800 	.word	0x40023800
 800500c:	40014000 	.word	0x40014000

08005010 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b088      	sub	sp, #32
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005018:	f107 030c 	add.w	r3, r7, #12
 800501c:	2200      	movs	r2, #0
 800501e:	601a      	str	r2, [r3, #0]
 8005020:	605a      	str	r2, [r3, #4]
 8005022:	609a      	str	r2, [r3, #8]
 8005024:	60da      	str	r2, [r3, #12]
 8005026:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a12      	ldr	r2, [pc, #72]	; (8005078 <HAL_TIM_MspPostInit+0x68>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d11d      	bne.n	800506e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005032:	2300      	movs	r3, #0
 8005034:	60bb      	str	r3, [r7, #8]
 8005036:	4b11      	ldr	r3, [pc, #68]	; (800507c <HAL_TIM_MspPostInit+0x6c>)
 8005038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800503a:	4a10      	ldr	r2, [pc, #64]	; (800507c <HAL_TIM_MspPostInit+0x6c>)
 800503c:	f043 0302 	orr.w	r3, r3, #2
 8005040:	6313      	str	r3, [r2, #48]	; 0x30
 8005042:	4b0e      	ldr	r3, [pc, #56]	; (800507c <HAL_TIM_MspPostInit+0x6c>)
 8005044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005046:	f003 0302 	and.w	r3, r3, #2
 800504a:	60bb      	str	r3, [r7, #8]
 800504c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800504e:	2303      	movs	r3, #3
 8005050:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005052:	2302      	movs	r3, #2
 8005054:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005056:	2300      	movs	r3, #0
 8005058:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800505a:	2300      	movs	r3, #0
 800505c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800505e:	2302      	movs	r3, #2
 8005060:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005062:	f107 030c 	add.w	r3, r7, #12
 8005066:	4619      	mov	r1, r3
 8005068:	4805      	ldr	r0, [pc, #20]	; (8005080 <HAL_TIM_MspPostInit+0x70>)
 800506a:	f002 f803 	bl	8007074 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800506e:	bf00      	nop
 8005070:	3720      	adds	r7, #32
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	40000400 	.word	0x40000400
 800507c:	40023800 	.word	0x40023800
 8005080:	40020400 	.word	0x40020400

08005084 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b08c      	sub	sp, #48	; 0x30
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800508c:	f107 031c 	add.w	r3, r7, #28
 8005090:	2200      	movs	r2, #0
 8005092:	601a      	str	r2, [r3, #0]
 8005094:	605a      	str	r2, [r3, #4]
 8005096:	609a      	str	r2, [r3, #8]
 8005098:	60da      	str	r2, [r3, #12]
 800509a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a37      	ldr	r2, [pc, #220]	; (8005180 <HAL_UART_MspInit+0xfc>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d12d      	bne.n	8005102 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80050a6:	2300      	movs	r3, #0
 80050a8:	61bb      	str	r3, [r7, #24]
 80050aa:	4b36      	ldr	r3, [pc, #216]	; (8005184 <HAL_UART_MspInit+0x100>)
 80050ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ae:	4a35      	ldr	r2, [pc, #212]	; (8005184 <HAL_UART_MspInit+0x100>)
 80050b0:	f043 0310 	orr.w	r3, r3, #16
 80050b4:	6453      	str	r3, [r2, #68]	; 0x44
 80050b6:	4b33      	ldr	r3, [pc, #204]	; (8005184 <HAL_UART_MspInit+0x100>)
 80050b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ba:	f003 0310 	and.w	r3, r3, #16
 80050be:	61bb      	str	r3, [r7, #24]
 80050c0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050c2:	2300      	movs	r3, #0
 80050c4:	617b      	str	r3, [r7, #20]
 80050c6:	4b2f      	ldr	r3, [pc, #188]	; (8005184 <HAL_UART_MspInit+0x100>)
 80050c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ca:	4a2e      	ldr	r2, [pc, #184]	; (8005184 <HAL_UART_MspInit+0x100>)
 80050cc:	f043 0301 	orr.w	r3, r3, #1
 80050d0:	6313      	str	r3, [r2, #48]	; 0x30
 80050d2:	4b2c      	ldr	r3, [pc, #176]	; (8005184 <HAL_UART_MspInit+0x100>)
 80050d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d6:	f003 0301 	and.w	r3, r3, #1
 80050da:	617b      	str	r3, [r7, #20]
 80050dc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80050de:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80050e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050e4:	2302      	movs	r3, #2
 80050e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050e8:	2300      	movs	r3, #0
 80050ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050ec:	2303      	movs	r3, #3
 80050ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80050f0:	2307      	movs	r3, #7
 80050f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050f4:	f107 031c 	add.w	r3, r7, #28
 80050f8:	4619      	mov	r1, r3
 80050fa:	4823      	ldr	r0, [pc, #140]	; (8005188 <HAL_UART_MspInit+0x104>)
 80050fc:	f001 ffba 	bl	8007074 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8005100:	e039      	b.n	8005176 <HAL_UART_MspInit+0xf2>
  else if(huart->Instance==USART6)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a21      	ldr	r2, [pc, #132]	; (800518c <HAL_UART_MspInit+0x108>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d134      	bne.n	8005176 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART6_CLK_ENABLE();
 800510c:	2300      	movs	r3, #0
 800510e:	613b      	str	r3, [r7, #16]
 8005110:	4b1c      	ldr	r3, [pc, #112]	; (8005184 <HAL_UART_MspInit+0x100>)
 8005112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005114:	4a1b      	ldr	r2, [pc, #108]	; (8005184 <HAL_UART_MspInit+0x100>)
 8005116:	f043 0320 	orr.w	r3, r3, #32
 800511a:	6453      	str	r3, [r2, #68]	; 0x44
 800511c:	4b19      	ldr	r3, [pc, #100]	; (8005184 <HAL_UART_MspInit+0x100>)
 800511e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005120:	f003 0320 	and.w	r3, r3, #32
 8005124:	613b      	str	r3, [r7, #16]
 8005126:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005128:	2300      	movs	r3, #0
 800512a:	60fb      	str	r3, [r7, #12]
 800512c:	4b15      	ldr	r3, [pc, #84]	; (8005184 <HAL_UART_MspInit+0x100>)
 800512e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005130:	4a14      	ldr	r2, [pc, #80]	; (8005184 <HAL_UART_MspInit+0x100>)
 8005132:	f043 0301 	orr.w	r3, r3, #1
 8005136:	6313      	str	r3, [r2, #48]	; 0x30
 8005138:	4b12      	ldr	r3, [pc, #72]	; (8005184 <HAL_UART_MspInit+0x100>)
 800513a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800513c:	f003 0301 	and.w	r3, r3, #1
 8005140:	60fb      	str	r3, [r7, #12]
 8005142:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005144:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8005148:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800514a:	2302      	movs	r3, #2
 800514c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800514e:	2300      	movs	r3, #0
 8005150:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005152:	2303      	movs	r3, #3
 8005154:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8005156:	2308      	movs	r3, #8
 8005158:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800515a:	f107 031c 	add.w	r3, r7, #28
 800515e:	4619      	mov	r1, r3
 8005160:	4809      	ldr	r0, [pc, #36]	; (8005188 <HAL_UART_MspInit+0x104>)
 8005162:	f001 ff87 	bl	8007074 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8005166:	2200      	movs	r2, #0
 8005168:	2100      	movs	r1, #0
 800516a:	2047      	movs	r0, #71	; 0x47
 800516c:	f001 f851 	bl	8006212 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8005170:	2047      	movs	r0, #71	; 0x47
 8005172:	f001 f86a 	bl	800624a <HAL_NVIC_EnableIRQ>
}
 8005176:	bf00      	nop
 8005178:	3730      	adds	r7, #48	; 0x30
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	40011000 	.word	0x40011000
 8005184:	40023800 	.word	0x40023800
 8005188:	40020000 	.word	0x40020000
 800518c:	40011400 	.word	0x40011400

08005190 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005190:	b480      	push	{r7}
 8005192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005194:	e7fe      	b.n	8005194 <NMI_Handler+0x4>

08005196 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005196:	b480      	push	{r7}
 8005198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800519a:	e7fe      	b.n	800519a <HardFault_Handler+0x4>

0800519c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800519c:	b480      	push	{r7}
 800519e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80051a0:	e7fe      	b.n	80051a0 <MemManage_Handler+0x4>

080051a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80051a2:	b480      	push	{r7}
 80051a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80051a6:	e7fe      	b.n	80051a6 <BusFault_Handler+0x4>

080051a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80051a8:	b480      	push	{r7}
 80051aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80051ac:	e7fe      	b.n	80051ac <UsageFault_Handler+0x4>

080051ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80051ae:	b480      	push	{r7}
 80051b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80051b2:	bf00      	nop
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80051bc:	b480      	push	{r7}
 80051be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80051c0:	bf00      	nop
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr

080051ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80051ca:	b480      	push	{r7}
 80051cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80051ce:	bf00      	nop
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	af00      	add	r7, sp, #0
//		old_countLeft = countLeft;
//		old_countRight = countRight;
//		indx = 0;
//	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80051dc:	f000 f99e 	bl	800551c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80051e0:	bf00      	nop
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80051e8:	4802      	ldr	r0, [pc, #8]	; (80051f4 <ADC_IRQHandler+0x10>)
 80051ea:	f000 fa1e 	bl	800562a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80051ee:	bf00      	nop
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	bf00      	nop
 80051f4:	20000558 	.word	0x20000558

080051f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80051fc:	4802      	ldr	r0, [pc, #8]	; (8005208 <TIM2_IRQHandler+0x10>)
 80051fe:	f003 fd83 	bl	8008d08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005202:	bf00      	nop
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	200006dc 	.word	0x200006dc

0800520c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8005210:	4802      	ldr	r0, [pc, #8]	; (800521c <TIM4_IRQHandler+0x10>)
 8005212:	f003 fd79 	bl	8008d08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8005216:	bf00      	nop
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop
 800521c:	20000454 	.word	0x20000454

08005220 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8005224:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005228:	f002 f8da 	bl	80073e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800522c:	bf00      	nop
 800522e:	bd80      	pop	{r7, pc}

08005230 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8005234:	4802      	ldr	r0, [pc, #8]	; (8005240 <TIM5_IRQHandler+0x10>)
 8005236:	f003 fd67 	bl	8008d08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800523a:	bf00      	nop
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop
 8005240:	200004c8 	.word	0x200004c8

08005244 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005248:	4802      	ldr	r0, [pc, #8]	; (8005254 <DMA2_Stream0_IRQHandler+0x10>)
 800524a:	f001 f9b5 	bl	80065b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800524e:	bf00      	nop
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	20000614 	.word	0x20000614

08005258 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

//	Uart_isr (&huart6);

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800525c:	4802      	ldr	r0, [pc, #8]	; (8005268 <USART6_IRQHandler+0x10>)
 800525e:	f004 fc6b 	bl	8009b38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8005262:	bf00      	nop
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop
 8005268:	20000364 	.word	0x20000364

0800526c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800526c:	b480      	push	{r7}
 800526e:	af00      	add	r7, sp, #0
	return 1;
 8005270:	2301      	movs	r3, #1
}
 8005272:	4618      	mov	r0, r3
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <_kill>:

int _kill(int pid, int sig)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b082      	sub	sp, #8
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005286:	f005 fb13 	bl	800a8b0 <__errno>
 800528a:	4603      	mov	r3, r0
 800528c:	2216      	movs	r2, #22
 800528e:	601a      	str	r2, [r3, #0]
	return -1;
 8005290:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005294:	4618      	mov	r0, r3
 8005296:	3708      	adds	r7, #8
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}

0800529c <_exit>:

void _exit (int status)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b082      	sub	sp, #8
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80052a4:	f04f 31ff 	mov.w	r1, #4294967295
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f7ff ffe7 	bl	800527c <_kill>
	while (1) {}		/* Make sure we hang here */
 80052ae:	e7fe      	b.n	80052ae <_exit+0x12>

080052b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b086      	sub	sp, #24
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80052bc:	2300      	movs	r3, #0
 80052be:	617b      	str	r3, [r7, #20]
 80052c0:	e00a      	b.n	80052d8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80052c2:	f3af 8000 	nop.w
 80052c6:	4601      	mov	r1, r0
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	1c5a      	adds	r2, r3, #1
 80052cc:	60ba      	str	r2, [r7, #8]
 80052ce:	b2ca      	uxtb	r2, r1
 80052d0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	3301      	adds	r3, #1
 80052d6:	617b      	str	r3, [r7, #20]
 80052d8:	697a      	ldr	r2, [r7, #20]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	429a      	cmp	r2, r3
 80052de:	dbf0      	blt.n	80052c2 <_read+0x12>
	}

return len;
 80052e0:	687b      	ldr	r3, [r7, #4]
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3718      	adds	r7, #24
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}

080052ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80052ea:	b580      	push	{r7, lr}
 80052ec:	b086      	sub	sp, #24
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	60f8      	str	r0, [r7, #12]
 80052f2:	60b9      	str	r1, [r7, #8]
 80052f4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80052f6:	2300      	movs	r3, #0
 80052f8:	617b      	str	r3, [r7, #20]
 80052fa:	e009      	b.n	8005310 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	1c5a      	adds	r2, r3, #1
 8005300:	60ba      	str	r2, [r7, #8]
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	4618      	mov	r0, r3
 8005306:	f7fd ff45 	bl	8003194 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	3301      	adds	r3, #1
 800530e:	617b      	str	r3, [r7, #20]
 8005310:	697a      	ldr	r2, [r7, #20]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	429a      	cmp	r2, r3
 8005316:	dbf1      	blt.n	80052fc <_write+0x12>
	}
	return len;
 8005318:	687b      	ldr	r3, [r7, #4]
}
 800531a:	4618      	mov	r0, r3
 800531c:	3718      	adds	r7, #24
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}

08005322 <_close>:

int _close(int file)
{
 8005322:	b480      	push	{r7}
 8005324:	b083      	sub	sp, #12
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
	return -1;
 800532a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800532e:	4618      	mov	r0, r3
 8005330:	370c      	adds	r7, #12
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr

0800533a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800533a:	b480      	push	{r7}
 800533c:	b083      	sub	sp, #12
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
 8005342:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800534a:	605a      	str	r2, [r3, #4]
	return 0;
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	370c      	adds	r7, #12
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr

0800535a <_isatty>:

int _isatty(int file)
{
 800535a:	b480      	push	{r7}
 800535c:	b083      	sub	sp, #12
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
	return 1;
 8005362:	2301      	movs	r3, #1
}
 8005364:	4618      	mov	r0, r3
 8005366:	370c      	adds	r7, #12
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr

08005370 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005370:	b480      	push	{r7}
 8005372:	b085      	sub	sp, #20
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	607a      	str	r2, [r7, #4]
	return 0;
 800537c:	2300      	movs	r3, #0
}
 800537e:	4618      	mov	r0, r3
 8005380:	3714      	adds	r7, #20
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr
	...

0800538c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b086      	sub	sp, #24
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005394:	4a14      	ldr	r2, [pc, #80]	; (80053e8 <_sbrk+0x5c>)
 8005396:	4b15      	ldr	r3, [pc, #84]	; (80053ec <_sbrk+0x60>)
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80053a0:	4b13      	ldr	r3, [pc, #76]	; (80053f0 <_sbrk+0x64>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d102      	bne.n	80053ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80053a8:	4b11      	ldr	r3, [pc, #68]	; (80053f0 <_sbrk+0x64>)
 80053aa:	4a12      	ldr	r2, [pc, #72]	; (80053f4 <_sbrk+0x68>)
 80053ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80053ae:	4b10      	ldr	r3, [pc, #64]	; (80053f0 <_sbrk+0x64>)
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4413      	add	r3, r2
 80053b6:	693a      	ldr	r2, [r7, #16]
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d207      	bcs.n	80053cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80053bc:	f005 fa78 	bl	800a8b0 <__errno>
 80053c0:	4603      	mov	r3, r0
 80053c2:	220c      	movs	r2, #12
 80053c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80053c6:	f04f 33ff 	mov.w	r3, #4294967295
 80053ca:	e009      	b.n	80053e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80053cc:	4b08      	ldr	r3, [pc, #32]	; (80053f0 <_sbrk+0x64>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80053d2:	4b07      	ldr	r3, [pc, #28]	; (80053f0 <_sbrk+0x64>)
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4413      	add	r3, r2
 80053da:	4a05      	ldr	r2, [pc, #20]	; (80053f0 <_sbrk+0x64>)
 80053dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80053de:	68fb      	ldr	r3, [r7, #12]
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3718      	adds	r7, #24
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}
 80053e8:	20010000 	.word	0x20010000
 80053ec:	00000400 	.word	0x00000400
 80053f0:	20000288 	.word	0x20000288
 80053f4:	20000768 	.word	0x20000768

080053f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80053f8:	b480      	push	{r7}
 80053fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80053fc:	4b08      	ldr	r3, [pc, #32]	; (8005420 <SystemInit+0x28>)
 80053fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005402:	4a07      	ldr	r2, [pc, #28]	; (8005420 <SystemInit+0x28>)
 8005404:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005408:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800540c:	4b04      	ldr	r3, [pc, #16]	; (8005420 <SystemInit+0x28>)
 800540e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005412:	609a      	str	r2, [r3, #8]
#endif
}
 8005414:	bf00      	nop
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr
 800541e:	bf00      	nop
 8005420:	e000ed00 	.word	0xe000ed00

08005424 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005424:	f8df d034 	ldr.w	sp, [pc, #52]	; 800545c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005428:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800542a:	e003      	b.n	8005434 <LoopCopyDataInit>

0800542c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800542c:	4b0c      	ldr	r3, [pc, #48]	; (8005460 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800542e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005430:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005432:	3104      	adds	r1, #4

08005434 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005434:	480b      	ldr	r0, [pc, #44]	; (8005464 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005436:	4b0c      	ldr	r3, [pc, #48]	; (8005468 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005438:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800543a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800543c:	d3f6      	bcc.n	800542c <CopyDataInit>
  ldr  r2, =_sbss
 800543e:	4a0b      	ldr	r2, [pc, #44]	; (800546c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005440:	e002      	b.n	8005448 <LoopFillZerobss>

08005442 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005442:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005444:	f842 3b04 	str.w	r3, [r2], #4

08005448 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005448:	4b09      	ldr	r3, [pc, #36]	; (8005470 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800544a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800544c:	d3f9      	bcc.n	8005442 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800544e:	f7ff ffd3 	bl	80053f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005452:	f005 fa33 	bl	800a8bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005456:	f7fe f829 	bl	80034ac <main>
  bx  lr    
 800545a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800545c:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 8005460:	0800fb10 	.word	0x0800fb10
  ldr  r0, =_sdata
 8005464:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005468:	20000234 	.word	0x20000234
  ldr  r2, =_sbss
 800546c:	20000234 	.word	0x20000234
  ldr  r3, = _ebss
 8005470:	20000768 	.word	0x20000768

08005474 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005474:	e7fe      	b.n	8005474 <DMA1_Stream0_IRQHandler>
	...

08005478 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800547c:	4b0e      	ldr	r3, [pc, #56]	; (80054b8 <HAL_Init+0x40>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a0d      	ldr	r2, [pc, #52]	; (80054b8 <HAL_Init+0x40>)
 8005482:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005486:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005488:	4b0b      	ldr	r3, [pc, #44]	; (80054b8 <HAL_Init+0x40>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a0a      	ldr	r2, [pc, #40]	; (80054b8 <HAL_Init+0x40>)
 800548e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005492:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005494:	4b08      	ldr	r3, [pc, #32]	; (80054b8 <HAL_Init+0x40>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a07      	ldr	r2, [pc, #28]	; (80054b8 <HAL_Init+0x40>)
 800549a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800549e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80054a0:	2003      	movs	r0, #3
 80054a2:	f000 feab 	bl	80061fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80054a6:	2000      	movs	r0, #0
 80054a8:	f000 f808 	bl	80054bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80054ac:	f7ff fb4e 	bl	8004b4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80054b0:	2300      	movs	r3, #0
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	bf00      	nop
 80054b8:	40023c00 	.word	0x40023c00

080054bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b082      	sub	sp, #8
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80054c4:	4b12      	ldr	r3, [pc, #72]	; (8005510 <HAL_InitTick+0x54>)
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	4b12      	ldr	r3, [pc, #72]	; (8005514 <HAL_InitTick+0x58>)
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	4619      	mov	r1, r3
 80054ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80054d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80054d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80054da:	4618      	mov	r0, r3
 80054dc:	f000 fec7 	bl	800626e <HAL_SYSTICK_Config>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d001      	beq.n	80054ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e00e      	b.n	8005508 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2b0f      	cmp	r3, #15
 80054ee:	d80a      	bhi.n	8005506 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80054f0:	2200      	movs	r2, #0
 80054f2:	6879      	ldr	r1, [r7, #4]
 80054f4:	f04f 30ff 	mov.w	r0, #4294967295
 80054f8:	f000 fe8b 	bl	8006212 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80054fc:	4a06      	ldr	r2, [pc, #24]	; (8005518 <HAL_InitTick+0x5c>)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005502:	2300      	movs	r3, #0
 8005504:	e000      	b.n	8005508 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
}
 8005508:	4618      	mov	r0, r3
 800550a:	3708      	adds	r7, #8
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}
 8005510:	20000054 	.word	0x20000054
 8005514:	2000005c 	.word	0x2000005c
 8005518:	20000058 	.word	0x20000058

0800551c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800551c:	b480      	push	{r7}
 800551e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005520:	4b06      	ldr	r3, [pc, #24]	; (800553c <HAL_IncTick+0x20>)
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	461a      	mov	r2, r3
 8005526:	4b06      	ldr	r3, [pc, #24]	; (8005540 <HAL_IncTick+0x24>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4413      	add	r3, r2
 800552c:	4a04      	ldr	r2, [pc, #16]	; (8005540 <HAL_IncTick+0x24>)
 800552e:	6013      	str	r3, [r2, #0]
}
 8005530:	bf00      	nop
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr
 800553a:	bf00      	nop
 800553c:	2000005c 	.word	0x2000005c
 8005540:	20000734 	.word	0x20000734

08005544 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005544:	b480      	push	{r7}
 8005546:	af00      	add	r7, sp, #0
  return uwTick;
 8005548:	4b03      	ldr	r3, [pc, #12]	; (8005558 <HAL_GetTick+0x14>)
 800554a:	681b      	ldr	r3, [r3, #0]
}
 800554c:	4618      	mov	r0, r3
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr
 8005556:	bf00      	nop
 8005558:	20000734 	.word	0x20000734

0800555c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b084      	sub	sp, #16
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005564:	f7ff ffee 	bl	8005544 <HAL_GetTick>
 8005568:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005574:	d005      	beq.n	8005582 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005576:	4b0a      	ldr	r3, [pc, #40]	; (80055a0 <HAL_Delay+0x44>)
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	461a      	mov	r2, r3
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	4413      	add	r3, r2
 8005580:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005582:	bf00      	nop
 8005584:	f7ff ffde 	bl	8005544 <HAL_GetTick>
 8005588:	4602      	mov	r2, r0
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	429a      	cmp	r2, r3
 8005592:	d8f7      	bhi.n	8005584 <HAL_Delay+0x28>
  {
  }
}
 8005594:	bf00      	nop
 8005596:	bf00      	nop
 8005598:	3710      	adds	r7, #16
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
 800559e:	bf00      	nop
 80055a0:	2000005c 	.word	0x2000005c

080055a4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80055ac:	2300      	movs	r3, #0
 80055ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d101      	bne.n	80055ba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e033      	b.n	8005622 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d109      	bne.n	80055d6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f7ff faea 	bl	8004b9c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055da:	f003 0310 	and.w	r3, r3, #16
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d118      	bne.n	8005614 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80055ea:	f023 0302 	bic.w	r3, r3, #2
 80055ee:	f043 0202 	orr.w	r2, r3, #2
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 fb92 	bl	8005d20 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005606:	f023 0303 	bic.w	r3, r3, #3
 800560a:	f043 0201 	orr.w	r2, r3, #1
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	641a      	str	r2, [r3, #64]	; 0x40
 8005612:	e001      	b.n	8005618 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005620:	7bfb      	ldrb	r3, [r7, #15]
}
 8005622:	4618      	mov	r0, r3
 8005624:	3710      	adds	r7, #16
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}

0800562a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800562a:	b580      	push	{r7, lr}
 800562c:	b084      	sub	sp, #16
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8005632:	2300      	movs	r3, #0
 8005634:	60fb      	str	r3, [r7, #12]
 8005636:	2300      	movs	r3, #0
 8005638:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 0302 	and.w	r3, r3, #2
 8005644:	2b02      	cmp	r3, #2
 8005646:	bf0c      	ite	eq
 8005648:	2301      	moveq	r3, #1
 800564a:	2300      	movne	r3, #0
 800564c:	b2db      	uxtb	r3, r3
 800564e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	f003 0320 	and.w	r3, r3, #32
 800565a:	2b20      	cmp	r3, #32
 800565c:	bf0c      	ite	eq
 800565e:	2301      	moveq	r3, #1
 8005660:	2300      	movne	r3, #0
 8005662:	b2db      	uxtb	r3, r3
 8005664:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d049      	beq.n	8005700 <HAL_ADC_IRQHandler+0xd6>
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d046      	beq.n	8005700 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005676:	f003 0310 	and.w	r3, r3, #16
 800567a:	2b00      	cmp	r3, #0
 800567c:	d105      	bne.n	800568a <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005682:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005694:	2b00      	cmp	r3, #0
 8005696:	d12b      	bne.n	80056f0 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800569c:	2b00      	cmp	r3, #0
 800569e:	d127      	bne.n	80056f0 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d006      	beq.n	80056bc <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d119      	bne.n	80056f0 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	685a      	ldr	r2, [r3, #4]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f022 0220 	bic.w	r2, r2, #32
 80056ca:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d105      	bne.n	80056f0 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e8:	f043 0201 	orr.w	r2, r3, #1
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f000 f9cb 	bl	8005a8c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f06f 0212 	mvn.w	r2, #18
 80056fe:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 0304 	and.w	r3, r3, #4
 800570a:	2b04      	cmp	r3, #4
 800570c:	bf0c      	ite	eq
 800570e:	2301      	moveq	r3, #1
 8005710:	2300      	movne	r3, #0
 8005712:	b2db      	uxtb	r3, r3
 8005714:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005720:	2b80      	cmp	r3, #128	; 0x80
 8005722:	bf0c      	ite	eq
 8005724:	2301      	moveq	r3, #1
 8005726:	2300      	movne	r3, #0
 8005728:	b2db      	uxtb	r3, r3
 800572a:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d057      	beq.n	80057e2 <HAL_ADC_IRQHandler+0x1b8>
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d054      	beq.n	80057e2 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800573c:	f003 0310 	and.w	r3, r3, #16
 8005740:	2b00      	cmp	r3, #0
 8005742:	d105      	bne.n	8005750 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005748:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800575a:	2b00      	cmp	r3, #0
 800575c:	d139      	bne.n	80057d2 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005764:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8005768:	2b00      	cmp	r3, #0
 800576a:	d006      	beq.n	800577a <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8005776:	2b00      	cmp	r3, #0
 8005778:	d12b      	bne.n	80057d2 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8005784:	2b00      	cmp	r3, #0
 8005786:	d124      	bne.n	80057d2 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8005792:	2b00      	cmp	r3, #0
 8005794:	d11d      	bne.n	80057d2 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800579a:	2b00      	cmp	r3, #0
 800579c:	d119      	bne.n	80057d2 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	685a      	ldr	r2, [r3, #4]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057ac:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d105      	bne.n	80057d2 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ca:	f043 0201 	orr.w	r2, r3, #1
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 fc22 	bl	800601c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f06f 020c 	mvn.w	r2, #12
 80057e0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f003 0301 	and.w	r3, r3, #1
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	bf0c      	ite	eq
 80057f0:	2301      	moveq	r3, #1
 80057f2:	2300      	movne	r3, #0
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005802:	2b40      	cmp	r3, #64	; 0x40
 8005804:	bf0c      	ite	eq
 8005806:	2301      	moveq	r3, #1
 8005808:	2300      	movne	r3, #0
 800580a:	b2db      	uxtb	r3, r3
 800580c:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d017      	beq.n	8005844 <HAL_ADC_IRQHandler+0x21a>
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d014      	beq.n	8005844 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 0301 	and.w	r3, r3, #1
 8005824:	2b01      	cmp	r3, #1
 8005826:	d10d      	bne.n	8005844 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800582c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f000 f93d 	bl	8005ab4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f06f 0201 	mvn.w	r2, #1
 8005842:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f003 0320 	and.w	r3, r3, #32
 800584e:	2b20      	cmp	r3, #32
 8005850:	bf0c      	ite	eq
 8005852:	2301      	moveq	r3, #1
 8005854:	2300      	movne	r3, #0
 8005856:	b2db      	uxtb	r3, r3
 8005858:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005864:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005868:	bf0c      	ite	eq
 800586a:	2301      	moveq	r3, #1
 800586c:	2300      	movne	r3, #0
 800586e:	b2db      	uxtb	r3, r3
 8005870:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d015      	beq.n	80058a4 <HAL_ADC_IRQHandler+0x27a>
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d012      	beq.n	80058a4 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005882:	f043 0202 	orr.w	r2, r3, #2
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f06f 0220 	mvn.w	r2, #32
 8005892:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f000 f917 	bl	8005ac8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f06f 0220 	mvn.w	r2, #32
 80058a2:	601a      	str	r2, [r3, #0]
  }
}
 80058a4:	bf00      	nop
 80058a6:	3710      	adds	r7, #16
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}

080058ac <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b086      	sub	sp, #24
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80058b8:	2300      	movs	r3, #0
 80058ba:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d101      	bne.n	80058ca <HAL_ADC_Start_DMA+0x1e>
 80058c6:	2302      	movs	r3, #2
 80058c8:	e0ce      	b.n	8005a68 <HAL_ADC_Start_DMA+0x1bc>
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2201      	movs	r2, #1
 80058ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	f003 0301 	and.w	r3, r3, #1
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d018      	beq.n	8005912 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	689a      	ldr	r2, [r3, #8]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f042 0201 	orr.w	r2, r2, #1
 80058ee:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80058f0:	4b5f      	ldr	r3, [pc, #380]	; (8005a70 <HAL_ADC_Start_DMA+0x1c4>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a5f      	ldr	r2, [pc, #380]	; (8005a74 <HAL_ADC_Start_DMA+0x1c8>)
 80058f6:	fba2 2303 	umull	r2, r3, r2, r3
 80058fa:	0c9a      	lsrs	r2, r3, #18
 80058fc:	4613      	mov	r3, r2
 80058fe:	005b      	lsls	r3, r3, #1
 8005900:	4413      	add	r3, r2
 8005902:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005904:	e002      	b.n	800590c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	3b01      	subs	r3, #1
 800590a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d1f9      	bne.n	8005906 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800591c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005920:	d107      	bne.n	8005932 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	689a      	ldr	r2, [r3, #8]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005930:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	f003 0301 	and.w	r3, r3, #1
 800593c:	2b01      	cmp	r3, #1
 800593e:	f040 8086 	bne.w	8005a4e <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005946:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800594a:	f023 0301 	bic.w	r3, r3, #1
 800594e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005960:	2b00      	cmp	r3, #0
 8005962:	d007      	beq.n	8005974 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005968:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800596c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005978:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800597c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005980:	d106      	bne.n	8005990 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005986:	f023 0206 	bic.w	r2, r3, #6
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	645a      	str	r2, [r3, #68]	; 0x44
 800598e:	e002      	b.n	8005996 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2200      	movs	r2, #0
 8005994:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2200      	movs	r2, #0
 800599a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800599e:	4b36      	ldr	r3, [pc, #216]	; (8005a78 <HAL_ADC_Start_DMA+0x1cc>)
 80059a0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a6:	4a35      	ldr	r2, [pc, #212]	; (8005a7c <HAL_ADC_Start_DMA+0x1d0>)
 80059a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ae:	4a34      	ldr	r2, [pc, #208]	; (8005a80 <HAL_ADC_Start_DMA+0x1d4>)
 80059b0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b6:	4a33      	ldr	r2, [pc, #204]	; (8005a84 <HAL_ADC_Start_DMA+0x1d8>)
 80059b8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80059c2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	685a      	ldr	r2, [r3, #4]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80059d2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	689a      	ldr	r2, [r3, #8]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059e2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	334c      	adds	r3, #76	; 0x4c
 80059ee:	4619      	mov	r1, r3
 80059f0:	68ba      	ldr	r2, [r7, #8]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f000 fcf6 	bl	80063e4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	f003 031f 	and.w	r3, r3, #31
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d10f      	bne.n	8005a24 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d129      	bne.n	8005a66 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	689a      	ldr	r2, [r3, #8]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005a20:	609a      	str	r2, [r3, #8]
 8005a22:	e020      	b.n	8005a66 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a17      	ldr	r2, [pc, #92]	; (8005a88 <HAL_ADC_Start_DMA+0x1dc>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d11b      	bne.n	8005a66 <HAL_ADC_Start_DMA+0x1ba>
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d114      	bne.n	8005a66 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	689a      	ldr	r2, [r3, #8]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005a4a:	609a      	str	r2, [r3, #8]
 8005a4c:	e00b      	b.n	8005a66 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a52:	f043 0210 	orr.w	r2, r3, #16
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a5e:	f043 0201 	orr.w	r2, r3, #1
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005a66:	2300      	movs	r3, #0
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3718      	adds	r7, #24
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	20000054 	.word	0x20000054
 8005a74:	431bde83 	.word	0x431bde83
 8005a78:	40012300 	.word	0x40012300
 8005a7c:	08005f19 	.word	0x08005f19
 8005a80:	08005fd3 	.word	0x08005fd3
 8005a84:	08005fef 	.word	0x08005fef
 8005a88:	40012000 	.word	0x40012000

08005a8c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8005a94:	bf00      	nop
 8005a96:	370c      	adds	r7, #12
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b083      	sub	sp, #12
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8005aa8:	bf00      	nop
 8005aaa:	370c      	adds	r7, #12
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr

08005ab4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b083      	sub	sp, #12
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8005abc:	bf00      	nop
 8005abe:	370c      	adds	r7, #12
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr

08005ac8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b083      	sub	sp, #12
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8005ad0:	bf00      	nop
 8005ad2:	370c      	adds	r7, #12
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr

08005adc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b085      	sub	sp, #20
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d101      	bne.n	8005af8 <HAL_ADC_ConfigChannel+0x1c>
 8005af4:	2302      	movs	r3, #2
 8005af6:	e105      	b.n	8005d04 <HAL_ADC_ConfigChannel+0x228>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	2b09      	cmp	r3, #9
 8005b06:	d925      	bls.n	8005b54 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	68d9      	ldr	r1, [r3, #12]
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	461a      	mov	r2, r3
 8005b16:	4613      	mov	r3, r2
 8005b18:	005b      	lsls	r3, r3, #1
 8005b1a:	4413      	add	r3, r2
 8005b1c:	3b1e      	subs	r3, #30
 8005b1e:	2207      	movs	r2, #7
 8005b20:	fa02 f303 	lsl.w	r3, r2, r3
 8005b24:	43da      	mvns	r2, r3
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	400a      	ands	r2, r1
 8005b2c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	68d9      	ldr	r1, [r3, #12]
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	689a      	ldr	r2, [r3, #8]
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	4618      	mov	r0, r3
 8005b40:	4603      	mov	r3, r0
 8005b42:	005b      	lsls	r3, r3, #1
 8005b44:	4403      	add	r3, r0
 8005b46:	3b1e      	subs	r3, #30
 8005b48:	409a      	lsls	r2, r3
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	430a      	orrs	r2, r1
 8005b50:	60da      	str	r2, [r3, #12]
 8005b52:	e022      	b.n	8005b9a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	6919      	ldr	r1, [r3, #16]
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	461a      	mov	r2, r3
 8005b62:	4613      	mov	r3, r2
 8005b64:	005b      	lsls	r3, r3, #1
 8005b66:	4413      	add	r3, r2
 8005b68:	2207      	movs	r2, #7
 8005b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b6e:	43da      	mvns	r2, r3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	400a      	ands	r2, r1
 8005b76:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	6919      	ldr	r1, [r3, #16]
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	689a      	ldr	r2, [r3, #8]
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	4618      	mov	r0, r3
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	005b      	lsls	r3, r3, #1
 8005b8e:	4403      	add	r3, r0
 8005b90:	409a      	lsls	r2, r3
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	430a      	orrs	r2, r1
 8005b98:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	2b06      	cmp	r3, #6
 8005ba0:	d824      	bhi.n	8005bec <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	685a      	ldr	r2, [r3, #4]
 8005bac:	4613      	mov	r3, r2
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	4413      	add	r3, r2
 8005bb2:	3b05      	subs	r3, #5
 8005bb4:	221f      	movs	r2, #31
 8005bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bba:	43da      	mvns	r2, r3
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	400a      	ands	r2, r1
 8005bc2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	685a      	ldr	r2, [r3, #4]
 8005bd6:	4613      	mov	r3, r2
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	4413      	add	r3, r2
 8005bdc:	3b05      	subs	r3, #5
 8005bde:	fa00 f203 	lsl.w	r2, r0, r3
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	430a      	orrs	r2, r1
 8005be8:	635a      	str	r2, [r3, #52]	; 0x34
 8005bea:	e04c      	b.n	8005c86 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	2b0c      	cmp	r3, #12
 8005bf2:	d824      	bhi.n	8005c3e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	685a      	ldr	r2, [r3, #4]
 8005bfe:	4613      	mov	r3, r2
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	4413      	add	r3, r2
 8005c04:	3b23      	subs	r3, #35	; 0x23
 8005c06:	221f      	movs	r2, #31
 8005c08:	fa02 f303 	lsl.w	r3, r2, r3
 8005c0c:	43da      	mvns	r2, r3
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	400a      	ands	r2, r1
 8005c14:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	4618      	mov	r0, r3
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	685a      	ldr	r2, [r3, #4]
 8005c28:	4613      	mov	r3, r2
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	4413      	add	r3, r2
 8005c2e:	3b23      	subs	r3, #35	; 0x23
 8005c30:	fa00 f203 	lsl.w	r2, r0, r3
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	430a      	orrs	r2, r1
 8005c3a:	631a      	str	r2, [r3, #48]	; 0x30
 8005c3c:	e023      	b.n	8005c86 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	685a      	ldr	r2, [r3, #4]
 8005c48:	4613      	mov	r3, r2
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	4413      	add	r3, r2
 8005c4e:	3b41      	subs	r3, #65	; 0x41
 8005c50:	221f      	movs	r2, #31
 8005c52:	fa02 f303 	lsl.w	r3, r2, r3
 8005c56:	43da      	mvns	r2, r3
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	400a      	ands	r2, r1
 8005c5e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	685a      	ldr	r2, [r3, #4]
 8005c72:	4613      	mov	r3, r2
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	4413      	add	r3, r2
 8005c78:	3b41      	subs	r3, #65	; 0x41
 8005c7a:	fa00 f203 	lsl.w	r2, r0, r3
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	430a      	orrs	r2, r1
 8005c84:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005c86:	4b22      	ldr	r3, [pc, #136]	; (8005d10 <HAL_ADC_ConfigChannel+0x234>)
 8005c88:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a21      	ldr	r2, [pc, #132]	; (8005d14 <HAL_ADC_ConfigChannel+0x238>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d109      	bne.n	8005ca8 <HAL_ADC_ConfigChannel+0x1cc>
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	2b12      	cmp	r3, #18
 8005c9a:	d105      	bne.n	8005ca8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a19      	ldr	r2, [pc, #100]	; (8005d14 <HAL_ADC_ConfigChannel+0x238>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d123      	bne.n	8005cfa <HAL_ADC_ConfigChannel+0x21e>
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	2b10      	cmp	r3, #16
 8005cb8:	d003      	beq.n	8005cc2 <HAL_ADC_ConfigChannel+0x1e6>
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	2b11      	cmp	r3, #17
 8005cc0:	d11b      	bne.n	8005cfa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	2b10      	cmp	r3, #16
 8005cd4:	d111      	bne.n	8005cfa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005cd6:	4b10      	ldr	r3, [pc, #64]	; (8005d18 <HAL_ADC_ConfigChannel+0x23c>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a10      	ldr	r2, [pc, #64]	; (8005d1c <HAL_ADC_ConfigChannel+0x240>)
 8005cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8005ce0:	0c9a      	lsrs	r2, r3, #18
 8005ce2:	4613      	mov	r3, r2
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	4413      	add	r3, r2
 8005ce8:	005b      	lsls	r3, r3, #1
 8005cea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005cec:	e002      	b.n	8005cf4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	3b01      	subs	r3, #1
 8005cf2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d1f9      	bne.n	8005cee <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005d02:	2300      	movs	r3, #0
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3714      	adds	r7, #20
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr
 8005d10:	40012300 	.word	0x40012300
 8005d14:	40012000 	.word	0x40012000
 8005d18:	20000054 	.word	0x20000054
 8005d1c:	431bde83 	.word	0x431bde83

08005d20 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b085      	sub	sp, #20
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005d28:	4b79      	ldr	r3, [pc, #484]	; (8005f10 <ADC_Init+0x1f0>)
 8005d2a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	685a      	ldr	r2, [r3, #4]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	431a      	orrs	r2, r3
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	685a      	ldr	r2, [r3, #4]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d54:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	6859      	ldr	r1, [r3, #4]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	691b      	ldr	r3, [r3, #16]
 8005d60:	021a      	lsls	r2, r3, #8
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	430a      	orrs	r2, r1
 8005d68:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	685a      	ldr	r2, [r3, #4]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005d78:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	6859      	ldr	r1, [r3, #4]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	689a      	ldr	r2, [r3, #8]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	430a      	orrs	r2, r1
 8005d8a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	689a      	ldr	r2, [r3, #8]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d9a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	6899      	ldr	r1, [r3, #8]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	68da      	ldr	r2, [r3, #12]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	430a      	orrs	r2, r1
 8005dac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005db2:	4a58      	ldr	r2, [pc, #352]	; (8005f14 <ADC_Init+0x1f4>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d022      	beq.n	8005dfe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	689a      	ldr	r2, [r3, #8]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005dc6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	6899      	ldr	r1, [r3, #8]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	430a      	orrs	r2, r1
 8005dd8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	689a      	ldr	r2, [r3, #8]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005de8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	6899      	ldr	r1, [r3, #8]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	430a      	orrs	r2, r1
 8005dfa:	609a      	str	r2, [r3, #8]
 8005dfc:	e00f      	b.n	8005e1e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	689a      	ldr	r2, [r3, #8]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005e0c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	689a      	ldr	r2, [r3, #8]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005e1c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	689a      	ldr	r2, [r3, #8]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f022 0202 	bic.w	r2, r2, #2
 8005e2c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	6899      	ldr	r1, [r3, #8]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	7e1b      	ldrb	r3, [r3, #24]
 8005e38:	005a      	lsls	r2, r3, #1
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	430a      	orrs	r2, r1
 8005e40:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d01b      	beq.n	8005e84 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	685a      	ldr	r2, [r3, #4]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e5a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	685a      	ldr	r2, [r3, #4]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005e6a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	6859      	ldr	r1, [r3, #4]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e76:	3b01      	subs	r3, #1
 8005e78:	035a      	lsls	r2, r3, #13
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	430a      	orrs	r2, r1
 8005e80:	605a      	str	r2, [r3, #4]
 8005e82:	e007      	b.n	8005e94 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	685a      	ldr	r2, [r3, #4]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e92:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005ea2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	69db      	ldr	r3, [r3, #28]
 8005eae:	3b01      	subs	r3, #1
 8005eb0:	051a      	lsls	r2, r3, #20
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	430a      	orrs	r2, r1
 8005eb8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	689a      	ldr	r2, [r3, #8]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005ec8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	6899      	ldr	r1, [r3, #8]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005ed6:	025a      	lsls	r2, r3, #9
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	430a      	orrs	r2, r1
 8005ede:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	689a      	ldr	r2, [r3, #8]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005eee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	6899      	ldr	r1, [r3, #8]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	695b      	ldr	r3, [r3, #20]
 8005efa:	029a      	lsls	r2, r3, #10
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	430a      	orrs	r2, r1
 8005f02:	609a      	str	r2, [r3, #8]
}
 8005f04:	bf00      	nop
 8005f06:	3714      	adds	r7, #20
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr
 8005f10:	40012300 	.word	0x40012300
 8005f14:	0f000001 	.word	0x0f000001

08005f18 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b084      	sub	sp, #16
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f24:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d13c      	bne.n	8005fac <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f36:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d12b      	bne.n	8005fa4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d127      	bne.n	8005fa4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f5a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d006      	beq.n	8005f70 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d119      	bne.n	8005fa4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	685a      	ldr	r2, [r3, #4]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f022 0220 	bic.w	r2, r2, #32
 8005f7e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f84:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d105      	bne.n	8005fa4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f9c:	f043 0201 	orr.w	r2, r3, #1
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005fa4:	68f8      	ldr	r0, [r7, #12]
 8005fa6:	f7ff fd71 	bl	8005a8c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005faa:	e00e      	b.n	8005fca <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb0:	f003 0310 	and.w	r3, r3, #16
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d003      	beq.n	8005fc0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8005fb8:	68f8      	ldr	r0, [r7, #12]
 8005fba:	f7ff fd85 	bl	8005ac8 <HAL_ADC_ErrorCallback>
}
 8005fbe:	e004      	b.n	8005fca <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	4798      	blx	r3
}
 8005fca:	bf00      	nop
 8005fcc:	3710      	adds	r7, #16
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}

08005fd2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005fd2:	b580      	push	{r7, lr}
 8005fd4:	b084      	sub	sp, #16
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fde:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005fe0:	68f8      	ldr	r0, [r7, #12]
 8005fe2:	f7ff fd5d 	bl	8005aa0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005fe6:	bf00      	nop
 8005fe8:	3710      	adds	r7, #16
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}

08005fee <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8005fee:	b580      	push	{r7, lr}
 8005ff0:	b084      	sub	sp, #16
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ffa:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2240      	movs	r2, #64	; 0x40
 8006000:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006006:	f043 0204 	orr.w	r2, r3, #4
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800600e:	68f8      	ldr	r0, [r7, #12]
 8006010:	f7ff fd5a 	bl	8005ac8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006014:	bf00      	nop
 8006016:	3710      	adds	r7, #16
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8006024:	bf00      	nop
 8006026:	370c      	adds	r7, #12
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006030:	b480      	push	{r7}
 8006032:	b085      	sub	sp, #20
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f003 0307 	and.w	r3, r3, #7
 800603e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006040:	4b0c      	ldr	r3, [pc, #48]	; (8006074 <__NVIC_SetPriorityGrouping+0x44>)
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006046:	68ba      	ldr	r2, [r7, #8]
 8006048:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800604c:	4013      	ands	r3, r2
 800604e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006058:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800605c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006060:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006062:	4a04      	ldr	r2, [pc, #16]	; (8006074 <__NVIC_SetPriorityGrouping+0x44>)
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	60d3      	str	r3, [r2, #12]
}
 8006068:	bf00      	nop
 800606a:	3714      	adds	r7, #20
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr
 8006074:	e000ed00 	.word	0xe000ed00

08006078 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006078:	b480      	push	{r7}
 800607a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800607c:	4b04      	ldr	r3, [pc, #16]	; (8006090 <__NVIC_GetPriorityGrouping+0x18>)
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	0a1b      	lsrs	r3, r3, #8
 8006082:	f003 0307 	and.w	r3, r3, #7
}
 8006086:	4618      	mov	r0, r3
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr
 8006090:	e000ed00 	.word	0xe000ed00

08006094 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006094:	b480      	push	{r7}
 8006096:	b083      	sub	sp, #12
 8006098:	af00      	add	r7, sp, #0
 800609a:	4603      	mov	r3, r0
 800609c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800609e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	db0b      	blt.n	80060be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80060a6:	79fb      	ldrb	r3, [r7, #7]
 80060a8:	f003 021f 	and.w	r2, r3, #31
 80060ac:	4907      	ldr	r1, [pc, #28]	; (80060cc <__NVIC_EnableIRQ+0x38>)
 80060ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060b2:	095b      	lsrs	r3, r3, #5
 80060b4:	2001      	movs	r0, #1
 80060b6:	fa00 f202 	lsl.w	r2, r0, r2
 80060ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80060be:	bf00      	nop
 80060c0:	370c      	adds	r7, #12
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr
 80060ca:	bf00      	nop
 80060cc:	e000e100 	.word	0xe000e100

080060d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	4603      	mov	r3, r0
 80060d8:	6039      	str	r1, [r7, #0]
 80060da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80060dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	db0a      	blt.n	80060fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	b2da      	uxtb	r2, r3
 80060e8:	490c      	ldr	r1, [pc, #48]	; (800611c <__NVIC_SetPriority+0x4c>)
 80060ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060ee:	0112      	lsls	r2, r2, #4
 80060f0:	b2d2      	uxtb	r2, r2
 80060f2:	440b      	add	r3, r1
 80060f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80060f8:	e00a      	b.n	8006110 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	b2da      	uxtb	r2, r3
 80060fe:	4908      	ldr	r1, [pc, #32]	; (8006120 <__NVIC_SetPriority+0x50>)
 8006100:	79fb      	ldrb	r3, [r7, #7]
 8006102:	f003 030f 	and.w	r3, r3, #15
 8006106:	3b04      	subs	r3, #4
 8006108:	0112      	lsls	r2, r2, #4
 800610a:	b2d2      	uxtb	r2, r2
 800610c:	440b      	add	r3, r1
 800610e:	761a      	strb	r2, [r3, #24]
}
 8006110:	bf00      	nop
 8006112:	370c      	adds	r7, #12
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr
 800611c:	e000e100 	.word	0xe000e100
 8006120:	e000ed00 	.word	0xe000ed00

08006124 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006124:	b480      	push	{r7}
 8006126:	b089      	sub	sp, #36	; 0x24
 8006128:	af00      	add	r7, sp, #0
 800612a:	60f8      	str	r0, [r7, #12]
 800612c:	60b9      	str	r1, [r7, #8]
 800612e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f003 0307 	and.w	r3, r3, #7
 8006136:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006138:	69fb      	ldr	r3, [r7, #28]
 800613a:	f1c3 0307 	rsb	r3, r3, #7
 800613e:	2b04      	cmp	r3, #4
 8006140:	bf28      	it	cs
 8006142:	2304      	movcs	r3, #4
 8006144:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006146:	69fb      	ldr	r3, [r7, #28]
 8006148:	3304      	adds	r3, #4
 800614a:	2b06      	cmp	r3, #6
 800614c:	d902      	bls.n	8006154 <NVIC_EncodePriority+0x30>
 800614e:	69fb      	ldr	r3, [r7, #28]
 8006150:	3b03      	subs	r3, #3
 8006152:	e000      	b.n	8006156 <NVIC_EncodePriority+0x32>
 8006154:	2300      	movs	r3, #0
 8006156:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006158:	f04f 32ff 	mov.w	r2, #4294967295
 800615c:	69bb      	ldr	r3, [r7, #24]
 800615e:	fa02 f303 	lsl.w	r3, r2, r3
 8006162:	43da      	mvns	r2, r3
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	401a      	ands	r2, r3
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800616c:	f04f 31ff 	mov.w	r1, #4294967295
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	fa01 f303 	lsl.w	r3, r1, r3
 8006176:	43d9      	mvns	r1, r3
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800617c:	4313      	orrs	r3, r2
         );
}
 800617e:	4618      	mov	r0, r3
 8006180:	3724      	adds	r7, #36	; 0x24
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr
	...

0800618c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800618c:	b480      	push	{r7}
 800618e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006190:	f3bf 8f4f 	dsb	sy
}
 8006194:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8006196:	4b06      	ldr	r3, [pc, #24]	; (80061b0 <__NVIC_SystemReset+0x24>)
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800619e:	4904      	ldr	r1, [pc, #16]	; (80061b0 <__NVIC_SystemReset+0x24>)
 80061a0:	4b04      	ldr	r3, [pc, #16]	; (80061b4 <__NVIC_SystemReset+0x28>)
 80061a2:	4313      	orrs	r3, r2
 80061a4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80061a6:	f3bf 8f4f 	dsb	sy
}
 80061aa:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80061ac:	bf00      	nop
 80061ae:	e7fd      	b.n	80061ac <__NVIC_SystemReset+0x20>
 80061b0:	e000ed00 	.word	0xe000ed00
 80061b4:	05fa0004 	.word	0x05fa0004

080061b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b082      	sub	sp, #8
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	3b01      	subs	r3, #1
 80061c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80061c8:	d301      	bcc.n	80061ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80061ca:	2301      	movs	r3, #1
 80061cc:	e00f      	b.n	80061ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80061ce:	4a0a      	ldr	r2, [pc, #40]	; (80061f8 <SysTick_Config+0x40>)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	3b01      	subs	r3, #1
 80061d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80061d6:	210f      	movs	r1, #15
 80061d8:	f04f 30ff 	mov.w	r0, #4294967295
 80061dc:	f7ff ff78 	bl	80060d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80061e0:	4b05      	ldr	r3, [pc, #20]	; (80061f8 <SysTick_Config+0x40>)
 80061e2:	2200      	movs	r2, #0
 80061e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80061e6:	4b04      	ldr	r3, [pc, #16]	; (80061f8 <SysTick_Config+0x40>)
 80061e8:	2207      	movs	r2, #7
 80061ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80061ec:	2300      	movs	r3, #0
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3708      	adds	r7, #8
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	e000e010 	.word	0xe000e010

080061fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b082      	sub	sp, #8
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f7ff ff13 	bl	8006030 <__NVIC_SetPriorityGrouping>
}
 800620a:	bf00      	nop
 800620c:	3708      	adds	r7, #8
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}

08006212 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006212:	b580      	push	{r7, lr}
 8006214:	b086      	sub	sp, #24
 8006216:	af00      	add	r7, sp, #0
 8006218:	4603      	mov	r3, r0
 800621a:	60b9      	str	r1, [r7, #8]
 800621c:	607a      	str	r2, [r7, #4]
 800621e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006220:	2300      	movs	r3, #0
 8006222:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006224:	f7ff ff28 	bl	8006078 <__NVIC_GetPriorityGrouping>
 8006228:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	68b9      	ldr	r1, [r7, #8]
 800622e:	6978      	ldr	r0, [r7, #20]
 8006230:	f7ff ff78 	bl	8006124 <NVIC_EncodePriority>
 8006234:	4602      	mov	r2, r0
 8006236:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800623a:	4611      	mov	r1, r2
 800623c:	4618      	mov	r0, r3
 800623e:	f7ff ff47 	bl	80060d0 <__NVIC_SetPriority>
}
 8006242:	bf00      	nop
 8006244:	3718      	adds	r7, #24
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}

0800624a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800624a:	b580      	push	{r7, lr}
 800624c:	b082      	sub	sp, #8
 800624e:	af00      	add	r7, sp, #0
 8006250:	4603      	mov	r3, r0
 8006252:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006258:	4618      	mov	r0, r3
 800625a:	f7ff ff1b 	bl	8006094 <__NVIC_EnableIRQ>
}
 800625e:	bf00      	nop
 8006260:	3708      	adds	r7, #8
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}

08006266 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8006266:	b580      	push	{r7, lr}
 8006268:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800626a:	f7ff ff8f 	bl	800618c <__NVIC_SystemReset>

0800626e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800626e:	b580      	push	{r7, lr}
 8006270:	b082      	sub	sp, #8
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f7ff ff9e 	bl	80061b8 <SysTick_Config>
 800627c:	4603      	mov	r3, r0
}
 800627e:	4618      	mov	r0, r3
 8006280:	3708      	adds	r7, #8
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
	...

08006288 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b086      	sub	sp, #24
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006290:	2300      	movs	r3, #0
 8006292:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006294:	f7ff f956 	bl	8005544 <HAL_GetTick>
 8006298:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d101      	bne.n	80062a4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	e099      	b.n	80063d8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2202      	movs	r2, #2
 80062a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f022 0201 	bic.w	r2, r2, #1
 80062c2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80062c4:	e00f      	b.n	80062e6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80062c6:	f7ff f93d 	bl	8005544 <HAL_GetTick>
 80062ca:	4602      	mov	r2, r0
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	1ad3      	subs	r3, r2, r3
 80062d0:	2b05      	cmp	r3, #5
 80062d2:	d908      	bls.n	80062e6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2220      	movs	r2, #32
 80062d8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2203      	movs	r2, #3
 80062de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80062e2:	2303      	movs	r3, #3
 80062e4:	e078      	b.n	80063d8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f003 0301 	and.w	r3, r3, #1
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d1e8      	bne.n	80062c6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80062fc:	697a      	ldr	r2, [r7, #20]
 80062fe:	4b38      	ldr	r3, [pc, #224]	; (80063e0 <HAL_DMA_Init+0x158>)
 8006300:	4013      	ands	r3, r2
 8006302:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	685a      	ldr	r2, [r3, #4]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006312:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	691b      	ldr	r3, [r3, #16]
 8006318:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800631e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	699b      	ldr	r3, [r3, #24]
 8006324:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800632a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6a1b      	ldr	r3, [r3, #32]
 8006330:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006332:	697a      	ldr	r2, [r7, #20]
 8006334:	4313      	orrs	r3, r2
 8006336:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633c:	2b04      	cmp	r3, #4
 800633e:	d107      	bne.n	8006350 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006348:	4313      	orrs	r3, r2
 800634a:	697a      	ldr	r2, [r7, #20]
 800634c:	4313      	orrs	r3, r2
 800634e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	697a      	ldr	r2, [r7, #20]
 8006356:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	695b      	ldr	r3, [r3, #20]
 800635e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	f023 0307 	bic.w	r3, r3, #7
 8006366:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636c:	697a      	ldr	r2, [r7, #20]
 800636e:	4313      	orrs	r3, r2
 8006370:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006376:	2b04      	cmp	r3, #4
 8006378:	d117      	bne.n	80063aa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800637e:	697a      	ldr	r2, [r7, #20]
 8006380:	4313      	orrs	r3, r2
 8006382:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006388:	2b00      	cmp	r3, #0
 800638a:	d00e      	beq.n	80063aa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f000 fb01 	bl	8006994 <DMA_CheckFifoParam>
 8006392:	4603      	mov	r3, r0
 8006394:	2b00      	cmp	r3, #0
 8006396:	d008      	beq.n	80063aa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2240      	movs	r2, #64	; 0x40
 800639c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2201      	movs	r2, #1
 80063a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80063a6:	2301      	movs	r3, #1
 80063a8:	e016      	b.n	80063d8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	697a      	ldr	r2, [r7, #20]
 80063b0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f000 fab8 	bl	8006928 <DMA_CalcBaseAndBitshift>
 80063b8:	4603      	mov	r3, r0
 80063ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063c0:	223f      	movs	r2, #63	; 0x3f
 80063c2:	409a      	lsls	r2, r3
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2201      	movs	r2, #1
 80063d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80063d6:	2300      	movs	r3, #0
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3718      	adds	r7, #24
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}
 80063e0:	f010803f 	.word	0xf010803f

080063e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b086      	sub	sp, #24
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	60f8      	str	r0, [r7, #12]
 80063ec:	60b9      	str	r1, [r7, #8]
 80063ee:	607a      	str	r2, [r7, #4]
 80063f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063f2:	2300      	movs	r3, #0
 80063f4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063fa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006402:	2b01      	cmp	r3, #1
 8006404:	d101      	bne.n	800640a <HAL_DMA_Start_IT+0x26>
 8006406:	2302      	movs	r3, #2
 8006408:	e040      	b.n	800648c <HAL_DMA_Start_IT+0xa8>
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2201      	movs	r2, #1
 800640e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006418:	b2db      	uxtb	r3, r3
 800641a:	2b01      	cmp	r3, #1
 800641c:	d12f      	bne.n	800647e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2202      	movs	r2, #2
 8006422:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2200      	movs	r2, #0
 800642a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	68b9      	ldr	r1, [r7, #8]
 8006432:	68f8      	ldr	r0, [r7, #12]
 8006434:	f000 fa4a 	bl	80068cc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800643c:	223f      	movs	r2, #63	; 0x3f
 800643e:	409a      	lsls	r2, r3
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f042 0216 	orr.w	r2, r2, #22
 8006452:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006458:	2b00      	cmp	r3, #0
 800645a:	d007      	beq.n	800646c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f042 0208 	orr.w	r2, r2, #8
 800646a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f042 0201 	orr.w	r2, r2, #1
 800647a:	601a      	str	r2, [r3, #0]
 800647c:	e005      	b.n	800648a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2200      	movs	r2, #0
 8006482:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006486:	2302      	movs	r3, #2
 8006488:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800648a:	7dfb      	ldrb	r3, [r7, #23]
}
 800648c:	4618      	mov	r0, r3
 800648e:	3718      	adds	r7, #24
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}

08006494 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b084      	sub	sp, #16
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064a0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80064a2:	f7ff f84f 	bl	8005544 <HAL_GetTick>
 80064a6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80064ae:	b2db      	uxtb	r3, r3
 80064b0:	2b02      	cmp	r3, #2
 80064b2:	d008      	beq.n	80064c6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2280      	movs	r2, #128	; 0x80
 80064b8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2200      	movs	r2, #0
 80064be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	e052      	b.n	800656c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f022 0216 	bic.w	r2, r2, #22
 80064d4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	695a      	ldr	r2, [r3, #20]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80064e4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d103      	bne.n	80064f6 <HAL_DMA_Abort+0x62>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d007      	beq.n	8006506 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f022 0208 	bic.w	r2, r2, #8
 8006504:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f022 0201 	bic.w	r2, r2, #1
 8006514:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006516:	e013      	b.n	8006540 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006518:	f7ff f814 	bl	8005544 <HAL_GetTick>
 800651c:	4602      	mov	r2, r0
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	1ad3      	subs	r3, r2, r3
 8006522:	2b05      	cmp	r3, #5
 8006524:	d90c      	bls.n	8006540 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2220      	movs	r2, #32
 800652a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2203      	movs	r2, #3
 8006530:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800653c:	2303      	movs	r3, #3
 800653e:	e015      	b.n	800656c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f003 0301 	and.w	r3, r3, #1
 800654a:	2b00      	cmp	r3, #0
 800654c:	d1e4      	bne.n	8006518 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006552:	223f      	movs	r2, #63	; 0x3f
 8006554:	409a      	lsls	r2, r3
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2201      	movs	r2, #1
 800655e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800656a:	2300      	movs	r3, #0
}
 800656c:	4618      	mov	r0, r3
 800656e:	3710      	adds	r7, #16
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}

08006574 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006582:	b2db      	uxtb	r3, r3
 8006584:	2b02      	cmp	r3, #2
 8006586:	d004      	beq.n	8006592 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2280      	movs	r2, #128	; 0x80
 800658c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	e00c      	b.n	80065ac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2205      	movs	r2, #5
 8006596:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f022 0201 	bic.w	r2, r2, #1
 80065a8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80065aa:	2300      	movs	r3, #0
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	370c      	adds	r7, #12
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr

080065b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b086      	sub	sp, #24
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80065c0:	2300      	movs	r3, #0
 80065c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80065c4:	4b92      	ldr	r3, [pc, #584]	; (8006810 <HAL_DMA_IRQHandler+0x258>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a92      	ldr	r2, [pc, #584]	; (8006814 <HAL_DMA_IRQHandler+0x25c>)
 80065ca:	fba2 2303 	umull	r2, r3, r2, r3
 80065ce:	0a9b      	lsrs	r3, r3, #10
 80065d0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065d6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065e2:	2208      	movs	r2, #8
 80065e4:	409a      	lsls	r2, r3
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	4013      	ands	r3, r2
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d01a      	beq.n	8006624 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f003 0304 	and.w	r3, r3, #4
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d013      	beq.n	8006624 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f022 0204 	bic.w	r2, r2, #4
 800660a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006610:	2208      	movs	r2, #8
 8006612:	409a      	lsls	r2, r3
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800661c:	f043 0201 	orr.w	r2, r3, #1
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006628:	2201      	movs	r2, #1
 800662a:	409a      	lsls	r2, r3
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	4013      	ands	r3, r2
 8006630:	2b00      	cmp	r3, #0
 8006632:	d012      	beq.n	800665a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	695b      	ldr	r3, [r3, #20]
 800663a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800663e:	2b00      	cmp	r3, #0
 8006640:	d00b      	beq.n	800665a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006646:	2201      	movs	r2, #1
 8006648:	409a      	lsls	r2, r3
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006652:	f043 0202 	orr.w	r2, r3, #2
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800665e:	2204      	movs	r2, #4
 8006660:	409a      	lsls	r2, r3
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	4013      	ands	r3, r2
 8006666:	2b00      	cmp	r3, #0
 8006668:	d012      	beq.n	8006690 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f003 0302 	and.w	r3, r3, #2
 8006674:	2b00      	cmp	r3, #0
 8006676:	d00b      	beq.n	8006690 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800667c:	2204      	movs	r2, #4
 800667e:	409a      	lsls	r2, r3
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006688:	f043 0204 	orr.w	r2, r3, #4
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006694:	2210      	movs	r2, #16
 8006696:	409a      	lsls	r2, r3
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	4013      	ands	r3, r2
 800669c:	2b00      	cmp	r3, #0
 800669e:	d043      	beq.n	8006728 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f003 0308 	and.w	r3, r3, #8
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d03c      	beq.n	8006728 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066b2:	2210      	movs	r2, #16
 80066b4:	409a      	lsls	r2, r3
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d018      	beq.n	80066fa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d108      	bne.n	80066e8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d024      	beq.n	8006728 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	4798      	blx	r3
 80066e6:	e01f      	b.n	8006728 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d01b      	beq.n	8006728 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	4798      	blx	r3
 80066f8:	e016      	b.n	8006728 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006704:	2b00      	cmp	r3, #0
 8006706:	d107      	bne.n	8006718 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f022 0208 	bic.w	r2, r2, #8
 8006716:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800671c:	2b00      	cmp	r3, #0
 800671e:	d003      	beq.n	8006728 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800672c:	2220      	movs	r2, #32
 800672e:	409a      	lsls	r2, r3
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	4013      	ands	r3, r2
 8006734:	2b00      	cmp	r3, #0
 8006736:	f000 808e 	beq.w	8006856 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f003 0310 	and.w	r3, r3, #16
 8006744:	2b00      	cmp	r3, #0
 8006746:	f000 8086 	beq.w	8006856 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800674e:	2220      	movs	r2, #32
 8006750:	409a      	lsls	r2, r3
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800675c:	b2db      	uxtb	r3, r3
 800675e:	2b05      	cmp	r3, #5
 8006760:	d136      	bne.n	80067d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f022 0216 	bic.w	r2, r2, #22
 8006770:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	695a      	ldr	r2, [r3, #20]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006780:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006786:	2b00      	cmp	r3, #0
 8006788:	d103      	bne.n	8006792 <HAL_DMA_IRQHandler+0x1da>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800678e:	2b00      	cmp	r3, #0
 8006790:	d007      	beq.n	80067a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	681a      	ldr	r2, [r3, #0]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f022 0208 	bic.w	r2, r2, #8
 80067a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067a6:	223f      	movs	r2, #63	; 0x3f
 80067a8:	409a      	lsls	r2, r3
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2201      	movs	r2, #1
 80067b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2200      	movs	r2, #0
 80067ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d07d      	beq.n	80068c2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	4798      	blx	r3
        }
        return;
 80067ce:	e078      	b.n	80068c2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d01c      	beq.n	8006818 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d108      	bne.n	80067fe <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d030      	beq.n	8006856 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	4798      	blx	r3
 80067fc:	e02b      	b.n	8006856 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006802:	2b00      	cmp	r3, #0
 8006804:	d027      	beq.n	8006856 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	4798      	blx	r3
 800680e:	e022      	b.n	8006856 <HAL_DMA_IRQHandler+0x29e>
 8006810:	20000054 	.word	0x20000054
 8006814:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006822:	2b00      	cmp	r3, #0
 8006824:	d10f      	bne.n	8006846 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f022 0210 	bic.w	r2, r2, #16
 8006834:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2201      	movs	r2, #1
 800683a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800684a:	2b00      	cmp	r3, #0
 800684c:	d003      	beq.n	8006856 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800685a:	2b00      	cmp	r3, #0
 800685c:	d032      	beq.n	80068c4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006862:	f003 0301 	and.w	r3, r3, #1
 8006866:	2b00      	cmp	r3, #0
 8006868:	d022      	beq.n	80068b0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2205      	movs	r2, #5
 800686e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f022 0201 	bic.w	r2, r2, #1
 8006880:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	3301      	adds	r3, #1
 8006886:	60bb      	str	r3, [r7, #8]
 8006888:	697a      	ldr	r2, [r7, #20]
 800688a:	429a      	cmp	r2, r3
 800688c:	d307      	bcc.n	800689e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f003 0301 	and.w	r3, r3, #1
 8006898:	2b00      	cmp	r3, #0
 800689a:	d1f2      	bne.n	8006882 <HAL_DMA_IRQHandler+0x2ca>
 800689c:	e000      	b.n	80068a0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800689e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2201      	movs	r2, #1
 80068a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d005      	beq.n	80068c4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	4798      	blx	r3
 80068c0:	e000      	b.n	80068c4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80068c2:	bf00      	nop
    }
  }
}
 80068c4:	3718      	adds	r7, #24
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	bf00      	nop

080068cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b085      	sub	sp, #20
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	60f8      	str	r0, [r7, #12]
 80068d4:	60b9      	str	r1, [r7, #8]
 80068d6:	607a      	str	r2, [r7, #4]
 80068d8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80068e8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	683a      	ldr	r2, [r7, #0]
 80068f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	2b40      	cmp	r3, #64	; 0x40
 80068f8:	d108      	bne.n	800690c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	68ba      	ldr	r2, [r7, #8]
 8006908:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800690a:	e007      	b.n	800691c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	68ba      	ldr	r2, [r7, #8]
 8006912:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	60da      	str	r2, [r3, #12]
}
 800691c:	bf00      	nop
 800691e:	3714      	adds	r7, #20
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr

08006928 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006928:	b480      	push	{r7}
 800692a:	b085      	sub	sp, #20
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	b2db      	uxtb	r3, r3
 8006936:	3b10      	subs	r3, #16
 8006938:	4a14      	ldr	r2, [pc, #80]	; (800698c <DMA_CalcBaseAndBitshift+0x64>)
 800693a:	fba2 2303 	umull	r2, r3, r2, r3
 800693e:	091b      	lsrs	r3, r3, #4
 8006940:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006942:	4a13      	ldr	r2, [pc, #76]	; (8006990 <DMA_CalcBaseAndBitshift+0x68>)
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	4413      	add	r3, r2
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	461a      	mov	r2, r3
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2b03      	cmp	r3, #3
 8006954:	d909      	bls.n	800696a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800695e:	f023 0303 	bic.w	r3, r3, #3
 8006962:	1d1a      	adds	r2, r3, #4
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	659a      	str	r2, [r3, #88]	; 0x58
 8006968:	e007      	b.n	800697a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006972:	f023 0303 	bic.w	r3, r3, #3
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800697e:	4618      	mov	r0, r3
 8006980:	3714      	adds	r7, #20
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr
 800698a:	bf00      	nop
 800698c:	aaaaaaab 	.word	0xaaaaaaab
 8006990:	0800f5e8 	.word	0x0800f5e8

08006994 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006994:	b480      	push	{r7}
 8006996:	b085      	sub	sp, #20
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800699c:	2300      	movs	r3, #0
 800699e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069a4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	699b      	ldr	r3, [r3, #24]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d11f      	bne.n	80069ee <DMA_CheckFifoParam+0x5a>
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	2b03      	cmp	r3, #3
 80069b2:	d856      	bhi.n	8006a62 <DMA_CheckFifoParam+0xce>
 80069b4:	a201      	add	r2, pc, #4	; (adr r2, 80069bc <DMA_CheckFifoParam+0x28>)
 80069b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ba:	bf00      	nop
 80069bc:	080069cd 	.word	0x080069cd
 80069c0:	080069df 	.word	0x080069df
 80069c4:	080069cd 	.word	0x080069cd
 80069c8:	08006a63 	.word	0x08006a63
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d046      	beq.n	8006a66 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80069dc:	e043      	b.n	8006a66 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80069e6:	d140      	bne.n	8006a6a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80069e8:	2301      	movs	r3, #1
 80069ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80069ec:	e03d      	b.n	8006a6a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	699b      	ldr	r3, [r3, #24]
 80069f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069f6:	d121      	bne.n	8006a3c <DMA_CheckFifoParam+0xa8>
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	2b03      	cmp	r3, #3
 80069fc:	d837      	bhi.n	8006a6e <DMA_CheckFifoParam+0xda>
 80069fe:	a201      	add	r2, pc, #4	; (adr r2, 8006a04 <DMA_CheckFifoParam+0x70>)
 8006a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a04:	08006a15 	.word	0x08006a15
 8006a08:	08006a1b 	.word	0x08006a1b
 8006a0c:	08006a15 	.word	0x08006a15
 8006a10:	08006a2d 	.word	0x08006a2d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	73fb      	strb	r3, [r7, #15]
      break;
 8006a18:	e030      	b.n	8006a7c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d025      	beq.n	8006a72 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a2a:	e022      	b.n	8006a72 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a30:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006a34:	d11f      	bne.n	8006a76 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006a36:	2301      	movs	r3, #1
 8006a38:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006a3a:	e01c      	b.n	8006a76 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	d903      	bls.n	8006a4a <DMA_CheckFifoParam+0xb6>
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	2b03      	cmp	r3, #3
 8006a46:	d003      	beq.n	8006a50 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006a48:	e018      	b.n	8006a7c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	73fb      	strb	r3, [r7, #15]
      break;
 8006a4e:	e015      	b.n	8006a7c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d00e      	beq.n	8006a7a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	73fb      	strb	r3, [r7, #15]
      break;
 8006a60:	e00b      	b.n	8006a7a <DMA_CheckFifoParam+0xe6>
      break;
 8006a62:	bf00      	nop
 8006a64:	e00a      	b.n	8006a7c <DMA_CheckFifoParam+0xe8>
      break;
 8006a66:	bf00      	nop
 8006a68:	e008      	b.n	8006a7c <DMA_CheckFifoParam+0xe8>
      break;
 8006a6a:	bf00      	nop
 8006a6c:	e006      	b.n	8006a7c <DMA_CheckFifoParam+0xe8>
      break;
 8006a6e:	bf00      	nop
 8006a70:	e004      	b.n	8006a7c <DMA_CheckFifoParam+0xe8>
      break;
 8006a72:	bf00      	nop
 8006a74:	e002      	b.n	8006a7c <DMA_CheckFifoParam+0xe8>
      break;   
 8006a76:	bf00      	nop
 8006a78:	e000      	b.n	8006a7c <DMA_CheckFifoParam+0xe8>
      break;
 8006a7a:	bf00      	nop
    }
  } 
  
  return status; 
 8006a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3714      	adds	r7, #20
 8006a82:	46bd      	mov	sp, r7
 8006a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a88:	4770      	bx	lr
 8006a8a:	bf00      	nop

08006a8c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b086      	sub	sp, #24
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	60f8      	str	r0, [r7, #12]
 8006a94:	60b9      	str	r1, [r7, #8]
 8006a96:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006a9e:	4b23      	ldr	r3, [pc, #140]	; (8006b2c <HAL_FLASH_Program+0xa0>)
 8006aa0:	7e1b      	ldrb	r3, [r3, #24]
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d101      	bne.n	8006aaa <HAL_FLASH_Program+0x1e>
 8006aa6:	2302      	movs	r3, #2
 8006aa8:	e03b      	b.n	8006b22 <HAL_FLASH_Program+0x96>
 8006aaa:	4b20      	ldr	r3, [pc, #128]	; (8006b2c <HAL_FLASH_Program+0xa0>)
 8006aac:	2201      	movs	r2, #1
 8006aae:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006ab0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006ab4:	f000 f87c 	bl	8006bb0 <FLASH_WaitForLastOperation>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8006abc:	7dfb      	ldrb	r3, [r7, #23]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d12b      	bne.n	8006b1a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d105      	bne.n	8006ad4 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8006ac8:	783b      	ldrb	r3, [r7, #0]
 8006aca:	4619      	mov	r1, r3
 8006acc:	68b8      	ldr	r0, [r7, #8]
 8006ace:	f000 f927 	bl	8006d20 <FLASH_Program_Byte>
 8006ad2:	e016      	b.n	8006b02 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d105      	bne.n	8006ae6 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8006ada:	883b      	ldrh	r3, [r7, #0]
 8006adc:	4619      	mov	r1, r3
 8006ade:	68b8      	ldr	r0, [r7, #8]
 8006ae0:	f000 f8fa 	bl	8006cd8 <FLASH_Program_HalfWord>
 8006ae4:	e00d      	b.n	8006b02 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2b02      	cmp	r3, #2
 8006aea:	d105      	bne.n	8006af8 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	4619      	mov	r1, r3
 8006af0:	68b8      	ldr	r0, [r7, #8]
 8006af2:	f000 f8cf 	bl	8006c94 <FLASH_Program_Word>
 8006af6:	e004      	b.n	8006b02 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8006af8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006afc:	68b8      	ldr	r0, [r7, #8]
 8006afe:	f000 f897 	bl	8006c30 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006b02:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006b06:	f000 f853 	bl	8006bb0 <FLASH_WaitForLastOperation>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8006b0e:	4b08      	ldr	r3, [pc, #32]	; (8006b30 <HAL_FLASH_Program+0xa4>)
 8006b10:	691b      	ldr	r3, [r3, #16]
 8006b12:	4a07      	ldr	r2, [pc, #28]	; (8006b30 <HAL_FLASH_Program+0xa4>)
 8006b14:	f023 0301 	bic.w	r3, r3, #1
 8006b18:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006b1a:	4b04      	ldr	r3, [pc, #16]	; (8006b2c <HAL_FLASH_Program+0xa0>)
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8006b20:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3718      	adds	r7, #24
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}
 8006b2a:	bf00      	nop
 8006b2c:	20000738 	.word	0x20000738
 8006b30:	40023c00 	.word	0x40023c00

08006b34 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b083      	sub	sp, #12
 8006b38:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8006b3e:	4b0b      	ldr	r3, [pc, #44]	; (8006b6c <HAL_FLASH_Unlock+0x38>)
 8006b40:	691b      	ldr	r3, [r3, #16]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	da0b      	bge.n	8006b5e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8006b46:	4b09      	ldr	r3, [pc, #36]	; (8006b6c <HAL_FLASH_Unlock+0x38>)
 8006b48:	4a09      	ldr	r2, [pc, #36]	; (8006b70 <HAL_FLASH_Unlock+0x3c>)
 8006b4a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006b4c:	4b07      	ldr	r3, [pc, #28]	; (8006b6c <HAL_FLASH_Unlock+0x38>)
 8006b4e:	4a09      	ldr	r2, [pc, #36]	; (8006b74 <HAL_FLASH_Unlock+0x40>)
 8006b50:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8006b52:	4b06      	ldr	r3, [pc, #24]	; (8006b6c <HAL_FLASH_Unlock+0x38>)
 8006b54:	691b      	ldr	r3, [r3, #16]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	da01      	bge.n	8006b5e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8006b5e:	79fb      	ldrb	r3, [r7, #7]
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	370c      	adds	r7, #12
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr
 8006b6c:	40023c00 	.word	0x40023c00
 8006b70:	45670123 	.word	0x45670123
 8006b74:	cdef89ab 	.word	0xcdef89ab

08006b78 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8006b7c:	4b05      	ldr	r3, [pc, #20]	; (8006b94 <HAL_FLASH_Lock+0x1c>)
 8006b7e:	691b      	ldr	r3, [r3, #16]
 8006b80:	4a04      	ldr	r2, [pc, #16]	; (8006b94 <HAL_FLASH_Lock+0x1c>)
 8006b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b86:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8006b88:	2300      	movs	r3, #0
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr
 8006b94:	40023c00 	.word	0x40023c00

08006b98 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 8006b98:	b480      	push	{r7}
 8006b9a:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8006b9c:	4b03      	ldr	r3, [pc, #12]	; (8006bac <HAL_FLASH_GetError+0x14>)
 8006b9e:	69db      	ldr	r3, [r3, #28]
}  
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba8:	4770      	bx	lr
 8006baa:	bf00      	nop
 8006bac:	20000738 	.word	0x20000738

08006bb0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b084      	sub	sp, #16
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006bbc:	4b1a      	ldr	r3, [pc, #104]	; (8006c28 <FLASH_WaitForLastOperation+0x78>)
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8006bc2:	f7fe fcbf 	bl	8005544 <HAL_GetTick>
 8006bc6:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8006bc8:	e010      	b.n	8006bec <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bd0:	d00c      	beq.n	8006bec <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d007      	beq.n	8006be8 <FLASH_WaitForLastOperation+0x38>
 8006bd8:	f7fe fcb4 	bl	8005544 <HAL_GetTick>
 8006bdc:	4602      	mov	r2, r0
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	1ad3      	subs	r3, r2, r3
 8006be2:	687a      	ldr	r2, [r7, #4]
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d201      	bcs.n	8006bec <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8006be8:	2303      	movs	r3, #3
 8006bea:	e019      	b.n	8006c20 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8006bec:	4b0f      	ldr	r3, [pc, #60]	; (8006c2c <FLASH_WaitForLastOperation+0x7c>)
 8006bee:	68db      	ldr	r3, [r3, #12]
 8006bf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d1e8      	bne.n	8006bca <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8006bf8:	4b0c      	ldr	r3, [pc, #48]	; (8006c2c <FLASH_WaitForLastOperation+0x7c>)
 8006bfa:	68db      	ldr	r3, [r3, #12]
 8006bfc:	f003 0301 	and.w	r3, r3, #1
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d002      	beq.n	8006c0a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8006c04:	4b09      	ldr	r3, [pc, #36]	; (8006c2c <FLASH_WaitForLastOperation+0x7c>)
 8006c06:	2201      	movs	r2, #1
 8006c08:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8006c0a:	4b08      	ldr	r3, [pc, #32]	; (8006c2c <FLASH_WaitForLastOperation+0x7c>)
 8006c0c:	68db      	ldr	r3, [r3, #12]
 8006c0e:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d003      	beq.n	8006c1e <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8006c16:	f000 f8a5 	bl	8006d64 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	e000      	b.n	8006c20 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8006c1e:	2300      	movs	r3, #0
  
}  
 8006c20:	4618      	mov	r0, r3
 8006c22:	3710      	adds	r7, #16
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}
 8006c28:	20000738 	.word	0x20000738
 8006c2c:	40023c00 	.word	0x40023c00

08006c30 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b085      	sub	sp, #20
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	60f8      	str	r0, [r7, #12]
 8006c38:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006c3c:	4b14      	ldr	r3, [pc, #80]	; (8006c90 <FLASH_Program_DoubleWord+0x60>)
 8006c3e:	691b      	ldr	r3, [r3, #16]
 8006c40:	4a13      	ldr	r2, [pc, #76]	; (8006c90 <FLASH_Program_DoubleWord+0x60>)
 8006c42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c46:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8006c48:	4b11      	ldr	r3, [pc, #68]	; (8006c90 <FLASH_Program_DoubleWord+0x60>)
 8006c4a:	691b      	ldr	r3, [r3, #16]
 8006c4c:	4a10      	ldr	r2, [pc, #64]	; (8006c90 <FLASH_Program_DoubleWord+0x60>)
 8006c4e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006c52:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006c54:	4b0e      	ldr	r3, [pc, #56]	; (8006c90 <FLASH_Program_DoubleWord+0x60>)
 8006c56:	691b      	ldr	r3, [r3, #16]
 8006c58:	4a0d      	ldr	r2, [pc, #52]	; (8006c90 <FLASH_Program_DoubleWord+0x60>)
 8006c5a:	f043 0301 	orr.w	r3, r3, #1
 8006c5e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	683a      	ldr	r2, [r7, #0]
 8006c64:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8006c66:	f3bf 8f6f 	isb	sy
}
 8006c6a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8006c6c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c70:	f04f 0200 	mov.w	r2, #0
 8006c74:	f04f 0300 	mov.w	r3, #0
 8006c78:	000a      	movs	r2, r1
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	68f9      	ldr	r1, [r7, #12]
 8006c7e:	3104      	adds	r1, #4
 8006c80:	4613      	mov	r3, r2
 8006c82:	600b      	str	r3, [r1, #0]
}
 8006c84:	bf00      	nop
 8006c86:	3714      	adds	r7, #20
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr
 8006c90:	40023c00 	.word	0x40023c00

08006c94 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b083      	sub	sp, #12
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006c9e:	4b0d      	ldr	r3, [pc, #52]	; (8006cd4 <FLASH_Program_Word+0x40>)
 8006ca0:	691b      	ldr	r3, [r3, #16]
 8006ca2:	4a0c      	ldr	r2, [pc, #48]	; (8006cd4 <FLASH_Program_Word+0x40>)
 8006ca4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ca8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8006caa:	4b0a      	ldr	r3, [pc, #40]	; (8006cd4 <FLASH_Program_Word+0x40>)
 8006cac:	691b      	ldr	r3, [r3, #16]
 8006cae:	4a09      	ldr	r2, [pc, #36]	; (8006cd4 <FLASH_Program_Word+0x40>)
 8006cb0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006cb4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006cb6:	4b07      	ldr	r3, [pc, #28]	; (8006cd4 <FLASH_Program_Word+0x40>)
 8006cb8:	691b      	ldr	r3, [r3, #16]
 8006cba:	4a06      	ldr	r2, [pc, #24]	; (8006cd4 <FLASH_Program_Word+0x40>)
 8006cbc:	f043 0301 	orr.w	r3, r3, #1
 8006cc0:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	683a      	ldr	r2, [r7, #0]
 8006cc6:	601a      	str	r2, [r3, #0]
}
 8006cc8:	bf00      	nop
 8006cca:	370c      	adds	r7, #12
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr
 8006cd4:	40023c00 	.word	0x40023c00

08006cd8 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	460b      	mov	r3, r1
 8006ce2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006ce4:	4b0d      	ldr	r3, [pc, #52]	; (8006d1c <FLASH_Program_HalfWord+0x44>)
 8006ce6:	691b      	ldr	r3, [r3, #16]
 8006ce8:	4a0c      	ldr	r2, [pc, #48]	; (8006d1c <FLASH_Program_HalfWord+0x44>)
 8006cea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8006cf0:	4b0a      	ldr	r3, [pc, #40]	; (8006d1c <FLASH_Program_HalfWord+0x44>)
 8006cf2:	691b      	ldr	r3, [r3, #16]
 8006cf4:	4a09      	ldr	r2, [pc, #36]	; (8006d1c <FLASH_Program_HalfWord+0x44>)
 8006cf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cfa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006cfc:	4b07      	ldr	r3, [pc, #28]	; (8006d1c <FLASH_Program_HalfWord+0x44>)
 8006cfe:	691b      	ldr	r3, [r3, #16]
 8006d00:	4a06      	ldr	r2, [pc, #24]	; (8006d1c <FLASH_Program_HalfWord+0x44>)
 8006d02:	f043 0301 	orr.w	r3, r3, #1
 8006d06:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	887a      	ldrh	r2, [r7, #2]
 8006d0c:	801a      	strh	r2, [r3, #0]
}
 8006d0e:	bf00      	nop
 8006d10:	370c      	adds	r7, #12
 8006d12:	46bd      	mov	sp, r7
 8006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d18:	4770      	bx	lr
 8006d1a:	bf00      	nop
 8006d1c:	40023c00 	.word	0x40023c00

08006d20 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b083      	sub	sp, #12
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	460b      	mov	r3, r1
 8006d2a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006d2c:	4b0c      	ldr	r3, [pc, #48]	; (8006d60 <FLASH_Program_Byte+0x40>)
 8006d2e:	691b      	ldr	r3, [r3, #16]
 8006d30:	4a0b      	ldr	r2, [pc, #44]	; (8006d60 <FLASH_Program_Byte+0x40>)
 8006d32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d36:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8006d38:	4b09      	ldr	r3, [pc, #36]	; (8006d60 <FLASH_Program_Byte+0x40>)
 8006d3a:	4a09      	ldr	r2, [pc, #36]	; (8006d60 <FLASH_Program_Byte+0x40>)
 8006d3c:	691b      	ldr	r3, [r3, #16]
 8006d3e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006d40:	4b07      	ldr	r3, [pc, #28]	; (8006d60 <FLASH_Program_Byte+0x40>)
 8006d42:	691b      	ldr	r3, [r3, #16]
 8006d44:	4a06      	ldr	r2, [pc, #24]	; (8006d60 <FLASH_Program_Byte+0x40>)
 8006d46:	f043 0301 	orr.w	r3, r3, #1
 8006d4a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	78fa      	ldrb	r2, [r7, #3]
 8006d50:	701a      	strb	r2, [r3, #0]
}
 8006d52:	bf00      	nop
 8006d54:	370c      	adds	r7, #12
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr
 8006d5e:	bf00      	nop
 8006d60:	40023c00 	.word	0x40023c00

08006d64 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8006d64:	b480      	push	{r7}
 8006d66:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8006d68:	4b2f      	ldr	r3, [pc, #188]	; (8006e28 <FLASH_SetErrorCode+0xc4>)
 8006d6a:	68db      	ldr	r3, [r3, #12]
 8006d6c:	f003 0310 	and.w	r3, r3, #16
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d008      	beq.n	8006d86 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8006d74:	4b2d      	ldr	r3, [pc, #180]	; (8006e2c <FLASH_SetErrorCode+0xc8>)
 8006d76:	69db      	ldr	r3, [r3, #28]
 8006d78:	f043 0310 	orr.w	r3, r3, #16
 8006d7c:	4a2b      	ldr	r2, [pc, #172]	; (8006e2c <FLASH_SetErrorCode+0xc8>)
 8006d7e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8006d80:	4b29      	ldr	r3, [pc, #164]	; (8006e28 <FLASH_SetErrorCode+0xc4>)
 8006d82:	2210      	movs	r2, #16
 8006d84:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8006d86:	4b28      	ldr	r3, [pc, #160]	; (8006e28 <FLASH_SetErrorCode+0xc4>)
 8006d88:	68db      	ldr	r3, [r3, #12]
 8006d8a:	f003 0320 	and.w	r3, r3, #32
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d008      	beq.n	8006da4 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8006d92:	4b26      	ldr	r3, [pc, #152]	; (8006e2c <FLASH_SetErrorCode+0xc8>)
 8006d94:	69db      	ldr	r3, [r3, #28]
 8006d96:	f043 0308 	orr.w	r3, r3, #8
 8006d9a:	4a24      	ldr	r2, [pc, #144]	; (8006e2c <FLASH_SetErrorCode+0xc8>)
 8006d9c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8006d9e:	4b22      	ldr	r3, [pc, #136]	; (8006e28 <FLASH_SetErrorCode+0xc4>)
 8006da0:	2220      	movs	r2, #32
 8006da2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8006da4:	4b20      	ldr	r3, [pc, #128]	; (8006e28 <FLASH_SetErrorCode+0xc4>)
 8006da6:	68db      	ldr	r3, [r3, #12]
 8006da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d008      	beq.n	8006dc2 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8006db0:	4b1e      	ldr	r3, [pc, #120]	; (8006e2c <FLASH_SetErrorCode+0xc8>)
 8006db2:	69db      	ldr	r3, [r3, #28]
 8006db4:	f043 0304 	orr.w	r3, r3, #4
 8006db8:	4a1c      	ldr	r2, [pc, #112]	; (8006e2c <FLASH_SetErrorCode+0xc8>)
 8006dba:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8006dbc:	4b1a      	ldr	r3, [pc, #104]	; (8006e28 <FLASH_SetErrorCode+0xc4>)
 8006dbe:	2240      	movs	r2, #64	; 0x40
 8006dc0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8006dc2:	4b19      	ldr	r3, [pc, #100]	; (8006e28 <FLASH_SetErrorCode+0xc4>)
 8006dc4:	68db      	ldr	r3, [r3, #12]
 8006dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d008      	beq.n	8006de0 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8006dce:	4b17      	ldr	r3, [pc, #92]	; (8006e2c <FLASH_SetErrorCode+0xc8>)
 8006dd0:	69db      	ldr	r3, [r3, #28]
 8006dd2:	f043 0302 	orr.w	r3, r3, #2
 8006dd6:	4a15      	ldr	r2, [pc, #84]	; (8006e2c <FLASH_SetErrorCode+0xc8>)
 8006dd8:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8006dda:	4b13      	ldr	r3, [pc, #76]	; (8006e28 <FLASH_SetErrorCode+0xc4>)
 8006ddc:	2280      	movs	r2, #128	; 0x80
 8006dde:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8006de0:	4b11      	ldr	r3, [pc, #68]	; (8006e28 <FLASH_SetErrorCode+0xc4>)
 8006de2:	68db      	ldr	r3, [r3, #12]
 8006de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d009      	beq.n	8006e00 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8006dec:	4b0f      	ldr	r3, [pc, #60]	; (8006e2c <FLASH_SetErrorCode+0xc8>)
 8006dee:	69db      	ldr	r3, [r3, #28]
 8006df0:	f043 0301 	orr.w	r3, r3, #1
 8006df4:	4a0d      	ldr	r2, [pc, #52]	; (8006e2c <FLASH_SetErrorCode+0xc8>)
 8006df6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8006df8:	4b0b      	ldr	r3, [pc, #44]	; (8006e28 <FLASH_SetErrorCode+0xc4>)
 8006dfa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006dfe:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8006e00:	4b09      	ldr	r3, [pc, #36]	; (8006e28 <FLASH_SetErrorCode+0xc4>)
 8006e02:	68db      	ldr	r3, [r3, #12]
 8006e04:	f003 0302 	and.w	r3, r3, #2
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d008      	beq.n	8006e1e <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8006e0c:	4b07      	ldr	r3, [pc, #28]	; (8006e2c <FLASH_SetErrorCode+0xc8>)
 8006e0e:	69db      	ldr	r3, [r3, #28]
 8006e10:	f043 0320 	orr.w	r3, r3, #32
 8006e14:	4a05      	ldr	r2, [pc, #20]	; (8006e2c <FLASH_SetErrorCode+0xc8>)
 8006e16:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8006e18:	4b03      	ldr	r3, [pc, #12]	; (8006e28 <FLASH_SetErrorCode+0xc4>)
 8006e1a:	2202      	movs	r2, #2
 8006e1c:	60da      	str	r2, [r3, #12]
  }
}
 8006e1e:	bf00      	nop
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr
 8006e28:	40023c00 	.word	0x40023c00
 8006e2c:	20000738 	.word	0x20000738

08006e30 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b084      	sub	sp, #16
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006e42:	4b31      	ldr	r3, [pc, #196]	; (8006f08 <HAL_FLASHEx_Erase+0xd8>)
 8006e44:	7e1b      	ldrb	r3, [r3, #24]
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d101      	bne.n	8006e4e <HAL_FLASHEx_Erase+0x1e>
 8006e4a:	2302      	movs	r3, #2
 8006e4c:	e058      	b.n	8006f00 <HAL_FLASHEx_Erase+0xd0>
 8006e4e:	4b2e      	ldr	r3, [pc, #184]	; (8006f08 <HAL_FLASHEx_Erase+0xd8>)
 8006e50:	2201      	movs	r2, #1
 8006e52:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006e54:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006e58:	f7ff feaa 	bl	8006bb0 <FLASH_WaitForLastOperation>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8006e60:	7bfb      	ldrb	r3, [r7, #15]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d148      	bne.n	8006ef8 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	f04f 32ff 	mov.w	r2, #4294967295
 8006e6c:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	d115      	bne.n	8006ea2 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	691b      	ldr	r3, [r3, #16]
 8006e7a:	b2da      	uxtb	r2, r3
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	4619      	mov	r1, r3
 8006e82:	4610      	mov	r0, r2
 8006e84:	f000 f844 	bl	8006f10 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006e88:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006e8c:	f7ff fe90 	bl	8006bb0 <FLASH_WaitForLastOperation>
 8006e90:	4603      	mov	r3, r0
 8006e92:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8006e94:	4b1d      	ldr	r3, [pc, #116]	; (8006f0c <HAL_FLASHEx_Erase+0xdc>)
 8006e96:	691b      	ldr	r3, [r3, #16]
 8006e98:	4a1c      	ldr	r2, [pc, #112]	; (8006f0c <HAL_FLASHEx_Erase+0xdc>)
 8006e9a:	f023 0304 	bic.w	r3, r3, #4
 8006e9e:	6113      	str	r3, [r2, #16]
 8006ea0:	e028      	b.n	8006ef4 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	60bb      	str	r3, [r7, #8]
 8006ea8:	e01c      	b.n	8006ee4 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	691b      	ldr	r3, [r3, #16]
 8006eae:	b2db      	uxtb	r3, r3
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	68b8      	ldr	r0, [r7, #8]
 8006eb4:	f000 f850 	bl	8006f58 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006eb8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006ebc:	f7ff fe78 	bl	8006bb0 <FLASH_WaitForLastOperation>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8006ec4:	4b11      	ldr	r3, [pc, #68]	; (8006f0c <HAL_FLASHEx_Erase+0xdc>)
 8006ec6:	691b      	ldr	r3, [r3, #16]
 8006ec8:	4a10      	ldr	r2, [pc, #64]	; (8006f0c <HAL_FLASHEx_Erase+0xdc>)
 8006eca:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8006ece:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8006ed0:	7bfb      	ldrb	r3, [r7, #15]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d003      	beq.n	8006ede <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	68ba      	ldr	r2, [r7, #8]
 8006eda:	601a      	str	r2, [r3, #0]
          break;
 8006edc:	e00a      	b.n	8006ef4 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	3301      	adds	r3, #1
 8006ee2:	60bb      	str	r3, [r7, #8]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	68da      	ldr	r2, [r3, #12]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	4413      	add	r3, r2
 8006eee:	68ba      	ldr	r2, [r7, #8]
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d3da      	bcc.n	8006eaa <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8006ef4:	f000 f878 	bl	8006fe8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006ef8:	4b03      	ldr	r3, [pc, #12]	; (8006f08 <HAL_FLASHEx_Erase+0xd8>)
 8006efa:	2200      	movs	r2, #0
 8006efc:	761a      	strb	r2, [r3, #24]

  return status;
 8006efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3710      	adds	r7, #16
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}
 8006f08:	20000738 	.word	0x20000738
 8006f0c:	40023c00 	.word	0x40023c00

08006f10 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b083      	sub	sp, #12
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	4603      	mov	r3, r0
 8006f18:	6039      	str	r1, [r7, #0]
 8006f1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006f1c:	4b0d      	ldr	r3, [pc, #52]	; (8006f54 <FLASH_MassErase+0x44>)
 8006f1e:	691b      	ldr	r3, [r3, #16]
 8006f20:	4a0c      	ldr	r2, [pc, #48]	; (8006f54 <FLASH_MassErase+0x44>)
 8006f22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f26:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8006f28:	4b0a      	ldr	r3, [pc, #40]	; (8006f54 <FLASH_MassErase+0x44>)
 8006f2a:	691b      	ldr	r3, [r3, #16]
 8006f2c:	4a09      	ldr	r2, [pc, #36]	; (8006f54 <FLASH_MassErase+0x44>)
 8006f2e:	f043 0304 	orr.w	r3, r3, #4
 8006f32:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8006f34:	4b07      	ldr	r3, [pc, #28]	; (8006f54 <FLASH_MassErase+0x44>)
 8006f36:	691a      	ldr	r2, [r3, #16]
 8006f38:	79fb      	ldrb	r3, [r7, #7]
 8006f3a:	021b      	lsls	r3, r3, #8
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	4a05      	ldr	r2, [pc, #20]	; (8006f54 <FLASH_MassErase+0x44>)
 8006f40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f44:	6113      	str	r3, [r2, #16]
}
 8006f46:	bf00      	nop
 8006f48:	370c      	adds	r7, #12
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr
 8006f52:	bf00      	nop
 8006f54:	40023c00 	.word	0x40023c00

08006f58 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b085      	sub	sp, #20
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
 8006f60:	460b      	mov	r3, r1
 8006f62:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8006f64:	2300      	movs	r3, #0
 8006f66:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8006f68:	78fb      	ldrb	r3, [r7, #3]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d102      	bne.n	8006f74 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	60fb      	str	r3, [r7, #12]
 8006f72:	e010      	b.n	8006f96 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8006f74:	78fb      	ldrb	r3, [r7, #3]
 8006f76:	2b01      	cmp	r3, #1
 8006f78:	d103      	bne.n	8006f82 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8006f7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f7e:	60fb      	str	r3, [r7, #12]
 8006f80:	e009      	b.n	8006f96 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8006f82:	78fb      	ldrb	r3, [r7, #3]
 8006f84:	2b02      	cmp	r3, #2
 8006f86:	d103      	bne.n	8006f90 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8006f88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f8c:	60fb      	str	r3, [r7, #12]
 8006f8e:	e002      	b.n	8006f96 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8006f90:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006f94:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006f96:	4b13      	ldr	r3, [pc, #76]	; (8006fe4 <FLASH_Erase_Sector+0x8c>)
 8006f98:	691b      	ldr	r3, [r3, #16]
 8006f9a:	4a12      	ldr	r2, [pc, #72]	; (8006fe4 <FLASH_Erase_Sector+0x8c>)
 8006f9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fa0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8006fa2:	4b10      	ldr	r3, [pc, #64]	; (8006fe4 <FLASH_Erase_Sector+0x8c>)
 8006fa4:	691a      	ldr	r2, [r3, #16]
 8006fa6:	490f      	ldr	r1, [pc, #60]	; (8006fe4 <FLASH_Erase_Sector+0x8c>)
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	4313      	orrs	r3, r2
 8006fac:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8006fae:	4b0d      	ldr	r3, [pc, #52]	; (8006fe4 <FLASH_Erase_Sector+0x8c>)
 8006fb0:	691b      	ldr	r3, [r3, #16]
 8006fb2:	4a0c      	ldr	r2, [pc, #48]	; (8006fe4 <FLASH_Erase_Sector+0x8c>)
 8006fb4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006fb8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8006fba:	4b0a      	ldr	r3, [pc, #40]	; (8006fe4 <FLASH_Erase_Sector+0x8c>)
 8006fbc:	691a      	ldr	r2, [r3, #16]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	00db      	lsls	r3, r3, #3
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	4a07      	ldr	r2, [pc, #28]	; (8006fe4 <FLASH_Erase_Sector+0x8c>)
 8006fc6:	f043 0302 	orr.w	r3, r3, #2
 8006fca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8006fcc:	4b05      	ldr	r3, [pc, #20]	; (8006fe4 <FLASH_Erase_Sector+0x8c>)
 8006fce:	691b      	ldr	r3, [r3, #16]
 8006fd0:	4a04      	ldr	r2, [pc, #16]	; (8006fe4 <FLASH_Erase_Sector+0x8c>)
 8006fd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fd6:	6113      	str	r3, [r2, #16]
}
 8006fd8:	bf00      	nop
 8006fda:	3714      	adds	r7, #20
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe2:	4770      	bx	lr
 8006fe4:	40023c00 	.word	0x40023c00

08006fe8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8006fec:	4b20      	ldr	r3, [pc, #128]	; (8007070 <FLASH_FlushCaches+0x88>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d017      	beq.n	8007028 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8006ff8:	4b1d      	ldr	r3, [pc, #116]	; (8007070 <FLASH_FlushCaches+0x88>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a1c      	ldr	r2, [pc, #112]	; (8007070 <FLASH_FlushCaches+0x88>)
 8006ffe:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007002:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8007004:	4b1a      	ldr	r3, [pc, #104]	; (8007070 <FLASH_FlushCaches+0x88>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a19      	ldr	r2, [pc, #100]	; (8007070 <FLASH_FlushCaches+0x88>)
 800700a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800700e:	6013      	str	r3, [r2, #0]
 8007010:	4b17      	ldr	r3, [pc, #92]	; (8007070 <FLASH_FlushCaches+0x88>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a16      	ldr	r2, [pc, #88]	; (8007070 <FLASH_FlushCaches+0x88>)
 8007016:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800701a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800701c:	4b14      	ldr	r3, [pc, #80]	; (8007070 <FLASH_FlushCaches+0x88>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a13      	ldr	r2, [pc, #76]	; (8007070 <FLASH_FlushCaches+0x88>)
 8007022:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007026:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8007028:	4b11      	ldr	r3, [pc, #68]	; (8007070 <FLASH_FlushCaches+0x88>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007030:	2b00      	cmp	r3, #0
 8007032:	d017      	beq.n	8007064 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8007034:	4b0e      	ldr	r3, [pc, #56]	; (8007070 <FLASH_FlushCaches+0x88>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a0d      	ldr	r2, [pc, #52]	; (8007070 <FLASH_FlushCaches+0x88>)
 800703a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800703e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8007040:	4b0b      	ldr	r3, [pc, #44]	; (8007070 <FLASH_FlushCaches+0x88>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a0a      	ldr	r2, [pc, #40]	; (8007070 <FLASH_FlushCaches+0x88>)
 8007046:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800704a:	6013      	str	r3, [r2, #0]
 800704c:	4b08      	ldr	r3, [pc, #32]	; (8007070 <FLASH_FlushCaches+0x88>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a07      	ldr	r2, [pc, #28]	; (8007070 <FLASH_FlushCaches+0x88>)
 8007052:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007056:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8007058:	4b05      	ldr	r3, [pc, #20]	; (8007070 <FLASH_FlushCaches+0x88>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a04      	ldr	r2, [pc, #16]	; (8007070 <FLASH_FlushCaches+0x88>)
 800705e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007062:	6013      	str	r3, [r2, #0]
  }
}
 8007064:	bf00      	nop
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr
 800706e:	bf00      	nop
 8007070:	40023c00 	.word	0x40023c00

08007074 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007074:	b480      	push	{r7}
 8007076:	b089      	sub	sp, #36	; 0x24
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800707e:	2300      	movs	r3, #0
 8007080:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007082:	2300      	movs	r3, #0
 8007084:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007086:	2300      	movs	r3, #0
 8007088:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800708a:	2300      	movs	r3, #0
 800708c:	61fb      	str	r3, [r7, #28]
 800708e:	e159      	b.n	8007344 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007090:	2201      	movs	r2, #1
 8007092:	69fb      	ldr	r3, [r7, #28]
 8007094:	fa02 f303 	lsl.w	r3, r2, r3
 8007098:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	697a      	ldr	r2, [r7, #20]
 80070a0:	4013      	ands	r3, r2
 80070a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80070a4:	693a      	ldr	r2, [r7, #16]
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	429a      	cmp	r2, r3
 80070aa:	f040 8148 	bne.w	800733e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	f003 0303 	and.w	r3, r3, #3
 80070b6:	2b01      	cmp	r3, #1
 80070b8:	d005      	beq.n	80070c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80070c2:	2b02      	cmp	r3, #2
 80070c4:	d130      	bne.n	8007128 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	689b      	ldr	r3, [r3, #8]
 80070ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80070cc:	69fb      	ldr	r3, [r7, #28]
 80070ce:	005b      	lsls	r3, r3, #1
 80070d0:	2203      	movs	r2, #3
 80070d2:	fa02 f303 	lsl.w	r3, r2, r3
 80070d6:	43db      	mvns	r3, r3
 80070d8:	69ba      	ldr	r2, [r7, #24]
 80070da:	4013      	ands	r3, r2
 80070dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	68da      	ldr	r2, [r3, #12]
 80070e2:	69fb      	ldr	r3, [r7, #28]
 80070e4:	005b      	lsls	r3, r3, #1
 80070e6:	fa02 f303 	lsl.w	r3, r2, r3
 80070ea:	69ba      	ldr	r2, [r7, #24]
 80070ec:	4313      	orrs	r3, r2
 80070ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	69ba      	ldr	r2, [r7, #24]
 80070f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80070fc:	2201      	movs	r2, #1
 80070fe:	69fb      	ldr	r3, [r7, #28]
 8007100:	fa02 f303 	lsl.w	r3, r2, r3
 8007104:	43db      	mvns	r3, r3
 8007106:	69ba      	ldr	r2, [r7, #24]
 8007108:	4013      	ands	r3, r2
 800710a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	091b      	lsrs	r3, r3, #4
 8007112:	f003 0201 	and.w	r2, r3, #1
 8007116:	69fb      	ldr	r3, [r7, #28]
 8007118:	fa02 f303 	lsl.w	r3, r2, r3
 800711c:	69ba      	ldr	r2, [r7, #24]
 800711e:	4313      	orrs	r3, r2
 8007120:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	69ba      	ldr	r2, [r7, #24]
 8007126:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	f003 0303 	and.w	r3, r3, #3
 8007130:	2b03      	cmp	r3, #3
 8007132:	d017      	beq.n	8007164 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	68db      	ldr	r3, [r3, #12]
 8007138:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800713a:	69fb      	ldr	r3, [r7, #28]
 800713c:	005b      	lsls	r3, r3, #1
 800713e:	2203      	movs	r2, #3
 8007140:	fa02 f303 	lsl.w	r3, r2, r3
 8007144:	43db      	mvns	r3, r3
 8007146:	69ba      	ldr	r2, [r7, #24]
 8007148:	4013      	ands	r3, r2
 800714a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	689a      	ldr	r2, [r3, #8]
 8007150:	69fb      	ldr	r3, [r7, #28]
 8007152:	005b      	lsls	r3, r3, #1
 8007154:	fa02 f303 	lsl.w	r3, r2, r3
 8007158:	69ba      	ldr	r2, [r7, #24]
 800715a:	4313      	orrs	r3, r2
 800715c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	69ba      	ldr	r2, [r7, #24]
 8007162:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	f003 0303 	and.w	r3, r3, #3
 800716c:	2b02      	cmp	r3, #2
 800716e:	d123      	bne.n	80071b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007170:	69fb      	ldr	r3, [r7, #28]
 8007172:	08da      	lsrs	r2, r3, #3
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	3208      	adds	r2, #8
 8007178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800717c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800717e:	69fb      	ldr	r3, [r7, #28]
 8007180:	f003 0307 	and.w	r3, r3, #7
 8007184:	009b      	lsls	r3, r3, #2
 8007186:	220f      	movs	r2, #15
 8007188:	fa02 f303 	lsl.w	r3, r2, r3
 800718c:	43db      	mvns	r3, r3
 800718e:	69ba      	ldr	r2, [r7, #24]
 8007190:	4013      	ands	r3, r2
 8007192:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	691a      	ldr	r2, [r3, #16]
 8007198:	69fb      	ldr	r3, [r7, #28]
 800719a:	f003 0307 	and.w	r3, r3, #7
 800719e:	009b      	lsls	r3, r3, #2
 80071a0:	fa02 f303 	lsl.w	r3, r2, r3
 80071a4:	69ba      	ldr	r2, [r7, #24]
 80071a6:	4313      	orrs	r3, r2
 80071a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80071aa:	69fb      	ldr	r3, [r7, #28]
 80071ac:	08da      	lsrs	r2, r3, #3
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	3208      	adds	r2, #8
 80071b2:	69b9      	ldr	r1, [r7, #24]
 80071b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80071be:	69fb      	ldr	r3, [r7, #28]
 80071c0:	005b      	lsls	r3, r3, #1
 80071c2:	2203      	movs	r2, #3
 80071c4:	fa02 f303 	lsl.w	r3, r2, r3
 80071c8:	43db      	mvns	r3, r3
 80071ca:	69ba      	ldr	r2, [r7, #24]
 80071cc:	4013      	ands	r3, r2
 80071ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	f003 0203 	and.w	r2, r3, #3
 80071d8:	69fb      	ldr	r3, [r7, #28]
 80071da:	005b      	lsls	r3, r3, #1
 80071dc:	fa02 f303 	lsl.w	r3, r2, r3
 80071e0:	69ba      	ldr	r2, [r7, #24]
 80071e2:	4313      	orrs	r3, r2
 80071e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	69ba      	ldr	r2, [r7, #24]
 80071ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	f000 80a2 	beq.w	800733e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80071fa:	2300      	movs	r3, #0
 80071fc:	60fb      	str	r3, [r7, #12]
 80071fe:	4b57      	ldr	r3, [pc, #348]	; (800735c <HAL_GPIO_Init+0x2e8>)
 8007200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007202:	4a56      	ldr	r2, [pc, #344]	; (800735c <HAL_GPIO_Init+0x2e8>)
 8007204:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007208:	6453      	str	r3, [r2, #68]	; 0x44
 800720a:	4b54      	ldr	r3, [pc, #336]	; (800735c <HAL_GPIO_Init+0x2e8>)
 800720c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800720e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007212:	60fb      	str	r3, [r7, #12]
 8007214:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007216:	4a52      	ldr	r2, [pc, #328]	; (8007360 <HAL_GPIO_Init+0x2ec>)
 8007218:	69fb      	ldr	r3, [r7, #28]
 800721a:	089b      	lsrs	r3, r3, #2
 800721c:	3302      	adds	r3, #2
 800721e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007222:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007224:	69fb      	ldr	r3, [r7, #28]
 8007226:	f003 0303 	and.w	r3, r3, #3
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	220f      	movs	r2, #15
 800722e:	fa02 f303 	lsl.w	r3, r2, r3
 8007232:	43db      	mvns	r3, r3
 8007234:	69ba      	ldr	r2, [r7, #24]
 8007236:	4013      	ands	r3, r2
 8007238:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	4a49      	ldr	r2, [pc, #292]	; (8007364 <HAL_GPIO_Init+0x2f0>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d019      	beq.n	8007276 <HAL_GPIO_Init+0x202>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	4a48      	ldr	r2, [pc, #288]	; (8007368 <HAL_GPIO_Init+0x2f4>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d013      	beq.n	8007272 <HAL_GPIO_Init+0x1fe>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	4a47      	ldr	r2, [pc, #284]	; (800736c <HAL_GPIO_Init+0x2f8>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d00d      	beq.n	800726e <HAL_GPIO_Init+0x1fa>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	4a46      	ldr	r2, [pc, #280]	; (8007370 <HAL_GPIO_Init+0x2fc>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d007      	beq.n	800726a <HAL_GPIO_Init+0x1f6>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	4a45      	ldr	r2, [pc, #276]	; (8007374 <HAL_GPIO_Init+0x300>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d101      	bne.n	8007266 <HAL_GPIO_Init+0x1f2>
 8007262:	2304      	movs	r3, #4
 8007264:	e008      	b.n	8007278 <HAL_GPIO_Init+0x204>
 8007266:	2307      	movs	r3, #7
 8007268:	e006      	b.n	8007278 <HAL_GPIO_Init+0x204>
 800726a:	2303      	movs	r3, #3
 800726c:	e004      	b.n	8007278 <HAL_GPIO_Init+0x204>
 800726e:	2302      	movs	r3, #2
 8007270:	e002      	b.n	8007278 <HAL_GPIO_Init+0x204>
 8007272:	2301      	movs	r3, #1
 8007274:	e000      	b.n	8007278 <HAL_GPIO_Init+0x204>
 8007276:	2300      	movs	r3, #0
 8007278:	69fa      	ldr	r2, [r7, #28]
 800727a:	f002 0203 	and.w	r2, r2, #3
 800727e:	0092      	lsls	r2, r2, #2
 8007280:	4093      	lsls	r3, r2
 8007282:	69ba      	ldr	r2, [r7, #24]
 8007284:	4313      	orrs	r3, r2
 8007286:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007288:	4935      	ldr	r1, [pc, #212]	; (8007360 <HAL_GPIO_Init+0x2ec>)
 800728a:	69fb      	ldr	r3, [r7, #28]
 800728c:	089b      	lsrs	r3, r3, #2
 800728e:	3302      	adds	r3, #2
 8007290:	69ba      	ldr	r2, [r7, #24]
 8007292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007296:	4b38      	ldr	r3, [pc, #224]	; (8007378 <HAL_GPIO_Init+0x304>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	43db      	mvns	r3, r3
 80072a0:	69ba      	ldr	r2, [r7, #24]
 80072a2:	4013      	ands	r3, r2
 80072a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d003      	beq.n	80072ba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80072b2:	69ba      	ldr	r2, [r7, #24]
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	4313      	orrs	r3, r2
 80072b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80072ba:	4a2f      	ldr	r2, [pc, #188]	; (8007378 <HAL_GPIO_Init+0x304>)
 80072bc:	69bb      	ldr	r3, [r7, #24]
 80072be:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80072c0:	4b2d      	ldr	r3, [pc, #180]	; (8007378 <HAL_GPIO_Init+0x304>)
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	43db      	mvns	r3, r3
 80072ca:	69ba      	ldr	r2, [r7, #24]
 80072cc:	4013      	ands	r3, r2
 80072ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d003      	beq.n	80072e4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80072dc:	69ba      	ldr	r2, [r7, #24]
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	4313      	orrs	r3, r2
 80072e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80072e4:	4a24      	ldr	r2, [pc, #144]	; (8007378 <HAL_GPIO_Init+0x304>)
 80072e6:	69bb      	ldr	r3, [r7, #24]
 80072e8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80072ea:	4b23      	ldr	r3, [pc, #140]	; (8007378 <HAL_GPIO_Init+0x304>)
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	43db      	mvns	r3, r3
 80072f4:	69ba      	ldr	r2, [r7, #24]
 80072f6:	4013      	ands	r3, r2
 80072f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007302:	2b00      	cmp	r3, #0
 8007304:	d003      	beq.n	800730e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8007306:	69ba      	ldr	r2, [r7, #24]
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	4313      	orrs	r3, r2
 800730c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800730e:	4a1a      	ldr	r2, [pc, #104]	; (8007378 <HAL_GPIO_Init+0x304>)
 8007310:	69bb      	ldr	r3, [r7, #24]
 8007312:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007314:	4b18      	ldr	r3, [pc, #96]	; (8007378 <HAL_GPIO_Init+0x304>)
 8007316:	68db      	ldr	r3, [r3, #12]
 8007318:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	43db      	mvns	r3, r3
 800731e:	69ba      	ldr	r2, [r7, #24]
 8007320:	4013      	ands	r3, r2
 8007322:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800732c:	2b00      	cmp	r3, #0
 800732e:	d003      	beq.n	8007338 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8007330:	69ba      	ldr	r2, [r7, #24]
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	4313      	orrs	r3, r2
 8007336:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007338:	4a0f      	ldr	r2, [pc, #60]	; (8007378 <HAL_GPIO_Init+0x304>)
 800733a:	69bb      	ldr	r3, [r7, #24]
 800733c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800733e:	69fb      	ldr	r3, [r7, #28]
 8007340:	3301      	adds	r3, #1
 8007342:	61fb      	str	r3, [r7, #28]
 8007344:	69fb      	ldr	r3, [r7, #28]
 8007346:	2b0f      	cmp	r3, #15
 8007348:	f67f aea2 	bls.w	8007090 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800734c:	bf00      	nop
 800734e:	bf00      	nop
 8007350:	3724      	adds	r7, #36	; 0x24
 8007352:	46bd      	mov	sp, r7
 8007354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007358:	4770      	bx	lr
 800735a:	bf00      	nop
 800735c:	40023800 	.word	0x40023800
 8007360:	40013800 	.word	0x40013800
 8007364:	40020000 	.word	0x40020000
 8007368:	40020400 	.word	0x40020400
 800736c:	40020800 	.word	0x40020800
 8007370:	40020c00 	.word	0x40020c00
 8007374:	40021000 	.word	0x40021000
 8007378:	40013c00 	.word	0x40013c00

0800737c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800737c:	b480      	push	{r7}
 800737e:	b085      	sub	sp, #20
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	460b      	mov	r3, r1
 8007386:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	691a      	ldr	r2, [r3, #16]
 800738c:	887b      	ldrh	r3, [r7, #2]
 800738e:	4013      	ands	r3, r2
 8007390:	2b00      	cmp	r3, #0
 8007392:	d002      	beq.n	800739a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007394:	2301      	movs	r3, #1
 8007396:	73fb      	strb	r3, [r7, #15]
 8007398:	e001      	b.n	800739e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800739a:	2300      	movs	r3, #0
 800739c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800739e:	7bfb      	ldrb	r3, [r7, #15]
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3714      	adds	r7, #20
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr

080073ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b083      	sub	sp, #12
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	460b      	mov	r3, r1
 80073b6:	807b      	strh	r3, [r7, #2]
 80073b8:	4613      	mov	r3, r2
 80073ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80073bc:	787b      	ldrb	r3, [r7, #1]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d003      	beq.n	80073ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80073c2:	887a      	ldrh	r2, [r7, #2]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80073c8:	e003      	b.n	80073d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80073ca:	887b      	ldrh	r3, [r7, #2]
 80073cc:	041a      	lsls	r2, r3, #16
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	619a      	str	r2, [r3, #24]
}
 80073d2:	bf00      	nop
 80073d4:	370c      	adds	r7, #12
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr
	...

080073e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b082      	sub	sp, #8
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	4603      	mov	r3, r0
 80073e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80073ea:	4b08      	ldr	r3, [pc, #32]	; (800740c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80073ec:	695a      	ldr	r2, [r3, #20]
 80073ee:	88fb      	ldrh	r3, [r7, #6]
 80073f0:	4013      	ands	r3, r2
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d006      	beq.n	8007404 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80073f6:	4a05      	ldr	r2, [pc, #20]	; (800740c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80073f8:	88fb      	ldrh	r3, [r7, #6]
 80073fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80073fc:	88fb      	ldrh	r3, [r7, #6]
 80073fe:	4618      	mov	r0, r3
 8007400:	f7fd fb54 	bl	8004aac <HAL_GPIO_EXTI_Callback>
  }
}
 8007404:	bf00      	nop
 8007406:	3708      	adds	r7, #8
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}
 800740c:	40013c00 	.word	0x40013c00

08007410 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b084      	sub	sp, #16
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d101      	bne.n	8007422 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800741e:	2301      	movs	r3, #1
 8007420:	e12b      	b.n	800767a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007428:	b2db      	uxtb	r3, r3
 800742a:	2b00      	cmp	r3, #0
 800742c:	d106      	bne.n	800743c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2200      	movs	r2, #0
 8007432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f7fd fc30 	bl	8004c9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2224      	movs	r2, #36	; 0x24
 8007440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f022 0201 	bic.w	r2, r2, #1
 8007452:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007462:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007472:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007474:	f001 f864 	bl	8008540 <HAL_RCC_GetPCLK1Freq>
 8007478:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	4a81      	ldr	r2, [pc, #516]	; (8007684 <HAL_I2C_Init+0x274>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d807      	bhi.n	8007494 <HAL_I2C_Init+0x84>
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	4a80      	ldr	r2, [pc, #512]	; (8007688 <HAL_I2C_Init+0x278>)
 8007488:	4293      	cmp	r3, r2
 800748a:	bf94      	ite	ls
 800748c:	2301      	movls	r3, #1
 800748e:	2300      	movhi	r3, #0
 8007490:	b2db      	uxtb	r3, r3
 8007492:	e006      	b.n	80074a2 <HAL_I2C_Init+0x92>
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	4a7d      	ldr	r2, [pc, #500]	; (800768c <HAL_I2C_Init+0x27c>)
 8007498:	4293      	cmp	r3, r2
 800749a:	bf94      	ite	ls
 800749c:	2301      	movls	r3, #1
 800749e:	2300      	movhi	r3, #0
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d001      	beq.n	80074aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80074a6:	2301      	movs	r3, #1
 80074a8:	e0e7      	b.n	800767a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	4a78      	ldr	r2, [pc, #480]	; (8007690 <HAL_I2C_Init+0x280>)
 80074ae:	fba2 2303 	umull	r2, r3, r2, r3
 80074b2:	0c9b      	lsrs	r3, r3, #18
 80074b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	68ba      	ldr	r2, [r7, #8]
 80074c6:	430a      	orrs	r2, r1
 80074c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	6a1b      	ldr	r3, [r3, #32]
 80074d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	4a6a      	ldr	r2, [pc, #424]	; (8007684 <HAL_I2C_Init+0x274>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d802      	bhi.n	80074e4 <HAL_I2C_Init+0xd4>
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	3301      	adds	r3, #1
 80074e2:	e009      	b.n	80074f8 <HAL_I2C_Init+0xe8>
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80074ea:	fb02 f303 	mul.w	r3, r2, r3
 80074ee:	4a69      	ldr	r2, [pc, #420]	; (8007694 <HAL_I2C_Init+0x284>)
 80074f0:	fba2 2303 	umull	r2, r3, r2, r3
 80074f4:	099b      	lsrs	r3, r3, #6
 80074f6:	3301      	adds	r3, #1
 80074f8:	687a      	ldr	r2, [r7, #4]
 80074fa:	6812      	ldr	r2, [r2, #0]
 80074fc:	430b      	orrs	r3, r1
 80074fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	69db      	ldr	r3, [r3, #28]
 8007506:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800750a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	495c      	ldr	r1, [pc, #368]	; (8007684 <HAL_I2C_Init+0x274>)
 8007514:	428b      	cmp	r3, r1
 8007516:	d819      	bhi.n	800754c <HAL_I2C_Init+0x13c>
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	1e59      	subs	r1, r3, #1
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	685b      	ldr	r3, [r3, #4]
 8007520:	005b      	lsls	r3, r3, #1
 8007522:	fbb1 f3f3 	udiv	r3, r1, r3
 8007526:	1c59      	adds	r1, r3, #1
 8007528:	f640 73fc 	movw	r3, #4092	; 0xffc
 800752c:	400b      	ands	r3, r1
 800752e:	2b00      	cmp	r3, #0
 8007530:	d00a      	beq.n	8007548 <HAL_I2C_Init+0x138>
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	1e59      	subs	r1, r3, #1
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	005b      	lsls	r3, r3, #1
 800753c:	fbb1 f3f3 	udiv	r3, r1, r3
 8007540:	3301      	adds	r3, #1
 8007542:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007546:	e051      	b.n	80075ec <HAL_I2C_Init+0x1dc>
 8007548:	2304      	movs	r3, #4
 800754a:	e04f      	b.n	80075ec <HAL_I2C_Init+0x1dc>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	689b      	ldr	r3, [r3, #8]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d111      	bne.n	8007578 <HAL_I2C_Init+0x168>
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	1e58      	subs	r0, r3, #1
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6859      	ldr	r1, [r3, #4]
 800755c:	460b      	mov	r3, r1
 800755e:	005b      	lsls	r3, r3, #1
 8007560:	440b      	add	r3, r1
 8007562:	fbb0 f3f3 	udiv	r3, r0, r3
 8007566:	3301      	adds	r3, #1
 8007568:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800756c:	2b00      	cmp	r3, #0
 800756e:	bf0c      	ite	eq
 8007570:	2301      	moveq	r3, #1
 8007572:	2300      	movne	r3, #0
 8007574:	b2db      	uxtb	r3, r3
 8007576:	e012      	b.n	800759e <HAL_I2C_Init+0x18e>
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	1e58      	subs	r0, r3, #1
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6859      	ldr	r1, [r3, #4]
 8007580:	460b      	mov	r3, r1
 8007582:	009b      	lsls	r3, r3, #2
 8007584:	440b      	add	r3, r1
 8007586:	0099      	lsls	r1, r3, #2
 8007588:	440b      	add	r3, r1
 800758a:	fbb0 f3f3 	udiv	r3, r0, r3
 800758e:	3301      	adds	r3, #1
 8007590:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007594:	2b00      	cmp	r3, #0
 8007596:	bf0c      	ite	eq
 8007598:	2301      	moveq	r3, #1
 800759a:	2300      	movne	r3, #0
 800759c:	b2db      	uxtb	r3, r3
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d001      	beq.n	80075a6 <HAL_I2C_Init+0x196>
 80075a2:	2301      	movs	r3, #1
 80075a4:	e022      	b.n	80075ec <HAL_I2C_Init+0x1dc>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	689b      	ldr	r3, [r3, #8]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d10e      	bne.n	80075cc <HAL_I2C_Init+0x1bc>
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	1e58      	subs	r0, r3, #1
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6859      	ldr	r1, [r3, #4]
 80075b6:	460b      	mov	r3, r1
 80075b8:	005b      	lsls	r3, r3, #1
 80075ba:	440b      	add	r3, r1
 80075bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80075c0:	3301      	adds	r3, #1
 80075c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075ca:	e00f      	b.n	80075ec <HAL_I2C_Init+0x1dc>
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	1e58      	subs	r0, r3, #1
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6859      	ldr	r1, [r3, #4]
 80075d4:	460b      	mov	r3, r1
 80075d6:	009b      	lsls	r3, r3, #2
 80075d8:	440b      	add	r3, r1
 80075da:	0099      	lsls	r1, r3, #2
 80075dc:	440b      	add	r3, r1
 80075de:	fbb0 f3f3 	udiv	r3, r0, r3
 80075e2:	3301      	adds	r3, #1
 80075e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80075ec:	6879      	ldr	r1, [r7, #4]
 80075ee:	6809      	ldr	r1, [r1, #0]
 80075f0:	4313      	orrs	r3, r2
 80075f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	69da      	ldr	r2, [r3, #28]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6a1b      	ldr	r3, [r3, #32]
 8007606:	431a      	orrs	r2, r3
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	430a      	orrs	r2, r1
 800760e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	689b      	ldr	r3, [r3, #8]
 8007616:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800761a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800761e:	687a      	ldr	r2, [r7, #4]
 8007620:	6911      	ldr	r1, [r2, #16]
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	68d2      	ldr	r2, [r2, #12]
 8007626:	4311      	orrs	r1, r2
 8007628:	687a      	ldr	r2, [r7, #4]
 800762a:	6812      	ldr	r2, [r2, #0]
 800762c:	430b      	orrs	r3, r1
 800762e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	68db      	ldr	r3, [r3, #12]
 8007636:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	695a      	ldr	r2, [r3, #20]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	699b      	ldr	r3, [r3, #24]
 8007642:	431a      	orrs	r2, r3
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	430a      	orrs	r2, r1
 800764a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f042 0201 	orr.w	r2, r2, #1
 800765a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2200      	movs	r2, #0
 8007660:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2220      	movs	r2, #32
 8007666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2200      	movs	r2, #0
 800766e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2200      	movs	r2, #0
 8007674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007678:	2300      	movs	r3, #0
}
 800767a:	4618      	mov	r0, r3
 800767c:	3710      	adds	r7, #16
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}
 8007682:	bf00      	nop
 8007684:	000186a0 	.word	0x000186a0
 8007688:	001e847f 	.word	0x001e847f
 800768c:	003d08ff 	.word	0x003d08ff
 8007690:	431bde83 	.word	0x431bde83
 8007694:	10624dd3 	.word	0x10624dd3

08007698 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b088      	sub	sp, #32
 800769c:	af02      	add	r7, sp, #8
 800769e:	60f8      	str	r0, [r7, #12]
 80076a0:	607a      	str	r2, [r7, #4]
 80076a2:	461a      	mov	r2, r3
 80076a4:	460b      	mov	r3, r1
 80076a6:	817b      	strh	r3, [r7, #10]
 80076a8:	4613      	mov	r3, r2
 80076aa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80076ac:	f7fd ff4a 	bl	8005544 <HAL_GetTick>
 80076b0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076b8:	b2db      	uxtb	r3, r3
 80076ba:	2b20      	cmp	r3, #32
 80076bc:	f040 80e0 	bne.w	8007880 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	9300      	str	r3, [sp, #0]
 80076c4:	2319      	movs	r3, #25
 80076c6:	2201      	movs	r2, #1
 80076c8:	4970      	ldr	r1, [pc, #448]	; (800788c <HAL_I2C_Master_Transmit+0x1f4>)
 80076ca:	68f8      	ldr	r0, [r7, #12]
 80076cc:	f000 f964 	bl	8007998 <I2C_WaitOnFlagUntilTimeout>
 80076d0:	4603      	mov	r3, r0
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d001      	beq.n	80076da <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80076d6:	2302      	movs	r3, #2
 80076d8:	e0d3      	b.n	8007882 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d101      	bne.n	80076e8 <HAL_I2C_Master_Transmit+0x50>
 80076e4:	2302      	movs	r3, #2
 80076e6:	e0cc      	b.n	8007882 <HAL_I2C_Master_Transmit+0x1ea>
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2201      	movs	r2, #1
 80076ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f003 0301 	and.w	r3, r3, #1
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d007      	beq.n	800770e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f042 0201 	orr.w	r2, r2, #1
 800770c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	681a      	ldr	r2, [r3, #0]
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800771c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2221      	movs	r2, #33	; 0x21
 8007722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2210      	movs	r2, #16
 800772a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	2200      	movs	r2, #0
 8007732:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	687a      	ldr	r2, [r7, #4]
 8007738:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	893a      	ldrh	r2, [r7, #8]
 800773e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007744:	b29a      	uxth	r2, r3
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	4a50      	ldr	r2, [pc, #320]	; (8007890 <HAL_I2C_Master_Transmit+0x1f8>)
 800774e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007750:	8979      	ldrh	r1, [r7, #10]
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	6a3a      	ldr	r2, [r7, #32]
 8007756:	68f8      	ldr	r0, [r7, #12]
 8007758:	f000 f89c 	bl	8007894 <I2C_MasterRequestWrite>
 800775c:	4603      	mov	r3, r0
 800775e:	2b00      	cmp	r3, #0
 8007760:	d001      	beq.n	8007766 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8007762:	2301      	movs	r3, #1
 8007764:	e08d      	b.n	8007882 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007766:	2300      	movs	r3, #0
 8007768:	613b      	str	r3, [r7, #16]
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	695b      	ldr	r3, [r3, #20]
 8007770:	613b      	str	r3, [r7, #16]
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	699b      	ldr	r3, [r3, #24]
 8007778:	613b      	str	r3, [r7, #16]
 800777a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800777c:	e066      	b.n	800784c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800777e:	697a      	ldr	r2, [r7, #20]
 8007780:	6a39      	ldr	r1, [r7, #32]
 8007782:	68f8      	ldr	r0, [r7, #12]
 8007784:	f000 f9de 	bl	8007b44 <I2C_WaitOnTXEFlagUntilTimeout>
 8007788:	4603      	mov	r3, r0
 800778a:	2b00      	cmp	r3, #0
 800778c:	d00d      	beq.n	80077aa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007792:	2b04      	cmp	r3, #4
 8007794:	d107      	bne.n	80077a6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80077a6:	2301      	movs	r3, #1
 80077a8:	e06b      	b.n	8007882 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ae:	781a      	ldrb	r2, [r3, #0]
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ba:	1c5a      	adds	r2, r3, #1
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	3b01      	subs	r3, #1
 80077c8:	b29a      	uxth	r2, r3
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077d2:	3b01      	subs	r3, #1
 80077d4:	b29a      	uxth	r2, r3
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	695b      	ldr	r3, [r3, #20]
 80077e0:	f003 0304 	and.w	r3, r3, #4
 80077e4:	2b04      	cmp	r3, #4
 80077e6:	d11b      	bne.n	8007820 <HAL_I2C_Master_Transmit+0x188>
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d017      	beq.n	8007820 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f4:	781a      	ldrb	r2, [r3, #0]
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007800:	1c5a      	adds	r2, r3, #1
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800780a:	b29b      	uxth	r3, r3
 800780c:	3b01      	subs	r3, #1
 800780e:	b29a      	uxth	r2, r3
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007818:	3b01      	subs	r3, #1
 800781a:	b29a      	uxth	r2, r3
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007820:	697a      	ldr	r2, [r7, #20]
 8007822:	6a39      	ldr	r1, [r7, #32]
 8007824:	68f8      	ldr	r0, [r7, #12]
 8007826:	f000 f9ce 	bl	8007bc6 <I2C_WaitOnBTFFlagUntilTimeout>
 800782a:	4603      	mov	r3, r0
 800782c:	2b00      	cmp	r3, #0
 800782e:	d00d      	beq.n	800784c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007834:	2b04      	cmp	r3, #4
 8007836:	d107      	bne.n	8007848 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007846:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007848:	2301      	movs	r3, #1
 800784a:	e01a      	b.n	8007882 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007850:	2b00      	cmp	r3, #0
 8007852:	d194      	bne.n	800777e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	681a      	ldr	r2, [r3, #0]
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007862:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2220      	movs	r2, #32
 8007868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2200      	movs	r2, #0
 8007870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2200      	movs	r2, #0
 8007878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800787c:	2300      	movs	r3, #0
 800787e:	e000      	b.n	8007882 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007880:	2302      	movs	r3, #2
  }
}
 8007882:	4618      	mov	r0, r3
 8007884:	3718      	adds	r7, #24
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}
 800788a:	bf00      	nop
 800788c:	00100002 	.word	0x00100002
 8007890:	ffff0000 	.word	0xffff0000

08007894 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b088      	sub	sp, #32
 8007898:	af02      	add	r7, sp, #8
 800789a:	60f8      	str	r0, [r7, #12]
 800789c:	607a      	str	r2, [r7, #4]
 800789e:	603b      	str	r3, [r7, #0]
 80078a0:	460b      	mov	r3, r1
 80078a2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	2b08      	cmp	r3, #8
 80078ae:	d006      	beq.n	80078be <I2C_MasterRequestWrite+0x2a>
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d003      	beq.n	80078be <I2C_MasterRequestWrite+0x2a>
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80078bc:	d108      	bne.n	80078d0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	681a      	ldr	r2, [r3, #0]
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80078cc:	601a      	str	r2, [r3, #0]
 80078ce:	e00b      	b.n	80078e8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078d4:	2b12      	cmp	r3, #18
 80078d6:	d107      	bne.n	80078e8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	681a      	ldr	r2, [r3, #0]
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80078e6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	9300      	str	r3, [sp, #0]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2200      	movs	r2, #0
 80078f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80078f4:	68f8      	ldr	r0, [r7, #12]
 80078f6:	f000 f84f 	bl	8007998 <I2C_WaitOnFlagUntilTimeout>
 80078fa:	4603      	mov	r3, r0
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d00d      	beq.n	800791c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800790a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800790e:	d103      	bne.n	8007918 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007916:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007918:	2303      	movs	r3, #3
 800791a:	e035      	b.n	8007988 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	691b      	ldr	r3, [r3, #16]
 8007920:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007924:	d108      	bne.n	8007938 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007926:	897b      	ldrh	r3, [r7, #10]
 8007928:	b2db      	uxtb	r3, r3
 800792a:	461a      	mov	r2, r3
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007934:	611a      	str	r2, [r3, #16]
 8007936:	e01b      	b.n	8007970 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007938:	897b      	ldrh	r3, [r7, #10]
 800793a:	11db      	asrs	r3, r3, #7
 800793c:	b2db      	uxtb	r3, r3
 800793e:	f003 0306 	and.w	r3, r3, #6
 8007942:	b2db      	uxtb	r3, r3
 8007944:	f063 030f 	orn	r3, r3, #15
 8007948:	b2da      	uxtb	r2, r3
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	687a      	ldr	r2, [r7, #4]
 8007954:	490e      	ldr	r1, [pc, #56]	; (8007990 <I2C_MasterRequestWrite+0xfc>)
 8007956:	68f8      	ldr	r0, [r7, #12]
 8007958:	f000 f875 	bl	8007a46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800795c:	4603      	mov	r3, r0
 800795e:	2b00      	cmp	r3, #0
 8007960:	d001      	beq.n	8007966 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007962:	2301      	movs	r3, #1
 8007964:	e010      	b.n	8007988 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007966:	897b      	ldrh	r3, [r7, #10]
 8007968:	b2da      	uxtb	r2, r3
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	687a      	ldr	r2, [r7, #4]
 8007974:	4907      	ldr	r1, [pc, #28]	; (8007994 <I2C_MasterRequestWrite+0x100>)
 8007976:	68f8      	ldr	r0, [r7, #12]
 8007978:	f000 f865 	bl	8007a46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800797c:	4603      	mov	r3, r0
 800797e:	2b00      	cmp	r3, #0
 8007980:	d001      	beq.n	8007986 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007982:	2301      	movs	r3, #1
 8007984:	e000      	b.n	8007988 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007986:	2300      	movs	r3, #0
}
 8007988:	4618      	mov	r0, r3
 800798a:	3718      	adds	r7, #24
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}
 8007990:	00010008 	.word	0x00010008
 8007994:	00010002 	.word	0x00010002

08007998 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b084      	sub	sp, #16
 800799c:	af00      	add	r7, sp, #0
 800799e:	60f8      	str	r0, [r7, #12]
 80079a0:	60b9      	str	r1, [r7, #8]
 80079a2:	603b      	str	r3, [r7, #0]
 80079a4:	4613      	mov	r3, r2
 80079a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80079a8:	e025      	b.n	80079f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079b0:	d021      	beq.n	80079f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079b2:	f7fd fdc7 	bl	8005544 <HAL_GetTick>
 80079b6:	4602      	mov	r2, r0
 80079b8:	69bb      	ldr	r3, [r7, #24]
 80079ba:	1ad3      	subs	r3, r2, r3
 80079bc:	683a      	ldr	r2, [r7, #0]
 80079be:	429a      	cmp	r2, r3
 80079c0:	d302      	bcc.n	80079c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d116      	bne.n	80079f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2200      	movs	r2, #0
 80079cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2220      	movs	r2, #32
 80079d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2200      	movs	r2, #0
 80079da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079e2:	f043 0220 	orr.w	r2, r3, #32
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2200      	movs	r2, #0
 80079ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80079f2:	2301      	movs	r3, #1
 80079f4:	e023      	b.n	8007a3e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	0c1b      	lsrs	r3, r3, #16
 80079fa:	b2db      	uxtb	r3, r3
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	d10d      	bne.n	8007a1c <I2C_WaitOnFlagUntilTimeout+0x84>
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	695b      	ldr	r3, [r3, #20]
 8007a06:	43da      	mvns	r2, r3
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	4013      	ands	r3, r2
 8007a0c:	b29b      	uxth	r3, r3
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	bf0c      	ite	eq
 8007a12:	2301      	moveq	r3, #1
 8007a14:	2300      	movne	r3, #0
 8007a16:	b2db      	uxtb	r3, r3
 8007a18:	461a      	mov	r2, r3
 8007a1a:	e00c      	b.n	8007a36 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	699b      	ldr	r3, [r3, #24]
 8007a22:	43da      	mvns	r2, r3
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	4013      	ands	r3, r2
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	bf0c      	ite	eq
 8007a2e:	2301      	moveq	r3, #1
 8007a30:	2300      	movne	r3, #0
 8007a32:	b2db      	uxtb	r3, r3
 8007a34:	461a      	mov	r2, r3
 8007a36:	79fb      	ldrb	r3, [r7, #7]
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	d0b6      	beq.n	80079aa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007a3c:	2300      	movs	r3, #0
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3710      	adds	r7, #16
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}

08007a46 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007a46:	b580      	push	{r7, lr}
 8007a48:	b084      	sub	sp, #16
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	60f8      	str	r0, [r7, #12]
 8007a4e:	60b9      	str	r1, [r7, #8]
 8007a50:	607a      	str	r2, [r7, #4]
 8007a52:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007a54:	e051      	b.n	8007afa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	695b      	ldr	r3, [r3, #20]
 8007a5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a64:	d123      	bne.n	8007aae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	681a      	ldr	r2, [r3, #0]
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a74:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007a7e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2200      	movs	r2, #0
 8007a84:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2220      	movs	r2, #32
 8007a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2200      	movs	r2, #0
 8007a92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a9a:	f043 0204 	orr.w	r2, r3, #4
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007aaa:	2301      	movs	r3, #1
 8007aac:	e046      	b.n	8007b3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ab4:	d021      	beq.n	8007afa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ab6:	f7fd fd45 	bl	8005544 <HAL_GetTick>
 8007aba:	4602      	mov	r2, r0
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	1ad3      	subs	r3, r2, r3
 8007ac0:	687a      	ldr	r2, [r7, #4]
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	d302      	bcc.n	8007acc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d116      	bne.n	8007afa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	2220      	movs	r2, #32
 8007ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	2200      	movs	r2, #0
 8007ade:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ae6:	f043 0220 	orr.w	r2, r3, #32
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2200      	movs	r2, #0
 8007af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007af6:	2301      	movs	r3, #1
 8007af8:	e020      	b.n	8007b3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	0c1b      	lsrs	r3, r3, #16
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d10c      	bne.n	8007b1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	695b      	ldr	r3, [r3, #20]
 8007b0a:	43da      	mvns	r2, r3
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	4013      	ands	r3, r2
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	bf14      	ite	ne
 8007b16:	2301      	movne	r3, #1
 8007b18:	2300      	moveq	r3, #0
 8007b1a:	b2db      	uxtb	r3, r3
 8007b1c:	e00b      	b.n	8007b36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	699b      	ldr	r3, [r3, #24]
 8007b24:	43da      	mvns	r2, r3
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	4013      	ands	r3, r2
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	bf14      	ite	ne
 8007b30:	2301      	movne	r3, #1
 8007b32:	2300      	moveq	r3, #0
 8007b34:	b2db      	uxtb	r3, r3
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d18d      	bne.n	8007a56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007b3a:	2300      	movs	r3, #0
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3710      	adds	r7, #16
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b084      	sub	sp, #16
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	60f8      	str	r0, [r7, #12]
 8007b4c:	60b9      	str	r1, [r7, #8]
 8007b4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007b50:	e02d      	b.n	8007bae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007b52:	68f8      	ldr	r0, [r7, #12]
 8007b54:	f000 f878 	bl	8007c48 <I2C_IsAcknowledgeFailed>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d001      	beq.n	8007b62 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	e02d      	b.n	8007bbe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b68:	d021      	beq.n	8007bae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b6a:	f7fd fceb 	bl	8005544 <HAL_GetTick>
 8007b6e:	4602      	mov	r2, r0
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	1ad3      	subs	r3, r2, r3
 8007b74:	68ba      	ldr	r2, [r7, #8]
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d302      	bcc.n	8007b80 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d116      	bne.n	8007bae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2200      	movs	r2, #0
 8007b84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2220      	movs	r2, #32
 8007b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2200      	movs	r2, #0
 8007b92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b9a:	f043 0220 	orr.w	r2, r3, #32
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007baa:	2301      	movs	r3, #1
 8007bac:	e007      	b.n	8007bbe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	695b      	ldr	r3, [r3, #20]
 8007bb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bb8:	2b80      	cmp	r3, #128	; 0x80
 8007bba:	d1ca      	bne.n	8007b52 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007bbc:	2300      	movs	r3, #0
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3710      	adds	r7, #16
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}

08007bc6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007bc6:	b580      	push	{r7, lr}
 8007bc8:	b084      	sub	sp, #16
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	60f8      	str	r0, [r7, #12]
 8007bce:	60b9      	str	r1, [r7, #8]
 8007bd0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007bd2:	e02d      	b.n	8007c30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007bd4:	68f8      	ldr	r0, [r7, #12]
 8007bd6:	f000 f837 	bl	8007c48 <I2C_IsAcknowledgeFailed>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d001      	beq.n	8007be4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007be0:	2301      	movs	r3, #1
 8007be2:	e02d      	b.n	8007c40 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bea:	d021      	beq.n	8007c30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007bec:	f7fd fcaa 	bl	8005544 <HAL_GetTick>
 8007bf0:	4602      	mov	r2, r0
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	1ad3      	subs	r3, r2, r3
 8007bf6:	68ba      	ldr	r2, [r7, #8]
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d302      	bcc.n	8007c02 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d116      	bne.n	8007c30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2200      	movs	r2, #0
 8007c06:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	2220      	movs	r2, #32
 8007c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	2200      	movs	r2, #0
 8007c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c1c:	f043 0220 	orr.w	r2, r3, #32
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2200      	movs	r2, #0
 8007c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	e007      	b.n	8007c40 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	695b      	ldr	r3, [r3, #20]
 8007c36:	f003 0304 	and.w	r3, r3, #4
 8007c3a:	2b04      	cmp	r3, #4
 8007c3c:	d1ca      	bne.n	8007bd4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007c3e:	2300      	movs	r3, #0
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3710      	adds	r7, #16
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}

08007c48 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b083      	sub	sp, #12
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	695b      	ldr	r3, [r3, #20]
 8007c56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c5e:	d11b      	bne.n	8007c98 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007c68:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2220      	movs	r2, #32
 8007c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c84:	f043 0204 	orr.w	r2, r3, #4
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007c94:	2301      	movs	r3, #1
 8007c96:	e000      	b.n	8007c9a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007c98:	2300      	movs	r3, #0
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	370c      	adds	r7, #12
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca4:	4770      	bx	lr
	...

08007ca8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b086      	sub	sp, #24
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d101      	bne.n	8007cba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	e264      	b.n	8008184 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f003 0301 	and.w	r3, r3, #1
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d075      	beq.n	8007db2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007cc6:	4ba3      	ldr	r3, [pc, #652]	; (8007f54 <HAL_RCC_OscConfig+0x2ac>)
 8007cc8:	689b      	ldr	r3, [r3, #8]
 8007cca:	f003 030c 	and.w	r3, r3, #12
 8007cce:	2b04      	cmp	r3, #4
 8007cd0:	d00c      	beq.n	8007cec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007cd2:	4ba0      	ldr	r3, [pc, #640]	; (8007f54 <HAL_RCC_OscConfig+0x2ac>)
 8007cd4:	689b      	ldr	r3, [r3, #8]
 8007cd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007cda:	2b08      	cmp	r3, #8
 8007cdc:	d112      	bne.n	8007d04 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007cde:	4b9d      	ldr	r3, [pc, #628]	; (8007f54 <HAL_RCC_OscConfig+0x2ac>)
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ce6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007cea:	d10b      	bne.n	8007d04 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007cec:	4b99      	ldr	r3, [pc, #612]	; (8007f54 <HAL_RCC_OscConfig+0x2ac>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d05b      	beq.n	8007db0 <HAL_RCC_OscConfig+0x108>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d157      	bne.n	8007db0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007d00:	2301      	movs	r3, #1
 8007d02:	e23f      	b.n	8008184 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d0c:	d106      	bne.n	8007d1c <HAL_RCC_OscConfig+0x74>
 8007d0e:	4b91      	ldr	r3, [pc, #580]	; (8007f54 <HAL_RCC_OscConfig+0x2ac>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a90      	ldr	r2, [pc, #576]	; (8007f54 <HAL_RCC_OscConfig+0x2ac>)
 8007d14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d18:	6013      	str	r3, [r2, #0]
 8007d1a:	e01d      	b.n	8007d58 <HAL_RCC_OscConfig+0xb0>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	685b      	ldr	r3, [r3, #4]
 8007d20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007d24:	d10c      	bne.n	8007d40 <HAL_RCC_OscConfig+0x98>
 8007d26:	4b8b      	ldr	r3, [pc, #556]	; (8007f54 <HAL_RCC_OscConfig+0x2ac>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a8a      	ldr	r2, [pc, #552]	; (8007f54 <HAL_RCC_OscConfig+0x2ac>)
 8007d2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007d30:	6013      	str	r3, [r2, #0]
 8007d32:	4b88      	ldr	r3, [pc, #544]	; (8007f54 <HAL_RCC_OscConfig+0x2ac>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a87      	ldr	r2, [pc, #540]	; (8007f54 <HAL_RCC_OscConfig+0x2ac>)
 8007d38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d3c:	6013      	str	r3, [r2, #0]
 8007d3e:	e00b      	b.n	8007d58 <HAL_RCC_OscConfig+0xb0>
 8007d40:	4b84      	ldr	r3, [pc, #528]	; (8007f54 <HAL_RCC_OscConfig+0x2ac>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a83      	ldr	r2, [pc, #524]	; (8007f54 <HAL_RCC_OscConfig+0x2ac>)
 8007d46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d4a:	6013      	str	r3, [r2, #0]
 8007d4c:	4b81      	ldr	r3, [pc, #516]	; (8007f54 <HAL_RCC_OscConfig+0x2ac>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4a80      	ldr	r2, [pc, #512]	; (8007f54 <HAL_RCC_OscConfig+0x2ac>)
 8007d52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d013      	beq.n	8007d88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d60:	f7fd fbf0 	bl	8005544 <HAL_GetTick>
 8007d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d66:	e008      	b.n	8007d7a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007d68:	f7fd fbec 	bl	8005544 <HAL_GetTick>
 8007d6c:	4602      	mov	r2, r0
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	1ad3      	subs	r3, r2, r3
 8007d72:	2b64      	cmp	r3, #100	; 0x64
 8007d74:	d901      	bls.n	8007d7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007d76:	2303      	movs	r3, #3
 8007d78:	e204      	b.n	8008184 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d7a:	4b76      	ldr	r3, [pc, #472]	; (8007f54 <HAL_RCC_OscConfig+0x2ac>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d0f0      	beq.n	8007d68 <HAL_RCC_OscConfig+0xc0>
 8007d86:	e014      	b.n	8007db2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d88:	f7fd fbdc 	bl	8005544 <HAL_GetTick>
 8007d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d8e:	e008      	b.n	8007da2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007d90:	f7fd fbd8 	bl	8005544 <HAL_GetTick>
 8007d94:	4602      	mov	r2, r0
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	1ad3      	subs	r3, r2, r3
 8007d9a:	2b64      	cmp	r3, #100	; 0x64
 8007d9c:	d901      	bls.n	8007da2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007d9e:	2303      	movs	r3, #3
 8007da0:	e1f0      	b.n	8008184 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007da2:	4b6c      	ldr	r3, [pc, #432]	; (8007f54 <HAL_RCC_OscConfig+0x2ac>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d1f0      	bne.n	8007d90 <HAL_RCC_OscConfig+0xe8>
 8007dae:	e000      	b.n	8007db2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007db0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f003 0302 	and.w	r3, r3, #2
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d063      	beq.n	8007e86 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007dbe:	4b65      	ldr	r3, [pc, #404]	; (8007f54 <HAL_RCC_OscConfig+0x2ac>)
 8007dc0:	689b      	ldr	r3, [r3, #8]
 8007dc2:	f003 030c 	and.w	r3, r3, #12
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d00b      	beq.n	8007de2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007dca:	4b62      	ldr	r3, [pc, #392]	; (8007f54 <HAL_RCC_OscConfig+0x2ac>)
 8007dcc:	689b      	ldr	r3, [r3, #8]
 8007dce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007dd2:	2b08      	cmp	r3, #8
 8007dd4:	d11c      	bne.n	8007e10 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007dd6:	4b5f      	ldr	r3, [pc, #380]	; (8007f54 <HAL_RCC_OscConfig+0x2ac>)
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d116      	bne.n	8007e10 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007de2:	4b5c      	ldr	r3, [pc, #368]	; (8007f54 <HAL_RCC_OscConfig+0x2ac>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f003 0302 	and.w	r3, r3, #2
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d005      	beq.n	8007dfa <HAL_RCC_OscConfig+0x152>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	68db      	ldr	r3, [r3, #12]
 8007df2:	2b01      	cmp	r3, #1
 8007df4:	d001      	beq.n	8007dfa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007df6:	2301      	movs	r3, #1
 8007df8:	e1c4      	b.n	8008184 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007dfa:	4b56      	ldr	r3, [pc, #344]	; (8007f54 <HAL_RCC_OscConfig+0x2ac>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	691b      	ldr	r3, [r3, #16]
 8007e06:	00db      	lsls	r3, r3, #3
 8007e08:	4952      	ldr	r1, [pc, #328]	; (8007f54 <HAL_RCC_OscConfig+0x2ac>)
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007e0e:	e03a      	b.n	8007e86 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	68db      	ldr	r3, [r3, #12]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d020      	beq.n	8007e5a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007e18:	4b4f      	ldr	r3, [pc, #316]	; (8007f58 <HAL_RCC_OscConfig+0x2b0>)
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e1e:	f7fd fb91 	bl	8005544 <HAL_GetTick>
 8007e22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e24:	e008      	b.n	8007e38 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007e26:	f7fd fb8d 	bl	8005544 <HAL_GetTick>
 8007e2a:	4602      	mov	r2, r0
 8007e2c:	693b      	ldr	r3, [r7, #16]
 8007e2e:	1ad3      	subs	r3, r2, r3
 8007e30:	2b02      	cmp	r3, #2
 8007e32:	d901      	bls.n	8007e38 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007e34:	2303      	movs	r3, #3
 8007e36:	e1a5      	b.n	8008184 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e38:	4b46      	ldr	r3, [pc, #280]	; (8007f54 <HAL_RCC_OscConfig+0x2ac>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f003 0302 	and.w	r3, r3, #2
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d0f0      	beq.n	8007e26 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e44:	4b43      	ldr	r3, [pc, #268]	; (8007f54 <HAL_RCC_OscConfig+0x2ac>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	691b      	ldr	r3, [r3, #16]
 8007e50:	00db      	lsls	r3, r3, #3
 8007e52:	4940      	ldr	r1, [pc, #256]	; (8007f54 <HAL_RCC_OscConfig+0x2ac>)
 8007e54:	4313      	orrs	r3, r2
 8007e56:	600b      	str	r3, [r1, #0]
 8007e58:	e015      	b.n	8007e86 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007e5a:	4b3f      	ldr	r3, [pc, #252]	; (8007f58 <HAL_RCC_OscConfig+0x2b0>)
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e60:	f7fd fb70 	bl	8005544 <HAL_GetTick>
 8007e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e66:	e008      	b.n	8007e7a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007e68:	f7fd fb6c 	bl	8005544 <HAL_GetTick>
 8007e6c:	4602      	mov	r2, r0
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	1ad3      	subs	r3, r2, r3
 8007e72:	2b02      	cmp	r3, #2
 8007e74:	d901      	bls.n	8007e7a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007e76:	2303      	movs	r3, #3
 8007e78:	e184      	b.n	8008184 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e7a:	4b36      	ldr	r3, [pc, #216]	; (8007f54 <HAL_RCC_OscConfig+0x2ac>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f003 0302 	and.w	r3, r3, #2
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d1f0      	bne.n	8007e68 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f003 0308 	and.w	r3, r3, #8
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d030      	beq.n	8007ef4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	695b      	ldr	r3, [r3, #20]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d016      	beq.n	8007ec8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007e9a:	4b30      	ldr	r3, [pc, #192]	; (8007f5c <HAL_RCC_OscConfig+0x2b4>)
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ea0:	f7fd fb50 	bl	8005544 <HAL_GetTick>
 8007ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007ea6:	e008      	b.n	8007eba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007ea8:	f7fd fb4c 	bl	8005544 <HAL_GetTick>
 8007eac:	4602      	mov	r2, r0
 8007eae:	693b      	ldr	r3, [r7, #16]
 8007eb0:	1ad3      	subs	r3, r2, r3
 8007eb2:	2b02      	cmp	r3, #2
 8007eb4:	d901      	bls.n	8007eba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007eb6:	2303      	movs	r3, #3
 8007eb8:	e164      	b.n	8008184 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007eba:	4b26      	ldr	r3, [pc, #152]	; (8007f54 <HAL_RCC_OscConfig+0x2ac>)
 8007ebc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ebe:	f003 0302 	and.w	r3, r3, #2
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d0f0      	beq.n	8007ea8 <HAL_RCC_OscConfig+0x200>
 8007ec6:	e015      	b.n	8007ef4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007ec8:	4b24      	ldr	r3, [pc, #144]	; (8007f5c <HAL_RCC_OscConfig+0x2b4>)
 8007eca:	2200      	movs	r2, #0
 8007ecc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007ece:	f7fd fb39 	bl	8005544 <HAL_GetTick>
 8007ed2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ed4:	e008      	b.n	8007ee8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007ed6:	f7fd fb35 	bl	8005544 <HAL_GetTick>
 8007eda:	4602      	mov	r2, r0
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	1ad3      	subs	r3, r2, r3
 8007ee0:	2b02      	cmp	r3, #2
 8007ee2:	d901      	bls.n	8007ee8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007ee4:	2303      	movs	r3, #3
 8007ee6:	e14d      	b.n	8008184 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ee8:	4b1a      	ldr	r3, [pc, #104]	; (8007f54 <HAL_RCC_OscConfig+0x2ac>)
 8007eea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007eec:	f003 0302 	and.w	r3, r3, #2
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d1f0      	bne.n	8007ed6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f003 0304 	and.w	r3, r3, #4
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	f000 80a0 	beq.w	8008042 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007f02:	2300      	movs	r3, #0
 8007f04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007f06:	4b13      	ldr	r3, [pc, #76]	; (8007f54 <HAL_RCC_OscConfig+0x2ac>)
 8007f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d10f      	bne.n	8007f32 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f12:	2300      	movs	r3, #0
 8007f14:	60bb      	str	r3, [r7, #8]
 8007f16:	4b0f      	ldr	r3, [pc, #60]	; (8007f54 <HAL_RCC_OscConfig+0x2ac>)
 8007f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f1a:	4a0e      	ldr	r2, [pc, #56]	; (8007f54 <HAL_RCC_OscConfig+0x2ac>)
 8007f1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f20:	6413      	str	r3, [r2, #64]	; 0x40
 8007f22:	4b0c      	ldr	r3, [pc, #48]	; (8007f54 <HAL_RCC_OscConfig+0x2ac>)
 8007f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f2a:	60bb      	str	r3, [r7, #8]
 8007f2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f32:	4b0b      	ldr	r3, [pc, #44]	; (8007f60 <HAL_RCC_OscConfig+0x2b8>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d121      	bne.n	8007f82 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007f3e:	4b08      	ldr	r3, [pc, #32]	; (8007f60 <HAL_RCC_OscConfig+0x2b8>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a07      	ldr	r2, [pc, #28]	; (8007f60 <HAL_RCC_OscConfig+0x2b8>)
 8007f44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007f4a:	f7fd fafb 	bl	8005544 <HAL_GetTick>
 8007f4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f50:	e011      	b.n	8007f76 <HAL_RCC_OscConfig+0x2ce>
 8007f52:	bf00      	nop
 8007f54:	40023800 	.word	0x40023800
 8007f58:	42470000 	.word	0x42470000
 8007f5c:	42470e80 	.word	0x42470e80
 8007f60:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f64:	f7fd faee 	bl	8005544 <HAL_GetTick>
 8007f68:	4602      	mov	r2, r0
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	1ad3      	subs	r3, r2, r3
 8007f6e:	2b02      	cmp	r3, #2
 8007f70:	d901      	bls.n	8007f76 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007f72:	2303      	movs	r3, #3
 8007f74:	e106      	b.n	8008184 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f76:	4b85      	ldr	r3, [pc, #532]	; (800818c <HAL_RCC_OscConfig+0x4e4>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d0f0      	beq.n	8007f64 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	689b      	ldr	r3, [r3, #8]
 8007f86:	2b01      	cmp	r3, #1
 8007f88:	d106      	bne.n	8007f98 <HAL_RCC_OscConfig+0x2f0>
 8007f8a:	4b81      	ldr	r3, [pc, #516]	; (8008190 <HAL_RCC_OscConfig+0x4e8>)
 8007f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f8e:	4a80      	ldr	r2, [pc, #512]	; (8008190 <HAL_RCC_OscConfig+0x4e8>)
 8007f90:	f043 0301 	orr.w	r3, r3, #1
 8007f94:	6713      	str	r3, [r2, #112]	; 0x70
 8007f96:	e01c      	b.n	8007fd2 <HAL_RCC_OscConfig+0x32a>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	689b      	ldr	r3, [r3, #8]
 8007f9c:	2b05      	cmp	r3, #5
 8007f9e:	d10c      	bne.n	8007fba <HAL_RCC_OscConfig+0x312>
 8007fa0:	4b7b      	ldr	r3, [pc, #492]	; (8008190 <HAL_RCC_OscConfig+0x4e8>)
 8007fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fa4:	4a7a      	ldr	r2, [pc, #488]	; (8008190 <HAL_RCC_OscConfig+0x4e8>)
 8007fa6:	f043 0304 	orr.w	r3, r3, #4
 8007faa:	6713      	str	r3, [r2, #112]	; 0x70
 8007fac:	4b78      	ldr	r3, [pc, #480]	; (8008190 <HAL_RCC_OscConfig+0x4e8>)
 8007fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fb0:	4a77      	ldr	r2, [pc, #476]	; (8008190 <HAL_RCC_OscConfig+0x4e8>)
 8007fb2:	f043 0301 	orr.w	r3, r3, #1
 8007fb6:	6713      	str	r3, [r2, #112]	; 0x70
 8007fb8:	e00b      	b.n	8007fd2 <HAL_RCC_OscConfig+0x32a>
 8007fba:	4b75      	ldr	r3, [pc, #468]	; (8008190 <HAL_RCC_OscConfig+0x4e8>)
 8007fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fbe:	4a74      	ldr	r2, [pc, #464]	; (8008190 <HAL_RCC_OscConfig+0x4e8>)
 8007fc0:	f023 0301 	bic.w	r3, r3, #1
 8007fc4:	6713      	str	r3, [r2, #112]	; 0x70
 8007fc6:	4b72      	ldr	r3, [pc, #456]	; (8008190 <HAL_RCC_OscConfig+0x4e8>)
 8007fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fca:	4a71      	ldr	r2, [pc, #452]	; (8008190 <HAL_RCC_OscConfig+0x4e8>)
 8007fcc:	f023 0304 	bic.w	r3, r3, #4
 8007fd0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	689b      	ldr	r3, [r3, #8]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d015      	beq.n	8008006 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fda:	f7fd fab3 	bl	8005544 <HAL_GetTick>
 8007fde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007fe0:	e00a      	b.n	8007ff8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007fe2:	f7fd faaf 	bl	8005544 <HAL_GetTick>
 8007fe6:	4602      	mov	r2, r0
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	1ad3      	subs	r3, r2, r3
 8007fec:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d901      	bls.n	8007ff8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007ff4:	2303      	movs	r3, #3
 8007ff6:	e0c5      	b.n	8008184 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ff8:	4b65      	ldr	r3, [pc, #404]	; (8008190 <HAL_RCC_OscConfig+0x4e8>)
 8007ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ffc:	f003 0302 	and.w	r3, r3, #2
 8008000:	2b00      	cmp	r3, #0
 8008002:	d0ee      	beq.n	8007fe2 <HAL_RCC_OscConfig+0x33a>
 8008004:	e014      	b.n	8008030 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008006:	f7fd fa9d 	bl	8005544 <HAL_GetTick>
 800800a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800800c:	e00a      	b.n	8008024 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800800e:	f7fd fa99 	bl	8005544 <HAL_GetTick>
 8008012:	4602      	mov	r2, r0
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	1ad3      	subs	r3, r2, r3
 8008018:	f241 3288 	movw	r2, #5000	; 0x1388
 800801c:	4293      	cmp	r3, r2
 800801e:	d901      	bls.n	8008024 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8008020:	2303      	movs	r3, #3
 8008022:	e0af      	b.n	8008184 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008024:	4b5a      	ldr	r3, [pc, #360]	; (8008190 <HAL_RCC_OscConfig+0x4e8>)
 8008026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008028:	f003 0302 	and.w	r3, r3, #2
 800802c:	2b00      	cmp	r3, #0
 800802e:	d1ee      	bne.n	800800e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008030:	7dfb      	ldrb	r3, [r7, #23]
 8008032:	2b01      	cmp	r3, #1
 8008034:	d105      	bne.n	8008042 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008036:	4b56      	ldr	r3, [pc, #344]	; (8008190 <HAL_RCC_OscConfig+0x4e8>)
 8008038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800803a:	4a55      	ldr	r2, [pc, #340]	; (8008190 <HAL_RCC_OscConfig+0x4e8>)
 800803c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008040:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	699b      	ldr	r3, [r3, #24]
 8008046:	2b00      	cmp	r3, #0
 8008048:	f000 809b 	beq.w	8008182 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800804c:	4b50      	ldr	r3, [pc, #320]	; (8008190 <HAL_RCC_OscConfig+0x4e8>)
 800804e:	689b      	ldr	r3, [r3, #8]
 8008050:	f003 030c 	and.w	r3, r3, #12
 8008054:	2b08      	cmp	r3, #8
 8008056:	d05c      	beq.n	8008112 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	699b      	ldr	r3, [r3, #24]
 800805c:	2b02      	cmp	r3, #2
 800805e:	d141      	bne.n	80080e4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008060:	4b4c      	ldr	r3, [pc, #304]	; (8008194 <HAL_RCC_OscConfig+0x4ec>)
 8008062:	2200      	movs	r2, #0
 8008064:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008066:	f7fd fa6d 	bl	8005544 <HAL_GetTick>
 800806a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800806c:	e008      	b.n	8008080 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800806e:	f7fd fa69 	bl	8005544 <HAL_GetTick>
 8008072:	4602      	mov	r2, r0
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	1ad3      	subs	r3, r2, r3
 8008078:	2b02      	cmp	r3, #2
 800807a:	d901      	bls.n	8008080 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800807c:	2303      	movs	r3, #3
 800807e:	e081      	b.n	8008184 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008080:	4b43      	ldr	r3, [pc, #268]	; (8008190 <HAL_RCC_OscConfig+0x4e8>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008088:	2b00      	cmp	r3, #0
 800808a:	d1f0      	bne.n	800806e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	69da      	ldr	r2, [r3, #28]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6a1b      	ldr	r3, [r3, #32]
 8008094:	431a      	orrs	r2, r3
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800809a:	019b      	lsls	r3, r3, #6
 800809c:	431a      	orrs	r2, r3
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080a2:	085b      	lsrs	r3, r3, #1
 80080a4:	3b01      	subs	r3, #1
 80080a6:	041b      	lsls	r3, r3, #16
 80080a8:	431a      	orrs	r2, r3
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ae:	061b      	lsls	r3, r3, #24
 80080b0:	4937      	ldr	r1, [pc, #220]	; (8008190 <HAL_RCC_OscConfig+0x4e8>)
 80080b2:	4313      	orrs	r3, r2
 80080b4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80080b6:	4b37      	ldr	r3, [pc, #220]	; (8008194 <HAL_RCC_OscConfig+0x4ec>)
 80080b8:	2201      	movs	r2, #1
 80080ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080bc:	f7fd fa42 	bl	8005544 <HAL_GetTick>
 80080c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80080c2:	e008      	b.n	80080d6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80080c4:	f7fd fa3e 	bl	8005544 <HAL_GetTick>
 80080c8:	4602      	mov	r2, r0
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	1ad3      	subs	r3, r2, r3
 80080ce:	2b02      	cmp	r3, #2
 80080d0:	d901      	bls.n	80080d6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80080d2:	2303      	movs	r3, #3
 80080d4:	e056      	b.n	8008184 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80080d6:	4b2e      	ldr	r3, [pc, #184]	; (8008190 <HAL_RCC_OscConfig+0x4e8>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d0f0      	beq.n	80080c4 <HAL_RCC_OscConfig+0x41c>
 80080e2:	e04e      	b.n	8008182 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80080e4:	4b2b      	ldr	r3, [pc, #172]	; (8008194 <HAL_RCC_OscConfig+0x4ec>)
 80080e6:	2200      	movs	r2, #0
 80080e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080ea:	f7fd fa2b 	bl	8005544 <HAL_GetTick>
 80080ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80080f0:	e008      	b.n	8008104 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80080f2:	f7fd fa27 	bl	8005544 <HAL_GetTick>
 80080f6:	4602      	mov	r2, r0
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	1ad3      	subs	r3, r2, r3
 80080fc:	2b02      	cmp	r3, #2
 80080fe:	d901      	bls.n	8008104 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8008100:	2303      	movs	r3, #3
 8008102:	e03f      	b.n	8008184 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008104:	4b22      	ldr	r3, [pc, #136]	; (8008190 <HAL_RCC_OscConfig+0x4e8>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800810c:	2b00      	cmp	r3, #0
 800810e:	d1f0      	bne.n	80080f2 <HAL_RCC_OscConfig+0x44a>
 8008110:	e037      	b.n	8008182 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	699b      	ldr	r3, [r3, #24]
 8008116:	2b01      	cmp	r3, #1
 8008118:	d101      	bne.n	800811e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800811a:	2301      	movs	r3, #1
 800811c:	e032      	b.n	8008184 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800811e:	4b1c      	ldr	r3, [pc, #112]	; (8008190 <HAL_RCC_OscConfig+0x4e8>)
 8008120:	685b      	ldr	r3, [r3, #4]
 8008122:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	699b      	ldr	r3, [r3, #24]
 8008128:	2b01      	cmp	r3, #1
 800812a:	d028      	beq.n	800817e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008136:	429a      	cmp	r2, r3
 8008138:	d121      	bne.n	800817e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008144:	429a      	cmp	r2, r3
 8008146:	d11a      	bne.n	800817e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008148:	68fa      	ldr	r2, [r7, #12]
 800814a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800814e:	4013      	ands	r3, r2
 8008150:	687a      	ldr	r2, [r7, #4]
 8008152:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008154:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008156:	4293      	cmp	r3, r2
 8008158:	d111      	bne.n	800817e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008164:	085b      	lsrs	r3, r3, #1
 8008166:	3b01      	subs	r3, #1
 8008168:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800816a:	429a      	cmp	r2, r3
 800816c:	d107      	bne.n	800817e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008178:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800817a:	429a      	cmp	r2, r3
 800817c:	d001      	beq.n	8008182 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800817e:	2301      	movs	r3, #1
 8008180:	e000      	b.n	8008184 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8008182:	2300      	movs	r3, #0
}
 8008184:	4618      	mov	r0, r3
 8008186:	3718      	adds	r7, #24
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}
 800818c:	40007000 	.word	0x40007000
 8008190:	40023800 	.word	0x40023800
 8008194:	42470060 	.word	0x42470060

08008198 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b084      	sub	sp, #16
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
 80081a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d101      	bne.n	80081ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80081a8:	2301      	movs	r3, #1
 80081aa:	e0cc      	b.n	8008346 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80081ac:	4b68      	ldr	r3, [pc, #416]	; (8008350 <HAL_RCC_ClockConfig+0x1b8>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f003 0307 	and.w	r3, r3, #7
 80081b4:	683a      	ldr	r2, [r7, #0]
 80081b6:	429a      	cmp	r2, r3
 80081b8:	d90c      	bls.n	80081d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081ba:	4b65      	ldr	r3, [pc, #404]	; (8008350 <HAL_RCC_ClockConfig+0x1b8>)
 80081bc:	683a      	ldr	r2, [r7, #0]
 80081be:	b2d2      	uxtb	r2, r2
 80081c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80081c2:	4b63      	ldr	r3, [pc, #396]	; (8008350 <HAL_RCC_ClockConfig+0x1b8>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f003 0307 	and.w	r3, r3, #7
 80081ca:	683a      	ldr	r2, [r7, #0]
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d001      	beq.n	80081d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80081d0:	2301      	movs	r3, #1
 80081d2:	e0b8      	b.n	8008346 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f003 0302 	and.w	r3, r3, #2
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d020      	beq.n	8008222 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f003 0304 	and.w	r3, r3, #4
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d005      	beq.n	80081f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80081ec:	4b59      	ldr	r3, [pc, #356]	; (8008354 <HAL_RCC_ClockConfig+0x1bc>)
 80081ee:	689b      	ldr	r3, [r3, #8]
 80081f0:	4a58      	ldr	r2, [pc, #352]	; (8008354 <HAL_RCC_ClockConfig+0x1bc>)
 80081f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80081f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f003 0308 	and.w	r3, r3, #8
 8008200:	2b00      	cmp	r3, #0
 8008202:	d005      	beq.n	8008210 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008204:	4b53      	ldr	r3, [pc, #332]	; (8008354 <HAL_RCC_ClockConfig+0x1bc>)
 8008206:	689b      	ldr	r3, [r3, #8]
 8008208:	4a52      	ldr	r2, [pc, #328]	; (8008354 <HAL_RCC_ClockConfig+0x1bc>)
 800820a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800820e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008210:	4b50      	ldr	r3, [pc, #320]	; (8008354 <HAL_RCC_ClockConfig+0x1bc>)
 8008212:	689b      	ldr	r3, [r3, #8]
 8008214:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	689b      	ldr	r3, [r3, #8]
 800821c:	494d      	ldr	r1, [pc, #308]	; (8008354 <HAL_RCC_ClockConfig+0x1bc>)
 800821e:	4313      	orrs	r3, r2
 8008220:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f003 0301 	and.w	r3, r3, #1
 800822a:	2b00      	cmp	r3, #0
 800822c:	d044      	beq.n	80082b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	685b      	ldr	r3, [r3, #4]
 8008232:	2b01      	cmp	r3, #1
 8008234:	d107      	bne.n	8008246 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008236:	4b47      	ldr	r3, [pc, #284]	; (8008354 <HAL_RCC_ClockConfig+0x1bc>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800823e:	2b00      	cmp	r3, #0
 8008240:	d119      	bne.n	8008276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008242:	2301      	movs	r3, #1
 8008244:	e07f      	b.n	8008346 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	685b      	ldr	r3, [r3, #4]
 800824a:	2b02      	cmp	r3, #2
 800824c:	d003      	beq.n	8008256 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008252:	2b03      	cmp	r3, #3
 8008254:	d107      	bne.n	8008266 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008256:	4b3f      	ldr	r3, [pc, #252]	; (8008354 <HAL_RCC_ClockConfig+0x1bc>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800825e:	2b00      	cmp	r3, #0
 8008260:	d109      	bne.n	8008276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008262:	2301      	movs	r3, #1
 8008264:	e06f      	b.n	8008346 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008266:	4b3b      	ldr	r3, [pc, #236]	; (8008354 <HAL_RCC_ClockConfig+0x1bc>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f003 0302 	and.w	r3, r3, #2
 800826e:	2b00      	cmp	r3, #0
 8008270:	d101      	bne.n	8008276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008272:	2301      	movs	r3, #1
 8008274:	e067      	b.n	8008346 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008276:	4b37      	ldr	r3, [pc, #220]	; (8008354 <HAL_RCC_ClockConfig+0x1bc>)
 8008278:	689b      	ldr	r3, [r3, #8]
 800827a:	f023 0203 	bic.w	r2, r3, #3
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	685b      	ldr	r3, [r3, #4]
 8008282:	4934      	ldr	r1, [pc, #208]	; (8008354 <HAL_RCC_ClockConfig+0x1bc>)
 8008284:	4313      	orrs	r3, r2
 8008286:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008288:	f7fd f95c 	bl	8005544 <HAL_GetTick>
 800828c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800828e:	e00a      	b.n	80082a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008290:	f7fd f958 	bl	8005544 <HAL_GetTick>
 8008294:	4602      	mov	r2, r0
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	1ad3      	subs	r3, r2, r3
 800829a:	f241 3288 	movw	r2, #5000	; 0x1388
 800829e:	4293      	cmp	r3, r2
 80082a0:	d901      	bls.n	80082a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80082a2:	2303      	movs	r3, #3
 80082a4:	e04f      	b.n	8008346 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80082a6:	4b2b      	ldr	r3, [pc, #172]	; (8008354 <HAL_RCC_ClockConfig+0x1bc>)
 80082a8:	689b      	ldr	r3, [r3, #8]
 80082aa:	f003 020c 	and.w	r2, r3, #12
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	685b      	ldr	r3, [r3, #4]
 80082b2:	009b      	lsls	r3, r3, #2
 80082b4:	429a      	cmp	r2, r3
 80082b6:	d1eb      	bne.n	8008290 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80082b8:	4b25      	ldr	r3, [pc, #148]	; (8008350 <HAL_RCC_ClockConfig+0x1b8>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f003 0307 	and.w	r3, r3, #7
 80082c0:	683a      	ldr	r2, [r7, #0]
 80082c2:	429a      	cmp	r2, r3
 80082c4:	d20c      	bcs.n	80082e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082c6:	4b22      	ldr	r3, [pc, #136]	; (8008350 <HAL_RCC_ClockConfig+0x1b8>)
 80082c8:	683a      	ldr	r2, [r7, #0]
 80082ca:	b2d2      	uxtb	r2, r2
 80082cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80082ce:	4b20      	ldr	r3, [pc, #128]	; (8008350 <HAL_RCC_ClockConfig+0x1b8>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f003 0307 	and.w	r3, r3, #7
 80082d6:	683a      	ldr	r2, [r7, #0]
 80082d8:	429a      	cmp	r2, r3
 80082da:	d001      	beq.n	80082e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80082dc:	2301      	movs	r3, #1
 80082de:	e032      	b.n	8008346 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f003 0304 	and.w	r3, r3, #4
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d008      	beq.n	80082fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80082ec:	4b19      	ldr	r3, [pc, #100]	; (8008354 <HAL_RCC_ClockConfig+0x1bc>)
 80082ee:	689b      	ldr	r3, [r3, #8]
 80082f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	68db      	ldr	r3, [r3, #12]
 80082f8:	4916      	ldr	r1, [pc, #88]	; (8008354 <HAL_RCC_ClockConfig+0x1bc>)
 80082fa:	4313      	orrs	r3, r2
 80082fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f003 0308 	and.w	r3, r3, #8
 8008306:	2b00      	cmp	r3, #0
 8008308:	d009      	beq.n	800831e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800830a:	4b12      	ldr	r3, [pc, #72]	; (8008354 <HAL_RCC_ClockConfig+0x1bc>)
 800830c:	689b      	ldr	r3, [r3, #8]
 800830e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	691b      	ldr	r3, [r3, #16]
 8008316:	00db      	lsls	r3, r3, #3
 8008318:	490e      	ldr	r1, [pc, #56]	; (8008354 <HAL_RCC_ClockConfig+0x1bc>)
 800831a:	4313      	orrs	r3, r2
 800831c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800831e:	f000 f821 	bl	8008364 <HAL_RCC_GetSysClockFreq>
 8008322:	4602      	mov	r2, r0
 8008324:	4b0b      	ldr	r3, [pc, #44]	; (8008354 <HAL_RCC_ClockConfig+0x1bc>)
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	091b      	lsrs	r3, r3, #4
 800832a:	f003 030f 	and.w	r3, r3, #15
 800832e:	490a      	ldr	r1, [pc, #40]	; (8008358 <HAL_RCC_ClockConfig+0x1c0>)
 8008330:	5ccb      	ldrb	r3, [r1, r3]
 8008332:	fa22 f303 	lsr.w	r3, r2, r3
 8008336:	4a09      	ldr	r2, [pc, #36]	; (800835c <HAL_RCC_ClockConfig+0x1c4>)
 8008338:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800833a:	4b09      	ldr	r3, [pc, #36]	; (8008360 <HAL_RCC_ClockConfig+0x1c8>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	4618      	mov	r0, r3
 8008340:	f7fd f8bc 	bl	80054bc <HAL_InitTick>

  return HAL_OK;
 8008344:	2300      	movs	r3, #0
}
 8008346:	4618      	mov	r0, r3
 8008348:	3710      	adds	r7, #16
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}
 800834e:	bf00      	nop
 8008350:	40023c00 	.word	0x40023c00
 8008354:	40023800 	.word	0x40023800
 8008358:	0800f5d0 	.word	0x0800f5d0
 800835c:	20000054 	.word	0x20000054
 8008360:	20000058 	.word	0x20000058

08008364 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008364:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008368:	b084      	sub	sp, #16
 800836a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800836c:	2300      	movs	r3, #0
 800836e:	607b      	str	r3, [r7, #4]
 8008370:	2300      	movs	r3, #0
 8008372:	60fb      	str	r3, [r7, #12]
 8008374:	2300      	movs	r3, #0
 8008376:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8008378:	2300      	movs	r3, #0
 800837a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800837c:	4b67      	ldr	r3, [pc, #412]	; (800851c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800837e:	689b      	ldr	r3, [r3, #8]
 8008380:	f003 030c 	and.w	r3, r3, #12
 8008384:	2b08      	cmp	r3, #8
 8008386:	d00d      	beq.n	80083a4 <HAL_RCC_GetSysClockFreq+0x40>
 8008388:	2b08      	cmp	r3, #8
 800838a:	f200 80bd 	bhi.w	8008508 <HAL_RCC_GetSysClockFreq+0x1a4>
 800838e:	2b00      	cmp	r3, #0
 8008390:	d002      	beq.n	8008398 <HAL_RCC_GetSysClockFreq+0x34>
 8008392:	2b04      	cmp	r3, #4
 8008394:	d003      	beq.n	800839e <HAL_RCC_GetSysClockFreq+0x3a>
 8008396:	e0b7      	b.n	8008508 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008398:	4b61      	ldr	r3, [pc, #388]	; (8008520 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800839a:	60bb      	str	r3, [r7, #8]
       break;
 800839c:	e0b7      	b.n	800850e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800839e:	4b61      	ldr	r3, [pc, #388]	; (8008524 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80083a0:	60bb      	str	r3, [r7, #8]
      break;
 80083a2:	e0b4      	b.n	800850e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80083a4:	4b5d      	ldr	r3, [pc, #372]	; (800851c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80083a6:	685b      	ldr	r3, [r3, #4]
 80083a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80083ac:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80083ae:	4b5b      	ldr	r3, [pc, #364]	; (800851c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80083b0:	685b      	ldr	r3, [r3, #4]
 80083b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d04d      	beq.n	8008456 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80083ba:	4b58      	ldr	r3, [pc, #352]	; (800851c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	099b      	lsrs	r3, r3, #6
 80083c0:	461a      	mov	r2, r3
 80083c2:	f04f 0300 	mov.w	r3, #0
 80083c6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80083ca:	f04f 0100 	mov.w	r1, #0
 80083ce:	ea02 0800 	and.w	r8, r2, r0
 80083d2:	ea03 0901 	and.w	r9, r3, r1
 80083d6:	4640      	mov	r0, r8
 80083d8:	4649      	mov	r1, r9
 80083da:	f04f 0200 	mov.w	r2, #0
 80083de:	f04f 0300 	mov.w	r3, #0
 80083e2:	014b      	lsls	r3, r1, #5
 80083e4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80083e8:	0142      	lsls	r2, r0, #5
 80083ea:	4610      	mov	r0, r2
 80083ec:	4619      	mov	r1, r3
 80083ee:	ebb0 0008 	subs.w	r0, r0, r8
 80083f2:	eb61 0109 	sbc.w	r1, r1, r9
 80083f6:	f04f 0200 	mov.w	r2, #0
 80083fa:	f04f 0300 	mov.w	r3, #0
 80083fe:	018b      	lsls	r3, r1, #6
 8008400:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008404:	0182      	lsls	r2, r0, #6
 8008406:	1a12      	subs	r2, r2, r0
 8008408:	eb63 0301 	sbc.w	r3, r3, r1
 800840c:	f04f 0000 	mov.w	r0, #0
 8008410:	f04f 0100 	mov.w	r1, #0
 8008414:	00d9      	lsls	r1, r3, #3
 8008416:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800841a:	00d0      	lsls	r0, r2, #3
 800841c:	4602      	mov	r2, r0
 800841e:	460b      	mov	r3, r1
 8008420:	eb12 0208 	adds.w	r2, r2, r8
 8008424:	eb43 0309 	adc.w	r3, r3, r9
 8008428:	f04f 0000 	mov.w	r0, #0
 800842c:	f04f 0100 	mov.w	r1, #0
 8008430:	0259      	lsls	r1, r3, #9
 8008432:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8008436:	0250      	lsls	r0, r2, #9
 8008438:	4602      	mov	r2, r0
 800843a:	460b      	mov	r3, r1
 800843c:	4610      	mov	r0, r2
 800843e:	4619      	mov	r1, r3
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	461a      	mov	r2, r3
 8008444:	f04f 0300 	mov.w	r3, #0
 8008448:	f7f8 fc26 	bl	8000c98 <__aeabi_uldivmod>
 800844c:	4602      	mov	r2, r0
 800844e:	460b      	mov	r3, r1
 8008450:	4613      	mov	r3, r2
 8008452:	60fb      	str	r3, [r7, #12]
 8008454:	e04a      	b.n	80084ec <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008456:	4b31      	ldr	r3, [pc, #196]	; (800851c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008458:	685b      	ldr	r3, [r3, #4]
 800845a:	099b      	lsrs	r3, r3, #6
 800845c:	461a      	mov	r2, r3
 800845e:	f04f 0300 	mov.w	r3, #0
 8008462:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008466:	f04f 0100 	mov.w	r1, #0
 800846a:	ea02 0400 	and.w	r4, r2, r0
 800846e:	ea03 0501 	and.w	r5, r3, r1
 8008472:	4620      	mov	r0, r4
 8008474:	4629      	mov	r1, r5
 8008476:	f04f 0200 	mov.w	r2, #0
 800847a:	f04f 0300 	mov.w	r3, #0
 800847e:	014b      	lsls	r3, r1, #5
 8008480:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008484:	0142      	lsls	r2, r0, #5
 8008486:	4610      	mov	r0, r2
 8008488:	4619      	mov	r1, r3
 800848a:	1b00      	subs	r0, r0, r4
 800848c:	eb61 0105 	sbc.w	r1, r1, r5
 8008490:	f04f 0200 	mov.w	r2, #0
 8008494:	f04f 0300 	mov.w	r3, #0
 8008498:	018b      	lsls	r3, r1, #6
 800849a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800849e:	0182      	lsls	r2, r0, #6
 80084a0:	1a12      	subs	r2, r2, r0
 80084a2:	eb63 0301 	sbc.w	r3, r3, r1
 80084a6:	f04f 0000 	mov.w	r0, #0
 80084aa:	f04f 0100 	mov.w	r1, #0
 80084ae:	00d9      	lsls	r1, r3, #3
 80084b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80084b4:	00d0      	lsls	r0, r2, #3
 80084b6:	4602      	mov	r2, r0
 80084b8:	460b      	mov	r3, r1
 80084ba:	1912      	adds	r2, r2, r4
 80084bc:	eb45 0303 	adc.w	r3, r5, r3
 80084c0:	f04f 0000 	mov.w	r0, #0
 80084c4:	f04f 0100 	mov.w	r1, #0
 80084c8:	0299      	lsls	r1, r3, #10
 80084ca:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80084ce:	0290      	lsls	r0, r2, #10
 80084d0:	4602      	mov	r2, r0
 80084d2:	460b      	mov	r3, r1
 80084d4:	4610      	mov	r0, r2
 80084d6:	4619      	mov	r1, r3
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	461a      	mov	r2, r3
 80084dc:	f04f 0300 	mov.w	r3, #0
 80084e0:	f7f8 fbda 	bl	8000c98 <__aeabi_uldivmod>
 80084e4:	4602      	mov	r2, r0
 80084e6:	460b      	mov	r3, r1
 80084e8:	4613      	mov	r3, r2
 80084ea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80084ec:	4b0b      	ldr	r3, [pc, #44]	; (800851c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	0c1b      	lsrs	r3, r3, #16
 80084f2:	f003 0303 	and.w	r3, r3, #3
 80084f6:	3301      	adds	r3, #1
 80084f8:	005b      	lsls	r3, r3, #1
 80084fa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80084fc:	68fa      	ldr	r2, [r7, #12]
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	fbb2 f3f3 	udiv	r3, r2, r3
 8008504:	60bb      	str	r3, [r7, #8]
      break;
 8008506:	e002      	b.n	800850e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008508:	4b05      	ldr	r3, [pc, #20]	; (8008520 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800850a:	60bb      	str	r3, [r7, #8]
      break;
 800850c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800850e:	68bb      	ldr	r3, [r7, #8]
}
 8008510:	4618      	mov	r0, r3
 8008512:	3710      	adds	r7, #16
 8008514:	46bd      	mov	sp, r7
 8008516:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800851a:	bf00      	nop
 800851c:	40023800 	.word	0x40023800
 8008520:	00f42400 	.word	0x00f42400
 8008524:	007a1200 	.word	0x007a1200

08008528 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008528:	b480      	push	{r7}
 800852a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800852c:	4b03      	ldr	r3, [pc, #12]	; (800853c <HAL_RCC_GetHCLKFreq+0x14>)
 800852e:	681b      	ldr	r3, [r3, #0]
}
 8008530:	4618      	mov	r0, r3
 8008532:	46bd      	mov	sp, r7
 8008534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008538:	4770      	bx	lr
 800853a:	bf00      	nop
 800853c:	20000054 	.word	0x20000054

08008540 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008544:	f7ff fff0 	bl	8008528 <HAL_RCC_GetHCLKFreq>
 8008548:	4602      	mov	r2, r0
 800854a:	4b05      	ldr	r3, [pc, #20]	; (8008560 <HAL_RCC_GetPCLK1Freq+0x20>)
 800854c:	689b      	ldr	r3, [r3, #8]
 800854e:	0a9b      	lsrs	r3, r3, #10
 8008550:	f003 0307 	and.w	r3, r3, #7
 8008554:	4903      	ldr	r1, [pc, #12]	; (8008564 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008556:	5ccb      	ldrb	r3, [r1, r3]
 8008558:	fa22 f303 	lsr.w	r3, r2, r3
}
 800855c:	4618      	mov	r0, r3
 800855e:	bd80      	pop	{r7, pc}
 8008560:	40023800 	.word	0x40023800
 8008564:	0800f5e0 	.word	0x0800f5e0

08008568 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800856c:	f7ff ffdc 	bl	8008528 <HAL_RCC_GetHCLKFreq>
 8008570:	4602      	mov	r2, r0
 8008572:	4b05      	ldr	r3, [pc, #20]	; (8008588 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008574:	689b      	ldr	r3, [r3, #8]
 8008576:	0b5b      	lsrs	r3, r3, #13
 8008578:	f003 0307 	and.w	r3, r3, #7
 800857c:	4903      	ldr	r1, [pc, #12]	; (800858c <HAL_RCC_GetPCLK2Freq+0x24>)
 800857e:	5ccb      	ldrb	r3, [r1, r3]
 8008580:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008584:	4618      	mov	r0, r3
 8008586:	bd80      	pop	{r7, pc}
 8008588:	40023800 	.word	0x40023800
 800858c:	0800f5e0 	.word	0x0800f5e0

08008590 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b082      	sub	sp, #8
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d101      	bne.n	80085a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800859e:	2301      	movs	r3, #1
 80085a0:	e07b      	b.n	800869a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d108      	bne.n	80085bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	685b      	ldr	r3, [r3, #4]
 80085ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80085b2:	d009      	beq.n	80085c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2200      	movs	r2, #0
 80085b8:	61da      	str	r2, [r3, #28]
 80085ba:	e005      	b.n	80085c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2200      	movs	r2, #0
 80085c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2200      	movs	r2, #0
 80085c6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2200      	movs	r2, #0
 80085cc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80085d4:	b2db      	uxtb	r3, r3
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d106      	bne.n	80085e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2200      	movs	r2, #0
 80085de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f7fc fbc2 	bl	8004d6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2202      	movs	r2, #2
 80085ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	681a      	ldr	r2, [r3, #0]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80085fe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	689b      	ldr	r3, [r3, #8]
 800860c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008610:	431a      	orrs	r2, r3
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	68db      	ldr	r3, [r3, #12]
 8008616:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800861a:	431a      	orrs	r2, r3
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	691b      	ldr	r3, [r3, #16]
 8008620:	f003 0302 	and.w	r3, r3, #2
 8008624:	431a      	orrs	r2, r3
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	695b      	ldr	r3, [r3, #20]
 800862a:	f003 0301 	and.w	r3, r3, #1
 800862e:	431a      	orrs	r2, r3
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	699b      	ldr	r3, [r3, #24]
 8008634:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008638:	431a      	orrs	r2, r3
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	69db      	ldr	r3, [r3, #28]
 800863e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008642:	431a      	orrs	r2, r3
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6a1b      	ldr	r3, [r3, #32]
 8008648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800864c:	ea42 0103 	orr.w	r1, r2, r3
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008654:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	430a      	orrs	r2, r1
 800865e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	699b      	ldr	r3, [r3, #24]
 8008664:	0c1b      	lsrs	r3, r3, #16
 8008666:	f003 0104 	and.w	r1, r3, #4
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800866e:	f003 0210 	and.w	r2, r3, #16
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	430a      	orrs	r2, r1
 8008678:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	69da      	ldr	r2, [r3, #28]
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008688:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2200      	movs	r2, #0
 800868e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2201      	movs	r2, #1
 8008694:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008698:	2300      	movs	r3, #0
}
 800869a:	4618      	mov	r0, r3
 800869c:	3708      	adds	r7, #8
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}

080086a2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80086a2:	b580      	push	{r7, lr}
 80086a4:	b082      	sub	sp, #8
 80086a6:	af00      	add	r7, sp, #0
 80086a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d101      	bne.n	80086b4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80086b0:	2301      	movs	r3, #1
 80086b2:	e041      	b.n	8008738 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086ba:	b2db      	uxtb	r3, r3
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d106      	bne.n	80086ce <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2200      	movs	r2, #0
 80086c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f7fc fc63 	bl	8004f94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2202      	movs	r2, #2
 80086d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681a      	ldr	r2, [r3, #0]
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	3304      	adds	r3, #4
 80086de:	4619      	mov	r1, r3
 80086e0:	4610      	mov	r0, r2
 80086e2:	f000 fdcb 	bl	800927c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2201      	movs	r2, #1
 80086ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2201      	movs	r2, #1
 80086f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2201      	movs	r2, #1
 80086fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2201      	movs	r2, #1
 8008702:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2201      	movs	r2, #1
 800870a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2201      	movs	r2, #1
 8008712:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2201      	movs	r2, #1
 800871a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2201      	movs	r2, #1
 8008722:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2201      	movs	r2, #1
 800872a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2201      	movs	r2, #1
 8008732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008736:	2300      	movs	r3, #0
}
 8008738:	4618      	mov	r0, r3
 800873a:	3708      	adds	r7, #8
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}

08008740 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008740:	b480      	push	{r7}
 8008742:	b085      	sub	sp, #20
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800874e:	b2db      	uxtb	r3, r3
 8008750:	2b01      	cmp	r3, #1
 8008752:	d001      	beq.n	8008758 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008754:	2301      	movs	r3, #1
 8008756:	e044      	b.n	80087e2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2202      	movs	r2, #2
 800875c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	68da      	ldr	r2, [r3, #12]
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f042 0201 	orr.w	r2, r2, #1
 800876e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a1e      	ldr	r2, [pc, #120]	; (80087f0 <HAL_TIM_Base_Start_IT+0xb0>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d018      	beq.n	80087ac <HAL_TIM_Base_Start_IT+0x6c>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008782:	d013      	beq.n	80087ac <HAL_TIM_Base_Start_IT+0x6c>
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	4a1a      	ldr	r2, [pc, #104]	; (80087f4 <HAL_TIM_Base_Start_IT+0xb4>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d00e      	beq.n	80087ac <HAL_TIM_Base_Start_IT+0x6c>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4a19      	ldr	r2, [pc, #100]	; (80087f8 <HAL_TIM_Base_Start_IT+0xb8>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d009      	beq.n	80087ac <HAL_TIM_Base_Start_IT+0x6c>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4a17      	ldr	r2, [pc, #92]	; (80087fc <HAL_TIM_Base_Start_IT+0xbc>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d004      	beq.n	80087ac <HAL_TIM_Base_Start_IT+0x6c>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4a16      	ldr	r2, [pc, #88]	; (8008800 <HAL_TIM_Base_Start_IT+0xc0>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d111      	bne.n	80087d0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	689b      	ldr	r3, [r3, #8]
 80087b2:	f003 0307 	and.w	r3, r3, #7
 80087b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	2b06      	cmp	r3, #6
 80087bc:	d010      	beq.n	80087e0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	681a      	ldr	r2, [r3, #0]
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f042 0201 	orr.w	r2, r2, #1
 80087cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087ce:	e007      	b.n	80087e0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	681a      	ldr	r2, [r3, #0]
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f042 0201 	orr.w	r2, r2, #1
 80087de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80087e0:	2300      	movs	r3, #0
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3714      	adds	r7, #20
 80087e6:	46bd      	mov	sp, r7
 80087e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ec:	4770      	bx	lr
 80087ee:	bf00      	nop
 80087f0:	40010000 	.word	0x40010000
 80087f4:	40000400 	.word	0x40000400
 80087f8:	40000800 	.word	0x40000800
 80087fc:	40000c00 	.word	0x40000c00
 8008800:	40014000 	.word	0x40014000

08008804 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008804:	b480      	push	{r7}
 8008806:	b083      	sub	sp, #12
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	68da      	ldr	r2, [r3, #12]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f022 0201 	bic.w	r2, r2, #1
 800881a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	6a1a      	ldr	r2, [r3, #32]
 8008822:	f241 1311 	movw	r3, #4369	; 0x1111
 8008826:	4013      	ands	r3, r2
 8008828:	2b00      	cmp	r3, #0
 800882a:	d10f      	bne.n	800884c <HAL_TIM_Base_Stop_IT+0x48>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	6a1a      	ldr	r2, [r3, #32]
 8008832:	f240 4344 	movw	r3, #1092	; 0x444
 8008836:	4013      	ands	r3, r2
 8008838:	2b00      	cmp	r3, #0
 800883a:	d107      	bne.n	800884c <HAL_TIM_Base_Stop_IT+0x48>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	681a      	ldr	r2, [r3, #0]
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f022 0201 	bic.w	r2, r2, #1
 800884a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2201      	movs	r2, #1
 8008850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008854:	2300      	movs	r3, #0
}
 8008856:	4618      	mov	r0, r3
 8008858:	370c      	adds	r7, #12
 800885a:	46bd      	mov	sp, r7
 800885c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008860:	4770      	bx	lr

08008862 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008862:	b580      	push	{r7, lr}
 8008864:	b082      	sub	sp, #8
 8008866:	af00      	add	r7, sp, #0
 8008868:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d101      	bne.n	8008874 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008870:	2301      	movs	r3, #1
 8008872:	e041      	b.n	80088f8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800887a:	b2db      	uxtb	r3, r3
 800887c:	2b00      	cmp	r3, #0
 800887e:	d106      	bne.n	800888e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2200      	movs	r2, #0
 8008884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f7fc fb61 	bl	8004f50 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2202      	movs	r2, #2
 8008892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681a      	ldr	r2, [r3, #0]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	3304      	adds	r3, #4
 800889e:	4619      	mov	r1, r3
 80088a0:	4610      	mov	r0, r2
 80088a2:	f000 fceb 	bl	800927c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2201      	movs	r2, #1
 80088aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2201      	movs	r2, #1
 80088b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2201      	movs	r2, #1
 80088ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2201      	movs	r2, #1
 80088c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2201      	movs	r2, #1
 80088ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2201      	movs	r2, #1
 80088d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2201      	movs	r2, #1
 80088da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2201      	movs	r2, #1
 80088e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2201      	movs	r2, #1
 80088ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2201      	movs	r2, #1
 80088f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80088f6:	2300      	movs	r3, #0
}
 80088f8:	4618      	mov	r0, r3
 80088fa:	3708      	adds	r7, #8
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}

08008900 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b084      	sub	sp, #16
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
 8008908:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d109      	bne.n	8008924 <HAL_TIM_PWM_Start+0x24>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008916:	b2db      	uxtb	r3, r3
 8008918:	2b01      	cmp	r3, #1
 800891a:	bf14      	ite	ne
 800891c:	2301      	movne	r3, #1
 800891e:	2300      	moveq	r3, #0
 8008920:	b2db      	uxtb	r3, r3
 8008922:	e022      	b.n	800896a <HAL_TIM_PWM_Start+0x6a>
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	2b04      	cmp	r3, #4
 8008928:	d109      	bne.n	800893e <HAL_TIM_PWM_Start+0x3e>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008930:	b2db      	uxtb	r3, r3
 8008932:	2b01      	cmp	r3, #1
 8008934:	bf14      	ite	ne
 8008936:	2301      	movne	r3, #1
 8008938:	2300      	moveq	r3, #0
 800893a:	b2db      	uxtb	r3, r3
 800893c:	e015      	b.n	800896a <HAL_TIM_PWM_Start+0x6a>
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	2b08      	cmp	r3, #8
 8008942:	d109      	bne.n	8008958 <HAL_TIM_PWM_Start+0x58>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800894a:	b2db      	uxtb	r3, r3
 800894c:	2b01      	cmp	r3, #1
 800894e:	bf14      	ite	ne
 8008950:	2301      	movne	r3, #1
 8008952:	2300      	moveq	r3, #0
 8008954:	b2db      	uxtb	r3, r3
 8008956:	e008      	b.n	800896a <HAL_TIM_PWM_Start+0x6a>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800895e:	b2db      	uxtb	r3, r3
 8008960:	2b01      	cmp	r3, #1
 8008962:	bf14      	ite	ne
 8008964:	2301      	movne	r3, #1
 8008966:	2300      	moveq	r3, #0
 8008968:	b2db      	uxtb	r3, r3
 800896a:	2b00      	cmp	r3, #0
 800896c:	d001      	beq.n	8008972 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800896e:	2301      	movs	r3, #1
 8008970:	e068      	b.n	8008a44 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d104      	bne.n	8008982 <HAL_TIM_PWM_Start+0x82>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2202      	movs	r2, #2
 800897c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008980:	e013      	b.n	80089aa <HAL_TIM_PWM_Start+0xaa>
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	2b04      	cmp	r3, #4
 8008986:	d104      	bne.n	8008992 <HAL_TIM_PWM_Start+0x92>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2202      	movs	r2, #2
 800898c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008990:	e00b      	b.n	80089aa <HAL_TIM_PWM_Start+0xaa>
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	2b08      	cmp	r3, #8
 8008996:	d104      	bne.n	80089a2 <HAL_TIM_PWM_Start+0xa2>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2202      	movs	r2, #2
 800899c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80089a0:	e003      	b.n	80089aa <HAL_TIM_PWM_Start+0xaa>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2202      	movs	r2, #2
 80089a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	2201      	movs	r2, #1
 80089b0:	6839      	ldr	r1, [r7, #0]
 80089b2:	4618      	mov	r0, r3
 80089b4:	f000 ff08 	bl	80097c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4a23      	ldr	r2, [pc, #140]	; (8008a4c <HAL_TIM_PWM_Start+0x14c>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d107      	bne.n	80089d2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80089d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	4a1d      	ldr	r2, [pc, #116]	; (8008a4c <HAL_TIM_PWM_Start+0x14c>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	d018      	beq.n	8008a0e <HAL_TIM_PWM_Start+0x10e>
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089e4:	d013      	beq.n	8008a0e <HAL_TIM_PWM_Start+0x10e>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4a19      	ldr	r2, [pc, #100]	; (8008a50 <HAL_TIM_PWM_Start+0x150>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d00e      	beq.n	8008a0e <HAL_TIM_PWM_Start+0x10e>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4a17      	ldr	r2, [pc, #92]	; (8008a54 <HAL_TIM_PWM_Start+0x154>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d009      	beq.n	8008a0e <HAL_TIM_PWM_Start+0x10e>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	4a16      	ldr	r2, [pc, #88]	; (8008a58 <HAL_TIM_PWM_Start+0x158>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d004      	beq.n	8008a0e <HAL_TIM_PWM_Start+0x10e>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4a14      	ldr	r2, [pc, #80]	; (8008a5c <HAL_TIM_PWM_Start+0x15c>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d111      	bne.n	8008a32 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	689b      	ldr	r3, [r3, #8]
 8008a14:	f003 0307 	and.w	r3, r3, #7
 8008a18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	2b06      	cmp	r3, #6
 8008a1e:	d010      	beq.n	8008a42 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	681a      	ldr	r2, [r3, #0]
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f042 0201 	orr.w	r2, r2, #1
 8008a2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a30:	e007      	b.n	8008a42 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	681a      	ldr	r2, [r3, #0]
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f042 0201 	orr.w	r2, r2, #1
 8008a40:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008a42:	2300      	movs	r3, #0
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	3710      	adds	r7, #16
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}
 8008a4c:	40010000 	.word	0x40010000
 8008a50:	40000400 	.word	0x40000400
 8008a54:	40000800 	.word	0x40000800
 8008a58:	40000c00 	.word	0x40000c00
 8008a5c:	40014000 	.word	0x40014000

08008a60 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b086      	sub	sp, #24
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
 8008a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d101      	bne.n	8008a74 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008a70:	2301      	movs	r3, #1
 8008a72:	e097      	b.n	8008ba4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a7a:	b2db      	uxtb	r3, r3
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d106      	bne.n	8008a8e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2200      	movs	r2, #0
 8008a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f7fc f9b7 	bl	8004dfc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2202      	movs	r2, #2
 8008a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	689b      	ldr	r3, [r3, #8]
 8008a9c:	687a      	ldr	r2, [r7, #4]
 8008a9e:	6812      	ldr	r2, [r2, #0]
 8008aa0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008aa4:	f023 0307 	bic.w	r3, r3, #7
 8008aa8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681a      	ldr	r2, [r3, #0]
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	3304      	adds	r3, #4
 8008ab2:	4619      	mov	r1, r3
 8008ab4:	4610      	mov	r0, r2
 8008ab6:	f000 fbe1 	bl	800927c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	689b      	ldr	r3, [r3, #8]
 8008ac0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	699b      	ldr	r3, [r3, #24]
 8008ac8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	6a1b      	ldr	r3, [r3, #32]
 8008ad0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	697a      	ldr	r2, [r7, #20]
 8008ad8:	4313      	orrs	r3, r2
 8008ada:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ae2:	f023 0303 	bic.w	r3, r3, #3
 8008ae6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	689a      	ldr	r2, [r3, #8]
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	699b      	ldr	r3, [r3, #24]
 8008af0:	021b      	lsls	r3, r3, #8
 8008af2:	4313      	orrs	r3, r2
 8008af4:	693a      	ldr	r2, [r7, #16]
 8008af6:	4313      	orrs	r3, r2
 8008af8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008b00:	f023 030c 	bic.w	r3, r3, #12
 8008b04:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008b0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008b10:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	68da      	ldr	r2, [r3, #12]
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	69db      	ldr	r3, [r3, #28]
 8008b1a:	021b      	lsls	r3, r3, #8
 8008b1c:	4313      	orrs	r3, r2
 8008b1e:	693a      	ldr	r2, [r7, #16]
 8008b20:	4313      	orrs	r3, r2
 8008b22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	691b      	ldr	r3, [r3, #16]
 8008b28:	011a      	lsls	r2, r3, #4
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	6a1b      	ldr	r3, [r3, #32]
 8008b2e:	031b      	lsls	r3, r3, #12
 8008b30:	4313      	orrs	r3, r2
 8008b32:	693a      	ldr	r2, [r7, #16]
 8008b34:	4313      	orrs	r3, r2
 8008b36:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008b3e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008b46:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	685a      	ldr	r2, [r3, #4]
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	695b      	ldr	r3, [r3, #20]
 8008b50:	011b      	lsls	r3, r3, #4
 8008b52:	4313      	orrs	r3, r2
 8008b54:	68fa      	ldr	r2, [r7, #12]
 8008b56:	4313      	orrs	r3, r2
 8008b58:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	697a      	ldr	r2, [r7, #20]
 8008b60:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	693a      	ldr	r2, [r7, #16]
 8008b68:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	68fa      	ldr	r2, [r7, #12]
 8008b70:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2201      	movs	r2, #1
 8008b76:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2201      	movs	r2, #1
 8008b7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2201      	movs	r2, #1
 8008b86:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2201      	movs	r2, #1
 8008b8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2201      	movs	r2, #1
 8008b96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2201      	movs	r2, #1
 8008b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008ba2:	2300      	movs	r3, #0
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3718      	adds	r7, #24
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}

08008bac <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b084      	sub	sp, #16
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008bbc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008bc4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008bcc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008bd4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d110      	bne.n	8008bfe <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008bdc:	7bfb      	ldrb	r3, [r7, #15]
 8008bde:	2b01      	cmp	r3, #1
 8008be0:	d102      	bne.n	8008be8 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008be2:	7b7b      	ldrb	r3, [r7, #13]
 8008be4:	2b01      	cmp	r3, #1
 8008be6:	d001      	beq.n	8008bec <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8008be8:	2301      	movs	r3, #1
 8008bea:	e089      	b.n	8008d00 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2202      	movs	r2, #2
 8008bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2202      	movs	r2, #2
 8008bf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008bfc:	e031      	b.n	8008c62 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	2b04      	cmp	r3, #4
 8008c02:	d110      	bne.n	8008c26 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008c04:	7bbb      	ldrb	r3, [r7, #14]
 8008c06:	2b01      	cmp	r3, #1
 8008c08:	d102      	bne.n	8008c10 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008c0a:	7b3b      	ldrb	r3, [r7, #12]
 8008c0c:	2b01      	cmp	r3, #1
 8008c0e:	d001      	beq.n	8008c14 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8008c10:	2301      	movs	r3, #1
 8008c12:	e075      	b.n	8008d00 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2202      	movs	r2, #2
 8008c18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2202      	movs	r2, #2
 8008c20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008c24:	e01d      	b.n	8008c62 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008c26:	7bfb      	ldrb	r3, [r7, #15]
 8008c28:	2b01      	cmp	r3, #1
 8008c2a:	d108      	bne.n	8008c3e <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008c2c:	7bbb      	ldrb	r3, [r7, #14]
 8008c2e:	2b01      	cmp	r3, #1
 8008c30:	d105      	bne.n	8008c3e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008c32:	7b7b      	ldrb	r3, [r7, #13]
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	d102      	bne.n	8008c3e <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008c38:	7b3b      	ldrb	r3, [r7, #12]
 8008c3a:	2b01      	cmp	r3, #1
 8008c3c:	d001      	beq.n	8008c42 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8008c3e:	2301      	movs	r3, #1
 8008c40:	e05e      	b.n	8008d00 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2202      	movs	r2, #2
 8008c46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2202      	movs	r2, #2
 8008c4e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2202      	movs	r2, #2
 8008c56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2202      	movs	r2, #2
 8008c5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d003      	beq.n	8008c70 <HAL_TIM_Encoder_Start_IT+0xc4>
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	2b04      	cmp	r3, #4
 8008c6c:	d010      	beq.n	8008c90 <HAL_TIM_Encoder_Start_IT+0xe4>
 8008c6e:	e01f      	b.n	8008cb0 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	2201      	movs	r2, #1
 8008c76:	2100      	movs	r1, #0
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f000 fda5 	bl	80097c8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	68da      	ldr	r2, [r3, #12]
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f042 0202 	orr.w	r2, r2, #2
 8008c8c:	60da      	str	r2, [r3, #12]
      break;
 8008c8e:	e02e      	b.n	8008cee <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	2201      	movs	r2, #1
 8008c96:	2104      	movs	r1, #4
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f000 fd95 	bl	80097c8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	68da      	ldr	r2, [r3, #12]
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f042 0204 	orr.w	r2, r2, #4
 8008cac:	60da      	str	r2, [r3, #12]
      break;
 8008cae:	e01e      	b.n	8008cee <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	2201      	movs	r2, #1
 8008cb6:	2100      	movs	r1, #0
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f000 fd85 	bl	80097c8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	2104      	movs	r1, #4
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f000 fd7e 	bl	80097c8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	68da      	ldr	r2, [r3, #12]
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f042 0202 	orr.w	r2, r2, #2
 8008cda:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	68da      	ldr	r2, [r3, #12]
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f042 0204 	orr.w	r2, r2, #4
 8008cea:	60da      	str	r2, [r3, #12]
      break;
 8008cec:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	681a      	ldr	r2, [r3, #0]
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f042 0201 	orr.w	r2, r2, #1
 8008cfc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008cfe:	2300      	movs	r3, #0
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3710      	adds	r7, #16
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}

08008d08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b082      	sub	sp, #8
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	691b      	ldr	r3, [r3, #16]
 8008d16:	f003 0302 	and.w	r3, r3, #2
 8008d1a:	2b02      	cmp	r3, #2
 8008d1c:	d122      	bne.n	8008d64 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	68db      	ldr	r3, [r3, #12]
 8008d24:	f003 0302 	and.w	r3, r3, #2
 8008d28:	2b02      	cmp	r3, #2
 8008d2a:	d11b      	bne.n	8008d64 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f06f 0202 	mvn.w	r2, #2
 8008d34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2201      	movs	r2, #1
 8008d3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	699b      	ldr	r3, [r3, #24]
 8008d42:	f003 0303 	and.w	r3, r3, #3
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d003      	beq.n	8008d52 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f000 fa77 	bl	800923e <HAL_TIM_IC_CaptureCallback>
 8008d50:	e005      	b.n	8008d5e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f000 fa69 	bl	800922a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f000 fa7a 	bl	8009252 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2200      	movs	r2, #0
 8008d62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	691b      	ldr	r3, [r3, #16]
 8008d6a:	f003 0304 	and.w	r3, r3, #4
 8008d6e:	2b04      	cmp	r3, #4
 8008d70:	d122      	bne.n	8008db8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	68db      	ldr	r3, [r3, #12]
 8008d78:	f003 0304 	and.w	r3, r3, #4
 8008d7c:	2b04      	cmp	r3, #4
 8008d7e:	d11b      	bne.n	8008db8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f06f 0204 	mvn.w	r2, #4
 8008d88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2202      	movs	r2, #2
 8008d8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	699b      	ldr	r3, [r3, #24]
 8008d96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d003      	beq.n	8008da6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f000 fa4d 	bl	800923e <HAL_TIM_IC_CaptureCallback>
 8008da4:	e005      	b.n	8008db2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f000 fa3f 	bl	800922a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f000 fa50 	bl	8009252 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2200      	movs	r2, #0
 8008db6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	691b      	ldr	r3, [r3, #16]
 8008dbe:	f003 0308 	and.w	r3, r3, #8
 8008dc2:	2b08      	cmp	r3, #8
 8008dc4:	d122      	bne.n	8008e0c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	68db      	ldr	r3, [r3, #12]
 8008dcc:	f003 0308 	and.w	r3, r3, #8
 8008dd0:	2b08      	cmp	r3, #8
 8008dd2:	d11b      	bne.n	8008e0c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f06f 0208 	mvn.w	r2, #8
 8008ddc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2204      	movs	r2, #4
 8008de2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	69db      	ldr	r3, [r3, #28]
 8008dea:	f003 0303 	and.w	r3, r3, #3
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d003      	beq.n	8008dfa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f000 fa23 	bl	800923e <HAL_TIM_IC_CaptureCallback>
 8008df8:	e005      	b.n	8008e06 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f000 fa15 	bl	800922a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f000 fa26 	bl	8009252 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2200      	movs	r2, #0
 8008e0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	691b      	ldr	r3, [r3, #16]
 8008e12:	f003 0310 	and.w	r3, r3, #16
 8008e16:	2b10      	cmp	r3, #16
 8008e18:	d122      	bne.n	8008e60 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	68db      	ldr	r3, [r3, #12]
 8008e20:	f003 0310 	and.w	r3, r3, #16
 8008e24:	2b10      	cmp	r3, #16
 8008e26:	d11b      	bne.n	8008e60 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f06f 0210 	mvn.w	r2, #16
 8008e30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2208      	movs	r2, #8
 8008e36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	69db      	ldr	r3, [r3, #28]
 8008e3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d003      	beq.n	8008e4e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f000 f9f9 	bl	800923e <HAL_TIM_IC_CaptureCallback>
 8008e4c:	e005      	b.n	8008e5a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f000 f9eb 	bl	800922a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f000 f9fc 	bl	8009252 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	691b      	ldr	r3, [r3, #16]
 8008e66:	f003 0301 	and.w	r3, r3, #1
 8008e6a:	2b01      	cmp	r3, #1
 8008e6c:	d10e      	bne.n	8008e8c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	68db      	ldr	r3, [r3, #12]
 8008e74:	f003 0301 	and.w	r3, r3, #1
 8008e78:	2b01      	cmp	r3, #1
 8008e7a:	d107      	bne.n	8008e8c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f06f 0201 	mvn.w	r2, #1
 8008e84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f7fb fe30 	bl	8004aec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	691b      	ldr	r3, [r3, #16]
 8008e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e96:	2b80      	cmp	r3, #128	; 0x80
 8008e98:	d10e      	bne.n	8008eb8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	68db      	ldr	r3, [r3, #12]
 8008ea0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ea4:	2b80      	cmp	r3, #128	; 0x80
 8008ea6:	d107      	bne.n	8008eb8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008eb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f000 fd26 	bl	8009904 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	691b      	ldr	r3, [r3, #16]
 8008ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ec2:	2b40      	cmp	r3, #64	; 0x40
 8008ec4:	d10e      	bne.n	8008ee4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	68db      	ldr	r3, [r3, #12]
 8008ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ed0:	2b40      	cmp	r3, #64	; 0x40
 8008ed2:	d107      	bne.n	8008ee4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f000 f9c1 	bl	8009266 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	691b      	ldr	r3, [r3, #16]
 8008eea:	f003 0320 	and.w	r3, r3, #32
 8008eee:	2b20      	cmp	r3, #32
 8008ef0:	d10e      	bne.n	8008f10 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	68db      	ldr	r3, [r3, #12]
 8008ef8:	f003 0320 	and.w	r3, r3, #32
 8008efc:	2b20      	cmp	r3, #32
 8008efe:	d107      	bne.n	8008f10 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f06f 0220 	mvn.w	r2, #32
 8008f08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f000 fcf0 	bl	80098f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008f10:	bf00      	nop
 8008f12:	3708      	adds	r7, #8
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}

08008f18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b086      	sub	sp, #24
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	60f8      	str	r0, [r7, #12]
 8008f20:	60b9      	str	r1, [r7, #8]
 8008f22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008f24:	2300      	movs	r3, #0
 8008f26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f2e:	2b01      	cmp	r3, #1
 8008f30:	d101      	bne.n	8008f36 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008f32:	2302      	movs	r3, #2
 8008f34:	e0ae      	b.n	8009094 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	2201      	movs	r2, #1
 8008f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2b0c      	cmp	r3, #12
 8008f42:	f200 809f 	bhi.w	8009084 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008f46:	a201      	add	r2, pc, #4	; (adr r2, 8008f4c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f4c:	08008f81 	.word	0x08008f81
 8008f50:	08009085 	.word	0x08009085
 8008f54:	08009085 	.word	0x08009085
 8008f58:	08009085 	.word	0x08009085
 8008f5c:	08008fc1 	.word	0x08008fc1
 8008f60:	08009085 	.word	0x08009085
 8008f64:	08009085 	.word	0x08009085
 8008f68:	08009085 	.word	0x08009085
 8008f6c:	08009003 	.word	0x08009003
 8008f70:	08009085 	.word	0x08009085
 8008f74:	08009085 	.word	0x08009085
 8008f78:	08009085 	.word	0x08009085
 8008f7c:	08009043 	.word	0x08009043
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	68b9      	ldr	r1, [r7, #8]
 8008f86:	4618      	mov	r0, r3
 8008f88:	f000 f9f8 	bl	800937c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	699a      	ldr	r2, [r3, #24]
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f042 0208 	orr.w	r2, r2, #8
 8008f9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	699a      	ldr	r2, [r3, #24]
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f022 0204 	bic.w	r2, r2, #4
 8008faa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	6999      	ldr	r1, [r3, #24]
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	691a      	ldr	r2, [r3, #16]
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	430a      	orrs	r2, r1
 8008fbc:	619a      	str	r2, [r3, #24]
      break;
 8008fbe:	e064      	b.n	800908a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	68b9      	ldr	r1, [r7, #8]
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f000 fa3e 	bl	8009448 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	699a      	ldr	r2, [r3, #24]
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008fda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	699a      	ldr	r2, [r3, #24]
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008fea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	6999      	ldr	r1, [r3, #24]
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	691b      	ldr	r3, [r3, #16]
 8008ff6:	021a      	lsls	r2, r3, #8
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	430a      	orrs	r2, r1
 8008ffe:	619a      	str	r2, [r3, #24]
      break;
 8009000:	e043      	b.n	800908a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	68b9      	ldr	r1, [r7, #8]
 8009008:	4618      	mov	r0, r3
 800900a:	f000 fa89 	bl	8009520 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	69da      	ldr	r2, [r3, #28]
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f042 0208 	orr.w	r2, r2, #8
 800901c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	69da      	ldr	r2, [r3, #28]
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f022 0204 	bic.w	r2, r2, #4
 800902c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	69d9      	ldr	r1, [r3, #28]
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	691a      	ldr	r2, [r3, #16]
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	430a      	orrs	r2, r1
 800903e:	61da      	str	r2, [r3, #28]
      break;
 8009040:	e023      	b.n	800908a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	68b9      	ldr	r1, [r7, #8]
 8009048:	4618      	mov	r0, r3
 800904a:	f000 fad3 	bl	80095f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	69da      	ldr	r2, [r3, #28]
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800905c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	69da      	ldr	r2, [r3, #28]
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800906c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	69d9      	ldr	r1, [r3, #28]
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	691b      	ldr	r3, [r3, #16]
 8009078:	021a      	lsls	r2, r3, #8
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	430a      	orrs	r2, r1
 8009080:	61da      	str	r2, [r3, #28]
      break;
 8009082:	e002      	b.n	800908a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009084:	2301      	movs	r3, #1
 8009086:	75fb      	strb	r3, [r7, #23]
      break;
 8009088:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	2200      	movs	r2, #0
 800908e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009092:	7dfb      	ldrb	r3, [r7, #23]
}
 8009094:	4618      	mov	r0, r3
 8009096:	3718      	adds	r7, #24
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}

0800909c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b084      	sub	sp, #16
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
 80090a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80090a6:	2300      	movs	r3, #0
 80090a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090b0:	2b01      	cmp	r3, #1
 80090b2:	d101      	bne.n	80090b8 <HAL_TIM_ConfigClockSource+0x1c>
 80090b4:	2302      	movs	r3, #2
 80090b6:	e0b4      	b.n	8009222 <HAL_TIM_ConfigClockSource+0x186>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2201      	movs	r2, #1
 80090bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2202      	movs	r2, #2
 80090c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	689b      	ldr	r3, [r3, #8]
 80090ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80090d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80090de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	68ba      	ldr	r2, [r7, #8]
 80090e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090f0:	d03e      	beq.n	8009170 <HAL_TIM_ConfigClockSource+0xd4>
 80090f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090f6:	f200 8087 	bhi.w	8009208 <HAL_TIM_ConfigClockSource+0x16c>
 80090fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090fe:	f000 8086 	beq.w	800920e <HAL_TIM_ConfigClockSource+0x172>
 8009102:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009106:	d87f      	bhi.n	8009208 <HAL_TIM_ConfigClockSource+0x16c>
 8009108:	2b70      	cmp	r3, #112	; 0x70
 800910a:	d01a      	beq.n	8009142 <HAL_TIM_ConfigClockSource+0xa6>
 800910c:	2b70      	cmp	r3, #112	; 0x70
 800910e:	d87b      	bhi.n	8009208 <HAL_TIM_ConfigClockSource+0x16c>
 8009110:	2b60      	cmp	r3, #96	; 0x60
 8009112:	d050      	beq.n	80091b6 <HAL_TIM_ConfigClockSource+0x11a>
 8009114:	2b60      	cmp	r3, #96	; 0x60
 8009116:	d877      	bhi.n	8009208 <HAL_TIM_ConfigClockSource+0x16c>
 8009118:	2b50      	cmp	r3, #80	; 0x50
 800911a:	d03c      	beq.n	8009196 <HAL_TIM_ConfigClockSource+0xfa>
 800911c:	2b50      	cmp	r3, #80	; 0x50
 800911e:	d873      	bhi.n	8009208 <HAL_TIM_ConfigClockSource+0x16c>
 8009120:	2b40      	cmp	r3, #64	; 0x40
 8009122:	d058      	beq.n	80091d6 <HAL_TIM_ConfigClockSource+0x13a>
 8009124:	2b40      	cmp	r3, #64	; 0x40
 8009126:	d86f      	bhi.n	8009208 <HAL_TIM_ConfigClockSource+0x16c>
 8009128:	2b30      	cmp	r3, #48	; 0x30
 800912a:	d064      	beq.n	80091f6 <HAL_TIM_ConfigClockSource+0x15a>
 800912c:	2b30      	cmp	r3, #48	; 0x30
 800912e:	d86b      	bhi.n	8009208 <HAL_TIM_ConfigClockSource+0x16c>
 8009130:	2b20      	cmp	r3, #32
 8009132:	d060      	beq.n	80091f6 <HAL_TIM_ConfigClockSource+0x15a>
 8009134:	2b20      	cmp	r3, #32
 8009136:	d867      	bhi.n	8009208 <HAL_TIM_ConfigClockSource+0x16c>
 8009138:	2b00      	cmp	r3, #0
 800913a:	d05c      	beq.n	80091f6 <HAL_TIM_ConfigClockSource+0x15a>
 800913c:	2b10      	cmp	r3, #16
 800913e:	d05a      	beq.n	80091f6 <HAL_TIM_ConfigClockSource+0x15a>
 8009140:	e062      	b.n	8009208 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6818      	ldr	r0, [r3, #0]
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	6899      	ldr	r1, [r3, #8]
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	685a      	ldr	r2, [r3, #4]
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	68db      	ldr	r3, [r3, #12]
 8009152:	f000 fb19 	bl	8009788 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	689b      	ldr	r3, [r3, #8]
 800915c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009164:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	68ba      	ldr	r2, [r7, #8]
 800916c:	609a      	str	r2, [r3, #8]
      break;
 800916e:	e04f      	b.n	8009210 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6818      	ldr	r0, [r3, #0]
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	6899      	ldr	r1, [r3, #8]
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	685a      	ldr	r2, [r3, #4]
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	68db      	ldr	r3, [r3, #12]
 8009180:	f000 fb02 	bl	8009788 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	689a      	ldr	r2, [r3, #8]
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009192:	609a      	str	r2, [r3, #8]
      break;
 8009194:	e03c      	b.n	8009210 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6818      	ldr	r0, [r3, #0]
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	6859      	ldr	r1, [r3, #4]
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	68db      	ldr	r3, [r3, #12]
 80091a2:	461a      	mov	r2, r3
 80091a4:	f000 fa76 	bl	8009694 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	2150      	movs	r1, #80	; 0x50
 80091ae:	4618      	mov	r0, r3
 80091b0:	f000 facf 	bl	8009752 <TIM_ITRx_SetConfig>
      break;
 80091b4:	e02c      	b.n	8009210 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6818      	ldr	r0, [r3, #0]
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	6859      	ldr	r1, [r3, #4]
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	68db      	ldr	r3, [r3, #12]
 80091c2:	461a      	mov	r2, r3
 80091c4:	f000 fa95 	bl	80096f2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	2160      	movs	r1, #96	; 0x60
 80091ce:	4618      	mov	r0, r3
 80091d0:	f000 fabf 	bl	8009752 <TIM_ITRx_SetConfig>
      break;
 80091d4:	e01c      	b.n	8009210 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6818      	ldr	r0, [r3, #0]
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	6859      	ldr	r1, [r3, #4]
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	68db      	ldr	r3, [r3, #12]
 80091e2:	461a      	mov	r2, r3
 80091e4:	f000 fa56 	bl	8009694 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	2140      	movs	r1, #64	; 0x40
 80091ee:	4618      	mov	r0, r3
 80091f0:	f000 faaf 	bl	8009752 <TIM_ITRx_SetConfig>
      break;
 80091f4:	e00c      	b.n	8009210 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681a      	ldr	r2, [r3, #0]
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	4619      	mov	r1, r3
 8009200:	4610      	mov	r0, r2
 8009202:	f000 faa6 	bl	8009752 <TIM_ITRx_SetConfig>
      break;
 8009206:	e003      	b.n	8009210 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009208:	2301      	movs	r3, #1
 800920a:	73fb      	strb	r3, [r7, #15]
      break;
 800920c:	e000      	b.n	8009210 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800920e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2201      	movs	r2, #1
 8009214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2200      	movs	r2, #0
 800921c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009220:	7bfb      	ldrb	r3, [r7, #15]
}
 8009222:	4618      	mov	r0, r3
 8009224:	3710      	adds	r7, #16
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}

0800922a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800922a:	b480      	push	{r7}
 800922c:	b083      	sub	sp, #12
 800922e:	af00      	add	r7, sp, #0
 8009230:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009232:	bf00      	nop
 8009234:	370c      	adds	r7, #12
 8009236:	46bd      	mov	sp, r7
 8009238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923c:	4770      	bx	lr

0800923e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800923e:	b480      	push	{r7}
 8009240:	b083      	sub	sp, #12
 8009242:	af00      	add	r7, sp, #0
 8009244:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009246:	bf00      	nop
 8009248:	370c      	adds	r7, #12
 800924a:	46bd      	mov	sp, r7
 800924c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009250:	4770      	bx	lr

08009252 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009252:	b480      	push	{r7}
 8009254:	b083      	sub	sp, #12
 8009256:	af00      	add	r7, sp, #0
 8009258:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800925a:	bf00      	nop
 800925c:	370c      	adds	r7, #12
 800925e:	46bd      	mov	sp, r7
 8009260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009264:	4770      	bx	lr

08009266 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009266:	b480      	push	{r7}
 8009268:	b083      	sub	sp, #12
 800926a:	af00      	add	r7, sp, #0
 800926c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800926e:	bf00      	nop
 8009270:	370c      	adds	r7, #12
 8009272:	46bd      	mov	sp, r7
 8009274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009278:	4770      	bx	lr
	...

0800927c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800927c:	b480      	push	{r7}
 800927e:	b085      	sub	sp, #20
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
 8009284:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	4a34      	ldr	r2, [pc, #208]	; (8009360 <TIM_Base_SetConfig+0xe4>)
 8009290:	4293      	cmp	r3, r2
 8009292:	d00f      	beq.n	80092b4 <TIM_Base_SetConfig+0x38>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800929a:	d00b      	beq.n	80092b4 <TIM_Base_SetConfig+0x38>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	4a31      	ldr	r2, [pc, #196]	; (8009364 <TIM_Base_SetConfig+0xe8>)
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d007      	beq.n	80092b4 <TIM_Base_SetConfig+0x38>
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	4a30      	ldr	r2, [pc, #192]	; (8009368 <TIM_Base_SetConfig+0xec>)
 80092a8:	4293      	cmp	r3, r2
 80092aa:	d003      	beq.n	80092b4 <TIM_Base_SetConfig+0x38>
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	4a2f      	ldr	r2, [pc, #188]	; (800936c <TIM_Base_SetConfig+0xf0>)
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d108      	bne.n	80092c6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	685b      	ldr	r3, [r3, #4]
 80092c0:	68fa      	ldr	r2, [r7, #12]
 80092c2:	4313      	orrs	r3, r2
 80092c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	4a25      	ldr	r2, [pc, #148]	; (8009360 <TIM_Base_SetConfig+0xe4>)
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d01b      	beq.n	8009306 <TIM_Base_SetConfig+0x8a>
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092d4:	d017      	beq.n	8009306 <TIM_Base_SetConfig+0x8a>
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	4a22      	ldr	r2, [pc, #136]	; (8009364 <TIM_Base_SetConfig+0xe8>)
 80092da:	4293      	cmp	r3, r2
 80092dc:	d013      	beq.n	8009306 <TIM_Base_SetConfig+0x8a>
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	4a21      	ldr	r2, [pc, #132]	; (8009368 <TIM_Base_SetConfig+0xec>)
 80092e2:	4293      	cmp	r3, r2
 80092e4:	d00f      	beq.n	8009306 <TIM_Base_SetConfig+0x8a>
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	4a20      	ldr	r2, [pc, #128]	; (800936c <TIM_Base_SetConfig+0xf0>)
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d00b      	beq.n	8009306 <TIM_Base_SetConfig+0x8a>
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	4a1f      	ldr	r2, [pc, #124]	; (8009370 <TIM_Base_SetConfig+0xf4>)
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d007      	beq.n	8009306 <TIM_Base_SetConfig+0x8a>
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	4a1e      	ldr	r2, [pc, #120]	; (8009374 <TIM_Base_SetConfig+0xf8>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d003      	beq.n	8009306 <TIM_Base_SetConfig+0x8a>
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	4a1d      	ldr	r2, [pc, #116]	; (8009378 <TIM_Base_SetConfig+0xfc>)
 8009302:	4293      	cmp	r3, r2
 8009304:	d108      	bne.n	8009318 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800930c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	68db      	ldr	r3, [r3, #12]
 8009312:	68fa      	ldr	r2, [r7, #12]
 8009314:	4313      	orrs	r3, r2
 8009316:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	695b      	ldr	r3, [r3, #20]
 8009322:	4313      	orrs	r3, r2
 8009324:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	68fa      	ldr	r2, [r7, #12]
 800932a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	689a      	ldr	r2, [r3, #8]
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	681a      	ldr	r2, [r3, #0]
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	4a08      	ldr	r2, [pc, #32]	; (8009360 <TIM_Base_SetConfig+0xe4>)
 8009340:	4293      	cmp	r3, r2
 8009342:	d103      	bne.n	800934c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	691a      	ldr	r2, [r3, #16]
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2201      	movs	r2, #1
 8009350:	615a      	str	r2, [r3, #20]
}
 8009352:	bf00      	nop
 8009354:	3714      	adds	r7, #20
 8009356:	46bd      	mov	sp, r7
 8009358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935c:	4770      	bx	lr
 800935e:	bf00      	nop
 8009360:	40010000 	.word	0x40010000
 8009364:	40000400 	.word	0x40000400
 8009368:	40000800 	.word	0x40000800
 800936c:	40000c00 	.word	0x40000c00
 8009370:	40014000 	.word	0x40014000
 8009374:	40014400 	.word	0x40014400
 8009378:	40014800 	.word	0x40014800

0800937c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800937c:	b480      	push	{r7}
 800937e:	b087      	sub	sp, #28
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
 8009384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6a1b      	ldr	r3, [r3, #32]
 800938a:	f023 0201 	bic.w	r2, r3, #1
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6a1b      	ldr	r3, [r3, #32]
 8009396:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	685b      	ldr	r3, [r3, #4]
 800939c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	699b      	ldr	r3, [r3, #24]
 80093a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	f023 0303 	bic.w	r3, r3, #3
 80093b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	68fa      	ldr	r2, [r7, #12]
 80093ba:	4313      	orrs	r3, r2
 80093bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	f023 0302 	bic.w	r3, r3, #2
 80093c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	689b      	ldr	r3, [r3, #8]
 80093ca:	697a      	ldr	r2, [r7, #20]
 80093cc:	4313      	orrs	r3, r2
 80093ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	4a1c      	ldr	r2, [pc, #112]	; (8009444 <TIM_OC1_SetConfig+0xc8>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d10c      	bne.n	80093f2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	f023 0308 	bic.w	r3, r3, #8
 80093de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	68db      	ldr	r3, [r3, #12]
 80093e4:	697a      	ldr	r2, [r7, #20]
 80093e6:	4313      	orrs	r3, r2
 80093e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	f023 0304 	bic.w	r3, r3, #4
 80093f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	4a13      	ldr	r2, [pc, #76]	; (8009444 <TIM_OC1_SetConfig+0xc8>)
 80093f6:	4293      	cmp	r3, r2
 80093f8:	d111      	bne.n	800941e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80093fa:	693b      	ldr	r3, [r7, #16]
 80093fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009400:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009402:	693b      	ldr	r3, [r7, #16]
 8009404:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009408:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	695b      	ldr	r3, [r3, #20]
 800940e:	693a      	ldr	r2, [r7, #16]
 8009410:	4313      	orrs	r3, r2
 8009412:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	699b      	ldr	r3, [r3, #24]
 8009418:	693a      	ldr	r2, [r7, #16]
 800941a:	4313      	orrs	r3, r2
 800941c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	693a      	ldr	r2, [r7, #16]
 8009422:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	68fa      	ldr	r2, [r7, #12]
 8009428:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	685a      	ldr	r2, [r3, #4]
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	697a      	ldr	r2, [r7, #20]
 8009436:	621a      	str	r2, [r3, #32]
}
 8009438:	bf00      	nop
 800943a:	371c      	adds	r7, #28
 800943c:	46bd      	mov	sp, r7
 800943e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009442:	4770      	bx	lr
 8009444:	40010000 	.word	0x40010000

08009448 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009448:	b480      	push	{r7}
 800944a:	b087      	sub	sp, #28
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6a1b      	ldr	r3, [r3, #32]
 8009456:	f023 0210 	bic.w	r2, r3, #16
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6a1b      	ldr	r3, [r3, #32]
 8009462:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	685b      	ldr	r3, [r3, #4]
 8009468:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	699b      	ldr	r3, [r3, #24]
 800946e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009476:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800947e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	021b      	lsls	r3, r3, #8
 8009486:	68fa      	ldr	r2, [r7, #12]
 8009488:	4313      	orrs	r3, r2
 800948a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800948c:	697b      	ldr	r3, [r7, #20]
 800948e:	f023 0320 	bic.w	r3, r3, #32
 8009492:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	689b      	ldr	r3, [r3, #8]
 8009498:	011b      	lsls	r3, r3, #4
 800949a:	697a      	ldr	r2, [r7, #20]
 800949c:	4313      	orrs	r3, r2
 800949e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	4a1e      	ldr	r2, [pc, #120]	; (800951c <TIM_OC2_SetConfig+0xd4>)
 80094a4:	4293      	cmp	r3, r2
 80094a6:	d10d      	bne.n	80094c4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80094a8:	697b      	ldr	r3, [r7, #20]
 80094aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80094ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	68db      	ldr	r3, [r3, #12]
 80094b4:	011b      	lsls	r3, r3, #4
 80094b6:	697a      	ldr	r2, [r7, #20]
 80094b8:	4313      	orrs	r3, r2
 80094ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80094bc:	697b      	ldr	r3, [r7, #20]
 80094be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	4a15      	ldr	r2, [pc, #84]	; (800951c <TIM_OC2_SetConfig+0xd4>)
 80094c8:	4293      	cmp	r3, r2
 80094ca:	d113      	bne.n	80094f4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80094cc:	693b      	ldr	r3, [r7, #16]
 80094ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80094d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80094d4:	693b      	ldr	r3, [r7, #16]
 80094d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80094da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	695b      	ldr	r3, [r3, #20]
 80094e0:	009b      	lsls	r3, r3, #2
 80094e2:	693a      	ldr	r2, [r7, #16]
 80094e4:	4313      	orrs	r3, r2
 80094e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	699b      	ldr	r3, [r3, #24]
 80094ec:	009b      	lsls	r3, r3, #2
 80094ee:	693a      	ldr	r2, [r7, #16]
 80094f0:	4313      	orrs	r3, r2
 80094f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	693a      	ldr	r2, [r7, #16]
 80094f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	68fa      	ldr	r2, [r7, #12]
 80094fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	685a      	ldr	r2, [r3, #4]
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	697a      	ldr	r2, [r7, #20]
 800950c:	621a      	str	r2, [r3, #32]
}
 800950e:	bf00      	nop
 8009510:	371c      	adds	r7, #28
 8009512:	46bd      	mov	sp, r7
 8009514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009518:	4770      	bx	lr
 800951a:	bf00      	nop
 800951c:	40010000 	.word	0x40010000

08009520 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009520:	b480      	push	{r7}
 8009522:	b087      	sub	sp, #28
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
 8009528:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6a1b      	ldr	r3, [r3, #32]
 800952e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6a1b      	ldr	r3, [r3, #32]
 800953a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	685b      	ldr	r3, [r3, #4]
 8009540:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	69db      	ldr	r3, [r3, #28]
 8009546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800954e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	f023 0303 	bic.w	r3, r3, #3
 8009556:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	68fa      	ldr	r2, [r7, #12]
 800955e:	4313      	orrs	r3, r2
 8009560:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009562:	697b      	ldr	r3, [r7, #20]
 8009564:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009568:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	689b      	ldr	r3, [r3, #8]
 800956e:	021b      	lsls	r3, r3, #8
 8009570:	697a      	ldr	r2, [r7, #20]
 8009572:	4313      	orrs	r3, r2
 8009574:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	4a1d      	ldr	r2, [pc, #116]	; (80095f0 <TIM_OC3_SetConfig+0xd0>)
 800957a:	4293      	cmp	r3, r2
 800957c:	d10d      	bne.n	800959a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009584:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	68db      	ldr	r3, [r3, #12]
 800958a:	021b      	lsls	r3, r3, #8
 800958c:	697a      	ldr	r2, [r7, #20]
 800958e:	4313      	orrs	r3, r2
 8009590:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009598:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	4a14      	ldr	r2, [pc, #80]	; (80095f0 <TIM_OC3_SetConfig+0xd0>)
 800959e:	4293      	cmp	r3, r2
 80095a0:	d113      	bne.n	80095ca <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80095a2:	693b      	ldr	r3, [r7, #16]
 80095a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80095a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80095aa:	693b      	ldr	r3, [r7, #16]
 80095ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80095b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	695b      	ldr	r3, [r3, #20]
 80095b6:	011b      	lsls	r3, r3, #4
 80095b8:	693a      	ldr	r2, [r7, #16]
 80095ba:	4313      	orrs	r3, r2
 80095bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	699b      	ldr	r3, [r3, #24]
 80095c2:	011b      	lsls	r3, r3, #4
 80095c4:	693a      	ldr	r2, [r7, #16]
 80095c6:	4313      	orrs	r3, r2
 80095c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	693a      	ldr	r2, [r7, #16]
 80095ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	68fa      	ldr	r2, [r7, #12]
 80095d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	685a      	ldr	r2, [r3, #4]
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	697a      	ldr	r2, [r7, #20]
 80095e2:	621a      	str	r2, [r3, #32]
}
 80095e4:	bf00      	nop
 80095e6:	371c      	adds	r7, #28
 80095e8:	46bd      	mov	sp, r7
 80095ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ee:	4770      	bx	lr
 80095f0:	40010000 	.word	0x40010000

080095f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80095f4:	b480      	push	{r7}
 80095f6:	b087      	sub	sp, #28
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
 80095fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6a1b      	ldr	r3, [r3, #32]
 8009602:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6a1b      	ldr	r3, [r3, #32]
 800960e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	685b      	ldr	r3, [r3, #4]
 8009614:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	69db      	ldr	r3, [r3, #28]
 800961a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009622:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800962a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	021b      	lsls	r3, r3, #8
 8009632:	68fa      	ldr	r2, [r7, #12]
 8009634:	4313      	orrs	r3, r2
 8009636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009638:	693b      	ldr	r3, [r7, #16]
 800963a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800963e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	689b      	ldr	r3, [r3, #8]
 8009644:	031b      	lsls	r3, r3, #12
 8009646:	693a      	ldr	r2, [r7, #16]
 8009648:	4313      	orrs	r3, r2
 800964a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	4a10      	ldr	r2, [pc, #64]	; (8009690 <TIM_OC4_SetConfig+0x9c>)
 8009650:	4293      	cmp	r3, r2
 8009652:	d109      	bne.n	8009668 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009654:	697b      	ldr	r3, [r7, #20]
 8009656:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800965a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	695b      	ldr	r3, [r3, #20]
 8009660:	019b      	lsls	r3, r3, #6
 8009662:	697a      	ldr	r2, [r7, #20]
 8009664:	4313      	orrs	r3, r2
 8009666:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	697a      	ldr	r2, [r7, #20]
 800966c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	68fa      	ldr	r2, [r7, #12]
 8009672:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	685a      	ldr	r2, [r3, #4]
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	693a      	ldr	r2, [r7, #16]
 8009680:	621a      	str	r2, [r3, #32]
}
 8009682:	bf00      	nop
 8009684:	371c      	adds	r7, #28
 8009686:	46bd      	mov	sp, r7
 8009688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968c:	4770      	bx	lr
 800968e:	bf00      	nop
 8009690:	40010000 	.word	0x40010000

08009694 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009694:	b480      	push	{r7}
 8009696:	b087      	sub	sp, #28
 8009698:	af00      	add	r7, sp, #0
 800969a:	60f8      	str	r0, [r7, #12]
 800969c:	60b9      	str	r1, [r7, #8]
 800969e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	6a1b      	ldr	r3, [r3, #32]
 80096a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	6a1b      	ldr	r3, [r3, #32]
 80096aa:	f023 0201 	bic.w	r2, r3, #1
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	699b      	ldr	r3, [r3, #24]
 80096b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80096b8:	693b      	ldr	r3, [r7, #16]
 80096ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80096be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	011b      	lsls	r3, r3, #4
 80096c4:	693a      	ldr	r2, [r7, #16]
 80096c6:	4313      	orrs	r3, r2
 80096c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	f023 030a 	bic.w	r3, r3, #10
 80096d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80096d2:	697a      	ldr	r2, [r7, #20]
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	4313      	orrs	r3, r2
 80096d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	693a      	ldr	r2, [r7, #16]
 80096de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	697a      	ldr	r2, [r7, #20]
 80096e4:	621a      	str	r2, [r3, #32]
}
 80096e6:	bf00      	nop
 80096e8:	371c      	adds	r7, #28
 80096ea:	46bd      	mov	sp, r7
 80096ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f0:	4770      	bx	lr

080096f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80096f2:	b480      	push	{r7}
 80096f4:	b087      	sub	sp, #28
 80096f6:	af00      	add	r7, sp, #0
 80096f8:	60f8      	str	r0, [r7, #12]
 80096fa:	60b9      	str	r1, [r7, #8]
 80096fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	6a1b      	ldr	r3, [r3, #32]
 8009702:	f023 0210 	bic.w	r2, r3, #16
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	699b      	ldr	r3, [r3, #24]
 800970e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	6a1b      	ldr	r3, [r3, #32]
 8009714:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009716:	697b      	ldr	r3, [r7, #20]
 8009718:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800971c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	031b      	lsls	r3, r3, #12
 8009722:	697a      	ldr	r2, [r7, #20]
 8009724:	4313      	orrs	r3, r2
 8009726:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009728:	693b      	ldr	r3, [r7, #16]
 800972a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800972e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	011b      	lsls	r3, r3, #4
 8009734:	693a      	ldr	r2, [r7, #16]
 8009736:	4313      	orrs	r3, r2
 8009738:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	697a      	ldr	r2, [r7, #20]
 800973e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	693a      	ldr	r2, [r7, #16]
 8009744:	621a      	str	r2, [r3, #32]
}
 8009746:	bf00      	nop
 8009748:	371c      	adds	r7, #28
 800974a:	46bd      	mov	sp, r7
 800974c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009750:	4770      	bx	lr

08009752 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009752:	b480      	push	{r7}
 8009754:	b085      	sub	sp, #20
 8009756:	af00      	add	r7, sp, #0
 8009758:	6078      	str	r0, [r7, #4]
 800975a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	689b      	ldr	r3, [r3, #8]
 8009760:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009768:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800976a:	683a      	ldr	r2, [r7, #0]
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	4313      	orrs	r3, r2
 8009770:	f043 0307 	orr.w	r3, r3, #7
 8009774:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	68fa      	ldr	r2, [r7, #12]
 800977a:	609a      	str	r2, [r3, #8]
}
 800977c:	bf00      	nop
 800977e:	3714      	adds	r7, #20
 8009780:	46bd      	mov	sp, r7
 8009782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009786:	4770      	bx	lr

08009788 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009788:	b480      	push	{r7}
 800978a:	b087      	sub	sp, #28
 800978c:	af00      	add	r7, sp, #0
 800978e:	60f8      	str	r0, [r7, #12]
 8009790:	60b9      	str	r1, [r7, #8]
 8009792:	607a      	str	r2, [r7, #4]
 8009794:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	689b      	ldr	r3, [r3, #8]
 800979a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800979c:	697b      	ldr	r3, [r7, #20]
 800979e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80097a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	021a      	lsls	r2, r3, #8
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	431a      	orrs	r2, r3
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	4313      	orrs	r3, r2
 80097b0:	697a      	ldr	r2, [r7, #20]
 80097b2:	4313      	orrs	r3, r2
 80097b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	697a      	ldr	r2, [r7, #20]
 80097ba:	609a      	str	r2, [r3, #8]
}
 80097bc:	bf00      	nop
 80097be:	371c      	adds	r7, #28
 80097c0:	46bd      	mov	sp, r7
 80097c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c6:	4770      	bx	lr

080097c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80097c8:	b480      	push	{r7}
 80097ca:	b087      	sub	sp, #28
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	60f8      	str	r0, [r7, #12]
 80097d0:	60b9      	str	r1, [r7, #8]
 80097d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	f003 031f 	and.w	r3, r3, #31
 80097da:	2201      	movs	r2, #1
 80097dc:	fa02 f303 	lsl.w	r3, r2, r3
 80097e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	6a1a      	ldr	r2, [r3, #32]
 80097e6:	697b      	ldr	r3, [r7, #20]
 80097e8:	43db      	mvns	r3, r3
 80097ea:	401a      	ands	r2, r3
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	6a1a      	ldr	r2, [r3, #32]
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	f003 031f 	and.w	r3, r3, #31
 80097fa:	6879      	ldr	r1, [r7, #4]
 80097fc:	fa01 f303 	lsl.w	r3, r1, r3
 8009800:	431a      	orrs	r2, r3
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	621a      	str	r2, [r3, #32]
}
 8009806:	bf00      	nop
 8009808:	371c      	adds	r7, #28
 800980a:	46bd      	mov	sp, r7
 800980c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009810:	4770      	bx	lr
	...

08009814 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009814:	b480      	push	{r7}
 8009816:	b085      	sub	sp, #20
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
 800981c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009824:	2b01      	cmp	r3, #1
 8009826:	d101      	bne.n	800982c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009828:	2302      	movs	r3, #2
 800982a:	e050      	b.n	80098ce <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2201      	movs	r2, #1
 8009830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2202      	movs	r2, #2
 8009838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	685b      	ldr	r3, [r3, #4]
 8009842:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	689b      	ldr	r3, [r3, #8]
 800984a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009852:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	68fa      	ldr	r2, [r7, #12]
 800985a:	4313      	orrs	r3, r2
 800985c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	68fa      	ldr	r2, [r7, #12]
 8009864:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	4a1c      	ldr	r2, [pc, #112]	; (80098dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800986c:	4293      	cmp	r3, r2
 800986e:	d018      	beq.n	80098a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009878:	d013      	beq.n	80098a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	4a18      	ldr	r2, [pc, #96]	; (80098e0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009880:	4293      	cmp	r3, r2
 8009882:	d00e      	beq.n	80098a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	4a16      	ldr	r2, [pc, #88]	; (80098e4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800988a:	4293      	cmp	r3, r2
 800988c:	d009      	beq.n	80098a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	4a15      	ldr	r2, [pc, #84]	; (80098e8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009894:	4293      	cmp	r3, r2
 8009896:	d004      	beq.n	80098a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	4a13      	ldr	r2, [pc, #76]	; (80098ec <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800989e:	4293      	cmp	r3, r2
 80098a0:	d10c      	bne.n	80098bc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80098a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	685b      	ldr	r3, [r3, #4]
 80098ae:	68ba      	ldr	r2, [r7, #8]
 80098b0:	4313      	orrs	r3, r2
 80098b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	68ba      	ldr	r2, [r7, #8]
 80098ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2201      	movs	r2, #1
 80098c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2200      	movs	r2, #0
 80098c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80098cc:	2300      	movs	r3, #0
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	3714      	adds	r7, #20
 80098d2:	46bd      	mov	sp, r7
 80098d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d8:	4770      	bx	lr
 80098da:	bf00      	nop
 80098dc:	40010000 	.word	0x40010000
 80098e0:	40000400 	.word	0x40000400
 80098e4:	40000800 	.word	0x40000800
 80098e8:	40000c00 	.word	0x40000c00
 80098ec:	40014000 	.word	0x40014000

080098f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80098f0:	b480      	push	{r7}
 80098f2:	b083      	sub	sp, #12
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80098f8:	bf00      	nop
 80098fa:	370c      	adds	r7, #12
 80098fc:	46bd      	mov	sp, r7
 80098fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009902:	4770      	bx	lr

08009904 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009904:	b480      	push	{r7}
 8009906:	b083      	sub	sp, #12
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800990c:	bf00      	nop
 800990e:	370c      	adds	r7, #12
 8009910:	46bd      	mov	sp, r7
 8009912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009916:	4770      	bx	lr

08009918 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b082      	sub	sp, #8
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d101      	bne.n	800992a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009926:	2301      	movs	r3, #1
 8009928:	e03f      	b.n	80099aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009930:	b2db      	uxtb	r3, r3
 8009932:	2b00      	cmp	r3, #0
 8009934:	d106      	bne.n	8009944 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2200      	movs	r2, #0
 800993a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f7fb fba0 	bl	8005084 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2224      	movs	r2, #36	; 0x24
 8009948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	68da      	ldr	r2, [r3, #12]
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800995a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f000 fddb 	bl	800a518 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	691a      	ldr	r2, [r3, #16]
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009970:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	695a      	ldr	r2, [r3, #20]
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009980:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	68da      	ldr	r2, [r3, #12]
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009990:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2200      	movs	r2, #0
 8009996:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2220      	movs	r2, #32
 800999c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2220      	movs	r2, #32
 80099a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80099a8:	2300      	movs	r3, #0
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	3708      	adds	r7, #8
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}

080099b2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80099b2:	b580      	push	{r7, lr}
 80099b4:	b08a      	sub	sp, #40	; 0x28
 80099b6:	af02      	add	r7, sp, #8
 80099b8:	60f8      	str	r0, [r7, #12]
 80099ba:	60b9      	str	r1, [r7, #8]
 80099bc:	603b      	str	r3, [r7, #0]
 80099be:	4613      	mov	r3, r2
 80099c0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80099c2:	2300      	movs	r3, #0
 80099c4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099cc:	b2db      	uxtb	r3, r3
 80099ce:	2b20      	cmp	r3, #32
 80099d0:	d17c      	bne.n	8009acc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80099d2:	68bb      	ldr	r3, [r7, #8]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d002      	beq.n	80099de <HAL_UART_Transmit+0x2c>
 80099d8:	88fb      	ldrh	r3, [r7, #6]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d101      	bne.n	80099e2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80099de:	2301      	movs	r3, #1
 80099e0:	e075      	b.n	8009ace <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80099e8:	2b01      	cmp	r3, #1
 80099ea:	d101      	bne.n	80099f0 <HAL_UART_Transmit+0x3e>
 80099ec:	2302      	movs	r3, #2
 80099ee:	e06e      	b.n	8009ace <HAL_UART_Transmit+0x11c>
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	2201      	movs	r2, #1
 80099f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	2200      	movs	r2, #0
 80099fc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	2221      	movs	r2, #33	; 0x21
 8009a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009a06:	f7fb fd9d 	bl	8005544 <HAL_GetTick>
 8009a0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	88fa      	ldrh	r2, [r7, #6]
 8009a10:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	88fa      	ldrh	r2, [r7, #6]
 8009a16:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	689b      	ldr	r3, [r3, #8]
 8009a1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a20:	d108      	bne.n	8009a34 <HAL_UART_Transmit+0x82>
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	691b      	ldr	r3, [r3, #16]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d104      	bne.n	8009a34 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	61bb      	str	r3, [r7, #24]
 8009a32:	e003      	b.n	8009a3c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009a34:	68bb      	ldr	r3, [r7, #8]
 8009a36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009a38:	2300      	movs	r3, #0
 8009a3a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	2200      	movs	r2, #0
 8009a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009a44:	e02a      	b.n	8009a9c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	9300      	str	r3, [sp, #0]
 8009a4a:	697b      	ldr	r3, [r7, #20]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	2180      	movs	r1, #128	; 0x80
 8009a50:	68f8      	ldr	r0, [r7, #12]
 8009a52:	f000 fb1f 	bl	800a094 <UART_WaitOnFlagUntilTimeout>
 8009a56:	4603      	mov	r3, r0
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d001      	beq.n	8009a60 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009a5c:	2303      	movs	r3, #3
 8009a5e:	e036      	b.n	8009ace <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009a60:	69fb      	ldr	r3, [r7, #28]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d10b      	bne.n	8009a7e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009a66:	69bb      	ldr	r3, [r7, #24]
 8009a68:	881b      	ldrh	r3, [r3, #0]
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009a74:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009a76:	69bb      	ldr	r3, [r7, #24]
 8009a78:	3302      	adds	r3, #2
 8009a7a:	61bb      	str	r3, [r7, #24]
 8009a7c:	e007      	b.n	8009a8e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009a7e:	69fb      	ldr	r3, [r7, #28]
 8009a80:	781a      	ldrb	r2, [r3, #0]
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009a88:	69fb      	ldr	r3, [r7, #28]
 8009a8a:	3301      	adds	r3, #1
 8009a8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009a92:	b29b      	uxth	r3, r3
 8009a94:	3b01      	subs	r3, #1
 8009a96:	b29a      	uxth	r2, r3
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009aa0:	b29b      	uxth	r3, r3
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d1cf      	bne.n	8009a46 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	9300      	str	r3, [sp, #0]
 8009aaa:	697b      	ldr	r3, [r7, #20]
 8009aac:	2200      	movs	r2, #0
 8009aae:	2140      	movs	r1, #64	; 0x40
 8009ab0:	68f8      	ldr	r0, [r7, #12]
 8009ab2:	f000 faef 	bl	800a094 <UART_WaitOnFlagUntilTimeout>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d001      	beq.n	8009ac0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009abc:	2303      	movs	r3, #3
 8009abe:	e006      	b.n	8009ace <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	2220      	movs	r2, #32
 8009ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	e000      	b.n	8009ace <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009acc:	2302      	movs	r3, #2
  }
}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	3720      	adds	r7, #32
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}

08009ad6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009ad6:	b580      	push	{r7, lr}
 8009ad8:	b084      	sub	sp, #16
 8009ada:	af00      	add	r7, sp, #0
 8009adc:	60f8      	str	r0, [r7, #12]
 8009ade:	60b9      	str	r1, [r7, #8]
 8009ae0:	4613      	mov	r3, r2
 8009ae2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009aea:	b2db      	uxtb	r3, r3
 8009aec:	2b20      	cmp	r3, #32
 8009aee:	d11d      	bne.n	8009b2c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d002      	beq.n	8009afc <HAL_UART_Receive_IT+0x26>
 8009af6:	88fb      	ldrh	r3, [r7, #6]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d101      	bne.n	8009b00 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009afc:	2301      	movs	r3, #1
 8009afe:	e016      	b.n	8009b2e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b06:	2b01      	cmp	r3, #1
 8009b08:	d101      	bne.n	8009b0e <HAL_UART_Receive_IT+0x38>
 8009b0a:	2302      	movs	r3, #2
 8009b0c:	e00f      	b.n	8009b2e <HAL_UART_Receive_IT+0x58>
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	2201      	movs	r2, #1
 8009b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	2200      	movs	r2, #0
 8009b1a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009b1c:	88fb      	ldrh	r3, [r7, #6]
 8009b1e:	461a      	mov	r2, r3
 8009b20:	68b9      	ldr	r1, [r7, #8]
 8009b22:	68f8      	ldr	r0, [r7, #12]
 8009b24:	f000 fb24 	bl	800a170 <UART_Start_Receive_IT>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	e000      	b.n	8009b2e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009b2c:	2302      	movs	r3, #2
  }
}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	3710      	adds	r7, #16
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}
	...

08009b38 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b0ba      	sub	sp, #232	; 0xe8
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	68db      	ldr	r3, [r3, #12]
 8009b50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	695b      	ldr	r3, [r3, #20]
 8009b5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009b64:	2300      	movs	r3, #0
 8009b66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009b6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b6e:	f003 030f 	and.w	r3, r3, #15
 8009b72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009b76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d10f      	bne.n	8009b9e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b82:	f003 0320 	and.w	r3, r3, #32
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d009      	beq.n	8009b9e <HAL_UART_IRQHandler+0x66>
 8009b8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b8e:	f003 0320 	and.w	r3, r3, #32
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d003      	beq.n	8009b9e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f000 fc03 	bl	800a3a2 <UART_Receive_IT>
      return;
 8009b9c:	e256      	b.n	800a04c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009b9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	f000 80de 	beq.w	8009d64 <HAL_UART_IRQHandler+0x22c>
 8009ba8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009bac:	f003 0301 	and.w	r3, r3, #1
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d106      	bne.n	8009bc2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009bb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009bb8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	f000 80d1 	beq.w	8009d64 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009bc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009bc6:	f003 0301 	and.w	r3, r3, #1
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d00b      	beq.n	8009be6 <HAL_UART_IRQHandler+0xae>
 8009bce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d005      	beq.n	8009be6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bde:	f043 0201 	orr.w	r2, r3, #1
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009bea:	f003 0304 	and.w	r3, r3, #4
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d00b      	beq.n	8009c0a <HAL_UART_IRQHandler+0xd2>
 8009bf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009bf6:	f003 0301 	and.w	r3, r3, #1
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d005      	beq.n	8009c0a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c02:	f043 0202 	orr.w	r2, r3, #2
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009c0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c0e:	f003 0302 	and.w	r3, r3, #2
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d00b      	beq.n	8009c2e <HAL_UART_IRQHandler+0xf6>
 8009c16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009c1a:	f003 0301 	and.w	r3, r3, #1
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d005      	beq.n	8009c2e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c26:	f043 0204 	orr.w	r2, r3, #4
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009c2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c32:	f003 0308 	and.w	r3, r3, #8
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d011      	beq.n	8009c5e <HAL_UART_IRQHandler+0x126>
 8009c3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c3e:	f003 0320 	and.w	r3, r3, #32
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d105      	bne.n	8009c52 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009c46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009c4a:	f003 0301 	and.w	r3, r3, #1
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d005      	beq.n	8009c5e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c56:	f043 0208 	orr.w	r2, r3, #8
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	f000 81ed 	beq.w	800a042 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009c68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c6c:	f003 0320 	and.w	r3, r3, #32
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d008      	beq.n	8009c86 <HAL_UART_IRQHandler+0x14e>
 8009c74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c78:	f003 0320 	and.w	r3, r3, #32
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d002      	beq.n	8009c86 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f000 fb8e 	bl	800a3a2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	695b      	ldr	r3, [r3, #20]
 8009c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c90:	2b40      	cmp	r3, #64	; 0x40
 8009c92:	bf0c      	ite	eq
 8009c94:	2301      	moveq	r3, #1
 8009c96:	2300      	movne	r3, #0
 8009c98:	b2db      	uxtb	r3, r3
 8009c9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ca2:	f003 0308 	and.w	r3, r3, #8
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d103      	bne.n	8009cb2 <HAL_UART_IRQHandler+0x17a>
 8009caa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d04f      	beq.n	8009d52 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f000 fa96 	bl	800a1e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	695b      	ldr	r3, [r3, #20]
 8009cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cc2:	2b40      	cmp	r3, #64	; 0x40
 8009cc4:	d141      	bne.n	8009d4a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	3314      	adds	r3, #20
 8009ccc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009cd4:	e853 3f00 	ldrex	r3, [r3]
 8009cd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009cdc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009ce0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ce4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	3314      	adds	r3, #20
 8009cee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009cf2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009cf6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cfa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009cfe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009d02:	e841 2300 	strex	r3, r2, [r1]
 8009d06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009d0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d1d9      	bne.n	8009cc6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d013      	beq.n	8009d42 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d1e:	4a7d      	ldr	r2, [pc, #500]	; (8009f14 <HAL_UART_IRQHandler+0x3dc>)
 8009d20:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d26:	4618      	mov	r0, r3
 8009d28:	f7fc fc24 	bl	8006574 <HAL_DMA_Abort_IT>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d016      	beq.n	8009d60 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d38:	687a      	ldr	r2, [r7, #4]
 8009d3a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009d3c:	4610      	mov	r0, r2
 8009d3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d40:	e00e      	b.n	8009d60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	f000 f990 	bl	800a068 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d48:	e00a      	b.n	8009d60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f000 f98c 	bl	800a068 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d50:	e006      	b.n	8009d60 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f000 f988 	bl	800a068 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009d5e:	e170      	b.n	800a042 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d60:	bf00      	nop
    return;
 8009d62:	e16e      	b.n	800a042 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d68:	2b01      	cmp	r3, #1
 8009d6a:	f040 814a 	bne.w	800a002 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009d6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d72:	f003 0310 	and.w	r3, r3, #16
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	f000 8143 	beq.w	800a002 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009d7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d80:	f003 0310 	and.w	r3, r3, #16
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	f000 813c 	beq.w	800a002 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	60bb      	str	r3, [r7, #8]
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	60bb      	str	r3, [r7, #8]
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	685b      	ldr	r3, [r3, #4]
 8009d9c:	60bb      	str	r3, [r7, #8]
 8009d9e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	695b      	ldr	r3, [r3, #20]
 8009da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009daa:	2b40      	cmp	r3, #64	; 0x40
 8009dac:	f040 80b4 	bne.w	8009f18 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	685b      	ldr	r3, [r3, #4]
 8009db8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009dbc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	f000 8140 	beq.w	800a046 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009dca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009dce:	429a      	cmp	r2, r3
 8009dd0:	f080 8139 	bcs.w	800a046 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009dda:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009de0:	69db      	ldr	r3, [r3, #28]
 8009de2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009de6:	f000 8088 	beq.w	8009efa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	330c      	adds	r3, #12
 8009df0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009df4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009df8:	e853 3f00 	ldrex	r3, [r3]
 8009dfc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009e00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009e04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	330c      	adds	r3, #12
 8009e12:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009e16:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009e1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e1e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009e22:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009e26:	e841 2300 	strex	r3, r2, [r1]
 8009e2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009e2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d1d9      	bne.n	8009dea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	3314      	adds	r3, #20
 8009e3c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009e40:	e853 3f00 	ldrex	r3, [r3]
 8009e44:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009e46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009e48:	f023 0301 	bic.w	r3, r3, #1
 8009e4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	3314      	adds	r3, #20
 8009e56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009e5a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009e5e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e60:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009e62:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009e66:	e841 2300 	strex	r3, r2, [r1]
 8009e6a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009e6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d1e1      	bne.n	8009e36 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	3314      	adds	r3, #20
 8009e78:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009e7c:	e853 3f00 	ldrex	r3, [r3]
 8009e80:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009e82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009e84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	3314      	adds	r3, #20
 8009e92:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009e96:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009e98:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e9a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009e9c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009e9e:	e841 2300 	strex	r3, r2, [r1]
 8009ea2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009ea4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d1e3      	bne.n	8009e72 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2220      	movs	r2, #32
 8009eae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	330c      	adds	r3, #12
 8009ebe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ec0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ec2:	e853 3f00 	ldrex	r3, [r3]
 8009ec6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009ec8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009eca:	f023 0310 	bic.w	r3, r3, #16
 8009ece:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	330c      	adds	r3, #12
 8009ed8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009edc:	65ba      	str	r2, [r7, #88]	; 0x58
 8009ede:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ee0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009ee2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009ee4:	e841 2300 	strex	r3, r2, [r1]
 8009ee8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009eea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d1e3      	bne.n	8009eb8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	f7fc facd 	bl	8006494 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009f02:	b29b      	uxth	r3, r3
 8009f04:	1ad3      	subs	r3, r2, r3
 8009f06:	b29b      	uxth	r3, r3
 8009f08:	4619      	mov	r1, r3
 8009f0a:	6878      	ldr	r0, [r7, #4]
 8009f0c:	f000 f8b6 	bl	800a07c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009f10:	e099      	b.n	800a046 <HAL_UART_IRQHandler+0x50e>
 8009f12:	bf00      	nop
 8009f14:	0800a2ab 	.word	0x0800a2ab
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009f20:	b29b      	uxth	r3, r3
 8009f22:	1ad3      	subs	r3, r2, r3
 8009f24:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009f2c:	b29b      	uxth	r3, r3
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	f000 808b 	beq.w	800a04a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009f34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	f000 8086 	beq.w	800a04a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	330c      	adds	r3, #12
 8009f44:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f48:	e853 3f00 	ldrex	r3, [r3]
 8009f4c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f50:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009f54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	330c      	adds	r3, #12
 8009f5e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009f62:	647a      	str	r2, [r7, #68]	; 0x44
 8009f64:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f66:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009f68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009f6a:	e841 2300 	strex	r3, r2, [r1]
 8009f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009f70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d1e3      	bne.n	8009f3e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	3314      	adds	r3, #20
 8009f7c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f80:	e853 3f00 	ldrex	r3, [r3]
 8009f84:	623b      	str	r3, [r7, #32]
   return(result);
 8009f86:	6a3b      	ldr	r3, [r7, #32]
 8009f88:	f023 0301 	bic.w	r3, r3, #1
 8009f8c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	3314      	adds	r3, #20
 8009f96:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009f9a:	633a      	str	r2, [r7, #48]	; 0x30
 8009f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009fa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009fa2:	e841 2300 	strex	r3, r2, [r1]
 8009fa6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d1e3      	bne.n	8009f76 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2220      	movs	r2, #32
 8009fb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2200      	movs	r2, #0
 8009fba:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	330c      	adds	r3, #12
 8009fc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fc4:	693b      	ldr	r3, [r7, #16]
 8009fc6:	e853 3f00 	ldrex	r3, [r3]
 8009fca:	60fb      	str	r3, [r7, #12]
   return(result);
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	f023 0310 	bic.w	r3, r3, #16
 8009fd2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	330c      	adds	r3, #12
 8009fdc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009fe0:	61fa      	str	r2, [r7, #28]
 8009fe2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fe4:	69b9      	ldr	r1, [r7, #24]
 8009fe6:	69fa      	ldr	r2, [r7, #28]
 8009fe8:	e841 2300 	strex	r3, r2, [r1]
 8009fec:	617b      	str	r3, [r7, #20]
   return(result);
 8009fee:	697b      	ldr	r3, [r7, #20]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d1e3      	bne.n	8009fbc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009ff4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009ff8:	4619      	mov	r1, r3
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f000 f83e 	bl	800a07c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a000:	e023      	b.n	800a04a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d009      	beq.n	800a022 <HAL_UART_IRQHandler+0x4ea>
 800a00e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a016:	2b00      	cmp	r3, #0
 800a018:	d003      	beq.n	800a022 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	f000 f959 	bl	800a2d2 <UART_Transmit_IT>
    return;
 800a020:	e014      	b.n	800a04c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d00e      	beq.n	800a04c <HAL_UART_IRQHandler+0x514>
 800a02e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a036:	2b00      	cmp	r3, #0
 800a038:	d008      	beq.n	800a04c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f000 f999 	bl	800a372 <UART_EndTransmit_IT>
    return;
 800a040:	e004      	b.n	800a04c <HAL_UART_IRQHandler+0x514>
    return;
 800a042:	bf00      	nop
 800a044:	e002      	b.n	800a04c <HAL_UART_IRQHandler+0x514>
      return;
 800a046:	bf00      	nop
 800a048:	e000      	b.n	800a04c <HAL_UART_IRQHandler+0x514>
      return;
 800a04a:	bf00      	nop
  }
}
 800a04c:	37e8      	adds	r7, #232	; 0xe8
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd80      	pop	{r7, pc}
 800a052:	bf00      	nop

0800a054 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a054:	b480      	push	{r7}
 800a056:	b083      	sub	sp, #12
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a05c:	bf00      	nop
 800a05e:	370c      	adds	r7, #12
 800a060:	46bd      	mov	sp, r7
 800a062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a066:	4770      	bx	lr

0800a068 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a068:	b480      	push	{r7}
 800a06a:	b083      	sub	sp, #12
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a070:	bf00      	nop
 800a072:	370c      	adds	r7, #12
 800a074:	46bd      	mov	sp, r7
 800a076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07a:	4770      	bx	lr

0800a07c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a07c:	b480      	push	{r7}
 800a07e:	b083      	sub	sp, #12
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
 800a084:	460b      	mov	r3, r1
 800a086:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a088:	bf00      	nop
 800a08a:	370c      	adds	r7, #12
 800a08c:	46bd      	mov	sp, r7
 800a08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a092:	4770      	bx	lr

0800a094 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b090      	sub	sp, #64	; 0x40
 800a098:	af00      	add	r7, sp, #0
 800a09a:	60f8      	str	r0, [r7, #12]
 800a09c:	60b9      	str	r1, [r7, #8]
 800a09e:	603b      	str	r3, [r7, #0]
 800a0a0:	4613      	mov	r3, r2
 800a0a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a0a4:	e050      	b.n	800a148 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a0a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0ac:	d04c      	beq.n	800a148 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a0ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d007      	beq.n	800a0c4 <UART_WaitOnFlagUntilTimeout+0x30>
 800a0b4:	f7fb fa46 	bl	8005544 <HAL_GetTick>
 800a0b8:	4602      	mov	r2, r0
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	1ad3      	subs	r3, r2, r3
 800a0be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a0c0:	429a      	cmp	r2, r3
 800a0c2:	d241      	bcs.n	800a148 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	330c      	adds	r3, #12
 800a0ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ce:	e853 3f00 	ldrex	r3, [r3]
 800a0d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0d6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a0da:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	330c      	adds	r3, #12
 800a0e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a0e4:	637a      	str	r2, [r7, #52]	; 0x34
 800a0e6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a0ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a0ec:	e841 2300 	strex	r3, r2, [r1]
 800a0f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a0f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d1e5      	bne.n	800a0c4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	3314      	adds	r3, #20
 800a0fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a100:	697b      	ldr	r3, [r7, #20]
 800a102:	e853 3f00 	ldrex	r3, [r3]
 800a106:	613b      	str	r3, [r7, #16]
   return(result);
 800a108:	693b      	ldr	r3, [r7, #16]
 800a10a:	f023 0301 	bic.w	r3, r3, #1
 800a10e:	63bb      	str	r3, [r7, #56]	; 0x38
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	3314      	adds	r3, #20
 800a116:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a118:	623a      	str	r2, [r7, #32]
 800a11a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a11c:	69f9      	ldr	r1, [r7, #28]
 800a11e:	6a3a      	ldr	r2, [r7, #32]
 800a120:	e841 2300 	strex	r3, r2, [r1]
 800a124:	61bb      	str	r3, [r7, #24]
   return(result);
 800a126:	69bb      	ldr	r3, [r7, #24]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d1e5      	bne.n	800a0f8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	2220      	movs	r2, #32
 800a130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	2220      	movs	r2, #32
 800a138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	2200      	movs	r2, #0
 800a140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a144:	2303      	movs	r3, #3
 800a146:	e00f      	b.n	800a168 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	681a      	ldr	r2, [r3, #0]
 800a14e:	68bb      	ldr	r3, [r7, #8]
 800a150:	4013      	ands	r3, r2
 800a152:	68ba      	ldr	r2, [r7, #8]
 800a154:	429a      	cmp	r2, r3
 800a156:	bf0c      	ite	eq
 800a158:	2301      	moveq	r3, #1
 800a15a:	2300      	movne	r3, #0
 800a15c:	b2db      	uxtb	r3, r3
 800a15e:	461a      	mov	r2, r3
 800a160:	79fb      	ldrb	r3, [r7, #7]
 800a162:	429a      	cmp	r2, r3
 800a164:	d09f      	beq.n	800a0a6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a166:	2300      	movs	r3, #0
}
 800a168:	4618      	mov	r0, r3
 800a16a:	3740      	adds	r7, #64	; 0x40
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}

0800a170 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a170:	b480      	push	{r7}
 800a172:	b085      	sub	sp, #20
 800a174:	af00      	add	r7, sp, #0
 800a176:	60f8      	str	r0, [r7, #12]
 800a178:	60b9      	str	r1, [r7, #8]
 800a17a:	4613      	mov	r3, r2
 800a17c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	68ba      	ldr	r2, [r7, #8]
 800a182:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	88fa      	ldrh	r2, [r7, #6]
 800a188:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	88fa      	ldrh	r2, [r7, #6]
 800a18e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	2200      	movs	r2, #0
 800a194:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	2222      	movs	r2, #34	; 0x22
 800a19a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	68da      	ldr	r2, [r3, #12]
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a1b4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	695a      	ldr	r2, [r3, #20]
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	f042 0201 	orr.w	r2, r2, #1
 800a1c4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	68da      	ldr	r2, [r3, #12]
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	f042 0220 	orr.w	r2, r2, #32
 800a1d4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a1d6:	2300      	movs	r3, #0
}
 800a1d8:	4618      	mov	r0, r3
 800a1da:	3714      	adds	r7, #20
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e2:	4770      	bx	lr

0800a1e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a1e4:	b480      	push	{r7}
 800a1e6:	b095      	sub	sp, #84	; 0x54
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	330c      	adds	r3, #12
 800a1f2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1f6:	e853 3f00 	ldrex	r3, [r3]
 800a1fa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a1fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a202:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	330c      	adds	r3, #12
 800a20a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a20c:	643a      	str	r2, [r7, #64]	; 0x40
 800a20e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a210:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a212:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a214:	e841 2300 	strex	r3, r2, [r1]
 800a218:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a21a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d1e5      	bne.n	800a1ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	3314      	adds	r3, #20
 800a226:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a228:	6a3b      	ldr	r3, [r7, #32]
 800a22a:	e853 3f00 	ldrex	r3, [r3]
 800a22e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a230:	69fb      	ldr	r3, [r7, #28]
 800a232:	f023 0301 	bic.w	r3, r3, #1
 800a236:	64bb      	str	r3, [r7, #72]	; 0x48
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	3314      	adds	r3, #20
 800a23e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a240:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a242:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a244:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a246:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a248:	e841 2300 	strex	r3, r2, [r1]
 800a24c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a24e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a250:	2b00      	cmp	r3, #0
 800a252:	d1e5      	bne.n	800a220 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a258:	2b01      	cmp	r3, #1
 800a25a:	d119      	bne.n	800a290 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	330c      	adds	r3, #12
 800a262:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	e853 3f00 	ldrex	r3, [r3]
 800a26a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	f023 0310 	bic.w	r3, r3, #16
 800a272:	647b      	str	r3, [r7, #68]	; 0x44
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	330c      	adds	r3, #12
 800a27a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a27c:	61ba      	str	r2, [r7, #24]
 800a27e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a280:	6979      	ldr	r1, [r7, #20]
 800a282:	69ba      	ldr	r2, [r7, #24]
 800a284:	e841 2300 	strex	r3, r2, [r1]
 800a288:	613b      	str	r3, [r7, #16]
   return(result);
 800a28a:	693b      	ldr	r3, [r7, #16]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d1e5      	bne.n	800a25c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2220      	movs	r2, #32
 800a294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2200      	movs	r2, #0
 800a29c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a29e:	bf00      	nop
 800a2a0:	3754      	adds	r7, #84	; 0x54
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a8:	4770      	bx	lr

0800a2aa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a2aa:	b580      	push	{r7, lr}
 800a2ac:	b084      	sub	sp, #16
 800a2ae:	af00      	add	r7, sp, #0
 800a2b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2b6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a2c4:	68f8      	ldr	r0, [r7, #12]
 800a2c6:	f7ff fecf 	bl	800a068 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a2ca:	bf00      	nop
 800a2cc:	3710      	adds	r7, #16
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	bd80      	pop	{r7, pc}

0800a2d2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a2d2:	b480      	push	{r7}
 800a2d4:	b085      	sub	sp, #20
 800a2d6:	af00      	add	r7, sp, #0
 800a2d8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a2e0:	b2db      	uxtb	r3, r3
 800a2e2:	2b21      	cmp	r3, #33	; 0x21
 800a2e4:	d13e      	bne.n	800a364 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	689b      	ldr	r3, [r3, #8]
 800a2ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2ee:	d114      	bne.n	800a31a <UART_Transmit_IT+0x48>
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	691b      	ldr	r3, [r3, #16]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d110      	bne.n	800a31a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	6a1b      	ldr	r3, [r3, #32]
 800a2fc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	881b      	ldrh	r3, [r3, #0]
 800a302:	461a      	mov	r2, r3
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a30c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6a1b      	ldr	r3, [r3, #32]
 800a312:	1c9a      	adds	r2, r3, #2
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	621a      	str	r2, [r3, #32]
 800a318:	e008      	b.n	800a32c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6a1b      	ldr	r3, [r3, #32]
 800a31e:	1c59      	adds	r1, r3, #1
 800a320:	687a      	ldr	r2, [r7, #4]
 800a322:	6211      	str	r1, [r2, #32]
 800a324:	781a      	ldrb	r2, [r3, #0]
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a330:	b29b      	uxth	r3, r3
 800a332:	3b01      	subs	r3, #1
 800a334:	b29b      	uxth	r3, r3
 800a336:	687a      	ldr	r2, [r7, #4]
 800a338:	4619      	mov	r1, r3
 800a33a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d10f      	bne.n	800a360 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	68da      	ldr	r2, [r3, #12]
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a34e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	68da      	ldr	r2, [r3, #12]
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a35e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a360:	2300      	movs	r3, #0
 800a362:	e000      	b.n	800a366 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a364:	2302      	movs	r3, #2
  }
}
 800a366:	4618      	mov	r0, r3
 800a368:	3714      	adds	r7, #20
 800a36a:	46bd      	mov	sp, r7
 800a36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a370:	4770      	bx	lr

0800a372 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a372:	b580      	push	{r7, lr}
 800a374:	b082      	sub	sp, #8
 800a376:	af00      	add	r7, sp, #0
 800a378:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	68da      	ldr	r2, [r3, #12]
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a388:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2220      	movs	r2, #32
 800a38e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a392:	6878      	ldr	r0, [r7, #4]
 800a394:	f7ff fe5e 	bl	800a054 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a398:	2300      	movs	r3, #0
}
 800a39a:	4618      	mov	r0, r3
 800a39c:	3708      	adds	r7, #8
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}

0800a3a2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a3a2:	b580      	push	{r7, lr}
 800a3a4:	b08c      	sub	sp, #48	; 0x30
 800a3a6:	af00      	add	r7, sp, #0
 800a3a8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a3b0:	b2db      	uxtb	r3, r3
 800a3b2:	2b22      	cmp	r3, #34	; 0x22
 800a3b4:	f040 80ab 	bne.w	800a50e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	689b      	ldr	r3, [r3, #8]
 800a3bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3c0:	d117      	bne.n	800a3f2 <UART_Receive_IT+0x50>
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	691b      	ldr	r3, [r3, #16]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d113      	bne.n	800a3f2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3d2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	685b      	ldr	r3, [r3, #4]
 800a3da:	b29b      	uxth	r3, r3
 800a3dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3e0:	b29a      	uxth	r2, r3
 800a3e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3e4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3ea:	1c9a      	adds	r2, r3, #2
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	629a      	str	r2, [r3, #40]	; 0x28
 800a3f0:	e026      	b.n	800a440 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	689b      	ldr	r3, [r3, #8]
 800a400:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a404:	d007      	beq.n	800a416 <UART_Receive_IT+0x74>
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	689b      	ldr	r3, [r3, #8]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d10a      	bne.n	800a424 <UART_Receive_IT+0x82>
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	691b      	ldr	r3, [r3, #16]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d106      	bne.n	800a424 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	685b      	ldr	r3, [r3, #4]
 800a41c:	b2da      	uxtb	r2, r3
 800a41e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a420:	701a      	strb	r2, [r3, #0]
 800a422:	e008      	b.n	800a436 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	685b      	ldr	r3, [r3, #4]
 800a42a:	b2db      	uxtb	r3, r3
 800a42c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a430:	b2da      	uxtb	r2, r3
 800a432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a434:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a43a:	1c5a      	adds	r2, r3, #1
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a444:	b29b      	uxth	r3, r3
 800a446:	3b01      	subs	r3, #1
 800a448:	b29b      	uxth	r3, r3
 800a44a:	687a      	ldr	r2, [r7, #4]
 800a44c:	4619      	mov	r1, r3
 800a44e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a450:	2b00      	cmp	r3, #0
 800a452:	d15a      	bne.n	800a50a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	68da      	ldr	r2, [r3, #12]
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	f022 0220 	bic.w	r2, r2, #32
 800a462:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	68da      	ldr	r2, [r3, #12]
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a472:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	695a      	ldr	r2, [r3, #20]
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f022 0201 	bic.w	r2, r2, #1
 800a482:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2220      	movs	r2, #32
 800a488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a490:	2b01      	cmp	r3, #1
 800a492:	d135      	bne.n	800a500 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2200      	movs	r2, #0
 800a498:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	330c      	adds	r3, #12
 800a4a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4a2:	697b      	ldr	r3, [r7, #20]
 800a4a4:	e853 3f00 	ldrex	r3, [r3]
 800a4a8:	613b      	str	r3, [r7, #16]
   return(result);
 800a4aa:	693b      	ldr	r3, [r7, #16]
 800a4ac:	f023 0310 	bic.w	r3, r3, #16
 800a4b0:	627b      	str	r3, [r7, #36]	; 0x24
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	330c      	adds	r3, #12
 800a4b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4ba:	623a      	str	r2, [r7, #32]
 800a4bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4be:	69f9      	ldr	r1, [r7, #28]
 800a4c0:	6a3a      	ldr	r2, [r7, #32]
 800a4c2:	e841 2300 	strex	r3, r2, [r1]
 800a4c6:	61bb      	str	r3, [r7, #24]
   return(result);
 800a4c8:	69bb      	ldr	r3, [r7, #24]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d1e5      	bne.n	800a49a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f003 0310 	and.w	r3, r3, #16
 800a4d8:	2b10      	cmp	r3, #16
 800a4da:	d10a      	bne.n	800a4f2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a4dc:	2300      	movs	r3, #0
 800a4de:	60fb      	str	r3, [r7, #12]
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	60fb      	str	r3, [r7, #12]
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	685b      	ldr	r3, [r3, #4]
 800a4ee:	60fb      	str	r3, [r7, #12]
 800a4f0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a4f6:	4619      	mov	r1, r3
 800a4f8:	6878      	ldr	r0, [r7, #4]
 800a4fa:	f7ff fdbf 	bl	800a07c <HAL_UARTEx_RxEventCallback>
 800a4fe:	e002      	b.n	800a506 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a500:	6878      	ldr	r0, [r7, #4]
 800a502:	f7f8 fe59 	bl	80031b8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a506:	2300      	movs	r3, #0
 800a508:	e002      	b.n	800a510 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a50a:	2300      	movs	r3, #0
 800a50c:	e000      	b.n	800a510 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a50e:	2302      	movs	r3, #2
  }
}
 800a510:	4618      	mov	r0, r3
 800a512:	3730      	adds	r7, #48	; 0x30
 800a514:	46bd      	mov	sp, r7
 800a516:	bd80      	pop	{r7, pc}

0800a518 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a51c:	b09f      	sub	sp, #124	; 0x7c
 800a51e:	af00      	add	r7, sp, #0
 800a520:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a522:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	691b      	ldr	r3, [r3, #16]
 800a528:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a52c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a52e:	68d9      	ldr	r1, [r3, #12]
 800a530:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a532:	681a      	ldr	r2, [r3, #0]
 800a534:	ea40 0301 	orr.w	r3, r0, r1
 800a538:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a53a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a53c:	689a      	ldr	r2, [r3, #8]
 800a53e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a540:	691b      	ldr	r3, [r3, #16]
 800a542:	431a      	orrs	r2, r3
 800a544:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a546:	695b      	ldr	r3, [r3, #20]
 800a548:	431a      	orrs	r2, r3
 800a54a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a54c:	69db      	ldr	r3, [r3, #28]
 800a54e:	4313      	orrs	r3, r2
 800a550:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800a552:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	68db      	ldr	r3, [r3, #12]
 800a558:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a55c:	f021 010c 	bic.w	r1, r1, #12
 800a560:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a562:	681a      	ldr	r2, [r3, #0]
 800a564:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a566:	430b      	orrs	r3, r1
 800a568:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a56a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	695b      	ldr	r3, [r3, #20]
 800a570:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a574:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a576:	6999      	ldr	r1, [r3, #24]
 800a578:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a57a:	681a      	ldr	r2, [r3, #0]
 800a57c:	ea40 0301 	orr.w	r3, r0, r1
 800a580:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a582:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a584:	681a      	ldr	r2, [r3, #0]
 800a586:	4bc5      	ldr	r3, [pc, #788]	; (800a89c <UART_SetConfig+0x384>)
 800a588:	429a      	cmp	r2, r3
 800a58a:	d004      	beq.n	800a596 <UART_SetConfig+0x7e>
 800a58c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a58e:	681a      	ldr	r2, [r3, #0]
 800a590:	4bc3      	ldr	r3, [pc, #780]	; (800a8a0 <UART_SetConfig+0x388>)
 800a592:	429a      	cmp	r2, r3
 800a594:	d103      	bne.n	800a59e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a596:	f7fd ffe7 	bl	8008568 <HAL_RCC_GetPCLK2Freq>
 800a59a:	6778      	str	r0, [r7, #116]	; 0x74
 800a59c:	e002      	b.n	800a5a4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a59e:	f7fd ffcf 	bl	8008540 <HAL_RCC_GetPCLK1Freq>
 800a5a2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a5a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5a6:	69db      	ldr	r3, [r3, #28]
 800a5a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a5ac:	f040 80b6 	bne.w	800a71c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a5b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a5b2:	461c      	mov	r4, r3
 800a5b4:	f04f 0500 	mov.w	r5, #0
 800a5b8:	4622      	mov	r2, r4
 800a5ba:	462b      	mov	r3, r5
 800a5bc:	1891      	adds	r1, r2, r2
 800a5be:	6439      	str	r1, [r7, #64]	; 0x40
 800a5c0:	415b      	adcs	r3, r3
 800a5c2:	647b      	str	r3, [r7, #68]	; 0x44
 800a5c4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a5c8:	1912      	adds	r2, r2, r4
 800a5ca:	eb45 0303 	adc.w	r3, r5, r3
 800a5ce:	f04f 0000 	mov.w	r0, #0
 800a5d2:	f04f 0100 	mov.w	r1, #0
 800a5d6:	00d9      	lsls	r1, r3, #3
 800a5d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a5dc:	00d0      	lsls	r0, r2, #3
 800a5de:	4602      	mov	r2, r0
 800a5e0:	460b      	mov	r3, r1
 800a5e2:	1911      	adds	r1, r2, r4
 800a5e4:	6639      	str	r1, [r7, #96]	; 0x60
 800a5e6:	416b      	adcs	r3, r5
 800a5e8:	667b      	str	r3, [r7, #100]	; 0x64
 800a5ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5ec:	685b      	ldr	r3, [r3, #4]
 800a5ee:	461a      	mov	r2, r3
 800a5f0:	f04f 0300 	mov.w	r3, #0
 800a5f4:	1891      	adds	r1, r2, r2
 800a5f6:	63b9      	str	r1, [r7, #56]	; 0x38
 800a5f8:	415b      	adcs	r3, r3
 800a5fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a5fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a600:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800a604:	f7f6 fb48 	bl	8000c98 <__aeabi_uldivmod>
 800a608:	4602      	mov	r2, r0
 800a60a:	460b      	mov	r3, r1
 800a60c:	4ba5      	ldr	r3, [pc, #660]	; (800a8a4 <UART_SetConfig+0x38c>)
 800a60e:	fba3 2302 	umull	r2, r3, r3, r2
 800a612:	095b      	lsrs	r3, r3, #5
 800a614:	011e      	lsls	r6, r3, #4
 800a616:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a618:	461c      	mov	r4, r3
 800a61a:	f04f 0500 	mov.w	r5, #0
 800a61e:	4622      	mov	r2, r4
 800a620:	462b      	mov	r3, r5
 800a622:	1891      	adds	r1, r2, r2
 800a624:	6339      	str	r1, [r7, #48]	; 0x30
 800a626:	415b      	adcs	r3, r3
 800a628:	637b      	str	r3, [r7, #52]	; 0x34
 800a62a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a62e:	1912      	adds	r2, r2, r4
 800a630:	eb45 0303 	adc.w	r3, r5, r3
 800a634:	f04f 0000 	mov.w	r0, #0
 800a638:	f04f 0100 	mov.w	r1, #0
 800a63c:	00d9      	lsls	r1, r3, #3
 800a63e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a642:	00d0      	lsls	r0, r2, #3
 800a644:	4602      	mov	r2, r0
 800a646:	460b      	mov	r3, r1
 800a648:	1911      	adds	r1, r2, r4
 800a64a:	65b9      	str	r1, [r7, #88]	; 0x58
 800a64c:	416b      	adcs	r3, r5
 800a64e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a650:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a652:	685b      	ldr	r3, [r3, #4]
 800a654:	461a      	mov	r2, r3
 800a656:	f04f 0300 	mov.w	r3, #0
 800a65a:	1891      	adds	r1, r2, r2
 800a65c:	62b9      	str	r1, [r7, #40]	; 0x28
 800a65e:	415b      	adcs	r3, r3
 800a660:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a662:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a666:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800a66a:	f7f6 fb15 	bl	8000c98 <__aeabi_uldivmod>
 800a66e:	4602      	mov	r2, r0
 800a670:	460b      	mov	r3, r1
 800a672:	4b8c      	ldr	r3, [pc, #560]	; (800a8a4 <UART_SetConfig+0x38c>)
 800a674:	fba3 1302 	umull	r1, r3, r3, r2
 800a678:	095b      	lsrs	r3, r3, #5
 800a67a:	2164      	movs	r1, #100	; 0x64
 800a67c:	fb01 f303 	mul.w	r3, r1, r3
 800a680:	1ad3      	subs	r3, r2, r3
 800a682:	00db      	lsls	r3, r3, #3
 800a684:	3332      	adds	r3, #50	; 0x32
 800a686:	4a87      	ldr	r2, [pc, #540]	; (800a8a4 <UART_SetConfig+0x38c>)
 800a688:	fba2 2303 	umull	r2, r3, r2, r3
 800a68c:	095b      	lsrs	r3, r3, #5
 800a68e:	005b      	lsls	r3, r3, #1
 800a690:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a694:	441e      	add	r6, r3
 800a696:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a698:	4618      	mov	r0, r3
 800a69a:	f04f 0100 	mov.w	r1, #0
 800a69e:	4602      	mov	r2, r0
 800a6a0:	460b      	mov	r3, r1
 800a6a2:	1894      	adds	r4, r2, r2
 800a6a4:	623c      	str	r4, [r7, #32]
 800a6a6:	415b      	adcs	r3, r3
 800a6a8:	627b      	str	r3, [r7, #36]	; 0x24
 800a6aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a6ae:	1812      	adds	r2, r2, r0
 800a6b0:	eb41 0303 	adc.w	r3, r1, r3
 800a6b4:	f04f 0400 	mov.w	r4, #0
 800a6b8:	f04f 0500 	mov.w	r5, #0
 800a6bc:	00dd      	lsls	r5, r3, #3
 800a6be:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a6c2:	00d4      	lsls	r4, r2, #3
 800a6c4:	4622      	mov	r2, r4
 800a6c6:	462b      	mov	r3, r5
 800a6c8:	1814      	adds	r4, r2, r0
 800a6ca:	653c      	str	r4, [r7, #80]	; 0x50
 800a6cc:	414b      	adcs	r3, r1
 800a6ce:	657b      	str	r3, [r7, #84]	; 0x54
 800a6d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6d2:	685b      	ldr	r3, [r3, #4]
 800a6d4:	461a      	mov	r2, r3
 800a6d6:	f04f 0300 	mov.w	r3, #0
 800a6da:	1891      	adds	r1, r2, r2
 800a6dc:	61b9      	str	r1, [r7, #24]
 800a6de:	415b      	adcs	r3, r3
 800a6e0:	61fb      	str	r3, [r7, #28]
 800a6e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a6e6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800a6ea:	f7f6 fad5 	bl	8000c98 <__aeabi_uldivmod>
 800a6ee:	4602      	mov	r2, r0
 800a6f0:	460b      	mov	r3, r1
 800a6f2:	4b6c      	ldr	r3, [pc, #432]	; (800a8a4 <UART_SetConfig+0x38c>)
 800a6f4:	fba3 1302 	umull	r1, r3, r3, r2
 800a6f8:	095b      	lsrs	r3, r3, #5
 800a6fa:	2164      	movs	r1, #100	; 0x64
 800a6fc:	fb01 f303 	mul.w	r3, r1, r3
 800a700:	1ad3      	subs	r3, r2, r3
 800a702:	00db      	lsls	r3, r3, #3
 800a704:	3332      	adds	r3, #50	; 0x32
 800a706:	4a67      	ldr	r2, [pc, #412]	; (800a8a4 <UART_SetConfig+0x38c>)
 800a708:	fba2 2303 	umull	r2, r3, r2, r3
 800a70c:	095b      	lsrs	r3, r3, #5
 800a70e:	f003 0207 	and.w	r2, r3, #7
 800a712:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	4432      	add	r2, r6
 800a718:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a71a:	e0b9      	b.n	800a890 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a71c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a71e:	461c      	mov	r4, r3
 800a720:	f04f 0500 	mov.w	r5, #0
 800a724:	4622      	mov	r2, r4
 800a726:	462b      	mov	r3, r5
 800a728:	1891      	adds	r1, r2, r2
 800a72a:	6139      	str	r1, [r7, #16]
 800a72c:	415b      	adcs	r3, r3
 800a72e:	617b      	str	r3, [r7, #20]
 800a730:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a734:	1912      	adds	r2, r2, r4
 800a736:	eb45 0303 	adc.w	r3, r5, r3
 800a73a:	f04f 0000 	mov.w	r0, #0
 800a73e:	f04f 0100 	mov.w	r1, #0
 800a742:	00d9      	lsls	r1, r3, #3
 800a744:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a748:	00d0      	lsls	r0, r2, #3
 800a74a:	4602      	mov	r2, r0
 800a74c:	460b      	mov	r3, r1
 800a74e:	eb12 0804 	adds.w	r8, r2, r4
 800a752:	eb43 0905 	adc.w	r9, r3, r5
 800a756:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a758:	685b      	ldr	r3, [r3, #4]
 800a75a:	4618      	mov	r0, r3
 800a75c:	f04f 0100 	mov.w	r1, #0
 800a760:	f04f 0200 	mov.w	r2, #0
 800a764:	f04f 0300 	mov.w	r3, #0
 800a768:	008b      	lsls	r3, r1, #2
 800a76a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a76e:	0082      	lsls	r2, r0, #2
 800a770:	4640      	mov	r0, r8
 800a772:	4649      	mov	r1, r9
 800a774:	f7f6 fa90 	bl	8000c98 <__aeabi_uldivmod>
 800a778:	4602      	mov	r2, r0
 800a77a:	460b      	mov	r3, r1
 800a77c:	4b49      	ldr	r3, [pc, #292]	; (800a8a4 <UART_SetConfig+0x38c>)
 800a77e:	fba3 2302 	umull	r2, r3, r3, r2
 800a782:	095b      	lsrs	r3, r3, #5
 800a784:	011e      	lsls	r6, r3, #4
 800a786:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a788:	4618      	mov	r0, r3
 800a78a:	f04f 0100 	mov.w	r1, #0
 800a78e:	4602      	mov	r2, r0
 800a790:	460b      	mov	r3, r1
 800a792:	1894      	adds	r4, r2, r2
 800a794:	60bc      	str	r4, [r7, #8]
 800a796:	415b      	adcs	r3, r3
 800a798:	60fb      	str	r3, [r7, #12]
 800a79a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a79e:	1812      	adds	r2, r2, r0
 800a7a0:	eb41 0303 	adc.w	r3, r1, r3
 800a7a4:	f04f 0400 	mov.w	r4, #0
 800a7a8:	f04f 0500 	mov.w	r5, #0
 800a7ac:	00dd      	lsls	r5, r3, #3
 800a7ae:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a7b2:	00d4      	lsls	r4, r2, #3
 800a7b4:	4622      	mov	r2, r4
 800a7b6:	462b      	mov	r3, r5
 800a7b8:	1814      	adds	r4, r2, r0
 800a7ba:	64bc      	str	r4, [r7, #72]	; 0x48
 800a7bc:	414b      	adcs	r3, r1
 800a7be:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a7c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7c2:	685b      	ldr	r3, [r3, #4]
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f04f 0100 	mov.w	r1, #0
 800a7ca:	f04f 0200 	mov.w	r2, #0
 800a7ce:	f04f 0300 	mov.w	r3, #0
 800a7d2:	008b      	lsls	r3, r1, #2
 800a7d4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a7d8:	0082      	lsls	r2, r0, #2
 800a7da:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800a7de:	f7f6 fa5b 	bl	8000c98 <__aeabi_uldivmod>
 800a7e2:	4602      	mov	r2, r0
 800a7e4:	460b      	mov	r3, r1
 800a7e6:	4b2f      	ldr	r3, [pc, #188]	; (800a8a4 <UART_SetConfig+0x38c>)
 800a7e8:	fba3 1302 	umull	r1, r3, r3, r2
 800a7ec:	095b      	lsrs	r3, r3, #5
 800a7ee:	2164      	movs	r1, #100	; 0x64
 800a7f0:	fb01 f303 	mul.w	r3, r1, r3
 800a7f4:	1ad3      	subs	r3, r2, r3
 800a7f6:	011b      	lsls	r3, r3, #4
 800a7f8:	3332      	adds	r3, #50	; 0x32
 800a7fa:	4a2a      	ldr	r2, [pc, #168]	; (800a8a4 <UART_SetConfig+0x38c>)
 800a7fc:	fba2 2303 	umull	r2, r3, r2, r3
 800a800:	095b      	lsrs	r3, r3, #5
 800a802:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a806:	441e      	add	r6, r3
 800a808:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a80a:	4618      	mov	r0, r3
 800a80c:	f04f 0100 	mov.w	r1, #0
 800a810:	4602      	mov	r2, r0
 800a812:	460b      	mov	r3, r1
 800a814:	1894      	adds	r4, r2, r2
 800a816:	603c      	str	r4, [r7, #0]
 800a818:	415b      	adcs	r3, r3
 800a81a:	607b      	str	r3, [r7, #4]
 800a81c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a820:	1812      	adds	r2, r2, r0
 800a822:	eb41 0303 	adc.w	r3, r1, r3
 800a826:	f04f 0400 	mov.w	r4, #0
 800a82a:	f04f 0500 	mov.w	r5, #0
 800a82e:	00dd      	lsls	r5, r3, #3
 800a830:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800a834:	00d4      	lsls	r4, r2, #3
 800a836:	4622      	mov	r2, r4
 800a838:	462b      	mov	r3, r5
 800a83a:	eb12 0a00 	adds.w	sl, r2, r0
 800a83e:	eb43 0b01 	adc.w	fp, r3, r1
 800a842:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a844:	685b      	ldr	r3, [r3, #4]
 800a846:	4618      	mov	r0, r3
 800a848:	f04f 0100 	mov.w	r1, #0
 800a84c:	f04f 0200 	mov.w	r2, #0
 800a850:	f04f 0300 	mov.w	r3, #0
 800a854:	008b      	lsls	r3, r1, #2
 800a856:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800a85a:	0082      	lsls	r2, r0, #2
 800a85c:	4650      	mov	r0, sl
 800a85e:	4659      	mov	r1, fp
 800a860:	f7f6 fa1a 	bl	8000c98 <__aeabi_uldivmod>
 800a864:	4602      	mov	r2, r0
 800a866:	460b      	mov	r3, r1
 800a868:	4b0e      	ldr	r3, [pc, #56]	; (800a8a4 <UART_SetConfig+0x38c>)
 800a86a:	fba3 1302 	umull	r1, r3, r3, r2
 800a86e:	095b      	lsrs	r3, r3, #5
 800a870:	2164      	movs	r1, #100	; 0x64
 800a872:	fb01 f303 	mul.w	r3, r1, r3
 800a876:	1ad3      	subs	r3, r2, r3
 800a878:	011b      	lsls	r3, r3, #4
 800a87a:	3332      	adds	r3, #50	; 0x32
 800a87c:	4a09      	ldr	r2, [pc, #36]	; (800a8a4 <UART_SetConfig+0x38c>)
 800a87e:	fba2 2303 	umull	r2, r3, r2, r3
 800a882:	095b      	lsrs	r3, r3, #5
 800a884:	f003 020f 	and.w	r2, r3, #15
 800a888:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	4432      	add	r2, r6
 800a88e:	609a      	str	r2, [r3, #8]
}
 800a890:	bf00      	nop
 800a892:	377c      	adds	r7, #124	; 0x7c
 800a894:	46bd      	mov	sp, r7
 800a896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a89a:	bf00      	nop
 800a89c:	40011000 	.word	0x40011000
 800a8a0:	40011400 	.word	0x40011400
 800a8a4:	51eb851f 	.word	0x51eb851f

0800a8a8 <atoi>:
 800a8a8:	220a      	movs	r2, #10
 800a8aa:	2100      	movs	r1, #0
 800a8ac:	f001 bc50 	b.w	800c150 <strtol>

0800a8b0 <__errno>:
 800a8b0:	4b01      	ldr	r3, [pc, #4]	; (800a8b8 <__errno+0x8>)
 800a8b2:	6818      	ldr	r0, [r3, #0]
 800a8b4:	4770      	bx	lr
 800a8b6:	bf00      	nop
 800a8b8:	20000060 	.word	0x20000060

0800a8bc <__libc_init_array>:
 800a8bc:	b570      	push	{r4, r5, r6, lr}
 800a8be:	4d0d      	ldr	r5, [pc, #52]	; (800a8f4 <__libc_init_array+0x38>)
 800a8c0:	4c0d      	ldr	r4, [pc, #52]	; (800a8f8 <__libc_init_array+0x3c>)
 800a8c2:	1b64      	subs	r4, r4, r5
 800a8c4:	10a4      	asrs	r4, r4, #2
 800a8c6:	2600      	movs	r6, #0
 800a8c8:	42a6      	cmp	r6, r4
 800a8ca:	d109      	bne.n	800a8e0 <__libc_init_array+0x24>
 800a8cc:	4d0b      	ldr	r5, [pc, #44]	; (800a8fc <__libc_init_array+0x40>)
 800a8ce:	4c0c      	ldr	r4, [pc, #48]	; (800a900 <__libc_init_array+0x44>)
 800a8d0:	f004 fb12 	bl	800eef8 <_init>
 800a8d4:	1b64      	subs	r4, r4, r5
 800a8d6:	10a4      	asrs	r4, r4, #2
 800a8d8:	2600      	movs	r6, #0
 800a8da:	42a6      	cmp	r6, r4
 800a8dc:	d105      	bne.n	800a8ea <__libc_init_array+0x2e>
 800a8de:	bd70      	pop	{r4, r5, r6, pc}
 800a8e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8e4:	4798      	blx	r3
 800a8e6:	3601      	adds	r6, #1
 800a8e8:	e7ee      	b.n	800a8c8 <__libc_init_array+0xc>
 800a8ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8ee:	4798      	blx	r3
 800a8f0:	3601      	adds	r6, #1
 800a8f2:	e7f2      	b.n	800a8da <__libc_init_array+0x1e>
 800a8f4:	0800fb08 	.word	0x0800fb08
 800a8f8:	0800fb08 	.word	0x0800fb08
 800a8fc:	0800fb08 	.word	0x0800fb08
 800a900:	0800fb0c 	.word	0x0800fb0c

0800a904 <memcpy>:
 800a904:	440a      	add	r2, r1
 800a906:	4291      	cmp	r1, r2
 800a908:	f100 33ff 	add.w	r3, r0, #4294967295
 800a90c:	d100      	bne.n	800a910 <memcpy+0xc>
 800a90e:	4770      	bx	lr
 800a910:	b510      	push	{r4, lr}
 800a912:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a916:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a91a:	4291      	cmp	r1, r2
 800a91c:	d1f9      	bne.n	800a912 <memcpy+0xe>
 800a91e:	bd10      	pop	{r4, pc}

0800a920 <memset>:
 800a920:	4402      	add	r2, r0
 800a922:	4603      	mov	r3, r0
 800a924:	4293      	cmp	r3, r2
 800a926:	d100      	bne.n	800a92a <memset+0xa>
 800a928:	4770      	bx	lr
 800a92a:	f803 1b01 	strb.w	r1, [r3], #1
 800a92e:	e7f9      	b.n	800a924 <memset+0x4>

0800a930 <__cvt>:
 800a930:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a934:	ec55 4b10 	vmov	r4, r5, d0
 800a938:	2d00      	cmp	r5, #0
 800a93a:	460e      	mov	r6, r1
 800a93c:	4619      	mov	r1, r3
 800a93e:	462b      	mov	r3, r5
 800a940:	bfbb      	ittet	lt
 800a942:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a946:	461d      	movlt	r5, r3
 800a948:	2300      	movge	r3, #0
 800a94a:	232d      	movlt	r3, #45	; 0x2d
 800a94c:	700b      	strb	r3, [r1, #0]
 800a94e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a950:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a954:	4691      	mov	r9, r2
 800a956:	f023 0820 	bic.w	r8, r3, #32
 800a95a:	bfbc      	itt	lt
 800a95c:	4622      	movlt	r2, r4
 800a95e:	4614      	movlt	r4, r2
 800a960:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a964:	d005      	beq.n	800a972 <__cvt+0x42>
 800a966:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a96a:	d100      	bne.n	800a96e <__cvt+0x3e>
 800a96c:	3601      	adds	r6, #1
 800a96e:	2102      	movs	r1, #2
 800a970:	e000      	b.n	800a974 <__cvt+0x44>
 800a972:	2103      	movs	r1, #3
 800a974:	ab03      	add	r3, sp, #12
 800a976:	9301      	str	r3, [sp, #4]
 800a978:	ab02      	add	r3, sp, #8
 800a97a:	9300      	str	r3, [sp, #0]
 800a97c:	ec45 4b10 	vmov	d0, r4, r5
 800a980:	4653      	mov	r3, sl
 800a982:	4632      	mov	r2, r6
 800a984:	f001 fc98 	bl	800c2b8 <_dtoa_r>
 800a988:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a98c:	4607      	mov	r7, r0
 800a98e:	d102      	bne.n	800a996 <__cvt+0x66>
 800a990:	f019 0f01 	tst.w	r9, #1
 800a994:	d022      	beq.n	800a9dc <__cvt+0xac>
 800a996:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a99a:	eb07 0906 	add.w	r9, r7, r6
 800a99e:	d110      	bne.n	800a9c2 <__cvt+0x92>
 800a9a0:	783b      	ldrb	r3, [r7, #0]
 800a9a2:	2b30      	cmp	r3, #48	; 0x30
 800a9a4:	d10a      	bne.n	800a9bc <__cvt+0x8c>
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	4620      	mov	r0, r4
 800a9ac:	4629      	mov	r1, r5
 800a9ae:	f7f6 f893 	bl	8000ad8 <__aeabi_dcmpeq>
 800a9b2:	b918      	cbnz	r0, 800a9bc <__cvt+0x8c>
 800a9b4:	f1c6 0601 	rsb	r6, r6, #1
 800a9b8:	f8ca 6000 	str.w	r6, [sl]
 800a9bc:	f8da 3000 	ldr.w	r3, [sl]
 800a9c0:	4499      	add	r9, r3
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	4620      	mov	r0, r4
 800a9c8:	4629      	mov	r1, r5
 800a9ca:	f7f6 f885 	bl	8000ad8 <__aeabi_dcmpeq>
 800a9ce:	b108      	cbz	r0, 800a9d4 <__cvt+0xa4>
 800a9d0:	f8cd 900c 	str.w	r9, [sp, #12]
 800a9d4:	2230      	movs	r2, #48	; 0x30
 800a9d6:	9b03      	ldr	r3, [sp, #12]
 800a9d8:	454b      	cmp	r3, r9
 800a9da:	d307      	bcc.n	800a9ec <__cvt+0xbc>
 800a9dc:	9b03      	ldr	r3, [sp, #12]
 800a9de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a9e0:	1bdb      	subs	r3, r3, r7
 800a9e2:	4638      	mov	r0, r7
 800a9e4:	6013      	str	r3, [r2, #0]
 800a9e6:	b004      	add	sp, #16
 800a9e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9ec:	1c59      	adds	r1, r3, #1
 800a9ee:	9103      	str	r1, [sp, #12]
 800a9f0:	701a      	strb	r2, [r3, #0]
 800a9f2:	e7f0      	b.n	800a9d6 <__cvt+0xa6>

0800a9f4 <__exponent>:
 800a9f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	2900      	cmp	r1, #0
 800a9fa:	bfb8      	it	lt
 800a9fc:	4249      	neglt	r1, r1
 800a9fe:	f803 2b02 	strb.w	r2, [r3], #2
 800aa02:	bfb4      	ite	lt
 800aa04:	222d      	movlt	r2, #45	; 0x2d
 800aa06:	222b      	movge	r2, #43	; 0x2b
 800aa08:	2909      	cmp	r1, #9
 800aa0a:	7042      	strb	r2, [r0, #1]
 800aa0c:	dd2a      	ble.n	800aa64 <__exponent+0x70>
 800aa0e:	f10d 0407 	add.w	r4, sp, #7
 800aa12:	46a4      	mov	ip, r4
 800aa14:	270a      	movs	r7, #10
 800aa16:	46a6      	mov	lr, r4
 800aa18:	460a      	mov	r2, r1
 800aa1a:	fb91 f6f7 	sdiv	r6, r1, r7
 800aa1e:	fb07 1516 	mls	r5, r7, r6, r1
 800aa22:	3530      	adds	r5, #48	; 0x30
 800aa24:	2a63      	cmp	r2, #99	; 0x63
 800aa26:	f104 34ff 	add.w	r4, r4, #4294967295
 800aa2a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800aa2e:	4631      	mov	r1, r6
 800aa30:	dcf1      	bgt.n	800aa16 <__exponent+0x22>
 800aa32:	3130      	adds	r1, #48	; 0x30
 800aa34:	f1ae 0502 	sub.w	r5, lr, #2
 800aa38:	f804 1c01 	strb.w	r1, [r4, #-1]
 800aa3c:	1c44      	adds	r4, r0, #1
 800aa3e:	4629      	mov	r1, r5
 800aa40:	4561      	cmp	r1, ip
 800aa42:	d30a      	bcc.n	800aa5a <__exponent+0x66>
 800aa44:	f10d 0209 	add.w	r2, sp, #9
 800aa48:	eba2 020e 	sub.w	r2, r2, lr
 800aa4c:	4565      	cmp	r5, ip
 800aa4e:	bf88      	it	hi
 800aa50:	2200      	movhi	r2, #0
 800aa52:	4413      	add	r3, r2
 800aa54:	1a18      	subs	r0, r3, r0
 800aa56:	b003      	add	sp, #12
 800aa58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aa5e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800aa62:	e7ed      	b.n	800aa40 <__exponent+0x4c>
 800aa64:	2330      	movs	r3, #48	; 0x30
 800aa66:	3130      	adds	r1, #48	; 0x30
 800aa68:	7083      	strb	r3, [r0, #2]
 800aa6a:	70c1      	strb	r1, [r0, #3]
 800aa6c:	1d03      	adds	r3, r0, #4
 800aa6e:	e7f1      	b.n	800aa54 <__exponent+0x60>

0800aa70 <_printf_float>:
 800aa70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa74:	ed2d 8b02 	vpush	{d8}
 800aa78:	b08d      	sub	sp, #52	; 0x34
 800aa7a:	460c      	mov	r4, r1
 800aa7c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800aa80:	4616      	mov	r6, r2
 800aa82:	461f      	mov	r7, r3
 800aa84:	4605      	mov	r5, r0
 800aa86:	f002 fe79 	bl	800d77c <_localeconv_r>
 800aa8a:	f8d0 a000 	ldr.w	sl, [r0]
 800aa8e:	4650      	mov	r0, sl
 800aa90:	f7f5 fba6 	bl	80001e0 <strlen>
 800aa94:	2300      	movs	r3, #0
 800aa96:	930a      	str	r3, [sp, #40]	; 0x28
 800aa98:	6823      	ldr	r3, [r4, #0]
 800aa9a:	9305      	str	r3, [sp, #20]
 800aa9c:	f8d8 3000 	ldr.w	r3, [r8]
 800aaa0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800aaa4:	3307      	adds	r3, #7
 800aaa6:	f023 0307 	bic.w	r3, r3, #7
 800aaaa:	f103 0208 	add.w	r2, r3, #8
 800aaae:	f8c8 2000 	str.w	r2, [r8]
 800aab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aab6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800aaba:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800aabe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800aac2:	9307      	str	r3, [sp, #28]
 800aac4:	f8cd 8018 	str.w	r8, [sp, #24]
 800aac8:	ee08 0a10 	vmov	s16, r0
 800aacc:	4b9f      	ldr	r3, [pc, #636]	; (800ad4c <_printf_float+0x2dc>)
 800aace:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aad2:	f04f 32ff 	mov.w	r2, #4294967295
 800aad6:	f7f6 f831 	bl	8000b3c <__aeabi_dcmpun>
 800aada:	bb88      	cbnz	r0, 800ab40 <_printf_float+0xd0>
 800aadc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aae0:	4b9a      	ldr	r3, [pc, #616]	; (800ad4c <_printf_float+0x2dc>)
 800aae2:	f04f 32ff 	mov.w	r2, #4294967295
 800aae6:	f7f6 f80b 	bl	8000b00 <__aeabi_dcmple>
 800aaea:	bb48      	cbnz	r0, 800ab40 <_printf_float+0xd0>
 800aaec:	2200      	movs	r2, #0
 800aaee:	2300      	movs	r3, #0
 800aaf0:	4640      	mov	r0, r8
 800aaf2:	4649      	mov	r1, r9
 800aaf4:	f7f5 fffa 	bl	8000aec <__aeabi_dcmplt>
 800aaf8:	b110      	cbz	r0, 800ab00 <_printf_float+0x90>
 800aafa:	232d      	movs	r3, #45	; 0x2d
 800aafc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab00:	4b93      	ldr	r3, [pc, #588]	; (800ad50 <_printf_float+0x2e0>)
 800ab02:	4894      	ldr	r0, [pc, #592]	; (800ad54 <_printf_float+0x2e4>)
 800ab04:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ab08:	bf94      	ite	ls
 800ab0a:	4698      	movls	r8, r3
 800ab0c:	4680      	movhi	r8, r0
 800ab0e:	2303      	movs	r3, #3
 800ab10:	6123      	str	r3, [r4, #16]
 800ab12:	9b05      	ldr	r3, [sp, #20]
 800ab14:	f023 0204 	bic.w	r2, r3, #4
 800ab18:	6022      	str	r2, [r4, #0]
 800ab1a:	f04f 0900 	mov.w	r9, #0
 800ab1e:	9700      	str	r7, [sp, #0]
 800ab20:	4633      	mov	r3, r6
 800ab22:	aa0b      	add	r2, sp, #44	; 0x2c
 800ab24:	4621      	mov	r1, r4
 800ab26:	4628      	mov	r0, r5
 800ab28:	f000 f9d8 	bl	800aedc <_printf_common>
 800ab2c:	3001      	adds	r0, #1
 800ab2e:	f040 8090 	bne.w	800ac52 <_printf_float+0x1e2>
 800ab32:	f04f 30ff 	mov.w	r0, #4294967295
 800ab36:	b00d      	add	sp, #52	; 0x34
 800ab38:	ecbd 8b02 	vpop	{d8}
 800ab3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab40:	4642      	mov	r2, r8
 800ab42:	464b      	mov	r3, r9
 800ab44:	4640      	mov	r0, r8
 800ab46:	4649      	mov	r1, r9
 800ab48:	f7f5 fff8 	bl	8000b3c <__aeabi_dcmpun>
 800ab4c:	b140      	cbz	r0, 800ab60 <_printf_float+0xf0>
 800ab4e:	464b      	mov	r3, r9
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	bfbc      	itt	lt
 800ab54:	232d      	movlt	r3, #45	; 0x2d
 800ab56:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ab5a:	487f      	ldr	r0, [pc, #508]	; (800ad58 <_printf_float+0x2e8>)
 800ab5c:	4b7f      	ldr	r3, [pc, #508]	; (800ad5c <_printf_float+0x2ec>)
 800ab5e:	e7d1      	b.n	800ab04 <_printf_float+0x94>
 800ab60:	6863      	ldr	r3, [r4, #4]
 800ab62:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ab66:	9206      	str	r2, [sp, #24]
 800ab68:	1c5a      	adds	r2, r3, #1
 800ab6a:	d13f      	bne.n	800abec <_printf_float+0x17c>
 800ab6c:	2306      	movs	r3, #6
 800ab6e:	6063      	str	r3, [r4, #4]
 800ab70:	9b05      	ldr	r3, [sp, #20]
 800ab72:	6861      	ldr	r1, [r4, #4]
 800ab74:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ab78:	2300      	movs	r3, #0
 800ab7a:	9303      	str	r3, [sp, #12]
 800ab7c:	ab0a      	add	r3, sp, #40	; 0x28
 800ab7e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ab82:	ab09      	add	r3, sp, #36	; 0x24
 800ab84:	ec49 8b10 	vmov	d0, r8, r9
 800ab88:	9300      	str	r3, [sp, #0]
 800ab8a:	6022      	str	r2, [r4, #0]
 800ab8c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ab90:	4628      	mov	r0, r5
 800ab92:	f7ff fecd 	bl	800a930 <__cvt>
 800ab96:	9b06      	ldr	r3, [sp, #24]
 800ab98:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ab9a:	2b47      	cmp	r3, #71	; 0x47
 800ab9c:	4680      	mov	r8, r0
 800ab9e:	d108      	bne.n	800abb2 <_printf_float+0x142>
 800aba0:	1cc8      	adds	r0, r1, #3
 800aba2:	db02      	blt.n	800abaa <_printf_float+0x13a>
 800aba4:	6863      	ldr	r3, [r4, #4]
 800aba6:	4299      	cmp	r1, r3
 800aba8:	dd41      	ble.n	800ac2e <_printf_float+0x1be>
 800abaa:	f1ab 0b02 	sub.w	fp, fp, #2
 800abae:	fa5f fb8b 	uxtb.w	fp, fp
 800abb2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800abb6:	d820      	bhi.n	800abfa <_printf_float+0x18a>
 800abb8:	3901      	subs	r1, #1
 800abba:	465a      	mov	r2, fp
 800abbc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800abc0:	9109      	str	r1, [sp, #36]	; 0x24
 800abc2:	f7ff ff17 	bl	800a9f4 <__exponent>
 800abc6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800abc8:	1813      	adds	r3, r2, r0
 800abca:	2a01      	cmp	r2, #1
 800abcc:	4681      	mov	r9, r0
 800abce:	6123      	str	r3, [r4, #16]
 800abd0:	dc02      	bgt.n	800abd8 <_printf_float+0x168>
 800abd2:	6822      	ldr	r2, [r4, #0]
 800abd4:	07d2      	lsls	r2, r2, #31
 800abd6:	d501      	bpl.n	800abdc <_printf_float+0x16c>
 800abd8:	3301      	adds	r3, #1
 800abda:	6123      	str	r3, [r4, #16]
 800abdc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d09c      	beq.n	800ab1e <_printf_float+0xae>
 800abe4:	232d      	movs	r3, #45	; 0x2d
 800abe6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800abea:	e798      	b.n	800ab1e <_printf_float+0xae>
 800abec:	9a06      	ldr	r2, [sp, #24]
 800abee:	2a47      	cmp	r2, #71	; 0x47
 800abf0:	d1be      	bne.n	800ab70 <_printf_float+0x100>
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d1bc      	bne.n	800ab70 <_printf_float+0x100>
 800abf6:	2301      	movs	r3, #1
 800abf8:	e7b9      	b.n	800ab6e <_printf_float+0xfe>
 800abfa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800abfe:	d118      	bne.n	800ac32 <_printf_float+0x1c2>
 800ac00:	2900      	cmp	r1, #0
 800ac02:	6863      	ldr	r3, [r4, #4]
 800ac04:	dd0b      	ble.n	800ac1e <_printf_float+0x1ae>
 800ac06:	6121      	str	r1, [r4, #16]
 800ac08:	b913      	cbnz	r3, 800ac10 <_printf_float+0x1a0>
 800ac0a:	6822      	ldr	r2, [r4, #0]
 800ac0c:	07d0      	lsls	r0, r2, #31
 800ac0e:	d502      	bpl.n	800ac16 <_printf_float+0x1a6>
 800ac10:	3301      	adds	r3, #1
 800ac12:	440b      	add	r3, r1
 800ac14:	6123      	str	r3, [r4, #16]
 800ac16:	65a1      	str	r1, [r4, #88]	; 0x58
 800ac18:	f04f 0900 	mov.w	r9, #0
 800ac1c:	e7de      	b.n	800abdc <_printf_float+0x16c>
 800ac1e:	b913      	cbnz	r3, 800ac26 <_printf_float+0x1b6>
 800ac20:	6822      	ldr	r2, [r4, #0]
 800ac22:	07d2      	lsls	r2, r2, #31
 800ac24:	d501      	bpl.n	800ac2a <_printf_float+0x1ba>
 800ac26:	3302      	adds	r3, #2
 800ac28:	e7f4      	b.n	800ac14 <_printf_float+0x1a4>
 800ac2a:	2301      	movs	r3, #1
 800ac2c:	e7f2      	b.n	800ac14 <_printf_float+0x1a4>
 800ac2e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ac32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac34:	4299      	cmp	r1, r3
 800ac36:	db05      	blt.n	800ac44 <_printf_float+0x1d4>
 800ac38:	6823      	ldr	r3, [r4, #0]
 800ac3a:	6121      	str	r1, [r4, #16]
 800ac3c:	07d8      	lsls	r0, r3, #31
 800ac3e:	d5ea      	bpl.n	800ac16 <_printf_float+0x1a6>
 800ac40:	1c4b      	adds	r3, r1, #1
 800ac42:	e7e7      	b.n	800ac14 <_printf_float+0x1a4>
 800ac44:	2900      	cmp	r1, #0
 800ac46:	bfd4      	ite	le
 800ac48:	f1c1 0202 	rsble	r2, r1, #2
 800ac4c:	2201      	movgt	r2, #1
 800ac4e:	4413      	add	r3, r2
 800ac50:	e7e0      	b.n	800ac14 <_printf_float+0x1a4>
 800ac52:	6823      	ldr	r3, [r4, #0]
 800ac54:	055a      	lsls	r2, r3, #21
 800ac56:	d407      	bmi.n	800ac68 <_printf_float+0x1f8>
 800ac58:	6923      	ldr	r3, [r4, #16]
 800ac5a:	4642      	mov	r2, r8
 800ac5c:	4631      	mov	r1, r6
 800ac5e:	4628      	mov	r0, r5
 800ac60:	47b8      	blx	r7
 800ac62:	3001      	adds	r0, #1
 800ac64:	d12c      	bne.n	800acc0 <_printf_float+0x250>
 800ac66:	e764      	b.n	800ab32 <_printf_float+0xc2>
 800ac68:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ac6c:	f240 80e0 	bls.w	800ae30 <_printf_float+0x3c0>
 800ac70:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ac74:	2200      	movs	r2, #0
 800ac76:	2300      	movs	r3, #0
 800ac78:	f7f5 ff2e 	bl	8000ad8 <__aeabi_dcmpeq>
 800ac7c:	2800      	cmp	r0, #0
 800ac7e:	d034      	beq.n	800acea <_printf_float+0x27a>
 800ac80:	4a37      	ldr	r2, [pc, #220]	; (800ad60 <_printf_float+0x2f0>)
 800ac82:	2301      	movs	r3, #1
 800ac84:	4631      	mov	r1, r6
 800ac86:	4628      	mov	r0, r5
 800ac88:	47b8      	blx	r7
 800ac8a:	3001      	adds	r0, #1
 800ac8c:	f43f af51 	beq.w	800ab32 <_printf_float+0xc2>
 800ac90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ac94:	429a      	cmp	r2, r3
 800ac96:	db02      	blt.n	800ac9e <_printf_float+0x22e>
 800ac98:	6823      	ldr	r3, [r4, #0]
 800ac9a:	07d8      	lsls	r0, r3, #31
 800ac9c:	d510      	bpl.n	800acc0 <_printf_float+0x250>
 800ac9e:	ee18 3a10 	vmov	r3, s16
 800aca2:	4652      	mov	r2, sl
 800aca4:	4631      	mov	r1, r6
 800aca6:	4628      	mov	r0, r5
 800aca8:	47b8      	blx	r7
 800acaa:	3001      	adds	r0, #1
 800acac:	f43f af41 	beq.w	800ab32 <_printf_float+0xc2>
 800acb0:	f04f 0800 	mov.w	r8, #0
 800acb4:	f104 091a 	add.w	r9, r4, #26
 800acb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800acba:	3b01      	subs	r3, #1
 800acbc:	4543      	cmp	r3, r8
 800acbe:	dc09      	bgt.n	800acd4 <_printf_float+0x264>
 800acc0:	6823      	ldr	r3, [r4, #0]
 800acc2:	079b      	lsls	r3, r3, #30
 800acc4:	f100 8105 	bmi.w	800aed2 <_printf_float+0x462>
 800acc8:	68e0      	ldr	r0, [r4, #12]
 800acca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800accc:	4298      	cmp	r0, r3
 800acce:	bfb8      	it	lt
 800acd0:	4618      	movlt	r0, r3
 800acd2:	e730      	b.n	800ab36 <_printf_float+0xc6>
 800acd4:	2301      	movs	r3, #1
 800acd6:	464a      	mov	r2, r9
 800acd8:	4631      	mov	r1, r6
 800acda:	4628      	mov	r0, r5
 800acdc:	47b8      	blx	r7
 800acde:	3001      	adds	r0, #1
 800ace0:	f43f af27 	beq.w	800ab32 <_printf_float+0xc2>
 800ace4:	f108 0801 	add.w	r8, r8, #1
 800ace8:	e7e6      	b.n	800acb8 <_printf_float+0x248>
 800acea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acec:	2b00      	cmp	r3, #0
 800acee:	dc39      	bgt.n	800ad64 <_printf_float+0x2f4>
 800acf0:	4a1b      	ldr	r2, [pc, #108]	; (800ad60 <_printf_float+0x2f0>)
 800acf2:	2301      	movs	r3, #1
 800acf4:	4631      	mov	r1, r6
 800acf6:	4628      	mov	r0, r5
 800acf8:	47b8      	blx	r7
 800acfa:	3001      	adds	r0, #1
 800acfc:	f43f af19 	beq.w	800ab32 <_printf_float+0xc2>
 800ad00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ad04:	4313      	orrs	r3, r2
 800ad06:	d102      	bne.n	800ad0e <_printf_float+0x29e>
 800ad08:	6823      	ldr	r3, [r4, #0]
 800ad0a:	07d9      	lsls	r1, r3, #31
 800ad0c:	d5d8      	bpl.n	800acc0 <_printf_float+0x250>
 800ad0e:	ee18 3a10 	vmov	r3, s16
 800ad12:	4652      	mov	r2, sl
 800ad14:	4631      	mov	r1, r6
 800ad16:	4628      	mov	r0, r5
 800ad18:	47b8      	blx	r7
 800ad1a:	3001      	adds	r0, #1
 800ad1c:	f43f af09 	beq.w	800ab32 <_printf_float+0xc2>
 800ad20:	f04f 0900 	mov.w	r9, #0
 800ad24:	f104 0a1a 	add.w	sl, r4, #26
 800ad28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad2a:	425b      	negs	r3, r3
 800ad2c:	454b      	cmp	r3, r9
 800ad2e:	dc01      	bgt.n	800ad34 <_printf_float+0x2c4>
 800ad30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad32:	e792      	b.n	800ac5a <_printf_float+0x1ea>
 800ad34:	2301      	movs	r3, #1
 800ad36:	4652      	mov	r2, sl
 800ad38:	4631      	mov	r1, r6
 800ad3a:	4628      	mov	r0, r5
 800ad3c:	47b8      	blx	r7
 800ad3e:	3001      	adds	r0, #1
 800ad40:	f43f aef7 	beq.w	800ab32 <_printf_float+0xc2>
 800ad44:	f109 0901 	add.w	r9, r9, #1
 800ad48:	e7ee      	b.n	800ad28 <_printf_float+0x2b8>
 800ad4a:	bf00      	nop
 800ad4c:	7fefffff 	.word	0x7fefffff
 800ad50:	0800f5f4 	.word	0x0800f5f4
 800ad54:	0800f5f8 	.word	0x0800f5f8
 800ad58:	0800f600 	.word	0x0800f600
 800ad5c:	0800f5fc 	.word	0x0800f5fc
 800ad60:	0800f604 	.word	0x0800f604
 800ad64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad66:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ad68:	429a      	cmp	r2, r3
 800ad6a:	bfa8      	it	ge
 800ad6c:	461a      	movge	r2, r3
 800ad6e:	2a00      	cmp	r2, #0
 800ad70:	4691      	mov	r9, r2
 800ad72:	dc37      	bgt.n	800ade4 <_printf_float+0x374>
 800ad74:	f04f 0b00 	mov.w	fp, #0
 800ad78:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ad7c:	f104 021a 	add.w	r2, r4, #26
 800ad80:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ad82:	9305      	str	r3, [sp, #20]
 800ad84:	eba3 0309 	sub.w	r3, r3, r9
 800ad88:	455b      	cmp	r3, fp
 800ad8a:	dc33      	bgt.n	800adf4 <_printf_float+0x384>
 800ad8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ad90:	429a      	cmp	r2, r3
 800ad92:	db3b      	blt.n	800ae0c <_printf_float+0x39c>
 800ad94:	6823      	ldr	r3, [r4, #0]
 800ad96:	07da      	lsls	r2, r3, #31
 800ad98:	d438      	bmi.n	800ae0c <_printf_float+0x39c>
 800ad9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad9c:	9b05      	ldr	r3, [sp, #20]
 800ad9e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ada0:	1ad3      	subs	r3, r2, r3
 800ada2:	eba2 0901 	sub.w	r9, r2, r1
 800ada6:	4599      	cmp	r9, r3
 800ada8:	bfa8      	it	ge
 800adaa:	4699      	movge	r9, r3
 800adac:	f1b9 0f00 	cmp.w	r9, #0
 800adb0:	dc35      	bgt.n	800ae1e <_printf_float+0x3ae>
 800adb2:	f04f 0800 	mov.w	r8, #0
 800adb6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800adba:	f104 0a1a 	add.w	sl, r4, #26
 800adbe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800adc2:	1a9b      	subs	r3, r3, r2
 800adc4:	eba3 0309 	sub.w	r3, r3, r9
 800adc8:	4543      	cmp	r3, r8
 800adca:	f77f af79 	ble.w	800acc0 <_printf_float+0x250>
 800adce:	2301      	movs	r3, #1
 800add0:	4652      	mov	r2, sl
 800add2:	4631      	mov	r1, r6
 800add4:	4628      	mov	r0, r5
 800add6:	47b8      	blx	r7
 800add8:	3001      	adds	r0, #1
 800adda:	f43f aeaa 	beq.w	800ab32 <_printf_float+0xc2>
 800adde:	f108 0801 	add.w	r8, r8, #1
 800ade2:	e7ec      	b.n	800adbe <_printf_float+0x34e>
 800ade4:	4613      	mov	r3, r2
 800ade6:	4631      	mov	r1, r6
 800ade8:	4642      	mov	r2, r8
 800adea:	4628      	mov	r0, r5
 800adec:	47b8      	blx	r7
 800adee:	3001      	adds	r0, #1
 800adf0:	d1c0      	bne.n	800ad74 <_printf_float+0x304>
 800adf2:	e69e      	b.n	800ab32 <_printf_float+0xc2>
 800adf4:	2301      	movs	r3, #1
 800adf6:	4631      	mov	r1, r6
 800adf8:	4628      	mov	r0, r5
 800adfa:	9205      	str	r2, [sp, #20]
 800adfc:	47b8      	blx	r7
 800adfe:	3001      	adds	r0, #1
 800ae00:	f43f ae97 	beq.w	800ab32 <_printf_float+0xc2>
 800ae04:	9a05      	ldr	r2, [sp, #20]
 800ae06:	f10b 0b01 	add.w	fp, fp, #1
 800ae0a:	e7b9      	b.n	800ad80 <_printf_float+0x310>
 800ae0c:	ee18 3a10 	vmov	r3, s16
 800ae10:	4652      	mov	r2, sl
 800ae12:	4631      	mov	r1, r6
 800ae14:	4628      	mov	r0, r5
 800ae16:	47b8      	blx	r7
 800ae18:	3001      	adds	r0, #1
 800ae1a:	d1be      	bne.n	800ad9a <_printf_float+0x32a>
 800ae1c:	e689      	b.n	800ab32 <_printf_float+0xc2>
 800ae1e:	9a05      	ldr	r2, [sp, #20]
 800ae20:	464b      	mov	r3, r9
 800ae22:	4442      	add	r2, r8
 800ae24:	4631      	mov	r1, r6
 800ae26:	4628      	mov	r0, r5
 800ae28:	47b8      	blx	r7
 800ae2a:	3001      	adds	r0, #1
 800ae2c:	d1c1      	bne.n	800adb2 <_printf_float+0x342>
 800ae2e:	e680      	b.n	800ab32 <_printf_float+0xc2>
 800ae30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ae32:	2a01      	cmp	r2, #1
 800ae34:	dc01      	bgt.n	800ae3a <_printf_float+0x3ca>
 800ae36:	07db      	lsls	r3, r3, #31
 800ae38:	d538      	bpl.n	800aeac <_printf_float+0x43c>
 800ae3a:	2301      	movs	r3, #1
 800ae3c:	4642      	mov	r2, r8
 800ae3e:	4631      	mov	r1, r6
 800ae40:	4628      	mov	r0, r5
 800ae42:	47b8      	blx	r7
 800ae44:	3001      	adds	r0, #1
 800ae46:	f43f ae74 	beq.w	800ab32 <_printf_float+0xc2>
 800ae4a:	ee18 3a10 	vmov	r3, s16
 800ae4e:	4652      	mov	r2, sl
 800ae50:	4631      	mov	r1, r6
 800ae52:	4628      	mov	r0, r5
 800ae54:	47b8      	blx	r7
 800ae56:	3001      	adds	r0, #1
 800ae58:	f43f ae6b 	beq.w	800ab32 <_printf_float+0xc2>
 800ae5c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ae60:	2200      	movs	r2, #0
 800ae62:	2300      	movs	r3, #0
 800ae64:	f7f5 fe38 	bl	8000ad8 <__aeabi_dcmpeq>
 800ae68:	b9d8      	cbnz	r0, 800aea2 <_printf_float+0x432>
 800ae6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae6c:	f108 0201 	add.w	r2, r8, #1
 800ae70:	3b01      	subs	r3, #1
 800ae72:	4631      	mov	r1, r6
 800ae74:	4628      	mov	r0, r5
 800ae76:	47b8      	blx	r7
 800ae78:	3001      	adds	r0, #1
 800ae7a:	d10e      	bne.n	800ae9a <_printf_float+0x42a>
 800ae7c:	e659      	b.n	800ab32 <_printf_float+0xc2>
 800ae7e:	2301      	movs	r3, #1
 800ae80:	4652      	mov	r2, sl
 800ae82:	4631      	mov	r1, r6
 800ae84:	4628      	mov	r0, r5
 800ae86:	47b8      	blx	r7
 800ae88:	3001      	adds	r0, #1
 800ae8a:	f43f ae52 	beq.w	800ab32 <_printf_float+0xc2>
 800ae8e:	f108 0801 	add.w	r8, r8, #1
 800ae92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae94:	3b01      	subs	r3, #1
 800ae96:	4543      	cmp	r3, r8
 800ae98:	dcf1      	bgt.n	800ae7e <_printf_float+0x40e>
 800ae9a:	464b      	mov	r3, r9
 800ae9c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800aea0:	e6dc      	b.n	800ac5c <_printf_float+0x1ec>
 800aea2:	f04f 0800 	mov.w	r8, #0
 800aea6:	f104 0a1a 	add.w	sl, r4, #26
 800aeaa:	e7f2      	b.n	800ae92 <_printf_float+0x422>
 800aeac:	2301      	movs	r3, #1
 800aeae:	4642      	mov	r2, r8
 800aeb0:	e7df      	b.n	800ae72 <_printf_float+0x402>
 800aeb2:	2301      	movs	r3, #1
 800aeb4:	464a      	mov	r2, r9
 800aeb6:	4631      	mov	r1, r6
 800aeb8:	4628      	mov	r0, r5
 800aeba:	47b8      	blx	r7
 800aebc:	3001      	adds	r0, #1
 800aebe:	f43f ae38 	beq.w	800ab32 <_printf_float+0xc2>
 800aec2:	f108 0801 	add.w	r8, r8, #1
 800aec6:	68e3      	ldr	r3, [r4, #12]
 800aec8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aeca:	1a5b      	subs	r3, r3, r1
 800aecc:	4543      	cmp	r3, r8
 800aece:	dcf0      	bgt.n	800aeb2 <_printf_float+0x442>
 800aed0:	e6fa      	b.n	800acc8 <_printf_float+0x258>
 800aed2:	f04f 0800 	mov.w	r8, #0
 800aed6:	f104 0919 	add.w	r9, r4, #25
 800aeda:	e7f4      	b.n	800aec6 <_printf_float+0x456>

0800aedc <_printf_common>:
 800aedc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aee0:	4616      	mov	r6, r2
 800aee2:	4699      	mov	r9, r3
 800aee4:	688a      	ldr	r2, [r1, #8]
 800aee6:	690b      	ldr	r3, [r1, #16]
 800aee8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aeec:	4293      	cmp	r3, r2
 800aeee:	bfb8      	it	lt
 800aef0:	4613      	movlt	r3, r2
 800aef2:	6033      	str	r3, [r6, #0]
 800aef4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aef8:	4607      	mov	r7, r0
 800aefa:	460c      	mov	r4, r1
 800aefc:	b10a      	cbz	r2, 800af02 <_printf_common+0x26>
 800aefe:	3301      	adds	r3, #1
 800af00:	6033      	str	r3, [r6, #0]
 800af02:	6823      	ldr	r3, [r4, #0]
 800af04:	0699      	lsls	r1, r3, #26
 800af06:	bf42      	ittt	mi
 800af08:	6833      	ldrmi	r3, [r6, #0]
 800af0a:	3302      	addmi	r3, #2
 800af0c:	6033      	strmi	r3, [r6, #0]
 800af0e:	6825      	ldr	r5, [r4, #0]
 800af10:	f015 0506 	ands.w	r5, r5, #6
 800af14:	d106      	bne.n	800af24 <_printf_common+0x48>
 800af16:	f104 0a19 	add.w	sl, r4, #25
 800af1a:	68e3      	ldr	r3, [r4, #12]
 800af1c:	6832      	ldr	r2, [r6, #0]
 800af1e:	1a9b      	subs	r3, r3, r2
 800af20:	42ab      	cmp	r3, r5
 800af22:	dc26      	bgt.n	800af72 <_printf_common+0x96>
 800af24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800af28:	1e13      	subs	r3, r2, #0
 800af2a:	6822      	ldr	r2, [r4, #0]
 800af2c:	bf18      	it	ne
 800af2e:	2301      	movne	r3, #1
 800af30:	0692      	lsls	r2, r2, #26
 800af32:	d42b      	bmi.n	800af8c <_printf_common+0xb0>
 800af34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800af38:	4649      	mov	r1, r9
 800af3a:	4638      	mov	r0, r7
 800af3c:	47c0      	blx	r8
 800af3e:	3001      	adds	r0, #1
 800af40:	d01e      	beq.n	800af80 <_printf_common+0xa4>
 800af42:	6823      	ldr	r3, [r4, #0]
 800af44:	68e5      	ldr	r5, [r4, #12]
 800af46:	6832      	ldr	r2, [r6, #0]
 800af48:	f003 0306 	and.w	r3, r3, #6
 800af4c:	2b04      	cmp	r3, #4
 800af4e:	bf08      	it	eq
 800af50:	1aad      	subeq	r5, r5, r2
 800af52:	68a3      	ldr	r3, [r4, #8]
 800af54:	6922      	ldr	r2, [r4, #16]
 800af56:	bf0c      	ite	eq
 800af58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800af5c:	2500      	movne	r5, #0
 800af5e:	4293      	cmp	r3, r2
 800af60:	bfc4      	itt	gt
 800af62:	1a9b      	subgt	r3, r3, r2
 800af64:	18ed      	addgt	r5, r5, r3
 800af66:	2600      	movs	r6, #0
 800af68:	341a      	adds	r4, #26
 800af6a:	42b5      	cmp	r5, r6
 800af6c:	d11a      	bne.n	800afa4 <_printf_common+0xc8>
 800af6e:	2000      	movs	r0, #0
 800af70:	e008      	b.n	800af84 <_printf_common+0xa8>
 800af72:	2301      	movs	r3, #1
 800af74:	4652      	mov	r2, sl
 800af76:	4649      	mov	r1, r9
 800af78:	4638      	mov	r0, r7
 800af7a:	47c0      	blx	r8
 800af7c:	3001      	adds	r0, #1
 800af7e:	d103      	bne.n	800af88 <_printf_common+0xac>
 800af80:	f04f 30ff 	mov.w	r0, #4294967295
 800af84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af88:	3501      	adds	r5, #1
 800af8a:	e7c6      	b.n	800af1a <_printf_common+0x3e>
 800af8c:	18e1      	adds	r1, r4, r3
 800af8e:	1c5a      	adds	r2, r3, #1
 800af90:	2030      	movs	r0, #48	; 0x30
 800af92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800af96:	4422      	add	r2, r4
 800af98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800af9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800afa0:	3302      	adds	r3, #2
 800afa2:	e7c7      	b.n	800af34 <_printf_common+0x58>
 800afa4:	2301      	movs	r3, #1
 800afa6:	4622      	mov	r2, r4
 800afa8:	4649      	mov	r1, r9
 800afaa:	4638      	mov	r0, r7
 800afac:	47c0      	blx	r8
 800afae:	3001      	adds	r0, #1
 800afb0:	d0e6      	beq.n	800af80 <_printf_common+0xa4>
 800afb2:	3601      	adds	r6, #1
 800afb4:	e7d9      	b.n	800af6a <_printf_common+0x8e>
	...

0800afb8 <_printf_i>:
 800afb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800afbc:	460c      	mov	r4, r1
 800afbe:	4691      	mov	r9, r2
 800afc0:	7e27      	ldrb	r7, [r4, #24]
 800afc2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800afc4:	2f78      	cmp	r7, #120	; 0x78
 800afc6:	4680      	mov	r8, r0
 800afc8:	469a      	mov	sl, r3
 800afca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800afce:	d807      	bhi.n	800afe0 <_printf_i+0x28>
 800afd0:	2f62      	cmp	r7, #98	; 0x62
 800afd2:	d80a      	bhi.n	800afea <_printf_i+0x32>
 800afd4:	2f00      	cmp	r7, #0
 800afd6:	f000 80d8 	beq.w	800b18a <_printf_i+0x1d2>
 800afda:	2f58      	cmp	r7, #88	; 0x58
 800afdc:	f000 80a3 	beq.w	800b126 <_printf_i+0x16e>
 800afe0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800afe4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800afe8:	e03a      	b.n	800b060 <_printf_i+0xa8>
 800afea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800afee:	2b15      	cmp	r3, #21
 800aff0:	d8f6      	bhi.n	800afe0 <_printf_i+0x28>
 800aff2:	a001      	add	r0, pc, #4	; (adr r0, 800aff8 <_printf_i+0x40>)
 800aff4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800aff8:	0800b051 	.word	0x0800b051
 800affc:	0800b065 	.word	0x0800b065
 800b000:	0800afe1 	.word	0x0800afe1
 800b004:	0800afe1 	.word	0x0800afe1
 800b008:	0800afe1 	.word	0x0800afe1
 800b00c:	0800afe1 	.word	0x0800afe1
 800b010:	0800b065 	.word	0x0800b065
 800b014:	0800afe1 	.word	0x0800afe1
 800b018:	0800afe1 	.word	0x0800afe1
 800b01c:	0800afe1 	.word	0x0800afe1
 800b020:	0800afe1 	.word	0x0800afe1
 800b024:	0800b171 	.word	0x0800b171
 800b028:	0800b095 	.word	0x0800b095
 800b02c:	0800b153 	.word	0x0800b153
 800b030:	0800afe1 	.word	0x0800afe1
 800b034:	0800afe1 	.word	0x0800afe1
 800b038:	0800b193 	.word	0x0800b193
 800b03c:	0800afe1 	.word	0x0800afe1
 800b040:	0800b095 	.word	0x0800b095
 800b044:	0800afe1 	.word	0x0800afe1
 800b048:	0800afe1 	.word	0x0800afe1
 800b04c:	0800b15b 	.word	0x0800b15b
 800b050:	680b      	ldr	r3, [r1, #0]
 800b052:	1d1a      	adds	r2, r3, #4
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	600a      	str	r2, [r1, #0]
 800b058:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b05c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b060:	2301      	movs	r3, #1
 800b062:	e0a3      	b.n	800b1ac <_printf_i+0x1f4>
 800b064:	6825      	ldr	r5, [r4, #0]
 800b066:	6808      	ldr	r0, [r1, #0]
 800b068:	062e      	lsls	r6, r5, #24
 800b06a:	f100 0304 	add.w	r3, r0, #4
 800b06e:	d50a      	bpl.n	800b086 <_printf_i+0xce>
 800b070:	6805      	ldr	r5, [r0, #0]
 800b072:	600b      	str	r3, [r1, #0]
 800b074:	2d00      	cmp	r5, #0
 800b076:	da03      	bge.n	800b080 <_printf_i+0xc8>
 800b078:	232d      	movs	r3, #45	; 0x2d
 800b07a:	426d      	negs	r5, r5
 800b07c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b080:	485e      	ldr	r0, [pc, #376]	; (800b1fc <_printf_i+0x244>)
 800b082:	230a      	movs	r3, #10
 800b084:	e019      	b.n	800b0ba <_printf_i+0x102>
 800b086:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b08a:	6805      	ldr	r5, [r0, #0]
 800b08c:	600b      	str	r3, [r1, #0]
 800b08e:	bf18      	it	ne
 800b090:	b22d      	sxthne	r5, r5
 800b092:	e7ef      	b.n	800b074 <_printf_i+0xbc>
 800b094:	680b      	ldr	r3, [r1, #0]
 800b096:	6825      	ldr	r5, [r4, #0]
 800b098:	1d18      	adds	r0, r3, #4
 800b09a:	6008      	str	r0, [r1, #0]
 800b09c:	0628      	lsls	r0, r5, #24
 800b09e:	d501      	bpl.n	800b0a4 <_printf_i+0xec>
 800b0a0:	681d      	ldr	r5, [r3, #0]
 800b0a2:	e002      	b.n	800b0aa <_printf_i+0xf2>
 800b0a4:	0669      	lsls	r1, r5, #25
 800b0a6:	d5fb      	bpl.n	800b0a0 <_printf_i+0xe8>
 800b0a8:	881d      	ldrh	r5, [r3, #0]
 800b0aa:	4854      	ldr	r0, [pc, #336]	; (800b1fc <_printf_i+0x244>)
 800b0ac:	2f6f      	cmp	r7, #111	; 0x6f
 800b0ae:	bf0c      	ite	eq
 800b0b0:	2308      	moveq	r3, #8
 800b0b2:	230a      	movne	r3, #10
 800b0b4:	2100      	movs	r1, #0
 800b0b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b0ba:	6866      	ldr	r6, [r4, #4]
 800b0bc:	60a6      	str	r6, [r4, #8]
 800b0be:	2e00      	cmp	r6, #0
 800b0c0:	bfa2      	ittt	ge
 800b0c2:	6821      	ldrge	r1, [r4, #0]
 800b0c4:	f021 0104 	bicge.w	r1, r1, #4
 800b0c8:	6021      	strge	r1, [r4, #0]
 800b0ca:	b90d      	cbnz	r5, 800b0d0 <_printf_i+0x118>
 800b0cc:	2e00      	cmp	r6, #0
 800b0ce:	d04d      	beq.n	800b16c <_printf_i+0x1b4>
 800b0d0:	4616      	mov	r6, r2
 800b0d2:	fbb5 f1f3 	udiv	r1, r5, r3
 800b0d6:	fb03 5711 	mls	r7, r3, r1, r5
 800b0da:	5dc7      	ldrb	r7, [r0, r7]
 800b0dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b0e0:	462f      	mov	r7, r5
 800b0e2:	42bb      	cmp	r3, r7
 800b0e4:	460d      	mov	r5, r1
 800b0e6:	d9f4      	bls.n	800b0d2 <_printf_i+0x11a>
 800b0e8:	2b08      	cmp	r3, #8
 800b0ea:	d10b      	bne.n	800b104 <_printf_i+0x14c>
 800b0ec:	6823      	ldr	r3, [r4, #0]
 800b0ee:	07df      	lsls	r7, r3, #31
 800b0f0:	d508      	bpl.n	800b104 <_printf_i+0x14c>
 800b0f2:	6923      	ldr	r3, [r4, #16]
 800b0f4:	6861      	ldr	r1, [r4, #4]
 800b0f6:	4299      	cmp	r1, r3
 800b0f8:	bfde      	ittt	le
 800b0fa:	2330      	movle	r3, #48	; 0x30
 800b0fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b100:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b104:	1b92      	subs	r2, r2, r6
 800b106:	6122      	str	r2, [r4, #16]
 800b108:	f8cd a000 	str.w	sl, [sp]
 800b10c:	464b      	mov	r3, r9
 800b10e:	aa03      	add	r2, sp, #12
 800b110:	4621      	mov	r1, r4
 800b112:	4640      	mov	r0, r8
 800b114:	f7ff fee2 	bl	800aedc <_printf_common>
 800b118:	3001      	adds	r0, #1
 800b11a:	d14c      	bne.n	800b1b6 <_printf_i+0x1fe>
 800b11c:	f04f 30ff 	mov.w	r0, #4294967295
 800b120:	b004      	add	sp, #16
 800b122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b126:	4835      	ldr	r0, [pc, #212]	; (800b1fc <_printf_i+0x244>)
 800b128:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b12c:	6823      	ldr	r3, [r4, #0]
 800b12e:	680e      	ldr	r6, [r1, #0]
 800b130:	061f      	lsls	r7, r3, #24
 800b132:	f856 5b04 	ldr.w	r5, [r6], #4
 800b136:	600e      	str	r6, [r1, #0]
 800b138:	d514      	bpl.n	800b164 <_printf_i+0x1ac>
 800b13a:	07d9      	lsls	r1, r3, #31
 800b13c:	bf44      	itt	mi
 800b13e:	f043 0320 	orrmi.w	r3, r3, #32
 800b142:	6023      	strmi	r3, [r4, #0]
 800b144:	b91d      	cbnz	r5, 800b14e <_printf_i+0x196>
 800b146:	6823      	ldr	r3, [r4, #0]
 800b148:	f023 0320 	bic.w	r3, r3, #32
 800b14c:	6023      	str	r3, [r4, #0]
 800b14e:	2310      	movs	r3, #16
 800b150:	e7b0      	b.n	800b0b4 <_printf_i+0xfc>
 800b152:	6823      	ldr	r3, [r4, #0]
 800b154:	f043 0320 	orr.w	r3, r3, #32
 800b158:	6023      	str	r3, [r4, #0]
 800b15a:	2378      	movs	r3, #120	; 0x78
 800b15c:	4828      	ldr	r0, [pc, #160]	; (800b200 <_printf_i+0x248>)
 800b15e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b162:	e7e3      	b.n	800b12c <_printf_i+0x174>
 800b164:	065e      	lsls	r6, r3, #25
 800b166:	bf48      	it	mi
 800b168:	b2ad      	uxthmi	r5, r5
 800b16a:	e7e6      	b.n	800b13a <_printf_i+0x182>
 800b16c:	4616      	mov	r6, r2
 800b16e:	e7bb      	b.n	800b0e8 <_printf_i+0x130>
 800b170:	680b      	ldr	r3, [r1, #0]
 800b172:	6826      	ldr	r6, [r4, #0]
 800b174:	6960      	ldr	r0, [r4, #20]
 800b176:	1d1d      	adds	r5, r3, #4
 800b178:	600d      	str	r5, [r1, #0]
 800b17a:	0635      	lsls	r5, r6, #24
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	d501      	bpl.n	800b184 <_printf_i+0x1cc>
 800b180:	6018      	str	r0, [r3, #0]
 800b182:	e002      	b.n	800b18a <_printf_i+0x1d2>
 800b184:	0671      	lsls	r1, r6, #25
 800b186:	d5fb      	bpl.n	800b180 <_printf_i+0x1c8>
 800b188:	8018      	strh	r0, [r3, #0]
 800b18a:	2300      	movs	r3, #0
 800b18c:	6123      	str	r3, [r4, #16]
 800b18e:	4616      	mov	r6, r2
 800b190:	e7ba      	b.n	800b108 <_printf_i+0x150>
 800b192:	680b      	ldr	r3, [r1, #0]
 800b194:	1d1a      	adds	r2, r3, #4
 800b196:	600a      	str	r2, [r1, #0]
 800b198:	681e      	ldr	r6, [r3, #0]
 800b19a:	6862      	ldr	r2, [r4, #4]
 800b19c:	2100      	movs	r1, #0
 800b19e:	4630      	mov	r0, r6
 800b1a0:	f7f5 f826 	bl	80001f0 <memchr>
 800b1a4:	b108      	cbz	r0, 800b1aa <_printf_i+0x1f2>
 800b1a6:	1b80      	subs	r0, r0, r6
 800b1a8:	6060      	str	r0, [r4, #4]
 800b1aa:	6863      	ldr	r3, [r4, #4]
 800b1ac:	6123      	str	r3, [r4, #16]
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b1b4:	e7a8      	b.n	800b108 <_printf_i+0x150>
 800b1b6:	6923      	ldr	r3, [r4, #16]
 800b1b8:	4632      	mov	r2, r6
 800b1ba:	4649      	mov	r1, r9
 800b1bc:	4640      	mov	r0, r8
 800b1be:	47d0      	blx	sl
 800b1c0:	3001      	adds	r0, #1
 800b1c2:	d0ab      	beq.n	800b11c <_printf_i+0x164>
 800b1c4:	6823      	ldr	r3, [r4, #0]
 800b1c6:	079b      	lsls	r3, r3, #30
 800b1c8:	d413      	bmi.n	800b1f2 <_printf_i+0x23a>
 800b1ca:	68e0      	ldr	r0, [r4, #12]
 800b1cc:	9b03      	ldr	r3, [sp, #12]
 800b1ce:	4298      	cmp	r0, r3
 800b1d0:	bfb8      	it	lt
 800b1d2:	4618      	movlt	r0, r3
 800b1d4:	e7a4      	b.n	800b120 <_printf_i+0x168>
 800b1d6:	2301      	movs	r3, #1
 800b1d8:	4632      	mov	r2, r6
 800b1da:	4649      	mov	r1, r9
 800b1dc:	4640      	mov	r0, r8
 800b1de:	47d0      	blx	sl
 800b1e0:	3001      	adds	r0, #1
 800b1e2:	d09b      	beq.n	800b11c <_printf_i+0x164>
 800b1e4:	3501      	adds	r5, #1
 800b1e6:	68e3      	ldr	r3, [r4, #12]
 800b1e8:	9903      	ldr	r1, [sp, #12]
 800b1ea:	1a5b      	subs	r3, r3, r1
 800b1ec:	42ab      	cmp	r3, r5
 800b1ee:	dcf2      	bgt.n	800b1d6 <_printf_i+0x21e>
 800b1f0:	e7eb      	b.n	800b1ca <_printf_i+0x212>
 800b1f2:	2500      	movs	r5, #0
 800b1f4:	f104 0619 	add.w	r6, r4, #25
 800b1f8:	e7f5      	b.n	800b1e6 <_printf_i+0x22e>
 800b1fa:	bf00      	nop
 800b1fc:	0800f606 	.word	0x0800f606
 800b200:	0800f617 	.word	0x0800f617

0800b204 <siprintf>:
 800b204:	b40e      	push	{r1, r2, r3}
 800b206:	b500      	push	{lr}
 800b208:	b09c      	sub	sp, #112	; 0x70
 800b20a:	ab1d      	add	r3, sp, #116	; 0x74
 800b20c:	9002      	str	r0, [sp, #8]
 800b20e:	9006      	str	r0, [sp, #24]
 800b210:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b214:	4809      	ldr	r0, [pc, #36]	; (800b23c <siprintf+0x38>)
 800b216:	9107      	str	r1, [sp, #28]
 800b218:	9104      	str	r1, [sp, #16]
 800b21a:	4909      	ldr	r1, [pc, #36]	; (800b240 <siprintf+0x3c>)
 800b21c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b220:	9105      	str	r1, [sp, #20]
 800b222:	6800      	ldr	r0, [r0, #0]
 800b224:	9301      	str	r3, [sp, #4]
 800b226:	a902      	add	r1, sp, #8
 800b228:	f003 f89a 	bl	800e360 <_svfiprintf_r>
 800b22c:	9b02      	ldr	r3, [sp, #8]
 800b22e:	2200      	movs	r2, #0
 800b230:	701a      	strb	r2, [r3, #0]
 800b232:	b01c      	add	sp, #112	; 0x70
 800b234:	f85d eb04 	ldr.w	lr, [sp], #4
 800b238:	b003      	add	sp, #12
 800b23a:	4770      	bx	lr
 800b23c:	20000060 	.word	0x20000060
 800b240:	ffff0208 	.word	0xffff0208

0800b244 <strcat>:
 800b244:	b510      	push	{r4, lr}
 800b246:	4602      	mov	r2, r0
 800b248:	7814      	ldrb	r4, [r2, #0]
 800b24a:	4613      	mov	r3, r2
 800b24c:	3201      	adds	r2, #1
 800b24e:	2c00      	cmp	r4, #0
 800b250:	d1fa      	bne.n	800b248 <strcat+0x4>
 800b252:	3b01      	subs	r3, #1
 800b254:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b258:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b25c:	2a00      	cmp	r2, #0
 800b25e:	d1f9      	bne.n	800b254 <strcat+0x10>
 800b260:	bd10      	pop	{r4, pc}

0800b262 <strcpy>:
 800b262:	4603      	mov	r3, r0
 800b264:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b268:	f803 2b01 	strb.w	r2, [r3], #1
 800b26c:	2a00      	cmp	r2, #0
 800b26e:	d1f9      	bne.n	800b264 <strcpy+0x2>
 800b270:	4770      	bx	lr

0800b272 <sulp>:
 800b272:	b570      	push	{r4, r5, r6, lr}
 800b274:	4604      	mov	r4, r0
 800b276:	460d      	mov	r5, r1
 800b278:	ec45 4b10 	vmov	d0, r4, r5
 800b27c:	4616      	mov	r6, r2
 800b27e:	f002 fe0b 	bl	800de98 <__ulp>
 800b282:	ec51 0b10 	vmov	r0, r1, d0
 800b286:	b17e      	cbz	r6, 800b2a8 <sulp+0x36>
 800b288:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b28c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b290:	2b00      	cmp	r3, #0
 800b292:	dd09      	ble.n	800b2a8 <sulp+0x36>
 800b294:	051b      	lsls	r3, r3, #20
 800b296:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b29a:	2400      	movs	r4, #0
 800b29c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b2a0:	4622      	mov	r2, r4
 800b2a2:	462b      	mov	r3, r5
 800b2a4:	f7f5 f9b0 	bl	8000608 <__aeabi_dmul>
 800b2a8:	bd70      	pop	{r4, r5, r6, pc}
 800b2aa:	0000      	movs	r0, r0
 800b2ac:	0000      	movs	r0, r0
	...

0800b2b0 <_strtod_l>:
 800b2b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2b4:	b0a3      	sub	sp, #140	; 0x8c
 800b2b6:	461f      	mov	r7, r3
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	931e      	str	r3, [sp, #120]	; 0x78
 800b2bc:	4ba4      	ldr	r3, [pc, #656]	; (800b550 <_strtod_l+0x2a0>)
 800b2be:	9219      	str	r2, [sp, #100]	; 0x64
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	9307      	str	r3, [sp, #28]
 800b2c4:	4604      	mov	r4, r0
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	4688      	mov	r8, r1
 800b2ca:	f7f4 ff89 	bl	80001e0 <strlen>
 800b2ce:	f04f 0a00 	mov.w	sl, #0
 800b2d2:	4605      	mov	r5, r0
 800b2d4:	f04f 0b00 	mov.w	fp, #0
 800b2d8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800b2dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b2de:	781a      	ldrb	r2, [r3, #0]
 800b2e0:	2a2b      	cmp	r2, #43	; 0x2b
 800b2e2:	d04c      	beq.n	800b37e <_strtod_l+0xce>
 800b2e4:	d839      	bhi.n	800b35a <_strtod_l+0xaa>
 800b2e6:	2a0d      	cmp	r2, #13
 800b2e8:	d832      	bhi.n	800b350 <_strtod_l+0xa0>
 800b2ea:	2a08      	cmp	r2, #8
 800b2ec:	d832      	bhi.n	800b354 <_strtod_l+0xa4>
 800b2ee:	2a00      	cmp	r2, #0
 800b2f0:	d03c      	beq.n	800b36c <_strtod_l+0xbc>
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	930e      	str	r3, [sp, #56]	; 0x38
 800b2f6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800b2f8:	7833      	ldrb	r3, [r6, #0]
 800b2fa:	2b30      	cmp	r3, #48	; 0x30
 800b2fc:	f040 80b4 	bne.w	800b468 <_strtod_l+0x1b8>
 800b300:	7873      	ldrb	r3, [r6, #1]
 800b302:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b306:	2b58      	cmp	r3, #88	; 0x58
 800b308:	d16c      	bne.n	800b3e4 <_strtod_l+0x134>
 800b30a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b30c:	9301      	str	r3, [sp, #4]
 800b30e:	ab1e      	add	r3, sp, #120	; 0x78
 800b310:	9702      	str	r7, [sp, #8]
 800b312:	9300      	str	r3, [sp, #0]
 800b314:	4a8f      	ldr	r2, [pc, #572]	; (800b554 <_strtod_l+0x2a4>)
 800b316:	ab1f      	add	r3, sp, #124	; 0x7c
 800b318:	a91d      	add	r1, sp, #116	; 0x74
 800b31a:	4620      	mov	r0, r4
 800b31c:	f001 ff26 	bl	800d16c <__gethex>
 800b320:	f010 0707 	ands.w	r7, r0, #7
 800b324:	4605      	mov	r5, r0
 800b326:	d005      	beq.n	800b334 <_strtod_l+0x84>
 800b328:	2f06      	cmp	r7, #6
 800b32a:	d12a      	bne.n	800b382 <_strtod_l+0xd2>
 800b32c:	3601      	adds	r6, #1
 800b32e:	2300      	movs	r3, #0
 800b330:	961d      	str	r6, [sp, #116]	; 0x74
 800b332:	930e      	str	r3, [sp, #56]	; 0x38
 800b334:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b336:	2b00      	cmp	r3, #0
 800b338:	f040 8596 	bne.w	800be68 <_strtod_l+0xbb8>
 800b33c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b33e:	b1db      	cbz	r3, 800b378 <_strtod_l+0xc8>
 800b340:	4652      	mov	r2, sl
 800b342:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b346:	ec43 2b10 	vmov	d0, r2, r3
 800b34a:	b023      	add	sp, #140	; 0x8c
 800b34c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b350:	2a20      	cmp	r2, #32
 800b352:	d1ce      	bne.n	800b2f2 <_strtod_l+0x42>
 800b354:	3301      	adds	r3, #1
 800b356:	931d      	str	r3, [sp, #116]	; 0x74
 800b358:	e7c0      	b.n	800b2dc <_strtod_l+0x2c>
 800b35a:	2a2d      	cmp	r2, #45	; 0x2d
 800b35c:	d1c9      	bne.n	800b2f2 <_strtod_l+0x42>
 800b35e:	2201      	movs	r2, #1
 800b360:	920e      	str	r2, [sp, #56]	; 0x38
 800b362:	1c5a      	adds	r2, r3, #1
 800b364:	921d      	str	r2, [sp, #116]	; 0x74
 800b366:	785b      	ldrb	r3, [r3, #1]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d1c4      	bne.n	800b2f6 <_strtod_l+0x46>
 800b36c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b36e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800b372:	2b00      	cmp	r3, #0
 800b374:	f040 8576 	bne.w	800be64 <_strtod_l+0xbb4>
 800b378:	4652      	mov	r2, sl
 800b37a:	465b      	mov	r3, fp
 800b37c:	e7e3      	b.n	800b346 <_strtod_l+0x96>
 800b37e:	2200      	movs	r2, #0
 800b380:	e7ee      	b.n	800b360 <_strtod_l+0xb0>
 800b382:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b384:	b13a      	cbz	r2, 800b396 <_strtod_l+0xe6>
 800b386:	2135      	movs	r1, #53	; 0x35
 800b388:	a820      	add	r0, sp, #128	; 0x80
 800b38a:	f002 fe90 	bl	800e0ae <__copybits>
 800b38e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b390:	4620      	mov	r0, r4
 800b392:	f002 fa55 	bl	800d840 <_Bfree>
 800b396:	3f01      	subs	r7, #1
 800b398:	2f05      	cmp	r7, #5
 800b39a:	d807      	bhi.n	800b3ac <_strtod_l+0xfc>
 800b39c:	e8df f007 	tbb	[pc, r7]
 800b3a0:	1d180b0e 	.word	0x1d180b0e
 800b3a4:	030e      	.short	0x030e
 800b3a6:	f04f 0b00 	mov.w	fp, #0
 800b3aa:	46da      	mov	sl, fp
 800b3ac:	0728      	lsls	r0, r5, #28
 800b3ae:	d5c1      	bpl.n	800b334 <_strtod_l+0x84>
 800b3b0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800b3b4:	e7be      	b.n	800b334 <_strtod_l+0x84>
 800b3b6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800b3ba:	e7f7      	b.n	800b3ac <_strtod_l+0xfc>
 800b3bc:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800b3c0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800b3c2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b3c6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b3ca:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b3ce:	e7ed      	b.n	800b3ac <_strtod_l+0xfc>
 800b3d0:	f8df b184 	ldr.w	fp, [pc, #388]	; 800b558 <_strtod_l+0x2a8>
 800b3d4:	f04f 0a00 	mov.w	sl, #0
 800b3d8:	e7e8      	b.n	800b3ac <_strtod_l+0xfc>
 800b3da:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800b3de:	f04f 3aff 	mov.w	sl, #4294967295
 800b3e2:	e7e3      	b.n	800b3ac <_strtod_l+0xfc>
 800b3e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b3e6:	1c5a      	adds	r2, r3, #1
 800b3e8:	921d      	str	r2, [sp, #116]	; 0x74
 800b3ea:	785b      	ldrb	r3, [r3, #1]
 800b3ec:	2b30      	cmp	r3, #48	; 0x30
 800b3ee:	d0f9      	beq.n	800b3e4 <_strtod_l+0x134>
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d09f      	beq.n	800b334 <_strtod_l+0x84>
 800b3f4:	2301      	movs	r3, #1
 800b3f6:	f04f 0900 	mov.w	r9, #0
 800b3fa:	9304      	str	r3, [sp, #16]
 800b3fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b3fe:	930a      	str	r3, [sp, #40]	; 0x28
 800b400:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800b404:	464f      	mov	r7, r9
 800b406:	220a      	movs	r2, #10
 800b408:	981d      	ldr	r0, [sp, #116]	; 0x74
 800b40a:	7806      	ldrb	r6, [r0, #0]
 800b40c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b410:	b2d9      	uxtb	r1, r3
 800b412:	2909      	cmp	r1, #9
 800b414:	d92a      	bls.n	800b46c <_strtod_l+0x1bc>
 800b416:	9907      	ldr	r1, [sp, #28]
 800b418:	462a      	mov	r2, r5
 800b41a:	f003 fa5e 	bl	800e8da <strncmp>
 800b41e:	b398      	cbz	r0, 800b488 <_strtod_l+0x1d8>
 800b420:	2000      	movs	r0, #0
 800b422:	4633      	mov	r3, r6
 800b424:	463d      	mov	r5, r7
 800b426:	9007      	str	r0, [sp, #28]
 800b428:	4602      	mov	r2, r0
 800b42a:	2b65      	cmp	r3, #101	; 0x65
 800b42c:	d001      	beq.n	800b432 <_strtod_l+0x182>
 800b42e:	2b45      	cmp	r3, #69	; 0x45
 800b430:	d118      	bne.n	800b464 <_strtod_l+0x1b4>
 800b432:	b91d      	cbnz	r5, 800b43c <_strtod_l+0x18c>
 800b434:	9b04      	ldr	r3, [sp, #16]
 800b436:	4303      	orrs	r3, r0
 800b438:	d098      	beq.n	800b36c <_strtod_l+0xbc>
 800b43a:	2500      	movs	r5, #0
 800b43c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800b440:	f108 0301 	add.w	r3, r8, #1
 800b444:	931d      	str	r3, [sp, #116]	; 0x74
 800b446:	f898 3001 	ldrb.w	r3, [r8, #1]
 800b44a:	2b2b      	cmp	r3, #43	; 0x2b
 800b44c:	d075      	beq.n	800b53a <_strtod_l+0x28a>
 800b44e:	2b2d      	cmp	r3, #45	; 0x2d
 800b450:	d07b      	beq.n	800b54a <_strtod_l+0x29a>
 800b452:	f04f 0c00 	mov.w	ip, #0
 800b456:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800b45a:	2909      	cmp	r1, #9
 800b45c:	f240 8082 	bls.w	800b564 <_strtod_l+0x2b4>
 800b460:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800b464:	2600      	movs	r6, #0
 800b466:	e09d      	b.n	800b5a4 <_strtod_l+0x2f4>
 800b468:	2300      	movs	r3, #0
 800b46a:	e7c4      	b.n	800b3f6 <_strtod_l+0x146>
 800b46c:	2f08      	cmp	r7, #8
 800b46e:	bfd8      	it	le
 800b470:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800b472:	f100 0001 	add.w	r0, r0, #1
 800b476:	bfda      	itte	le
 800b478:	fb02 3301 	mlale	r3, r2, r1, r3
 800b47c:	9309      	strle	r3, [sp, #36]	; 0x24
 800b47e:	fb02 3909 	mlagt	r9, r2, r9, r3
 800b482:	3701      	adds	r7, #1
 800b484:	901d      	str	r0, [sp, #116]	; 0x74
 800b486:	e7bf      	b.n	800b408 <_strtod_l+0x158>
 800b488:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b48a:	195a      	adds	r2, r3, r5
 800b48c:	921d      	str	r2, [sp, #116]	; 0x74
 800b48e:	5d5b      	ldrb	r3, [r3, r5]
 800b490:	2f00      	cmp	r7, #0
 800b492:	d037      	beq.n	800b504 <_strtod_l+0x254>
 800b494:	9007      	str	r0, [sp, #28]
 800b496:	463d      	mov	r5, r7
 800b498:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800b49c:	2a09      	cmp	r2, #9
 800b49e:	d912      	bls.n	800b4c6 <_strtod_l+0x216>
 800b4a0:	2201      	movs	r2, #1
 800b4a2:	e7c2      	b.n	800b42a <_strtod_l+0x17a>
 800b4a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b4a6:	1c5a      	adds	r2, r3, #1
 800b4a8:	921d      	str	r2, [sp, #116]	; 0x74
 800b4aa:	785b      	ldrb	r3, [r3, #1]
 800b4ac:	3001      	adds	r0, #1
 800b4ae:	2b30      	cmp	r3, #48	; 0x30
 800b4b0:	d0f8      	beq.n	800b4a4 <_strtod_l+0x1f4>
 800b4b2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800b4b6:	2a08      	cmp	r2, #8
 800b4b8:	f200 84db 	bhi.w	800be72 <_strtod_l+0xbc2>
 800b4bc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800b4be:	9007      	str	r0, [sp, #28]
 800b4c0:	2000      	movs	r0, #0
 800b4c2:	920a      	str	r2, [sp, #40]	; 0x28
 800b4c4:	4605      	mov	r5, r0
 800b4c6:	3b30      	subs	r3, #48	; 0x30
 800b4c8:	f100 0201 	add.w	r2, r0, #1
 800b4cc:	d014      	beq.n	800b4f8 <_strtod_l+0x248>
 800b4ce:	9907      	ldr	r1, [sp, #28]
 800b4d0:	4411      	add	r1, r2
 800b4d2:	9107      	str	r1, [sp, #28]
 800b4d4:	462a      	mov	r2, r5
 800b4d6:	eb00 0e05 	add.w	lr, r0, r5
 800b4da:	210a      	movs	r1, #10
 800b4dc:	4572      	cmp	r2, lr
 800b4de:	d113      	bne.n	800b508 <_strtod_l+0x258>
 800b4e0:	182a      	adds	r2, r5, r0
 800b4e2:	2a08      	cmp	r2, #8
 800b4e4:	f105 0501 	add.w	r5, r5, #1
 800b4e8:	4405      	add	r5, r0
 800b4ea:	dc1c      	bgt.n	800b526 <_strtod_l+0x276>
 800b4ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b4ee:	220a      	movs	r2, #10
 800b4f0:	fb02 3301 	mla	r3, r2, r1, r3
 800b4f4:	9309      	str	r3, [sp, #36]	; 0x24
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b4fa:	1c59      	adds	r1, r3, #1
 800b4fc:	911d      	str	r1, [sp, #116]	; 0x74
 800b4fe:	785b      	ldrb	r3, [r3, #1]
 800b500:	4610      	mov	r0, r2
 800b502:	e7c9      	b.n	800b498 <_strtod_l+0x1e8>
 800b504:	4638      	mov	r0, r7
 800b506:	e7d2      	b.n	800b4ae <_strtod_l+0x1fe>
 800b508:	2a08      	cmp	r2, #8
 800b50a:	dc04      	bgt.n	800b516 <_strtod_l+0x266>
 800b50c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b50e:	434e      	muls	r6, r1
 800b510:	9609      	str	r6, [sp, #36]	; 0x24
 800b512:	3201      	adds	r2, #1
 800b514:	e7e2      	b.n	800b4dc <_strtod_l+0x22c>
 800b516:	f102 0c01 	add.w	ip, r2, #1
 800b51a:	f1bc 0f10 	cmp.w	ip, #16
 800b51e:	bfd8      	it	le
 800b520:	fb01 f909 	mulle.w	r9, r1, r9
 800b524:	e7f5      	b.n	800b512 <_strtod_l+0x262>
 800b526:	2d10      	cmp	r5, #16
 800b528:	bfdc      	itt	le
 800b52a:	220a      	movle	r2, #10
 800b52c:	fb02 3909 	mlale	r9, r2, r9, r3
 800b530:	e7e1      	b.n	800b4f6 <_strtod_l+0x246>
 800b532:	2300      	movs	r3, #0
 800b534:	9307      	str	r3, [sp, #28]
 800b536:	2201      	movs	r2, #1
 800b538:	e77c      	b.n	800b434 <_strtod_l+0x184>
 800b53a:	f04f 0c00 	mov.w	ip, #0
 800b53e:	f108 0302 	add.w	r3, r8, #2
 800b542:	931d      	str	r3, [sp, #116]	; 0x74
 800b544:	f898 3002 	ldrb.w	r3, [r8, #2]
 800b548:	e785      	b.n	800b456 <_strtod_l+0x1a6>
 800b54a:	f04f 0c01 	mov.w	ip, #1
 800b54e:	e7f6      	b.n	800b53e <_strtod_l+0x28e>
 800b550:	0800f978 	.word	0x0800f978
 800b554:	0800f628 	.word	0x0800f628
 800b558:	7ff00000 	.word	0x7ff00000
 800b55c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b55e:	1c59      	adds	r1, r3, #1
 800b560:	911d      	str	r1, [sp, #116]	; 0x74
 800b562:	785b      	ldrb	r3, [r3, #1]
 800b564:	2b30      	cmp	r3, #48	; 0x30
 800b566:	d0f9      	beq.n	800b55c <_strtod_l+0x2ac>
 800b568:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800b56c:	2908      	cmp	r1, #8
 800b56e:	f63f af79 	bhi.w	800b464 <_strtod_l+0x1b4>
 800b572:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800b576:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b578:	9308      	str	r3, [sp, #32]
 800b57a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b57c:	1c59      	adds	r1, r3, #1
 800b57e:	911d      	str	r1, [sp, #116]	; 0x74
 800b580:	785b      	ldrb	r3, [r3, #1]
 800b582:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800b586:	2e09      	cmp	r6, #9
 800b588:	d937      	bls.n	800b5fa <_strtod_l+0x34a>
 800b58a:	9e08      	ldr	r6, [sp, #32]
 800b58c:	1b89      	subs	r1, r1, r6
 800b58e:	2908      	cmp	r1, #8
 800b590:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800b594:	dc02      	bgt.n	800b59c <_strtod_l+0x2ec>
 800b596:	4576      	cmp	r6, lr
 800b598:	bfa8      	it	ge
 800b59a:	4676      	movge	r6, lr
 800b59c:	f1bc 0f00 	cmp.w	ip, #0
 800b5a0:	d000      	beq.n	800b5a4 <_strtod_l+0x2f4>
 800b5a2:	4276      	negs	r6, r6
 800b5a4:	2d00      	cmp	r5, #0
 800b5a6:	d14f      	bne.n	800b648 <_strtod_l+0x398>
 800b5a8:	9904      	ldr	r1, [sp, #16]
 800b5aa:	4301      	orrs	r1, r0
 800b5ac:	f47f aec2 	bne.w	800b334 <_strtod_l+0x84>
 800b5b0:	2a00      	cmp	r2, #0
 800b5b2:	f47f aedb 	bne.w	800b36c <_strtod_l+0xbc>
 800b5b6:	2b69      	cmp	r3, #105	; 0x69
 800b5b8:	d027      	beq.n	800b60a <_strtod_l+0x35a>
 800b5ba:	dc24      	bgt.n	800b606 <_strtod_l+0x356>
 800b5bc:	2b49      	cmp	r3, #73	; 0x49
 800b5be:	d024      	beq.n	800b60a <_strtod_l+0x35a>
 800b5c0:	2b4e      	cmp	r3, #78	; 0x4e
 800b5c2:	f47f aed3 	bne.w	800b36c <_strtod_l+0xbc>
 800b5c6:	499e      	ldr	r1, [pc, #632]	; (800b840 <_strtod_l+0x590>)
 800b5c8:	a81d      	add	r0, sp, #116	; 0x74
 800b5ca:	f002 f827 	bl	800d61c <__match>
 800b5ce:	2800      	cmp	r0, #0
 800b5d0:	f43f aecc 	beq.w	800b36c <_strtod_l+0xbc>
 800b5d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b5d6:	781b      	ldrb	r3, [r3, #0]
 800b5d8:	2b28      	cmp	r3, #40	; 0x28
 800b5da:	d12d      	bne.n	800b638 <_strtod_l+0x388>
 800b5dc:	4999      	ldr	r1, [pc, #612]	; (800b844 <_strtod_l+0x594>)
 800b5de:	aa20      	add	r2, sp, #128	; 0x80
 800b5e0:	a81d      	add	r0, sp, #116	; 0x74
 800b5e2:	f002 f82f 	bl	800d644 <__hexnan>
 800b5e6:	2805      	cmp	r0, #5
 800b5e8:	d126      	bne.n	800b638 <_strtod_l+0x388>
 800b5ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b5ec:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800b5f0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800b5f4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800b5f8:	e69c      	b.n	800b334 <_strtod_l+0x84>
 800b5fa:	210a      	movs	r1, #10
 800b5fc:	fb01 3e0e 	mla	lr, r1, lr, r3
 800b600:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800b604:	e7b9      	b.n	800b57a <_strtod_l+0x2ca>
 800b606:	2b6e      	cmp	r3, #110	; 0x6e
 800b608:	e7db      	b.n	800b5c2 <_strtod_l+0x312>
 800b60a:	498f      	ldr	r1, [pc, #572]	; (800b848 <_strtod_l+0x598>)
 800b60c:	a81d      	add	r0, sp, #116	; 0x74
 800b60e:	f002 f805 	bl	800d61c <__match>
 800b612:	2800      	cmp	r0, #0
 800b614:	f43f aeaa 	beq.w	800b36c <_strtod_l+0xbc>
 800b618:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b61a:	498c      	ldr	r1, [pc, #560]	; (800b84c <_strtod_l+0x59c>)
 800b61c:	3b01      	subs	r3, #1
 800b61e:	a81d      	add	r0, sp, #116	; 0x74
 800b620:	931d      	str	r3, [sp, #116]	; 0x74
 800b622:	f001 fffb 	bl	800d61c <__match>
 800b626:	b910      	cbnz	r0, 800b62e <_strtod_l+0x37e>
 800b628:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b62a:	3301      	adds	r3, #1
 800b62c:	931d      	str	r3, [sp, #116]	; 0x74
 800b62e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800b85c <_strtod_l+0x5ac>
 800b632:	f04f 0a00 	mov.w	sl, #0
 800b636:	e67d      	b.n	800b334 <_strtod_l+0x84>
 800b638:	4885      	ldr	r0, [pc, #532]	; (800b850 <_strtod_l+0x5a0>)
 800b63a:	f003 f8ed 	bl	800e818 <nan>
 800b63e:	ed8d 0b04 	vstr	d0, [sp, #16]
 800b642:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800b646:	e675      	b.n	800b334 <_strtod_l+0x84>
 800b648:	9b07      	ldr	r3, [sp, #28]
 800b64a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b64c:	1af3      	subs	r3, r6, r3
 800b64e:	2f00      	cmp	r7, #0
 800b650:	bf08      	it	eq
 800b652:	462f      	moveq	r7, r5
 800b654:	2d10      	cmp	r5, #16
 800b656:	9308      	str	r3, [sp, #32]
 800b658:	46a8      	mov	r8, r5
 800b65a:	bfa8      	it	ge
 800b65c:	f04f 0810 	movge.w	r8, #16
 800b660:	f7f4 ff58 	bl	8000514 <__aeabi_ui2d>
 800b664:	2d09      	cmp	r5, #9
 800b666:	4682      	mov	sl, r0
 800b668:	468b      	mov	fp, r1
 800b66a:	dd13      	ble.n	800b694 <_strtod_l+0x3e4>
 800b66c:	4b79      	ldr	r3, [pc, #484]	; (800b854 <_strtod_l+0x5a4>)
 800b66e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b672:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b676:	f7f4 ffc7 	bl	8000608 <__aeabi_dmul>
 800b67a:	4682      	mov	sl, r0
 800b67c:	4648      	mov	r0, r9
 800b67e:	468b      	mov	fp, r1
 800b680:	f7f4 ff48 	bl	8000514 <__aeabi_ui2d>
 800b684:	4602      	mov	r2, r0
 800b686:	460b      	mov	r3, r1
 800b688:	4650      	mov	r0, sl
 800b68a:	4659      	mov	r1, fp
 800b68c:	f7f4 fe06 	bl	800029c <__adddf3>
 800b690:	4682      	mov	sl, r0
 800b692:	468b      	mov	fp, r1
 800b694:	2d0f      	cmp	r5, #15
 800b696:	dc38      	bgt.n	800b70a <_strtod_l+0x45a>
 800b698:	9b08      	ldr	r3, [sp, #32]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	f43f ae4a 	beq.w	800b334 <_strtod_l+0x84>
 800b6a0:	dd24      	ble.n	800b6ec <_strtod_l+0x43c>
 800b6a2:	2b16      	cmp	r3, #22
 800b6a4:	dc0b      	bgt.n	800b6be <_strtod_l+0x40e>
 800b6a6:	4d6b      	ldr	r5, [pc, #428]	; (800b854 <_strtod_l+0x5a4>)
 800b6a8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800b6ac:	e9d5 0100 	ldrd	r0, r1, [r5]
 800b6b0:	4652      	mov	r2, sl
 800b6b2:	465b      	mov	r3, fp
 800b6b4:	f7f4 ffa8 	bl	8000608 <__aeabi_dmul>
 800b6b8:	4682      	mov	sl, r0
 800b6ba:	468b      	mov	fp, r1
 800b6bc:	e63a      	b.n	800b334 <_strtod_l+0x84>
 800b6be:	9a08      	ldr	r2, [sp, #32]
 800b6c0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800b6c4:	4293      	cmp	r3, r2
 800b6c6:	db20      	blt.n	800b70a <_strtod_l+0x45a>
 800b6c8:	4c62      	ldr	r4, [pc, #392]	; (800b854 <_strtod_l+0x5a4>)
 800b6ca:	f1c5 050f 	rsb	r5, r5, #15
 800b6ce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b6d2:	4652      	mov	r2, sl
 800b6d4:	465b      	mov	r3, fp
 800b6d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b6da:	f7f4 ff95 	bl	8000608 <__aeabi_dmul>
 800b6de:	9b08      	ldr	r3, [sp, #32]
 800b6e0:	1b5d      	subs	r5, r3, r5
 800b6e2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b6e6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b6ea:	e7e3      	b.n	800b6b4 <_strtod_l+0x404>
 800b6ec:	9b08      	ldr	r3, [sp, #32]
 800b6ee:	3316      	adds	r3, #22
 800b6f0:	db0b      	blt.n	800b70a <_strtod_l+0x45a>
 800b6f2:	9b07      	ldr	r3, [sp, #28]
 800b6f4:	4a57      	ldr	r2, [pc, #348]	; (800b854 <_strtod_l+0x5a4>)
 800b6f6:	1b9e      	subs	r6, r3, r6
 800b6f8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800b6fc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b700:	4650      	mov	r0, sl
 800b702:	4659      	mov	r1, fp
 800b704:	f7f5 f8aa 	bl	800085c <__aeabi_ddiv>
 800b708:	e7d6      	b.n	800b6b8 <_strtod_l+0x408>
 800b70a:	9b08      	ldr	r3, [sp, #32]
 800b70c:	eba5 0808 	sub.w	r8, r5, r8
 800b710:	4498      	add	r8, r3
 800b712:	f1b8 0f00 	cmp.w	r8, #0
 800b716:	dd71      	ble.n	800b7fc <_strtod_l+0x54c>
 800b718:	f018 030f 	ands.w	r3, r8, #15
 800b71c:	d00a      	beq.n	800b734 <_strtod_l+0x484>
 800b71e:	494d      	ldr	r1, [pc, #308]	; (800b854 <_strtod_l+0x5a4>)
 800b720:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b724:	4652      	mov	r2, sl
 800b726:	465b      	mov	r3, fp
 800b728:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b72c:	f7f4 ff6c 	bl	8000608 <__aeabi_dmul>
 800b730:	4682      	mov	sl, r0
 800b732:	468b      	mov	fp, r1
 800b734:	f038 080f 	bics.w	r8, r8, #15
 800b738:	d04d      	beq.n	800b7d6 <_strtod_l+0x526>
 800b73a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800b73e:	dd22      	ble.n	800b786 <_strtod_l+0x4d6>
 800b740:	2500      	movs	r5, #0
 800b742:	462e      	mov	r6, r5
 800b744:	9509      	str	r5, [sp, #36]	; 0x24
 800b746:	9507      	str	r5, [sp, #28]
 800b748:	2322      	movs	r3, #34	; 0x22
 800b74a:	f8df b110 	ldr.w	fp, [pc, #272]	; 800b85c <_strtod_l+0x5ac>
 800b74e:	6023      	str	r3, [r4, #0]
 800b750:	f04f 0a00 	mov.w	sl, #0
 800b754:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b756:	2b00      	cmp	r3, #0
 800b758:	f43f adec 	beq.w	800b334 <_strtod_l+0x84>
 800b75c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800b75e:	4620      	mov	r0, r4
 800b760:	f002 f86e 	bl	800d840 <_Bfree>
 800b764:	9907      	ldr	r1, [sp, #28]
 800b766:	4620      	mov	r0, r4
 800b768:	f002 f86a 	bl	800d840 <_Bfree>
 800b76c:	4631      	mov	r1, r6
 800b76e:	4620      	mov	r0, r4
 800b770:	f002 f866 	bl	800d840 <_Bfree>
 800b774:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b776:	4620      	mov	r0, r4
 800b778:	f002 f862 	bl	800d840 <_Bfree>
 800b77c:	4629      	mov	r1, r5
 800b77e:	4620      	mov	r0, r4
 800b780:	f002 f85e 	bl	800d840 <_Bfree>
 800b784:	e5d6      	b.n	800b334 <_strtod_l+0x84>
 800b786:	2300      	movs	r3, #0
 800b788:	ea4f 1828 	mov.w	r8, r8, asr #4
 800b78c:	4650      	mov	r0, sl
 800b78e:	4659      	mov	r1, fp
 800b790:	4699      	mov	r9, r3
 800b792:	f1b8 0f01 	cmp.w	r8, #1
 800b796:	dc21      	bgt.n	800b7dc <_strtod_l+0x52c>
 800b798:	b10b      	cbz	r3, 800b79e <_strtod_l+0x4ee>
 800b79a:	4682      	mov	sl, r0
 800b79c:	468b      	mov	fp, r1
 800b79e:	4b2e      	ldr	r3, [pc, #184]	; (800b858 <_strtod_l+0x5a8>)
 800b7a0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800b7a4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800b7a8:	4652      	mov	r2, sl
 800b7aa:	465b      	mov	r3, fp
 800b7ac:	e9d9 0100 	ldrd	r0, r1, [r9]
 800b7b0:	f7f4 ff2a 	bl	8000608 <__aeabi_dmul>
 800b7b4:	4b29      	ldr	r3, [pc, #164]	; (800b85c <_strtod_l+0x5ac>)
 800b7b6:	460a      	mov	r2, r1
 800b7b8:	400b      	ands	r3, r1
 800b7ba:	4929      	ldr	r1, [pc, #164]	; (800b860 <_strtod_l+0x5b0>)
 800b7bc:	428b      	cmp	r3, r1
 800b7be:	4682      	mov	sl, r0
 800b7c0:	d8be      	bhi.n	800b740 <_strtod_l+0x490>
 800b7c2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b7c6:	428b      	cmp	r3, r1
 800b7c8:	bf86      	itte	hi
 800b7ca:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800b864 <_strtod_l+0x5b4>
 800b7ce:	f04f 3aff 	movhi.w	sl, #4294967295
 800b7d2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	9304      	str	r3, [sp, #16]
 800b7da:	e081      	b.n	800b8e0 <_strtod_l+0x630>
 800b7dc:	f018 0f01 	tst.w	r8, #1
 800b7e0:	d007      	beq.n	800b7f2 <_strtod_l+0x542>
 800b7e2:	4b1d      	ldr	r3, [pc, #116]	; (800b858 <_strtod_l+0x5a8>)
 800b7e4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800b7e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ec:	f7f4 ff0c 	bl	8000608 <__aeabi_dmul>
 800b7f0:	2301      	movs	r3, #1
 800b7f2:	f109 0901 	add.w	r9, r9, #1
 800b7f6:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b7fa:	e7ca      	b.n	800b792 <_strtod_l+0x4e2>
 800b7fc:	d0eb      	beq.n	800b7d6 <_strtod_l+0x526>
 800b7fe:	f1c8 0800 	rsb	r8, r8, #0
 800b802:	f018 020f 	ands.w	r2, r8, #15
 800b806:	d00a      	beq.n	800b81e <_strtod_l+0x56e>
 800b808:	4b12      	ldr	r3, [pc, #72]	; (800b854 <_strtod_l+0x5a4>)
 800b80a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b80e:	4650      	mov	r0, sl
 800b810:	4659      	mov	r1, fp
 800b812:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b816:	f7f5 f821 	bl	800085c <__aeabi_ddiv>
 800b81a:	4682      	mov	sl, r0
 800b81c:	468b      	mov	fp, r1
 800b81e:	ea5f 1828 	movs.w	r8, r8, asr #4
 800b822:	d0d8      	beq.n	800b7d6 <_strtod_l+0x526>
 800b824:	f1b8 0f1f 	cmp.w	r8, #31
 800b828:	dd1e      	ble.n	800b868 <_strtod_l+0x5b8>
 800b82a:	2500      	movs	r5, #0
 800b82c:	462e      	mov	r6, r5
 800b82e:	9509      	str	r5, [sp, #36]	; 0x24
 800b830:	9507      	str	r5, [sp, #28]
 800b832:	2322      	movs	r3, #34	; 0x22
 800b834:	f04f 0a00 	mov.w	sl, #0
 800b838:	f04f 0b00 	mov.w	fp, #0
 800b83c:	6023      	str	r3, [r4, #0]
 800b83e:	e789      	b.n	800b754 <_strtod_l+0x4a4>
 800b840:	0800f601 	.word	0x0800f601
 800b844:	0800f63c 	.word	0x0800f63c
 800b848:	0800f5f9 	.word	0x0800f5f9
 800b84c:	0800f830 	.word	0x0800f830
 800b850:	0800f72b 	.word	0x0800f72b
 800b854:	0800fa18 	.word	0x0800fa18
 800b858:	0800f9f0 	.word	0x0800f9f0
 800b85c:	7ff00000 	.word	0x7ff00000
 800b860:	7ca00000 	.word	0x7ca00000
 800b864:	7fefffff 	.word	0x7fefffff
 800b868:	f018 0310 	ands.w	r3, r8, #16
 800b86c:	bf18      	it	ne
 800b86e:	236a      	movne	r3, #106	; 0x6a
 800b870:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800bc28 <_strtod_l+0x978>
 800b874:	9304      	str	r3, [sp, #16]
 800b876:	4650      	mov	r0, sl
 800b878:	4659      	mov	r1, fp
 800b87a:	2300      	movs	r3, #0
 800b87c:	f018 0f01 	tst.w	r8, #1
 800b880:	d004      	beq.n	800b88c <_strtod_l+0x5dc>
 800b882:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b886:	f7f4 febf 	bl	8000608 <__aeabi_dmul>
 800b88a:	2301      	movs	r3, #1
 800b88c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800b890:	f109 0908 	add.w	r9, r9, #8
 800b894:	d1f2      	bne.n	800b87c <_strtod_l+0x5cc>
 800b896:	b10b      	cbz	r3, 800b89c <_strtod_l+0x5ec>
 800b898:	4682      	mov	sl, r0
 800b89a:	468b      	mov	fp, r1
 800b89c:	9b04      	ldr	r3, [sp, #16]
 800b89e:	b1bb      	cbz	r3, 800b8d0 <_strtod_l+0x620>
 800b8a0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800b8a4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	4659      	mov	r1, fp
 800b8ac:	dd10      	ble.n	800b8d0 <_strtod_l+0x620>
 800b8ae:	2b1f      	cmp	r3, #31
 800b8b0:	f340 8128 	ble.w	800bb04 <_strtod_l+0x854>
 800b8b4:	2b34      	cmp	r3, #52	; 0x34
 800b8b6:	bfde      	ittt	le
 800b8b8:	3b20      	suble	r3, #32
 800b8ba:	f04f 32ff 	movle.w	r2, #4294967295
 800b8be:	fa02 f303 	lslle.w	r3, r2, r3
 800b8c2:	f04f 0a00 	mov.w	sl, #0
 800b8c6:	bfcc      	ite	gt
 800b8c8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800b8cc:	ea03 0b01 	andle.w	fp, r3, r1
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	4650      	mov	r0, sl
 800b8d6:	4659      	mov	r1, fp
 800b8d8:	f7f5 f8fe 	bl	8000ad8 <__aeabi_dcmpeq>
 800b8dc:	2800      	cmp	r0, #0
 800b8de:	d1a4      	bne.n	800b82a <_strtod_l+0x57a>
 800b8e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8e2:	9300      	str	r3, [sp, #0]
 800b8e4:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b8e6:	462b      	mov	r3, r5
 800b8e8:	463a      	mov	r2, r7
 800b8ea:	4620      	mov	r0, r4
 800b8ec:	f002 f814 	bl	800d918 <__s2b>
 800b8f0:	9009      	str	r0, [sp, #36]	; 0x24
 800b8f2:	2800      	cmp	r0, #0
 800b8f4:	f43f af24 	beq.w	800b740 <_strtod_l+0x490>
 800b8f8:	9b07      	ldr	r3, [sp, #28]
 800b8fa:	1b9e      	subs	r6, r3, r6
 800b8fc:	9b08      	ldr	r3, [sp, #32]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	bfb4      	ite	lt
 800b902:	4633      	movlt	r3, r6
 800b904:	2300      	movge	r3, #0
 800b906:	9310      	str	r3, [sp, #64]	; 0x40
 800b908:	9b08      	ldr	r3, [sp, #32]
 800b90a:	2500      	movs	r5, #0
 800b90c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b910:	9318      	str	r3, [sp, #96]	; 0x60
 800b912:	462e      	mov	r6, r5
 800b914:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b916:	4620      	mov	r0, r4
 800b918:	6859      	ldr	r1, [r3, #4]
 800b91a:	f001 ff51 	bl	800d7c0 <_Balloc>
 800b91e:	9007      	str	r0, [sp, #28]
 800b920:	2800      	cmp	r0, #0
 800b922:	f43f af11 	beq.w	800b748 <_strtod_l+0x498>
 800b926:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b928:	691a      	ldr	r2, [r3, #16]
 800b92a:	3202      	adds	r2, #2
 800b92c:	f103 010c 	add.w	r1, r3, #12
 800b930:	0092      	lsls	r2, r2, #2
 800b932:	300c      	adds	r0, #12
 800b934:	f7fe ffe6 	bl	800a904 <memcpy>
 800b938:	ec4b ab10 	vmov	d0, sl, fp
 800b93c:	aa20      	add	r2, sp, #128	; 0x80
 800b93e:	a91f      	add	r1, sp, #124	; 0x7c
 800b940:	4620      	mov	r0, r4
 800b942:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800b946:	f002 fb23 	bl	800df90 <__d2b>
 800b94a:	901e      	str	r0, [sp, #120]	; 0x78
 800b94c:	2800      	cmp	r0, #0
 800b94e:	f43f aefb 	beq.w	800b748 <_strtod_l+0x498>
 800b952:	2101      	movs	r1, #1
 800b954:	4620      	mov	r0, r4
 800b956:	f002 f879 	bl	800da4c <__i2b>
 800b95a:	4606      	mov	r6, r0
 800b95c:	2800      	cmp	r0, #0
 800b95e:	f43f aef3 	beq.w	800b748 <_strtod_l+0x498>
 800b962:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b964:	9904      	ldr	r1, [sp, #16]
 800b966:	2b00      	cmp	r3, #0
 800b968:	bfab      	itete	ge
 800b96a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800b96c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800b96e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800b970:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800b974:	bfac      	ite	ge
 800b976:	eb03 0902 	addge.w	r9, r3, r2
 800b97a:	1ad7      	sublt	r7, r2, r3
 800b97c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b97e:	eba3 0801 	sub.w	r8, r3, r1
 800b982:	4490      	add	r8, r2
 800b984:	4ba3      	ldr	r3, [pc, #652]	; (800bc14 <_strtod_l+0x964>)
 800b986:	f108 38ff 	add.w	r8, r8, #4294967295
 800b98a:	4598      	cmp	r8, r3
 800b98c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b990:	f280 80cc 	bge.w	800bb2c <_strtod_l+0x87c>
 800b994:	eba3 0308 	sub.w	r3, r3, r8
 800b998:	2b1f      	cmp	r3, #31
 800b99a:	eba2 0203 	sub.w	r2, r2, r3
 800b99e:	f04f 0101 	mov.w	r1, #1
 800b9a2:	f300 80b6 	bgt.w	800bb12 <_strtod_l+0x862>
 800b9a6:	fa01 f303 	lsl.w	r3, r1, r3
 800b9aa:	9311      	str	r3, [sp, #68]	; 0x44
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	930c      	str	r3, [sp, #48]	; 0x30
 800b9b0:	eb09 0802 	add.w	r8, r9, r2
 800b9b4:	9b04      	ldr	r3, [sp, #16]
 800b9b6:	45c1      	cmp	r9, r8
 800b9b8:	4417      	add	r7, r2
 800b9ba:	441f      	add	r7, r3
 800b9bc:	464b      	mov	r3, r9
 800b9be:	bfa8      	it	ge
 800b9c0:	4643      	movge	r3, r8
 800b9c2:	42bb      	cmp	r3, r7
 800b9c4:	bfa8      	it	ge
 800b9c6:	463b      	movge	r3, r7
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	bfc2      	ittt	gt
 800b9cc:	eba8 0803 	subgt.w	r8, r8, r3
 800b9d0:	1aff      	subgt	r7, r7, r3
 800b9d2:	eba9 0903 	subgt.w	r9, r9, r3
 800b9d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	dd17      	ble.n	800ba0c <_strtod_l+0x75c>
 800b9dc:	4631      	mov	r1, r6
 800b9de:	461a      	mov	r2, r3
 800b9e0:	4620      	mov	r0, r4
 800b9e2:	f002 f8ef 	bl	800dbc4 <__pow5mult>
 800b9e6:	4606      	mov	r6, r0
 800b9e8:	2800      	cmp	r0, #0
 800b9ea:	f43f aead 	beq.w	800b748 <_strtod_l+0x498>
 800b9ee:	4601      	mov	r1, r0
 800b9f0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b9f2:	4620      	mov	r0, r4
 800b9f4:	f002 f840 	bl	800da78 <__multiply>
 800b9f8:	900f      	str	r0, [sp, #60]	; 0x3c
 800b9fa:	2800      	cmp	r0, #0
 800b9fc:	f43f aea4 	beq.w	800b748 <_strtod_l+0x498>
 800ba00:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ba02:	4620      	mov	r0, r4
 800ba04:	f001 ff1c 	bl	800d840 <_Bfree>
 800ba08:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ba0a:	931e      	str	r3, [sp, #120]	; 0x78
 800ba0c:	f1b8 0f00 	cmp.w	r8, #0
 800ba10:	f300 8091 	bgt.w	800bb36 <_strtod_l+0x886>
 800ba14:	9b08      	ldr	r3, [sp, #32]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	dd08      	ble.n	800ba2c <_strtod_l+0x77c>
 800ba1a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ba1c:	9907      	ldr	r1, [sp, #28]
 800ba1e:	4620      	mov	r0, r4
 800ba20:	f002 f8d0 	bl	800dbc4 <__pow5mult>
 800ba24:	9007      	str	r0, [sp, #28]
 800ba26:	2800      	cmp	r0, #0
 800ba28:	f43f ae8e 	beq.w	800b748 <_strtod_l+0x498>
 800ba2c:	2f00      	cmp	r7, #0
 800ba2e:	dd08      	ble.n	800ba42 <_strtod_l+0x792>
 800ba30:	9907      	ldr	r1, [sp, #28]
 800ba32:	463a      	mov	r2, r7
 800ba34:	4620      	mov	r0, r4
 800ba36:	f002 f91f 	bl	800dc78 <__lshift>
 800ba3a:	9007      	str	r0, [sp, #28]
 800ba3c:	2800      	cmp	r0, #0
 800ba3e:	f43f ae83 	beq.w	800b748 <_strtod_l+0x498>
 800ba42:	f1b9 0f00 	cmp.w	r9, #0
 800ba46:	dd08      	ble.n	800ba5a <_strtod_l+0x7aa>
 800ba48:	4631      	mov	r1, r6
 800ba4a:	464a      	mov	r2, r9
 800ba4c:	4620      	mov	r0, r4
 800ba4e:	f002 f913 	bl	800dc78 <__lshift>
 800ba52:	4606      	mov	r6, r0
 800ba54:	2800      	cmp	r0, #0
 800ba56:	f43f ae77 	beq.w	800b748 <_strtod_l+0x498>
 800ba5a:	9a07      	ldr	r2, [sp, #28]
 800ba5c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ba5e:	4620      	mov	r0, r4
 800ba60:	f002 f992 	bl	800dd88 <__mdiff>
 800ba64:	4605      	mov	r5, r0
 800ba66:	2800      	cmp	r0, #0
 800ba68:	f43f ae6e 	beq.w	800b748 <_strtod_l+0x498>
 800ba6c:	68c3      	ldr	r3, [r0, #12]
 800ba6e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ba70:	2300      	movs	r3, #0
 800ba72:	60c3      	str	r3, [r0, #12]
 800ba74:	4631      	mov	r1, r6
 800ba76:	f002 f96b 	bl	800dd50 <__mcmp>
 800ba7a:	2800      	cmp	r0, #0
 800ba7c:	da65      	bge.n	800bb4a <_strtod_l+0x89a>
 800ba7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ba80:	ea53 030a 	orrs.w	r3, r3, sl
 800ba84:	f040 8087 	bne.w	800bb96 <_strtod_l+0x8e6>
 800ba88:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	f040 8082 	bne.w	800bb96 <_strtod_l+0x8e6>
 800ba92:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ba96:	0d1b      	lsrs	r3, r3, #20
 800ba98:	051b      	lsls	r3, r3, #20
 800ba9a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ba9e:	d97a      	bls.n	800bb96 <_strtod_l+0x8e6>
 800baa0:	696b      	ldr	r3, [r5, #20]
 800baa2:	b913      	cbnz	r3, 800baaa <_strtod_l+0x7fa>
 800baa4:	692b      	ldr	r3, [r5, #16]
 800baa6:	2b01      	cmp	r3, #1
 800baa8:	dd75      	ble.n	800bb96 <_strtod_l+0x8e6>
 800baaa:	4629      	mov	r1, r5
 800baac:	2201      	movs	r2, #1
 800baae:	4620      	mov	r0, r4
 800bab0:	f002 f8e2 	bl	800dc78 <__lshift>
 800bab4:	4631      	mov	r1, r6
 800bab6:	4605      	mov	r5, r0
 800bab8:	f002 f94a 	bl	800dd50 <__mcmp>
 800babc:	2800      	cmp	r0, #0
 800babe:	dd6a      	ble.n	800bb96 <_strtod_l+0x8e6>
 800bac0:	9904      	ldr	r1, [sp, #16]
 800bac2:	4a55      	ldr	r2, [pc, #340]	; (800bc18 <_strtod_l+0x968>)
 800bac4:	465b      	mov	r3, fp
 800bac6:	2900      	cmp	r1, #0
 800bac8:	f000 8085 	beq.w	800bbd6 <_strtod_l+0x926>
 800bacc:	ea02 010b 	and.w	r1, r2, fp
 800bad0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800bad4:	dc7f      	bgt.n	800bbd6 <_strtod_l+0x926>
 800bad6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800bada:	f77f aeaa 	ble.w	800b832 <_strtod_l+0x582>
 800bade:	4a4f      	ldr	r2, [pc, #316]	; (800bc1c <_strtod_l+0x96c>)
 800bae0:	2300      	movs	r3, #0
 800bae2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800bae6:	4650      	mov	r0, sl
 800bae8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800baec:	4659      	mov	r1, fp
 800baee:	f7f4 fd8b 	bl	8000608 <__aeabi_dmul>
 800baf2:	460b      	mov	r3, r1
 800baf4:	4303      	orrs	r3, r0
 800baf6:	bf08      	it	eq
 800baf8:	2322      	moveq	r3, #34	; 0x22
 800bafa:	4682      	mov	sl, r0
 800bafc:	468b      	mov	fp, r1
 800bafe:	bf08      	it	eq
 800bb00:	6023      	streq	r3, [r4, #0]
 800bb02:	e62b      	b.n	800b75c <_strtod_l+0x4ac>
 800bb04:	f04f 32ff 	mov.w	r2, #4294967295
 800bb08:	fa02 f303 	lsl.w	r3, r2, r3
 800bb0c:	ea03 0a0a 	and.w	sl, r3, sl
 800bb10:	e6de      	b.n	800b8d0 <_strtod_l+0x620>
 800bb12:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800bb16:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800bb1a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800bb1e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800bb22:	fa01 f308 	lsl.w	r3, r1, r8
 800bb26:	930c      	str	r3, [sp, #48]	; 0x30
 800bb28:	9111      	str	r1, [sp, #68]	; 0x44
 800bb2a:	e741      	b.n	800b9b0 <_strtod_l+0x700>
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	930c      	str	r3, [sp, #48]	; 0x30
 800bb30:	2301      	movs	r3, #1
 800bb32:	9311      	str	r3, [sp, #68]	; 0x44
 800bb34:	e73c      	b.n	800b9b0 <_strtod_l+0x700>
 800bb36:	991e      	ldr	r1, [sp, #120]	; 0x78
 800bb38:	4642      	mov	r2, r8
 800bb3a:	4620      	mov	r0, r4
 800bb3c:	f002 f89c 	bl	800dc78 <__lshift>
 800bb40:	901e      	str	r0, [sp, #120]	; 0x78
 800bb42:	2800      	cmp	r0, #0
 800bb44:	f47f af66 	bne.w	800ba14 <_strtod_l+0x764>
 800bb48:	e5fe      	b.n	800b748 <_strtod_l+0x498>
 800bb4a:	465f      	mov	r7, fp
 800bb4c:	d16e      	bne.n	800bc2c <_strtod_l+0x97c>
 800bb4e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bb50:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bb54:	b342      	cbz	r2, 800bba8 <_strtod_l+0x8f8>
 800bb56:	4a32      	ldr	r2, [pc, #200]	; (800bc20 <_strtod_l+0x970>)
 800bb58:	4293      	cmp	r3, r2
 800bb5a:	d128      	bne.n	800bbae <_strtod_l+0x8fe>
 800bb5c:	9b04      	ldr	r3, [sp, #16]
 800bb5e:	4650      	mov	r0, sl
 800bb60:	b1eb      	cbz	r3, 800bb9e <_strtod_l+0x8ee>
 800bb62:	4a2d      	ldr	r2, [pc, #180]	; (800bc18 <_strtod_l+0x968>)
 800bb64:	403a      	ands	r2, r7
 800bb66:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800bb6a:	f04f 31ff 	mov.w	r1, #4294967295
 800bb6e:	d819      	bhi.n	800bba4 <_strtod_l+0x8f4>
 800bb70:	0d12      	lsrs	r2, r2, #20
 800bb72:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800bb76:	fa01 f303 	lsl.w	r3, r1, r3
 800bb7a:	4298      	cmp	r0, r3
 800bb7c:	d117      	bne.n	800bbae <_strtod_l+0x8fe>
 800bb7e:	4b29      	ldr	r3, [pc, #164]	; (800bc24 <_strtod_l+0x974>)
 800bb80:	429f      	cmp	r7, r3
 800bb82:	d102      	bne.n	800bb8a <_strtod_l+0x8da>
 800bb84:	3001      	adds	r0, #1
 800bb86:	f43f addf 	beq.w	800b748 <_strtod_l+0x498>
 800bb8a:	4b23      	ldr	r3, [pc, #140]	; (800bc18 <_strtod_l+0x968>)
 800bb8c:	403b      	ands	r3, r7
 800bb8e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800bb92:	f04f 0a00 	mov.w	sl, #0
 800bb96:	9b04      	ldr	r3, [sp, #16]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d1a0      	bne.n	800bade <_strtod_l+0x82e>
 800bb9c:	e5de      	b.n	800b75c <_strtod_l+0x4ac>
 800bb9e:	f04f 33ff 	mov.w	r3, #4294967295
 800bba2:	e7ea      	b.n	800bb7a <_strtod_l+0x8ca>
 800bba4:	460b      	mov	r3, r1
 800bba6:	e7e8      	b.n	800bb7a <_strtod_l+0x8ca>
 800bba8:	ea53 030a 	orrs.w	r3, r3, sl
 800bbac:	d088      	beq.n	800bac0 <_strtod_l+0x810>
 800bbae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bbb0:	b1db      	cbz	r3, 800bbea <_strtod_l+0x93a>
 800bbb2:	423b      	tst	r3, r7
 800bbb4:	d0ef      	beq.n	800bb96 <_strtod_l+0x8e6>
 800bbb6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bbb8:	9a04      	ldr	r2, [sp, #16]
 800bbba:	4650      	mov	r0, sl
 800bbbc:	4659      	mov	r1, fp
 800bbbe:	b1c3      	cbz	r3, 800bbf2 <_strtod_l+0x942>
 800bbc0:	f7ff fb57 	bl	800b272 <sulp>
 800bbc4:	4602      	mov	r2, r0
 800bbc6:	460b      	mov	r3, r1
 800bbc8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bbcc:	f7f4 fb66 	bl	800029c <__adddf3>
 800bbd0:	4682      	mov	sl, r0
 800bbd2:	468b      	mov	fp, r1
 800bbd4:	e7df      	b.n	800bb96 <_strtod_l+0x8e6>
 800bbd6:	4013      	ands	r3, r2
 800bbd8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800bbdc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800bbe0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800bbe4:	f04f 3aff 	mov.w	sl, #4294967295
 800bbe8:	e7d5      	b.n	800bb96 <_strtod_l+0x8e6>
 800bbea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bbec:	ea13 0f0a 	tst.w	r3, sl
 800bbf0:	e7e0      	b.n	800bbb4 <_strtod_l+0x904>
 800bbf2:	f7ff fb3e 	bl	800b272 <sulp>
 800bbf6:	4602      	mov	r2, r0
 800bbf8:	460b      	mov	r3, r1
 800bbfa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bbfe:	f7f4 fb4b 	bl	8000298 <__aeabi_dsub>
 800bc02:	2200      	movs	r2, #0
 800bc04:	2300      	movs	r3, #0
 800bc06:	4682      	mov	sl, r0
 800bc08:	468b      	mov	fp, r1
 800bc0a:	f7f4 ff65 	bl	8000ad8 <__aeabi_dcmpeq>
 800bc0e:	2800      	cmp	r0, #0
 800bc10:	d0c1      	beq.n	800bb96 <_strtod_l+0x8e6>
 800bc12:	e60e      	b.n	800b832 <_strtod_l+0x582>
 800bc14:	fffffc02 	.word	0xfffffc02
 800bc18:	7ff00000 	.word	0x7ff00000
 800bc1c:	39500000 	.word	0x39500000
 800bc20:	000fffff 	.word	0x000fffff
 800bc24:	7fefffff 	.word	0x7fefffff
 800bc28:	0800f650 	.word	0x0800f650
 800bc2c:	4631      	mov	r1, r6
 800bc2e:	4628      	mov	r0, r5
 800bc30:	f002 fa0a 	bl	800e048 <__ratio>
 800bc34:	ec59 8b10 	vmov	r8, r9, d0
 800bc38:	ee10 0a10 	vmov	r0, s0
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bc42:	4649      	mov	r1, r9
 800bc44:	f7f4 ff5c 	bl	8000b00 <__aeabi_dcmple>
 800bc48:	2800      	cmp	r0, #0
 800bc4a:	d07c      	beq.n	800bd46 <_strtod_l+0xa96>
 800bc4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d04c      	beq.n	800bcec <_strtod_l+0xa3c>
 800bc52:	4b95      	ldr	r3, [pc, #596]	; (800bea8 <_strtod_l+0xbf8>)
 800bc54:	2200      	movs	r2, #0
 800bc56:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800bc5a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800bea8 <_strtod_l+0xbf8>
 800bc5e:	f04f 0800 	mov.w	r8, #0
 800bc62:	4b92      	ldr	r3, [pc, #584]	; (800beac <_strtod_l+0xbfc>)
 800bc64:	403b      	ands	r3, r7
 800bc66:	9311      	str	r3, [sp, #68]	; 0x44
 800bc68:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bc6a:	4b91      	ldr	r3, [pc, #580]	; (800beb0 <_strtod_l+0xc00>)
 800bc6c:	429a      	cmp	r2, r3
 800bc6e:	f040 80b2 	bne.w	800bdd6 <_strtod_l+0xb26>
 800bc72:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800bc76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bc7a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800bc7e:	ec4b ab10 	vmov	d0, sl, fp
 800bc82:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800bc86:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800bc8a:	f002 f905 	bl	800de98 <__ulp>
 800bc8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bc92:	ec53 2b10 	vmov	r2, r3, d0
 800bc96:	f7f4 fcb7 	bl	8000608 <__aeabi_dmul>
 800bc9a:	4652      	mov	r2, sl
 800bc9c:	465b      	mov	r3, fp
 800bc9e:	f7f4 fafd 	bl	800029c <__adddf3>
 800bca2:	460b      	mov	r3, r1
 800bca4:	4981      	ldr	r1, [pc, #516]	; (800beac <_strtod_l+0xbfc>)
 800bca6:	4a83      	ldr	r2, [pc, #524]	; (800beb4 <_strtod_l+0xc04>)
 800bca8:	4019      	ands	r1, r3
 800bcaa:	4291      	cmp	r1, r2
 800bcac:	4682      	mov	sl, r0
 800bcae:	d95e      	bls.n	800bd6e <_strtod_l+0xabe>
 800bcb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bcb2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800bcb6:	4293      	cmp	r3, r2
 800bcb8:	d103      	bne.n	800bcc2 <_strtod_l+0xa12>
 800bcba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bcbc:	3301      	adds	r3, #1
 800bcbe:	f43f ad43 	beq.w	800b748 <_strtod_l+0x498>
 800bcc2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800bec0 <_strtod_l+0xc10>
 800bcc6:	f04f 3aff 	mov.w	sl, #4294967295
 800bcca:	991e      	ldr	r1, [sp, #120]	; 0x78
 800bccc:	4620      	mov	r0, r4
 800bcce:	f001 fdb7 	bl	800d840 <_Bfree>
 800bcd2:	9907      	ldr	r1, [sp, #28]
 800bcd4:	4620      	mov	r0, r4
 800bcd6:	f001 fdb3 	bl	800d840 <_Bfree>
 800bcda:	4631      	mov	r1, r6
 800bcdc:	4620      	mov	r0, r4
 800bcde:	f001 fdaf 	bl	800d840 <_Bfree>
 800bce2:	4629      	mov	r1, r5
 800bce4:	4620      	mov	r0, r4
 800bce6:	f001 fdab 	bl	800d840 <_Bfree>
 800bcea:	e613      	b.n	800b914 <_strtod_l+0x664>
 800bcec:	f1ba 0f00 	cmp.w	sl, #0
 800bcf0:	d11b      	bne.n	800bd2a <_strtod_l+0xa7a>
 800bcf2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bcf6:	b9f3      	cbnz	r3, 800bd36 <_strtod_l+0xa86>
 800bcf8:	4b6b      	ldr	r3, [pc, #428]	; (800bea8 <_strtod_l+0xbf8>)
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	4640      	mov	r0, r8
 800bcfe:	4649      	mov	r1, r9
 800bd00:	f7f4 fef4 	bl	8000aec <__aeabi_dcmplt>
 800bd04:	b9d0      	cbnz	r0, 800bd3c <_strtod_l+0xa8c>
 800bd06:	4640      	mov	r0, r8
 800bd08:	4649      	mov	r1, r9
 800bd0a:	4b6b      	ldr	r3, [pc, #428]	; (800beb8 <_strtod_l+0xc08>)
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	f7f4 fc7b 	bl	8000608 <__aeabi_dmul>
 800bd12:	4680      	mov	r8, r0
 800bd14:	4689      	mov	r9, r1
 800bd16:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800bd1a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800bd1e:	931b      	str	r3, [sp, #108]	; 0x6c
 800bd20:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800bd24:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800bd28:	e79b      	b.n	800bc62 <_strtod_l+0x9b2>
 800bd2a:	f1ba 0f01 	cmp.w	sl, #1
 800bd2e:	d102      	bne.n	800bd36 <_strtod_l+0xa86>
 800bd30:	2f00      	cmp	r7, #0
 800bd32:	f43f ad7e 	beq.w	800b832 <_strtod_l+0x582>
 800bd36:	4b61      	ldr	r3, [pc, #388]	; (800bebc <_strtod_l+0xc0c>)
 800bd38:	2200      	movs	r2, #0
 800bd3a:	e78c      	b.n	800bc56 <_strtod_l+0x9a6>
 800bd3c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800beb8 <_strtod_l+0xc08>
 800bd40:	f04f 0800 	mov.w	r8, #0
 800bd44:	e7e7      	b.n	800bd16 <_strtod_l+0xa66>
 800bd46:	4b5c      	ldr	r3, [pc, #368]	; (800beb8 <_strtod_l+0xc08>)
 800bd48:	4640      	mov	r0, r8
 800bd4a:	4649      	mov	r1, r9
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	f7f4 fc5b 	bl	8000608 <__aeabi_dmul>
 800bd52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bd54:	4680      	mov	r8, r0
 800bd56:	4689      	mov	r9, r1
 800bd58:	b933      	cbnz	r3, 800bd68 <_strtod_l+0xab8>
 800bd5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bd5e:	9012      	str	r0, [sp, #72]	; 0x48
 800bd60:	9313      	str	r3, [sp, #76]	; 0x4c
 800bd62:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800bd66:	e7dd      	b.n	800bd24 <_strtod_l+0xa74>
 800bd68:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800bd6c:	e7f9      	b.n	800bd62 <_strtod_l+0xab2>
 800bd6e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800bd72:	9b04      	ldr	r3, [sp, #16]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d1a8      	bne.n	800bcca <_strtod_l+0xa1a>
 800bd78:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bd7c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bd7e:	0d1b      	lsrs	r3, r3, #20
 800bd80:	051b      	lsls	r3, r3, #20
 800bd82:	429a      	cmp	r2, r3
 800bd84:	d1a1      	bne.n	800bcca <_strtod_l+0xa1a>
 800bd86:	4640      	mov	r0, r8
 800bd88:	4649      	mov	r1, r9
 800bd8a:	f7f4 ff9d 	bl	8000cc8 <__aeabi_d2lz>
 800bd8e:	f7f4 fc0d 	bl	80005ac <__aeabi_l2d>
 800bd92:	4602      	mov	r2, r0
 800bd94:	460b      	mov	r3, r1
 800bd96:	4640      	mov	r0, r8
 800bd98:	4649      	mov	r1, r9
 800bd9a:	f7f4 fa7d 	bl	8000298 <__aeabi_dsub>
 800bd9e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bda0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bda4:	ea43 030a 	orr.w	r3, r3, sl
 800bda8:	4313      	orrs	r3, r2
 800bdaa:	4680      	mov	r8, r0
 800bdac:	4689      	mov	r9, r1
 800bdae:	d053      	beq.n	800be58 <_strtod_l+0xba8>
 800bdb0:	a335      	add	r3, pc, #212	; (adr r3, 800be88 <_strtod_l+0xbd8>)
 800bdb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdb6:	f7f4 fe99 	bl	8000aec <__aeabi_dcmplt>
 800bdba:	2800      	cmp	r0, #0
 800bdbc:	f47f acce 	bne.w	800b75c <_strtod_l+0x4ac>
 800bdc0:	a333      	add	r3, pc, #204	; (adr r3, 800be90 <_strtod_l+0xbe0>)
 800bdc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdc6:	4640      	mov	r0, r8
 800bdc8:	4649      	mov	r1, r9
 800bdca:	f7f4 fead 	bl	8000b28 <__aeabi_dcmpgt>
 800bdce:	2800      	cmp	r0, #0
 800bdd0:	f43f af7b 	beq.w	800bcca <_strtod_l+0xa1a>
 800bdd4:	e4c2      	b.n	800b75c <_strtod_l+0x4ac>
 800bdd6:	9b04      	ldr	r3, [sp, #16]
 800bdd8:	b333      	cbz	r3, 800be28 <_strtod_l+0xb78>
 800bdda:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bddc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800bde0:	d822      	bhi.n	800be28 <_strtod_l+0xb78>
 800bde2:	a32d      	add	r3, pc, #180	; (adr r3, 800be98 <_strtod_l+0xbe8>)
 800bde4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bde8:	4640      	mov	r0, r8
 800bdea:	4649      	mov	r1, r9
 800bdec:	f7f4 fe88 	bl	8000b00 <__aeabi_dcmple>
 800bdf0:	b1a0      	cbz	r0, 800be1c <_strtod_l+0xb6c>
 800bdf2:	4649      	mov	r1, r9
 800bdf4:	4640      	mov	r0, r8
 800bdf6:	f7f4 fedf 	bl	8000bb8 <__aeabi_d2uiz>
 800bdfa:	2801      	cmp	r0, #1
 800bdfc:	bf38      	it	cc
 800bdfe:	2001      	movcc	r0, #1
 800be00:	f7f4 fb88 	bl	8000514 <__aeabi_ui2d>
 800be04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800be06:	4680      	mov	r8, r0
 800be08:	4689      	mov	r9, r1
 800be0a:	bb13      	cbnz	r3, 800be52 <_strtod_l+0xba2>
 800be0c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800be10:	9014      	str	r0, [sp, #80]	; 0x50
 800be12:	9315      	str	r3, [sp, #84]	; 0x54
 800be14:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800be18:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800be1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be1e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800be20:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800be24:	1a9b      	subs	r3, r3, r2
 800be26:	930d      	str	r3, [sp, #52]	; 0x34
 800be28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800be2c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800be30:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800be34:	f002 f830 	bl	800de98 <__ulp>
 800be38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800be3c:	ec53 2b10 	vmov	r2, r3, d0
 800be40:	f7f4 fbe2 	bl	8000608 <__aeabi_dmul>
 800be44:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800be48:	f7f4 fa28 	bl	800029c <__adddf3>
 800be4c:	4682      	mov	sl, r0
 800be4e:	468b      	mov	fp, r1
 800be50:	e78f      	b.n	800bd72 <_strtod_l+0xac2>
 800be52:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800be56:	e7dd      	b.n	800be14 <_strtod_l+0xb64>
 800be58:	a311      	add	r3, pc, #68	; (adr r3, 800bea0 <_strtod_l+0xbf0>)
 800be5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be5e:	f7f4 fe45 	bl	8000aec <__aeabi_dcmplt>
 800be62:	e7b4      	b.n	800bdce <_strtod_l+0xb1e>
 800be64:	2300      	movs	r3, #0
 800be66:	930e      	str	r3, [sp, #56]	; 0x38
 800be68:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800be6a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800be6c:	6013      	str	r3, [r2, #0]
 800be6e:	f7ff ba65 	b.w	800b33c <_strtod_l+0x8c>
 800be72:	2b65      	cmp	r3, #101	; 0x65
 800be74:	f43f ab5d 	beq.w	800b532 <_strtod_l+0x282>
 800be78:	2b45      	cmp	r3, #69	; 0x45
 800be7a:	f43f ab5a 	beq.w	800b532 <_strtod_l+0x282>
 800be7e:	2201      	movs	r2, #1
 800be80:	f7ff bb92 	b.w	800b5a8 <_strtod_l+0x2f8>
 800be84:	f3af 8000 	nop.w
 800be88:	94a03595 	.word	0x94a03595
 800be8c:	3fdfffff 	.word	0x3fdfffff
 800be90:	35afe535 	.word	0x35afe535
 800be94:	3fe00000 	.word	0x3fe00000
 800be98:	ffc00000 	.word	0xffc00000
 800be9c:	41dfffff 	.word	0x41dfffff
 800bea0:	94a03595 	.word	0x94a03595
 800bea4:	3fcfffff 	.word	0x3fcfffff
 800bea8:	3ff00000 	.word	0x3ff00000
 800beac:	7ff00000 	.word	0x7ff00000
 800beb0:	7fe00000 	.word	0x7fe00000
 800beb4:	7c9fffff 	.word	0x7c9fffff
 800beb8:	3fe00000 	.word	0x3fe00000
 800bebc:	bff00000 	.word	0xbff00000
 800bec0:	7fefffff 	.word	0x7fefffff

0800bec4 <strtod>:
 800bec4:	460a      	mov	r2, r1
 800bec6:	4601      	mov	r1, r0
 800bec8:	4802      	ldr	r0, [pc, #8]	; (800bed4 <strtod+0x10>)
 800beca:	4b03      	ldr	r3, [pc, #12]	; (800bed8 <strtod+0x14>)
 800becc:	6800      	ldr	r0, [r0, #0]
 800bece:	f7ff b9ef 	b.w	800b2b0 <_strtod_l>
 800bed2:	bf00      	nop
 800bed4:	20000060 	.word	0x20000060
 800bed8:	200000c8 	.word	0x200000c8

0800bedc <strtof>:
 800bedc:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 800bee0:	4e26      	ldr	r6, [pc, #152]	; (800bf7c <strtof+0xa0>)
 800bee2:	4b27      	ldr	r3, [pc, #156]	; (800bf80 <strtof+0xa4>)
 800bee4:	460a      	mov	r2, r1
 800bee6:	ed2d 8b02 	vpush	{d8}
 800beea:	4601      	mov	r1, r0
 800beec:	6830      	ldr	r0, [r6, #0]
 800beee:	f7ff f9df 	bl	800b2b0 <_strtod_l>
 800bef2:	ec55 4b10 	vmov	r4, r5, d0
 800bef6:	ee10 2a10 	vmov	r2, s0
 800befa:	ee10 0a10 	vmov	r0, s0
 800befe:	462b      	mov	r3, r5
 800bf00:	4629      	mov	r1, r5
 800bf02:	f7f4 fe1b 	bl	8000b3c <__aeabi_dcmpun>
 800bf06:	b190      	cbz	r0, 800bf2e <strtof+0x52>
 800bf08:	2d00      	cmp	r5, #0
 800bf0a:	481e      	ldr	r0, [pc, #120]	; (800bf84 <strtof+0xa8>)
 800bf0c:	da09      	bge.n	800bf22 <strtof+0x46>
 800bf0e:	f002 fc9b 	bl	800e848 <nanf>
 800bf12:	eeb1 8a40 	vneg.f32	s16, s0
 800bf16:	eeb0 0a48 	vmov.f32	s0, s16
 800bf1a:	ecbd 8b02 	vpop	{d8}
 800bf1e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800bf22:	ecbd 8b02 	vpop	{d8}
 800bf26:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
 800bf2a:	f002 bc8d 	b.w	800e848 <nanf>
 800bf2e:	4620      	mov	r0, r4
 800bf30:	4629      	mov	r1, r5
 800bf32:	f7f4 fe61 	bl	8000bf8 <__aeabi_d2f>
 800bf36:	ee08 0a10 	vmov	s16, r0
 800bf3a:	eddf 7a13 	vldr	s15, [pc, #76]	; 800bf88 <strtof+0xac>
 800bf3e:	eeb0 7ac8 	vabs.f32	s14, s16
 800bf42:	eeb4 7a67 	vcmp.f32	s14, s15
 800bf46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf4a:	dde4      	ble.n	800bf16 <strtof+0x3a>
 800bf4c:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
 800bf50:	4b0e      	ldr	r3, [pc, #56]	; (800bf8c <strtof+0xb0>)
 800bf52:	f04f 32ff 	mov.w	r2, #4294967295
 800bf56:	4620      	mov	r0, r4
 800bf58:	4649      	mov	r1, r9
 800bf5a:	f7f4 fdef 	bl	8000b3c <__aeabi_dcmpun>
 800bf5e:	b940      	cbnz	r0, 800bf72 <strtof+0x96>
 800bf60:	4b0a      	ldr	r3, [pc, #40]	; (800bf8c <strtof+0xb0>)
 800bf62:	f04f 32ff 	mov.w	r2, #4294967295
 800bf66:	4620      	mov	r0, r4
 800bf68:	4649      	mov	r1, r9
 800bf6a:	f7f4 fdc9 	bl	8000b00 <__aeabi_dcmple>
 800bf6e:	2800      	cmp	r0, #0
 800bf70:	d0d1      	beq.n	800bf16 <strtof+0x3a>
 800bf72:	6833      	ldr	r3, [r6, #0]
 800bf74:	2222      	movs	r2, #34	; 0x22
 800bf76:	601a      	str	r2, [r3, #0]
 800bf78:	e7cd      	b.n	800bf16 <strtof+0x3a>
 800bf7a:	bf00      	nop
 800bf7c:	20000060 	.word	0x20000060
 800bf80:	200000c8 	.word	0x200000c8
 800bf84:	0800f72b 	.word	0x0800f72b
 800bf88:	7f7fffff 	.word	0x7f7fffff
 800bf8c:	7fefffff 	.word	0x7fefffff

0800bf90 <strtok>:
 800bf90:	4b16      	ldr	r3, [pc, #88]	; (800bfec <strtok+0x5c>)
 800bf92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bf94:	681e      	ldr	r6, [r3, #0]
 800bf96:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800bf98:	4605      	mov	r5, r0
 800bf9a:	b9fc      	cbnz	r4, 800bfdc <strtok+0x4c>
 800bf9c:	2050      	movs	r0, #80	; 0x50
 800bf9e:	9101      	str	r1, [sp, #4]
 800bfa0:	f001 fbf4 	bl	800d78c <malloc>
 800bfa4:	9901      	ldr	r1, [sp, #4]
 800bfa6:	65b0      	str	r0, [r6, #88]	; 0x58
 800bfa8:	4602      	mov	r2, r0
 800bfaa:	b920      	cbnz	r0, 800bfb6 <strtok+0x26>
 800bfac:	4b10      	ldr	r3, [pc, #64]	; (800bff0 <strtok+0x60>)
 800bfae:	4811      	ldr	r0, [pc, #68]	; (800bff4 <strtok+0x64>)
 800bfb0:	2157      	movs	r1, #87	; 0x57
 800bfb2:	f000 f8d7 	bl	800c164 <__assert_func>
 800bfb6:	e9c0 4400 	strd	r4, r4, [r0]
 800bfba:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800bfbe:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800bfc2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800bfc6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800bfca:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800bfce:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800bfd2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800bfd6:	6184      	str	r4, [r0, #24]
 800bfd8:	7704      	strb	r4, [r0, #28]
 800bfda:	6244      	str	r4, [r0, #36]	; 0x24
 800bfdc:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800bfde:	2301      	movs	r3, #1
 800bfe0:	4628      	mov	r0, r5
 800bfe2:	b002      	add	sp, #8
 800bfe4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bfe8:	f000 b806 	b.w	800bff8 <__strtok_r>
 800bfec:	20000060 	.word	0x20000060
 800bff0:	0800f678 	.word	0x0800f678
 800bff4:	0800f68f 	.word	0x0800f68f

0800bff8 <__strtok_r>:
 800bff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bffa:	b908      	cbnz	r0, 800c000 <__strtok_r+0x8>
 800bffc:	6810      	ldr	r0, [r2, #0]
 800bffe:	b188      	cbz	r0, 800c024 <__strtok_r+0x2c>
 800c000:	4604      	mov	r4, r0
 800c002:	4620      	mov	r0, r4
 800c004:	f814 5b01 	ldrb.w	r5, [r4], #1
 800c008:	460f      	mov	r7, r1
 800c00a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800c00e:	b91e      	cbnz	r6, 800c018 <__strtok_r+0x20>
 800c010:	b965      	cbnz	r5, 800c02c <__strtok_r+0x34>
 800c012:	6015      	str	r5, [r2, #0]
 800c014:	4628      	mov	r0, r5
 800c016:	e005      	b.n	800c024 <__strtok_r+0x2c>
 800c018:	42b5      	cmp	r5, r6
 800c01a:	d1f6      	bne.n	800c00a <__strtok_r+0x12>
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d1f0      	bne.n	800c002 <__strtok_r+0xa>
 800c020:	6014      	str	r4, [r2, #0]
 800c022:	7003      	strb	r3, [r0, #0]
 800c024:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c026:	461c      	mov	r4, r3
 800c028:	e00c      	b.n	800c044 <__strtok_r+0x4c>
 800c02a:	b915      	cbnz	r5, 800c032 <__strtok_r+0x3a>
 800c02c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c030:	460e      	mov	r6, r1
 800c032:	f816 5b01 	ldrb.w	r5, [r6], #1
 800c036:	42ab      	cmp	r3, r5
 800c038:	d1f7      	bne.n	800c02a <__strtok_r+0x32>
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d0f3      	beq.n	800c026 <__strtok_r+0x2e>
 800c03e:	2300      	movs	r3, #0
 800c040:	f804 3c01 	strb.w	r3, [r4, #-1]
 800c044:	6014      	str	r4, [r2, #0]
 800c046:	e7ed      	b.n	800c024 <__strtok_r+0x2c>

0800c048 <_strtol_l.isra.0>:
 800c048:	2b01      	cmp	r3, #1
 800c04a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c04e:	d001      	beq.n	800c054 <_strtol_l.isra.0+0xc>
 800c050:	2b24      	cmp	r3, #36	; 0x24
 800c052:	d906      	bls.n	800c062 <_strtol_l.isra.0+0x1a>
 800c054:	f7fe fc2c 	bl	800a8b0 <__errno>
 800c058:	2316      	movs	r3, #22
 800c05a:	6003      	str	r3, [r0, #0]
 800c05c:	2000      	movs	r0, #0
 800c05e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c062:	4f3a      	ldr	r7, [pc, #232]	; (800c14c <_strtol_l.isra.0+0x104>)
 800c064:	468e      	mov	lr, r1
 800c066:	4676      	mov	r6, lr
 800c068:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800c06c:	5de5      	ldrb	r5, [r4, r7]
 800c06e:	f015 0508 	ands.w	r5, r5, #8
 800c072:	d1f8      	bne.n	800c066 <_strtol_l.isra.0+0x1e>
 800c074:	2c2d      	cmp	r4, #45	; 0x2d
 800c076:	d134      	bne.n	800c0e2 <_strtol_l.isra.0+0x9a>
 800c078:	f89e 4000 	ldrb.w	r4, [lr]
 800c07c:	f04f 0801 	mov.w	r8, #1
 800c080:	f106 0e02 	add.w	lr, r6, #2
 800c084:	2b00      	cmp	r3, #0
 800c086:	d05c      	beq.n	800c142 <_strtol_l.isra.0+0xfa>
 800c088:	2b10      	cmp	r3, #16
 800c08a:	d10c      	bne.n	800c0a6 <_strtol_l.isra.0+0x5e>
 800c08c:	2c30      	cmp	r4, #48	; 0x30
 800c08e:	d10a      	bne.n	800c0a6 <_strtol_l.isra.0+0x5e>
 800c090:	f89e 4000 	ldrb.w	r4, [lr]
 800c094:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c098:	2c58      	cmp	r4, #88	; 0x58
 800c09a:	d14d      	bne.n	800c138 <_strtol_l.isra.0+0xf0>
 800c09c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800c0a0:	2310      	movs	r3, #16
 800c0a2:	f10e 0e02 	add.w	lr, lr, #2
 800c0a6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800c0aa:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c0ae:	2600      	movs	r6, #0
 800c0b0:	fbbc f9f3 	udiv	r9, ip, r3
 800c0b4:	4635      	mov	r5, r6
 800c0b6:	fb03 ca19 	mls	sl, r3, r9, ip
 800c0ba:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800c0be:	2f09      	cmp	r7, #9
 800c0c0:	d818      	bhi.n	800c0f4 <_strtol_l.isra.0+0xac>
 800c0c2:	463c      	mov	r4, r7
 800c0c4:	42a3      	cmp	r3, r4
 800c0c6:	dd24      	ble.n	800c112 <_strtol_l.isra.0+0xca>
 800c0c8:	2e00      	cmp	r6, #0
 800c0ca:	db1f      	blt.n	800c10c <_strtol_l.isra.0+0xc4>
 800c0cc:	45a9      	cmp	r9, r5
 800c0ce:	d31d      	bcc.n	800c10c <_strtol_l.isra.0+0xc4>
 800c0d0:	d101      	bne.n	800c0d6 <_strtol_l.isra.0+0x8e>
 800c0d2:	45a2      	cmp	sl, r4
 800c0d4:	db1a      	blt.n	800c10c <_strtol_l.isra.0+0xc4>
 800c0d6:	fb05 4503 	mla	r5, r5, r3, r4
 800c0da:	2601      	movs	r6, #1
 800c0dc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800c0e0:	e7eb      	b.n	800c0ba <_strtol_l.isra.0+0x72>
 800c0e2:	2c2b      	cmp	r4, #43	; 0x2b
 800c0e4:	bf08      	it	eq
 800c0e6:	f89e 4000 	ldrbeq.w	r4, [lr]
 800c0ea:	46a8      	mov	r8, r5
 800c0ec:	bf08      	it	eq
 800c0ee:	f106 0e02 	addeq.w	lr, r6, #2
 800c0f2:	e7c7      	b.n	800c084 <_strtol_l.isra.0+0x3c>
 800c0f4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800c0f8:	2f19      	cmp	r7, #25
 800c0fa:	d801      	bhi.n	800c100 <_strtol_l.isra.0+0xb8>
 800c0fc:	3c37      	subs	r4, #55	; 0x37
 800c0fe:	e7e1      	b.n	800c0c4 <_strtol_l.isra.0+0x7c>
 800c100:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800c104:	2f19      	cmp	r7, #25
 800c106:	d804      	bhi.n	800c112 <_strtol_l.isra.0+0xca>
 800c108:	3c57      	subs	r4, #87	; 0x57
 800c10a:	e7db      	b.n	800c0c4 <_strtol_l.isra.0+0x7c>
 800c10c:	f04f 36ff 	mov.w	r6, #4294967295
 800c110:	e7e4      	b.n	800c0dc <_strtol_l.isra.0+0x94>
 800c112:	2e00      	cmp	r6, #0
 800c114:	da05      	bge.n	800c122 <_strtol_l.isra.0+0xda>
 800c116:	2322      	movs	r3, #34	; 0x22
 800c118:	6003      	str	r3, [r0, #0]
 800c11a:	4665      	mov	r5, ip
 800c11c:	b942      	cbnz	r2, 800c130 <_strtol_l.isra.0+0xe8>
 800c11e:	4628      	mov	r0, r5
 800c120:	e79d      	b.n	800c05e <_strtol_l.isra.0+0x16>
 800c122:	f1b8 0f00 	cmp.w	r8, #0
 800c126:	d000      	beq.n	800c12a <_strtol_l.isra.0+0xe2>
 800c128:	426d      	negs	r5, r5
 800c12a:	2a00      	cmp	r2, #0
 800c12c:	d0f7      	beq.n	800c11e <_strtol_l.isra.0+0xd6>
 800c12e:	b10e      	cbz	r6, 800c134 <_strtol_l.isra.0+0xec>
 800c130:	f10e 31ff 	add.w	r1, lr, #4294967295
 800c134:	6011      	str	r1, [r2, #0]
 800c136:	e7f2      	b.n	800c11e <_strtol_l.isra.0+0xd6>
 800c138:	2430      	movs	r4, #48	; 0x30
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d1b3      	bne.n	800c0a6 <_strtol_l.isra.0+0x5e>
 800c13e:	2308      	movs	r3, #8
 800c140:	e7b1      	b.n	800c0a6 <_strtol_l.isra.0+0x5e>
 800c142:	2c30      	cmp	r4, #48	; 0x30
 800c144:	d0a4      	beq.n	800c090 <_strtol_l.isra.0+0x48>
 800c146:	230a      	movs	r3, #10
 800c148:	e7ad      	b.n	800c0a6 <_strtol_l.isra.0+0x5e>
 800c14a:	bf00      	nop
 800c14c:	0800f72d 	.word	0x0800f72d

0800c150 <strtol>:
 800c150:	4613      	mov	r3, r2
 800c152:	460a      	mov	r2, r1
 800c154:	4601      	mov	r1, r0
 800c156:	4802      	ldr	r0, [pc, #8]	; (800c160 <strtol+0x10>)
 800c158:	6800      	ldr	r0, [r0, #0]
 800c15a:	f7ff bf75 	b.w	800c048 <_strtol_l.isra.0>
 800c15e:	bf00      	nop
 800c160:	20000060 	.word	0x20000060

0800c164 <__assert_func>:
 800c164:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c166:	4614      	mov	r4, r2
 800c168:	461a      	mov	r2, r3
 800c16a:	4b09      	ldr	r3, [pc, #36]	; (800c190 <__assert_func+0x2c>)
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	4605      	mov	r5, r0
 800c170:	68d8      	ldr	r0, [r3, #12]
 800c172:	b14c      	cbz	r4, 800c188 <__assert_func+0x24>
 800c174:	4b07      	ldr	r3, [pc, #28]	; (800c194 <__assert_func+0x30>)
 800c176:	9100      	str	r1, [sp, #0]
 800c178:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c17c:	4906      	ldr	r1, [pc, #24]	; (800c198 <__assert_func+0x34>)
 800c17e:	462b      	mov	r3, r5
 800c180:	f000 ff5c 	bl	800d03c <fiprintf>
 800c184:	f002 fc9c 	bl	800eac0 <abort>
 800c188:	4b04      	ldr	r3, [pc, #16]	; (800c19c <__assert_func+0x38>)
 800c18a:	461c      	mov	r4, r3
 800c18c:	e7f3      	b.n	800c176 <__assert_func+0x12>
 800c18e:	bf00      	nop
 800c190:	20000060 	.word	0x20000060
 800c194:	0800f6f0 	.word	0x0800f6f0
 800c198:	0800f6fd 	.word	0x0800f6fd
 800c19c:	0800f72b 	.word	0x0800f72b

0800c1a0 <quorem>:
 800c1a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1a4:	6903      	ldr	r3, [r0, #16]
 800c1a6:	690c      	ldr	r4, [r1, #16]
 800c1a8:	42a3      	cmp	r3, r4
 800c1aa:	4607      	mov	r7, r0
 800c1ac:	f2c0 8081 	blt.w	800c2b2 <quorem+0x112>
 800c1b0:	3c01      	subs	r4, #1
 800c1b2:	f101 0814 	add.w	r8, r1, #20
 800c1b6:	f100 0514 	add.w	r5, r0, #20
 800c1ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c1be:	9301      	str	r3, [sp, #4]
 800c1c0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c1c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c1c8:	3301      	adds	r3, #1
 800c1ca:	429a      	cmp	r2, r3
 800c1cc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c1d0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c1d4:	fbb2 f6f3 	udiv	r6, r2, r3
 800c1d8:	d331      	bcc.n	800c23e <quorem+0x9e>
 800c1da:	f04f 0e00 	mov.w	lr, #0
 800c1de:	4640      	mov	r0, r8
 800c1e0:	46ac      	mov	ip, r5
 800c1e2:	46f2      	mov	sl, lr
 800c1e4:	f850 2b04 	ldr.w	r2, [r0], #4
 800c1e8:	b293      	uxth	r3, r2
 800c1ea:	fb06 e303 	mla	r3, r6, r3, lr
 800c1ee:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c1f2:	b29b      	uxth	r3, r3
 800c1f4:	ebaa 0303 	sub.w	r3, sl, r3
 800c1f8:	0c12      	lsrs	r2, r2, #16
 800c1fa:	f8dc a000 	ldr.w	sl, [ip]
 800c1fe:	fb06 e202 	mla	r2, r6, r2, lr
 800c202:	fa13 f38a 	uxtah	r3, r3, sl
 800c206:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c20a:	fa1f fa82 	uxth.w	sl, r2
 800c20e:	f8dc 2000 	ldr.w	r2, [ip]
 800c212:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800c216:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c21a:	b29b      	uxth	r3, r3
 800c21c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c220:	4581      	cmp	r9, r0
 800c222:	f84c 3b04 	str.w	r3, [ip], #4
 800c226:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c22a:	d2db      	bcs.n	800c1e4 <quorem+0x44>
 800c22c:	f855 300b 	ldr.w	r3, [r5, fp]
 800c230:	b92b      	cbnz	r3, 800c23e <quorem+0x9e>
 800c232:	9b01      	ldr	r3, [sp, #4]
 800c234:	3b04      	subs	r3, #4
 800c236:	429d      	cmp	r5, r3
 800c238:	461a      	mov	r2, r3
 800c23a:	d32e      	bcc.n	800c29a <quorem+0xfa>
 800c23c:	613c      	str	r4, [r7, #16]
 800c23e:	4638      	mov	r0, r7
 800c240:	f001 fd86 	bl	800dd50 <__mcmp>
 800c244:	2800      	cmp	r0, #0
 800c246:	db24      	blt.n	800c292 <quorem+0xf2>
 800c248:	3601      	adds	r6, #1
 800c24a:	4628      	mov	r0, r5
 800c24c:	f04f 0c00 	mov.w	ip, #0
 800c250:	f858 2b04 	ldr.w	r2, [r8], #4
 800c254:	f8d0 e000 	ldr.w	lr, [r0]
 800c258:	b293      	uxth	r3, r2
 800c25a:	ebac 0303 	sub.w	r3, ip, r3
 800c25e:	0c12      	lsrs	r2, r2, #16
 800c260:	fa13 f38e 	uxtah	r3, r3, lr
 800c264:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c268:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c26c:	b29b      	uxth	r3, r3
 800c26e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c272:	45c1      	cmp	r9, r8
 800c274:	f840 3b04 	str.w	r3, [r0], #4
 800c278:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c27c:	d2e8      	bcs.n	800c250 <quorem+0xb0>
 800c27e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c282:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c286:	b922      	cbnz	r2, 800c292 <quorem+0xf2>
 800c288:	3b04      	subs	r3, #4
 800c28a:	429d      	cmp	r5, r3
 800c28c:	461a      	mov	r2, r3
 800c28e:	d30a      	bcc.n	800c2a6 <quorem+0x106>
 800c290:	613c      	str	r4, [r7, #16]
 800c292:	4630      	mov	r0, r6
 800c294:	b003      	add	sp, #12
 800c296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c29a:	6812      	ldr	r2, [r2, #0]
 800c29c:	3b04      	subs	r3, #4
 800c29e:	2a00      	cmp	r2, #0
 800c2a0:	d1cc      	bne.n	800c23c <quorem+0x9c>
 800c2a2:	3c01      	subs	r4, #1
 800c2a4:	e7c7      	b.n	800c236 <quorem+0x96>
 800c2a6:	6812      	ldr	r2, [r2, #0]
 800c2a8:	3b04      	subs	r3, #4
 800c2aa:	2a00      	cmp	r2, #0
 800c2ac:	d1f0      	bne.n	800c290 <quorem+0xf0>
 800c2ae:	3c01      	subs	r4, #1
 800c2b0:	e7eb      	b.n	800c28a <quorem+0xea>
 800c2b2:	2000      	movs	r0, #0
 800c2b4:	e7ee      	b.n	800c294 <quorem+0xf4>
	...

0800c2b8 <_dtoa_r>:
 800c2b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2bc:	ed2d 8b02 	vpush	{d8}
 800c2c0:	ec57 6b10 	vmov	r6, r7, d0
 800c2c4:	b095      	sub	sp, #84	; 0x54
 800c2c6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c2c8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c2cc:	9105      	str	r1, [sp, #20]
 800c2ce:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800c2d2:	4604      	mov	r4, r0
 800c2d4:	9209      	str	r2, [sp, #36]	; 0x24
 800c2d6:	930f      	str	r3, [sp, #60]	; 0x3c
 800c2d8:	b975      	cbnz	r5, 800c2f8 <_dtoa_r+0x40>
 800c2da:	2010      	movs	r0, #16
 800c2dc:	f001 fa56 	bl	800d78c <malloc>
 800c2e0:	4602      	mov	r2, r0
 800c2e2:	6260      	str	r0, [r4, #36]	; 0x24
 800c2e4:	b920      	cbnz	r0, 800c2f0 <_dtoa_r+0x38>
 800c2e6:	4bb2      	ldr	r3, [pc, #712]	; (800c5b0 <_dtoa_r+0x2f8>)
 800c2e8:	21ea      	movs	r1, #234	; 0xea
 800c2ea:	48b2      	ldr	r0, [pc, #712]	; (800c5b4 <_dtoa_r+0x2fc>)
 800c2ec:	f7ff ff3a 	bl	800c164 <__assert_func>
 800c2f0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c2f4:	6005      	str	r5, [r0, #0]
 800c2f6:	60c5      	str	r5, [r0, #12]
 800c2f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c2fa:	6819      	ldr	r1, [r3, #0]
 800c2fc:	b151      	cbz	r1, 800c314 <_dtoa_r+0x5c>
 800c2fe:	685a      	ldr	r2, [r3, #4]
 800c300:	604a      	str	r2, [r1, #4]
 800c302:	2301      	movs	r3, #1
 800c304:	4093      	lsls	r3, r2
 800c306:	608b      	str	r3, [r1, #8]
 800c308:	4620      	mov	r0, r4
 800c30a:	f001 fa99 	bl	800d840 <_Bfree>
 800c30e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c310:	2200      	movs	r2, #0
 800c312:	601a      	str	r2, [r3, #0]
 800c314:	1e3b      	subs	r3, r7, #0
 800c316:	bfb9      	ittee	lt
 800c318:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c31c:	9303      	strlt	r3, [sp, #12]
 800c31e:	2300      	movge	r3, #0
 800c320:	f8c8 3000 	strge.w	r3, [r8]
 800c324:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800c328:	4ba3      	ldr	r3, [pc, #652]	; (800c5b8 <_dtoa_r+0x300>)
 800c32a:	bfbc      	itt	lt
 800c32c:	2201      	movlt	r2, #1
 800c32e:	f8c8 2000 	strlt.w	r2, [r8]
 800c332:	ea33 0309 	bics.w	r3, r3, r9
 800c336:	d11b      	bne.n	800c370 <_dtoa_r+0xb8>
 800c338:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c33a:	f242 730f 	movw	r3, #9999	; 0x270f
 800c33e:	6013      	str	r3, [r2, #0]
 800c340:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c344:	4333      	orrs	r3, r6
 800c346:	f000 857a 	beq.w	800ce3e <_dtoa_r+0xb86>
 800c34a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c34c:	b963      	cbnz	r3, 800c368 <_dtoa_r+0xb0>
 800c34e:	4b9b      	ldr	r3, [pc, #620]	; (800c5bc <_dtoa_r+0x304>)
 800c350:	e024      	b.n	800c39c <_dtoa_r+0xe4>
 800c352:	4b9b      	ldr	r3, [pc, #620]	; (800c5c0 <_dtoa_r+0x308>)
 800c354:	9300      	str	r3, [sp, #0]
 800c356:	3308      	adds	r3, #8
 800c358:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c35a:	6013      	str	r3, [r2, #0]
 800c35c:	9800      	ldr	r0, [sp, #0]
 800c35e:	b015      	add	sp, #84	; 0x54
 800c360:	ecbd 8b02 	vpop	{d8}
 800c364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c368:	4b94      	ldr	r3, [pc, #592]	; (800c5bc <_dtoa_r+0x304>)
 800c36a:	9300      	str	r3, [sp, #0]
 800c36c:	3303      	adds	r3, #3
 800c36e:	e7f3      	b.n	800c358 <_dtoa_r+0xa0>
 800c370:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c374:	2200      	movs	r2, #0
 800c376:	ec51 0b17 	vmov	r0, r1, d7
 800c37a:	2300      	movs	r3, #0
 800c37c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800c380:	f7f4 fbaa 	bl	8000ad8 <__aeabi_dcmpeq>
 800c384:	4680      	mov	r8, r0
 800c386:	b158      	cbz	r0, 800c3a0 <_dtoa_r+0xe8>
 800c388:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c38a:	2301      	movs	r3, #1
 800c38c:	6013      	str	r3, [r2, #0]
 800c38e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c390:	2b00      	cmp	r3, #0
 800c392:	f000 8551 	beq.w	800ce38 <_dtoa_r+0xb80>
 800c396:	488b      	ldr	r0, [pc, #556]	; (800c5c4 <_dtoa_r+0x30c>)
 800c398:	6018      	str	r0, [r3, #0]
 800c39a:	1e43      	subs	r3, r0, #1
 800c39c:	9300      	str	r3, [sp, #0]
 800c39e:	e7dd      	b.n	800c35c <_dtoa_r+0xa4>
 800c3a0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800c3a4:	aa12      	add	r2, sp, #72	; 0x48
 800c3a6:	a913      	add	r1, sp, #76	; 0x4c
 800c3a8:	4620      	mov	r0, r4
 800c3aa:	f001 fdf1 	bl	800df90 <__d2b>
 800c3ae:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c3b2:	4683      	mov	fp, r0
 800c3b4:	2d00      	cmp	r5, #0
 800c3b6:	d07c      	beq.n	800c4b2 <_dtoa_r+0x1fa>
 800c3b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c3ba:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800c3be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c3c2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800c3c6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c3ca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c3ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c3d2:	4b7d      	ldr	r3, [pc, #500]	; (800c5c8 <_dtoa_r+0x310>)
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	4630      	mov	r0, r6
 800c3d8:	4639      	mov	r1, r7
 800c3da:	f7f3 ff5d 	bl	8000298 <__aeabi_dsub>
 800c3de:	a36e      	add	r3, pc, #440	; (adr r3, 800c598 <_dtoa_r+0x2e0>)
 800c3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3e4:	f7f4 f910 	bl	8000608 <__aeabi_dmul>
 800c3e8:	a36d      	add	r3, pc, #436	; (adr r3, 800c5a0 <_dtoa_r+0x2e8>)
 800c3ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ee:	f7f3 ff55 	bl	800029c <__adddf3>
 800c3f2:	4606      	mov	r6, r0
 800c3f4:	4628      	mov	r0, r5
 800c3f6:	460f      	mov	r7, r1
 800c3f8:	f7f4 f89c 	bl	8000534 <__aeabi_i2d>
 800c3fc:	a36a      	add	r3, pc, #424	; (adr r3, 800c5a8 <_dtoa_r+0x2f0>)
 800c3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c402:	f7f4 f901 	bl	8000608 <__aeabi_dmul>
 800c406:	4602      	mov	r2, r0
 800c408:	460b      	mov	r3, r1
 800c40a:	4630      	mov	r0, r6
 800c40c:	4639      	mov	r1, r7
 800c40e:	f7f3 ff45 	bl	800029c <__adddf3>
 800c412:	4606      	mov	r6, r0
 800c414:	460f      	mov	r7, r1
 800c416:	f7f4 fba7 	bl	8000b68 <__aeabi_d2iz>
 800c41a:	2200      	movs	r2, #0
 800c41c:	4682      	mov	sl, r0
 800c41e:	2300      	movs	r3, #0
 800c420:	4630      	mov	r0, r6
 800c422:	4639      	mov	r1, r7
 800c424:	f7f4 fb62 	bl	8000aec <__aeabi_dcmplt>
 800c428:	b148      	cbz	r0, 800c43e <_dtoa_r+0x186>
 800c42a:	4650      	mov	r0, sl
 800c42c:	f7f4 f882 	bl	8000534 <__aeabi_i2d>
 800c430:	4632      	mov	r2, r6
 800c432:	463b      	mov	r3, r7
 800c434:	f7f4 fb50 	bl	8000ad8 <__aeabi_dcmpeq>
 800c438:	b908      	cbnz	r0, 800c43e <_dtoa_r+0x186>
 800c43a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c43e:	f1ba 0f16 	cmp.w	sl, #22
 800c442:	d854      	bhi.n	800c4ee <_dtoa_r+0x236>
 800c444:	4b61      	ldr	r3, [pc, #388]	; (800c5cc <_dtoa_r+0x314>)
 800c446:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c44a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c44e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c452:	f7f4 fb4b 	bl	8000aec <__aeabi_dcmplt>
 800c456:	2800      	cmp	r0, #0
 800c458:	d04b      	beq.n	800c4f2 <_dtoa_r+0x23a>
 800c45a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c45e:	2300      	movs	r3, #0
 800c460:	930e      	str	r3, [sp, #56]	; 0x38
 800c462:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c464:	1b5d      	subs	r5, r3, r5
 800c466:	1e6b      	subs	r3, r5, #1
 800c468:	9304      	str	r3, [sp, #16]
 800c46a:	bf43      	ittte	mi
 800c46c:	2300      	movmi	r3, #0
 800c46e:	f1c5 0801 	rsbmi	r8, r5, #1
 800c472:	9304      	strmi	r3, [sp, #16]
 800c474:	f04f 0800 	movpl.w	r8, #0
 800c478:	f1ba 0f00 	cmp.w	sl, #0
 800c47c:	db3b      	blt.n	800c4f6 <_dtoa_r+0x23e>
 800c47e:	9b04      	ldr	r3, [sp, #16]
 800c480:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800c484:	4453      	add	r3, sl
 800c486:	9304      	str	r3, [sp, #16]
 800c488:	2300      	movs	r3, #0
 800c48a:	9306      	str	r3, [sp, #24]
 800c48c:	9b05      	ldr	r3, [sp, #20]
 800c48e:	2b09      	cmp	r3, #9
 800c490:	d869      	bhi.n	800c566 <_dtoa_r+0x2ae>
 800c492:	2b05      	cmp	r3, #5
 800c494:	bfc4      	itt	gt
 800c496:	3b04      	subgt	r3, #4
 800c498:	9305      	strgt	r3, [sp, #20]
 800c49a:	9b05      	ldr	r3, [sp, #20]
 800c49c:	f1a3 0302 	sub.w	r3, r3, #2
 800c4a0:	bfcc      	ite	gt
 800c4a2:	2500      	movgt	r5, #0
 800c4a4:	2501      	movle	r5, #1
 800c4a6:	2b03      	cmp	r3, #3
 800c4a8:	d869      	bhi.n	800c57e <_dtoa_r+0x2c6>
 800c4aa:	e8df f003 	tbb	[pc, r3]
 800c4ae:	4e2c      	.short	0x4e2c
 800c4b0:	5a4c      	.short	0x5a4c
 800c4b2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800c4b6:	441d      	add	r5, r3
 800c4b8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c4bc:	2b20      	cmp	r3, #32
 800c4be:	bfc1      	itttt	gt
 800c4c0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c4c4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c4c8:	fa09 f303 	lslgt.w	r3, r9, r3
 800c4cc:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c4d0:	bfda      	itte	le
 800c4d2:	f1c3 0320 	rsble	r3, r3, #32
 800c4d6:	fa06 f003 	lslle.w	r0, r6, r3
 800c4da:	4318      	orrgt	r0, r3
 800c4dc:	f7f4 f81a 	bl	8000514 <__aeabi_ui2d>
 800c4e0:	2301      	movs	r3, #1
 800c4e2:	4606      	mov	r6, r0
 800c4e4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c4e8:	3d01      	subs	r5, #1
 800c4ea:	9310      	str	r3, [sp, #64]	; 0x40
 800c4ec:	e771      	b.n	800c3d2 <_dtoa_r+0x11a>
 800c4ee:	2301      	movs	r3, #1
 800c4f0:	e7b6      	b.n	800c460 <_dtoa_r+0x1a8>
 800c4f2:	900e      	str	r0, [sp, #56]	; 0x38
 800c4f4:	e7b5      	b.n	800c462 <_dtoa_r+0x1aa>
 800c4f6:	f1ca 0300 	rsb	r3, sl, #0
 800c4fa:	9306      	str	r3, [sp, #24]
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	eba8 080a 	sub.w	r8, r8, sl
 800c502:	930d      	str	r3, [sp, #52]	; 0x34
 800c504:	e7c2      	b.n	800c48c <_dtoa_r+0x1d4>
 800c506:	2300      	movs	r3, #0
 800c508:	9308      	str	r3, [sp, #32]
 800c50a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	dc39      	bgt.n	800c584 <_dtoa_r+0x2cc>
 800c510:	f04f 0901 	mov.w	r9, #1
 800c514:	f8cd 9004 	str.w	r9, [sp, #4]
 800c518:	464b      	mov	r3, r9
 800c51a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800c51e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c520:	2200      	movs	r2, #0
 800c522:	6042      	str	r2, [r0, #4]
 800c524:	2204      	movs	r2, #4
 800c526:	f102 0614 	add.w	r6, r2, #20
 800c52a:	429e      	cmp	r6, r3
 800c52c:	6841      	ldr	r1, [r0, #4]
 800c52e:	d92f      	bls.n	800c590 <_dtoa_r+0x2d8>
 800c530:	4620      	mov	r0, r4
 800c532:	f001 f945 	bl	800d7c0 <_Balloc>
 800c536:	9000      	str	r0, [sp, #0]
 800c538:	2800      	cmp	r0, #0
 800c53a:	d14b      	bne.n	800c5d4 <_dtoa_r+0x31c>
 800c53c:	4b24      	ldr	r3, [pc, #144]	; (800c5d0 <_dtoa_r+0x318>)
 800c53e:	4602      	mov	r2, r0
 800c540:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c544:	e6d1      	b.n	800c2ea <_dtoa_r+0x32>
 800c546:	2301      	movs	r3, #1
 800c548:	e7de      	b.n	800c508 <_dtoa_r+0x250>
 800c54a:	2300      	movs	r3, #0
 800c54c:	9308      	str	r3, [sp, #32]
 800c54e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c550:	eb0a 0903 	add.w	r9, sl, r3
 800c554:	f109 0301 	add.w	r3, r9, #1
 800c558:	2b01      	cmp	r3, #1
 800c55a:	9301      	str	r3, [sp, #4]
 800c55c:	bfb8      	it	lt
 800c55e:	2301      	movlt	r3, #1
 800c560:	e7dd      	b.n	800c51e <_dtoa_r+0x266>
 800c562:	2301      	movs	r3, #1
 800c564:	e7f2      	b.n	800c54c <_dtoa_r+0x294>
 800c566:	2501      	movs	r5, #1
 800c568:	2300      	movs	r3, #0
 800c56a:	9305      	str	r3, [sp, #20]
 800c56c:	9508      	str	r5, [sp, #32]
 800c56e:	f04f 39ff 	mov.w	r9, #4294967295
 800c572:	2200      	movs	r2, #0
 800c574:	f8cd 9004 	str.w	r9, [sp, #4]
 800c578:	2312      	movs	r3, #18
 800c57a:	9209      	str	r2, [sp, #36]	; 0x24
 800c57c:	e7cf      	b.n	800c51e <_dtoa_r+0x266>
 800c57e:	2301      	movs	r3, #1
 800c580:	9308      	str	r3, [sp, #32]
 800c582:	e7f4      	b.n	800c56e <_dtoa_r+0x2b6>
 800c584:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800c588:	f8cd 9004 	str.w	r9, [sp, #4]
 800c58c:	464b      	mov	r3, r9
 800c58e:	e7c6      	b.n	800c51e <_dtoa_r+0x266>
 800c590:	3101      	adds	r1, #1
 800c592:	6041      	str	r1, [r0, #4]
 800c594:	0052      	lsls	r2, r2, #1
 800c596:	e7c6      	b.n	800c526 <_dtoa_r+0x26e>
 800c598:	636f4361 	.word	0x636f4361
 800c59c:	3fd287a7 	.word	0x3fd287a7
 800c5a0:	8b60c8b3 	.word	0x8b60c8b3
 800c5a4:	3fc68a28 	.word	0x3fc68a28
 800c5a8:	509f79fb 	.word	0x509f79fb
 800c5ac:	3fd34413 	.word	0x3fd34413
 800c5b0:	0800f678 	.word	0x0800f678
 800c5b4:	0800f83a 	.word	0x0800f83a
 800c5b8:	7ff00000 	.word	0x7ff00000
 800c5bc:	0800f836 	.word	0x0800f836
 800c5c0:	0800f82d 	.word	0x0800f82d
 800c5c4:	0800f605 	.word	0x0800f605
 800c5c8:	3ff80000 	.word	0x3ff80000
 800c5cc:	0800fa18 	.word	0x0800fa18
 800c5d0:	0800f899 	.word	0x0800f899
 800c5d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c5d6:	9a00      	ldr	r2, [sp, #0]
 800c5d8:	601a      	str	r2, [r3, #0]
 800c5da:	9b01      	ldr	r3, [sp, #4]
 800c5dc:	2b0e      	cmp	r3, #14
 800c5de:	f200 80ad 	bhi.w	800c73c <_dtoa_r+0x484>
 800c5e2:	2d00      	cmp	r5, #0
 800c5e4:	f000 80aa 	beq.w	800c73c <_dtoa_r+0x484>
 800c5e8:	f1ba 0f00 	cmp.w	sl, #0
 800c5ec:	dd36      	ble.n	800c65c <_dtoa_r+0x3a4>
 800c5ee:	4ac3      	ldr	r2, [pc, #780]	; (800c8fc <_dtoa_r+0x644>)
 800c5f0:	f00a 030f 	and.w	r3, sl, #15
 800c5f4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c5f8:	ed93 7b00 	vldr	d7, [r3]
 800c5fc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800c600:	ea4f 172a 	mov.w	r7, sl, asr #4
 800c604:	eeb0 8a47 	vmov.f32	s16, s14
 800c608:	eef0 8a67 	vmov.f32	s17, s15
 800c60c:	d016      	beq.n	800c63c <_dtoa_r+0x384>
 800c60e:	4bbc      	ldr	r3, [pc, #752]	; (800c900 <_dtoa_r+0x648>)
 800c610:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c614:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c618:	f7f4 f920 	bl	800085c <__aeabi_ddiv>
 800c61c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c620:	f007 070f 	and.w	r7, r7, #15
 800c624:	2503      	movs	r5, #3
 800c626:	4eb6      	ldr	r6, [pc, #728]	; (800c900 <_dtoa_r+0x648>)
 800c628:	b957      	cbnz	r7, 800c640 <_dtoa_r+0x388>
 800c62a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c62e:	ec53 2b18 	vmov	r2, r3, d8
 800c632:	f7f4 f913 	bl	800085c <__aeabi_ddiv>
 800c636:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c63a:	e029      	b.n	800c690 <_dtoa_r+0x3d8>
 800c63c:	2502      	movs	r5, #2
 800c63e:	e7f2      	b.n	800c626 <_dtoa_r+0x36e>
 800c640:	07f9      	lsls	r1, r7, #31
 800c642:	d508      	bpl.n	800c656 <_dtoa_r+0x39e>
 800c644:	ec51 0b18 	vmov	r0, r1, d8
 800c648:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c64c:	f7f3 ffdc 	bl	8000608 <__aeabi_dmul>
 800c650:	ec41 0b18 	vmov	d8, r0, r1
 800c654:	3501      	adds	r5, #1
 800c656:	107f      	asrs	r7, r7, #1
 800c658:	3608      	adds	r6, #8
 800c65a:	e7e5      	b.n	800c628 <_dtoa_r+0x370>
 800c65c:	f000 80a6 	beq.w	800c7ac <_dtoa_r+0x4f4>
 800c660:	f1ca 0600 	rsb	r6, sl, #0
 800c664:	4ba5      	ldr	r3, [pc, #660]	; (800c8fc <_dtoa_r+0x644>)
 800c666:	4fa6      	ldr	r7, [pc, #664]	; (800c900 <_dtoa_r+0x648>)
 800c668:	f006 020f 	and.w	r2, r6, #15
 800c66c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c670:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c674:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c678:	f7f3 ffc6 	bl	8000608 <__aeabi_dmul>
 800c67c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c680:	1136      	asrs	r6, r6, #4
 800c682:	2300      	movs	r3, #0
 800c684:	2502      	movs	r5, #2
 800c686:	2e00      	cmp	r6, #0
 800c688:	f040 8085 	bne.w	800c796 <_dtoa_r+0x4de>
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d1d2      	bne.n	800c636 <_dtoa_r+0x37e>
 800c690:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c692:	2b00      	cmp	r3, #0
 800c694:	f000 808c 	beq.w	800c7b0 <_dtoa_r+0x4f8>
 800c698:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c69c:	4b99      	ldr	r3, [pc, #612]	; (800c904 <_dtoa_r+0x64c>)
 800c69e:	2200      	movs	r2, #0
 800c6a0:	4630      	mov	r0, r6
 800c6a2:	4639      	mov	r1, r7
 800c6a4:	f7f4 fa22 	bl	8000aec <__aeabi_dcmplt>
 800c6a8:	2800      	cmp	r0, #0
 800c6aa:	f000 8081 	beq.w	800c7b0 <_dtoa_r+0x4f8>
 800c6ae:	9b01      	ldr	r3, [sp, #4]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d07d      	beq.n	800c7b0 <_dtoa_r+0x4f8>
 800c6b4:	f1b9 0f00 	cmp.w	r9, #0
 800c6b8:	dd3c      	ble.n	800c734 <_dtoa_r+0x47c>
 800c6ba:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c6be:	9307      	str	r3, [sp, #28]
 800c6c0:	2200      	movs	r2, #0
 800c6c2:	4b91      	ldr	r3, [pc, #580]	; (800c908 <_dtoa_r+0x650>)
 800c6c4:	4630      	mov	r0, r6
 800c6c6:	4639      	mov	r1, r7
 800c6c8:	f7f3 ff9e 	bl	8000608 <__aeabi_dmul>
 800c6cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c6d0:	3501      	adds	r5, #1
 800c6d2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800c6d6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c6da:	4628      	mov	r0, r5
 800c6dc:	f7f3 ff2a 	bl	8000534 <__aeabi_i2d>
 800c6e0:	4632      	mov	r2, r6
 800c6e2:	463b      	mov	r3, r7
 800c6e4:	f7f3 ff90 	bl	8000608 <__aeabi_dmul>
 800c6e8:	4b88      	ldr	r3, [pc, #544]	; (800c90c <_dtoa_r+0x654>)
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	f7f3 fdd6 	bl	800029c <__adddf3>
 800c6f0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c6f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c6f8:	9303      	str	r3, [sp, #12]
 800c6fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d15c      	bne.n	800c7ba <_dtoa_r+0x502>
 800c700:	4b83      	ldr	r3, [pc, #524]	; (800c910 <_dtoa_r+0x658>)
 800c702:	2200      	movs	r2, #0
 800c704:	4630      	mov	r0, r6
 800c706:	4639      	mov	r1, r7
 800c708:	f7f3 fdc6 	bl	8000298 <__aeabi_dsub>
 800c70c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c710:	4606      	mov	r6, r0
 800c712:	460f      	mov	r7, r1
 800c714:	f7f4 fa08 	bl	8000b28 <__aeabi_dcmpgt>
 800c718:	2800      	cmp	r0, #0
 800c71a:	f040 8296 	bne.w	800cc4a <_dtoa_r+0x992>
 800c71e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c722:	4630      	mov	r0, r6
 800c724:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c728:	4639      	mov	r1, r7
 800c72a:	f7f4 f9df 	bl	8000aec <__aeabi_dcmplt>
 800c72e:	2800      	cmp	r0, #0
 800c730:	f040 8288 	bne.w	800cc44 <_dtoa_r+0x98c>
 800c734:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c738:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c73c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c73e:	2b00      	cmp	r3, #0
 800c740:	f2c0 8158 	blt.w	800c9f4 <_dtoa_r+0x73c>
 800c744:	f1ba 0f0e 	cmp.w	sl, #14
 800c748:	f300 8154 	bgt.w	800c9f4 <_dtoa_r+0x73c>
 800c74c:	4b6b      	ldr	r3, [pc, #428]	; (800c8fc <_dtoa_r+0x644>)
 800c74e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c752:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c756:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c758:	2b00      	cmp	r3, #0
 800c75a:	f280 80e3 	bge.w	800c924 <_dtoa_r+0x66c>
 800c75e:	9b01      	ldr	r3, [sp, #4]
 800c760:	2b00      	cmp	r3, #0
 800c762:	f300 80df 	bgt.w	800c924 <_dtoa_r+0x66c>
 800c766:	f040 826d 	bne.w	800cc44 <_dtoa_r+0x98c>
 800c76a:	4b69      	ldr	r3, [pc, #420]	; (800c910 <_dtoa_r+0x658>)
 800c76c:	2200      	movs	r2, #0
 800c76e:	4640      	mov	r0, r8
 800c770:	4649      	mov	r1, r9
 800c772:	f7f3 ff49 	bl	8000608 <__aeabi_dmul>
 800c776:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c77a:	f7f4 f9cb 	bl	8000b14 <__aeabi_dcmpge>
 800c77e:	9e01      	ldr	r6, [sp, #4]
 800c780:	4637      	mov	r7, r6
 800c782:	2800      	cmp	r0, #0
 800c784:	f040 8243 	bne.w	800cc0e <_dtoa_r+0x956>
 800c788:	9d00      	ldr	r5, [sp, #0]
 800c78a:	2331      	movs	r3, #49	; 0x31
 800c78c:	f805 3b01 	strb.w	r3, [r5], #1
 800c790:	f10a 0a01 	add.w	sl, sl, #1
 800c794:	e23f      	b.n	800cc16 <_dtoa_r+0x95e>
 800c796:	07f2      	lsls	r2, r6, #31
 800c798:	d505      	bpl.n	800c7a6 <_dtoa_r+0x4ee>
 800c79a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c79e:	f7f3 ff33 	bl	8000608 <__aeabi_dmul>
 800c7a2:	3501      	adds	r5, #1
 800c7a4:	2301      	movs	r3, #1
 800c7a6:	1076      	asrs	r6, r6, #1
 800c7a8:	3708      	adds	r7, #8
 800c7aa:	e76c      	b.n	800c686 <_dtoa_r+0x3ce>
 800c7ac:	2502      	movs	r5, #2
 800c7ae:	e76f      	b.n	800c690 <_dtoa_r+0x3d8>
 800c7b0:	9b01      	ldr	r3, [sp, #4]
 800c7b2:	f8cd a01c 	str.w	sl, [sp, #28]
 800c7b6:	930c      	str	r3, [sp, #48]	; 0x30
 800c7b8:	e78d      	b.n	800c6d6 <_dtoa_r+0x41e>
 800c7ba:	9900      	ldr	r1, [sp, #0]
 800c7bc:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c7be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c7c0:	4b4e      	ldr	r3, [pc, #312]	; (800c8fc <_dtoa_r+0x644>)
 800c7c2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c7c6:	4401      	add	r1, r0
 800c7c8:	9102      	str	r1, [sp, #8]
 800c7ca:	9908      	ldr	r1, [sp, #32]
 800c7cc:	eeb0 8a47 	vmov.f32	s16, s14
 800c7d0:	eef0 8a67 	vmov.f32	s17, s15
 800c7d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c7d8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c7dc:	2900      	cmp	r1, #0
 800c7de:	d045      	beq.n	800c86c <_dtoa_r+0x5b4>
 800c7e0:	494c      	ldr	r1, [pc, #304]	; (800c914 <_dtoa_r+0x65c>)
 800c7e2:	2000      	movs	r0, #0
 800c7e4:	f7f4 f83a 	bl	800085c <__aeabi_ddiv>
 800c7e8:	ec53 2b18 	vmov	r2, r3, d8
 800c7ec:	f7f3 fd54 	bl	8000298 <__aeabi_dsub>
 800c7f0:	9d00      	ldr	r5, [sp, #0]
 800c7f2:	ec41 0b18 	vmov	d8, r0, r1
 800c7f6:	4639      	mov	r1, r7
 800c7f8:	4630      	mov	r0, r6
 800c7fa:	f7f4 f9b5 	bl	8000b68 <__aeabi_d2iz>
 800c7fe:	900c      	str	r0, [sp, #48]	; 0x30
 800c800:	f7f3 fe98 	bl	8000534 <__aeabi_i2d>
 800c804:	4602      	mov	r2, r0
 800c806:	460b      	mov	r3, r1
 800c808:	4630      	mov	r0, r6
 800c80a:	4639      	mov	r1, r7
 800c80c:	f7f3 fd44 	bl	8000298 <__aeabi_dsub>
 800c810:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c812:	3330      	adds	r3, #48	; 0x30
 800c814:	f805 3b01 	strb.w	r3, [r5], #1
 800c818:	ec53 2b18 	vmov	r2, r3, d8
 800c81c:	4606      	mov	r6, r0
 800c81e:	460f      	mov	r7, r1
 800c820:	f7f4 f964 	bl	8000aec <__aeabi_dcmplt>
 800c824:	2800      	cmp	r0, #0
 800c826:	d165      	bne.n	800c8f4 <_dtoa_r+0x63c>
 800c828:	4632      	mov	r2, r6
 800c82a:	463b      	mov	r3, r7
 800c82c:	4935      	ldr	r1, [pc, #212]	; (800c904 <_dtoa_r+0x64c>)
 800c82e:	2000      	movs	r0, #0
 800c830:	f7f3 fd32 	bl	8000298 <__aeabi_dsub>
 800c834:	ec53 2b18 	vmov	r2, r3, d8
 800c838:	f7f4 f958 	bl	8000aec <__aeabi_dcmplt>
 800c83c:	2800      	cmp	r0, #0
 800c83e:	f040 80b9 	bne.w	800c9b4 <_dtoa_r+0x6fc>
 800c842:	9b02      	ldr	r3, [sp, #8]
 800c844:	429d      	cmp	r5, r3
 800c846:	f43f af75 	beq.w	800c734 <_dtoa_r+0x47c>
 800c84a:	4b2f      	ldr	r3, [pc, #188]	; (800c908 <_dtoa_r+0x650>)
 800c84c:	ec51 0b18 	vmov	r0, r1, d8
 800c850:	2200      	movs	r2, #0
 800c852:	f7f3 fed9 	bl	8000608 <__aeabi_dmul>
 800c856:	4b2c      	ldr	r3, [pc, #176]	; (800c908 <_dtoa_r+0x650>)
 800c858:	ec41 0b18 	vmov	d8, r0, r1
 800c85c:	2200      	movs	r2, #0
 800c85e:	4630      	mov	r0, r6
 800c860:	4639      	mov	r1, r7
 800c862:	f7f3 fed1 	bl	8000608 <__aeabi_dmul>
 800c866:	4606      	mov	r6, r0
 800c868:	460f      	mov	r7, r1
 800c86a:	e7c4      	b.n	800c7f6 <_dtoa_r+0x53e>
 800c86c:	ec51 0b17 	vmov	r0, r1, d7
 800c870:	f7f3 feca 	bl	8000608 <__aeabi_dmul>
 800c874:	9b02      	ldr	r3, [sp, #8]
 800c876:	9d00      	ldr	r5, [sp, #0]
 800c878:	930c      	str	r3, [sp, #48]	; 0x30
 800c87a:	ec41 0b18 	vmov	d8, r0, r1
 800c87e:	4639      	mov	r1, r7
 800c880:	4630      	mov	r0, r6
 800c882:	f7f4 f971 	bl	8000b68 <__aeabi_d2iz>
 800c886:	9011      	str	r0, [sp, #68]	; 0x44
 800c888:	f7f3 fe54 	bl	8000534 <__aeabi_i2d>
 800c88c:	4602      	mov	r2, r0
 800c88e:	460b      	mov	r3, r1
 800c890:	4630      	mov	r0, r6
 800c892:	4639      	mov	r1, r7
 800c894:	f7f3 fd00 	bl	8000298 <__aeabi_dsub>
 800c898:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c89a:	3330      	adds	r3, #48	; 0x30
 800c89c:	f805 3b01 	strb.w	r3, [r5], #1
 800c8a0:	9b02      	ldr	r3, [sp, #8]
 800c8a2:	429d      	cmp	r5, r3
 800c8a4:	4606      	mov	r6, r0
 800c8a6:	460f      	mov	r7, r1
 800c8a8:	f04f 0200 	mov.w	r2, #0
 800c8ac:	d134      	bne.n	800c918 <_dtoa_r+0x660>
 800c8ae:	4b19      	ldr	r3, [pc, #100]	; (800c914 <_dtoa_r+0x65c>)
 800c8b0:	ec51 0b18 	vmov	r0, r1, d8
 800c8b4:	f7f3 fcf2 	bl	800029c <__adddf3>
 800c8b8:	4602      	mov	r2, r0
 800c8ba:	460b      	mov	r3, r1
 800c8bc:	4630      	mov	r0, r6
 800c8be:	4639      	mov	r1, r7
 800c8c0:	f7f4 f932 	bl	8000b28 <__aeabi_dcmpgt>
 800c8c4:	2800      	cmp	r0, #0
 800c8c6:	d175      	bne.n	800c9b4 <_dtoa_r+0x6fc>
 800c8c8:	ec53 2b18 	vmov	r2, r3, d8
 800c8cc:	4911      	ldr	r1, [pc, #68]	; (800c914 <_dtoa_r+0x65c>)
 800c8ce:	2000      	movs	r0, #0
 800c8d0:	f7f3 fce2 	bl	8000298 <__aeabi_dsub>
 800c8d4:	4602      	mov	r2, r0
 800c8d6:	460b      	mov	r3, r1
 800c8d8:	4630      	mov	r0, r6
 800c8da:	4639      	mov	r1, r7
 800c8dc:	f7f4 f906 	bl	8000aec <__aeabi_dcmplt>
 800c8e0:	2800      	cmp	r0, #0
 800c8e2:	f43f af27 	beq.w	800c734 <_dtoa_r+0x47c>
 800c8e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c8e8:	1e6b      	subs	r3, r5, #1
 800c8ea:	930c      	str	r3, [sp, #48]	; 0x30
 800c8ec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c8f0:	2b30      	cmp	r3, #48	; 0x30
 800c8f2:	d0f8      	beq.n	800c8e6 <_dtoa_r+0x62e>
 800c8f4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800c8f8:	e04a      	b.n	800c990 <_dtoa_r+0x6d8>
 800c8fa:	bf00      	nop
 800c8fc:	0800fa18 	.word	0x0800fa18
 800c900:	0800f9f0 	.word	0x0800f9f0
 800c904:	3ff00000 	.word	0x3ff00000
 800c908:	40240000 	.word	0x40240000
 800c90c:	401c0000 	.word	0x401c0000
 800c910:	40140000 	.word	0x40140000
 800c914:	3fe00000 	.word	0x3fe00000
 800c918:	4baf      	ldr	r3, [pc, #700]	; (800cbd8 <_dtoa_r+0x920>)
 800c91a:	f7f3 fe75 	bl	8000608 <__aeabi_dmul>
 800c91e:	4606      	mov	r6, r0
 800c920:	460f      	mov	r7, r1
 800c922:	e7ac      	b.n	800c87e <_dtoa_r+0x5c6>
 800c924:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c928:	9d00      	ldr	r5, [sp, #0]
 800c92a:	4642      	mov	r2, r8
 800c92c:	464b      	mov	r3, r9
 800c92e:	4630      	mov	r0, r6
 800c930:	4639      	mov	r1, r7
 800c932:	f7f3 ff93 	bl	800085c <__aeabi_ddiv>
 800c936:	f7f4 f917 	bl	8000b68 <__aeabi_d2iz>
 800c93a:	9002      	str	r0, [sp, #8]
 800c93c:	f7f3 fdfa 	bl	8000534 <__aeabi_i2d>
 800c940:	4642      	mov	r2, r8
 800c942:	464b      	mov	r3, r9
 800c944:	f7f3 fe60 	bl	8000608 <__aeabi_dmul>
 800c948:	4602      	mov	r2, r0
 800c94a:	460b      	mov	r3, r1
 800c94c:	4630      	mov	r0, r6
 800c94e:	4639      	mov	r1, r7
 800c950:	f7f3 fca2 	bl	8000298 <__aeabi_dsub>
 800c954:	9e02      	ldr	r6, [sp, #8]
 800c956:	9f01      	ldr	r7, [sp, #4]
 800c958:	3630      	adds	r6, #48	; 0x30
 800c95a:	f805 6b01 	strb.w	r6, [r5], #1
 800c95e:	9e00      	ldr	r6, [sp, #0]
 800c960:	1bae      	subs	r6, r5, r6
 800c962:	42b7      	cmp	r7, r6
 800c964:	4602      	mov	r2, r0
 800c966:	460b      	mov	r3, r1
 800c968:	d137      	bne.n	800c9da <_dtoa_r+0x722>
 800c96a:	f7f3 fc97 	bl	800029c <__adddf3>
 800c96e:	4642      	mov	r2, r8
 800c970:	464b      	mov	r3, r9
 800c972:	4606      	mov	r6, r0
 800c974:	460f      	mov	r7, r1
 800c976:	f7f4 f8d7 	bl	8000b28 <__aeabi_dcmpgt>
 800c97a:	b9c8      	cbnz	r0, 800c9b0 <_dtoa_r+0x6f8>
 800c97c:	4642      	mov	r2, r8
 800c97e:	464b      	mov	r3, r9
 800c980:	4630      	mov	r0, r6
 800c982:	4639      	mov	r1, r7
 800c984:	f7f4 f8a8 	bl	8000ad8 <__aeabi_dcmpeq>
 800c988:	b110      	cbz	r0, 800c990 <_dtoa_r+0x6d8>
 800c98a:	9b02      	ldr	r3, [sp, #8]
 800c98c:	07d9      	lsls	r1, r3, #31
 800c98e:	d40f      	bmi.n	800c9b0 <_dtoa_r+0x6f8>
 800c990:	4620      	mov	r0, r4
 800c992:	4659      	mov	r1, fp
 800c994:	f000 ff54 	bl	800d840 <_Bfree>
 800c998:	2300      	movs	r3, #0
 800c99a:	702b      	strb	r3, [r5, #0]
 800c99c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c99e:	f10a 0001 	add.w	r0, sl, #1
 800c9a2:	6018      	str	r0, [r3, #0]
 800c9a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	f43f acd8 	beq.w	800c35c <_dtoa_r+0xa4>
 800c9ac:	601d      	str	r5, [r3, #0]
 800c9ae:	e4d5      	b.n	800c35c <_dtoa_r+0xa4>
 800c9b0:	f8cd a01c 	str.w	sl, [sp, #28]
 800c9b4:	462b      	mov	r3, r5
 800c9b6:	461d      	mov	r5, r3
 800c9b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c9bc:	2a39      	cmp	r2, #57	; 0x39
 800c9be:	d108      	bne.n	800c9d2 <_dtoa_r+0x71a>
 800c9c0:	9a00      	ldr	r2, [sp, #0]
 800c9c2:	429a      	cmp	r2, r3
 800c9c4:	d1f7      	bne.n	800c9b6 <_dtoa_r+0x6fe>
 800c9c6:	9a07      	ldr	r2, [sp, #28]
 800c9c8:	9900      	ldr	r1, [sp, #0]
 800c9ca:	3201      	adds	r2, #1
 800c9cc:	9207      	str	r2, [sp, #28]
 800c9ce:	2230      	movs	r2, #48	; 0x30
 800c9d0:	700a      	strb	r2, [r1, #0]
 800c9d2:	781a      	ldrb	r2, [r3, #0]
 800c9d4:	3201      	adds	r2, #1
 800c9d6:	701a      	strb	r2, [r3, #0]
 800c9d8:	e78c      	b.n	800c8f4 <_dtoa_r+0x63c>
 800c9da:	4b7f      	ldr	r3, [pc, #508]	; (800cbd8 <_dtoa_r+0x920>)
 800c9dc:	2200      	movs	r2, #0
 800c9de:	f7f3 fe13 	bl	8000608 <__aeabi_dmul>
 800c9e2:	2200      	movs	r2, #0
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	4606      	mov	r6, r0
 800c9e8:	460f      	mov	r7, r1
 800c9ea:	f7f4 f875 	bl	8000ad8 <__aeabi_dcmpeq>
 800c9ee:	2800      	cmp	r0, #0
 800c9f0:	d09b      	beq.n	800c92a <_dtoa_r+0x672>
 800c9f2:	e7cd      	b.n	800c990 <_dtoa_r+0x6d8>
 800c9f4:	9a08      	ldr	r2, [sp, #32]
 800c9f6:	2a00      	cmp	r2, #0
 800c9f8:	f000 80c4 	beq.w	800cb84 <_dtoa_r+0x8cc>
 800c9fc:	9a05      	ldr	r2, [sp, #20]
 800c9fe:	2a01      	cmp	r2, #1
 800ca00:	f300 80a8 	bgt.w	800cb54 <_dtoa_r+0x89c>
 800ca04:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ca06:	2a00      	cmp	r2, #0
 800ca08:	f000 80a0 	beq.w	800cb4c <_dtoa_r+0x894>
 800ca0c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ca10:	9e06      	ldr	r6, [sp, #24]
 800ca12:	4645      	mov	r5, r8
 800ca14:	9a04      	ldr	r2, [sp, #16]
 800ca16:	2101      	movs	r1, #1
 800ca18:	441a      	add	r2, r3
 800ca1a:	4620      	mov	r0, r4
 800ca1c:	4498      	add	r8, r3
 800ca1e:	9204      	str	r2, [sp, #16]
 800ca20:	f001 f814 	bl	800da4c <__i2b>
 800ca24:	4607      	mov	r7, r0
 800ca26:	2d00      	cmp	r5, #0
 800ca28:	dd0b      	ble.n	800ca42 <_dtoa_r+0x78a>
 800ca2a:	9b04      	ldr	r3, [sp, #16]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	dd08      	ble.n	800ca42 <_dtoa_r+0x78a>
 800ca30:	42ab      	cmp	r3, r5
 800ca32:	9a04      	ldr	r2, [sp, #16]
 800ca34:	bfa8      	it	ge
 800ca36:	462b      	movge	r3, r5
 800ca38:	eba8 0803 	sub.w	r8, r8, r3
 800ca3c:	1aed      	subs	r5, r5, r3
 800ca3e:	1ad3      	subs	r3, r2, r3
 800ca40:	9304      	str	r3, [sp, #16]
 800ca42:	9b06      	ldr	r3, [sp, #24]
 800ca44:	b1fb      	cbz	r3, 800ca86 <_dtoa_r+0x7ce>
 800ca46:	9b08      	ldr	r3, [sp, #32]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	f000 809f 	beq.w	800cb8c <_dtoa_r+0x8d4>
 800ca4e:	2e00      	cmp	r6, #0
 800ca50:	dd11      	ble.n	800ca76 <_dtoa_r+0x7be>
 800ca52:	4639      	mov	r1, r7
 800ca54:	4632      	mov	r2, r6
 800ca56:	4620      	mov	r0, r4
 800ca58:	f001 f8b4 	bl	800dbc4 <__pow5mult>
 800ca5c:	465a      	mov	r2, fp
 800ca5e:	4601      	mov	r1, r0
 800ca60:	4607      	mov	r7, r0
 800ca62:	4620      	mov	r0, r4
 800ca64:	f001 f808 	bl	800da78 <__multiply>
 800ca68:	4659      	mov	r1, fp
 800ca6a:	9007      	str	r0, [sp, #28]
 800ca6c:	4620      	mov	r0, r4
 800ca6e:	f000 fee7 	bl	800d840 <_Bfree>
 800ca72:	9b07      	ldr	r3, [sp, #28]
 800ca74:	469b      	mov	fp, r3
 800ca76:	9b06      	ldr	r3, [sp, #24]
 800ca78:	1b9a      	subs	r2, r3, r6
 800ca7a:	d004      	beq.n	800ca86 <_dtoa_r+0x7ce>
 800ca7c:	4659      	mov	r1, fp
 800ca7e:	4620      	mov	r0, r4
 800ca80:	f001 f8a0 	bl	800dbc4 <__pow5mult>
 800ca84:	4683      	mov	fp, r0
 800ca86:	2101      	movs	r1, #1
 800ca88:	4620      	mov	r0, r4
 800ca8a:	f000 ffdf 	bl	800da4c <__i2b>
 800ca8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	4606      	mov	r6, r0
 800ca94:	dd7c      	ble.n	800cb90 <_dtoa_r+0x8d8>
 800ca96:	461a      	mov	r2, r3
 800ca98:	4601      	mov	r1, r0
 800ca9a:	4620      	mov	r0, r4
 800ca9c:	f001 f892 	bl	800dbc4 <__pow5mult>
 800caa0:	9b05      	ldr	r3, [sp, #20]
 800caa2:	2b01      	cmp	r3, #1
 800caa4:	4606      	mov	r6, r0
 800caa6:	dd76      	ble.n	800cb96 <_dtoa_r+0x8de>
 800caa8:	2300      	movs	r3, #0
 800caaa:	9306      	str	r3, [sp, #24]
 800caac:	6933      	ldr	r3, [r6, #16]
 800caae:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800cab2:	6918      	ldr	r0, [r3, #16]
 800cab4:	f000 ff7a 	bl	800d9ac <__hi0bits>
 800cab8:	f1c0 0020 	rsb	r0, r0, #32
 800cabc:	9b04      	ldr	r3, [sp, #16]
 800cabe:	4418      	add	r0, r3
 800cac0:	f010 001f 	ands.w	r0, r0, #31
 800cac4:	f000 8086 	beq.w	800cbd4 <_dtoa_r+0x91c>
 800cac8:	f1c0 0320 	rsb	r3, r0, #32
 800cacc:	2b04      	cmp	r3, #4
 800cace:	dd7f      	ble.n	800cbd0 <_dtoa_r+0x918>
 800cad0:	f1c0 001c 	rsb	r0, r0, #28
 800cad4:	9b04      	ldr	r3, [sp, #16]
 800cad6:	4403      	add	r3, r0
 800cad8:	4480      	add	r8, r0
 800cada:	4405      	add	r5, r0
 800cadc:	9304      	str	r3, [sp, #16]
 800cade:	f1b8 0f00 	cmp.w	r8, #0
 800cae2:	dd05      	ble.n	800caf0 <_dtoa_r+0x838>
 800cae4:	4659      	mov	r1, fp
 800cae6:	4642      	mov	r2, r8
 800cae8:	4620      	mov	r0, r4
 800caea:	f001 f8c5 	bl	800dc78 <__lshift>
 800caee:	4683      	mov	fp, r0
 800caf0:	9b04      	ldr	r3, [sp, #16]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	dd05      	ble.n	800cb02 <_dtoa_r+0x84a>
 800caf6:	4631      	mov	r1, r6
 800caf8:	461a      	mov	r2, r3
 800cafa:	4620      	mov	r0, r4
 800cafc:	f001 f8bc 	bl	800dc78 <__lshift>
 800cb00:	4606      	mov	r6, r0
 800cb02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d069      	beq.n	800cbdc <_dtoa_r+0x924>
 800cb08:	4631      	mov	r1, r6
 800cb0a:	4658      	mov	r0, fp
 800cb0c:	f001 f920 	bl	800dd50 <__mcmp>
 800cb10:	2800      	cmp	r0, #0
 800cb12:	da63      	bge.n	800cbdc <_dtoa_r+0x924>
 800cb14:	2300      	movs	r3, #0
 800cb16:	4659      	mov	r1, fp
 800cb18:	220a      	movs	r2, #10
 800cb1a:	4620      	mov	r0, r4
 800cb1c:	f000 feb2 	bl	800d884 <__multadd>
 800cb20:	9b08      	ldr	r3, [sp, #32]
 800cb22:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cb26:	4683      	mov	fp, r0
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	f000 818f 	beq.w	800ce4c <_dtoa_r+0xb94>
 800cb2e:	4639      	mov	r1, r7
 800cb30:	2300      	movs	r3, #0
 800cb32:	220a      	movs	r2, #10
 800cb34:	4620      	mov	r0, r4
 800cb36:	f000 fea5 	bl	800d884 <__multadd>
 800cb3a:	f1b9 0f00 	cmp.w	r9, #0
 800cb3e:	4607      	mov	r7, r0
 800cb40:	f300 808e 	bgt.w	800cc60 <_dtoa_r+0x9a8>
 800cb44:	9b05      	ldr	r3, [sp, #20]
 800cb46:	2b02      	cmp	r3, #2
 800cb48:	dc50      	bgt.n	800cbec <_dtoa_r+0x934>
 800cb4a:	e089      	b.n	800cc60 <_dtoa_r+0x9a8>
 800cb4c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cb4e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cb52:	e75d      	b.n	800ca10 <_dtoa_r+0x758>
 800cb54:	9b01      	ldr	r3, [sp, #4]
 800cb56:	1e5e      	subs	r6, r3, #1
 800cb58:	9b06      	ldr	r3, [sp, #24]
 800cb5a:	42b3      	cmp	r3, r6
 800cb5c:	bfbf      	itttt	lt
 800cb5e:	9b06      	ldrlt	r3, [sp, #24]
 800cb60:	9606      	strlt	r6, [sp, #24]
 800cb62:	1af2      	sublt	r2, r6, r3
 800cb64:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800cb66:	bfb6      	itet	lt
 800cb68:	189b      	addlt	r3, r3, r2
 800cb6a:	1b9e      	subge	r6, r3, r6
 800cb6c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800cb6e:	9b01      	ldr	r3, [sp, #4]
 800cb70:	bfb8      	it	lt
 800cb72:	2600      	movlt	r6, #0
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	bfb5      	itete	lt
 800cb78:	eba8 0503 	sublt.w	r5, r8, r3
 800cb7c:	9b01      	ldrge	r3, [sp, #4]
 800cb7e:	2300      	movlt	r3, #0
 800cb80:	4645      	movge	r5, r8
 800cb82:	e747      	b.n	800ca14 <_dtoa_r+0x75c>
 800cb84:	9e06      	ldr	r6, [sp, #24]
 800cb86:	9f08      	ldr	r7, [sp, #32]
 800cb88:	4645      	mov	r5, r8
 800cb8a:	e74c      	b.n	800ca26 <_dtoa_r+0x76e>
 800cb8c:	9a06      	ldr	r2, [sp, #24]
 800cb8e:	e775      	b.n	800ca7c <_dtoa_r+0x7c4>
 800cb90:	9b05      	ldr	r3, [sp, #20]
 800cb92:	2b01      	cmp	r3, #1
 800cb94:	dc18      	bgt.n	800cbc8 <_dtoa_r+0x910>
 800cb96:	9b02      	ldr	r3, [sp, #8]
 800cb98:	b9b3      	cbnz	r3, 800cbc8 <_dtoa_r+0x910>
 800cb9a:	9b03      	ldr	r3, [sp, #12]
 800cb9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cba0:	b9a3      	cbnz	r3, 800cbcc <_dtoa_r+0x914>
 800cba2:	9b03      	ldr	r3, [sp, #12]
 800cba4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cba8:	0d1b      	lsrs	r3, r3, #20
 800cbaa:	051b      	lsls	r3, r3, #20
 800cbac:	b12b      	cbz	r3, 800cbba <_dtoa_r+0x902>
 800cbae:	9b04      	ldr	r3, [sp, #16]
 800cbb0:	3301      	adds	r3, #1
 800cbb2:	9304      	str	r3, [sp, #16]
 800cbb4:	f108 0801 	add.w	r8, r8, #1
 800cbb8:	2301      	movs	r3, #1
 800cbba:	9306      	str	r3, [sp, #24]
 800cbbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	f47f af74 	bne.w	800caac <_dtoa_r+0x7f4>
 800cbc4:	2001      	movs	r0, #1
 800cbc6:	e779      	b.n	800cabc <_dtoa_r+0x804>
 800cbc8:	2300      	movs	r3, #0
 800cbca:	e7f6      	b.n	800cbba <_dtoa_r+0x902>
 800cbcc:	9b02      	ldr	r3, [sp, #8]
 800cbce:	e7f4      	b.n	800cbba <_dtoa_r+0x902>
 800cbd0:	d085      	beq.n	800cade <_dtoa_r+0x826>
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	301c      	adds	r0, #28
 800cbd6:	e77d      	b.n	800cad4 <_dtoa_r+0x81c>
 800cbd8:	40240000 	.word	0x40240000
 800cbdc:	9b01      	ldr	r3, [sp, #4]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	dc38      	bgt.n	800cc54 <_dtoa_r+0x99c>
 800cbe2:	9b05      	ldr	r3, [sp, #20]
 800cbe4:	2b02      	cmp	r3, #2
 800cbe6:	dd35      	ble.n	800cc54 <_dtoa_r+0x99c>
 800cbe8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800cbec:	f1b9 0f00 	cmp.w	r9, #0
 800cbf0:	d10d      	bne.n	800cc0e <_dtoa_r+0x956>
 800cbf2:	4631      	mov	r1, r6
 800cbf4:	464b      	mov	r3, r9
 800cbf6:	2205      	movs	r2, #5
 800cbf8:	4620      	mov	r0, r4
 800cbfa:	f000 fe43 	bl	800d884 <__multadd>
 800cbfe:	4601      	mov	r1, r0
 800cc00:	4606      	mov	r6, r0
 800cc02:	4658      	mov	r0, fp
 800cc04:	f001 f8a4 	bl	800dd50 <__mcmp>
 800cc08:	2800      	cmp	r0, #0
 800cc0a:	f73f adbd 	bgt.w	800c788 <_dtoa_r+0x4d0>
 800cc0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc10:	9d00      	ldr	r5, [sp, #0]
 800cc12:	ea6f 0a03 	mvn.w	sl, r3
 800cc16:	f04f 0800 	mov.w	r8, #0
 800cc1a:	4631      	mov	r1, r6
 800cc1c:	4620      	mov	r0, r4
 800cc1e:	f000 fe0f 	bl	800d840 <_Bfree>
 800cc22:	2f00      	cmp	r7, #0
 800cc24:	f43f aeb4 	beq.w	800c990 <_dtoa_r+0x6d8>
 800cc28:	f1b8 0f00 	cmp.w	r8, #0
 800cc2c:	d005      	beq.n	800cc3a <_dtoa_r+0x982>
 800cc2e:	45b8      	cmp	r8, r7
 800cc30:	d003      	beq.n	800cc3a <_dtoa_r+0x982>
 800cc32:	4641      	mov	r1, r8
 800cc34:	4620      	mov	r0, r4
 800cc36:	f000 fe03 	bl	800d840 <_Bfree>
 800cc3a:	4639      	mov	r1, r7
 800cc3c:	4620      	mov	r0, r4
 800cc3e:	f000 fdff 	bl	800d840 <_Bfree>
 800cc42:	e6a5      	b.n	800c990 <_dtoa_r+0x6d8>
 800cc44:	2600      	movs	r6, #0
 800cc46:	4637      	mov	r7, r6
 800cc48:	e7e1      	b.n	800cc0e <_dtoa_r+0x956>
 800cc4a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800cc4c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800cc50:	4637      	mov	r7, r6
 800cc52:	e599      	b.n	800c788 <_dtoa_r+0x4d0>
 800cc54:	9b08      	ldr	r3, [sp, #32]
 800cc56:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	f000 80fd 	beq.w	800ce5a <_dtoa_r+0xba2>
 800cc60:	2d00      	cmp	r5, #0
 800cc62:	dd05      	ble.n	800cc70 <_dtoa_r+0x9b8>
 800cc64:	4639      	mov	r1, r7
 800cc66:	462a      	mov	r2, r5
 800cc68:	4620      	mov	r0, r4
 800cc6a:	f001 f805 	bl	800dc78 <__lshift>
 800cc6e:	4607      	mov	r7, r0
 800cc70:	9b06      	ldr	r3, [sp, #24]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d05c      	beq.n	800cd30 <_dtoa_r+0xa78>
 800cc76:	6879      	ldr	r1, [r7, #4]
 800cc78:	4620      	mov	r0, r4
 800cc7a:	f000 fda1 	bl	800d7c0 <_Balloc>
 800cc7e:	4605      	mov	r5, r0
 800cc80:	b928      	cbnz	r0, 800cc8e <_dtoa_r+0x9d6>
 800cc82:	4b80      	ldr	r3, [pc, #512]	; (800ce84 <_dtoa_r+0xbcc>)
 800cc84:	4602      	mov	r2, r0
 800cc86:	f240 21ea 	movw	r1, #746	; 0x2ea
 800cc8a:	f7ff bb2e 	b.w	800c2ea <_dtoa_r+0x32>
 800cc8e:	693a      	ldr	r2, [r7, #16]
 800cc90:	3202      	adds	r2, #2
 800cc92:	0092      	lsls	r2, r2, #2
 800cc94:	f107 010c 	add.w	r1, r7, #12
 800cc98:	300c      	adds	r0, #12
 800cc9a:	f7fd fe33 	bl	800a904 <memcpy>
 800cc9e:	2201      	movs	r2, #1
 800cca0:	4629      	mov	r1, r5
 800cca2:	4620      	mov	r0, r4
 800cca4:	f000 ffe8 	bl	800dc78 <__lshift>
 800cca8:	9b00      	ldr	r3, [sp, #0]
 800ccaa:	3301      	adds	r3, #1
 800ccac:	9301      	str	r3, [sp, #4]
 800ccae:	9b00      	ldr	r3, [sp, #0]
 800ccb0:	444b      	add	r3, r9
 800ccb2:	9307      	str	r3, [sp, #28]
 800ccb4:	9b02      	ldr	r3, [sp, #8]
 800ccb6:	f003 0301 	and.w	r3, r3, #1
 800ccba:	46b8      	mov	r8, r7
 800ccbc:	9306      	str	r3, [sp, #24]
 800ccbe:	4607      	mov	r7, r0
 800ccc0:	9b01      	ldr	r3, [sp, #4]
 800ccc2:	4631      	mov	r1, r6
 800ccc4:	3b01      	subs	r3, #1
 800ccc6:	4658      	mov	r0, fp
 800ccc8:	9302      	str	r3, [sp, #8]
 800ccca:	f7ff fa69 	bl	800c1a0 <quorem>
 800ccce:	4603      	mov	r3, r0
 800ccd0:	3330      	adds	r3, #48	; 0x30
 800ccd2:	9004      	str	r0, [sp, #16]
 800ccd4:	4641      	mov	r1, r8
 800ccd6:	4658      	mov	r0, fp
 800ccd8:	9308      	str	r3, [sp, #32]
 800ccda:	f001 f839 	bl	800dd50 <__mcmp>
 800ccde:	463a      	mov	r2, r7
 800cce0:	4681      	mov	r9, r0
 800cce2:	4631      	mov	r1, r6
 800cce4:	4620      	mov	r0, r4
 800cce6:	f001 f84f 	bl	800dd88 <__mdiff>
 800ccea:	68c2      	ldr	r2, [r0, #12]
 800ccec:	9b08      	ldr	r3, [sp, #32]
 800ccee:	4605      	mov	r5, r0
 800ccf0:	bb02      	cbnz	r2, 800cd34 <_dtoa_r+0xa7c>
 800ccf2:	4601      	mov	r1, r0
 800ccf4:	4658      	mov	r0, fp
 800ccf6:	f001 f82b 	bl	800dd50 <__mcmp>
 800ccfa:	9b08      	ldr	r3, [sp, #32]
 800ccfc:	4602      	mov	r2, r0
 800ccfe:	4629      	mov	r1, r5
 800cd00:	4620      	mov	r0, r4
 800cd02:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800cd06:	f000 fd9b 	bl	800d840 <_Bfree>
 800cd0a:	9b05      	ldr	r3, [sp, #20]
 800cd0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd0e:	9d01      	ldr	r5, [sp, #4]
 800cd10:	ea43 0102 	orr.w	r1, r3, r2
 800cd14:	9b06      	ldr	r3, [sp, #24]
 800cd16:	430b      	orrs	r3, r1
 800cd18:	9b08      	ldr	r3, [sp, #32]
 800cd1a:	d10d      	bne.n	800cd38 <_dtoa_r+0xa80>
 800cd1c:	2b39      	cmp	r3, #57	; 0x39
 800cd1e:	d029      	beq.n	800cd74 <_dtoa_r+0xabc>
 800cd20:	f1b9 0f00 	cmp.w	r9, #0
 800cd24:	dd01      	ble.n	800cd2a <_dtoa_r+0xa72>
 800cd26:	9b04      	ldr	r3, [sp, #16]
 800cd28:	3331      	adds	r3, #49	; 0x31
 800cd2a:	9a02      	ldr	r2, [sp, #8]
 800cd2c:	7013      	strb	r3, [r2, #0]
 800cd2e:	e774      	b.n	800cc1a <_dtoa_r+0x962>
 800cd30:	4638      	mov	r0, r7
 800cd32:	e7b9      	b.n	800cca8 <_dtoa_r+0x9f0>
 800cd34:	2201      	movs	r2, #1
 800cd36:	e7e2      	b.n	800ccfe <_dtoa_r+0xa46>
 800cd38:	f1b9 0f00 	cmp.w	r9, #0
 800cd3c:	db06      	blt.n	800cd4c <_dtoa_r+0xa94>
 800cd3e:	9905      	ldr	r1, [sp, #20]
 800cd40:	ea41 0909 	orr.w	r9, r1, r9
 800cd44:	9906      	ldr	r1, [sp, #24]
 800cd46:	ea59 0101 	orrs.w	r1, r9, r1
 800cd4a:	d120      	bne.n	800cd8e <_dtoa_r+0xad6>
 800cd4c:	2a00      	cmp	r2, #0
 800cd4e:	ddec      	ble.n	800cd2a <_dtoa_r+0xa72>
 800cd50:	4659      	mov	r1, fp
 800cd52:	2201      	movs	r2, #1
 800cd54:	4620      	mov	r0, r4
 800cd56:	9301      	str	r3, [sp, #4]
 800cd58:	f000 ff8e 	bl	800dc78 <__lshift>
 800cd5c:	4631      	mov	r1, r6
 800cd5e:	4683      	mov	fp, r0
 800cd60:	f000 fff6 	bl	800dd50 <__mcmp>
 800cd64:	2800      	cmp	r0, #0
 800cd66:	9b01      	ldr	r3, [sp, #4]
 800cd68:	dc02      	bgt.n	800cd70 <_dtoa_r+0xab8>
 800cd6a:	d1de      	bne.n	800cd2a <_dtoa_r+0xa72>
 800cd6c:	07da      	lsls	r2, r3, #31
 800cd6e:	d5dc      	bpl.n	800cd2a <_dtoa_r+0xa72>
 800cd70:	2b39      	cmp	r3, #57	; 0x39
 800cd72:	d1d8      	bne.n	800cd26 <_dtoa_r+0xa6e>
 800cd74:	9a02      	ldr	r2, [sp, #8]
 800cd76:	2339      	movs	r3, #57	; 0x39
 800cd78:	7013      	strb	r3, [r2, #0]
 800cd7a:	462b      	mov	r3, r5
 800cd7c:	461d      	mov	r5, r3
 800cd7e:	3b01      	subs	r3, #1
 800cd80:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800cd84:	2a39      	cmp	r2, #57	; 0x39
 800cd86:	d050      	beq.n	800ce2a <_dtoa_r+0xb72>
 800cd88:	3201      	adds	r2, #1
 800cd8a:	701a      	strb	r2, [r3, #0]
 800cd8c:	e745      	b.n	800cc1a <_dtoa_r+0x962>
 800cd8e:	2a00      	cmp	r2, #0
 800cd90:	dd03      	ble.n	800cd9a <_dtoa_r+0xae2>
 800cd92:	2b39      	cmp	r3, #57	; 0x39
 800cd94:	d0ee      	beq.n	800cd74 <_dtoa_r+0xabc>
 800cd96:	3301      	adds	r3, #1
 800cd98:	e7c7      	b.n	800cd2a <_dtoa_r+0xa72>
 800cd9a:	9a01      	ldr	r2, [sp, #4]
 800cd9c:	9907      	ldr	r1, [sp, #28]
 800cd9e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800cda2:	428a      	cmp	r2, r1
 800cda4:	d02a      	beq.n	800cdfc <_dtoa_r+0xb44>
 800cda6:	4659      	mov	r1, fp
 800cda8:	2300      	movs	r3, #0
 800cdaa:	220a      	movs	r2, #10
 800cdac:	4620      	mov	r0, r4
 800cdae:	f000 fd69 	bl	800d884 <__multadd>
 800cdb2:	45b8      	cmp	r8, r7
 800cdb4:	4683      	mov	fp, r0
 800cdb6:	f04f 0300 	mov.w	r3, #0
 800cdba:	f04f 020a 	mov.w	r2, #10
 800cdbe:	4641      	mov	r1, r8
 800cdc0:	4620      	mov	r0, r4
 800cdc2:	d107      	bne.n	800cdd4 <_dtoa_r+0xb1c>
 800cdc4:	f000 fd5e 	bl	800d884 <__multadd>
 800cdc8:	4680      	mov	r8, r0
 800cdca:	4607      	mov	r7, r0
 800cdcc:	9b01      	ldr	r3, [sp, #4]
 800cdce:	3301      	adds	r3, #1
 800cdd0:	9301      	str	r3, [sp, #4]
 800cdd2:	e775      	b.n	800ccc0 <_dtoa_r+0xa08>
 800cdd4:	f000 fd56 	bl	800d884 <__multadd>
 800cdd8:	4639      	mov	r1, r7
 800cdda:	4680      	mov	r8, r0
 800cddc:	2300      	movs	r3, #0
 800cdde:	220a      	movs	r2, #10
 800cde0:	4620      	mov	r0, r4
 800cde2:	f000 fd4f 	bl	800d884 <__multadd>
 800cde6:	4607      	mov	r7, r0
 800cde8:	e7f0      	b.n	800cdcc <_dtoa_r+0xb14>
 800cdea:	f1b9 0f00 	cmp.w	r9, #0
 800cdee:	9a00      	ldr	r2, [sp, #0]
 800cdf0:	bfcc      	ite	gt
 800cdf2:	464d      	movgt	r5, r9
 800cdf4:	2501      	movle	r5, #1
 800cdf6:	4415      	add	r5, r2
 800cdf8:	f04f 0800 	mov.w	r8, #0
 800cdfc:	4659      	mov	r1, fp
 800cdfe:	2201      	movs	r2, #1
 800ce00:	4620      	mov	r0, r4
 800ce02:	9301      	str	r3, [sp, #4]
 800ce04:	f000 ff38 	bl	800dc78 <__lshift>
 800ce08:	4631      	mov	r1, r6
 800ce0a:	4683      	mov	fp, r0
 800ce0c:	f000 ffa0 	bl	800dd50 <__mcmp>
 800ce10:	2800      	cmp	r0, #0
 800ce12:	dcb2      	bgt.n	800cd7a <_dtoa_r+0xac2>
 800ce14:	d102      	bne.n	800ce1c <_dtoa_r+0xb64>
 800ce16:	9b01      	ldr	r3, [sp, #4]
 800ce18:	07db      	lsls	r3, r3, #31
 800ce1a:	d4ae      	bmi.n	800cd7a <_dtoa_r+0xac2>
 800ce1c:	462b      	mov	r3, r5
 800ce1e:	461d      	mov	r5, r3
 800ce20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ce24:	2a30      	cmp	r2, #48	; 0x30
 800ce26:	d0fa      	beq.n	800ce1e <_dtoa_r+0xb66>
 800ce28:	e6f7      	b.n	800cc1a <_dtoa_r+0x962>
 800ce2a:	9a00      	ldr	r2, [sp, #0]
 800ce2c:	429a      	cmp	r2, r3
 800ce2e:	d1a5      	bne.n	800cd7c <_dtoa_r+0xac4>
 800ce30:	f10a 0a01 	add.w	sl, sl, #1
 800ce34:	2331      	movs	r3, #49	; 0x31
 800ce36:	e779      	b.n	800cd2c <_dtoa_r+0xa74>
 800ce38:	4b13      	ldr	r3, [pc, #76]	; (800ce88 <_dtoa_r+0xbd0>)
 800ce3a:	f7ff baaf 	b.w	800c39c <_dtoa_r+0xe4>
 800ce3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	f47f aa86 	bne.w	800c352 <_dtoa_r+0x9a>
 800ce46:	4b11      	ldr	r3, [pc, #68]	; (800ce8c <_dtoa_r+0xbd4>)
 800ce48:	f7ff baa8 	b.w	800c39c <_dtoa_r+0xe4>
 800ce4c:	f1b9 0f00 	cmp.w	r9, #0
 800ce50:	dc03      	bgt.n	800ce5a <_dtoa_r+0xba2>
 800ce52:	9b05      	ldr	r3, [sp, #20]
 800ce54:	2b02      	cmp	r3, #2
 800ce56:	f73f aec9 	bgt.w	800cbec <_dtoa_r+0x934>
 800ce5a:	9d00      	ldr	r5, [sp, #0]
 800ce5c:	4631      	mov	r1, r6
 800ce5e:	4658      	mov	r0, fp
 800ce60:	f7ff f99e 	bl	800c1a0 <quorem>
 800ce64:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ce68:	f805 3b01 	strb.w	r3, [r5], #1
 800ce6c:	9a00      	ldr	r2, [sp, #0]
 800ce6e:	1aaa      	subs	r2, r5, r2
 800ce70:	4591      	cmp	r9, r2
 800ce72:	ddba      	ble.n	800cdea <_dtoa_r+0xb32>
 800ce74:	4659      	mov	r1, fp
 800ce76:	2300      	movs	r3, #0
 800ce78:	220a      	movs	r2, #10
 800ce7a:	4620      	mov	r0, r4
 800ce7c:	f000 fd02 	bl	800d884 <__multadd>
 800ce80:	4683      	mov	fp, r0
 800ce82:	e7eb      	b.n	800ce5c <_dtoa_r+0xba4>
 800ce84:	0800f899 	.word	0x0800f899
 800ce88:	0800f604 	.word	0x0800f604
 800ce8c:	0800f82d 	.word	0x0800f82d

0800ce90 <std>:
 800ce90:	2300      	movs	r3, #0
 800ce92:	b510      	push	{r4, lr}
 800ce94:	4604      	mov	r4, r0
 800ce96:	e9c0 3300 	strd	r3, r3, [r0]
 800ce9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ce9e:	6083      	str	r3, [r0, #8]
 800cea0:	8181      	strh	r1, [r0, #12]
 800cea2:	6643      	str	r3, [r0, #100]	; 0x64
 800cea4:	81c2      	strh	r2, [r0, #14]
 800cea6:	6183      	str	r3, [r0, #24]
 800cea8:	4619      	mov	r1, r3
 800ceaa:	2208      	movs	r2, #8
 800ceac:	305c      	adds	r0, #92	; 0x5c
 800ceae:	f7fd fd37 	bl	800a920 <memset>
 800ceb2:	4b05      	ldr	r3, [pc, #20]	; (800cec8 <std+0x38>)
 800ceb4:	6263      	str	r3, [r4, #36]	; 0x24
 800ceb6:	4b05      	ldr	r3, [pc, #20]	; (800cecc <std+0x3c>)
 800ceb8:	62a3      	str	r3, [r4, #40]	; 0x28
 800ceba:	4b05      	ldr	r3, [pc, #20]	; (800ced0 <std+0x40>)
 800cebc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cebe:	4b05      	ldr	r3, [pc, #20]	; (800ced4 <std+0x44>)
 800cec0:	6224      	str	r4, [r4, #32]
 800cec2:	6323      	str	r3, [r4, #48]	; 0x30
 800cec4:	bd10      	pop	{r4, pc}
 800cec6:	bf00      	nop
 800cec8:	0800e855 	.word	0x0800e855
 800cecc:	0800e877 	.word	0x0800e877
 800ced0:	0800e8af 	.word	0x0800e8af
 800ced4:	0800e8d3 	.word	0x0800e8d3

0800ced8 <_cleanup_r>:
 800ced8:	4901      	ldr	r1, [pc, #4]	; (800cee0 <_cleanup_r+0x8>)
 800ceda:	f000 b8c1 	b.w	800d060 <_fwalk_reent>
 800cede:	bf00      	nop
 800cee0:	0800ebfd 	.word	0x0800ebfd

0800cee4 <__sfmoreglue>:
 800cee4:	b570      	push	{r4, r5, r6, lr}
 800cee6:	1e4a      	subs	r2, r1, #1
 800cee8:	2568      	movs	r5, #104	; 0x68
 800ceea:	4355      	muls	r5, r2
 800ceec:	460e      	mov	r6, r1
 800ceee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cef2:	f001 f97f 	bl	800e1f4 <_malloc_r>
 800cef6:	4604      	mov	r4, r0
 800cef8:	b140      	cbz	r0, 800cf0c <__sfmoreglue+0x28>
 800cefa:	2100      	movs	r1, #0
 800cefc:	e9c0 1600 	strd	r1, r6, [r0]
 800cf00:	300c      	adds	r0, #12
 800cf02:	60a0      	str	r0, [r4, #8]
 800cf04:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cf08:	f7fd fd0a 	bl	800a920 <memset>
 800cf0c:	4620      	mov	r0, r4
 800cf0e:	bd70      	pop	{r4, r5, r6, pc}

0800cf10 <__sfp_lock_acquire>:
 800cf10:	4801      	ldr	r0, [pc, #4]	; (800cf18 <__sfp_lock_acquire+0x8>)
 800cf12:	f000 bc38 	b.w	800d786 <__retarget_lock_acquire_recursive>
 800cf16:	bf00      	nop
 800cf18:	20000760 	.word	0x20000760

0800cf1c <__sfp_lock_release>:
 800cf1c:	4801      	ldr	r0, [pc, #4]	; (800cf24 <__sfp_lock_release+0x8>)
 800cf1e:	f000 bc33 	b.w	800d788 <__retarget_lock_release_recursive>
 800cf22:	bf00      	nop
 800cf24:	20000760 	.word	0x20000760

0800cf28 <__sinit_lock_acquire>:
 800cf28:	4801      	ldr	r0, [pc, #4]	; (800cf30 <__sinit_lock_acquire+0x8>)
 800cf2a:	f000 bc2c 	b.w	800d786 <__retarget_lock_acquire_recursive>
 800cf2e:	bf00      	nop
 800cf30:	2000075b 	.word	0x2000075b

0800cf34 <__sinit_lock_release>:
 800cf34:	4801      	ldr	r0, [pc, #4]	; (800cf3c <__sinit_lock_release+0x8>)
 800cf36:	f000 bc27 	b.w	800d788 <__retarget_lock_release_recursive>
 800cf3a:	bf00      	nop
 800cf3c:	2000075b 	.word	0x2000075b

0800cf40 <__sinit>:
 800cf40:	b510      	push	{r4, lr}
 800cf42:	4604      	mov	r4, r0
 800cf44:	f7ff fff0 	bl	800cf28 <__sinit_lock_acquire>
 800cf48:	69a3      	ldr	r3, [r4, #24]
 800cf4a:	b11b      	cbz	r3, 800cf54 <__sinit+0x14>
 800cf4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf50:	f7ff bff0 	b.w	800cf34 <__sinit_lock_release>
 800cf54:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cf58:	6523      	str	r3, [r4, #80]	; 0x50
 800cf5a:	4b13      	ldr	r3, [pc, #76]	; (800cfa8 <__sinit+0x68>)
 800cf5c:	4a13      	ldr	r2, [pc, #76]	; (800cfac <__sinit+0x6c>)
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	62a2      	str	r2, [r4, #40]	; 0x28
 800cf62:	42a3      	cmp	r3, r4
 800cf64:	bf04      	itt	eq
 800cf66:	2301      	moveq	r3, #1
 800cf68:	61a3      	streq	r3, [r4, #24]
 800cf6a:	4620      	mov	r0, r4
 800cf6c:	f000 f820 	bl	800cfb0 <__sfp>
 800cf70:	6060      	str	r0, [r4, #4]
 800cf72:	4620      	mov	r0, r4
 800cf74:	f000 f81c 	bl	800cfb0 <__sfp>
 800cf78:	60a0      	str	r0, [r4, #8]
 800cf7a:	4620      	mov	r0, r4
 800cf7c:	f000 f818 	bl	800cfb0 <__sfp>
 800cf80:	2200      	movs	r2, #0
 800cf82:	60e0      	str	r0, [r4, #12]
 800cf84:	2104      	movs	r1, #4
 800cf86:	6860      	ldr	r0, [r4, #4]
 800cf88:	f7ff ff82 	bl	800ce90 <std>
 800cf8c:	68a0      	ldr	r0, [r4, #8]
 800cf8e:	2201      	movs	r2, #1
 800cf90:	2109      	movs	r1, #9
 800cf92:	f7ff ff7d 	bl	800ce90 <std>
 800cf96:	68e0      	ldr	r0, [r4, #12]
 800cf98:	2202      	movs	r2, #2
 800cf9a:	2112      	movs	r1, #18
 800cf9c:	f7ff ff78 	bl	800ce90 <std>
 800cfa0:	2301      	movs	r3, #1
 800cfa2:	61a3      	str	r3, [r4, #24]
 800cfa4:	e7d2      	b.n	800cf4c <__sinit+0xc>
 800cfa6:	bf00      	nop
 800cfa8:	0800f5f0 	.word	0x0800f5f0
 800cfac:	0800ced9 	.word	0x0800ced9

0800cfb0 <__sfp>:
 800cfb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfb2:	4607      	mov	r7, r0
 800cfb4:	f7ff ffac 	bl	800cf10 <__sfp_lock_acquire>
 800cfb8:	4b1e      	ldr	r3, [pc, #120]	; (800d034 <__sfp+0x84>)
 800cfba:	681e      	ldr	r6, [r3, #0]
 800cfbc:	69b3      	ldr	r3, [r6, #24]
 800cfbe:	b913      	cbnz	r3, 800cfc6 <__sfp+0x16>
 800cfc0:	4630      	mov	r0, r6
 800cfc2:	f7ff ffbd 	bl	800cf40 <__sinit>
 800cfc6:	3648      	adds	r6, #72	; 0x48
 800cfc8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cfcc:	3b01      	subs	r3, #1
 800cfce:	d503      	bpl.n	800cfd8 <__sfp+0x28>
 800cfd0:	6833      	ldr	r3, [r6, #0]
 800cfd2:	b30b      	cbz	r3, 800d018 <__sfp+0x68>
 800cfd4:	6836      	ldr	r6, [r6, #0]
 800cfd6:	e7f7      	b.n	800cfc8 <__sfp+0x18>
 800cfd8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cfdc:	b9d5      	cbnz	r5, 800d014 <__sfp+0x64>
 800cfde:	4b16      	ldr	r3, [pc, #88]	; (800d038 <__sfp+0x88>)
 800cfe0:	60e3      	str	r3, [r4, #12]
 800cfe2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cfe6:	6665      	str	r5, [r4, #100]	; 0x64
 800cfe8:	f000 fbcc 	bl	800d784 <__retarget_lock_init_recursive>
 800cfec:	f7ff ff96 	bl	800cf1c <__sfp_lock_release>
 800cff0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cff4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cff8:	6025      	str	r5, [r4, #0]
 800cffa:	61a5      	str	r5, [r4, #24]
 800cffc:	2208      	movs	r2, #8
 800cffe:	4629      	mov	r1, r5
 800d000:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d004:	f7fd fc8c 	bl	800a920 <memset>
 800d008:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d00c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d010:	4620      	mov	r0, r4
 800d012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d014:	3468      	adds	r4, #104	; 0x68
 800d016:	e7d9      	b.n	800cfcc <__sfp+0x1c>
 800d018:	2104      	movs	r1, #4
 800d01a:	4638      	mov	r0, r7
 800d01c:	f7ff ff62 	bl	800cee4 <__sfmoreglue>
 800d020:	4604      	mov	r4, r0
 800d022:	6030      	str	r0, [r6, #0]
 800d024:	2800      	cmp	r0, #0
 800d026:	d1d5      	bne.n	800cfd4 <__sfp+0x24>
 800d028:	f7ff ff78 	bl	800cf1c <__sfp_lock_release>
 800d02c:	230c      	movs	r3, #12
 800d02e:	603b      	str	r3, [r7, #0]
 800d030:	e7ee      	b.n	800d010 <__sfp+0x60>
 800d032:	bf00      	nop
 800d034:	0800f5f0 	.word	0x0800f5f0
 800d038:	ffff0001 	.word	0xffff0001

0800d03c <fiprintf>:
 800d03c:	b40e      	push	{r1, r2, r3}
 800d03e:	b503      	push	{r0, r1, lr}
 800d040:	4601      	mov	r1, r0
 800d042:	ab03      	add	r3, sp, #12
 800d044:	4805      	ldr	r0, [pc, #20]	; (800d05c <fiprintf+0x20>)
 800d046:	f853 2b04 	ldr.w	r2, [r3], #4
 800d04a:	6800      	ldr	r0, [r0, #0]
 800d04c:	9301      	str	r3, [sp, #4]
 800d04e:	f001 fab1 	bl	800e5b4 <_vfiprintf_r>
 800d052:	b002      	add	sp, #8
 800d054:	f85d eb04 	ldr.w	lr, [sp], #4
 800d058:	b003      	add	sp, #12
 800d05a:	4770      	bx	lr
 800d05c:	20000060 	.word	0x20000060

0800d060 <_fwalk_reent>:
 800d060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d064:	4606      	mov	r6, r0
 800d066:	4688      	mov	r8, r1
 800d068:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d06c:	2700      	movs	r7, #0
 800d06e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d072:	f1b9 0901 	subs.w	r9, r9, #1
 800d076:	d505      	bpl.n	800d084 <_fwalk_reent+0x24>
 800d078:	6824      	ldr	r4, [r4, #0]
 800d07a:	2c00      	cmp	r4, #0
 800d07c:	d1f7      	bne.n	800d06e <_fwalk_reent+0xe>
 800d07e:	4638      	mov	r0, r7
 800d080:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d084:	89ab      	ldrh	r3, [r5, #12]
 800d086:	2b01      	cmp	r3, #1
 800d088:	d907      	bls.n	800d09a <_fwalk_reent+0x3a>
 800d08a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d08e:	3301      	adds	r3, #1
 800d090:	d003      	beq.n	800d09a <_fwalk_reent+0x3a>
 800d092:	4629      	mov	r1, r5
 800d094:	4630      	mov	r0, r6
 800d096:	47c0      	blx	r8
 800d098:	4307      	orrs	r7, r0
 800d09a:	3568      	adds	r5, #104	; 0x68
 800d09c:	e7e9      	b.n	800d072 <_fwalk_reent+0x12>

0800d09e <rshift>:
 800d09e:	6903      	ldr	r3, [r0, #16]
 800d0a0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d0a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d0a8:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d0ac:	f100 0414 	add.w	r4, r0, #20
 800d0b0:	dd45      	ble.n	800d13e <rshift+0xa0>
 800d0b2:	f011 011f 	ands.w	r1, r1, #31
 800d0b6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d0ba:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d0be:	d10c      	bne.n	800d0da <rshift+0x3c>
 800d0c0:	f100 0710 	add.w	r7, r0, #16
 800d0c4:	4629      	mov	r1, r5
 800d0c6:	42b1      	cmp	r1, r6
 800d0c8:	d334      	bcc.n	800d134 <rshift+0x96>
 800d0ca:	1a9b      	subs	r3, r3, r2
 800d0cc:	009b      	lsls	r3, r3, #2
 800d0ce:	1eea      	subs	r2, r5, #3
 800d0d0:	4296      	cmp	r6, r2
 800d0d2:	bf38      	it	cc
 800d0d4:	2300      	movcc	r3, #0
 800d0d6:	4423      	add	r3, r4
 800d0d8:	e015      	b.n	800d106 <rshift+0x68>
 800d0da:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d0de:	f1c1 0820 	rsb	r8, r1, #32
 800d0e2:	40cf      	lsrs	r7, r1
 800d0e4:	f105 0e04 	add.w	lr, r5, #4
 800d0e8:	46a1      	mov	r9, r4
 800d0ea:	4576      	cmp	r6, lr
 800d0ec:	46f4      	mov	ip, lr
 800d0ee:	d815      	bhi.n	800d11c <rshift+0x7e>
 800d0f0:	1a9b      	subs	r3, r3, r2
 800d0f2:	009a      	lsls	r2, r3, #2
 800d0f4:	3a04      	subs	r2, #4
 800d0f6:	3501      	adds	r5, #1
 800d0f8:	42ae      	cmp	r6, r5
 800d0fa:	bf38      	it	cc
 800d0fc:	2200      	movcc	r2, #0
 800d0fe:	18a3      	adds	r3, r4, r2
 800d100:	50a7      	str	r7, [r4, r2]
 800d102:	b107      	cbz	r7, 800d106 <rshift+0x68>
 800d104:	3304      	adds	r3, #4
 800d106:	1b1a      	subs	r2, r3, r4
 800d108:	42a3      	cmp	r3, r4
 800d10a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d10e:	bf08      	it	eq
 800d110:	2300      	moveq	r3, #0
 800d112:	6102      	str	r2, [r0, #16]
 800d114:	bf08      	it	eq
 800d116:	6143      	streq	r3, [r0, #20]
 800d118:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d11c:	f8dc c000 	ldr.w	ip, [ip]
 800d120:	fa0c fc08 	lsl.w	ip, ip, r8
 800d124:	ea4c 0707 	orr.w	r7, ip, r7
 800d128:	f849 7b04 	str.w	r7, [r9], #4
 800d12c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d130:	40cf      	lsrs	r7, r1
 800d132:	e7da      	b.n	800d0ea <rshift+0x4c>
 800d134:	f851 cb04 	ldr.w	ip, [r1], #4
 800d138:	f847 cf04 	str.w	ip, [r7, #4]!
 800d13c:	e7c3      	b.n	800d0c6 <rshift+0x28>
 800d13e:	4623      	mov	r3, r4
 800d140:	e7e1      	b.n	800d106 <rshift+0x68>

0800d142 <__hexdig_fun>:
 800d142:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d146:	2b09      	cmp	r3, #9
 800d148:	d802      	bhi.n	800d150 <__hexdig_fun+0xe>
 800d14a:	3820      	subs	r0, #32
 800d14c:	b2c0      	uxtb	r0, r0
 800d14e:	4770      	bx	lr
 800d150:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d154:	2b05      	cmp	r3, #5
 800d156:	d801      	bhi.n	800d15c <__hexdig_fun+0x1a>
 800d158:	3847      	subs	r0, #71	; 0x47
 800d15a:	e7f7      	b.n	800d14c <__hexdig_fun+0xa>
 800d15c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d160:	2b05      	cmp	r3, #5
 800d162:	d801      	bhi.n	800d168 <__hexdig_fun+0x26>
 800d164:	3827      	subs	r0, #39	; 0x27
 800d166:	e7f1      	b.n	800d14c <__hexdig_fun+0xa>
 800d168:	2000      	movs	r0, #0
 800d16a:	4770      	bx	lr

0800d16c <__gethex>:
 800d16c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d170:	ed2d 8b02 	vpush	{d8}
 800d174:	b089      	sub	sp, #36	; 0x24
 800d176:	ee08 0a10 	vmov	s16, r0
 800d17a:	9304      	str	r3, [sp, #16]
 800d17c:	4bbc      	ldr	r3, [pc, #752]	; (800d470 <__gethex+0x304>)
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	9301      	str	r3, [sp, #4]
 800d182:	4618      	mov	r0, r3
 800d184:	468b      	mov	fp, r1
 800d186:	4690      	mov	r8, r2
 800d188:	f7f3 f82a 	bl	80001e0 <strlen>
 800d18c:	9b01      	ldr	r3, [sp, #4]
 800d18e:	f8db 2000 	ldr.w	r2, [fp]
 800d192:	4403      	add	r3, r0
 800d194:	4682      	mov	sl, r0
 800d196:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800d19a:	9305      	str	r3, [sp, #20]
 800d19c:	1c93      	adds	r3, r2, #2
 800d19e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d1a2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d1a6:	32fe      	adds	r2, #254	; 0xfe
 800d1a8:	18d1      	adds	r1, r2, r3
 800d1aa:	461f      	mov	r7, r3
 800d1ac:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d1b0:	9100      	str	r1, [sp, #0]
 800d1b2:	2830      	cmp	r0, #48	; 0x30
 800d1b4:	d0f8      	beq.n	800d1a8 <__gethex+0x3c>
 800d1b6:	f7ff ffc4 	bl	800d142 <__hexdig_fun>
 800d1ba:	4604      	mov	r4, r0
 800d1bc:	2800      	cmp	r0, #0
 800d1be:	d13a      	bne.n	800d236 <__gethex+0xca>
 800d1c0:	9901      	ldr	r1, [sp, #4]
 800d1c2:	4652      	mov	r2, sl
 800d1c4:	4638      	mov	r0, r7
 800d1c6:	f001 fb88 	bl	800e8da <strncmp>
 800d1ca:	4605      	mov	r5, r0
 800d1cc:	2800      	cmp	r0, #0
 800d1ce:	d168      	bne.n	800d2a2 <__gethex+0x136>
 800d1d0:	f817 000a 	ldrb.w	r0, [r7, sl]
 800d1d4:	eb07 060a 	add.w	r6, r7, sl
 800d1d8:	f7ff ffb3 	bl	800d142 <__hexdig_fun>
 800d1dc:	2800      	cmp	r0, #0
 800d1de:	d062      	beq.n	800d2a6 <__gethex+0x13a>
 800d1e0:	4633      	mov	r3, r6
 800d1e2:	7818      	ldrb	r0, [r3, #0]
 800d1e4:	2830      	cmp	r0, #48	; 0x30
 800d1e6:	461f      	mov	r7, r3
 800d1e8:	f103 0301 	add.w	r3, r3, #1
 800d1ec:	d0f9      	beq.n	800d1e2 <__gethex+0x76>
 800d1ee:	f7ff ffa8 	bl	800d142 <__hexdig_fun>
 800d1f2:	2301      	movs	r3, #1
 800d1f4:	fab0 f480 	clz	r4, r0
 800d1f8:	0964      	lsrs	r4, r4, #5
 800d1fa:	4635      	mov	r5, r6
 800d1fc:	9300      	str	r3, [sp, #0]
 800d1fe:	463a      	mov	r2, r7
 800d200:	4616      	mov	r6, r2
 800d202:	3201      	adds	r2, #1
 800d204:	7830      	ldrb	r0, [r6, #0]
 800d206:	f7ff ff9c 	bl	800d142 <__hexdig_fun>
 800d20a:	2800      	cmp	r0, #0
 800d20c:	d1f8      	bne.n	800d200 <__gethex+0x94>
 800d20e:	9901      	ldr	r1, [sp, #4]
 800d210:	4652      	mov	r2, sl
 800d212:	4630      	mov	r0, r6
 800d214:	f001 fb61 	bl	800e8da <strncmp>
 800d218:	b980      	cbnz	r0, 800d23c <__gethex+0xd0>
 800d21a:	b94d      	cbnz	r5, 800d230 <__gethex+0xc4>
 800d21c:	eb06 050a 	add.w	r5, r6, sl
 800d220:	462a      	mov	r2, r5
 800d222:	4616      	mov	r6, r2
 800d224:	3201      	adds	r2, #1
 800d226:	7830      	ldrb	r0, [r6, #0]
 800d228:	f7ff ff8b 	bl	800d142 <__hexdig_fun>
 800d22c:	2800      	cmp	r0, #0
 800d22e:	d1f8      	bne.n	800d222 <__gethex+0xb6>
 800d230:	1bad      	subs	r5, r5, r6
 800d232:	00ad      	lsls	r5, r5, #2
 800d234:	e004      	b.n	800d240 <__gethex+0xd4>
 800d236:	2400      	movs	r4, #0
 800d238:	4625      	mov	r5, r4
 800d23a:	e7e0      	b.n	800d1fe <__gethex+0x92>
 800d23c:	2d00      	cmp	r5, #0
 800d23e:	d1f7      	bne.n	800d230 <__gethex+0xc4>
 800d240:	7833      	ldrb	r3, [r6, #0]
 800d242:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d246:	2b50      	cmp	r3, #80	; 0x50
 800d248:	d13b      	bne.n	800d2c2 <__gethex+0x156>
 800d24a:	7873      	ldrb	r3, [r6, #1]
 800d24c:	2b2b      	cmp	r3, #43	; 0x2b
 800d24e:	d02c      	beq.n	800d2aa <__gethex+0x13e>
 800d250:	2b2d      	cmp	r3, #45	; 0x2d
 800d252:	d02e      	beq.n	800d2b2 <__gethex+0x146>
 800d254:	1c71      	adds	r1, r6, #1
 800d256:	f04f 0900 	mov.w	r9, #0
 800d25a:	7808      	ldrb	r0, [r1, #0]
 800d25c:	f7ff ff71 	bl	800d142 <__hexdig_fun>
 800d260:	1e43      	subs	r3, r0, #1
 800d262:	b2db      	uxtb	r3, r3
 800d264:	2b18      	cmp	r3, #24
 800d266:	d82c      	bhi.n	800d2c2 <__gethex+0x156>
 800d268:	f1a0 0210 	sub.w	r2, r0, #16
 800d26c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d270:	f7ff ff67 	bl	800d142 <__hexdig_fun>
 800d274:	1e43      	subs	r3, r0, #1
 800d276:	b2db      	uxtb	r3, r3
 800d278:	2b18      	cmp	r3, #24
 800d27a:	d91d      	bls.n	800d2b8 <__gethex+0x14c>
 800d27c:	f1b9 0f00 	cmp.w	r9, #0
 800d280:	d000      	beq.n	800d284 <__gethex+0x118>
 800d282:	4252      	negs	r2, r2
 800d284:	4415      	add	r5, r2
 800d286:	f8cb 1000 	str.w	r1, [fp]
 800d28a:	b1e4      	cbz	r4, 800d2c6 <__gethex+0x15a>
 800d28c:	9b00      	ldr	r3, [sp, #0]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	bf14      	ite	ne
 800d292:	2700      	movne	r7, #0
 800d294:	2706      	moveq	r7, #6
 800d296:	4638      	mov	r0, r7
 800d298:	b009      	add	sp, #36	; 0x24
 800d29a:	ecbd 8b02 	vpop	{d8}
 800d29e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2a2:	463e      	mov	r6, r7
 800d2a4:	4625      	mov	r5, r4
 800d2a6:	2401      	movs	r4, #1
 800d2a8:	e7ca      	b.n	800d240 <__gethex+0xd4>
 800d2aa:	f04f 0900 	mov.w	r9, #0
 800d2ae:	1cb1      	adds	r1, r6, #2
 800d2b0:	e7d3      	b.n	800d25a <__gethex+0xee>
 800d2b2:	f04f 0901 	mov.w	r9, #1
 800d2b6:	e7fa      	b.n	800d2ae <__gethex+0x142>
 800d2b8:	230a      	movs	r3, #10
 800d2ba:	fb03 0202 	mla	r2, r3, r2, r0
 800d2be:	3a10      	subs	r2, #16
 800d2c0:	e7d4      	b.n	800d26c <__gethex+0x100>
 800d2c2:	4631      	mov	r1, r6
 800d2c4:	e7df      	b.n	800d286 <__gethex+0x11a>
 800d2c6:	1bf3      	subs	r3, r6, r7
 800d2c8:	3b01      	subs	r3, #1
 800d2ca:	4621      	mov	r1, r4
 800d2cc:	2b07      	cmp	r3, #7
 800d2ce:	dc0b      	bgt.n	800d2e8 <__gethex+0x17c>
 800d2d0:	ee18 0a10 	vmov	r0, s16
 800d2d4:	f000 fa74 	bl	800d7c0 <_Balloc>
 800d2d8:	4604      	mov	r4, r0
 800d2da:	b940      	cbnz	r0, 800d2ee <__gethex+0x182>
 800d2dc:	4b65      	ldr	r3, [pc, #404]	; (800d474 <__gethex+0x308>)
 800d2de:	4602      	mov	r2, r0
 800d2e0:	21de      	movs	r1, #222	; 0xde
 800d2e2:	4865      	ldr	r0, [pc, #404]	; (800d478 <__gethex+0x30c>)
 800d2e4:	f7fe ff3e 	bl	800c164 <__assert_func>
 800d2e8:	3101      	adds	r1, #1
 800d2ea:	105b      	asrs	r3, r3, #1
 800d2ec:	e7ee      	b.n	800d2cc <__gethex+0x160>
 800d2ee:	f100 0914 	add.w	r9, r0, #20
 800d2f2:	f04f 0b00 	mov.w	fp, #0
 800d2f6:	f1ca 0301 	rsb	r3, sl, #1
 800d2fa:	f8cd 9008 	str.w	r9, [sp, #8]
 800d2fe:	f8cd b000 	str.w	fp, [sp]
 800d302:	9306      	str	r3, [sp, #24]
 800d304:	42b7      	cmp	r7, r6
 800d306:	d340      	bcc.n	800d38a <__gethex+0x21e>
 800d308:	9802      	ldr	r0, [sp, #8]
 800d30a:	9b00      	ldr	r3, [sp, #0]
 800d30c:	f840 3b04 	str.w	r3, [r0], #4
 800d310:	eba0 0009 	sub.w	r0, r0, r9
 800d314:	1080      	asrs	r0, r0, #2
 800d316:	0146      	lsls	r6, r0, #5
 800d318:	6120      	str	r0, [r4, #16]
 800d31a:	4618      	mov	r0, r3
 800d31c:	f000 fb46 	bl	800d9ac <__hi0bits>
 800d320:	1a30      	subs	r0, r6, r0
 800d322:	f8d8 6000 	ldr.w	r6, [r8]
 800d326:	42b0      	cmp	r0, r6
 800d328:	dd63      	ble.n	800d3f2 <__gethex+0x286>
 800d32a:	1b87      	subs	r7, r0, r6
 800d32c:	4639      	mov	r1, r7
 800d32e:	4620      	mov	r0, r4
 800d330:	f000 fee0 	bl	800e0f4 <__any_on>
 800d334:	4682      	mov	sl, r0
 800d336:	b1a8      	cbz	r0, 800d364 <__gethex+0x1f8>
 800d338:	1e7b      	subs	r3, r7, #1
 800d33a:	1159      	asrs	r1, r3, #5
 800d33c:	f003 021f 	and.w	r2, r3, #31
 800d340:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800d344:	f04f 0a01 	mov.w	sl, #1
 800d348:	fa0a f202 	lsl.w	r2, sl, r2
 800d34c:	420a      	tst	r2, r1
 800d34e:	d009      	beq.n	800d364 <__gethex+0x1f8>
 800d350:	4553      	cmp	r3, sl
 800d352:	dd05      	ble.n	800d360 <__gethex+0x1f4>
 800d354:	1eb9      	subs	r1, r7, #2
 800d356:	4620      	mov	r0, r4
 800d358:	f000 fecc 	bl	800e0f4 <__any_on>
 800d35c:	2800      	cmp	r0, #0
 800d35e:	d145      	bne.n	800d3ec <__gethex+0x280>
 800d360:	f04f 0a02 	mov.w	sl, #2
 800d364:	4639      	mov	r1, r7
 800d366:	4620      	mov	r0, r4
 800d368:	f7ff fe99 	bl	800d09e <rshift>
 800d36c:	443d      	add	r5, r7
 800d36e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d372:	42ab      	cmp	r3, r5
 800d374:	da4c      	bge.n	800d410 <__gethex+0x2a4>
 800d376:	ee18 0a10 	vmov	r0, s16
 800d37a:	4621      	mov	r1, r4
 800d37c:	f000 fa60 	bl	800d840 <_Bfree>
 800d380:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d382:	2300      	movs	r3, #0
 800d384:	6013      	str	r3, [r2, #0]
 800d386:	27a3      	movs	r7, #163	; 0xa3
 800d388:	e785      	b.n	800d296 <__gethex+0x12a>
 800d38a:	1e73      	subs	r3, r6, #1
 800d38c:	9a05      	ldr	r2, [sp, #20]
 800d38e:	9303      	str	r3, [sp, #12]
 800d390:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d394:	4293      	cmp	r3, r2
 800d396:	d019      	beq.n	800d3cc <__gethex+0x260>
 800d398:	f1bb 0f20 	cmp.w	fp, #32
 800d39c:	d107      	bne.n	800d3ae <__gethex+0x242>
 800d39e:	9b02      	ldr	r3, [sp, #8]
 800d3a0:	9a00      	ldr	r2, [sp, #0]
 800d3a2:	f843 2b04 	str.w	r2, [r3], #4
 800d3a6:	9302      	str	r3, [sp, #8]
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	9300      	str	r3, [sp, #0]
 800d3ac:	469b      	mov	fp, r3
 800d3ae:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800d3b2:	f7ff fec6 	bl	800d142 <__hexdig_fun>
 800d3b6:	9b00      	ldr	r3, [sp, #0]
 800d3b8:	f000 000f 	and.w	r0, r0, #15
 800d3bc:	fa00 f00b 	lsl.w	r0, r0, fp
 800d3c0:	4303      	orrs	r3, r0
 800d3c2:	9300      	str	r3, [sp, #0]
 800d3c4:	f10b 0b04 	add.w	fp, fp, #4
 800d3c8:	9b03      	ldr	r3, [sp, #12]
 800d3ca:	e00d      	b.n	800d3e8 <__gethex+0x27c>
 800d3cc:	9b03      	ldr	r3, [sp, #12]
 800d3ce:	9a06      	ldr	r2, [sp, #24]
 800d3d0:	4413      	add	r3, r2
 800d3d2:	42bb      	cmp	r3, r7
 800d3d4:	d3e0      	bcc.n	800d398 <__gethex+0x22c>
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	9901      	ldr	r1, [sp, #4]
 800d3da:	9307      	str	r3, [sp, #28]
 800d3dc:	4652      	mov	r2, sl
 800d3de:	f001 fa7c 	bl	800e8da <strncmp>
 800d3e2:	9b07      	ldr	r3, [sp, #28]
 800d3e4:	2800      	cmp	r0, #0
 800d3e6:	d1d7      	bne.n	800d398 <__gethex+0x22c>
 800d3e8:	461e      	mov	r6, r3
 800d3ea:	e78b      	b.n	800d304 <__gethex+0x198>
 800d3ec:	f04f 0a03 	mov.w	sl, #3
 800d3f0:	e7b8      	b.n	800d364 <__gethex+0x1f8>
 800d3f2:	da0a      	bge.n	800d40a <__gethex+0x29e>
 800d3f4:	1a37      	subs	r7, r6, r0
 800d3f6:	4621      	mov	r1, r4
 800d3f8:	ee18 0a10 	vmov	r0, s16
 800d3fc:	463a      	mov	r2, r7
 800d3fe:	f000 fc3b 	bl	800dc78 <__lshift>
 800d402:	1bed      	subs	r5, r5, r7
 800d404:	4604      	mov	r4, r0
 800d406:	f100 0914 	add.w	r9, r0, #20
 800d40a:	f04f 0a00 	mov.w	sl, #0
 800d40e:	e7ae      	b.n	800d36e <__gethex+0x202>
 800d410:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d414:	42a8      	cmp	r0, r5
 800d416:	dd72      	ble.n	800d4fe <__gethex+0x392>
 800d418:	1b45      	subs	r5, r0, r5
 800d41a:	42ae      	cmp	r6, r5
 800d41c:	dc36      	bgt.n	800d48c <__gethex+0x320>
 800d41e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d422:	2b02      	cmp	r3, #2
 800d424:	d02a      	beq.n	800d47c <__gethex+0x310>
 800d426:	2b03      	cmp	r3, #3
 800d428:	d02c      	beq.n	800d484 <__gethex+0x318>
 800d42a:	2b01      	cmp	r3, #1
 800d42c:	d115      	bne.n	800d45a <__gethex+0x2ee>
 800d42e:	42ae      	cmp	r6, r5
 800d430:	d113      	bne.n	800d45a <__gethex+0x2ee>
 800d432:	2e01      	cmp	r6, #1
 800d434:	d10b      	bne.n	800d44e <__gethex+0x2e2>
 800d436:	9a04      	ldr	r2, [sp, #16]
 800d438:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d43c:	6013      	str	r3, [r2, #0]
 800d43e:	2301      	movs	r3, #1
 800d440:	6123      	str	r3, [r4, #16]
 800d442:	f8c9 3000 	str.w	r3, [r9]
 800d446:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d448:	2762      	movs	r7, #98	; 0x62
 800d44a:	601c      	str	r4, [r3, #0]
 800d44c:	e723      	b.n	800d296 <__gethex+0x12a>
 800d44e:	1e71      	subs	r1, r6, #1
 800d450:	4620      	mov	r0, r4
 800d452:	f000 fe4f 	bl	800e0f4 <__any_on>
 800d456:	2800      	cmp	r0, #0
 800d458:	d1ed      	bne.n	800d436 <__gethex+0x2ca>
 800d45a:	ee18 0a10 	vmov	r0, s16
 800d45e:	4621      	mov	r1, r4
 800d460:	f000 f9ee 	bl	800d840 <_Bfree>
 800d464:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d466:	2300      	movs	r3, #0
 800d468:	6013      	str	r3, [r2, #0]
 800d46a:	2750      	movs	r7, #80	; 0x50
 800d46c:	e713      	b.n	800d296 <__gethex+0x12a>
 800d46e:	bf00      	nop
 800d470:	0800f978 	.word	0x0800f978
 800d474:	0800f899 	.word	0x0800f899
 800d478:	0800f90c 	.word	0x0800f90c
 800d47c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d1eb      	bne.n	800d45a <__gethex+0x2ee>
 800d482:	e7d8      	b.n	800d436 <__gethex+0x2ca>
 800d484:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d486:	2b00      	cmp	r3, #0
 800d488:	d1d5      	bne.n	800d436 <__gethex+0x2ca>
 800d48a:	e7e6      	b.n	800d45a <__gethex+0x2ee>
 800d48c:	1e6f      	subs	r7, r5, #1
 800d48e:	f1ba 0f00 	cmp.w	sl, #0
 800d492:	d131      	bne.n	800d4f8 <__gethex+0x38c>
 800d494:	b127      	cbz	r7, 800d4a0 <__gethex+0x334>
 800d496:	4639      	mov	r1, r7
 800d498:	4620      	mov	r0, r4
 800d49a:	f000 fe2b 	bl	800e0f4 <__any_on>
 800d49e:	4682      	mov	sl, r0
 800d4a0:	117b      	asrs	r3, r7, #5
 800d4a2:	2101      	movs	r1, #1
 800d4a4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800d4a8:	f007 071f 	and.w	r7, r7, #31
 800d4ac:	fa01 f707 	lsl.w	r7, r1, r7
 800d4b0:	421f      	tst	r7, r3
 800d4b2:	4629      	mov	r1, r5
 800d4b4:	4620      	mov	r0, r4
 800d4b6:	bf18      	it	ne
 800d4b8:	f04a 0a02 	orrne.w	sl, sl, #2
 800d4bc:	1b76      	subs	r6, r6, r5
 800d4be:	f7ff fdee 	bl	800d09e <rshift>
 800d4c2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d4c6:	2702      	movs	r7, #2
 800d4c8:	f1ba 0f00 	cmp.w	sl, #0
 800d4cc:	d048      	beq.n	800d560 <__gethex+0x3f4>
 800d4ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d4d2:	2b02      	cmp	r3, #2
 800d4d4:	d015      	beq.n	800d502 <__gethex+0x396>
 800d4d6:	2b03      	cmp	r3, #3
 800d4d8:	d017      	beq.n	800d50a <__gethex+0x39e>
 800d4da:	2b01      	cmp	r3, #1
 800d4dc:	d109      	bne.n	800d4f2 <__gethex+0x386>
 800d4de:	f01a 0f02 	tst.w	sl, #2
 800d4e2:	d006      	beq.n	800d4f2 <__gethex+0x386>
 800d4e4:	f8d9 0000 	ldr.w	r0, [r9]
 800d4e8:	ea4a 0a00 	orr.w	sl, sl, r0
 800d4ec:	f01a 0f01 	tst.w	sl, #1
 800d4f0:	d10e      	bne.n	800d510 <__gethex+0x3a4>
 800d4f2:	f047 0710 	orr.w	r7, r7, #16
 800d4f6:	e033      	b.n	800d560 <__gethex+0x3f4>
 800d4f8:	f04f 0a01 	mov.w	sl, #1
 800d4fc:	e7d0      	b.n	800d4a0 <__gethex+0x334>
 800d4fe:	2701      	movs	r7, #1
 800d500:	e7e2      	b.n	800d4c8 <__gethex+0x35c>
 800d502:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d504:	f1c3 0301 	rsb	r3, r3, #1
 800d508:	9315      	str	r3, [sp, #84]	; 0x54
 800d50a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d0f0      	beq.n	800d4f2 <__gethex+0x386>
 800d510:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d514:	f104 0314 	add.w	r3, r4, #20
 800d518:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d51c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d520:	f04f 0c00 	mov.w	ip, #0
 800d524:	4618      	mov	r0, r3
 800d526:	f853 2b04 	ldr.w	r2, [r3], #4
 800d52a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d52e:	d01c      	beq.n	800d56a <__gethex+0x3fe>
 800d530:	3201      	adds	r2, #1
 800d532:	6002      	str	r2, [r0, #0]
 800d534:	2f02      	cmp	r7, #2
 800d536:	f104 0314 	add.w	r3, r4, #20
 800d53a:	d13f      	bne.n	800d5bc <__gethex+0x450>
 800d53c:	f8d8 2000 	ldr.w	r2, [r8]
 800d540:	3a01      	subs	r2, #1
 800d542:	42b2      	cmp	r2, r6
 800d544:	d10a      	bne.n	800d55c <__gethex+0x3f0>
 800d546:	1171      	asrs	r1, r6, #5
 800d548:	2201      	movs	r2, #1
 800d54a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d54e:	f006 061f 	and.w	r6, r6, #31
 800d552:	fa02 f606 	lsl.w	r6, r2, r6
 800d556:	421e      	tst	r6, r3
 800d558:	bf18      	it	ne
 800d55a:	4617      	movne	r7, r2
 800d55c:	f047 0720 	orr.w	r7, r7, #32
 800d560:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d562:	601c      	str	r4, [r3, #0]
 800d564:	9b04      	ldr	r3, [sp, #16]
 800d566:	601d      	str	r5, [r3, #0]
 800d568:	e695      	b.n	800d296 <__gethex+0x12a>
 800d56a:	4299      	cmp	r1, r3
 800d56c:	f843 cc04 	str.w	ip, [r3, #-4]
 800d570:	d8d8      	bhi.n	800d524 <__gethex+0x3b8>
 800d572:	68a3      	ldr	r3, [r4, #8]
 800d574:	459b      	cmp	fp, r3
 800d576:	db19      	blt.n	800d5ac <__gethex+0x440>
 800d578:	6861      	ldr	r1, [r4, #4]
 800d57a:	ee18 0a10 	vmov	r0, s16
 800d57e:	3101      	adds	r1, #1
 800d580:	f000 f91e 	bl	800d7c0 <_Balloc>
 800d584:	4681      	mov	r9, r0
 800d586:	b918      	cbnz	r0, 800d590 <__gethex+0x424>
 800d588:	4b1a      	ldr	r3, [pc, #104]	; (800d5f4 <__gethex+0x488>)
 800d58a:	4602      	mov	r2, r0
 800d58c:	2184      	movs	r1, #132	; 0x84
 800d58e:	e6a8      	b.n	800d2e2 <__gethex+0x176>
 800d590:	6922      	ldr	r2, [r4, #16]
 800d592:	3202      	adds	r2, #2
 800d594:	f104 010c 	add.w	r1, r4, #12
 800d598:	0092      	lsls	r2, r2, #2
 800d59a:	300c      	adds	r0, #12
 800d59c:	f7fd f9b2 	bl	800a904 <memcpy>
 800d5a0:	4621      	mov	r1, r4
 800d5a2:	ee18 0a10 	vmov	r0, s16
 800d5a6:	f000 f94b 	bl	800d840 <_Bfree>
 800d5aa:	464c      	mov	r4, r9
 800d5ac:	6923      	ldr	r3, [r4, #16]
 800d5ae:	1c5a      	adds	r2, r3, #1
 800d5b0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d5b4:	6122      	str	r2, [r4, #16]
 800d5b6:	2201      	movs	r2, #1
 800d5b8:	615a      	str	r2, [r3, #20]
 800d5ba:	e7bb      	b.n	800d534 <__gethex+0x3c8>
 800d5bc:	6922      	ldr	r2, [r4, #16]
 800d5be:	455a      	cmp	r2, fp
 800d5c0:	dd0b      	ble.n	800d5da <__gethex+0x46e>
 800d5c2:	2101      	movs	r1, #1
 800d5c4:	4620      	mov	r0, r4
 800d5c6:	f7ff fd6a 	bl	800d09e <rshift>
 800d5ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d5ce:	3501      	adds	r5, #1
 800d5d0:	42ab      	cmp	r3, r5
 800d5d2:	f6ff aed0 	blt.w	800d376 <__gethex+0x20a>
 800d5d6:	2701      	movs	r7, #1
 800d5d8:	e7c0      	b.n	800d55c <__gethex+0x3f0>
 800d5da:	f016 061f 	ands.w	r6, r6, #31
 800d5de:	d0fa      	beq.n	800d5d6 <__gethex+0x46a>
 800d5e0:	449a      	add	sl, r3
 800d5e2:	f1c6 0620 	rsb	r6, r6, #32
 800d5e6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800d5ea:	f000 f9df 	bl	800d9ac <__hi0bits>
 800d5ee:	42b0      	cmp	r0, r6
 800d5f0:	dbe7      	blt.n	800d5c2 <__gethex+0x456>
 800d5f2:	e7f0      	b.n	800d5d6 <__gethex+0x46a>
 800d5f4:	0800f899 	.word	0x0800f899

0800d5f8 <L_shift>:
 800d5f8:	f1c2 0208 	rsb	r2, r2, #8
 800d5fc:	0092      	lsls	r2, r2, #2
 800d5fe:	b570      	push	{r4, r5, r6, lr}
 800d600:	f1c2 0620 	rsb	r6, r2, #32
 800d604:	6843      	ldr	r3, [r0, #4]
 800d606:	6804      	ldr	r4, [r0, #0]
 800d608:	fa03 f506 	lsl.w	r5, r3, r6
 800d60c:	432c      	orrs	r4, r5
 800d60e:	40d3      	lsrs	r3, r2
 800d610:	6004      	str	r4, [r0, #0]
 800d612:	f840 3f04 	str.w	r3, [r0, #4]!
 800d616:	4288      	cmp	r0, r1
 800d618:	d3f4      	bcc.n	800d604 <L_shift+0xc>
 800d61a:	bd70      	pop	{r4, r5, r6, pc}

0800d61c <__match>:
 800d61c:	b530      	push	{r4, r5, lr}
 800d61e:	6803      	ldr	r3, [r0, #0]
 800d620:	3301      	adds	r3, #1
 800d622:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d626:	b914      	cbnz	r4, 800d62e <__match+0x12>
 800d628:	6003      	str	r3, [r0, #0]
 800d62a:	2001      	movs	r0, #1
 800d62c:	bd30      	pop	{r4, r5, pc}
 800d62e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d632:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d636:	2d19      	cmp	r5, #25
 800d638:	bf98      	it	ls
 800d63a:	3220      	addls	r2, #32
 800d63c:	42a2      	cmp	r2, r4
 800d63e:	d0f0      	beq.n	800d622 <__match+0x6>
 800d640:	2000      	movs	r0, #0
 800d642:	e7f3      	b.n	800d62c <__match+0x10>

0800d644 <__hexnan>:
 800d644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d648:	680b      	ldr	r3, [r1, #0]
 800d64a:	6801      	ldr	r1, [r0, #0]
 800d64c:	115e      	asrs	r6, r3, #5
 800d64e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d652:	f013 031f 	ands.w	r3, r3, #31
 800d656:	b087      	sub	sp, #28
 800d658:	bf18      	it	ne
 800d65a:	3604      	addne	r6, #4
 800d65c:	2500      	movs	r5, #0
 800d65e:	1f37      	subs	r7, r6, #4
 800d660:	4682      	mov	sl, r0
 800d662:	4690      	mov	r8, r2
 800d664:	9301      	str	r3, [sp, #4]
 800d666:	f846 5c04 	str.w	r5, [r6, #-4]
 800d66a:	46b9      	mov	r9, r7
 800d66c:	463c      	mov	r4, r7
 800d66e:	9502      	str	r5, [sp, #8]
 800d670:	46ab      	mov	fp, r5
 800d672:	784a      	ldrb	r2, [r1, #1]
 800d674:	1c4b      	adds	r3, r1, #1
 800d676:	9303      	str	r3, [sp, #12]
 800d678:	b342      	cbz	r2, 800d6cc <__hexnan+0x88>
 800d67a:	4610      	mov	r0, r2
 800d67c:	9105      	str	r1, [sp, #20]
 800d67e:	9204      	str	r2, [sp, #16]
 800d680:	f7ff fd5f 	bl	800d142 <__hexdig_fun>
 800d684:	2800      	cmp	r0, #0
 800d686:	d14f      	bne.n	800d728 <__hexnan+0xe4>
 800d688:	9a04      	ldr	r2, [sp, #16]
 800d68a:	9905      	ldr	r1, [sp, #20]
 800d68c:	2a20      	cmp	r2, #32
 800d68e:	d818      	bhi.n	800d6c2 <__hexnan+0x7e>
 800d690:	9b02      	ldr	r3, [sp, #8]
 800d692:	459b      	cmp	fp, r3
 800d694:	dd13      	ble.n	800d6be <__hexnan+0x7a>
 800d696:	454c      	cmp	r4, r9
 800d698:	d206      	bcs.n	800d6a8 <__hexnan+0x64>
 800d69a:	2d07      	cmp	r5, #7
 800d69c:	dc04      	bgt.n	800d6a8 <__hexnan+0x64>
 800d69e:	462a      	mov	r2, r5
 800d6a0:	4649      	mov	r1, r9
 800d6a2:	4620      	mov	r0, r4
 800d6a4:	f7ff ffa8 	bl	800d5f8 <L_shift>
 800d6a8:	4544      	cmp	r4, r8
 800d6aa:	d950      	bls.n	800d74e <__hexnan+0x10a>
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	f1a4 0904 	sub.w	r9, r4, #4
 800d6b2:	f844 3c04 	str.w	r3, [r4, #-4]
 800d6b6:	f8cd b008 	str.w	fp, [sp, #8]
 800d6ba:	464c      	mov	r4, r9
 800d6bc:	461d      	mov	r5, r3
 800d6be:	9903      	ldr	r1, [sp, #12]
 800d6c0:	e7d7      	b.n	800d672 <__hexnan+0x2e>
 800d6c2:	2a29      	cmp	r2, #41	; 0x29
 800d6c4:	d156      	bne.n	800d774 <__hexnan+0x130>
 800d6c6:	3102      	adds	r1, #2
 800d6c8:	f8ca 1000 	str.w	r1, [sl]
 800d6cc:	f1bb 0f00 	cmp.w	fp, #0
 800d6d0:	d050      	beq.n	800d774 <__hexnan+0x130>
 800d6d2:	454c      	cmp	r4, r9
 800d6d4:	d206      	bcs.n	800d6e4 <__hexnan+0xa0>
 800d6d6:	2d07      	cmp	r5, #7
 800d6d8:	dc04      	bgt.n	800d6e4 <__hexnan+0xa0>
 800d6da:	462a      	mov	r2, r5
 800d6dc:	4649      	mov	r1, r9
 800d6de:	4620      	mov	r0, r4
 800d6e0:	f7ff ff8a 	bl	800d5f8 <L_shift>
 800d6e4:	4544      	cmp	r4, r8
 800d6e6:	d934      	bls.n	800d752 <__hexnan+0x10e>
 800d6e8:	f1a8 0204 	sub.w	r2, r8, #4
 800d6ec:	4623      	mov	r3, r4
 800d6ee:	f853 1b04 	ldr.w	r1, [r3], #4
 800d6f2:	f842 1f04 	str.w	r1, [r2, #4]!
 800d6f6:	429f      	cmp	r7, r3
 800d6f8:	d2f9      	bcs.n	800d6ee <__hexnan+0xaa>
 800d6fa:	1b3b      	subs	r3, r7, r4
 800d6fc:	f023 0303 	bic.w	r3, r3, #3
 800d700:	3304      	adds	r3, #4
 800d702:	3401      	adds	r4, #1
 800d704:	3e03      	subs	r6, #3
 800d706:	42b4      	cmp	r4, r6
 800d708:	bf88      	it	hi
 800d70a:	2304      	movhi	r3, #4
 800d70c:	4443      	add	r3, r8
 800d70e:	2200      	movs	r2, #0
 800d710:	f843 2b04 	str.w	r2, [r3], #4
 800d714:	429f      	cmp	r7, r3
 800d716:	d2fb      	bcs.n	800d710 <__hexnan+0xcc>
 800d718:	683b      	ldr	r3, [r7, #0]
 800d71a:	b91b      	cbnz	r3, 800d724 <__hexnan+0xe0>
 800d71c:	4547      	cmp	r7, r8
 800d71e:	d127      	bne.n	800d770 <__hexnan+0x12c>
 800d720:	2301      	movs	r3, #1
 800d722:	603b      	str	r3, [r7, #0]
 800d724:	2005      	movs	r0, #5
 800d726:	e026      	b.n	800d776 <__hexnan+0x132>
 800d728:	3501      	adds	r5, #1
 800d72a:	2d08      	cmp	r5, #8
 800d72c:	f10b 0b01 	add.w	fp, fp, #1
 800d730:	dd06      	ble.n	800d740 <__hexnan+0xfc>
 800d732:	4544      	cmp	r4, r8
 800d734:	d9c3      	bls.n	800d6be <__hexnan+0x7a>
 800d736:	2300      	movs	r3, #0
 800d738:	f844 3c04 	str.w	r3, [r4, #-4]
 800d73c:	2501      	movs	r5, #1
 800d73e:	3c04      	subs	r4, #4
 800d740:	6822      	ldr	r2, [r4, #0]
 800d742:	f000 000f 	and.w	r0, r0, #15
 800d746:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800d74a:	6022      	str	r2, [r4, #0]
 800d74c:	e7b7      	b.n	800d6be <__hexnan+0x7a>
 800d74e:	2508      	movs	r5, #8
 800d750:	e7b5      	b.n	800d6be <__hexnan+0x7a>
 800d752:	9b01      	ldr	r3, [sp, #4]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d0df      	beq.n	800d718 <__hexnan+0xd4>
 800d758:	f04f 32ff 	mov.w	r2, #4294967295
 800d75c:	f1c3 0320 	rsb	r3, r3, #32
 800d760:	fa22 f303 	lsr.w	r3, r2, r3
 800d764:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d768:	401a      	ands	r2, r3
 800d76a:	f846 2c04 	str.w	r2, [r6, #-4]
 800d76e:	e7d3      	b.n	800d718 <__hexnan+0xd4>
 800d770:	3f04      	subs	r7, #4
 800d772:	e7d1      	b.n	800d718 <__hexnan+0xd4>
 800d774:	2004      	movs	r0, #4
 800d776:	b007      	add	sp, #28
 800d778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d77c <_localeconv_r>:
 800d77c:	4800      	ldr	r0, [pc, #0]	; (800d780 <_localeconv_r+0x4>)
 800d77e:	4770      	bx	lr
 800d780:	200001b8 	.word	0x200001b8

0800d784 <__retarget_lock_init_recursive>:
 800d784:	4770      	bx	lr

0800d786 <__retarget_lock_acquire_recursive>:
 800d786:	4770      	bx	lr

0800d788 <__retarget_lock_release_recursive>:
 800d788:	4770      	bx	lr
	...

0800d78c <malloc>:
 800d78c:	4b02      	ldr	r3, [pc, #8]	; (800d798 <malloc+0xc>)
 800d78e:	4601      	mov	r1, r0
 800d790:	6818      	ldr	r0, [r3, #0]
 800d792:	f000 bd2f 	b.w	800e1f4 <_malloc_r>
 800d796:	bf00      	nop
 800d798:	20000060 	.word	0x20000060

0800d79c <__ascii_mbtowc>:
 800d79c:	b082      	sub	sp, #8
 800d79e:	b901      	cbnz	r1, 800d7a2 <__ascii_mbtowc+0x6>
 800d7a0:	a901      	add	r1, sp, #4
 800d7a2:	b142      	cbz	r2, 800d7b6 <__ascii_mbtowc+0x1a>
 800d7a4:	b14b      	cbz	r3, 800d7ba <__ascii_mbtowc+0x1e>
 800d7a6:	7813      	ldrb	r3, [r2, #0]
 800d7a8:	600b      	str	r3, [r1, #0]
 800d7aa:	7812      	ldrb	r2, [r2, #0]
 800d7ac:	1e10      	subs	r0, r2, #0
 800d7ae:	bf18      	it	ne
 800d7b0:	2001      	movne	r0, #1
 800d7b2:	b002      	add	sp, #8
 800d7b4:	4770      	bx	lr
 800d7b6:	4610      	mov	r0, r2
 800d7b8:	e7fb      	b.n	800d7b2 <__ascii_mbtowc+0x16>
 800d7ba:	f06f 0001 	mvn.w	r0, #1
 800d7be:	e7f8      	b.n	800d7b2 <__ascii_mbtowc+0x16>

0800d7c0 <_Balloc>:
 800d7c0:	b570      	push	{r4, r5, r6, lr}
 800d7c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d7c4:	4604      	mov	r4, r0
 800d7c6:	460d      	mov	r5, r1
 800d7c8:	b976      	cbnz	r6, 800d7e8 <_Balloc+0x28>
 800d7ca:	2010      	movs	r0, #16
 800d7cc:	f7ff ffde 	bl	800d78c <malloc>
 800d7d0:	4602      	mov	r2, r0
 800d7d2:	6260      	str	r0, [r4, #36]	; 0x24
 800d7d4:	b920      	cbnz	r0, 800d7e0 <_Balloc+0x20>
 800d7d6:	4b18      	ldr	r3, [pc, #96]	; (800d838 <_Balloc+0x78>)
 800d7d8:	4818      	ldr	r0, [pc, #96]	; (800d83c <_Balloc+0x7c>)
 800d7da:	2166      	movs	r1, #102	; 0x66
 800d7dc:	f7fe fcc2 	bl	800c164 <__assert_func>
 800d7e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d7e4:	6006      	str	r6, [r0, #0]
 800d7e6:	60c6      	str	r6, [r0, #12]
 800d7e8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d7ea:	68f3      	ldr	r3, [r6, #12]
 800d7ec:	b183      	cbz	r3, 800d810 <_Balloc+0x50>
 800d7ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d7f0:	68db      	ldr	r3, [r3, #12]
 800d7f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d7f6:	b9b8      	cbnz	r0, 800d828 <_Balloc+0x68>
 800d7f8:	2101      	movs	r1, #1
 800d7fa:	fa01 f605 	lsl.w	r6, r1, r5
 800d7fe:	1d72      	adds	r2, r6, #5
 800d800:	0092      	lsls	r2, r2, #2
 800d802:	4620      	mov	r0, r4
 800d804:	f000 fc97 	bl	800e136 <_calloc_r>
 800d808:	b160      	cbz	r0, 800d824 <_Balloc+0x64>
 800d80a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d80e:	e00e      	b.n	800d82e <_Balloc+0x6e>
 800d810:	2221      	movs	r2, #33	; 0x21
 800d812:	2104      	movs	r1, #4
 800d814:	4620      	mov	r0, r4
 800d816:	f000 fc8e 	bl	800e136 <_calloc_r>
 800d81a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d81c:	60f0      	str	r0, [r6, #12]
 800d81e:	68db      	ldr	r3, [r3, #12]
 800d820:	2b00      	cmp	r3, #0
 800d822:	d1e4      	bne.n	800d7ee <_Balloc+0x2e>
 800d824:	2000      	movs	r0, #0
 800d826:	bd70      	pop	{r4, r5, r6, pc}
 800d828:	6802      	ldr	r2, [r0, #0]
 800d82a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d82e:	2300      	movs	r3, #0
 800d830:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d834:	e7f7      	b.n	800d826 <_Balloc+0x66>
 800d836:	bf00      	nop
 800d838:	0800f678 	.word	0x0800f678
 800d83c:	0800f98c 	.word	0x0800f98c

0800d840 <_Bfree>:
 800d840:	b570      	push	{r4, r5, r6, lr}
 800d842:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d844:	4605      	mov	r5, r0
 800d846:	460c      	mov	r4, r1
 800d848:	b976      	cbnz	r6, 800d868 <_Bfree+0x28>
 800d84a:	2010      	movs	r0, #16
 800d84c:	f7ff ff9e 	bl	800d78c <malloc>
 800d850:	4602      	mov	r2, r0
 800d852:	6268      	str	r0, [r5, #36]	; 0x24
 800d854:	b920      	cbnz	r0, 800d860 <_Bfree+0x20>
 800d856:	4b09      	ldr	r3, [pc, #36]	; (800d87c <_Bfree+0x3c>)
 800d858:	4809      	ldr	r0, [pc, #36]	; (800d880 <_Bfree+0x40>)
 800d85a:	218a      	movs	r1, #138	; 0x8a
 800d85c:	f7fe fc82 	bl	800c164 <__assert_func>
 800d860:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d864:	6006      	str	r6, [r0, #0]
 800d866:	60c6      	str	r6, [r0, #12]
 800d868:	b13c      	cbz	r4, 800d87a <_Bfree+0x3a>
 800d86a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d86c:	6862      	ldr	r2, [r4, #4]
 800d86e:	68db      	ldr	r3, [r3, #12]
 800d870:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d874:	6021      	str	r1, [r4, #0]
 800d876:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d87a:	bd70      	pop	{r4, r5, r6, pc}
 800d87c:	0800f678 	.word	0x0800f678
 800d880:	0800f98c 	.word	0x0800f98c

0800d884 <__multadd>:
 800d884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d888:	690e      	ldr	r6, [r1, #16]
 800d88a:	4607      	mov	r7, r0
 800d88c:	4698      	mov	r8, r3
 800d88e:	460c      	mov	r4, r1
 800d890:	f101 0014 	add.w	r0, r1, #20
 800d894:	2300      	movs	r3, #0
 800d896:	6805      	ldr	r5, [r0, #0]
 800d898:	b2a9      	uxth	r1, r5
 800d89a:	fb02 8101 	mla	r1, r2, r1, r8
 800d89e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800d8a2:	0c2d      	lsrs	r5, r5, #16
 800d8a4:	fb02 c505 	mla	r5, r2, r5, ip
 800d8a8:	b289      	uxth	r1, r1
 800d8aa:	3301      	adds	r3, #1
 800d8ac:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800d8b0:	429e      	cmp	r6, r3
 800d8b2:	f840 1b04 	str.w	r1, [r0], #4
 800d8b6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800d8ba:	dcec      	bgt.n	800d896 <__multadd+0x12>
 800d8bc:	f1b8 0f00 	cmp.w	r8, #0
 800d8c0:	d022      	beq.n	800d908 <__multadd+0x84>
 800d8c2:	68a3      	ldr	r3, [r4, #8]
 800d8c4:	42b3      	cmp	r3, r6
 800d8c6:	dc19      	bgt.n	800d8fc <__multadd+0x78>
 800d8c8:	6861      	ldr	r1, [r4, #4]
 800d8ca:	4638      	mov	r0, r7
 800d8cc:	3101      	adds	r1, #1
 800d8ce:	f7ff ff77 	bl	800d7c0 <_Balloc>
 800d8d2:	4605      	mov	r5, r0
 800d8d4:	b928      	cbnz	r0, 800d8e2 <__multadd+0x5e>
 800d8d6:	4602      	mov	r2, r0
 800d8d8:	4b0d      	ldr	r3, [pc, #52]	; (800d910 <__multadd+0x8c>)
 800d8da:	480e      	ldr	r0, [pc, #56]	; (800d914 <__multadd+0x90>)
 800d8dc:	21b5      	movs	r1, #181	; 0xb5
 800d8de:	f7fe fc41 	bl	800c164 <__assert_func>
 800d8e2:	6922      	ldr	r2, [r4, #16]
 800d8e4:	3202      	adds	r2, #2
 800d8e6:	f104 010c 	add.w	r1, r4, #12
 800d8ea:	0092      	lsls	r2, r2, #2
 800d8ec:	300c      	adds	r0, #12
 800d8ee:	f7fd f809 	bl	800a904 <memcpy>
 800d8f2:	4621      	mov	r1, r4
 800d8f4:	4638      	mov	r0, r7
 800d8f6:	f7ff ffa3 	bl	800d840 <_Bfree>
 800d8fa:	462c      	mov	r4, r5
 800d8fc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800d900:	3601      	adds	r6, #1
 800d902:	f8c3 8014 	str.w	r8, [r3, #20]
 800d906:	6126      	str	r6, [r4, #16]
 800d908:	4620      	mov	r0, r4
 800d90a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d90e:	bf00      	nop
 800d910:	0800f899 	.word	0x0800f899
 800d914:	0800f98c 	.word	0x0800f98c

0800d918 <__s2b>:
 800d918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d91c:	460c      	mov	r4, r1
 800d91e:	4615      	mov	r5, r2
 800d920:	461f      	mov	r7, r3
 800d922:	2209      	movs	r2, #9
 800d924:	3308      	adds	r3, #8
 800d926:	4606      	mov	r6, r0
 800d928:	fb93 f3f2 	sdiv	r3, r3, r2
 800d92c:	2100      	movs	r1, #0
 800d92e:	2201      	movs	r2, #1
 800d930:	429a      	cmp	r2, r3
 800d932:	db09      	blt.n	800d948 <__s2b+0x30>
 800d934:	4630      	mov	r0, r6
 800d936:	f7ff ff43 	bl	800d7c0 <_Balloc>
 800d93a:	b940      	cbnz	r0, 800d94e <__s2b+0x36>
 800d93c:	4602      	mov	r2, r0
 800d93e:	4b19      	ldr	r3, [pc, #100]	; (800d9a4 <__s2b+0x8c>)
 800d940:	4819      	ldr	r0, [pc, #100]	; (800d9a8 <__s2b+0x90>)
 800d942:	21ce      	movs	r1, #206	; 0xce
 800d944:	f7fe fc0e 	bl	800c164 <__assert_func>
 800d948:	0052      	lsls	r2, r2, #1
 800d94a:	3101      	adds	r1, #1
 800d94c:	e7f0      	b.n	800d930 <__s2b+0x18>
 800d94e:	9b08      	ldr	r3, [sp, #32]
 800d950:	6143      	str	r3, [r0, #20]
 800d952:	2d09      	cmp	r5, #9
 800d954:	f04f 0301 	mov.w	r3, #1
 800d958:	6103      	str	r3, [r0, #16]
 800d95a:	dd16      	ble.n	800d98a <__s2b+0x72>
 800d95c:	f104 0909 	add.w	r9, r4, #9
 800d960:	46c8      	mov	r8, r9
 800d962:	442c      	add	r4, r5
 800d964:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d968:	4601      	mov	r1, r0
 800d96a:	3b30      	subs	r3, #48	; 0x30
 800d96c:	220a      	movs	r2, #10
 800d96e:	4630      	mov	r0, r6
 800d970:	f7ff ff88 	bl	800d884 <__multadd>
 800d974:	45a0      	cmp	r8, r4
 800d976:	d1f5      	bne.n	800d964 <__s2b+0x4c>
 800d978:	f1a5 0408 	sub.w	r4, r5, #8
 800d97c:	444c      	add	r4, r9
 800d97e:	1b2d      	subs	r5, r5, r4
 800d980:	1963      	adds	r3, r4, r5
 800d982:	42bb      	cmp	r3, r7
 800d984:	db04      	blt.n	800d990 <__s2b+0x78>
 800d986:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d98a:	340a      	adds	r4, #10
 800d98c:	2509      	movs	r5, #9
 800d98e:	e7f6      	b.n	800d97e <__s2b+0x66>
 800d990:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d994:	4601      	mov	r1, r0
 800d996:	3b30      	subs	r3, #48	; 0x30
 800d998:	220a      	movs	r2, #10
 800d99a:	4630      	mov	r0, r6
 800d99c:	f7ff ff72 	bl	800d884 <__multadd>
 800d9a0:	e7ee      	b.n	800d980 <__s2b+0x68>
 800d9a2:	bf00      	nop
 800d9a4:	0800f899 	.word	0x0800f899
 800d9a8:	0800f98c 	.word	0x0800f98c

0800d9ac <__hi0bits>:
 800d9ac:	0c03      	lsrs	r3, r0, #16
 800d9ae:	041b      	lsls	r3, r3, #16
 800d9b0:	b9d3      	cbnz	r3, 800d9e8 <__hi0bits+0x3c>
 800d9b2:	0400      	lsls	r0, r0, #16
 800d9b4:	2310      	movs	r3, #16
 800d9b6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d9ba:	bf04      	itt	eq
 800d9bc:	0200      	lsleq	r0, r0, #8
 800d9be:	3308      	addeq	r3, #8
 800d9c0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d9c4:	bf04      	itt	eq
 800d9c6:	0100      	lsleq	r0, r0, #4
 800d9c8:	3304      	addeq	r3, #4
 800d9ca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d9ce:	bf04      	itt	eq
 800d9d0:	0080      	lsleq	r0, r0, #2
 800d9d2:	3302      	addeq	r3, #2
 800d9d4:	2800      	cmp	r0, #0
 800d9d6:	db05      	blt.n	800d9e4 <__hi0bits+0x38>
 800d9d8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d9dc:	f103 0301 	add.w	r3, r3, #1
 800d9e0:	bf08      	it	eq
 800d9e2:	2320      	moveq	r3, #32
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	4770      	bx	lr
 800d9e8:	2300      	movs	r3, #0
 800d9ea:	e7e4      	b.n	800d9b6 <__hi0bits+0xa>

0800d9ec <__lo0bits>:
 800d9ec:	6803      	ldr	r3, [r0, #0]
 800d9ee:	f013 0207 	ands.w	r2, r3, #7
 800d9f2:	4601      	mov	r1, r0
 800d9f4:	d00b      	beq.n	800da0e <__lo0bits+0x22>
 800d9f6:	07da      	lsls	r2, r3, #31
 800d9f8:	d424      	bmi.n	800da44 <__lo0bits+0x58>
 800d9fa:	0798      	lsls	r0, r3, #30
 800d9fc:	bf49      	itett	mi
 800d9fe:	085b      	lsrmi	r3, r3, #1
 800da00:	089b      	lsrpl	r3, r3, #2
 800da02:	2001      	movmi	r0, #1
 800da04:	600b      	strmi	r3, [r1, #0]
 800da06:	bf5c      	itt	pl
 800da08:	600b      	strpl	r3, [r1, #0]
 800da0a:	2002      	movpl	r0, #2
 800da0c:	4770      	bx	lr
 800da0e:	b298      	uxth	r0, r3
 800da10:	b9b0      	cbnz	r0, 800da40 <__lo0bits+0x54>
 800da12:	0c1b      	lsrs	r3, r3, #16
 800da14:	2010      	movs	r0, #16
 800da16:	f013 0fff 	tst.w	r3, #255	; 0xff
 800da1a:	bf04      	itt	eq
 800da1c:	0a1b      	lsreq	r3, r3, #8
 800da1e:	3008      	addeq	r0, #8
 800da20:	071a      	lsls	r2, r3, #28
 800da22:	bf04      	itt	eq
 800da24:	091b      	lsreq	r3, r3, #4
 800da26:	3004      	addeq	r0, #4
 800da28:	079a      	lsls	r2, r3, #30
 800da2a:	bf04      	itt	eq
 800da2c:	089b      	lsreq	r3, r3, #2
 800da2e:	3002      	addeq	r0, #2
 800da30:	07da      	lsls	r2, r3, #31
 800da32:	d403      	bmi.n	800da3c <__lo0bits+0x50>
 800da34:	085b      	lsrs	r3, r3, #1
 800da36:	f100 0001 	add.w	r0, r0, #1
 800da3a:	d005      	beq.n	800da48 <__lo0bits+0x5c>
 800da3c:	600b      	str	r3, [r1, #0]
 800da3e:	4770      	bx	lr
 800da40:	4610      	mov	r0, r2
 800da42:	e7e8      	b.n	800da16 <__lo0bits+0x2a>
 800da44:	2000      	movs	r0, #0
 800da46:	4770      	bx	lr
 800da48:	2020      	movs	r0, #32
 800da4a:	4770      	bx	lr

0800da4c <__i2b>:
 800da4c:	b510      	push	{r4, lr}
 800da4e:	460c      	mov	r4, r1
 800da50:	2101      	movs	r1, #1
 800da52:	f7ff feb5 	bl	800d7c0 <_Balloc>
 800da56:	4602      	mov	r2, r0
 800da58:	b928      	cbnz	r0, 800da66 <__i2b+0x1a>
 800da5a:	4b05      	ldr	r3, [pc, #20]	; (800da70 <__i2b+0x24>)
 800da5c:	4805      	ldr	r0, [pc, #20]	; (800da74 <__i2b+0x28>)
 800da5e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800da62:	f7fe fb7f 	bl	800c164 <__assert_func>
 800da66:	2301      	movs	r3, #1
 800da68:	6144      	str	r4, [r0, #20]
 800da6a:	6103      	str	r3, [r0, #16]
 800da6c:	bd10      	pop	{r4, pc}
 800da6e:	bf00      	nop
 800da70:	0800f899 	.word	0x0800f899
 800da74:	0800f98c 	.word	0x0800f98c

0800da78 <__multiply>:
 800da78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da7c:	4614      	mov	r4, r2
 800da7e:	690a      	ldr	r2, [r1, #16]
 800da80:	6923      	ldr	r3, [r4, #16]
 800da82:	429a      	cmp	r2, r3
 800da84:	bfb8      	it	lt
 800da86:	460b      	movlt	r3, r1
 800da88:	460d      	mov	r5, r1
 800da8a:	bfbc      	itt	lt
 800da8c:	4625      	movlt	r5, r4
 800da8e:	461c      	movlt	r4, r3
 800da90:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800da94:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800da98:	68ab      	ldr	r3, [r5, #8]
 800da9a:	6869      	ldr	r1, [r5, #4]
 800da9c:	eb0a 0709 	add.w	r7, sl, r9
 800daa0:	42bb      	cmp	r3, r7
 800daa2:	b085      	sub	sp, #20
 800daa4:	bfb8      	it	lt
 800daa6:	3101      	addlt	r1, #1
 800daa8:	f7ff fe8a 	bl	800d7c0 <_Balloc>
 800daac:	b930      	cbnz	r0, 800dabc <__multiply+0x44>
 800daae:	4602      	mov	r2, r0
 800dab0:	4b42      	ldr	r3, [pc, #264]	; (800dbbc <__multiply+0x144>)
 800dab2:	4843      	ldr	r0, [pc, #268]	; (800dbc0 <__multiply+0x148>)
 800dab4:	f240 115d 	movw	r1, #349	; 0x15d
 800dab8:	f7fe fb54 	bl	800c164 <__assert_func>
 800dabc:	f100 0614 	add.w	r6, r0, #20
 800dac0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800dac4:	4633      	mov	r3, r6
 800dac6:	2200      	movs	r2, #0
 800dac8:	4543      	cmp	r3, r8
 800daca:	d31e      	bcc.n	800db0a <__multiply+0x92>
 800dacc:	f105 0c14 	add.w	ip, r5, #20
 800dad0:	f104 0314 	add.w	r3, r4, #20
 800dad4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800dad8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800dadc:	9202      	str	r2, [sp, #8]
 800dade:	ebac 0205 	sub.w	r2, ip, r5
 800dae2:	3a15      	subs	r2, #21
 800dae4:	f022 0203 	bic.w	r2, r2, #3
 800dae8:	3204      	adds	r2, #4
 800daea:	f105 0115 	add.w	r1, r5, #21
 800daee:	458c      	cmp	ip, r1
 800daf0:	bf38      	it	cc
 800daf2:	2204      	movcc	r2, #4
 800daf4:	9201      	str	r2, [sp, #4]
 800daf6:	9a02      	ldr	r2, [sp, #8]
 800daf8:	9303      	str	r3, [sp, #12]
 800dafa:	429a      	cmp	r2, r3
 800dafc:	d808      	bhi.n	800db10 <__multiply+0x98>
 800dafe:	2f00      	cmp	r7, #0
 800db00:	dc55      	bgt.n	800dbae <__multiply+0x136>
 800db02:	6107      	str	r7, [r0, #16]
 800db04:	b005      	add	sp, #20
 800db06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db0a:	f843 2b04 	str.w	r2, [r3], #4
 800db0e:	e7db      	b.n	800dac8 <__multiply+0x50>
 800db10:	f8b3 a000 	ldrh.w	sl, [r3]
 800db14:	f1ba 0f00 	cmp.w	sl, #0
 800db18:	d020      	beq.n	800db5c <__multiply+0xe4>
 800db1a:	f105 0e14 	add.w	lr, r5, #20
 800db1e:	46b1      	mov	r9, r6
 800db20:	2200      	movs	r2, #0
 800db22:	f85e 4b04 	ldr.w	r4, [lr], #4
 800db26:	f8d9 b000 	ldr.w	fp, [r9]
 800db2a:	b2a1      	uxth	r1, r4
 800db2c:	fa1f fb8b 	uxth.w	fp, fp
 800db30:	fb0a b101 	mla	r1, sl, r1, fp
 800db34:	4411      	add	r1, r2
 800db36:	f8d9 2000 	ldr.w	r2, [r9]
 800db3a:	0c24      	lsrs	r4, r4, #16
 800db3c:	0c12      	lsrs	r2, r2, #16
 800db3e:	fb0a 2404 	mla	r4, sl, r4, r2
 800db42:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800db46:	b289      	uxth	r1, r1
 800db48:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800db4c:	45f4      	cmp	ip, lr
 800db4e:	f849 1b04 	str.w	r1, [r9], #4
 800db52:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800db56:	d8e4      	bhi.n	800db22 <__multiply+0xaa>
 800db58:	9901      	ldr	r1, [sp, #4]
 800db5a:	5072      	str	r2, [r6, r1]
 800db5c:	9a03      	ldr	r2, [sp, #12]
 800db5e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800db62:	3304      	adds	r3, #4
 800db64:	f1b9 0f00 	cmp.w	r9, #0
 800db68:	d01f      	beq.n	800dbaa <__multiply+0x132>
 800db6a:	6834      	ldr	r4, [r6, #0]
 800db6c:	f105 0114 	add.w	r1, r5, #20
 800db70:	46b6      	mov	lr, r6
 800db72:	f04f 0a00 	mov.w	sl, #0
 800db76:	880a      	ldrh	r2, [r1, #0]
 800db78:	f8be b002 	ldrh.w	fp, [lr, #2]
 800db7c:	fb09 b202 	mla	r2, r9, r2, fp
 800db80:	4492      	add	sl, r2
 800db82:	b2a4      	uxth	r4, r4
 800db84:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800db88:	f84e 4b04 	str.w	r4, [lr], #4
 800db8c:	f851 4b04 	ldr.w	r4, [r1], #4
 800db90:	f8be 2000 	ldrh.w	r2, [lr]
 800db94:	0c24      	lsrs	r4, r4, #16
 800db96:	fb09 2404 	mla	r4, r9, r4, r2
 800db9a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800db9e:	458c      	cmp	ip, r1
 800dba0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800dba4:	d8e7      	bhi.n	800db76 <__multiply+0xfe>
 800dba6:	9a01      	ldr	r2, [sp, #4]
 800dba8:	50b4      	str	r4, [r6, r2]
 800dbaa:	3604      	adds	r6, #4
 800dbac:	e7a3      	b.n	800daf6 <__multiply+0x7e>
 800dbae:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d1a5      	bne.n	800db02 <__multiply+0x8a>
 800dbb6:	3f01      	subs	r7, #1
 800dbb8:	e7a1      	b.n	800dafe <__multiply+0x86>
 800dbba:	bf00      	nop
 800dbbc:	0800f899 	.word	0x0800f899
 800dbc0:	0800f98c 	.word	0x0800f98c

0800dbc4 <__pow5mult>:
 800dbc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dbc8:	4615      	mov	r5, r2
 800dbca:	f012 0203 	ands.w	r2, r2, #3
 800dbce:	4606      	mov	r6, r0
 800dbd0:	460f      	mov	r7, r1
 800dbd2:	d007      	beq.n	800dbe4 <__pow5mult+0x20>
 800dbd4:	4c25      	ldr	r4, [pc, #148]	; (800dc6c <__pow5mult+0xa8>)
 800dbd6:	3a01      	subs	r2, #1
 800dbd8:	2300      	movs	r3, #0
 800dbda:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dbde:	f7ff fe51 	bl	800d884 <__multadd>
 800dbe2:	4607      	mov	r7, r0
 800dbe4:	10ad      	asrs	r5, r5, #2
 800dbe6:	d03d      	beq.n	800dc64 <__pow5mult+0xa0>
 800dbe8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800dbea:	b97c      	cbnz	r4, 800dc0c <__pow5mult+0x48>
 800dbec:	2010      	movs	r0, #16
 800dbee:	f7ff fdcd 	bl	800d78c <malloc>
 800dbf2:	4602      	mov	r2, r0
 800dbf4:	6270      	str	r0, [r6, #36]	; 0x24
 800dbf6:	b928      	cbnz	r0, 800dc04 <__pow5mult+0x40>
 800dbf8:	4b1d      	ldr	r3, [pc, #116]	; (800dc70 <__pow5mult+0xac>)
 800dbfa:	481e      	ldr	r0, [pc, #120]	; (800dc74 <__pow5mult+0xb0>)
 800dbfc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800dc00:	f7fe fab0 	bl	800c164 <__assert_func>
 800dc04:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dc08:	6004      	str	r4, [r0, #0]
 800dc0a:	60c4      	str	r4, [r0, #12]
 800dc0c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800dc10:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dc14:	b94c      	cbnz	r4, 800dc2a <__pow5mult+0x66>
 800dc16:	f240 2171 	movw	r1, #625	; 0x271
 800dc1a:	4630      	mov	r0, r6
 800dc1c:	f7ff ff16 	bl	800da4c <__i2b>
 800dc20:	2300      	movs	r3, #0
 800dc22:	f8c8 0008 	str.w	r0, [r8, #8]
 800dc26:	4604      	mov	r4, r0
 800dc28:	6003      	str	r3, [r0, #0]
 800dc2a:	f04f 0900 	mov.w	r9, #0
 800dc2e:	07eb      	lsls	r3, r5, #31
 800dc30:	d50a      	bpl.n	800dc48 <__pow5mult+0x84>
 800dc32:	4639      	mov	r1, r7
 800dc34:	4622      	mov	r2, r4
 800dc36:	4630      	mov	r0, r6
 800dc38:	f7ff ff1e 	bl	800da78 <__multiply>
 800dc3c:	4639      	mov	r1, r7
 800dc3e:	4680      	mov	r8, r0
 800dc40:	4630      	mov	r0, r6
 800dc42:	f7ff fdfd 	bl	800d840 <_Bfree>
 800dc46:	4647      	mov	r7, r8
 800dc48:	106d      	asrs	r5, r5, #1
 800dc4a:	d00b      	beq.n	800dc64 <__pow5mult+0xa0>
 800dc4c:	6820      	ldr	r0, [r4, #0]
 800dc4e:	b938      	cbnz	r0, 800dc60 <__pow5mult+0x9c>
 800dc50:	4622      	mov	r2, r4
 800dc52:	4621      	mov	r1, r4
 800dc54:	4630      	mov	r0, r6
 800dc56:	f7ff ff0f 	bl	800da78 <__multiply>
 800dc5a:	6020      	str	r0, [r4, #0]
 800dc5c:	f8c0 9000 	str.w	r9, [r0]
 800dc60:	4604      	mov	r4, r0
 800dc62:	e7e4      	b.n	800dc2e <__pow5mult+0x6a>
 800dc64:	4638      	mov	r0, r7
 800dc66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc6a:	bf00      	nop
 800dc6c:	0800fae0 	.word	0x0800fae0
 800dc70:	0800f678 	.word	0x0800f678
 800dc74:	0800f98c 	.word	0x0800f98c

0800dc78 <__lshift>:
 800dc78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc7c:	460c      	mov	r4, r1
 800dc7e:	6849      	ldr	r1, [r1, #4]
 800dc80:	6923      	ldr	r3, [r4, #16]
 800dc82:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800dc86:	68a3      	ldr	r3, [r4, #8]
 800dc88:	4607      	mov	r7, r0
 800dc8a:	4691      	mov	r9, r2
 800dc8c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dc90:	f108 0601 	add.w	r6, r8, #1
 800dc94:	42b3      	cmp	r3, r6
 800dc96:	db0b      	blt.n	800dcb0 <__lshift+0x38>
 800dc98:	4638      	mov	r0, r7
 800dc9a:	f7ff fd91 	bl	800d7c0 <_Balloc>
 800dc9e:	4605      	mov	r5, r0
 800dca0:	b948      	cbnz	r0, 800dcb6 <__lshift+0x3e>
 800dca2:	4602      	mov	r2, r0
 800dca4:	4b28      	ldr	r3, [pc, #160]	; (800dd48 <__lshift+0xd0>)
 800dca6:	4829      	ldr	r0, [pc, #164]	; (800dd4c <__lshift+0xd4>)
 800dca8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800dcac:	f7fe fa5a 	bl	800c164 <__assert_func>
 800dcb0:	3101      	adds	r1, #1
 800dcb2:	005b      	lsls	r3, r3, #1
 800dcb4:	e7ee      	b.n	800dc94 <__lshift+0x1c>
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	f100 0114 	add.w	r1, r0, #20
 800dcbc:	f100 0210 	add.w	r2, r0, #16
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	4553      	cmp	r3, sl
 800dcc4:	db33      	blt.n	800dd2e <__lshift+0xb6>
 800dcc6:	6920      	ldr	r0, [r4, #16]
 800dcc8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dccc:	f104 0314 	add.w	r3, r4, #20
 800dcd0:	f019 091f 	ands.w	r9, r9, #31
 800dcd4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dcd8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800dcdc:	d02b      	beq.n	800dd36 <__lshift+0xbe>
 800dcde:	f1c9 0e20 	rsb	lr, r9, #32
 800dce2:	468a      	mov	sl, r1
 800dce4:	2200      	movs	r2, #0
 800dce6:	6818      	ldr	r0, [r3, #0]
 800dce8:	fa00 f009 	lsl.w	r0, r0, r9
 800dcec:	4302      	orrs	r2, r0
 800dcee:	f84a 2b04 	str.w	r2, [sl], #4
 800dcf2:	f853 2b04 	ldr.w	r2, [r3], #4
 800dcf6:	459c      	cmp	ip, r3
 800dcf8:	fa22 f20e 	lsr.w	r2, r2, lr
 800dcfc:	d8f3      	bhi.n	800dce6 <__lshift+0x6e>
 800dcfe:	ebac 0304 	sub.w	r3, ip, r4
 800dd02:	3b15      	subs	r3, #21
 800dd04:	f023 0303 	bic.w	r3, r3, #3
 800dd08:	3304      	adds	r3, #4
 800dd0a:	f104 0015 	add.w	r0, r4, #21
 800dd0e:	4584      	cmp	ip, r0
 800dd10:	bf38      	it	cc
 800dd12:	2304      	movcc	r3, #4
 800dd14:	50ca      	str	r2, [r1, r3]
 800dd16:	b10a      	cbz	r2, 800dd1c <__lshift+0xa4>
 800dd18:	f108 0602 	add.w	r6, r8, #2
 800dd1c:	3e01      	subs	r6, #1
 800dd1e:	4638      	mov	r0, r7
 800dd20:	612e      	str	r6, [r5, #16]
 800dd22:	4621      	mov	r1, r4
 800dd24:	f7ff fd8c 	bl	800d840 <_Bfree>
 800dd28:	4628      	mov	r0, r5
 800dd2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd2e:	f842 0f04 	str.w	r0, [r2, #4]!
 800dd32:	3301      	adds	r3, #1
 800dd34:	e7c5      	b.n	800dcc2 <__lshift+0x4a>
 800dd36:	3904      	subs	r1, #4
 800dd38:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd3c:	f841 2f04 	str.w	r2, [r1, #4]!
 800dd40:	459c      	cmp	ip, r3
 800dd42:	d8f9      	bhi.n	800dd38 <__lshift+0xc0>
 800dd44:	e7ea      	b.n	800dd1c <__lshift+0xa4>
 800dd46:	bf00      	nop
 800dd48:	0800f899 	.word	0x0800f899
 800dd4c:	0800f98c 	.word	0x0800f98c

0800dd50 <__mcmp>:
 800dd50:	b530      	push	{r4, r5, lr}
 800dd52:	6902      	ldr	r2, [r0, #16]
 800dd54:	690c      	ldr	r4, [r1, #16]
 800dd56:	1b12      	subs	r2, r2, r4
 800dd58:	d10e      	bne.n	800dd78 <__mcmp+0x28>
 800dd5a:	f100 0314 	add.w	r3, r0, #20
 800dd5e:	3114      	adds	r1, #20
 800dd60:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800dd64:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800dd68:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800dd6c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800dd70:	42a5      	cmp	r5, r4
 800dd72:	d003      	beq.n	800dd7c <__mcmp+0x2c>
 800dd74:	d305      	bcc.n	800dd82 <__mcmp+0x32>
 800dd76:	2201      	movs	r2, #1
 800dd78:	4610      	mov	r0, r2
 800dd7a:	bd30      	pop	{r4, r5, pc}
 800dd7c:	4283      	cmp	r3, r0
 800dd7e:	d3f3      	bcc.n	800dd68 <__mcmp+0x18>
 800dd80:	e7fa      	b.n	800dd78 <__mcmp+0x28>
 800dd82:	f04f 32ff 	mov.w	r2, #4294967295
 800dd86:	e7f7      	b.n	800dd78 <__mcmp+0x28>

0800dd88 <__mdiff>:
 800dd88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd8c:	460c      	mov	r4, r1
 800dd8e:	4606      	mov	r6, r0
 800dd90:	4611      	mov	r1, r2
 800dd92:	4620      	mov	r0, r4
 800dd94:	4617      	mov	r7, r2
 800dd96:	f7ff ffdb 	bl	800dd50 <__mcmp>
 800dd9a:	1e05      	subs	r5, r0, #0
 800dd9c:	d110      	bne.n	800ddc0 <__mdiff+0x38>
 800dd9e:	4629      	mov	r1, r5
 800dda0:	4630      	mov	r0, r6
 800dda2:	f7ff fd0d 	bl	800d7c0 <_Balloc>
 800dda6:	b930      	cbnz	r0, 800ddb6 <__mdiff+0x2e>
 800dda8:	4b39      	ldr	r3, [pc, #228]	; (800de90 <__mdiff+0x108>)
 800ddaa:	4602      	mov	r2, r0
 800ddac:	f240 2132 	movw	r1, #562	; 0x232
 800ddb0:	4838      	ldr	r0, [pc, #224]	; (800de94 <__mdiff+0x10c>)
 800ddb2:	f7fe f9d7 	bl	800c164 <__assert_func>
 800ddb6:	2301      	movs	r3, #1
 800ddb8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ddbc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddc0:	bfa4      	itt	ge
 800ddc2:	463b      	movge	r3, r7
 800ddc4:	4627      	movge	r7, r4
 800ddc6:	4630      	mov	r0, r6
 800ddc8:	6879      	ldr	r1, [r7, #4]
 800ddca:	bfa6      	itte	ge
 800ddcc:	461c      	movge	r4, r3
 800ddce:	2500      	movge	r5, #0
 800ddd0:	2501      	movlt	r5, #1
 800ddd2:	f7ff fcf5 	bl	800d7c0 <_Balloc>
 800ddd6:	b920      	cbnz	r0, 800dde2 <__mdiff+0x5a>
 800ddd8:	4b2d      	ldr	r3, [pc, #180]	; (800de90 <__mdiff+0x108>)
 800ddda:	4602      	mov	r2, r0
 800dddc:	f44f 7110 	mov.w	r1, #576	; 0x240
 800dde0:	e7e6      	b.n	800ddb0 <__mdiff+0x28>
 800dde2:	693e      	ldr	r6, [r7, #16]
 800dde4:	60c5      	str	r5, [r0, #12]
 800dde6:	6925      	ldr	r5, [r4, #16]
 800dde8:	f107 0114 	add.w	r1, r7, #20
 800ddec:	f104 0914 	add.w	r9, r4, #20
 800ddf0:	f100 0e14 	add.w	lr, r0, #20
 800ddf4:	f107 0210 	add.w	r2, r7, #16
 800ddf8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800ddfc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800de00:	46f2      	mov	sl, lr
 800de02:	2700      	movs	r7, #0
 800de04:	f859 3b04 	ldr.w	r3, [r9], #4
 800de08:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800de0c:	fa1f f883 	uxth.w	r8, r3
 800de10:	fa17 f78b 	uxtah	r7, r7, fp
 800de14:	0c1b      	lsrs	r3, r3, #16
 800de16:	eba7 0808 	sub.w	r8, r7, r8
 800de1a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800de1e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800de22:	fa1f f888 	uxth.w	r8, r8
 800de26:	141f      	asrs	r7, r3, #16
 800de28:	454d      	cmp	r5, r9
 800de2a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800de2e:	f84a 3b04 	str.w	r3, [sl], #4
 800de32:	d8e7      	bhi.n	800de04 <__mdiff+0x7c>
 800de34:	1b2b      	subs	r3, r5, r4
 800de36:	3b15      	subs	r3, #21
 800de38:	f023 0303 	bic.w	r3, r3, #3
 800de3c:	3304      	adds	r3, #4
 800de3e:	3415      	adds	r4, #21
 800de40:	42a5      	cmp	r5, r4
 800de42:	bf38      	it	cc
 800de44:	2304      	movcc	r3, #4
 800de46:	4419      	add	r1, r3
 800de48:	4473      	add	r3, lr
 800de4a:	469e      	mov	lr, r3
 800de4c:	460d      	mov	r5, r1
 800de4e:	4565      	cmp	r5, ip
 800de50:	d30e      	bcc.n	800de70 <__mdiff+0xe8>
 800de52:	f10c 0203 	add.w	r2, ip, #3
 800de56:	1a52      	subs	r2, r2, r1
 800de58:	f022 0203 	bic.w	r2, r2, #3
 800de5c:	3903      	subs	r1, #3
 800de5e:	458c      	cmp	ip, r1
 800de60:	bf38      	it	cc
 800de62:	2200      	movcc	r2, #0
 800de64:	441a      	add	r2, r3
 800de66:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800de6a:	b17b      	cbz	r3, 800de8c <__mdiff+0x104>
 800de6c:	6106      	str	r6, [r0, #16]
 800de6e:	e7a5      	b.n	800ddbc <__mdiff+0x34>
 800de70:	f855 8b04 	ldr.w	r8, [r5], #4
 800de74:	fa17 f488 	uxtah	r4, r7, r8
 800de78:	1422      	asrs	r2, r4, #16
 800de7a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800de7e:	b2a4      	uxth	r4, r4
 800de80:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800de84:	f84e 4b04 	str.w	r4, [lr], #4
 800de88:	1417      	asrs	r7, r2, #16
 800de8a:	e7e0      	b.n	800de4e <__mdiff+0xc6>
 800de8c:	3e01      	subs	r6, #1
 800de8e:	e7ea      	b.n	800de66 <__mdiff+0xde>
 800de90:	0800f899 	.word	0x0800f899
 800de94:	0800f98c 	.word	0x0800f98c

0800de98 <__ulp>:
 800de98:	b082      	sub	sp, #8
 800de9a:	ed8d 0b00 	vstr	d0, [sp]
 800de9e:	9b01      	ldr	r3, [sp, #4]
 800dea0:	4912      	ldr	r1, [pc, #72]	; (800deec <__ulp+0x54>)
 800dea2:	4019      	ands	r1, r3
 800dea4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800dea8:	2900      	cmp	r1, #0
 800deaa:	dd05      	ble.n	800deb8 <__ulp+0x20>
 800deac:	2200      	movs	r2, #0
 800deae:	460b      	mov	r3, r1
 800deb0:	ec43 2b10 	vmov	d0, r2, r3
 800deb4:	b002      	add	sp, #8
 800deb6:	4770      	bx	lr
 800deb8:	4249      	negs	r1, r1
 800deba:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800debe:	ea4f 5021 	mov.w	r0, r1, asr #20
 800dec2:	f04f 0200 	mov.w	r2, #0
 800dec6:	f04f 0300 	mov.w	r3, #0
 800deca:	da04      	bge.n	800ded6 <__ulp+0x3e>
 800decc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800ded0:	fa41 f300 	asr.w	r3, r1, r0
 800ded4:	e7ec      	b.n	800deb0 <__ulp+0x18>
 800ded6:	f1a0 0114 	sub.w	r1, r0, #20
 800deda:	291e      	cmp	r1, #30
 800dedc:	bfda      	itte	le
 800dede:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800dee2:	fa20 f101 	lsrle.w	r1, r0, r1
 800dee6:	2101      	movgt	r1, #1
 800dee8:	460a      	mov	r2, r1
 800deea:	e7e1      	b.n	800deb0 <__ulp+0x18>
 800deec:	7ff00000 	.word	0x7ff00000

0800def0 <__b2d>:
 800def0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800def2:	6905      	ldr	r5, [r0, #16]
 800def4:	f100 0714 	add.w	r7, r0, #20
 800def8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800defc:	1f2e      	subs	r6, r5, #4
 800defe:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800df02:	4620      	mov	r0, r4
 800df04:	f7ff fd52 	bl	800d9ac <__hi0bits>
 800df08:	f1c0 0320 	rsb	r3, r0, #32
 800df0c:	280a      	cmp	r0, #10
 800df0e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800df8c <__b2d+0x9c>
 800df12:	600b      	str	r3, [r1, #0]
 800df14:	dc14      	bgt.n	800df40 <__b2d+0x50>
 800df16:	f1c0 0e0b 	rsb	lr, r0, #11
 800df1a:	fa24 f10e 	lsr.w	r1, r4, lr
 800df1e:	42b7      	cmp	r7, r6
 800df20:	ea41 030c 	orr.w	r3, r1, ip
 800df24:	bf34      	ite	cc
 800df26:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800df2a:	2100      	movcs	r1, #0
 800df2c:	3015      	adds	r0, #21
 800df2e:	fa04 f000 	lsl.w	r0, r4, r0
 800df32:	fa21 f10e 	lsr.w	r1, r1, lr
 800df36:	ea40 0201 	orr.w	r2, r0, r1
 800df3a:	ec43 2b10 	vmov	d0, r2, r3
 800df3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df40:	42b7      	cmp	r7, r6
 800df42:	bf3a      	itte	cc
 800df44:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800df48:	f1a5 0608 	subcc.w	r6, r5, #8
 800df4c:	2100      	movcs	r1, #0
 800df4e:	380b      	subs	r0, #11
 800df50:	d017      	beq.n	800df82 <__b2d+0x92>
 800df52:	f1c0 0c20 	rsb	ip, r0, #32
 800df56:	fa04 f500 	lsl.w	r5, r4, r0
 800df5a:	42be      	cmp	r6, r7
 800df5c:	fa21 f40c 	lsr.w	r4, r1, ip
 800df60:	ea45 0504 	orr.w	r5, r5, r4
 800df64:	bf8c      	ite	hi
 800df66:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800df6a:	2400      	movls	r4, #0
 800df6c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800df70:	fa01 f000 	lsl.w	r0, r1, r0
 800df74:	fa24 f40c 	lsr.w	r4, r4, ip
 800df78:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800df7c:	ea40 0204 	orr.w	r2, r0, r4
 800df80:	e7db      	b.n	800df3a <__b2d+0x4a>
 800df82:	ea44 030c 	orr.w	r3, r4, ip
 800df86:	460a      	mov	r2, r1
 800df88:	e7d7      	b.n	800df3a <__b2d+0x4a>
 800df8a:	bf00      	nop
 800df8c:	3ff00000 	.word	0x3ff00000

0800df90 <__d2b>:
 800df90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800df94:	4689      	mov	r9, r1
 800df96:	2101      	movs	r1, #1
 800df98:	ec57 6b10 	vmov	r6, r7, d0
 800df9c:	4690      	mov	r8, r2
 800df9e:	f7ff fc0f 	bl	800d7c0 <_Balloc>
 800dfa2:	4604      	mov	r4, r0
 800dfa4:	b930      	cbnz	r0, 800dfb4 <__d2b+0x24>
 800dfa6:	4602      	mov	r2, r0
 800dfa8:	4b25      	ldr	r3, [pc, #148]	; (800e040 <__d2b+0xb0>)
 800dfaa:	4826      	ldr	r0, [pc, #152]	; (800e044 <__d2b+0xb4>)
 800dfac:	f240 310a 	movw	r1, #778	; 0x30a
 800dfb0:	f7fe f8d8 	bl	800c164 <__assert_func>
 800dfb4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800dfb8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800dfbc:	bb35      	cbnz	r5, 800e00c <__d2b+0x7c>
 800dfbe:	2e00      	cmp	r6, #0
 800dfc0:	9301      	str	r3, [sp, #4]
 800dfc2:	d028      	beq.n	800e016 <__d2b+0x86>
 800dfc4:	4668      	mov	r0, sp
 800dfc6:	9600      	str	r6, [sp, #0]
 800dfc8:	f7ff fd10 	bl	800d9ec <__lo0bits>
 800dfcc:	9900      	ldr	r1, [sp, #0]
 800dfce:	b300      	cbz	r0, 800e012 <__d2b+0x82>
 800dfd0:	9a01      	ldr	r2, [sp, #4]
 800dfd2:	f1c0 0320 	rsb	r3, r0, #32
 800dfd6:	fa02 f303 	lsl.w	r3, r2, r3
 800dfda:	430b      	orrs	r3, r1
 800dfdc:	40c2      	lsrs	r2, r0
 800dfde:	6163      	str	r3, [r4, #20]
 800dfe0:	9201      	str	r2, [sp, #4]
 800dfe2:	9b01      	ldr	r3, [sp, #4]
 800dfe4:	61a3      	str	r3, [r4, #24]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	bf14      	ite	ne
 800dfea:	2202      	movne	r2, #2
 800dfec:	2201      	moveq	r2, #1
 800dfee:	6122      	str	r2, [r4, #16]
 800dff0:	b1d5      	cbz	r5, 800e028 <__d2b+0x98>
 800dff2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800dff6:	4405      	add	r5, r0
 800dff8:	f8c9 5000 	str.w	r5, [r9]
 800dffc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e000:	f8c8 0000 	str.w	r0, [r8]
 800e004:	4620      	mov	r0, r4
 800e006:	b003      	add	sp, #12
 800e008:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e00c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e010:	e7d5      	b.n	800dfbe <__d2b+0x2e>
 800e012:	6161      	str	r1, [r4, #20]
 800e014:	e7e5      	b.n	800dfe2 <__d2b+0x52>
 800e016:	a801      	add	r0, sp, #4
 800e018:	f7ff fce8 	bl	800d9ec <__lo0bits>
 800e01c:	9b01      	ldr	r3, [sp, #4]
 800e01e:	6163      	str	r3, [r4, #20]
 800e020:	2201      	movs	r2, #1
 800e022:	6122      	str	r2, [r4, #16]
 800e024:	3020      	adds	r0, #32
 800e026:	e7e3      	b.n	800dff0 <__d2b+0x60>
 800e028:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e02c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e030:	f8c9 0000 	str.w	r0, [r9]
 800e034:	6918      	ldr	r0, [r3, #16]
 800e036:	f7ff fcb9 	bl	800d9ac <__hi0bits>
 800e03a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e03e:	e7df      	b.n	800e000 <__d2b+0x70>
 800e040:	0800f899 	.word	0x0800f899
 800e044:	0800f98c 	.word	0x0800f98c

0800e048 <__ratio>:
 800e048:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e04c:	4688      	mov	r8, r1
 800e04e:	4669      	mov	r1, sp
 800e050:	4681      	mov	r9, r0
 800e052:	f7ff ff4d 	bl	800def0 <__b2d>
 800e056:	a901      	add	r1, sp, #4
 800e058:	4640      	mov	r0, r8
 800e05a:	ec55 4b10 	vmov	r4, r5, d0
 800e05e:	f7ff ff47 	bl	800def0 <__b2d>
 800e062:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e066:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e06a:	eba3 0c02 	sub.w	ip, r3, r2
 800e06e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e072:	1a9b      	subs	r3, r3, r2
 800e074:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e078:	ec51 0b10 	vmov	r0, r1, d0
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	bfd6      	itet	le
 800e080:	460a      	movle	r2, r1
 800e082:	462a      	movgt	r2, r5
 800e084:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e088:	468b      	mov	fp, r1
 800e08a:	462f      	mov	r7, r5
 800e08c:	bfd4      	ite	le
 800e08e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800e092:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e096:	4620      	mov	r0, r4
 800e098:	ee10 2a10 	vmov	r2, s0
 800e09c:	465b      	mov	r3, fp
 800e09e:	4639      	mov	r1, r7
 800e0a0:	f7f2 fbdc 	bl	800085c <__aeabi_ddiv>
 800e0a4:	ec41 0b10 	vmov	d0, r0, r1
 800e0a8:	b003      	add	sp, #12
 800e0aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e0ae <__copybits>:
 800e0ae:	3901      	subs	r1, #1
 800e0b0:	b570      	push	{r4, r5, r6, lr}
 800e0b2:	1149      	asrs	r1, r1, #5
 800e0b4:	6914      	ldr	r4, [r2, #16]
 800e0b6:	3101      	adds	r1, #1
 800e0b8:	f102 0314 	add.w	r3, r2, #20
 800e0bc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e0c0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e0c4:	1f05      	subs	r5, r0, #4
 800e0c6:	42a3      	cmp	r3, r4
 800e0c8:	d30c      	bcc.n	800e0e4 <__copybits+0x36>
 800e0ca:	1aa3      	subs	r3, r4, r2
 800e0cc:	3b11      	subs	r3, #17
 800e0ce:	f023 0303 	bic.w	r3, r3, #3
 800e0d2:	3211      	adds	r2, #17
 800e0d4:	42a2      	cmp	r2, r4
 800e0d6:	bf88      	it	hi
 800e0d8:	2300      	movhi	r3, #0
 800e0da:	4418      	add	r0, r3
 800e0dc:	2300      	movs	r3, #0
 800e0de:	4288      	cmp	r0, r1
 800e0e0:	d305      	bcc.n	800e0ee <__copybits+0x40>
 800e0e2:	bd70      	pop	{r4, r5, r6, pc}
 800e0e4:	f853 6b04 	ldr.w	r6, [r3], #4
 800e0e8:	f845 6f04 	str.w	r6, [r5, #4]!
 800e0ec:	e7eb      	b.n	800e0c6 <__copybits+0x18>
 800e0ee:	f840 3b04 	str.w	r3, [r0], #4
 800e0f2:	e7f4      	b.n	800e0de <__copybits+0x30>

0800e0f4 <__any_on>:
 800e0f4:	f100 0214 	add.w	r2, r0, #20
 800e0f8:	6900      	ldr	r0, [r0, #16]
 800e0fa:	114b      	asrs	r3, r1, #5
 800e0fc:	4298      	cmp	r0, r3
 800e0fe:	b510      	push	{r4, lr}
 800e100:	db11      	blt.n	800e126 <__any_on+0x32>
 800e102:	dd0a      	ble.n	800e11a <__any_on+0x26>
 800e104:	f011 011f 	ands.w	r1, r1, #31
 800e108:	d007      	beq.n	800e11a <__any_on+0x26>
 800e10a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e10e:	fa24 f001 	lsr.w	r0, r4, r1
 800e112:	fa00 f101 	lsl.w	r1, r0, r1
 800e116:	428c      	cmp	r4, r1
 800e118:	d10b      	bne.n	800e132 <__any_on+0x3e>
 800e11a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e11e:	4293      	cmp	r3, r2
 800e120:	d803      	bhi.n	800e12a <__any_on+0x36>
 800e122:	2000      	movs	r0, #0
 800e124:	bd10      	pop	{r4, pc}
 800e126:	4603      	mov	r3, r0
 800e128:	e7f7      	b.n	800e11a <__any_on+0x26>
 800e12a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e12e:	2900      	cmp	r1, #0
 800e130:	d0f5      	beq.n	800e11e <__any_on+0x2a>
 800e132:	2001      	movs	r0, #1
 800e134:	e7f6      	b.n	800e124 <__any_on+0x30>

0800e136 <_calloc_r>:
 800e136:	b513      	push	{r0, r1, r4, lr}
 800e138:	434a      	muls	r2, r1
 800e13a:	4611      	mov	r1, r2
 800e13c:	9201      	str	r2, [sp, #4]
 800e13e:	f000 f859 	bl	800e1f4 <_malloc_r>
 800e142:	4604      	mov	r4, r0
 800e144:	b118      	cbz	r0, 800e14e <_calloc_r+0x18>
 800e146:	9a01      	ldr	r2, [sp, #4]
 800e148:	2100      	movs	r1, #0
 800e14a:	f7fc fbe9 	bl	800a920 <memset>
 800e14e:	4620      	mov	r0, r4
 800e150:	b002      	add	sp, #8
 800e152:	bd10      	pop	{r4, pc}

0800e154 <_free_r>:
 800e154:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e156:	2900      	cmp	r1, #0
 800e158:	d048      	beq.n	800e1ec <_free_r+0x98>
 800e15a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e15e:	9001      	str	r0, [sp, #4]
 800e160:	2b00      	cmp	r3, #0
 800e162:	f1a1 0404 	sub.w	r4, r1, #4
 800e166:	bfb8      	it	lt
 800e168:	18e4      	addlt	r4, r4, r3
 800e16a:	f000 fe13 	bl	800ed94 <__malloc_lock>
 800e16e:	4a20      	ldr	r2, [pc, #128]	; (800e1f0 <_free_r+0x9c>)
 800e170:	9801      	ldr	r0, [sp, #4]
 800e172:	6813      	ldr	r3, [r2, #0]
 800e174:	4615      	mov	r5, r2
 800e176:	b933      	cbnz	r3, 800e186 <_free_r+0x32>
 800e178:	6063      	str	r3, [r4, #4]
 800e17a:	6014      	str	r4, [r2, #0]
 800e17c:	b003      	add	sp, #12
 800e17e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e182:	f000 be0d 	b.w	800eda0 <__malloc_unlock>
 800e186:	42a3      	cmp	r3, r4
 800e188:	d90b      	bls.n	800e1a2 <_free_r+0x4e>
 800e18a:	6821      	ldr	r1, [r4, #0]
 800e18c:	1862      	adds	r2, r4, r1
 800e18e:	4293      	cmp	r3, r2
 800e190:	bf04      	itt	eq
 800e192:	681a      	ldreq	r2, [r3, #0]
 800e194:	685b      	ldreq	r3, [r3, #4]
 800e196:	6063      	str	r3, [r4, #4]
 800e198:	bf04      	itt	eq
 800e19a:	1852      	addeq	r2, r2, r1
 800e19c:	6022      	streq	r2, [r4, #0]
 800e19e:	602c      	str	r4, [r5, #0]
 800e1a0:	e7ec      	b.n	800e17c <_free_r+0x28>
 800e1a2:	461a      	mov	r2, r3
 800e1a4:	685b      	ldr	r3, [r3, #4]
 800e1a6:	b10b      	cbz	r3, 800e1ac <_free_r+0x58>
 800e1a8:	42a3      	cmp	r3, r4
 800e1aa:	d9fa      	bls.n	800e1a2 <_free_r+0x4e>
 800e1ac:	6811      	ldr	r1, [r2, #0]
 800e1ae:	1855      	adds	r5, r2, r1
 800e1b0:	42a5      	cmp	r5, r4
 800e1b2:	d10b      	bne.n	800e1cc <_free_r+0x78>
 800e1b4:	6824      	ldr	r4, [r4, #0]
 800e1b6:	4421      	add	r1, r4
 800e1b8:	1854      	adds	r4, r2, r1
 800e1ba:	42a3      	cmp	r3, r4
 800e1bc:	6011      	str	r1, [r2, #0]
 800e1be:	d1dd      	bne.n	800e17c <_free_r+0x28>
 800e1c0:	681c      	ldr	r4, [r3, #0]
 800e1c2:	685b      	ldr	r3, [r3, #4]
 800e1c4:	6053      	str	r3, [r2, #4]
 800e1c6:	4421      	add	r1, r4
 800e1c8:	6011      	str	r1, [r2, #0]
 800e1ca:	e7d7      	b.n	800e17c <_free_r+0x28>
 800e1cc:	d902      	bls.n	800e1d4 <_free_r+0x80>
 800e1ce:	230c      	movs	r3, #12
 800e1d0:	6003      	str	r3, [r0, #0]
 800e1d2:	e7d3      	b.n	800e17c <_free_r+0x28>
 800e1d4:	6825      	ldr	r5, [r4, #0]
 800e1d6:	1961      	adds	r1, r4, r5
 800e1d8:	428b      	cmp	r3, r1
 800e1da:	bf04      	itt	eq
 800e1dc:	6819      	ldreq	r1, [r3, #0]
 800e1de:	685b      	ldreq	r3, [r3, #4]
 800e1e0:	6063      	str	r3, [r4, #4]
 800e1e2:	bf04      	itt	eq
 800e1e4:	1949      	addeq	r1, r1, r5
 800e1e6:	6021      	streq	r1, [r4, #0]
 800e1e8:	6054      	str	r4, [r2, #4]
 800e1ea:	e7c7      	b.n	800e17c <_free_r+0x28>
 800e1ec:	b003      	add	sp, #12
 800e1ee:	bd30      	pop	{r4, r5, pc}
 800e1f0:	2000028c 	.word	0x2000028c

0800e1f4 <_malloc_r>:
 800e1f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1f6:	1ccd      	adds	r5, r1, #3
 800e1f8:	f025 0503 	bic.w	r5, r5, #3
 800e1fc:	3508      	adds	r5, #8
 800e1fe:	2d0c      	cmp	r5, #12
 800e200:	bf38      	it	cc
 800e202:	250c      	movcc	r5, #12
 800e204:	2d00      	cmp	r5, #0
 800e206:	4606      	mov	r6, r0
 800e208:	db01      	blt.n	800e20e <_malloc_r+0x1a>
 800e20a:	42a9      	cmp	r1, r5
 800e20c:	d903      	bls.n	800e216 <_malloc_r+0x22>
 800e20e:	230c      	movs	r3, #12
 800e210:	6033      	str	r3, [r6, #0]
 800e212:	2000      	movs	r0, #0
 800e214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e216:	f000 fdbd 	bl	800ed94 <__malloc_lock>
 800e21a:	4921      	ldr	r1, [pc, #132]	; (800e2a0 <_malloc_r+0xac>)
 800e21c:	680a      	ldr	r2, [r1, #0]
 800e21e:	4614      	mov	r4, r2
 800e220:	b99c      	cbnz	r4, 800e24a <_malloc_r+0x56>
 800e222:	4f20      	ldr	r7, [pc, #128]	; (800e2a4 <_malloc_r+0xb0>)
 800e224:	683b      	ldr	r3, [r7, #0]
 800e226:	b923      	cbnz	r3, 800e232 <_malloc_r+0x3e>
 800e228:	4621      	mov	r1, r4
 800e22a:	4630      	mov	r0, r6
 800e22c:	f000 fafc 	bl	800e828 <_sbrk_r>
 800e230:	6038      	str	r0, [r7, #0]
 800e232:	4629      	mov	r1, r5
 800e234:	4630      	mov	r0, r6
 800e236:	f000 faf7 	bl	800e828 <_sbrk_r>
 800e23a:	1c43      	adds	r3, r0, #1
 800e23c:	d123      	bne.n	800e286 <_malloc_r+0x92>
 800e23e:	230c      	movs	r3, #12
 800e240:	6033      	str	r3, [r6, #0]
 800e242:	4630      	mov	r0, r6
 800e244:	f000 fdac 	bl	800eda0 <__malloc_unlock>
 800e248:	e7e3      	b.n	800e212 <_malloc_r+0x1e>
 800e24a:	6823      	ldr	r3, [r4, #0]
 800e24c:	1b5b      	subs	r3, r3, r5
 800e24e:	d417      	bmi.n	800e280 <_malloc_r+0x8c>
 800e250:	2b0b      	cmp	r3, #11
 800e252:	d903      	bls.n	800e25c <_malloc_r+0x68>
 800e254:	6023      	str	r3, [r4, #0]
 800e256:	441c      	add	r4, r3
 800e258:	6025      	str	r5, [r4, #0]
 800e25a:	e004      	b.n	800e266 <_malloc_r+0x72>
 800e25c:	6863      	ldr	r3, [r4, #4]
 800e25e:	42a2      	cmp	r2, r4
 800e260:	bf0c      	ite	eq
 800e262:	600b      	streq	r3, [r1, #0]
 800e264:	6053      	strne	r3, [r2, #4]
 800e266:	4630      	mov	r0, r6
 800e268:	f000 fd9a 	bl	800eda0 <__malloc_unlock>
 800e26c:	f104 000b 	add.w	r0, r4, #11
 800e270:	1d23      	adds	r3, r4, #4
 800e272:	f020 0007 	bic.w	r0, r0, #7
 800e276:	1ac2      	subs	r2, r0, r3
 800e278:	d0cc      	beq.n	800e214 <_malloc_r+0x20>
 800e27a:	1a1b      	subs	r3, r3, r0
 800e27c:	50a3      	str	r3, [r4, r2]
 800e27e:	e7c9      	b.n	800e214 <_malloc_r+0x20>
 800e280:	4622      	mov	r2, r4
 800e282:	6864      	ldr	r4, [r4, #4]
 800e284:	e7cc      	b.n	800e220 <_malloc_r+0x2c>
 800e286:	1cc4      	adds	r4, r0, #3
 800e288:	f024 0403 	bic.w	r4, r4, #3
 800e28c:	42a0      	cmp	r0, r4
 800e28e:	d0e3      	beq.n	800e258 <_malloc_r+0x64>
 800e290:	1a21      	subs	r1, r4, r0
 800e292:	4630      	mov	r0, r6
 800e294:	f000 fac8 	bl	800e828 <_sbrk_r>
 800e298:	3001      	adds	r0, #1
 800e29a:	d1dd      	bne.n	800e258 <_malloc_r+0x64>
 800e29c:	e7cf      	b.n	800e23e <_malloc_r+0x4a>
 800e29e:	bf00      	nop
 800e2a0:	2000028c 	.word	0x2000028c
 800e2a4:	20000290 	.word	0x20000290

0800e2a8 <__ssputs_r>:
 800e2a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2ac:	688e      	ldr	r6, [r1, #8]
 800e2ae:	429e      	cmp	r6, r3
 800e2b0:	4682      	mov	sl, r0
 800e2b2:	460c      	mov	r4, r1
 800e2b4:	4690      	mov	r8, r2
 800e2b6:	461f      	mov	r7, r3
 800e2b8:	d838      	bhi.n	800e32c <__ssputs_r+0x84>
 800e2ba:	898a      	ldrh	r2, [r1, #12]
 800e2bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e2c0:	d032      	beq.n	800e328 <__ssputs_r+0x80>
 800e2c2:	6825      	ldr	r5, [r4, #0]
 800e2c4:	6909      	ldr	r1, [r1, #16]
 800e2c6:	eba5 0901 	sub.w	r9, r5, r1
 800e2ca:	6965      	ldr	r5, [r4, #20]
 800e2cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e2d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e2d4:	3301      	adds	r3, #1
 800e2d6:	444b      	add	r3, r9
 800e2d8:	106d      	asrs	r5, r5, #1
 800e2da:	429d      	cmp	r5, r3
 800e2dc:	bf38      	it	cc
 800e2de:	461d      	movcc	r5, r3
 800e2e0:	0553      	lsls	r3, r2, #21
 800e2e2:	d531      	bpl.n	800e348 <__ssputs_r+0xa0>
 800e2e4:	4629      	mov	r1, r5
 800e2e6:	f7ff ff85 	bl	800e1f4 <_malloc_r>
 800e2ea:	4606      	mov	r6, r0
 800e2ec:	b950      	cbnz	r0, 800e304 <__ssputs_r+0x5c>
 800e2ee:	230c      	movs	r3, #12
 800e2f0:	f8ca 3000 	str.w	r3, [sl]
 800e2f4:	89a3      	ldrh	r3, [r4, #12]
 800e2f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e2fa:	81a3      	strh	r3, [r4, #12]
 800e2fc:	f04f 30ff 	mov.w	r0, #4294967295
 800e300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e304:	6921      	ldr	r1, [r4, #16]
 800e306:	464a      	mov	r2, r9
 800e308:	f7fc fafc 	bl	800a904 <memcpy>
 800e30c:	89a3      	ldrh	r3, [r4, #12]
 800e30e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e312:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e316:	81a3      	strh	r3, [r4, #12]
 800e318:	6126      	str	r6, [r4, #16]
 800e31a:	6165      	str	r5, [r4, #20]
 800e31c:	444e      	add	r6, r9
 800e31e:	eba5 0509 	sub.w	r5, r5, r9
 800e322:	6026      	str	r6, [r4, #0]
 800e324:	60a5      	str	r5, [r4, #8]
 800e326:	463e      	mov	r6, r7
 800e328:	42be      	cmp	r6, r7
 800e32a:	d900      	bls.n	800e32e <__ssputs_r+0x86>
 800e32c:	463e      	mov	r6, r7
 800e32e:	4632      	mov	r2, r6
 800e330:	6820      	ldr	r0, [r4, #0]
 800e332:	4641      	mov	r1, r8
 800e334:	f000 fd14 	bl	800ed60 <memmove>
 800e338:	68a3      	ldr	r3, [r4, #8]
 800e33a:	6822      	ldr	r2, [r4, #0]
 800e33c:	1b9b      	subs	r3, r3, r6
 800e33e:	4432      	add	r2, r6
 800e340:	60a3      	str	r3, [r4, #8]
 800e342:	6022      	str	r2, [r4, #0]
 800e344:	2000      	movs	r0, #0
 800e346:	e7db      	b.n	800e300 <__ssputs_r+0x58>
 800e348:	462a      	mov	r2, r5
 800e34a:	f000 fd2f 	bl	800edac <_realloc_r>
 800e34e:	4606      	mov	r6, r0
 800e350:	2800      	cmp	r0, #0
 800e352:	d1e1      	bne.n	800e318 <__ssputs_r+0x70>
 800e354:	6921      	ldr	r1, [r4, #16]
 800e356:	4650      	mov	r0, sl
 800e358:	f7ff fefc 	bl	800e154 <_free_r>
 800e35c:	e7c7      	b.n	800e2ee <__ssputs_r+0x46>
	...

0800e360 <_svfiprintf_r>:
 800e360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e364:	4698      	mov	r8, r3
 800e366:	898b      	ldrh	r3, [r1, #12]
 800e368:	061b      	lsls	r3, r3, #24
 800e36a:	b09d      	sub	sp, #116	; 0x74
 800e36c:	4607      	mov	r7, r0
 800e36e:	460d      	mov	r5, r1
 800e370:	4614      	mov	r4, r2
 800e372:	d50e      	bpl.n	800e392 <_svfiprintf_r+0x32>
 800e374:	690b      	ldr	r3, [r1, #16]
 800e376:	b963      	cbnz	r3, 800e392 <_svfiprintf_r+0x32>
 800e378:	2140      	movs	r1, #64	; 0x40
 800e37a:	f7ff ff3b 	bl	800e1f4 <_malloc_r>
 800e37e:	6028      	str	r0, [r5, #0]
 800e380:	6128      	str	r0, [r5, #16]
 800e382:	b920      	cbnz	r0, 800e38e <_svfiprintf_r+0x2e>
 800e384:	230c      	movs	r3, #12
 800e386:	603b      	str	r3, [r7, #0]
 800e388:	f04f 30ff 	mov.w	r0, #4294967295
 800e38c:	e0d1      	b.n	800e532 <_svfiprintf_r+0x1d2>
 800e38e:	2340      	movs	r3, #64	; 0x40
 800e390:	616b      	str	r3, [r5, #20]
 800e392:	2300      	movs	r3, #0
 800e394:	9309      	str	r3, [sp, #36]	; 0x24
 800e396:	2320      	movs	r3, #32
 800e398:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e39c:	f8cd 800c 	str.w	r8, [sp, #12]
 800e3a0:	2330      	movs	r3, #48	; 0x30
 800e3a2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e54c <_svfiprintf_r+0x1ec>
 800e3a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e3aa:	f04f 0901 	mov.w	r9, #1
 800e3ae:	4623      	mov	r3, r4
 800e3b0:	469a      	mov	sl, r3
 800e3b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e3b6:	b10a      	cbz	r2, 800e3bc <_svfiprintf_r+0x5c>
 800e3b8:	2a25      	cmp	r2, #37	; 0x25
 800e3ba:	d1f9      	bne.n	800e3b0 <_svfiprintf_r+0x50>
 800e3bc:	ebba 0b04 	subs.w	fp, sl, r4
 800e3c0:	d00b      	beq.n	800e3da <_svfiprintf_r+0x7a>
 800e3c2:	465b      	mov	r3, fp
 800e3c4:	4622      	mov	r2, r4
 800e3c6:	4629      	mov	r1, r5
 800e3c8:	4638      	mov	r0, r7
 800e3ca:	f7ff ff6d 	bl	800e2a8 <__ssputs_r>
 800e3ce:	3001      	adds	r0, #1
 800e3d0:	f000 80aa 	beq.w	800e528 <_svfiprintf_r+0x1c8>
 800e3d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e3d6:	445a      	add	r2, fp
 800e3d8:	9209      	str	r2, [sp, #36]	; 0x24
 800e3da:	f89a 3000 	ldrb.w	r3, [sl]
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	f000 80a2 	beq.w	800e528 <_svfiprintf_r+0x1c8>
 800e3e4:	2300      	movs	r3, #0
 800e3e6:	f04f 32ff 	mov.w	r2, #4294967295
 800e3ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e3ee:	f10a 0a01 	add.w	sl, sl, #1
 800e3f2:	9304      	str	r3, [sp, #16]
 800e3f4:	9307      	str	r3, [sp, #28]
 800e3f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e3fa:	931a      	str	r3, [sp, #104]	; 0x68
 800e3fc:	4654      	mov	r4, sl
 800e3fe:	2205      	movs	r2, #5
 800e400:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e404:	4851      	ldr	r0, [pc, #324]	; (800e54c <_svfiprintf_r+0x1ec>)
 800e406:	f7f1 fef3 	bl	80001f0 <memchr>
 800e40a:	9a04      	ldr	r2, [sp, #16]
 800e40c:	b9d8      	cbnz	r0, 800e446 <_svfiprintf_r+0xe6>
 800e40e:	06d0      	lsls	r0, r2, #27
 800e410:	bf44      	itt	mi
 800e412:	2320      	movmi	r3, #32
 800e414:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e418:	0711      	lsls	r1, r2, #28
 800e41a:	bf44      	itt	mi
 800e41c:	232b      	movmi	r3, #43	; 0x2b
 800e41e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e422:	f89a 3000 	ldrb.w	r3, [sl]
 800e426:	2b2a      	cmp	r3, #42	; 0x2a
 800e428:	d015      	beq.n	800e456 <_svfiprintf_r+0xf6>
 800e42a:	9a07      	ldr	r2, [sp, #28]
 800e42c:	4654      	mov	r4, sl
 800e42e:	2000      	movs	r0, #0
 800e430:	f04f 0c0a 	mov.w	ip, #10
 800e434:	4621      	mov	r1, r4
 800e436:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e43a:	3b30      	subs	r3, #48	; 0x30
 800e43c:	2b09      	cmp	r3, #9
 800e43e:	d94e      	bls.n	800e4de <_svfiprintf_r+0x17e>
 800e440:	b1b0      	cbz	r0, 800e470 <_svfiprintf_r+0x110>
 800e442:	9207      	str	r2, [sp, #28]
 800e444:	e014      	b.n	800e470 <_svfiprintf_r+0x110>
 800e446:	eba0 0308 	sub.w	r3, r0, r8
 800e44a:	fa09 f303 	lsl.w	r3, r9, r3
 800e44e:	4313      	orrs	r3, r2
 800e450:	9304      	str	r3, [sp, #16]
 800e452:	46a2      	mov	sl, r4
 800e454:	e7d2      	b.n	800e3fc <_svfiprintf_r+0x9c>
 800e456:	9b03      	ldr	r3, [sp, #12]
 800e458:	1d19      	adds	r1, r3, #4
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	9103      	str	r1, [sp, #12]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	bfbb      	ittet	lt
 800e462:	425b      	neglt	r3, r3
 800e464:	f042 0202 	orrlt.w	r2, r2, #2
 800e468:	9307      	strge	r3, [sp, #28]
 800e46a:	9307      	strlt	r3, [sp, #28]
 800e46c:	bfb8      	it	lt
 800e46e:	9204      	strlt	r2, [sp, #16]
 800e470:	7823      	ldrb	r3, [r4, #0]
 800e472:	2b2e      	cmp	r3, #46	; 0x2e
 800e474:	d10c      	bne.n	800e490 <_svfiprintf_r+0x130>
 800e476:	7863      	ldrb	r3, [r4, #1]
 800e478:	2b2a      	cmp	r3, #42	; 0x2a
 800e47a:	d135      	bne.n	800e4e8 <_svfiprintf_r+0x188>
 800e47c:	9b03      	ldr	r3, [sp, #12]
 800e47e:	1d1a      	adds	r2, r3, #4
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	9203      	str	r2, [sp, #12]
 800e484:	2b00      	cmp	r3, #0
 800e486:	bfb8      	it	lt
 800e488:	f04f 33ff 	movlt.w	r3, #4294967295
 800e48c:	3402      	adds	r4, #2
 800e48e:	9305      	str	r3, [sp, #20]
 800e490:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e55c <_svfiprintf_r+0x1fc>
 800e494:	7821      	ldrb	r1, [r4, #0]
 800e496:	2203      	movs	r2, #3
 800e498:	4650      	mov	r0, sl
 800e49a:	f7f1 fea9 	bl	80001f0 <memchr>
 800e49e:	b140      	cbz	r0, 800e4b2 <_svfiprintf_r+0x152>
 800e4a0:	2340      	movs	r3, #64	; 0x40
 800e4a2:	eba0 000a 	sub.w	r0, r0, sl
 800e4a6:	fa03 f000 	lsl.w	r0, r3, r0
 800e4aa:	9b04      	ldr	r3, [sp, #16]
 800e4ac:	4303      	orrs	r3, r0
 800e4ae:	3401      	adds	r4, #1
 800e4b0:	9304      	str	r3, [sp, #16]
 800e4b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4b6:	4826      	ldr	r0, [pc, #152]	; (800e550 <_svfiprintf_r+0x1f0>)
 800e4b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e4bc:	2206      	movs	r2, #6
 800e4be:	f7f1 fe97 	bl	80001f0 <memchr>
 800e4c2:	2800      	cmp	r0, #0
 800e4c4:	d038      	beq.n	800e538 <_svfiprintf_r+0x1d8>
 800e4c6:	4b23      	ldr	r3, [pc, #140]	; (800e554 <_svfiprintf_r+0x1f4>)
 800e4c8:	bb1b      	cbnz	r3, 800e512 <_svfiprintf_r+0x1b2>
 800e4ca:	9b03      	ldr	r3, [sp, #12]
 800e4cc:	3307      	adds	r3, #7
 800e4ce:	f023 0307 	bic.w	r3, r3, #7
 800e4d2:	3308      	adds	r3, #8
 800e4d4:	9303      	str	r3, [sp, #12]
 800e4d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e4d8:	4433      	add	r3, r6
 800e4da:	9309      	str	r3, [sp, #36]	; 0x24
 800e4dc:	e767      	b.n	800e3ae <_svfiprintf_r+0x4e>
 800e4de:	fb0c 3202 	mla	r2, ip, r2, r3
 800e4e2:	460c      	mov	r4, r1
 800e4e4:	2001      	movs	r0, #1
 800e4e6:	e7a5      	b.n	800e434 <_svfiprintf_r+0xd4>
 800e4e8:	2300      	movs	r3, #0
 800e4ea:	3401      	adds	r4, #1
 800e4ec:	9305      	str	r3, [sp, #20]
 800e4ee:	4619      	mov	r1, r3
 800e4f0:	f04f 0c0a 	mov.w	ip, #10
 800e4f4:	4620      	mov	r0, r4
 800e4f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e4fa:	3a30      	subs	r2, #48	; 0x30
 800e4fc:	2a09      	cmp	r2, #9
 800e4fe:	d903      	bls.n	800e508 <_svfiprintf_r+0x1a8>
 800e500:	2b00      	cmp	r3, #0
 800e502:	d0c5      	beq.n	800e490 <_svfiprintf_r+0x130>
 800e504:	9105      	str	r1, [sp, #20]
 800e506:	e7c3      	b.n	800e490 <_svfiprintf_r+0x130>
 800e508:	fb0c 2101 	mla	r1, ip, r1, r2
 800e50c:	4604      	mov	r4, r0
 800e50e:	2301      	movs	r3, #1
 800e510:	e7f0      	b.n	800e4f4 <_svfiprintf_r+0x194>
 800e512:	ab03      	add	r3, sp, #12
 800e514:	9300      	str	r3, [sp, #0]
 800e516:	462a      	mov	r2, r5
 800e518:	4b0f      	ldr	r3, [pc, #60]	; (800e558 <_svfiprintf_r+0x1f8>)
 800e51a:	a904      	add	r1, sp, #16
 800e51c:	4638      	mov	r0, r7
 800e51e:	f7fc faa7 	bl	800aa70 <_printf_float>
 800e522:	1c42      	adds	r2, r0, #1
 800e524:	4606      	mov	r6, r0
 800e526:	d1d6      	bne.n	800e4d6 <_svfiprintf_r+0x176>
 800e528:	89ab      	ldrh	r3, [r5, #12]
 800e52a:	065b      	lsls	r3, r3, #25
 800e52c:	f53f af2c 	bmi.w	800e388 <_svfiprintf_r+0x28>
 800e530:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e532:	b01d      	add	sp, #116	; 0x74
 800e534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e538:	ab03      	add	r3, sp, #12
 800e53a:	9300      	str	r3, [sp, #0]
 800e53c:	462a      	mov	r2, r5
 800e53e:	4b06      	ldr	r3, [pc, #24]	; (800e558 <_svfiprintf_r+0x1f8>)
 800e540:	a904      	add	r1, sp, #16
 800e542:	4638      	mov	r0, r7
 800e544:	f7fc fd38 	bl	800afb8 <_printf_i>
 800e548:	e7eb      	b.n	800e522 <_svfiprintf_r+0x1c2>
 800e54a:	bf00      	nop
 800e54c:	0800faec 	.word	0x0800faec
 800e550:	0800faf6 	.word	0x0800faf6
 800e554:	0800aa71 	.word	0x0800aa71
 800e558:	0800e2a9 	.word	0x0800e2a9
 800e55c:	0800faf2 	.word	0x0800faf2

0800e560 <__sfputc_r>:
 800e560:	6893      	ldr	r3, [r2, #8]
 800e562:	3b01      	subs	r3, #1
 800e564:	2b00      	cmp	r3, #0
 800e566:	b410      	push	{r4}
 800e568:	6093      	str	r3, [r2, #8]
 800e56a:	da08      	bge.n	800e57e <__sfputc_r+0x1e>
 800e56c:	6994      	ldr	r4, [r2, #24]
 800e56e:	42a3      	cmp	r3, r4
 800e570:	db01      	blt.n	800e576 <__sfputc_r+0x16>
 800e572:	290a      	cmp	r1, #10
 800e574:	d103      	bne.n	800e57e <__sfputc_r+0x1e>
 800e576:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e57a:	f000 b9c1 	b.w	800e900 <__swbuf_r>
 800e57e:	6813      	ldr	r3, [r2, #0]
 800e580:	1c58      	adds	r0, r3, #1
 800e582:	6010      	str	r0, [r2, #0]
 800e584:	7019      	strb	r1, [r3, #0]
 800e586:	4608      	mov	r0, r1
 800e588:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e58c:	4770      	bx	lr

0800e58e <__sfputs_r>:
 800e58e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e590:	4606      	mov	r6, r0
 800e592:	460f      	mov	r7, r1
 800e594:	4614      	mov	r4, r2
 800e596:	18d5      	adds	r5, r2, r3
 800e598:	42ac      	cmp	r4, r5
 800e59a:	d101      	bne.n	800e5a0 <__sfputs_r+0x12>
 800e59c:	2000      	movs	r0, #0
 800e59e:	e007      	b.n	800e5b0 <__sfputs_r+0x22>
 800e5a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e5a4:	463a      	mov	r2, r7
 800e5a6:	4630      	mov	r0, r6
 800e5a8:	f7ff ffda 	bl	800e560 <__sfputc_r>
 800e5ac:	1c43      	adds	r3, r0, #1
 800e5ae:	d1f3      	bne.n	800e598 <__sfputs_r+0xa>
 800e5b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e5b4 <_vfiprintf_r>:
 800e5b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5b8:	460d      	mov	r5, r1
 800e5ba:	b09d      	sub	sp, #116	; 0x74
 800e5bc:	4614      	mov	r4, r2
 800e5be:	4698      	mov	r8, r3
 800e5c0:	4606      	mov	r6, r0
 800e5c2:	b118      	cbz	r0, 800e5cc <_vfiprintf_r+0x18>
 800e5c4:	6983      	ldr	r3, [r0, #24]
 800e5c6:	b90b      	cbnz	r3, 800e5cc <_vfiprintf_r+0x18>
 800e5c8:	f7fe fcba 	bl	800cf40 <__sinit>
 800e5cc:	4b89      	ldr	r3, [pc, #548]	; (800e7f4 <_vfiprintf_r+0x240>)
 800e5ce:	429d      	cmp	r5, r3
 800e5d0:	d11b      	bne.n	800e60a <_vfiprintf_r+0x56>
 800e5d2:	6875      	ldr	r5, [r6, #4]
 800e5d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e5d6:	07d9      	lsls	r1, r3, #31
 800e5d8:	d405      	bmi.n	800e5e6 <_vfiprintf_r+0x32>
 800e5da:	89ab      	ldrh	r3, [r5, #12]
 800e5dc:	059a      	lsls	r2, r3, #22
 800e5de:	d402      	bmi.n	800e5e6 <_vfiprintf_r+0x32>
 800e5e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e5e2:	f7ff f8d0 	bl	800d786 <__retarget_lock_acquire_recursive>
 800e5e6:	89ab      	ldrh	r3, [r5, #12]
 800e5e8:	071b      	lsls	r3, r3, #28
 800e5ea:	d501      	bpl.n	800e5f0 <_vfiprintf_r+0x3c>
 800e5ec:	692b      	ldr	r3, [r5, #16]
 800e5ee:	b9eb      	cbnz	r3, 800e62c <_vfiprintf_r+0x78>
 800e5f0:	4629      	mov	r1, r5
 800e5f2:	4630      	mov	r0, r6
 800e5f4:	f000 f9f6 	bl	800e9e4 <__swsetup_r>
 800e5f8:	b1c0      	cbz	r0, 800e62c <_vfiprintf_r+0x78>
 800e5fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e5fc:	07dc      	lsls	r4, r3, #31
 800e5fe:	d50e      	bpl.n	800e61e <_vfiprintf_r+0x6a>
 800e600:	f04f 30ff 	mov.w	r0, #4294967295
 800e604:	b01d      	add	sp, #116	; 0x74
 800e606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e60a:	4b7b      	ldr	r3, [pc, #492]	; (800e7f8 <_vfiprintf_r+0x244>)
 800e60c:	429d      	cmp	r5, r3
 800e60e:	d101      	bne.n	800e614 <_vfiprintf_r+0x60>
 800e610:	68b5      	ldr	r5, [r6, #8]
 800e612:	e7df      	b.n	800e5d4 <_vfiprintf_r+0x20>
 800e614:	4b79      	ldr	r3, [pc, #484]	; (800e7fc <_vfiprintf_r+0x248>)
 800e616:	429d      	cmp	r5, r3
 800e618:	bf08      	it	eq
 800e61a:	68f5      	ldreq	r5, [r6, #12]
 800e61c:	e7da      	b.n	800e5d4 <_vfiprintf_r+0x20>
 800e61e:	89ab      	ldrh	r3, [r5, #12]
 800e620:	0598      	lsls	r0, r3, #22
 800e622:	d4ed      	bmi.n	800e600 <_vfiprintf_r+0x4c>
 800e624:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e626:	f7ff f8af 	bl	800d788 <__retarget_lock_release_recursive>
 800e62a:	e7e9      	b.n	800e600 <_vfiprintf_r+0x4c>
 800e62c:	2300      	movs	r3, #0
 800e62e:	9309      	str	r3, [sp, #36]	; 0x24
 800e630:	2320      	movs	r3, #32
 800e632:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e636:	f8cd 800c 	str.w	r8, [sp, #12]
 800e63a:	2330      	movs	r3, #48	; 0x30
 800e63c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e800 <_vfiprintf_r+0x24c>
 800e640:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e644:	f04f 0901 	mov.w	r9, #1
 800e648:	4623      	mov	r3, r4
 800e64a:	469a      	mov	sl, r3
 800e64c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e650:	b10a      	cbz	r2, 800e656 <_vfiprintf_r+0xa2>
 800e652:	2a25      	cmp	r2, #37	; 0x25
 800e654:	d1f9      	bne.n	800e64a <_vfiprintf_r+0x96>
 800e656:	ebba 0b04 	subs.w	fp, sl, r4
 800e65a:	d00b      	beq.n	800e674 <_vfiprintf_r+0xc0>
 800e65c:	465b      	mov	r3, fp
 800e65e:	4622      	mov	r2, r4
 800e660:	4629      	mov	r1, r5
 800e662:	4630      	mov	r0, r6
 800e664:	f7ff ff93 	bl	800e58e <__sfputs_r>
 800e668:	3001      	adds	r0, #1
 800e66a:	f000 80aa 	beq.w	800e7c2 <_vfiprintf_r+0x20e>
 800e66e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e670:	445a      	add	r2, fp
 800e672:	9209      	str	r2, [sp, #36]	; 0x24
 800e674:	f89a 3000 	ldrb.w	r3, [sl]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	f000 80a2 	beq.w	800e7c2 <_vfiprintf_r+0x20e>
 800e67e:	2300      	movs	r3, #0
 800e680:	f04f 32ff 	mov.w	r2, #4294967295
 800e684:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e688:	f10a 0a01 	add.w	sl, sl, #1
 800e68c:	9304      	str	r3, [sp, #16]
 800e68e:	9307      	str	r3, [sp, #28]
 800e690:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e694:	931a      	str	r3, [sp, #104]	; 0x68
 800e696:	4654      	mov	r4, sl
 800e698:	2205      	movs	r2, #5
 800e69a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e69e:	4858      	ldr	r0, [pc, #352]	; (800e800 <_vfiprintf_r+0x24c>)
 800e6a0:	f7f1 fda6 	bl	80001f0 <memchr>
 800e6a4:	9a04      	ldr	r2, [sp, #16]
 800e6a6:	b9d8      	cbnz	r0, 800e6e0 <_vfiprintf_r+0x12c>
 800e6a8:	06d1      	lsls	r1, r2, #27
 800e6aa:	bf44      	itt	mi
 800e6ac:	2320      	movmi	r3, #32
 800e6ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e6b2:	0713      	lsls	r3, r2, #28
 800e6b4:	bf44      	itt	mi
 800e6b6:	232b      	movmi	r3, #43	; 0x2b
 800e6b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e6bc:	f89a 3000 	ldrb.w	r3, [sl]
 800e6c0:	2b2a      	cmp	r3, #42	; 0x2a
 800e6c2:	d015      	beq.n	800e6f0 <_vfiprintf_r+0x13c>
 800e6c4:	9a07      	ldr	r2, [sp, #28]
 800e6c6:	4654      	mov	r4, sl
 800e6c8:	2000      	movs	r0, #0
 800e6ca:	f04f 0c0a 	mov.w	ip, #10
 800e6ce:	4621      	mov	r1, r4
 800e6d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e6d4:	3b30      	subs	r3, #48	; 0x30
 800e6d6:	2b09      	cmp	r3, #9
 800e6d8:	d94e      	bls.n	800e778 <_vfiprintf_r+0x1c4>
 800e6da:	b1b0      	cbz	r0, 800e70a <_vfiprintf_r+0x156>
 800e6dc:	9207      	str	r2, [sp, #28]
 800e6de:	e014      	b.n	800e70a <_vfiprintf_r+0x156>
 800e6e0:	eba0 0308 	sub.w	r3, r0, r8
 800e6e4:	fa09 f303 	lsl.w	r3, r9, r3
 800e6e8:	4313      	orrs	r3, r2
 800e6ea:	9304      	str	r3, [sp, #16]
 800e6ec:	46a2      	mov	sl, r4
 800e6ee:	e7d2      	b.n	800e696 <_vfiprintf_r+0xe2>
 800e6f0:	9b03      	ldr	r3, [sp, #12]
 800e6f2:	1d19      	adds	r1, r3, #4
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	9103      	str	r1, [sp, #12]
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	bfbb      	ittet	lt
 800e6fc:	425b      	neglt	r3, r3
 800e6fe:	f042 0202 	orrlt.w	r2, r2, #2
 800e702:	9307      	strge	r3, [sp, #28]
 800e704:	9307      	strlt	r3, [sp, #28]
 800e706:	bfb8      	it	lt
 800e708:	9204      	strlt	r2, [sp, #16]
 800e70a:	7823      	ldrb	r3, [r4, #0]
 800e70c:	2b2e      	cmp	r3, #46	; 0x2e
 800e70e:	d10c      	bne.n	800e72a <_vfiprintf_r+0x176>
 800e710:	7863      	ldrb	r3, [r4, #1]
 800e712:	2b2a      	cmp	r3, #42	; 0x2a
 800e714:	d135      	bne.n	800e782 <_vfiprintf_r+0x1ce>
 800e716:	9b03      	ldr	r3, [sp, #12]
 800e718:	1d1a      	adds	r2, r3, #4
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	9203      	str	r2, [sp, #12]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	bfb8      	it	lt
 800e722:	f04f 33ff 	movlt.w	r3, #4294967295
 800e726:	3402      	adds	r4, #2
 800e728:	9305      	str	r3, [sp, #20]
 800e72a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e810 <_vfiprintf_r+0x25c>
 800e72e:	7821      	ldrb	r1, [r4, #0]
 800e730:	2203      	movs	r2, #3
 800e732:	4650      	mov	r0, sl
 800e734:	f7f1 fd5c 	bl	80001f0 <memchr>
 800e738:	b140      	cbz	r0, 800e74c <_vfiprintf_r+0x198>
 800e73a:	2340      	movs	r3, #64	; 0x40
 800e73c:	eba0 000a 	sub.w	r0, r0, sl
 800e740:	fa03 f000 	lsl.w	r0, r3, r0
 800e744:	9b04      	ldr	r3, [sp, #16]
 800e746:	4303      	orrs	r3, r0
 800e748:	3401      	adds	r4, #1
 800e74a:	9304      	str	r3, [sp, #16]
 800e74c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e750:	482c      	ldr	r0, [pc, #176]	; (800e804 <_vfiprintf_r+0x250>)
 800e752:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e756:	2206      	movs	r2, #6
 800e758:	f7f1 fd4a 	bl	80001f0 <memchr>
 800e75c:	2800      	cmp	r0, #0
 800e75e:	d03f      	beq.n	800e7e0 <_vfiprintf_r+0x22c>
 800e760:	4b29      	ldr	r3, [pc, #164]	; (800e808 <_vfiprintf_r+0x254>)
 800e762:	bb1b      	cbnz	r3, 800e7ac <_vfiprintf_r+0x1f8>
 800e764:	9b03      	ldr	r3, [sp, #12]
 800e766:	3307      	adds	r3, #7
 800e768:	f023 0307 	bic.w	r3, r3, #7
 800e76c:	3308      	adds	r3, #8
 800e76e:	9303      	str	r3, [sp, #12]
 800e770:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e772:	443b      	add	r3, r7
 800e774:	9309      	str	r3, [sp, #36]	; 0x24
 800e776:	e767      	b.n	800e648 <_vfiprintf_r+0x94>
 800e778:	fb0c 3202 	mla	r2, ip, r2, r3
 800e77c:	460c      	mov	r4, r1
 800e77e:	2001      	movs	r0, #1
 800e780:	e7a5      	b.n	800e6ce <_vfiprintf_r+0x11a>
 800e782:	2300      	movs	r3, #0
 800e784:	3401      	adds	r4, #1
 800e786:	9305      	str	r3, [sp, #20]
 800e788:	4619      	mov	r1, r3
 800e78a:	f04f 0c0a 	mov.w	ip, #10
 800e78e:	4620      	mov	r0, r4
 800e790:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e794:	3a30      	subs	r2, #48	; 0x30
 800e796:	2a09      	cmp	r2, #9
 800e798:	d903      	bls.n	800e7a2 <_vfiprintf_r+0x1ee>
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d0c5      	beq.n	800e72a <_vfiprintf_r+0x176>
 800e79e:	9105      	str	r1, [sp, #20]
 800e7a0:	e7c3      	b.n	800e72a <_vfiprintf_r+0x176>
 800e7a2:	fb0c 2101 	mla	r1, ip, r1, r2
 800e7a6:	4604      	mov	r4, r0
 800e7a8:	2301      	movs	r3, #1
 800e7aa:	e7f0      	b.n	800e78e <_vfiprintf_r+0x1da>
 800e7ac:	ab03      	add	r3, sp, #12
 800e7ae:	9300      	str	r3, [sp, #0]
 800e7b0:	462a      	mov	r2, r5
 800e7b2:	4b16      	ldr	r3, [pc, #88]	; (800e80c <_vfiprintf_r+0x258>)
 800e7b4:	a904      	add	r1, sp, #16
 800e7b6:	4630      	mov	r0, r6
 800e7b8:	f7fc f95a 	bl	800aa70 <_printf_float>
 800e7bc:	4607      	mov	r7, r0
 800e7be:	1c78      	adds	r0, r7, #1
 800e7c0:	d1d6      	bne.n	800e770 <_vfiprintf_r+0x1bc>
 800e7c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e7c4:	07d9      	lsls	r1, r3, #31
 800e7c6:	d405      	bmi.n	800e7d4 <_vfiprintf_r+0x220>
 800e7c8:	89ab      	ldrh	r3, [r5, #12]
 800e7ca:	059a      	lsls	r2, r3, #22
 800e7cc:	d402      	bmi.n	800e7d4 <_vfiprintf_r+0x220>
 800e7ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e7d0:	f7fe ffda 	bl	800d788 <__retarget_lock_release_recursive>
 800e7d4:	89ab      	ldrh	r3, [r5, #12]
 800e7d6:	065b      	lsls	r3, r3, #25
 800e7d8:	f53f af12 	bmi.w	800e600 <_vfiprintf_r+0x4c>
 800e7dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e7de:	e711      	b.n	800e604 <_vfiprintf_r+0x50>
 800e7e0:	ab03      	add	r3, sp, #12
 800e7e2:	9300      	str	r3, [sp, #0]
 800e7e4:	462a      	mov	r2, r5
 800e7e6:	4b09      	ldr	r3, [pc, #36]	; (800e80c <_vfiprintf_r+0x258>)
 800e7e8:	a904      	add	r1, sp, #16
 800e7ea:	4630      	mov	r0, r6
 800e7ec:	f7fc fbe4 	bl	800afb8 <_printf_i>
 800e7f0:	e7e4      	b.n	800e7bc <_vfiprintf_r+0x208>
 800e7f2:	bf00      	nop
 800e7f4:	0800f8cc 	.word	0x0800f8cc
 800e7f8:	0800f8ec 	.word	0x0800f8ec
 800e7fc:	0800f8ac 	.word	0x0800f8ac
 800e800:	0800faec 	.word	0x0800faec
 800e804:	0800faf6 	.word	0x0800faf6
 800e808:	0800aa71 	.word	0x0800aa71
 800e80c:	0800e58f 	.word	0x0800e58f
 800e810:	0800faf2 	.word	0x0800faf2
 800e814:	00000000 	.word	0x00000000

0800e818 <nan>:
 800e818:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e820 <nan+0x8>
 800e81c:	4770      	bx	lr
 800e81e:	bf00      	nop
 800e820:	00000000 	.word	0x00000000
 800e824:	7ff80000 	.word	0x7ff80000

0800e828 <_sbrk_r>:
 800e828:	b538      	push	{r3, r4, r5, lr}
 800e82a:	4d06      	ldr	r5, [pc, #24]	; (800e844 <_sbrk_r+0x1c>)
 800e82c:	2300      	movs	r3, #0
 800e82e:	4604      	mov	r4, r0
 800e830:	4608      	mov	r0, r1
 800e832:	602b      	str	r3, [r5, #0]
 800e834:	f7f6 fdaa 	bl	800538c <_sbrk>
 800e838:	1c43      	adds	r3, r0, #1
 800e83a:	d102      	bne.n	800e842 <_sbrk_r+0x1a>
 800e83c:	682b      	ldr	r3, [r5, #0]
 800e83e:	b103      	cbz	r3, 800e842 <_sbrk_r+0x1a>
 800e840:	6023      	str	r3, [r4, #0]
 800e842:	bd38      	pop	{r3, r4, r5, pc}
 800e844:	20000764 	.word	0x20000764

0800e848 <nanf>:
 800e848:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e850 <nanf+0x8>
 800e84c:	4770      	bx	lr
 800e84e:	bf00      	nop
 800e850:	7fc00000 	.word	0x7fc00000

0800e854 <__sread>:
 800e854:	b510      	push	{r4, lr}
 800e856:	460c      	mov	r4, r1
 800e858:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e85c:	f000 facc 	bl	800edf8 <_read_r>
 800e860:	2800      	cmp	r0, #0
 800e862:	bfab      	itete	ge
 800e864:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e866:	89a3      	ldrhlt	r3, [r4, #12]
 800e868:	181b      	addge	r3, r3, r0
 800e86a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e86e:	bfac      	ite	ge
 800e870:	6563      	strge	r3, [r4, #84]	; 0x54
 800e872:	81a3      	strhlt	r3, [r4, #12]
 800e874:	bd10      	pop	{r4, pc}

0800e876 <__swrite>:
 800e876:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e87a:	461f      	mov	r7, r3
 800e87c:	898b      	ldrh	r3, [r1, #12]
 800e87e:	05db      	lsls	r3, r3, #23
 800e880:	4605      	mov	r5, r0
 800e882:	460c      	mov	r4, r1
 800e884:	4616      	mov	r6, r2
 800e886:	d505      	bpl.n	800e894 <__swrite+0x1e>
 800e888:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e88c:	2302      	movs	r3, #2
 800e88e:	2200      	movs	r2, #0
 800e890:	f000 f9f0 	bl	800ec74 <_lseek_r>
 800e894:	89a3      	ldrh	r3, [r4, #12]
 800e896:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e89a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e89e:	81a3      	strh	r3, [r4, #12]
 800e8a0:	4632      	mov	r2, r6
 800e8a2:	463b      	mov	r3, r7
 800e8a4:	4628      	mov	r0, r5
 800e8a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e8aa:	f000 b889 	b.w	800e9c0 <_write_r>

0800e8ae <__sseek>:
 800e8ae:	b510      	push	{r4, lr}
 800e8b0:	460c      	mov	r4, r1
 800e8b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e8b6:	f000 f9dd 	bl	800ec74 <_lseek_r>
 800e8ba:	1c43      	adds	r3, r0, #1
 800e8bc:	89a3      	ldrh	r3, [r4, #12]
 800e8be:	bf15      	itete	ne
 800e8c0:	6560      	strne	r0, [r4, #84]	; 0x54
 800e8c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e8c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e8ca:	81a3      	strheq	r3, [r4, #12]
 800e8cc:	bf18      	it	ne
 800e8ce:	81a3      	strhne	r3, [r4, #12]
 800e8d0:	bd10      	pop	{r4, pc}

0800e8d2 <__sclose>:
 800e8d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e8d6:	f000 b8fb 	b.w	800ead0 <_close_r>

0800e8da <strncmp>:
 800e8da:	b510      	push	{r4, lr}
 800e8dc:	b16a      	cbz	r2, 800e8fa <strncmp+0x20>
 800e8de:	3901      	subs	r1, #1
 800e8e0:	1884      	adds	r4, r0, r2
 800e8e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 800e8e6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e8ea:	4293      	cmp	r3, r2
 800e8ec:	d103      	bne.n	800e8f6 <strncmp+0x1c>
 800e8ee:	42a0      	cmp	r0, r4
 800e8f0:	d001      	beq.n	800e8f6 <strncmp+0x1c>
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d1f5      	bne.n	800e8e2 <strncmp+0x8>
 800e8f6:	1a98      	subs	r0, r3, r2
 800e8f8:	bd10      	pop	{r4, pc}
 800e8fa:	4610      	mov	r0, r2
 800e8fc:	e7fc      	b.n	800e8f8 <strncmp+0x1e>
	...

0800e900 <__swbuf_r>:
 800e900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e902:	460e      	mov	r6, r1
 800e904:	4614      	mov	r4, r2
 800e906:	4605      	mov	r5, r0
 800e908:	b118      	cbz	r0, 800e912 <__swbuf_r+0x12>
 800e90a:	6983      	ldr	r3, [r0, #24]
 800e90c:	b90b      	cbnz	r3, 800e912 <__swbuf_r+0x12>
 800e90e:	f7fe fb17 	bl	800cf40 <__sinit>
 800e912:	4b21      	ldr	r3, [pc, #132]	; (800e998 <__swbuf_r+0x98>)
 800e914:	429c      	cmp	r4, r3
 800e916:	d12b      	bne.n	800e970 <__swbuf_r+0x70>
 800e918:	686c      	ldr	r4, [r5, #4]
 800e91a:	69a3      	ldr	r3, [r4, #24]
 800e91c:	60a3      	str	r3, [r4, #8]
 800e91e:	89a3      	ldrh	r3, [r4, #12]
 800e920:	071a      	lsls	r2, r3, #28
 800e922:	d52f      	bpl.n	800e984 <__swbuf_r+0x84>
 800e924:	6923      	ldr	r3, [r4, #16]
 800e926:	b36b      	cbz	r3, 800e984 <__swbuf_r+0x84>
 800e928:	6923      	ldr	r3, [r4, #16]
 800e92a:	6820      	ldr	r0, [r4, #0]
 800e92c:	1ac0      	subs	r0, r0, r3
 800e92e:	6963      	ldr	r3, [r4, #20]
 800e930:	b2f6      	uxtb	r6, r6
 800e932:	4283      	cmp	r3, r0
 800e934:	4637      	mov	r7, r6
 800e936:	dc04      	bgt.n	800e942 <__swbuf_r+0x42>
 800e938:	4621      	mov	r1, r4
 800e93a:	4628      	mov	r0, r5
 800e93c:	f000 f95e 	bl	800ebfc <_fflush_r>
 800e940:	bb30      	cbnz	r0, 800e990 <__swbuf_r+0x90>
 800e942:	68a3      	ldr	r3, [r4, #8]
 800e944:	3b01      	subs	r3, #1
 800e946:	60a3      	str	r3, [r4, #8]
 800e948:	6823      	ldr	r3, [r4, #0]
 800e94a:	1c5a      	adds	r2, r3, #1
 800e94c:	6022      	str	r2, [r4, #0]
 800e94e:	701e      	strb	r6, [r3, #0]
 800e950:	6963      	ldr	r3, [r4, #20]
 800e952:	3001      	adds	r0, #1
 800e954:	4283      	cmp	r3, r0
 800e956:	d004      	beq.n	800e962 <__swbuf_r+0x62>
 800e958:	89a3      	ldrh	r3, [r4, #12]
 800e95a:	07db      	lsls	r3, r3, #31
 800e95c:	d506      	bpl.n	800e96c <__swbuf_r+0x6c>
 800e95e:	2e0a      	cmp	r6, #10
 800e960:	d104      	bne.n	800e96c <__swbuf_r+0x6c>
 800e962:	4621      	mov	r1, r4
 800e964:	4628      	mov	r0, r5
 800e966:	f000 f949 	bl	800ebfc <_fflush_r>
 800e96a:	b988      	cbnz	r0, 800e990 <__swbuf_r+0x90>
 800e96c:	4638      	mov	r0, r7
 800e96e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e970:	4b0a      	ldr	r3, [pc, #40]	; (800e99c <__swbuf_r+0x9c>)
 800e972:	429c      	cmp	r4, r3
 800e974:	d101      	bne.n	800e97a <__swbuf_r+0x7a>
 800e976:	68ac      	ldr	r4, [r5, #8]
 800e978:	e7cf      	b.n	800e91a <__swbuf_r+0x1a>
 800e97a:	4b09      	ldr	r3, [pc, #36]	; (800e9a0 <__swbuf_r+0xa0>)
 800e97c:	429c      	cmp	r4, r3
 800e97e:	bf08      	it	eq
 800e980:	68ec      	ldreq	r4, [r5, #12]
 800e982:	e7ca      	b.n	800e91a <__swbuf_r+0x1a>
 800e984:	4621      	mov	r1, r4
 800e986:	4628      	mov	r0, r5
 800e988:	f000 f82c 	bl	800e9e4 <__swsetup_r>
 800e98c:	2800      	cmp	r0, #0
 800e98e:	d0cb      	beq.n	800e928 <__swbuf_r+0x28>
 800e990:	f04f 37ff 	mov.w	r7, #4294967295
 800e994:	e7ea      	b.n	800e96c <__swbuf_r+0x6c>
 800e996:	bf00      	nop
 800e998:	0800f8cc 	.word	0x0800f8cc
 800e99c:	0800f8ec 	.word	0x0800f8ec
 800e9a0:	0800f8ac 	.word	0x0800f8ac

0800e9a4 <__ascii_wctomb>:
 800e9a4:	b149      	cbz	r1, 800e9ba <__ascii_wctomb+0x16>
 800e9a6:	2aff      	cmp	r2, #255	; 0xff
 800e9a8:	bf85      	ittet	hi
 800e9aa:	238a      	movhi	r3, #138	; 0x8a
 800e9ac:	6003      	strhi	r3, [r0, #0]
 800e9ae:	700a      	strbls	r2, [r1, #0]
 800e9b0:	f04f 30ff 	movhi.w	r0, #4294967295
 800e9b4:	bf98      	it	ls
 800e9b6:	2001      	movls	r0, #1
 800e9b8:	4770      	bx	lr
 800e9ba:	4608      	mov	r0, r1
 800e9bc:	4770      	bx	lr
	...

0800e9c0 <_write_r>:
 800e9c0:	b538      	push	{r3, r4, r5, lr}
 800e9c2:	4d07      	ldr	r5, [pc, #28]	; (800e9e0 <_write_r+0x20>)
 800e9c4:	4604      	mov	r4, r0
 800e9c6:	4608      	mov	r0, r1
 800e9c8:	4611      	mov	r1, r2
 800e9ca:	2200      	movs	r2, #0
 800e9cc:	602a      	str	r2, [r5, #0]
 800e9ce:	461a      	mov	r2, r3
 800e9d0:	f7f6 fc8b 	bl	80052ea <_write>
 800e9d4:	1c43      	adds	r3, r0, #1
 800e9d6:	d102      	bne.n	800e9de <_write_r+0x1e>
 800e9d8:	682b      	ldr	r3, [r5, #0]
 800e9da:	b103      	cbz	r3, 800e9de <_write_r+0x1e>
 800e9dc:	6023      	str	r3, [r4, #0]
 800e9de:	bd38      	pop	{r3, r4, r5, pc}
 800e9e0:	20000764 	.word	0x20000764

0800e9e4 <__swsetup_r>:
 800e9e4:	4b32      	ldr	r3, [pc, #200]	; (800eab0 <__swsetup_r+0xcc>)
 800e9e6:	b570      	push	{r4, r5, r6, lr}
 800e9e8:	681d      	ldr	r5, [r3, #0]
 800e9ea:	4606      	mov	r6, r0
 800e9ec:	460c      	mov	r4, r1
 800e9ee:	b125      	cbz	r5, 800e9fa <__swsetup_r+0x16>
 800e9f0:	69ab      	ldr	r3, [r5, #24]
 800e9f2:	b913      	cbnz	r3, 800e9fa <__swsetup_r+0x16>
 800e9f4:	4628      	mov	r0, r5
 800e9f6:	f7fe faa3 	bl	800cf40 <__sinit>
 800e9fa:	4b2e      	ldr	r3, [pc, #184]	; (800eab4 <__swsetup_r+0xd0>)
 800e9fc:	429c      	cmp	r4, r3
 800e9fe:	d10f      	bne.n	800ea20 <__swsetup_r+0x3c>
 800ea00:	686c      	ldr	r4, [r5, #4]
 800ea02:	89a3      	ldrh	r3, [r4, #12]
 800ea04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ea08:	0719      	lsls	r1, r3, #28
 800ea0a:	d42c      	bmi.n	800ea66 <__swsetup_r+0x82>
 800ea0c:	06dd      	lsls	r5, r3, #27
 800ea0e:	d411      	bmi.n	800ea34 <__swsetup_r+0x50>
 800ea10:	2309      	movs	r3, #9
 800ea12:	6033      	str	r3, [r6, #0]
 800ea14:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ea18:	81a3      	strh	r3, [r4, #12]
 800ea1a:	f04f 30ff 	mov.w	r0, #4294967295
 800ea1e:	e03e      	b.n	800ea9e <__swsetup_r+0xba>
 800ea20:	4b25      	ldr	r3, [pc, #148]	; (800eab8 <__swsetup_r+0xd4>)
 800ea22:	429c      	cmp	r4, r3
 800ea24:	d101      	bne.n	800ea2a <__swsetup_r+0x46>
 800ea26:	68ac      	ldr	r4, [r5, #8]
 800ea28:	e7eb      	b.n	800ea02 <__swsetup_r+0x1e>
 800ea2a:	4b24      	ldr	r3, [pc, #144]	; (800eabc <__swsetup_r+0xd8>)
 800ea2c:	429c      	cmp	r4, r3
 800ea2e:	bf08      	it	eq
 800ea30:	68ec      	ldreq	r4, [r5, #12]
 800ea32:	e7e6      	b.n	800ea02 <__swsetup_r+0x1e>
 800ea34:	0758      	lsls	r0, r3, #29
 800ea36:	d512      	bpl.n	800ea5e <__swsetup_r+0x7a>
 800ea38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ea3a:	b141      	cbz	r1, 800ea4e <__swsetup_r+0x6a>
 800ea3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ea40:	4299      	cmp	r1, r3
 800ea42:	d002      	beq.n	800ea4a <__swsetup_r+0x66>
 800ea44:	4630      	mov	r0, r6
 800ea46:	f7ff fb85 	bl	800e154 <_free_r>
 800ea4a:	2300      	movs	r3, #0
 800ea4c:	6363      	str	r3, [r4, #52]	; 0x34
 800ea4e:	89a3      	ldrh	r3, [r4, #12]
 800ea50:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ea54:	81a3      	strh	r3, [r4, #12]
 800ea56:	2300      	movs	r3, #0
 800ea58:	6063      	str	r3, [r4, #4]
 800ea5a:	6923      	ldr	r3, [r4, #16]
 800ea5c:	6023      	str	r3, [r4, #0]
 800ea5e:	89a3      	ldrh	r3, [r4, #12]
 800ea60:	f043 0308 	orr.w	r3, r3, #8
 800ea64:	81a3      	strh	r3, [r4, #12]
 800ea66:	6923      	ldr	r3, [r4, #16]
 800ea68:	b94b      	cbnz	r3, 800ea7e <__swsetup_r+0x9a>
 800ea6a:	89a3      	ldrh	r3, [r4, #12]
 800ea6c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ea70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ea74:	d003      	beq.n	800ea7e <__swsetup_r+0x9a>
 800ea76:	4621      	mov	r1, r4
 800ea78:	4630      	mov	r0, r6
 800ea7a:	f000 f931 	bl	800ece0 <__smakebuf_r>
 800ea7e:	89a0      	ldrh	r0, [r4, #12]
 800ea80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ea84:	f010 0301 	ands.w	r3, r0, #1
 800ea88:	d00a      	beq.n	800eaa0 <__swsetup_r+0xbc>
 800ea8a:	2300      	movs	r3, #0
 800ea8c:	60a3      	str	r3, [r4, #8]
 800ea8e:	6963      	ldr	r3, [r4, #20]
 800ea90:	425b      	negs	r3, r3
 800ea92:	61a3      	str	r3, [r4, #24]
 800ea94:	6923      	ldr	r3, [r4, #16]
 800ea96:	b943      	cbnz	r3, 800eaaa <__swsetup_r+0xc6>
 800ea98:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ea9c:	d1ba      	bne.n	800ea14 <__swsetup_r+0x30>
 800ea9e:	bd70      	pop	{r4, r5, r6, pc}
 800eaa0:	0781      	lsls	r1, r0, #30
 800eaa2:	bf58      	it	pl
 800eaa4:	6963      	ldrpl	r3, [r4, #20]
 800eaa6:	60a3      	str	r3, [r4, #8]
 800eaa8:	e7f4      	b.n	800ea94 <__swsetup_r+0xb0>
 800eaaa:	2000      	movs	r0, #0
 800eaac:	e7f7      	b.n	800ea9e <__swsetup_r+0xba>
 800eaae:	bf00      	nop
 800eab0:	20000060 	.word	0x20000060
 800eab4:	0800f8cc 	.word	0x0800f8cc
 800eab8:	0800f8ec 	.word	0x0800f8ec
 800eabc:	0800f8ac 	.word	0x0800f8ac

0800eac0 <abort>:
 800eac0:	b508      	push	{r3, lr}
 800eac2:	2006      	movs	r0, #6
 800eac4:	f000 f9d2 	bl	800ee6c <raise>
 800eac8:	2001      	movs	r0, #1
 800eaca:	f7f6 fbe7 	bl	800529c <_exit>
	...

0800ead0 <_close_r>:
 800ead0:	b538      	push	{r3, r4, r5, lr}
 800ead2:	4d06      	ldr	r5, [pc, #24]	; (800eaec <_close_r+0x1c>)
 800ead4:	2300      	movs	r3, #0
 800ead6:	4604      	mov	r4, r0
 800ead8:	4608      	mov	r0, r1
 800eada:	602b      	str	r3, [r5, #0]
 800eadc:	f7f6 fc21 	bl	8005322 <_close>
 800eae0:	1c43      	adds	r3, r0, #1
 800eae2:	d102      	bne.n	800eaea <_close_r+0x1a>
 800eae4:	682b      	ldr	r3, [r5, #0]
 800eae6:	b103      	cbz	r3, 800eaea <_close_r+0x1a>
 800eae8:	6023      	str	r3, [r4, #0]
 800eaea:	bd38      	pop	{r3, r4, r5, pc}
 800eaec:	20000764 	.word	0x20000764

0800eaf0 <__sflush_r>:
 800eaf0:	898a      	ldrh	r2, [r1, #12]
 800eaf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eaf6:	4605      	mov	r5, r0
 800eaf8:	0710      	lsls	r0, r2, #28
 800eafa:	460c      	mov	r4, r1
 800eafc:	d458      	bmi.n	800ebb0 <__sflush_r+0xc0>
 800eafe:	684b      	ldr	r3, [r1, #4]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	dc05      	bgt.n	800eb10 <__sflush_r+0x20>
 800eb04:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	dc02      	bgt.n	800eb10 <__sflush_r+0x20>
 800eb0a:	2000      	movs	r0, #0
 800eb0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eb12:	2e00      	cmp	r6, #0
 800eb14:	d0f9      	beq.n	800eb0a <__sflush_r+0x1a>
 800eb16:	2300      	movs	r3, #0
 800eb18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800eb1c:	682f      	ldr	r7, [r5, #0]
 800eb1e:	602b      	str	r3, [r5, #0]
 800eb20:	d032      	beq.n	800eb88 <__sflush_r+0x98>
 800eb22:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800eb24:	89a3      	ldrh	r3, [r4, #12]
 800eb26:	075a      	lsls	r2, r3, #29
 800eb28:	d505      	bpl.n	800eb36 <__sflush_r+0x46>
 800eb2a:	6863      	ldr	r3, [r4, #4]
 800eb2c:	1ac0      	subs	r0, r0, r3
 800eb2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800eb30:	b10b      	cbz	r3, 800eb36 <__sflush_r+0x46>
 800eb32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800eb34:	1ac0      	subs	r0, r0, r3
 800eb36:	2300      	movs	r3, #0
 800eb38:	4602      	mov	r2, r0
 800eb3a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eb3c:	6a21      	ldr	r1, [r4, #32]
 800eb3e:	4628      	mov	r0, r5
 800eb40:	47b0      	blx	r6
 800eb42:	1c43      	adds	r3, r0, #1
 800eb44:	89a3      	ldrh	r3, [r4, #12]
 800eb46:	d106      	bne.n	800eb56 <__sflush_r+0x66>
 800eb48:	6829      	ldr	r1, [r5, #0]
 800eb4a:	291d      	cmp	r1, #29
 800eb4c:	d82c      	bhi.n	800eba8 <__sflush_r+0xb8>
 800eb4e:	4a2a      	ldr	r2, [pc, #168]	; (800ebf8 <__sflush_r+0x108>)
 800eb50:	40ca      	lsrs	r2, r1
 800eb52:	07d6      	lsls	r6, r2, #31
 800eb54:	d528      	bpl.n	800eba8 <__sflush_r+0xb8>
 800eb56:	2200      	movs	r2, #0
 800eb58:	6062      	str	r2, [r4, #4]
 800eb5a:	04d9      	lsls	r1, r3, #19
 800eb5c:	6922      	ldr	r2, [r4, #16]
 800eb5e:	6022      	str	r2, [r4, #0]
 800eb60:	d504      	bpl.n	800eb6c <__sflush_r+0x7c>
 800eb62:	1c42      	adds	r2, r0, #1
 800eb64:	d101      	bne.n	800eb6a <__sflush_r+0x7a>
 800eb66:	682b      	ldr	r3, [r5, #0]
 800eb68:	b903      	cbnz	r3, 800eb6c <__sflush_r+0x7c>
 800eb6a:	6560      	str	r0, [r4, #84]	; 0x54
 800eb6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eb6e:	602f      	str	r7, [r5, #0]
 800eb70:	2900      	cmp	r1, #0
 800eb72:	d0ca      	beq.n	800eb0a <__sflush_r+0x1a>
 800eb74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eb78:	4299      	cmp	r1, r3
 800eb7a:	d002      	beq.n	800eb82 <__sflush_r+0x92>
 800eb7c:	4628      	mov	r0, r5
 800eb7e:	f7ff fae9 	bl	800e154 <_free_r>
 800eb82:	2000      	movs	r0, #0
 800eb84:	6360      	str	r0, [r4, #52]	; 0x34
 800eb86:	e7c1      	b.n	800eb0c <__sflush_r+0x1c>
 800eb88:	6a21      	ldr	r1, [r4, #32]
 800eb8a:	2301      	movs	r3, #1
 800eb8c:	4628      	mov	r0, r5
 800eb8e:	47b0      	blx	r6
 800eb90:	1c41      	adds	r1, r0, #1
 800eb92:	d1c7      	bne.n	800eb24 <__sflush_r+0x34>
 800eb94:	682b      	ldr	r3, [r5, #0]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d0c4      	beq.n	800eb24 <__sflush_r+0x34>
 800eb9a:	2b1d      	cmp	r3, #29
 800eb9c:	d001      	beq.n	800eba2 <__sflush_r+0xb2>
 800eb9e:	2b16      	cmp	r3, #22
 800eba0:	d101      	bne.n	800eba6 <__sflush_r+0xb6>
 800eba2:	602f      	str	r7, [r5, #0]
 800eba4:	e7b1      	b.n	800eb0a <__sflush_r+0x1a>
 800eba6:	89a3      	ldrh	r3, [r4, #12]
 800eba8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ebac:	81a3      	strh	r3, [r4, #12]
 800ebae:	e7ad      	b.n	800eb0c <__sflush_r+0x1c>
 800ebb0:	690f      	ldr	r7, [r1, #16]
 800ebb2:	2f00      	cmp	r7, #0
 800ebb4:	d0a9      	beq.n	800eb0a <__sflush_r+0x1a>
 800ebb6:	0793      	lsls	r3, r2, #30
 800ebb8:	680e      	ldr	r6, [r1, #0]
 800ebba:	bf08      	it	eq
 800ebbc:	694b      	ldreq	r3, [r1, #20]
 800ebbe:	600f      	str	r7, [r1, #0]
 800ebc0:	bf18      	it	ne
 800ebc2:	2300      	movne	r3, #0
 800ebc4:	eba6 0807 	sub.w	r8, r6, r7
 800ebc8:	608b      	str	r3, [r1, #8]
 800ebca:	f1b8 0f00 	cmp.w	r8, #0
 800ebce:	dd9c      	ble.n	800eb0a <__sflush_r+0x1a>
 800ebd0:	6a21      	ldr	r1, [r4, #32]
 800ebd2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ebd4:	4643      	mov	r3, r8
 800ebd6:	463a      	mov	r2, r7
 800ebd8:	4628      	mov	r0, r5
 800ebda:	47b0      	blx	r6
 800ebdc:	2800      	cmp	r0, #0
 800ebde:	dc06      	bgt.n	800ebee <__sflush_r+0xfe>
 800ebe0:	89a3      	ldrh	r3, [r4, #12]
 800ebe2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ebe6:	81a3      	strh	r3, [r4, #12]
 800ebe8:	f04f 30ff 	mov.w	r0, #4294967295
 800ebec:	e78e      	b.n	800eb0c <__sflush_r+0x1c>
 800ebee:	4407      	add	r7, r0
 800ebf0:	eba8 0800 	sub.w	r8, r8, r0
 800ebf4:	e7e9      	b.n	800ebca <__sflush_r+0xda>
 800ebf6:	bf00      	nop
 800ebf8:	20400001 	.word	0x20400001

0800ebfc <_fflush_r>:
 800ebfc:	b538      	push	{r3, r4, r5, lr}
 800ebfe:	690b      	ldr	r3, [r1, #16]
 800ec00:	4605      	mov	r5, r0
 800ec02:	460c      	mov	r4, r1
 800ec04:	b913      	cbnz	r3, 800ec0c <_fflush_r+0x10>
 800ec06:	2500      	movs	r5, #0
 800ec08:	4628      	mov	r0, r5
 800ec0a:	bd38      	pop	{r3, r4, r5, pc}
 800ec0c:	b118      	cbz	r0, 800ec16 <_fflush_r+0x1a>
 800ec0e:	6983      	ldr	r3, [r0, #24]
 800ec10:	b90b      	cbnz	r3, 800ec16 <_fflush_r+0x1a>
 800ec12:	f7fe f995 	bl	800cf40 <__sinit>
 800ec16:	4b14      	ldr	r3, [pc, #80]	; (800ec68 <_fflush_r+0x6c>)
 800ec18:	429c      	cmp	r4, r3
 800ec1a:	d11b      	bne.n	800ec54 <_fflush_r+0x58>
 800ec1c:	686c      	ldr	r4, [r5, #4]
 800ec1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d0ef      	beq.n	800ec06 <_fflush_r+0xa>
 800ec26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ec28:	07d0      	lsls	r0, r2, #31
 800ec2a:	d404      	bmi.n	800ec36 <_fflush_r+0x3a>
 800ec2c:	0599      	lsls	r1, r3, #22
 800ec2e:	d402      	bmi.n	800ec36 <_fflush_r+0x3a>
 800ec30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ec32:	f7fe fda8 	bl	800d786 <__retarget_lock_acquire_recursive>
 800ec36:	4628      	mov	r0, r5
 800ec38:	4621      	mov	r1, r4
 800ec3a:	f7ff ff59 	bl	800eaf0 <__sflush_r>
 800ec3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ec40:	07da      	lsls	r2, r3, #31
 800ec42:	4605      	mov	r5, r0
 800ec44:	d4e0      	bmi.n	800ec08 <_fflush_r+0xc>
 800ec46:	89a3      	ldrh	r3, [r4, #12]
 800ec48:	059b      	lsls	r3, r3, #22
 800ec4a:	d4dd      	bmi.n	800ec08 <_fflush_r+0xc>
 800ec4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ec4e:	f7fe fd9b 	bl	800d788 <__retarget_lock_release_recursive>
 800ec52:	e7d9      	b.n	800ec08 <_fflush_r+0xc>
 800ec54:	4b05      	ldr	r3, [pc, #20]	; (800ec6c <_fflush_r+0x70>)
 800ec56:	429c      	cmp	r4, r3
 800ec58:	d101      	bne.n	800ec5e <_fflush_r+0x62>
 800ec5a:	68ac      	ldr	r4, [r5, #8]
 800ec5c:	e7df      	b.n	800ec1e <_fflush_r+0x22>
 800ec5e:	4b04      	ldr	r3, [pc, #16]	; (800ec70 <_fflush_r+0x74>)
 800ec60:	429c      	cmp	r4, r3
 800ec62:	bf08      	it	eq
 800ec64:	68ec      	ldreq	r4, [r5, #12]
 800ec66:	e7da      	b.n	800ec1e <_fflush_r+0x22>
 800ec68:	0800f8cc 	.word	0x0800f8cc
 800ec6c:	0800f8ec 	.word	0x0800f8ec
 800ec70:	0800f8ac 	.word	0x0800f8ac

0800ec74 <_lseek_r>:
 800ec74:	b538      	push	{r3, r4, r5, lr}
 800ec76:	4d07      	ldr	r5, [pc, #28]	; (800ec94 <_lseek_r+0x20>)
 800ec78:	4604      	mov	r4, r0
 800ec7a:	4608      	mov	r0, r1
 800ec7c:	4611      	mov	r1, r2
 800ec7e:	2200      	movs	r2, #0
 800ec80:	602a      	str	r2, [r5, #0]
 800ec82:	461a      	mov	r2, r3
 800ec84:	f7f6 fb74 	bl	8005370 <_lseek>
 800ec88:	1c43      	adds	r3, r0, #1
 800ec8a:	d102      	bne.n	800ec92 <_lseek_r+0x1e>
 800ec8c:	682b      	ldr	r3, [r5, #0]
 800ec8e:	b103      	cbz	r3, 800ec92 <_lseek_r+0x1e>
 800ec90:	6023      	str	r3, [r4, #0]
 800ec92:	bd38      	pop	{r3, r4, r5, pc}
 800ec94:	20000764 	.word	0x20000764

0800ec98 <__swhatbuf_r>:
 800ec98:	b570      	push	{r4, r5, r6, lr}
 800ec9a:	460e      	mov	r6, r1
 800ec9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eca0:	2900      	cmp	r1, #0
 800eca2:	b096      	sub	sp, #88	; 0x58
 800eca4:	4614      	mov	r4, r2
 800eca6:	461d      	mov	r5, r3
 800eca8:	da07      	bge.n	800ecba <__swhatbuf_r+0x22>
 800ecaa:	2300      	movs	r3, #0
 800ecac:	602b      	str	r3, [r5, #0]
 800ecae:	89b3      	ldrh	r3, [r6, #12]
 800ecb0:	061a      	lsls	r2, r3, #24
 800ecb2:	d410      	bmi.n	800ecd6 <__swhatbuf_r+0x3e>
 800ecb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ecb8:	e00e      	b.n	800ecd8 <__swhatbuf_r+0x40>
 800ecba:	466a      	mov	r2, sp
 800ecbc:	f000 f8f2 	bl	800eea4 <_fstat_r>
 800ecc0:	2800      	cmp	r0, #0
 800ecc2:	dbf2      	blt.n	800ecaa <__swhatbuf_r+0x12>
 800ecc4:	9a01      	ldr	r2, [sp, #4]
 800ecc6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ecca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ecce:	425a      	negs	r2, r3
 800ecd0:	415a      	adcs	r2, r3
 800ecd2:	602a      	str	r2, [r5, #0]
 800ecd4:	e7ee      	b.n	800ecb4 <__swhatbuf_r+0x1c>
 800ecd6:	2340      	movs	r3, #64	; 0x40
 800ecd8:	2000      	movs	r0, #0
 800ecda:	6023      	str	r3, [r4, #0]
 800ecdc:	b016      	add	sp, #88	; 0x58
 800ecde:	bd70      	pop	{r4, r5, r6, pc}

0800ece0 <__smakebuf_r>:
 800ece0:	898b      	ldrh	r3, [r1, #12]
 800ece2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ece4:	079d      	lsls	r5, r3, #30
 800ece6:	4606      	mov	r6, r0
 800ece8:	460c      	mov	r4, r1
 800ecea:	d507      	bpl.n	800ecfc <__smakebuf_r+0x1c>
 800ecec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ecf0:	6023      	str	r3, [r4, #0]
 800ecf2:	6123      	str	r3, [r4, #16]
 800ecf4:	2301      	movs	r3, #1
 800ecf6:	6163      	str	r3, [r4, #20]
 800ecf8:	b002      	add	sp, #8
 800ecfa:	bd70      	pop	{r4, r5, r6, pc}
 800ecfc:	ab01      	add	r3, sp, #4
 800ecfe:	466a      	mov	r2, sp
 800ed00:	f7ff ffca 	bl	800ec98 <__swhatbuf_r>
 800ed04:	9900      	ldr	r1, [sp, #0]
 800ed06:	4605      	mov	r5, r0
 800ed08:	4630      	mov	r0, r6
 800ed0a:	f7ff fa73 	bl	800e1f4 <_malloc_r>
 800ed0e:	b948      	cbnz	r0, 800ed24 <__smakebuf_r+0x44>
 800ed10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed14:	059a      	lsls	r2, r3, #22
 800ed16:	d4ef      	bmi.n	800ecf8 <__smakebuf_r+0x18>
 800ed18:	f023 0303 	bic.w	r3, r3, #3
 800ed1c:	f043 0302 	orr.w	r3, r3, #2
 800ed20:	81a3      	strh	r3, [r4, #12]
 800ed22:	e7e3      	b.n	800ecec <__smakebuf_r+0xc>
 800ed24:	4b0d      	ldr	r3, [pc, #52]	; (800ed5c <__smakebuf_r+0x7c>)
 800ed26:	62b3      	str	r3, [r6, #40]	; 0x28
 800ed28:	89a3      	ldrh	r3, [r4, #12]
 800ed2a:	6020      	str	r0, [r4, #0]
 800ed2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ed30:	81a3      	strh	r3, [r4, #12]
 800ed32:	9b00      	ldr	r3, [sp, #0]
 800ed34:	6163      	str	r3, [r4, #20]
 800ed36:	9b01      	ldr	r3, [sp, #4]
 800ed38:	6120      	str	r0, [r4, #16]
 800ed3a:	b15b      	cbz	r3, 800ed54 <__smakebuf_r+0x74>
 800ed3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ed40:	4630      	mov	r0, r6
 800ed42:	f000 f8c1 	bl	800eec8 <_isatty_r>
 800ed46:	b128      	cbz	r0, 800ed54 <__smakebuf_r+0x74>
 800ed48:	89a3      	ldrh	r3, [r4, #12]
 800ed4a:	f023 0303 	bic.w	r3, r3, #3
 800ed4e:	f043 0301 	orr.w	r3, r3, #1
 800ed52:	81a3      	strh	r3, [r4, #12]
 800ed54:	89a0      	ldrh	r0, [r4, #12]
 800ed56:	4305      	orrs	r5, r0
 800ed58:	81a5      	strh	r5, [r4, #12]
 800ed5a:	e7cd      	b.n	800ecf8 <__smakebuf_r+0x18>
 800ed5c:	0800ced9 	.word	0x0800ced9

0800ed60 <memmove>:
 800ed60:	4288      	cmp	r0, r1
 800ed62:	b510      	push	{r4, lr}
 800ed64:	eb01 0402 	add.w	r4, r1, r2
 800ed68:	d902      	bls.n	800ed70 <memmove+0x10>
 800ed6a:	4284      	cmp	r4, r0
 800ed6c:	4623      	mov	r3, r4
 800ed6e:	d807      	bhi.n	800ed80 <memmove+0x20>
 800ed70:	1e43      	subs	r3, r0, #1
 800ed72:	42a1      	cmp	r1, r4
 800ed74:	d008      	beq.n	800ed88 <memmove+0x28>
 800ed76:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ed7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ed7e:	e7f8      	b.n	800ed72 <memmove+0x12>
 800ed80:	4402      	add	r2, r0
 800ed82:	4601      	mov	r1, r0
 800ed84:	428a      	cmp	r2, r1
 800ed86:	d100      	bne.n	800ed8a <memmove+0x2a>
 800ed88:	bd10      	pop	{r4, pc}
 800ed8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ed8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ed92:	e7f7      	b.n	800ed84 <memmove+0x24>

0800ed94 <__malloc_lock>:
 800ed94:	4801      	ldr	r0, [pc, #4]	; (800ed9c <__malloc_lock+0x8>)
 800ed96:	f7fe bcf6 	b.w	800d786 <__retarget_lock_acquire_recursive>
 800ed9a:	bf00      	nop
 800ed9c:	2000075c 	.word	0x2000075c

0800eda0 <__malloc_unlock>:
 800eda0:	4801      	ldr	r0, [pc, #4]	; (800eda8 <__malloc_unlock+0x8>)
 800eda2:	f7fe bcf1 	b.w	800d788 <__retarget_lock_release_recursive>
 800eda6:	bf00      	nop
 800eda8:	2000075c 	.word	0x2000075c

0800edac <_realloc_r>:
 800edac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edae:	4607      	mov	r7, r0
 800edb0:	4614      	mov	r4, r2
 800edb2:	460e      	mov	r6, r1
 800edb4:	b921      	cbnz	r1, 800edc0 <_realloc_r+0x14>
 800edb6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800edba:	4611      	mov	r1, r2
 800edbc:	f7ff ba1a 	b.w	800e1f4 <_malloc_r>
 800edc0:	b922      	cbnz	r2, 800edcc <_realloc_r+0x20>
 800edc2:	f7ff f9c7 	bl	800e154 <_free_r>
 800edc6:	4625      	mov	r5, r4
 800edc8:	4628      	mov	r0, r5
 800edca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800edcc:	f000 f88c 	bl	800eee8 <_malloc_usable_size_r>
 800edd0:	42a0      	cmp	r0, r4
 800edd2:	d20f      	bcs.n	800edf4 <_realloc_r+0x48>
 800edd4:	4621      	mov	r1, r4
 800edd6:	4638      	mov	r0, r7
 800edd8:	f7ff fa0c 	bl	800e1f4 <_malloc_r>
 800eddc:	4605      	mov	r5, r0
 800edde:	2800      	cmp	r0, #0
 800ede0:	d0f2      	beq.n	800edc8 <_realloc_r+0x1c>
 800ede2:	4631      	mov	r1, r6
 800ede4:	4622      	mov	r2, r4
 800ede6:	f7fb fd8d 	bl	800a904 <memcpy>
 800edea:	4631      	mov	r1, r6
 800edec:	4638      	mov	r0, r7
 800edee:	f7ff f9b1 	bl	800e154 <_free_r>
 800edf2:	e7e9      	b.n	800edc8 <_realloc_r+0x1c>
 800edf4:	4635      	mov	r5, r6
 800edf6:	e7e7      	b.n	800edc8 <_realloc_r+0x1c>

0800edf8 <_read_r>:
 800edf8:	b538      	push	{r3, r4, r5, lr}
 800edfa:	4d07      	ldr	r5, [pc, #28]	; (800ee18 <_read_r+0x20>)
 800edfc:	4604      	mov	r4, r0
 800edfe:	4608      	mov	r0, r1
 800ee00:	4611      	mov	r1, r2
 800ee02:	2200      	movs	r2, #0
 800ee04:	602a      	str	r2, [r5, #0]
 800ee06:	461a      	mov	r2, r3
 800ee08:	f7f6 fa52 	bl	80052b0 <_read>
 800ee0c:	1c43      	adds	r3, r0, #1
 800ee0e:	d102      	bne.n	800ee16 <_read_r+0x1e>
 800ee10:	682b      	ldr	r3, [r5, #0]
 800ee12:	b103      	cbz	r3, 800ee16 <_read_r+0x1e>
 800ee14:	6023      	str	r3, [r4, #0]
 800ee16:	bd38      	pop	{r3, r4, r5, pc}
 800ee18:	20000764 	.word	0x20000764

0800ee1c <_raise_r>:
 800ee1c:	291f      	cmp	r1, #31
 800ee1e:	b538      	push	{r3, r4, r5, lr}
 800ee20:	4604      	mov	r4, r0
 800ee22:	460d      	mov	r5, r1
 800ee24:	d904      	bls.n	800ee30 <_raise_r+0x14>
 800ee26:	2316      	movs	r3, #22
 800ee28:	6003      	str	r3, [r0, #0]
 800ee2a:	f04f 30ff 	mov.w	r0, #4294967295
 800ee2e:	bd38      	pop	{r3, r4, r5, pc}
 800ee30:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ee32:	b112      	cbz	r2, 800ee3a <_raise_r+0x1e>
 800ee34:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ee38:	b94b      	cbnz	r3, 800ee4e <_raise_r+0x32>
 800ee3a:	4620      	mov	r0, r4
 800ee3c:	f000 f830 	bl	800eea0 <_getpid_r>
 800ee40:	462a      	mov	r2, r5
 800ee42:	4601      	mov	r1, r0
 800ee44:	4620      	mov	r0, r4
 800ee46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ee4a:	f000 b817 	b.w	800ee7c <_kill_r>
 800ee4e:	2b01      	cmp	r3, #1
 800ee50:	d00a      	beq.n	800ee68 <_raise_r+0x4c>
 800ee52:	1c59      	adds	r1, r3, #1
 800ee54:	d103      	bne.n	800ee5e <_raise_r+0x42>
 800ee56:	2316      	movs	r3, #22
 800ee58:	6003      	str	r3, [r0, #0]
 800ee5a:	2001      	movs	r0, #1
 800ee5c:	e7e7      	b.n	800ee2e <_raise_r+0x12>
 800ee5e:	2400      	movs	r4, #0
 800ee60:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ee64:	4628      	mov	r0, r5
 800ee66:	4798      	blx	r3
 800ee68:	2000      	movs	r0, #0
 800ee6a:	e7e0      	b.n	800ee2e <_raise_r+0x12>

0800ee6c <raise>:
 800ee6c:	4b02      	ldr	r3, [pc, #8]	; (800ee78 <raise+0xc>)
 800ee6e:	4601      	mov	r1, r0
 800ee70:	6818      	ldr	r0, [r3, #0]
 800ee72:	f7ff bfd3 	b.w	800ee1c <_raise_r>
 800ee76:	bf00      	nop
 800ee78:	20000060 	.word	0x20000060

0800ee7c <_kill_r>:
 800ee7c:	b538      	push	{r3, r4, r5, lr}
 800ee7e:	4d07      	ldr	r5, [pc, #28]	; (800ee9c <_kill_r+0x20>)
 800ee80:	2300      	movs	r3, #0
 800ee82:	4604      	mov	r4, r0
 800ee84:	4608      	mov	r0, r1
 800ee86:	4611      	mov	r1, r2
 800ee88:	602b      	str	r3, [r5, #0]
 800ee8a:	f7f6 f9f7 	bl	800527c <_kill>
 800ee8e:	1c43      	adds	r3, r0, #1
 800ee90:	d102      	bne.n	800ee98 <_kill_r+0x1c>
 800ee92:	682b      	ldr	r3, [r5, #0]
 800ee94:	b103      	cbz	r3, 800ee98 <_kill_r+0x1c>
 800ee96:	6023      	str	r3, [r4, #0]
 800ee98:	bd38      	pop	{r3, r4, r5, pc}
 800ee9a:	bf00      	nop
 800ee9c:	20000764 	.word	0x20000764

0800eea0 <_getpid_r>:
 800eea0:	f7f6 b9e4 	b.w	800526c <_getpid>

0800eea4 <_fstat_r>:
 800eea4:	b538      	push	{r3, r4, r5, lr}
 800eea6:	4d07      	ldr	r5, [pc, #28]	; (800eec4 <_fstat_r+0x20>)
 800eea8:	2300      	movs	r3, #0
 800eeaa:	4604      	mov	r4, r0
 800eeac:	4608      	mov	r0, r1
 800eeae:	4611      	mov	r1, r2
 800eeb0:	602b      	str	r3, [r5, #0]
 800eeb2:	f7f6 fa42 	bl	800533a <_fstat>
 800eeb6:	1c43      	adds	r3, r0, #1
 800eeb8:	d102      	bne.n	800eec0 <_fstat_r+0x1c>
 800eeba:	682b      	ldr	r3, [r5, #0]
 800eebc:	b103      	cbz	r3, 800eec0 <_fstat_r+0x1c>
 800eebe:	6023      	str	r3, [r4, #0]
 800eec0:	bd38      	pop	{r3, r4, r5, pc}
 800eec2:	bf00      	nop
 800eec4:	20000764 	.word	0x20000764

0800eec8 <_isatty_r>:
 800eec8:	b538      	push	{r3, r4, r5, lr}
 800eeca:	4d06      	ldr	r5, [pc, #24]	; (800eee4 <_isatty_r+0x1c>)
 800eecc:	2300      	movs	r3, #0
 800eece:	4604      	mov	r4, r0
 800eed0:	4608      	mov	r0, r1
 800eed2:	602b      	str	r3, [r5, #0]
 800eed4:	f7f6 fa41 	bl	800535a <_isatty>
 800eed8:	1c43      	adds	r3, r0, #1
 800eeda:	d102      	bne.n	800eee2 <_isatty_r+0x1a>
 800eedc:	682b      	ldr	r3, [r5, #0]
 800eede:	b103      	cbz	r3, 800eee2 <_isatty_r+0x1a>
 800eee0:	6023      	str	r3, [r4, #0]
 800eee2:	bd38      	pop	{r3, r4, r5, pc}
 800eee4:	20000764 	.word	0x20000764

0800eee8 <_malloc_usable_size_r>:
 800eee8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eeec:	1f18      	subs	r0, r3, #4
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	bfbc      	itt	lt
 800eef2:	580b      	ldrlt	r3, [r1, r0]
 800eef4:	18c0      	addlt	r0, r0, r3
 800eef6:	4770      	bx	lr

0800eef8 <_init>:
 800eef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eefa:	bf00      	nop
 800eefc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eefe:	bc08      	pop	{r3}
 800ef00:	469e      	mov	lr, r3
 800ef02:	4770      	bx	lr

0800ef04 <_fini>:
 800ef04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef06:	bf00      	nop
 800ef08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef0a:	bc08      	pop	{r3}
 800ef0c:	469e      	mov	lr, r3
 800ef0e:	4770      	bx	lr


Nap.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f438  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c18  0800f5d8  0800f5d8  0001f5d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080101f0  080101f0  00030248  2**0
                  CONTENTS
  4 .ARM          00000008  080101f0  080101f0  000201f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080101f8  080101f8  00030248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080101f8  080101f8  000201f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080101fc  080101fc  000201fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000248  20000000  08010200  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000508  20000248  08010448  00030248  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000750  08010448  00030750  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030248  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024645  00000000  00000000  00030278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f47  00000000  00000000  000548bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016d0  00000000  00000000  00058808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015a8  00000000  00000000  00059ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b926  00000000  00000000  0005b480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d4ce  00000000  00000000  00076da6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0a53  00000000  00000000  00094274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00134cc7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007650  00000000  00000000  00134d1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000248 	.word	0x20000248
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f5c0 	.word	0x0800f5c0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000024c 	.word	0x2000024c
 80001dc:	0800f5c0 	.word	0x0800f5c0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a4 	b.w	8000ff8 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468c      	mov	ip, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	f040 8083 	bne.w	8000e4a <__udivmoddi4+0x116>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d947      	bls.n	8000dda <__udivmoddi4+0xa6>
 8000d4a:	fab2 f282 	clz	r2, r2
 8000d4e:	b142      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	f1c2 0020 	rsb	r0, r2, #32
 8000d54:	fa24 f000 	lsr.w	r0, r4, r0
 8000d58:	4091      	lsls	r1, r2
 8000d5a:	4097      	lsls	r7, r2
 8000d5c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d60:	4094      	lsls	r4, r2
 8000d62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d66:	0c23      	lsrs	r3, r4, #16
 8000d68:	fbbc f6f8 	udiv	r6, ip, r8
 8000d6c:	fa1f fe87 	uxth.w	lr, r7
 8000d70:	fb08 c116 	mls	r1, r8, r6, ip
 8000d74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d78:	fb06 f10e 	mul.w	r1, r6, lr
 8000d7c:	4299      	cmp	r1, r3
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x60>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d86:	f080 8119 	bcs.w	8000fbc <__udivmoddi4+0x288>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 8116 	bls.w	8000fbc <__udivmoddi4+0x288>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b2a4      	uxth	r4, r4
 8000d98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000da0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	d909      	bls.n	8000dc0 <__udivmoddi4+0x8c>
 8000dac:	193c      	adds	r4, r7, r4
 8000dae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db2:	f080 8105 	bcs.w	8000fc0 <__udivmoddi4+0x28c>
 8000db6:	45a6      	cmp	lr, r4
 8000db8:	f240 8102 	bls.w	8000fc0 <__udivmoddi4+0x28c>
 8000dbc:	3802      	subs	r0, #2
 8000dbe:	443c      	add	r4, r7
 8000dc0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc4:	eba4 040e 	sub.w	r4, r4, lr
 8000dc8:	2600      	movs	r6, #0
 8000dca:	b11d      	cbz	r5, 8000dd4 <__udivmoddi4+0xa0>
 8000dcc:	40d4      	lsrs	r4, r2
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	b902      	cbnz	r2, 8000dde <__udivmoddi4+0xaa>
 8000ddc:	deff      	udf	#255	; 0xff
 8000dde:	fab2 f282 	clz	r2, r2
 8000de2:	2a00      	cmp	r2, #0
 8000de4:	d150      	bne.n	8000e88 <__udivmoddi4+0x154>
 8000de6:	1bcb      	subs	r3, r1, r7
 8000de8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dec:	fa1f f887 	uxth.w	r8, r7
 8000df0:	2601      	movs	r6, #1
 8000df2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000df6:	0c21      	lsrs	r1, r4, #16
 8000df8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dfc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e00:	fb08 f30c 	mul.w	r3, r8, ip
 8000e04:	428b      	cmp	r3, r1
 8000e06:	d907      	bls.n	8000e18 <__udivmoddi4+0xe4>
 8000e08:	1879      	adds	r1, r7, r1
 8000e0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e0e:	d202      	bcs.n	8000e16 <__udivmoddi4+0xe2>
 8000e10:	428b      	cmp	r3, r1
 8000e12:	f200 80e9 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e16:	4684      	mov	ip, r0
 8000e18:	1ac9      	subs	r1, r1, r3
 8000e1a:	b2a3      	uxth	r3, r4
 8000e1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e28:	fb08 f800 	mul.w	r8, r8, r0
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	d907      	bls.n	8000e40 <__udivmoddi4+0x10c>
 8000e30:	193c      	adds	r4, r7, r4
 8000e32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x10a>
 8000e38:	45a0      	cmp	r8, r4
 8000e3a:	f200 80d9 	bhi.w	8000ff0 <__udivmoddi4+0x2bc>
 8000e3e:	4618      	mov	r0, r3
 8000e40:	eba4 0408 	sub.w	r4, r4, r8
 8000e44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e48:	e7bf      	b.n	8000dca <__udivmoddi4+0x96>
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d909      	bls.n	8000e62 <__udivmoddi4+0x12e>
 8000e4e:	2d00      	cmp	r5, #0
 8000e50:	f000 80b1 	beq.w	8000fb6 <__udivmoddi4+0x282>
 8000e54:	2600      	movs	r6, #0
 8000e56:	e9c5 0100 	strd	r0, r1, [r5]
 8000e5a:	4630      	mov	r0, r6
 8000e5c:	4631      	mov	r1, r6
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	fab3 f683 	clz	r6, r3
 8000e66:	2e00      	cmp	r6, #0
 8000e68:	d14a      	bne.n	8000f00 <__udivmoddi4+0x1cc>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d302      	bcc.n	8000e74 <__udivmoddi4+0x140>
 8000e6e:	4282      	cmp	r2, r0
 8000e70:	f200 80b8 	bhi.w	8000fe4 <__udivmoddi4+0x2b0>
 8000e74:	1a84      	subs	r4, r0, r2
 8000e76:	eb61 0103 	sbc.w	r1, r1, r3
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	468c      	mov	ip, r1
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	d0a8      	beq.n	8000dd4 <__udivmoddi4+0xa0>
 8000e82:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e86:	e7a5      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e90:	4097      	lsls	r7, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e9a:	40d9      	lsrs	r1, r3
 8000e9c:	4330      	orrs	r0, r6
 8000e9e:	0c03      	lsrs	r3, r0, #16
 8000ea0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ea4:	fa1f f887 	uxth.w	r8, r7
 8000ea8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000eac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eb0:	fb06 f108 	mul.w	r1, r6, r8
 8000eb4:	4299      	cmp	r1, r3
 8000eb6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eba:	d909      	bls.n	8000ed0 <__udivmoddi4+0x19c>
 8000ebc:	18fb      	adds	r3, r7, r3
 8000ebe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ec2:	f080 808d 	bcs.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ec6:	4299      	cmp	r1, r3
 8000ec8:	f240 808a 	bls.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	443b      	add	r3, r7
 8000ed0:	1a5b      	subs	r3, r3, r1
 8000ed2:	b281      	uxth	r1, r0
 8000ed4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000edc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee0:	fb00 f308 	mul.w	r3, r0, r8
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	d907      	bls.n	8000ef8 <__udivmoddi4+0x1c4>
 8000ee8:	1879      	adds	r1, r7, r1
 8000eea:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eee:	d273      	bcs.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef0:	428b      	cmp	r3, r1
 8000ef2:	d971      	bls.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4439      	add	r1, r7
 8000ef8:	1acb      	subs	r3, r1, r3
 8000efa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000efe:	e778      	b.n	8000df2 <__udivmoddi4+0xbe>
 8000f00:	f1c6 0c20 	rsb	ip, r6, #32
 8000f04:	fa03 f406 	lsl.w	r4, r3, r6
 8000f08:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f0c:	431c      	orrs	r4, r3
 8000f0e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f12:	fa01 f306 	lsl.w	r3, r1, r6
 8000f16:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f1a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f1e:	431f      	orrs	r7, r3
 8000f20:	0c3b      	lsrs	r3, r7, #16
 8000f22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f26:	fa1f f884 	uxth.w	r8, r4
 8000f2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f2e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f32:	fb09 fa08 	mul.w	sl, r9, r8
 8000f36:	458a      	cmp	sl, r1
 8000f38:	fa02 f206 	lsl.w	r2, r2, r6
 8000f3c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f40:	d908      	bls.n	8000f54 <__udivmoddi4+0x220>
 8000f42:	1861      	adds	r1, r4, r1
 8000f44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f48:	d248      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4a:	458a      	cmp	sl, r1
 8000f4c:	d946      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f52:	4421      	add	r1, r4
 8000f54:	eba1 010a 	sub.w	r1, r1, sl
 8000f58:	b2bf      	uxth	r7, r7
 8000f5a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f62:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f66:	fb00 f808 	mul.w	r8, r0, r8
 8000f6a:	45b8      	cmp	r8, r7
 8000f6c:	d907      	bls.n	8000f7e <__udivmoddi4+0x24a>
 8000f6e:	19e7      	adds	r7, r4, r7
 8000f70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f74:	d22e      	bcs.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f76:	45b8      	cmp	r8, r7
 8000f78:	d92c      	bls.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f7a:	3802      	subs	r0, #2
 8000f7c:	4427      	add	r7, r4
 8000f7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f82:	eba7 0708 	sub.w	r7, r7, r8
 8000f86:	fba0 8902 	umull	r8, r9, r0, r2
 8000f8a:	454f      	cmp	r7, r9
 8000f8c:	46c6      	mov	lr, r8
 8000f8e:	4649      	mov	r1, r9
 8000f90:	d31a      	bcc.n	8000fc8 <__udivmoddi4+0x294>
 8000f92:	d017      	beq.n	8000fc4 <__udivmoddi4+0x290>
 8000f94:	b15d      	cbz	r5, 8000fae <__udivmoddi4+0x27a>
 8000f96:	ebb3 020e 	subs.w	r2, r3, lr
 8000f9a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f9e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fa2:	40f2      	lsrs	r2, r6
 8000fa4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fa8:	40f7      	lsrs	r7, r6
 8000faa:	e9c5 2700 	strd	r2, r7, [r5]
 8000fae:	2600      	movs	r6, #0
 8000fb0:	4631      	mov	r1, r6
 8000fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e70b      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e9      	b.n	8000d94 <__udivmoddi4+0x60>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6fd      	b.n	8000dc0 <__udivmoddi4+0x8c>
 8000fc4:	4543      	cmp	r3, r8
 8000fc6:	d2e5      	bcs.n	8000f94 <__udivmoddi4+0x260>
 8000fc8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fcc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7df      	b.n	8000f94 <__udivmoddi4+0x260>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e7d2      	b.n	8000f7e <__udivmoddi4+0x24a>
 8000fd8:	4660      	mov	r0, ip
 8000fda:	e78d      	b.n	8000ef8 <__udivmoddi4+0x1c4>
 8000fdc:	4681      	mov	r9, r0
 8000fde:	e7b9      	b.n	8000f54 <__udivmoddi4+0x220>
 8000fe0:	4666      	mov	r6, ip
 8000fe2:	e775      	b.n	8000ed0 <__udivmoddi4+0x19c>
 8000fe4:	4630      	mov	r0, r6
 8000fe6:	e74a      	b.n	8000e7e <__udivmoddi4+0x14a>
 8000fe8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fec:	4439      	add	r1, r7
 8000fee:	e713      	b.n	8000e18 <__udivmoddi4+0xe4>
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	443c      	add	r4, r7
 8000ff4:	e724      	b.n	8000e40 <__udivmoddi4+0x10c>
 8000ff6:	bf00      	nop

08000ff8 <__aeabi_idiv0>:
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <Menu_system_control>:
uint8_t MFRC522_Check();
void MFRC522_Reset();
void Running(void);

/* Function declaration ----------------------------------------------------*/
void Menu_system_control(uint8_t Menu_type, uint8_t line) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	460a      	mov	r2, r1
 8001006:	71fb      	strb	r3, [r7, #7]
 8001008:	4613      	mov	r3, r2
 800100a:	71bb      	strb	r3, [r7, #6]
	switch (Menu_type) {
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	2b09      	cmp	r3, #9
 8001010:	d83c      	bhi.n	800108c <Menu_system_control+0x90>
 8001012:	a201      	add	r2, pc, #4	; (adr r2, 8001018 <Menu_system_control+0x1c>)
 8001014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001018:	08001041 	.word	0x08001041
 800101c:	08001047 	.word	0x08001047
 8001020:	08001051 	.word	0x08001051
 8001024:	08001057 	.word	0x08001057
 8001028:	08001061 	.word	0x08001061
 800102c:	0800106b 	.word	0x0800106b
 8001030:	08001071 	.word	0x08001071
 8001034:	08001077 	.word	0x08001077
 8001038:	0800107d 	.word	0x0800107d
 800103c:	08001087 	.word	0x08001087
	case Running_Process:
		Running();
 8001040:	f002 fed6 	bl	8003df0 <Running>
		break;
 8001044:	e022      	b.n	800108c <Menu_system_control+0x90>
	case Main_menu:
		Mainmenu(line);
 8001046:	79bb      	ldrb	r3, [r7, #6]
 8001048:	4618      	mov	r0, r3
 800104a:	f000 f823 	bl	8001094 <Mainmenu>
		break;
 800104e:	e01d      	b.n	800108c <Menu_system_control+0x90>
	case Color_Processing:
		Color_Studying_process();
 8001050:	f000 fad8 	bl	8001604 <Color_Studying_process>
		break;
 8001054:	e01a      	b.n	800108c <Menu_system_control+0x90>
	case PID_Menu:
		PID_menu(line);
 8001056:	79bb      	ldrb	r3, [r7, #6]
 8001058:	4618      	mov	r0, r3
 800105a:	f000 f925 	bl	80012a8 <PID_menu>
		break;
 800105e:	e015      	b.n	800108c <Menu_system_control+0x90>
	case Engine_menu:
		Speed_menu(line);
 8001060:	79bb      	ldrb	r3, [r7, #6]
 8001062:	4618      	mov	r0, r3
 8001064:	f000 fa3e 	bl	80014e4 <Speed_menu>
		break;
 8001068:	e010      	b.n	800108c <Menu_system_control+0x90>
	case LineDetect_Show:
		LineDetect_show();
 800106a:	f000 fb65 	bl	8001738 <LineDetect_show>
		break;
 800106e:	e00d      	b.n	800108c <Menu_system_control+0x90>
	case Wifi_connect:
		Wifi_Connect_establish();
 8001070:	f000 fcbc 	bl	80019ec <Wifi_Connect_establish>
		break;
 8001074:	e00a      	b.n	800108c <Menu_system_control+0x90>
	case Saving_process:
		Saving_Process();
 8001076:	f000 fc27 	bl	80018c8 <Saving_Process>
		break;
 800107a:	e007      	b.n	800108c <Menu_system_control+0x90>
	case Path_solver_menu:
		Path_Solver(line);
 800107c:	79bb      	ldrb	r3, [r7, #6]
 800107e:	4618      	mov	r0, r3
 8001080:	f000 fcc0 	bl	8001a04 <Path_Solver>
		break;
 8001084:	e002      	b.n	800108c <Menu_system_control+0x90>
	case Path_show_menu:
		Path_show();
 8001086:	f000 fd97 	bl	8001bb8 <Path_show>
		break;
 800108a:	bf00      	nop
	}
}
 800108c:	bf00      	nop
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <Mainmenu>:

static void Mainmenu(uint8_t line) {
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	71fb      	strb	r3, [r7, #7]
	switch (line) {
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	3b01      	subs	r3, #1
 80010a2:	2b07      	cmp	r3, #7
 80010a4:	f200 80dc 	bhi.w	8001260 <Mainmenu+0x1cc>
 80010a8:	a201      	add	r2, pc, #4	; (adr r2, 80010b0 <Mainmenu+0x1c>)
 80010aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ae:	bf00      	nop
 80010b0:	080010d1 	.word	0x080010d1
 80010b4:	08001103 	.word	0x08001103
 80010b8:	08001135 	.word	0x08001135
 80010bc:	08001167 	.word	0x08001167
 80010c0:	08001199 	.word	0x08001199
 80010c4:	080011cb 	.word	0x080011cb
 80010c8:	080011fd 	.word	0x080011fd
 80010cc:	0800122f 	.word	0x0800122f
	case 1:
		lcd_send_cmd(0x80 | 0x00);
 80010d0:	2080      	movs	r0, #128	; 0x80
 80010d2:	f000 fed9 	bl	8001e88 <lcd_send_cmd>
		lcd_send_string(">Car Run            ");
 80010d6:	4864      	ldr	r0, [pc, #400]	; (8001268 <Mainmenu+0x1d4>)
 80010d8:	f000 ff87 	bl	8001fea <lcd_send_string>
		lcd_send_cmd(0x80 | 0x40);
 80010dc:	20c0      	movs	r0, #192	; 0xc0
 80010de:	f000 fed3 	bl	8001e88 <lcd_send_cmd>
		lcd_send_string(" Color studying     ");
 80010e2:	4862      	ldr	r0, [pc, #392]	; (800126c <Mainmenu+0x1d8>)
 80010e4:	f000 ff81 	bl	8001fea <lcd_send_string>
		lcd_send_cmd(0x80 | 0x14);
 80010e8:	2094      	movs	r0, #148	; 0x94
 80010ea:	f000 fecd 	bl	8001e88 <lcd_send_cmd>
		lcd_send_string(" PID value modify   ");
 80010ee:	4860      	ldr	r0, [pc, #384]	; (8001270 <Mainmenu+0x1dc>)
 80010f0:	f000 ff7b 	bl	8001fea <lcd_send_string>
		lcd_send_cmd(0x80 | 0x54);
 80010f4:	20d4      	movs	r0, #212	; 0xd4
 80010f6:	f000 fec7 	bl	8001e88 <lcd_send_cmd>
		lcd_send_string(" Max speed config   ");
 80010fa:	485e      	ldr	r0, [pc, #376]	; (8001274 <Mainmenu+0x1e0>)
 80010fc:	f000 ff75 	bl	8001fea <lcd_send_string>
		break;
 8001100:	e0ae      	b.n	8001260 <Mainmenu+0x1cc>
	case 2:
		lcd_send_cmd(0x80 | 0x00);
 8001102:	2080      	movs	r0, #128	; 0x80
 8001104:	f000 fec0 	bl	8001e88 <lcd_send_cmd>
		lcd_send_string(" Car Run            ");
 8001108:	485b      	ldr	r0, [pc, #364]	; (8001278 <Mainmenu+0x1e4>)
 800110a:	f000 ff6e 	bl	8001fea <lcd_send_string>
		lcd_send_cmd(0x80 | 0x40);
 800110e:	20c0      	movs	r0, #192	; 0xc0
 8001110:	f000 feba 	bl	8001e88 <lcd_send_cmd>
		lcd_send_string(">Color studying     ");
 8001114:	4859      	ldr	r0, [pc, #356]	; (800127c <Mainmenu+0x1e8>)
 8001116:	f000 ff68 	bl	8001fea <lcd_send_string>
		lcd_send_cmd(0x80 | 0x14);
 800111a:	2094      	movs	r0, #148	; 0x94
 800111c:	f000 feb4 	bl	8001e88 <lcd_send_cmd>
		lcd_send_string(" PID value modify   ");
 8001120:	4853      	ldr	r0, [pc, #332]	; (8001270 <Mainmenu+0x1dc>)
 8001122:	f000 ff62 	bl	8001fea <lcd_send_string>
		lcd_send_cmd(0x80 | 0x54);
 8001126:	20d4      	movs	r0, #212	; 0xd4
 8001128:	f000 feae 	bl	8001e88 <lcd_send_cmd>
		lcd_send_string(" Max speed config   ");
 800112c:	4851      	ldr	r0, [pc, #324]	; (8001274 <Mainmenu+0x1e0>)
 800112e:	f000 ff5c 	bl	8001fea <lcd_send_string>
		break;
 8001132:	e095      	b.n	8001260 <Mainmenu+0x1cc>
	case 3:
		lcd_send_cmd(0x80 | 0x00);
 8001134:	2080      	movs	r0, #128	; 0x80
 8001136:	f000 fea7 	bl	8001e88 <lcd_send_cmd>
		lcd_send_string(" Car Run            ");
 800113a:	484f      	ldr	r0, [pc, #316]	; (8001278 <Mainmenu+0x1e4>)
 800113c:	f000 ff55 	bl	8001fea <lcd_send_string>
		lcd_send_cmd(0x80 | 0x40);
 8001140:	20c0      	movs	r0, #192	; 0xc0
 8001142:	f000 fea1 	bl	8001e88 <lcd_send_cmd>
		lcd_send_string(" Color studying     ");
 8001146:	4849      	ldr	r0, [pc, #292]	; (800126c <Mainmenu+0x1d8>)
 8001148:	f000 ff4f 	bl	8001fea <lcd_send_string>
		lcd_send_cmd(0x80 | 0x14);
 800114c:	2094      	movs	r0, #148	; 0x94
 800114e:	f000 fe9b 	bl	8001e88 <lcd_send_cmd>
		lcd_send_string(">PID value modify   ");
 8001152:	484b      	ldr	r0, [pc, #300]	; (8001280 <Mainmenu+0x1ec>)
 8001154:	f000 ff49 	bl	8001fea <lcd_send_string>
		lcd_send_cmd(0x80 | 0x54);
 8001158:	20d4      	movs	r0, #212	; 0xd4
 800115a:	f000 fe95 	bl	8001e88 <lcd_send_cmd>
		lcd_send_string(" Max speed config   ");
 800115e:	4845      	ldr	r0, [pc, #276]	; (8001274 <Mainmenu+0x1e0>)
 8001160:	f000 ff43 	bl	8001fea <lcd_send_string>
		break;
 8001164:	e07c      	b.n	8001260 <Mainmenu+0x1cc>
	case 4:
		lcd_send_cmd(0x80 | 0x00);
 8001166:	2080      	movs	r0, #128	; 0x80
 8001168:	f000 fe8e 	bl	8001e88 <lcd_send_cmd>
		lcd_send_string(" Car Run            ");
 800116c:	4842      	ldr	r0, [pc, #264]	; (8001278 <Mainmenu+0x1e4>)
 800116e:	f000 ff3c 	bl	8001fea <lcd_send_string>
		lcd_send_cmd(0x80 | 0x40);
 8001172:	20c0      	movs	r0, #192	; 0xc0
 8001174:	f000 fe88 	bl	8001e88 <lcd_send_cmd>
		lcd_send_string(" Color studying     ");
 8001178:	483c      	ldr	r0, [pc, #240]	; (800126c <Mainmenu+0x1d8>)
 800117a:	f000 ff36 	bl	8001fea <lcd_send_string>
		lcd_send_cmd(0x80 | 0x14);
 800117e:	2094      	movs	r0, #148	; 0x94
 8001180:	f000 fe82 	bl	8001e88 <lcd_send_cmd>
		lcd_send_string(" PID value modify   ");
 8001184:	483a      	ldr	r0, [pc, #232]	; (8001270 <Mainmenu+0x1dc>)
 8001186:	f000 ff30 	bl	8001fea <lcd_send_string>
		lcd_send_cmd(0x80 | 0x54);
 800118a:	20d4      	movs	r0, #212	; 0xd4
 800118c:	f000 fe7c 	bl	8001e88 <lcd_send_cmd>
		lcd_send_string(">Max speed config   ");
 8001190:	483c      	ldr	r0, [pc, #240]	; (8001284 <Mainmenu+0x1f0>)
 8001192:	f000 ff2a 	bl	8001fea <lcd_send_string>
		break;
 8001196:	e063      	b.n	8001260 <Mainmenu+0x1cc>
	case 5:
		lcd_send_cmd(0x80 | 0x00);
 8001198:	2080      	movs	r0, #128	; 0x80
 800119a:	f000 fe75 	bl	8001e88 <lcd_send_cmd>
		lcd_send_string(">Line Detect show   ");
 800119e:	483a      	ldr	r0, [pc, #232]	; (8001288 <Mainmenu+0x1f4>)
 80011a0:	f000 ff23 	bl	8001fea <lcd_send_string>
		lcd_send_cmd(0x80 | 0x40);
 80011a4:	20c0      	movs	r0, #192	; 0xc0
 80011a6:	f000 fe6f 	bl	8001e88 <lcd_send_cmd>
		lcd_send_string(" Read RFID Card     ");
 80011aa:	4838      	ldr	r0, [pc, #224]	; (800128c <Mainmenu+0x1f8>)
 80011ac:	f000 ff1d 	bl	8001fea <lcd_send_string>
		lcd_send_cmd(0x80 | 0x14);
 80011b0:	2094      	movs	r0, #148	; 0x94
 80011b2:	f000 fe69 	bl	8001e88 <lcd_send_cmd>
		lcd_send_string(" Wifi Connect       ");
 80011b6:	4836      	ldr	r0, [pc, #216]	; (8001290 <Mainmenu+0x1fc>)
 80011b8:	f000 ff17 	bl	8001fea <lcd_send_string>
		lcd_send_cmd(0x80 | 0x54);
 80011bc:	20d4      	movs	r0, #212	; 0xd4
 80011be:	f000 fe63 	bl	8001e88 <lcd_send_cmd>
		lcd_send_string(" Path Solver        ");
 80011c2:	4834      	ldr	r0, [pc, #208]	; (8001294 <Mainmenu+0x200>)
 80011c4:	f000 ff11 	bl	8001fea <lcd_send_string>
		break;
 80011c8:	e04a      	b.n	8001260 <Mainmenu+0x1cc>
	case 6:
		lcd_send_cmd(0x80 | 0x00);
 80011ca:	2080      	movs	r0, #128	; 0x80
 80011cc:	f000 fe5c 	bl	8001e88 <lcd_send_cmd>
		lcd_send_string(" Line Detect show   ");
 80011d0:	4831      	ldr	r0, [pc, #196]	; (8001298 <Mainmenu+0x204>)
 80011d2:	f000 ff0a 	bl	8001fea <lcd_send_string>
		lcd_send_cmd(0x80 | 0x40);
 80011d6:	20c0      	movs	r0, #192	; 0xc0
 80011d8:	f000 fe56 	bl	8001e88 <lcd_send_cmd>
		lcd_send_string(">Read RFID Card     ");
 80011dc:	482f      	ldr	r0, [pc, #188]	; (800129c <Mainmenu+0x208>)
 80011de:	f000 ff04 	bl	8001fea <lcd_send_string>
		lcd_send_cmd(0x80 | 0x14);
 80011e2:	2094      	movs	r0, #148	; 0x94
 80011e4:	f000 fe50 	bl	8001e88 <lcd_send_cmd>
		lcd_send_string(" Wifi Connect       ");
 80011e8:	4829      	ldr	r0, [pc, #164]	; (8001290 <Mainmenu+0x1fc>)
 80011ea:	f000 fefe 	bl	8001fea <lcd_send_string>
		lcd_send_cmd(0x80 | 0x54);
 80011ee:	20d4      	movs	r0, #212	; 0xd4
 80011f0:	f000 fe4a 	bl	8001e88 <lcd_send_cmd>
		lcd_send_string(" Path Solver        ");
 80011f4:	4827      	ldr	r0, [pc, #156]	; (8001294 <Mainmenu+0x200>)
 80011f6:	f000 fef8 	bl	8001fea <lcd_send_string>
		break;
 80011fa:	e031      	b.n	8001260 <Mainmenu+0x1cc>
	case 7:
		lcd_send_cmd(0x80 | 0x00);
 80011fc:	2080      	movs	r0, #128	; 0x80
 80011fe:	f000 fe43 	bl	8001e88 <lcd_send_cmd>
		lcd_send_string(" Line Detect show   ");
 8001202:	4825      	ldr	r0, [pc, #148]	; (8001298 <Mainmenu+0x204>)
 8001204:	f000 fef1 	bl	8001fea <lcd_send_string>
		lcd_send_cmd(0x80 | 0x40);
 8001208:	20c0      	movs	r0, #192	; 0xc0
 800120a:	f000 fe3d 	bl	8001e88 <lcd_send_cmd>
		lcd_send_string(" Read RFID Card     ");
 800120e:	481f      	ldr	r0, [pc, #124]	; (800128c <Mainmenu+0x1f8>)
 8001210:	f000 feeb 	bl	8001fea <lcd_send_string>
		lcd_send_cmd(0x80 | 0x14);
 8001214:	2094      	movs	r0, #148	; 0x94
 8001216:	f000 fe37 	bl	8001e88 <lcd_send_cmd>
		lcd_send_string(">Wifi Connect       ");
 800121a:	4821      	ldr	r0, [pc, #132]	; (80012a0 <Mainmenu+0x20c>)
 800121c:	f000 fee5 	bl	8001fea <lcd_send_string>
		lcd_send_cmd(0x80 | 0x54);
 8001220:	20d4      	movs	r0, #212	; 0xd4
 8001222:	f000 fe31 	bl	8001e88 <lcd_send_cmd>
		lcd_send_string(" Path Solver        ");
 8001226:	481b      	ldr	r0, [pc, #108]	; (8001294 <Mainmenu+0x200>)
 8001228:	f000 fedf 	bl	8001fea <lcd_send_string>
		break;
 800122c:	e018      	b.n	8001260 <Mainmenu+0x1cc>
	case 8:
		lcd_send_cmd(0x80 | 0x00);
 800122e:	2080      	movs	r0, #128	; 0x80
 8001230:	f000 fe2a 	bl	8001e88 <lcd_send_cmd>
		lcd_send_string(" Line Detect show   ");
 8001234:	4818      	ldr	r0, [pc, #96]	; (8001298 <Mainmenu+0x204>)
 8001236:	f000 fed8 	bl	8001fea <lcd_send_string>
		lcd_send_cmd(0x80 | 0x40);
 800123a:	20c0      	movs	r0, #192	; 0xc0
 800123c:	f000 fe24 	bl	8001e88 <lcd_send_cmd>
		lcd_send_string(" Read RFID Card     ");
 8001240:	4812      	ldr	r0, [pc, #72]	; (800128c <Mainmenu+0x1f8>)
 8001242:	f000 fed2 	bl	8001fea <lcd_send_string>
		lcd_send_cmd(0x80 | 0x14);
 8001246:	2094      	movs	r0, #148	; 0x94
 8001248:	f000 fe1e 	bl	8001e88 <lcd_send_cmd>
		lcd_send_string(" Wifi Connect       ");
 800124c:	4810      	ldr	r0, [pc, #64]	; (8001290 <Mainmenu+0x1fc>)
 800124e:	f000 fecc 	bl	8001fea <lcd_send_string>
		lcd_send_cmd(0x80 | 0x54);
 8001252:	20d4      	movs	r0, #212	; 0xd4
 8001254:	f000 fe18 	bl	8001e88 <lcd_send_cmd>
		lcd_send_string(">Path Solver        ");
 8001258:	4812      	ldr	r0, [pc, #72]	; (80012a4 <Mainmenu+0x210>)
 800125a:	f000 fec6 	bl	8001fea <lcd_send_string>
		break;
 800125e:	bf00      	nop
	}
}
 8001260:	bf00      	nop
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	0800f5d8 	.word	0x0800f5d8
 800126c:	0800f5f0 	.word	0x0800f5f0
 8001270:	0800f608 	.word	0x0800f608
 8001274:	0800f620 	.word	0x0800f620
 8001278:	0800f638 	.word	0x0800f638
 800127c:	0800f650 	.word	0x0800f650
 8001280:	0800f668 	.word	0x0800f668
 8001284:	0800f680 	.word	0x0800f680
 8001288:	0800f698 	.word	0x0800f698
 800128c:	0800f6b0 	.word	0x0800f6b0
 8001290:	0800f6c8 	.word	0x0800f6c8
 8001294:	0800f6e0 	.word	0x0800f6e0
 8001298:	0800f6f8 	.word	0x0800f6f8
 800129c:	0800f710 	.word	0x0800f710
 80012a0:	0800f728 	.word	0x0800f728
 80012a4:	0800f740 	.word	0x0800f740

080012a8 <PID_menu>:

static void PID_menu(uint8_t line) {
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	71fb      	strb	r3, [r7, #7]

	switch (line) {
 80012b2:	79fb      	ldrb	r3, [r7, #7]
 80012b4:	3b01      	subs	r3, #1
 80012b6:	2b03      	cmp	r3, #3
 80012b8:	f200 80f4 	bhi.w	80014a4 <PID_menu+0x1fc>
 80012bc:	a201      	add	r2, pc, #4	; (adr r2, 80012c4 <PID_menu+0x1c>)
 80012be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012c2:	bf00      	nop
 80012c4:	080012d5 	.word	0x080012d5
 80012c8:	08001349 	.word	0x08001349
 80012cc:	080013bd 	.word	0x080013bd
 80012d0:	08001431 	.word	0x08001431
	case 1:
		sprintf(kp_str, ">Kp = %.2f         ", Kp);
 80012d4:	4b75      	ldr	r3, [pc, #468]	; (80014ac <PID_menu+0x204>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff f93d 	bl	8000558 <__aeabi_f2d>
 80012de:	4602      	mov	r2, r0
 80012e0:	460b      	mov	r3, r1
 80012e2:	4973      	ldr	r1, [pc, #460]	; (80014b0 <PID_menu+0x208>)
 80012e4:	4873      	ldr	r0, [pc, #460]	; (80014b4 <PID_menu+0x20c>)
 80012e6:	f00a faf1 	bl	800b8cc <siprintf>
		lcd_send_cmd(0x80 | 0x00);
 80012ea:	2080      	movs	r0, #128	; 0x80
 80012ec:	f000 fdcc 	bl	8001e88 <lcd_send_cmd>
		lcd_send_string(kp_str);
 80012f0:	4870      	ldr	r0, [pc, #448]	; (80014b4 <PID_menu+0x20c>)
 80012f2:	f000 fe7a 	bl	8001fea <lcd_send_string>
		sprintf(ki_str, " Ki = %.2f         ", Ki);
 80012f6:	4b70      	ldr	r3, [pc, #448]	; (80014b8 <PID_menu+0x210>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff f92c 	bl	8000558 <__aeabi_f2d>
 8001300:	4602      	mov	r2, r0
 8001302:	460b      	mov	r3, r1
 8001304:	496d      	ldr	r1, [pc, #436]	; (80014bc <PID_menu+0x214>)
 8001306:	486e      	ldr	r0, [pc, #440]	; (80014c0 <PID_menu+0x218>)
 8001308:	f00a fae0 	bl	800b8cc <siprintf>
		lcd_send_cmd(0x80 | 0x40);
 800130c:	20c0      	movs	r0, #192	; 0xc0
 800130e:	f000 fdbb 	bl	8001e88 <lcd_send_cmd>
		lcd_send_string(ki_str);
 8001312:	486b      	ldr	r0, [pc, #428]	; (80014c0 <PID_menu+0x218>)
 8001314:	f000 fe69 	bl	8001fea <lcd_send_string>
		sprintf(kd_str, " Kd = %.2f         ", Kd);
 8001318:	4b6a      	ldr	r3, [pc, #424]	; (80014c4 <PID_menu+0x21c>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff f91b 	bl	8000558 <__aeabi_f2d>
 8001322:	4602      	mov	r2, r0
 8001324:	460b      	mov	r3, r1
 8001326:	4968      	ldr	r1, [pc, #416]	; (80014c8 <PID_menu+0x220>)
 8001328:	4868      	ldr	r0, [pc, #416]	; (80014cc <PID_menu+0x224>)
 800132a:	f00a facf 	bl	800b8cc <siprintf>
		lcd_send_cmd(0x80 | 0x14);
 800132e:	2094      	movs	r0, #148	; 0x94
 8001330:	f000 fdaa 	bl	8001e88 <lcd_send_cmd>
		lcd_send_string(kd_str);
 8001334:	4865      	ldr	r0, [pc, #404]	; (80014cc <PID_menu+0x224>)
 8001336:	f000 fe58 	bl	8001fea <lcd_send_string>
		lcd_send_cmd(0x80 | 0x54);
 800133a:	20d4      	movs	r0, #212	; 0xd4
 800133c:	f000 fda4 	bl	8001e88 <lcd_send_cmd>
		lcd_send_string(" Return to main menu");
 8001340:	4863      	ldr	r0, [pc, #396]	; (80014d0 <PID_menu+0x228>)
 8001342:	f000 fe52 	bl	8001fea <lcd_send_string>
		break;
 8001346:	e0ad      	b.n	80014a4 <PID_menu+0x1fc>
	case 2:
		sprintf(kp_str, " Kp = %.2f         ", Kp);
 8001348:	4b58      	ldr	r3, [pc, #352]	; (80014ac <PID_menu+0x204>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff f903 	bl	8000558 <__aeabi_f2d>
 8001352:	4602      	mov	r2, r0
 8001354:	460b      	mov	r3, r1
 8001356:	495f      	ldr	r1, [pc, #380]	; (80014d4 <PID_menu+0x22c>)
 8001358:	4856      	ldr	r0, [pc, #344]	; (80014b4 <PID_menu+0x20c>)
 800135a:	f00a fab7 	bl	800b8cc <siprintf>
		lcd_send_cmd(0x80 | 0x00);
 800135e:	2080      	movs	r0, #128	; 0x80
 8001360:	f000 fd92 	bl	8001e88 <lcd_send_cmd>
		lcd_send_string(kp_str);
 8001364:	4853      	ldr	r0, [pc, #332]	; (80014b4 <PID_menu+0x20c>)
 8001366:	f000 fe40 	bl	8001fea <lcd_send_string>
		sprintf(ki_str, ">Ki = %.2f         ", Ki);
 800136a:	4b53      	ldr	r3, [pc, #332]	; (80014b8 <PID_menu+0x210>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff f8f2 	bl	8000558 <__aeabi_f2d>
 8001374:	4602      	mov	r2, r0
 8001376:	460b      	mov	r3, r1
 8001378:	4957      	ldr	r1, [pc, #348]	; (80014d8 <PID_menu+0x230>)
 800137a:	4851      	ldr	r0, [pc, #324]	; (80014c0 <PID_menu+0x218>)
 800137c:	f00a faa6 	bl	800b8cc <siprintf>
		lcd_send_cmd(0x80 | 0x40);
 8001380:	20c0      	movs	r0, #192	; 0xc0
 8001382:	f000 fd81 	bl	8001e88 <lcd_send_cmd>
		lcd_send_string(ki_str);
 8001386:	484e      	ldr	r0, [pc, #312]	; (80014c0 <PID_menu+0x218>)
 8001388:	f000 fe2f 	bl	8001fea <lcd_send_string>
		sprintf(kd_str, " Kd = %.2f         ", Kd);
 800138c:	4b4d      	ldr	r3, [pc, #308]	; (80014c4 <PID_menu+0x21c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff f8e1 	bl	8000558 <__aeabi_f2d>
 8001396:	4602      	mov	r2, r0
 8001398:	460b      	mov	r3, r1
 800139a:	494b      	ldr	r1, [pc, #300]	; (80014c8 <PID_menu+0x220>)
 800139c:	484b      	ldr	r0, [pc, #300]	; (80014cc <PID_menu+0x224>)
 800139e:	f00a fa95 	bl	800b8cc <siprintf>
		lcd_send_cmd(0x80 | 0x14);
 80013a2:	2094      	movs	r0, #148	; 0x94
 80013a4:	f000 fd70 	bl	8001e88 <lcd_send_cmd>
		lcd_send_string(kd_str);
 80013a8:	4848      	ldr	r0, [pc, #288]	; (80014cc <PID_menu+0x224>)
 80013aa:	f000 fe1e 	bl	8001fea <lcd_send_string>
		lcd_send_cmd(0x80 | 0x54);
 80013ae:	20d4      	movs	r0, #212	; 0xd4
 80013b0:	f000 fd6a 	bl	8001e88 <lcd_send_cmd>
		lcd_send_string(" Return to main menu");
 80013b4:	4846      	ldr	r0, [pc, #280]	; (80014d0 <PID_menu+0x228>)
 80013b6:	f000 fe18 	bl	8001fea <lcd_send_string>
		break;
 80013ba:	e073      	b.n	80014a4 <PID_menu+0x1fc>
	case 3:
		sprintf(kp_str, " Kp = %.2f         ", Kp);
 80013bc:	4b3b      	ldr	r3, [pc, #236]	; (80014ac <PID_menu+0x204>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff f8c9 	bl	8000558 <__aeabi_f2d>
 80013c6:	4602      	mov	r2, r0
 80013c8:	460b      	mov	r3, r1
 80013ca:	4942      	ldr	r1, [pc, #264]	; (80014d4 <PID_menu+0x22c>)
 80013cc:	4839      	ldr	r0, [pc, #228]	; (80014b4 <PID_menu+0x20c>)
 80013ce:	f00a fa7d 	bl	800b8cc <siprintf>
		lcd_send_cmd(0x80 | 0x00);
 80013d2:	2080      	movs	r0, #128	; 0x80
 80013d4:	f000 fd58 	bl	8001e88 <lcd_send_cmd>
		lcd_send_string(kp_str);
 80013d8:	4836      	ldr	r0, [pc, #216]	; (80014b4 <PID_menu+0x20c>)
 80013da:	f000 fe06 	bl	8001fea <lcd_send_string>
		sprintf(ki_str, " Ki = %.2f         ", Ki);
 80013de:	4b36      	ldr	r3, [pc, #216]	; (80014b8 <PID_menu+0x210>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff f8b8 	bl	8000558 <__aeabi_f2d>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	4933      	ldr	r1, [pc, #204]	; (80014bc <PID_menu+0x214>)
 80013ee:	4834      	ldr	r0, [pc, #208]	; (80014c0 <PID_menu+0x218>)
 80013f0:	f00a fa6c 	bl	800b8cc <siprintf>
		lcd_send_cmd(0x80 | 0x40);
 80013f4:	20c0      	movs	r0, #192	; 0xc0
 80013f6:	f000 fd47 	bl	8001e88 <lcd_send_cmd>
		lcd_send_string(ki_str);
 80013fa:	4831      	ldr	r0, [pc, #196]	; (80014c0 <PID_menu+0x218>)
 80013fc:	f000 fdf5 	bl	8001fea <lcd_send_string>
		sprintf(kd_str, ">Kd = %.2f         ", Kd);
 8001400:	4b30      	ldr	r3, [pc, #192]	; (80014c4 <PID_menu+0x21c>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff f8a7 	bl	8000558 <__aeabi_f2d>
 800140a:	4602      	mov	r2, r0
 800140c:	460b      	mov	r3, r1
 800140e:	4933      	ldr	r1, [pc, #204]	; (80014dc <PID_menu+0x234>)
 8001410:	482e      	ldr	r0, [pc, #184]	; (80014cc <PID_menu+0x224>)
 8001412:	f00a fa5b 	bl	800b8cc <siprintf>
		lcd_send_cmd(0x80 | 0x14);
 8001416:	2094      	movs	r0, #148	; 0x94
 8001418:	f000 fd36 	bl	8001e88 <lcd_send_cmd>
		lcd_send_string(kd_str);
 800141c:	482b      	ldr	r0, [pc, #172]	; (80014cc <PID_menu+0x224>)
 800141e:	f000 fde4 	bl	8001fea <lcd_send_string>
		lcd_send_cmd(0x80 | 0x54);
 8001422:	20d4      	movs	r0, #212	; 0xd4
 8001424:	f000 fd30 	bl	8001e88 <lcd_send_cmd>
		lcd_send_string(" Return to main menu");
 8001428:	4829      	ldr	r0, [pc, #164]	; (80014d0 <PID_menu+0x228>)
 800142a:	f000 fdde 	bl	8001fea <lcd_send_string>
		break;
 800142e:	e039      	b.n	80014a4 <PID_menu+0x1fc>
	case 4:
		sprintf(kp_str, " Kp = %.2f         ", Kp);
 8001430:	4b1e      	ldr	r3, [pc, #120]	; (80014ac <PID_menu+0x204>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff f88f 	bl	8000558 <__aeabi_f2d>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	4925      	ldr	r1, [pc, #148]	; (80014d4 <PID_menu+0x22c>)
 8001440:	481c      	ldr	r0, [pc, #112]	; (80014b4 <PID_menu+0x20c>)
 8001442:	f00a fa43 	bl	800b8cc <siprintf>
		lcd_send_cmd(0x80 | 0x00);
 8001446:	2080      	movs	r0, #128	; 0x80
 8001448:	f000 fd1e 	bl	8001e88 <lcd_send_cmd>
		lcd_send_string(kp_str);
 800144c:	4819      	ldr	r0, [pc, #100]	; (80014b4 <PID_menu+0x20c>)
 800144e:	f000 fdcc 	bl	8001fea <lcd_send_string>
		sprintf(ki_str, " Ki = %.2f         ", Ki);
 8001452:	4b19      	ldr	r3, [pc, #100]	; (80014b8 <PID_menu+0x210>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff f87e 	bl	8000558 <__aeabi_f2d>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	4916      	ldr	r1, [pc, #88]	; (80014bc <PID_menu+0x214>)
 8001462:	4817      	ldr	r0, [pc, #92]	; (80014c0 <PID_menu+0x218>)
 8001464:	f00a fa32 	bl	800b8cc <siprintf>
		lcd_send_cmd(0x80 | 0x40);
 8001468:	20c0      	movs	r0, #192	; 0xc0
 800146a:	f000 fd0d 	bl	8001e88 <lcd_send_cmd>
		lcd_send_string(ki_str);
 800146e:	4814      	ldr	r0, [pc, #80]	; (80014c0 <PID_menu+0x218>)
 8001470:	f000 fdbb 	bl	8001fea <lcd_send_string>
		sprintf(kd_str, " Kd = %.2f         ", Kd);
 8001474:	4b13      	ldr	r3, [pc, #76]	; (80014c4 <PID_menu+0x21c>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff f86d 	bl	8000558 <__aeabi_f2d>
 800147e:	4602      	mov	r2, r0
 8001480:	460b      	mov	r3, r1
 8001482:	4911      	ldr	r1, [pc, #68]	; (80014c8 <PID_menu+0x220>)
 8001484:	4811      	ldr	r0, [pc, #68]	; (80014cc <PID_menu+0x224>)
 8001486:	f00a fa21 	bl	800b8cc <siprintf>
		lcd_send_cmd(0x80 | 0x14);
 800148a:	2094      	movs	r0, #148	; 0x94
 800148c:	f000 fcfc 	bl	8001e88 <lcd_send_cmd>
		lcd_send_string(kd_str);
 8001490:	480e      	ldr	r0, [pc, #56]	; (80014cc <PID_menu+0x224>)
 8001492:	f000 fdaa 	bl	8001fea <lcd_send_string>
		lcd_send_cmd(0x80 | 0x54);
 8001496:	20d4      	movs	r0, #212	; 0xd4
 8001498:	f000 fcf6 	bl	8001e88 <lcd_send_cmd>
		lcd_send_string(">Return to main menu");
 800149c:	4810      	ldr	r0, [pc, #64]	; (80014e0 <PID_menu+0x238>)
 800149e:	f000 fda4 	bl	8001fea <lcd_send_string>
		break;
 80014a2:	bf00      	nop
	}
}
 80014a4:	bf00      	nop
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	2000001c 	.word	0x2000001c
 80014b0:	0800f758 	.word	0x0800f758
 80014b4:	20000308 	.word	0x20000308
 80014b8:	20000280 	.word	0x20000280
 80014bc:	0800f76c 	.word	0x0800f76c
 80014c0:	200002bc 	.word	0x200002bc
 80014c4:	20000020 	.word	0x20000020
 80014c8:	0800f780 	.word	0x0800f780
 80014cc:	200002e8 	.word	0x200002e8
 80014d0:	0800f794 	.word	0x0800f794
 80014d4:	0800f7ac 	.word	0x0800f7ac
 80014d8:	0800f7c0 	.word	0x0800f7c0
 80014dc:	0800f7d4 	.word	0x0800f7d4
 80014e0:	0800f7e8 	.word	0x0800f7e8

080014e4 <Speed_menu>:
static void Speed_menu(uint8_t line) {
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	71fb      	strb	r3, [r7, #7]
	switch (line) {
 80014ee:	79fb      	ldrb	r3, [r7, #7]
 80014f0:	2b03      	cmp	r3, #3
 80014f2:	d04c      	beq.n	800158e <Speed_menu+0xaa>
 80014f4:	2b03      	cmp	r3, #3
 80014f6:	dc6d      	bgt.n	80015d4 <Speed_menu+0xf0>
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d002      	beq.n	8001502 <Speed_menu+0x1e>
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d023      	beq.n	8001548 <Speed_menu+0x64>
		lcd_send_string(Right_str);
		lcd_send_cmd(0x80 | 0x14);
		lcd_send_string(">Return to main menu");
		break;
	}
}
 8001500:	e068      	b.n	80015d4 <Speed_menu+0xf0>
		sprintf(Left_str, ">Left Eng = %d", Left);
 8001502:	4b36      	ldr	r3, [pc, #216]	; (80015dc <Speed_menu+0xf8>)
 8001504:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001508:	461a      	mov	r2, r3
 800150a:	4935      	ldr	r1, [pc, #212]	; (80015e0 <Speed_menu+0xfc>)
 800150c:	4835      	ldr	r0, [pc, #212]	; (80015e4 <Speed_menu+0x100>)
 800150e:	f00a f9dd 	bl	800b8cc <siprintf>
		lcd_send_cmd(0x80 | 0x00);
 8001512:	2080      	movs	r0, #128	; 0x80
 8001514:	f000 fcb8 	bl	8001e88 <lcd_send_cmd>
		lcd_send_string(Left_str);
 8001518:	4832      	ldr	r0, [pc, #200]	; (80015e4 <Speed_menu+0x100>)
 800151a:	f000 fd66 	bl	8001fea <lcd_send_string>
		sprintf(Right_str, " Right Eng = %d", Right);
 800151e:	4b32      	ldr	r3, [pc, #200]	; (80015e8 <Speed_menu+0x104>)
 8001520:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001524:	461a      	mov	r2, r3
 8001526:	4931      	ldr	r1, [pc, #196]	; (80015ec <Speed_menu+0x108>)
 8001528:	4831      	ldr	r0, [pc, #196]	; (80015f0 <Speed_menu+0x10c>)
 800152a:	f00a f9cf 	bl	800b8cc <siprintf>
		lcd_send_cmd(0x80 | 0x40);
 800152e:	20c0      	movs	r0, #192	; 0xc0
 8001530:	f000 fcaa 	bl	8001e88 <lcd_send_cmd>
		lcd_send_string(Right_str);
 8001534:	482e      	ldr	r0, [pc, #184]	; (80015f0 <Speed_menu+0x10c>)
 8001536:	f000 fd58 	bl	8001fea <lcd_send_string>
		lcd_send_cmd(0x80 | 0x14);
 800153a:	2094      	movs	r0, #148	; 0x94
 800153c:	f000 fca4 	bl	8001e88 <lcd_send_cmd>
		lcd_send_string(" Return to main menu");
 8001540:	482c      	ldr	r0, [pc, #176]	; (80015f4 <Speed_menu+0x110>)
 8001542:	f000 fd52 	bl	8001fea <lcd_send_string>
		break;
 8001546:	e045      	b.n	80015d4 <Speed_menu+0xf0>
		sprintf(Left_str, " Left Eng = %d", Left);
 8001548:	4b24      	ldr	r3, [pc, #144]	; (80015dc <Speed_menu+0xf8>)
 800154a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800154e:	461a      	mov	r2, r3
 8001550:	4929      	ldr	r1, [pc, #164]	; (80015f8 <Speed_menu+0x114>)
 8001552:	4824      	ldr	r0, [pc, #144]	; (80015e4 <Speed_menu+0x100>)
 8001554:	f00a f9ba 	bl	800b8cc <siprintf>
		lcd_send_cmd(0x80 | 0x00);
 8001558:	2080      	movs	r0, #128	; 0x80
 800155a:	f000 fc95 	bl	8001e88 <lcd_send_cmd>
		lcd_send_string(Left_str);
 800155e:	4821      	ldr	r0, [pc, #132]	; (80015e4 <Speed_menu+0x100>)
 8001560:	f000 fd43 	bl	8001fea <lcd_send_string>
		sprintf(Right_str, ">Right Eng = %d", Right);
 8001564:	4b20      	ldr	r3, [pc, #128]	; (80015e8 <Speed_menu+0x104>)
 8001566:	f9b3 3000 	ldrsh.w	r3, [r3]
 800156a:	461a      	mov	r2, r3
 800156c:	4923      	ldr	r1, [pc, #140]	; (80015fc <Speed_menu+0x118>)
 800156e:	4820      	ldr	r0, [pc, #128]	; (80015f0 <Speed_menu+0x10c>)
 8001570:	f00a f9ac 	bl	800b8cc <siprintf>
		lcd_send_cmd(0x80 | 0x40);
 8001574:	20c0      	movs	r0, #192	; 0xc0
 8001576:	f000 fc87 	bl	8001e88 <lcd_send_cmd>
		lcd_send_string(Right_str);
 800157a:	481d      	ldr	r0, [pc, #116]	; (80015f0 <Speed_menu+0x10c>)
 800157c:	f000 fd35 	bl	8001fea <lcd_send_string>
		lcd_send_cmd(0x80 | 0x14);
 8001580:	2094      	movs	r0, #148	; 0x94
 8001582:	f000 fc81 	bl	8001e88 <lcd_send_cmd>
		lcd_send_string(" Return to main menu");
 8001586:	481b      	ldr	r0, [pc, #108]	; (80015f4 <Speed_menu+0x110>)
 8001588:	f000 fd2f 	bl	8001fea <lcd_send_string>
		break;
 800158c:	e022      	b.n	80015d4 <Speed_menu+0xf0>
		sprintf(Left_str, " Left Eng = %d", Left);
 800158e:	4b13      	ldr	r3, [pc, #76]	; (80015dc <Speed_menu+0xf8>)
 8001590:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001594:	461a      	mov	r2, r3
 8001596:	4918      	ldr	r1, [pc, #96]	; (80015f8 <Speed_menu+0x114>)
 8001598:	4812      	ldr	r0, [pc, #72]	; (80015e4 <Speed_menu+0x100>)
 800159a:	f00a f997 	bl	800b8cc <siprintf>
		lcd_send_cmd(0x80 | 0x00);
 800159e:	2080      	movs	r0, #128	; 0x80
 80015a0:	f000 fc72 	bl	8001e88 <lcd_send_cmd>
		lcd_send_string(Left_str);
 80015a4:	480f      	ldr	r0, [pc, #60]	; (80015e4 <Speed_menu+0x100>)
 80015a6:	f000 fd20 	bl	8001fea <lcd_send_string>
		sprintf(Right_str, " Right Eng = %d", Right);
 80015aa:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <Speed_menu+0x104>)
 80015ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015b0:	461a      	mov	r2, r3
 80015b2:	490e      	ldr	r1, [pc, #56]	; (80015ec <Speed_menu+0x108>)
 80015b4:	480e      	ldr	r0, [pc, #56]	; (80015f0 <Speed_menu+0x10c>)
 80015b6:	f00a f989 	bl	800b8cc <siprintf>
		lcd_send_cmd(0x80 | 0x40);
 80015ba:	20c0      	movs	r0, #192	; 0xc0
 80015bc:	f000 fc64 	bl	8001e88 <lcd_send_cmd>
		lcd_send_string(Right_str);
 80015c0:	480b      	ldr	r0, [pc, #44]	; (80015f0 <Speed_menu+0x10c>)
 80015c2:	f000 fd12 	bl	8001fea <lcd_send_string>
		lcd_send_cmd(0x80 | 0x14);
 80015c6:	2094      	movs	r0, #148	; 0x94
 80015c8:	f000 fc5e 	bl	8001e88 <lcd_send_cmd>
		lcd_send_string(">Return to main menu");
 80015cc:	480c      	ldr	r0, [pc, #48]	; (8001600 <Speed_menu+0x11c>)
 80015ce:	f000 fd0c 	bl	8001fea <lcd_send_string>
		break;
 80015d2:	bf00      	nop
}
 80015d4:	bf00      	nop
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	2000000c 	.word	0x2000000c
 80015e0:	0800f800 	.word	0x0800f800
 80015e4:	200002a8 	.word	0x200002a8
 80015e8:	2000000e 	.word	0x2000000e
 80015ec:	0800f810 	.word	0x0800f810
 80015f0:	20000294 	.word	0x20000294
 80015f4:	0800f794 	.word	0x0800f794
 80015f8:	0800f820 	.word	0x0800f820
 80015fc:	0800f830 	.word	0x0800f830
 8001600:	0800f7e8 	.word	0x0800f7e8

08001604 <Color_Studying_process>:

static void Color_Studying_process(void) {
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
#ifdef	READ_WHITE_LINE
	uint16_t WhiteLine[] = {0 ,0 ,0 ,0, 0, 0};
 800160a:	463b      	mov	r3, r7
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
#endif
#ifdef READ_BLACK_LINE
	uint16_t BlackLine[] = {0, 0, 0, 0, 0, 0};
#endif
	Color_Read = 1;
 8001614:	4b40      	ldr	r3, [pc, #256]	; (8001718 <Color_Studying_process+0x114>)
 8001616:	2201      	movs	r2, #1
 8001618:	701a      	strb	r2, [r3, #0]
	lcd_send_cmd(0x80 | 0x00);
 800161a:	2080      	movs	r0, #128	; 0x80
 800161c:	f000 fc34 	bl	8001e88 <lcd_send_cmd>
	lcd_send_string("Out line read      ");
 8001620:	483e      	ldr	r0, [pc, #248]	; (800171c <Color_Studying_process+0x118>)
 8001622:	f000 fce2 	bl	8001fea <lcd_send_string>
	lcd_send_cmd(0x80 | 0x40);
 8001626:	20c0      	movs	r0, #192	; 0xc0
 8001628:	f000 fc2e 	bl	8001e88 <lcd_send_cmd>
	lcd_send_string("Press B to begin   ");
 800162c:	483c      	ldr	r0, [pc, #240]	; (8001720 <Color_Studying_process+0x11c>)
 800162e:	f000 fcdc 	bl	8001fea <lcd_send_string>
	while(Color_Read){
 8001632:	e058      	b.n	80016e6 <Color_Studying_process+0xe2>
		if (HAL_GPIO_ReadPin(ButtonB_GPIO_Port, ButtonB_Pin) == 0)
 8001634:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001638:	483a      	ldr	r0, [pc, #232]	; (8001724 <Color_Studying_process+0x120>)
 800163a:	f005 ff95 	bl	8007568 <HAL_GPIO_ReadPin>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d150      	bne.n	80016e6 <Color_Studying_process+0xe2>
		{
			while (HAL_GPIO_ReadPin(ButtonB_GPIO_Port, ButtonB_Pin) == 0)
 8001644:	e002      	b.n	800164c <Color_Studying_process+0x48>
			{
				HAL_Delay(50);
 8001646:	2032      	movs	r0, #50	; 0x32
 8001648:	f004 fb8c 	bl	8005d64 <HAL_Delay>
			while (HAL_GPIO_ReadPin(ButtonB_GPIO_Port, ButtonB_Pin) == 0)
 800164c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001650:	4834      	ldr	r0, [pc, #208]	; (8001724 <Color_Studying_process+0x120>)
 8001652:	f005 ff89 	bl	8007568 <HAL_GPIO_ReadPin>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d0f4      	beq.n	8001646 <Color_Studying_process+0x42>
			}
			for(int i=0;i<ADC_Sample_Times;i++)
 800165c:	2300      	movs	r3, #0
 800165e:	617b      	str	r3, [r7, #20]
 8001660:	e023      	b.n	80016aa <Color_Studying_process+0xa6>
			{
				for(int i=0;i<Number_of_Sensors;i++)
 8001662:	2300      	movs	r3, #0
 8001664:	613b      	str	r3, [r7, #16]
 8001666:	e01a      	b.n	800169e <Color_Studying_process+0x9a>
				{
#ifdef READ_WHITE_LINE
					if(Sensor_ADC_Value[i] > WhiteLine[i])
 8001668:	4a2f      	ldr	r2, [pc, #188]	; (8001728 <Color_Studying_process+0x124>)
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	f107 0118 	add.w	r1, r7, #24
 8001678:	440b      	add	r3, r1
 800167a:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800167e:	429a      	cmp	r2, r3
 8001680:	d90a      	bls.n	8001698 <Color_Studying_process+0x94>
					{
						WhiteLine[i] = Sensor_ADC_Value[i];
 8001682:	4a29      	ldr	r2, [pc, #164]	; (8001728 <Color_Studying_process+0x124>)
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	f107 0118 	add.w	r1, r7, #24
 8001692:	440b      	add	r3, r1
 8001694:	f823 2c18 	strh.w	r2, [r3, #-24]
				for(int i=0;i<Number_of_Sensors;i++)
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	3301      	adds	r3, #1
 800169c:	613b      	str	r3, [r7, #16]
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	2b05      	cmp	r3, #5
 80016a2:	dde1      	ble.n	8001668 <Color_Studying_process+0x64>
			for(int i=0;i<ADC_Sample_Times;i++)
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	3301      	adds	r3, #1
 80016a8:	617b      	str	r3, [r7, #20]
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80016b0:	4293      	cmp	r3, r2
 80016b2:	ddd6      	ble.n	8001662 <Color_Studying_process+0x5e>
					}
#endif
				}
			}
#ifdef READ_WHITE_LINE
			for(int i=0;i<Number_of_Sensors;i++)
 80016b4:	2300      	movs	r3, #0
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	e00f      	b.n	80016da <Color_Studying_process+0xd6>
			{
				Sensor_Threshold[i]=WhiteLine[i] - 10;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	f107 0218 	add.w	r2, r7, #24
 80016c2:	4413      	add	r3, r2
 80016c4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80016c8:	3b0a      	subs	r3, #10
 80016ca:	b299      	uxth	r1, r3
 80016cc:	4a17      	ldr	r2, [pc, #92]	; (800172c <Color_Studying_process+0x128>)
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int i=0;i<Number_of_Sensors;i++)
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	3301      	adds	r3, #1
 80016d8:	60fb      	str	r3, [r7, #12]
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2b05      	cmp	r3, #5
 80016de:	ddec      	ble.n	80016ba <Color_Studying_process+0xb6>
				}
				else
					Sensor_Threshold[i]=BlackLine[i];
			}
#endif
			Color_Read = 0;
 80016e0:	4b0d      	ldr	r3, [pc, #52]	; (8001718 <Color_Studying_process+0x114>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	701a      	strb	r2, [r3, #0]
	while(Color_Read){
 80016e6:	4b0c      	ldr	r3, [pc, #48]	; (8001718 <Color_Studying_process+0x114>)
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d1a2      	bne.n	8001634 <Color_Studying_process+0x30>
		}
	}
	lcd_clear();
 80016ee:	f000 fc2b 	bl	8001f48 <lcd_clear>
	lcd_send_cmd(0x80 | 0x00);
 80016f2:	2080      	movs	r0, #128	; 0x80
 80016f4:	f000 fbc8 	bl	8001e88 <lcd_send_cmd>
	lcd_send_string("Done               ");
 80016f8:	480d      	ldr	r0, [pc, #52]	; (8001730 <Color_Studying_process+0x12c>)
 80016fa:	f000 fc76 	bl	8001fea <lcd_send_string>
	HAL_Delay(200);
 80016fe:	20c8      	movs	r0, #200	; 0xc8
 8001700:	f004 fb30 	bl	8005d64 <HAL_Delay>
	Menu_type = Main_menu;
 8001704:	4b0b      	ldr	r3, [pc, #44]	; (8001734 <Color_Studying_process+0x130>)
 8001706:	2201      	movs	r2, #1
 8001708:	701a      	strb	r2, [r3, #0]
	lcd_clear();
 800170a:	f000 fc1d 	bl	8001f48 <lcd_clear>
}
 800170e:	bf00      	nop
 8001710:	3718      	adds	r7, #24
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20000002 	.word	0x20000002
 800171c:	0800f840 	.word	0x0800f840
 8001720:	0800f854 	.word	0x0800f854
 8001724:	40020800 	.word	0x40020800
 8001728:	200004a8 	.word	0x200004a8
 800172c:	20000010 	.word	0x20000010
 8001730:	0800f868 	.word	0x0800f868
 8001734:	20000001 	.word	0x20000001

08001738 <LineDetect_show>:

static void LineDetect_show(void) {
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x80 | 0x00);
 800173e:	2080      	movs	r0, #128	; 0x80
 8001740:	f000 fba2 	bl	8001e88 <lcd_send_cmd>
	lcd_send_string("Line Detect        ");
 8001744:	4859      	ldr	r0, [pc, #356]	; (80018ac <LineDetect_show+0x174>)
 8001746:	f000 fc50 	bl	8001fea <lcd_send_string>
	lcd_send_cmd(0x80 | 0x40);
 800174a:	20c0      	movs	r0, #192	; 0xc0
 800174c:	f000 fb9c 	bl	8001e88 <lcd_send_cmd>
	lcd_send_string("Press C for cancel ");
 8001750:	4857      	ldr	r0, [pc, #348]	; (80018b0 <LineDetect_show+0x178>)
 8001752:	f000 fc4a 	bl	8001fea <lcd_send_string>
	while (cancel_menu) {
 8001756:	e09d      	b.n	8001894 <LineDetect_show+0x15c>
		for (int8_t i = 0; i < 6; i++) {
 8001758:	2300      	movs	r3, #0
 800175a:	71fb      	strb	r3, [r7, #7]
 800175c:	e095      	b.n	800188a <LineDetect_show+0x152>
#ifdef READ_WHITE_LINE
			if (Sensor_ADC_Value[0] < Sensor_Threshold[0]) {
 800175e:	4b55      	ldr	r3, [pc, #340]	; (80018b4 <LineDetect_show+0x17c>)
 8001760:	881a      	ldrh	r2, [r3, #0]
 8001762:	4b55      	ldr	r3, [pc, #340]	; (80018b8 <LineDetect_show+0x180>)
 8001764:	881b      	ldrh	r3, [r3, #0]
 8001766:	429a      	cmp	r2, r3
 8001768:	d205      	bcs.n	8001776 <LineDetect_show+0x3e>
				lcd_send_cmd(0x80 | 0x16);
 800176a:	2096      	movs	r0, #150	; 0x96
 800176c:	f000 fb8c 	bl	8001e88 <lcd_send_cmd>
				lcd_send_string("1");
 8001770:	4852      	ldr	r0, [pc, #328]	; (80018bc <LineDetect_show+0x184>)
 8001772:	f000 fc3a 	bl	8001fea <lcd_send_string>
			}
			if (Sensor_ADC_Value[1] < Sensor_Threshold[1]) {
 8001776:	4b4f      	ldr	r3, [pc, #316]	; (80018b4 <LineDetect_show+0x17c>)
 8001778:	885a      	ldrh	r2, [r3, #2]
 800177a:	4b4f      	ldr	r3, [pc, #316]	; (80018b8 <LineDetect_show+0x180>)
 800177c:	885b      	ldrh	r3, [r3, #2]
 800177e:	429a      	cmp	r2, r3
 8001780:	d205      	bcs.n	800178e <LineDetect_show+0x56>
				lcd_send_cmd(0x80 | 0x18);
 8001782:	2098      	movs	r0, #152	; 0x98
 8001784:	f000 fb80 	bl	8001e88 <lcd_send_cmd>
				lcd_send_string("1");
 8001788:	484c      	ldr	r0, [pc, #304]	; (80018bc <LineDetect_show+0x184>)
 800178a:	f000 fc2e 	bl	8001fea <lcd_send_string>
			}
			if (Sensor_ADC_Value[2] < Sensor_Threshold[2]) {
 800178e:	4b49      	ldr	r3, [pc, #292]	; (80018b4 <LineDetect_show+0x17c>)
 8001790:	889a      	ldrh	r2, [r3, #4]
 8001792:	4b49      	ldr	r3, [pc, #292]	; (80018b8 <LineDetect_show+0x180>)
 8001794:	889b      	ldrh	r3, [r3, #4]
 8001796:	429a      	cmp	r2, r3
 8001798:	d205      	bcs.n	80017a6 <LineDetect_show+0x6e>
				lcd_send_cmd(0x80 | 0x1A);
 800179a:	209a      	movs	r0, #154	; 0x9a
 800179c:	f000 fb74 	bl	8001e88 <lcd_send_cmd>
				lcd_send_string("1");
 80017a0:	4846      	ldr	r0, [pc, #280]	; (80018bc <LineDetect_show+0x184>)
 80017a2:	f000 fc22 	bl	8001fea <lcd_send_string>
			}
			if (Sensor_ADC_Value[3] < Sensor_Threshold[3]) {
 80017a6:	4b43      	ldr	r3, [pc, #268]	; (80018b4 <LineDetect_show+0x17c>)
 80017a8:	88da      	ldrh	r2, [r3, #6]
 80017aa:	4b43      	ldr	r3, [pc, #268]	; (80018b8 <LineDetect_show+0x180>)
 80017ac:	88db      	ldrh	r3, [r3, #6]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d205      	bcs.n	80017be <LineDetect_show+0x86>
				lcd_send_cmd(0x80 | 0x1C);
 80017b2:	209c      	movs	r0, #156	; 0x9c
 80017b4:	f000 fb68 	bl	8001e88 <lcd_send_cmd>
				lcd_send_string("1");
 80017b8:	4840      	ldr	r0, [pc, #256]	; (80018bc <LineDetect_show+0x184>)
 80017ba:	f000 fc16 	bl	8001fea <lcd_send_string>
			}
			if (Sensor_ADC_Value[4] < Sensor_Threshold[4]) {
 80017be:	4b3d      	ldr	r3, [pc, #244]	; (80018b4 <LineDetect_show+0x17c>)
 80017c0:	891a      	ldrh	r2, [r3, #8]
 80017c2:	4b3d      	ldr	r3, [pc, #244]	; (80018b8 <LineDetect_show+0x180>)
 80017c4:	891b      	ldrh	r3, [r3, #8]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d205      	bcs.n	80017d6 <LineDetect_show+0x9e>
				lcd_send_cmd(0x80 | 0x1E);
 80017ca:	209e      	movs	r0, #158	; 0x9e
 80017cc:	f000 fb5c 	bl	8001e88 <lcd_send_cmd>
				lcd_send_string("1");
 80017d0:	483a      	ldr	r0, [pc, #232]	; (80018bc <LineDetect_show+0x184>)
 80017d2:	f000 fc0a 	bl	8001fea <lcd_send_string>
			}
			if (Sensor_ADC_Value[5] < Sensor_Threshold[5]) {
 80017d6:	4b37      	ldr	r3, [pc, #220]	; (80018b4 <LineDetect_show+0x17c>)
 80017d8:	895a      	ldrh	r2, [r3, #10]
 80017da:	4b37      	ldr	r3, [pc, #220]	; (80018b8 <LineDetect_show+0x180>)
 80017dc:	895b      	ldrh	r3, [r3, #10]
 80017de:	429a      	cmp	r2, r3
 80017e0:	d205      	bcs.n	80017ee <LineDetect_show+0xb6>
				lcd_send_cmd(0x80 | 0x20);
 80017e2:	20a0      	movs	r0, #160	; 0xa0
 80017e4:	f000 fb50 	bl	8001e88 <lcd_send_cmd>
				lcd_send_string("1");
 80017e8:	4834      	ldr	r0, [pc, #208]	; (80018bc <LineDetect_show+0x184>)
 80017ea:	f000 fbfe 	bl	8001fea <lcd_send_string>
			}
			if (Sensor_ADC_Value[0] >= Sensor_Threshold[0]) {
 80017ee:	4b31      	ldr	r3, [pc, #196]	; (80018b4 <LineDetect_show+0x17c>)
 80017f0:	881a      	ldrh	r2, [r3, #0]
 80017f2:	4b31      	ldr	r3, [pc, #196]	; (80018b8 <LineDetect_show+0x180>)
 80017f4:	881b      	ldrh	r3, [r3, #0]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d305      	bcc.n	8001806 <LineDetect_show+0xce>
				lcd_send_cmd(0x80 | 0x16);
 80017fa:	2096      	movs	r0, #150	; 0x96
 80017fc:	f000 fb44 	bl	8001e88 <lcd_send_cmd>
				lcd_send_string(" ");
 8001800:	482f      	ldr	r0, [pc, #188]	; (80018c0 <LineDetect_show+0x188>)
 8001802:	f000 fbf2 	bl	8001fea <lcd_send_string>
			}
			if (Sensor_ADC_Value[1] >= Sensor_Threshold[1]) {
 8001806:	4b2b      	ldr	r3, [pc, #172]	; (80018b4 <LineDetect_show+0x17c>)
 8001808:	885a      	ldrh	r2, [r3, #2]
 800180a:	4b2b      	ldr	r3, [pc, #172]	; (80018b8 <LineDetect_show+0x180>)
 800180c:	885b      	ldrh	r3, [r3, #2]
 800180e:	429a      	cmp	r2, r3
 8001810:	d305      	bcc.n	800181e <LineDetect_show+0xe6>
				lcd_send_cmd(0x80 | 0x18);
 8001812:	2098      	movs	r0, #152	; 0x98
 8001814:	f000 fb38 	bl	8001e88 <lcd_send_cmd>
				lcd_send_string(" ");
 8001818:	4829      	ldr	r0, [pc, #164]	; (80018c0 <LineDetect_show+0x188>)
 800181a:	f000 fbe6 	bl	8001fea <lcd_send_string>
			}
			if (Sensor_ADC_Value[2] >= Sensor_Threshold[2]) {
 800181e:	4b25      	ldr	r3, [pc, #148]	; (80018b4 <LineDetect_show+0x17c>)
 8001820:	889a      	ldrh	r2, [r3, #4]
 8001822:	4b25      	ldr	r3, [pc, #148]	; (80018b8 <LineDetect_show+0x180>)
 8001824:	889b      	ldrh	r3, [r3, #4]
 8001826:	429a      	cmp	r2, r3
 8001828:	d305      	bcc.n	8001836 <LineDetect_show+0xfe>
				lcd_send_cmd(0x80 | 0x1A);
 800182a:	209a      	movs	r0, #154	; 0x9a
 800182c:	f000 fb2c 	bl	8001e88 <lcd_send_cmd>
				lcd_send_string(" ");
 8001830:	4823      	ldr	r0, [pc, #140]	; (80018c0 <LineDetect_show+0x188>)
 8001832:	f000 fbda 	bl	8001fea <lcd_send_string>
			}
			if (Sensor_ADC_Value[3] >= Sensor_Threshold[3]) {
 8001836:	4b1f      	ldr	r3, [pc, #124]	; (80018b4 <LineDetect_show+0x17c>)
 8001838:	88da      	ldrh	r2, [r3, #6]
 800183a:	4b1f      	ldr	r3, [pc, #124]	; (80018b8 <LineDetect_show+0x180>)
 800183c:	88db      	ldrh	r3, [r3, #6]
 800183e:	429a      	cmp	r2, r3
 8001840:	d305      	bcc.n	800184e <LineDetect_show+0x116>
				lcd_send_cmd(0x80 | 0x1C);
 8001842:	209c      	movs	r0, #156	; 0x9c
 8001844:	f000 fb20 	bl	8001e88 <lcd_send_cmd>
				lcd_send_string(" ");
 8001848:	481d      	ldr	r0, [pc, #116]	; (80018c0 <LineDetect_show+0x188>)
 800184a:	f000 fbce 	bl	8001fea <lcd_send_string>
			}
			if (Sensor_ADC_Value[4] >= Sensor_Threshold[4]) {
 800184e:	4b19      	ldr	r3, [pc, #100]	; (80018b4 <LineDetect_show+0x17c>)
 8001850:	891a      	ldrh	r2, [r3, #8]
 8001852:	4b19      	ldr	r3, [pc, #100]	; (80018b8 <LineDetect_show+0x180>)
 8001854:	891b      	ldrh	r3, [r3, #8]
 8001856:	429a      	cmp	r2, r3
 8001858:	d305      	bcc.n	8001866 <LineDetect_show+0x12e>
				lcd_send_cmd(0x80 | 0x1E);
 800185a:	209e      	movs	r0, #158	; 0x9e
 800185c:	f000 fb14 	bl	8001e88 <lcd_send_cmd>
				lcd_send_string(" ");
 8001860:	4817      	ldr	r0, [pc, #92]	; (80018c0 <LineDetect_show+0x188>)
 8001862:	f000 fbc2 	bl	8001fea <lcd_send_string>
			}
			if (Sensor_ADC_Value[5] >= Sensor_Threshold[5]) {
 8001866:	4b13      	ldr	r3, [pc, #76]	; (80018b4 <LineDetect_show+0x17c>)
 8001868:	895a      	ldrh	r2, [r3, #10]
 800186a:	4b13      	ldr	r3, [pc, #76]	; (80018b8 <LineDetect_show+0x180>)
 800186c:	895b      	ldrh	r3, [r3, #10]
 800186e:	429a      	cmp	r2, r3
 8001870:	d305      	bcc.n	800187e <LineDetect_show+0x146>
				lcd_send_cmd(0x80 | 0x20);
 8001872:	20a0      	movs	r0, #160	; 0xa0
 8001874:	f000 fb08 	bl	8001e88 <lcd_send_cmd>
				lcd_send_string(" ");
 8001878:	4811      	ldr	r0, [pc, #68]	; (80018c0 <LineDetect_show+0x188>)
 800187a:	f000 fbb6 	bl	8001fea <lcd_send_string>
		for (int8_t i = 0; i < 6; i++) {
 800187e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001882:	b2db      	uxtb	r3, r3
 8001884:	3301      	adds	r3, #1
 8001886:	b2db      	uxtb	r3, r3
 8001888:	71fb      	strb	r3, [r7, #7]
 800188a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188e:	2b05      	cmp	r3, #5
 8001890:	f77f af65 	ble.w	800175e <LineDetect_show+0x26>
	while (cancel_menu) {
 8001894:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <LineDetect_show+0x18c>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	2b00      	cmp	r3, #0
 800189a:	f47f af5d 	bne.w	8001758 <LineDetect_show+0x20>
				lcd_send_string(" ");
			}
#endif
		}
	}
	lcd_clear();
 800189e:	f000 fb53 	bl	8001f48 <lcd_clear>
}
 80018a2:	bf00      	nop
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	0800f87c 	.word	0x0800f87c
 80018b0:	0800f890 	.word	0x0800f890
 80018b4:	200004a8 	.word	0x200004a8
 80018b8:	20000010 	.word	0x20000010
 80018bc:	0800f8a4 	.word	0x0800f8a4
 80018c0:	0800f8a8 	.word	0x0800f8a8
 80018c4:	20000005 	.word	0x20000005

080018c8 <Saving_Process>:

void Saving_Process(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b088      	sub	sp, #32
 80018cc:	af00      	add	r7, sp, #0
	unsigned char Card_ID[5];
	char Card_Buffer_Str[4];
	char concat_Buff[20];
	cancel_reading_card = 1;
 80018ce:	4b42      	ldr	r3, [pc, #264]	; (80019d8 <Saving_Process+0x110>)
 80018d0:	2201      	movs	r2, #1
 80018d2:	701a      	strb	r2, [r3, #0]
	memset(concat_Buff,0,sizeof(concat_Buff));
 80018d4:	463b      	mov	r3, r7
 80018d6:	2214      	movs	r2, #20
 80018d8:	2100      	movs	r1, #0
 80018da:	4618      	mov	r0, r3
 80018dc:	f009 fb84 	bl	800afe8 <memset>
	memset(Card_Buffer_Str,0,sizeof(Card_Buffer_Str));
 80018e0:	f107 0314 	add.w	r3, r7, #20
 80018e4:	2204      	movs	r2, #4
 80018e6:	2100      	movs	r1, #0
 80018e8:	4618      	mov	r0, r3
 80018ea:	f009 fb7d 	bl	800afe8 <memset>
	MFRC522_Init();
 80018ee:	f003 fcd4 	bl	800529a <MFRC522_Init>
	lcd_send_cmd(0x80 | 0x00);
 80018f2:	2080      	movs	r0, #128	; 0x80
 80018f4:	f000 fac8 	bl	8001e88 <lcd_send_cmd>
	lcd_send_string("RFID Card Read     ");
 80018f8:	4838      	ldr	r0, [pc, #224]	; (80019dc <Saving_Process+0x114>)
 80018fa:	f000 fb76 	bl	8001fea <lcd_send_string>
	lcd_send_cmd(0x80 | 0x40);
 80018fe:	20c0      	movs	r0, #192	; 0xc0
 8001900:	f000 fac2 	bl	8001e88 <lcd_send_cmd>
	lcd_send_string("Press C for cancel ");
 8001904:	4836      	ldr	r0, [pc, #216]	; (80019e0 <Saving_Process+0x118>)
 8001906:	f000 fb70 	bl	8001fea <lcd_send_string>
	while(cancel_reading_card)
 800190a:	e05b      	b.n	80019c4 <Saving_Process+0xfc>
	{
		if(MFRC522_Check(Card_ID) == MI_OK)
 800190c:	f107 0318 	add.w	r3, r7, #24
 8001910:	4618      	mov	r0, r3
 8001912:	f003 faf7 	bl	8004f04 <MFRC522_Check>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d153      	bne.n	80019c4 <Saving_Process+0xfc>
		{
			sprintf(Card_Buffer_Str,"%02x-",Card_ID[0]);
 800191c:	7e3b      	ldrb	r3, [r7, #24]
 800191e:	461a      	mov	r2, r3
 8001920:	f107 0314 	add.w	r3, r7, #20
 8001924:	492f      	ldr	r1, [pc, #188]	; (80019e4 <Saving_Process+0x11c>)
 8001926:	4618      	mov	r0, r3
 8001928:	f009 ffd0 	bl	800b8cc <siprintf>
			strcat(concat_Buff,Card_Buffer_Str);
 800192c:	f107 0214 	add.w	r2, r7, #20
 8001930:	463b      	mov	r3, r7
 8001932:	4611      	mov	r1, r2
 8001934:	4618      	mov	r0, r3
 8001936:	f009 ffe9 	bl	800b90c <strcat>
			sprintf(Card_Buffer_Str,"%02x-",Card_ID[1]);
 800193a:	7e7b      	ldrb	r3, [r7, #25]
 800193c:	461a      	mov	r2, r3
 800193e:	f107 0314 	add.w	r3, r7, #20
 8001942:	4928      	ldr	r1, [pc, #160]	; (80019e4 <Saving_Process+0x11c>)
 8001944:	4618      	mov	r0, r3
 8001946:	f009 ffc1 	bl	800b8cc <siprintf>
			strcat(concat_Buff,Card_Buffer_Str);
 800194a:	f107 0214 	add.w	r2, r7, #20
 800194e:	463b      	mov	r3, r7
 8001950:	4611      	mov	r1, r2
 8001952:	4618      	mov	r0, r3
 8001954:	f009 ffda 	bl	800b90c <strcat>
			sprintf(Card_Buffer_Str,"%02x-",Card_ID[2]);
 8001958:	7ebb      	ldrb	r3, [r7, #26]
 800195a:	461a      	mov	r2, r3
 800195c:	f107 0314 	add.w	r3, r7, #20
 8001960:	4920      	ldr	r1, [pc, #128]	; (80019e4 <Saving_Process+0x11c>)
 8001962:	4618      	mov	r0, r3
 8001964:	f009 ffb2 	bl	800b8cc <siprintf>
			strcat(concat_Buff,Card_Buffer_Str);
 8001968:	f107 0214 	add.w	r2, r7, #20
 800196c:	463b      	mov	r3, r7
 800196e:	4611      	mov	r1, r2
 8001970:	4618      	mov	r0, r3
 8001972:	f009 ffcb 	bl	800b90c <strcat>
			sprintf(Card_Buffer_Str,"%02x-",Card_ID[3]);
 8001976:	7efb      	ldrb	r3, [r7, #27]
 8001978:	461a      	mov	r2, r3
 800197a:	f107 0314 	add.w	r3, r7, #20
 800197e:	4919      	ldr	r1, [pc, #100]	; (80019e4 <Saving_Process+0x11c>)
 8001980:	4618      	mov	r0, r3
 8001982:	f009 ffa3 	bl	800b8cc <siprintf>
			strcat(concat_Buff,Card_Buffer_Str);
 8001986:	f107 0214 	add.w	r2, r7, #20
 800198a:	463b      	mov	r3, r7
 800198c:	4611      	mov	r1, r2
 800198e:	4618      	mov	r0, r3
 8001990:	f009 ffbc 	bl	800b90c <strcat>
			sprintf(Card_Buffer_Str,"%02x ",Card_ID[4]);
 8001994:	7f3b      	ldrb	r3, [r7, #28]
 8001996:	461a      	mov	r2, r3
 8001998:	f107 0314 	add.w	r3, r7, #20
 800199c:	4912      	ldr	r1, [pc, #72]	; (80019e8 <Saving_Process+0x120>)
 800199e:	4618      	mov	r0, r3
 80019a0:	f009 ff94 	bl	800b8cc <siprintf>
			strcat(concat_Buff,Card_Buffer_Str);
 80019a4:	f107 0214 	add.w	r2, r7, #20
 80019a8:	463b      	mov	r3, r7
 80019aa:	4611      	mov	r1, r2
 80019ac:	4618      	mov	r0, r3
 80019ae:	f009 ffad 	bl	800b90c <strcat>
			lcd_send_cmd(0x80 | 0x14);
 80019b2:	2094      	movs	r0, #148	; 0x94
 80019b4:	f000 fa68 	bl	8001e88 <lcd_send_cmd>
			lcd_send_string(concat_Buff);
 80019b8:	463b      	mov	r3, r7
 80019ba:	4618      	mov	r0, r3
 80019bc:	f000 fb15 	bl	8001fea <lcd_send_string>
			MFRC522_Reset();
 80019c0:	f003 fc8f 	bl	80052e2 <MFRC522_Reset>
	while(cancel_reading_card)
 80019c4:	4b04      	ldr	r3, [pc, #16]	; (80019d8 <Saving_Process+0x110>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d19f      	bne.n	800190c <Saving_Process+0x44>
		}
	}
	lcd_clear();
 80019cc:	f000 fabc 	bl	8001f48 <lcd_clear>
}
 80019d0:	bf00      	nop
 80019d2:	3720      	adds	r7, #32
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	2000000b 	.word	0x2000000b
 80019dc:	0800f8ac 	.word	0x0800f8ac
 80019e0:	0800f890 	.word	0x0800f890
 80019e4:	0800f8c0 	.word	0x0800f8c0
 80019e8:	0800f8c8 	.word	0x0800f8c8

080019ec <Wifi_Connect_establish>:

static void Wifi_Connect_establish(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0

		Menu_type = Main_menu;
 80019f0:	4b03      	ldr	r3, [pc, #12]	; (8001a00 <Wifi_Connect_establish+0x14>)
 80019f2:	2201      	movs	r2, #1
 80019f4:	701a      	strb	r2, [r3, #0]
		lcd_clear();
 80019f6:	f000 faa7 	bl	8001f48 <lcd_clear>
}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	20000001 	.word	0x20000001

08001a04 <Path_Solver>:
static void Path_Solver(uint8_t line)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	71fb      	strb	r3, [r7, #7]
	switch (line) {
 8001a0e:	79fb      	ldrb	r3, [r7, #7]
 8001a10:	3b01      	subs	r3, #1
 8001a12:	2b03      	cmp	r3, #3
 8001a14:	f200 80b0 	bhi.w	8001b78 <Path_Solver+0x174>
 8001a18:	a201      	add	r2, pc, #4	; (adr r2, 8001a20 <Path_Solver+0x1c>)
 8001a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a1e:	bf00      	nop
 8001a20:	08001a31 	.word	0x08001a31
 8001a24:	08001a83 	.word	0x08001a83
 8001a28:	08001ad5 	.word	0x08001ad5
 8001a2c:	08001b27 	.word	0x08001b27
		case 1:
			sprintf(First_str, ">First Point: %2d  ", First_point);
 8001a30:	4b53      	ldr	r3, [pc, #332]	; (8001b80 <Path_Solver+0x17c>)
 8001a32:	f993 3000 	ldrsb.w	r3, [r3]
 8001a36:	461a      	mov	r2, r3
 8001a38:	4952      	ldr	r1, [pc, #328]	; (8001b84 <Path_Solver+0x180>)
 8001a3a:	4853      	ldr	r0, [pc, #332]	; (8001b88 <Path_Solver+0x184>)
 8001a3c:	f009 ff46 	bl	800b8cc <siprintf>
			lcd_send_cmd(0x80 | 0x00);
 8001a40:	2080      	movs	r0, #128	; 0x80
 8001a42:	f000 fa21 	bl	8001e88 <lcd_send_cmd>
			lcd_send_string(First_str);
 8001a46:	4850      	ldr	r0, [pc, #320]	; (8001b88 <Path_Solver+0x184>)
 8001a48:	f000 facf 	bl	8001fea <lcd_send_string>
			sprintf(Last_str, " Last Point: %2d    ", Last_point);
 8001a4c:	4b4f      	ldr	r3, [pc, #316]	; (8001b8c <Path_Solver+0x188>)
 8001a4e:	f993 3000 	ldrsb.w	r3, [r3]
 8001a52:	461a      	mov	r2, r3
 8001a54:	494e      	ldr	r1, [pc, #312]	; (8001b90 <Path_Solver+0x18c>)
 8001a56:	484f      	ldr	r0, [pc, #316]	; (8001b94 <Path_Solver+0x190>)
 8001a58:	f009 ff38 	bl	800b8cc <siprintf>
			lcd_send_cmd(0x80 | 0x40);
 8001a5c:	20c0      	movs	r0, #192	; 0xc0
 8001a5e:	f000 fa13 	bl	8001e88 <lcd_send_cmd>
			lcd_send_string(Last_str);
 8001a62:	484c      	ldr	r0, [pc, #304]	; (8001b94 <Path_Solver+0x190>)
 8001a64:	f000 fac1 	bl	8001fea <lcd_send_string>
			lcd_send_cmd(0x80 | 0x14);
 8001a68:	2094      	movs	r0, #148	; 0x94
 8001a6a:	f000 fa0d 	bl	8001e88 <lcd_send_cmd>
			lcd_send_string(" Submit             ");
 8001a6e:	484a      	ldr	r0, [pc, #296]	; (8001b98 <Path_Solver+0x194>)
 8001a70:	f000 fabb 	bl	8001fea <lcd_send_string>
			lcd_send_cmd(0x80 | 0x54);
 8001a74:	20d4      	movs	r0, #212	; 0xd4
 8001a76:	f000 fa07 	bl	8001e88 <lcd_send_cmd>
			lcd_send_string(" Return to main menu");
 8001a7a:	4848      	ldr	r0, [pc, #288]	; (8001b9c <Path_Solver+0x198>)
 8001a7c:	f000 fab5 	bl	8001fea <lcd_send_string>
			break;
 8001a80:	e07a      	b.n	8001b78 <Path_Solver+0x174>
		case 2:
			sprintf(First_str, " First Point: %2d  ", First_point);
 8001a82:	4b3f      	ldr	r3, [pc, #252]	; (8001b80 <Path_Solver+0x17c>)
 8001a84:	f993 3000 	ldrsb.w	r3, [r3]
 8001a88:	461a      	mov	r2, r3
 8001a8a:	4945      	ldr	r1, [pc, #276]	; (8001ba0 <Path_Solver+0x19c>)
 8001a8c:	483e      	ldr	r0, [pc, #248]	; (8001b88 <Path_Solver+0x184>)
 8001a8e:	f009 ff1d 	bl	800b8cc <siprintf>
			lcd_send_cmd(0x80 | 0x00);
 8001a92:	2080      	movs	r0, #128	; 0x80
 8001a94:	f000 f9f8 	bl	8001e88 <lcd_send_cmd>
			lcd_send_string(First_str);
 8001a98:	483b      	ldr	r0, [pc, #236]	; (8001b88 <Path_Solver+0x184>)
 8001a9a:	f000 faa6 	bl	8001fea <lcd_send_string>
			sprintf(Last_str, ">Last Point: %2d    ", Last_point);
 8001a9e:	4b3b      	ldr	r3, [pc, #236]	; (8001b8c <Path_Solver+0x188>)
 8001aa0:	f993 3000 	ldrsb.w	r3, [r3]
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	493f      	ldr	r1, [pc, #252]	; (8001ba4 <Path_Solver+0x1a0>)
 8001aa8:	483a      	ldr	r0, [pc, #232]	; (8001b94 <Path_Solver+0x190>)
 8001aaa:	f009 ff0f 	bl	800b8cc <siprintf>
			lcd_send_cmd(0x80 | 0x40);
 8001aae:	20c0      	movs	r0, #192	; 0xc0
 8001ab0:	f000 f9ea 	bl	8001e88 <lcd_send_cmd>
			lcd_send_string(Last_str);
 8001ab4:	4837      	ldr	r0, [pc, #220]	; (8001b94 <Path_Solver+0x190>)
 8001ab6:	f000 fa98 	bl	8001fea <lcd_send_string>
			lcd_send_cmd(0x80 | 0x14);
 8001aba:	2094      	movs	r0, #148	; 0x94
 8001abc:	f000 f9e4 	bl	8001e88 <lcd_send_cmd>
			lcd_send_string(" Submit             ");
 8001ac0:	4835      	ldr	r0, [pc, #212]	; (8001b98 <Path_Solver+0x194>)
 8001ac2:	f000 fa92 	bl	8001fea <lcd_send_string>
			lcd_send_cmd(0x80 | 0x54);
 8001ac6:	20d4      	movs	r0, #212	; 0xd4
 8001ac8:	f000 f9de 	bl	8001e88 <lcd_send_cmd>
			lcd_send_string(" Return to main menu");
 8001acc:	4833      	ldr	r0, [pc, #204]	; (8001b9c <Path_Solver+0x198>)
 8001ace:	f000 fa8c 	bl	8001fea <lcd_send_string>
			break;
 8001ad2:	e051      	b.n	8001b78 <Path_Solver+0x174>
		case 3:
			sprintf(First_str, " First Point: %2d  ", First_point);
 8001ad4:	4b2a      	ldr	r3, [pc, #168]	; (8001b80 <Path_Solver+0x17c>)
 8001ad6:	f993 3000 	ldrsb.w	r3, [r3]
 8001ada:	461a      	mov	r2, r3
 8001adc:	4930      	ldr	r1, [pc, #192]	; (8001ba0 <Path_Solver+0x19c>)
 8001ade:	482a      	ldr	r0, [pc, #168]	; (8001b88 <Path_Solver+0x184>)
 8001ae0:	f009 fef4 	bl	800b8cc <siprintf>
			lcd_send_cmd(0x80 | 0x00);
 8001ae4:	2080      	movs	r0, #128	; 0x80
 8001ae6:	f000 f9cf 	bl	8001e88 <lcd_send_cmd>
			lcd_send_string(First_str);
 8001aea:	4827      	ldr	r0, [pc, #156]	; (8001b88 <Path_Solver+0x184>)
 8001aec:	f000 fa7d 	bl	8001fea <lcd_send_string>
			sprintf(Last_str, " Last Point: %2d    ", Last_point);
 8001af0:	4b26      	ldr	r3, [pc, #152]	; (8001b8c <Path_Solver+0x188>)
 8001af2:	f993 3000 	ldrsb.w	r3, [r3]
 8001af6:	461a      	mov	r2, r3
 8001af8:	4925      	ldr	r1, [pc, #148]	; (8001b90 <Path_Solver+0x18c>)
 8001afa:	4826      	ldr	r0, [pc, #152]	; (8001b94 <Path_Solver+0x190>)
 8001afc:	f009 fee6 	bl	800b8cc <siprintf>
			lcd_send_cmd(0x80 | 0x40);
 8001b00:	20c0      	movs	r0, #192	; 0xc0
 8001b02:	f000 f9c1 	bl	8001e88 <lcd_send_cmd>
			lcd_send_string(Last_str);
 8001b06:	4823      	ldr	r0, [pc, #140]	; (8001b94 <Path_Solver+0x190>)
 8001b08:	f000 fa6f 	bl	8001fea <lcd_send_string>
			lcd_send_cmd(0x80 | 0x14);
 8001b0c:	2094      	movs	r0, #148	; 0x94
 8001b0e:	f000 f9bb 	bl	8001e88 <lcd_send_cmd>
			lcd_send_string(">Submit             ");
 8001b12:	4825      	ldr	r0, [pc, #148]	; (8001ba8 <Path_Solver+0x1a4>)
 8001b14:	f000 fa69 	bl	8001fea <lcd_send_string>
			lcd_send_cmd(0x80 | 0x54);
 8001b18:	20d4      	movs	r0, #212	; 0xd4
 8001b1a:	f000 f9b5 	bl	8001e88 <lcd_send_cmd>
			lcd_send_string(" Return to main menu");
 8001b1e:	481f      	ldr	r0, [pc, #124]	; (8001b9c <Path_Solver+0x198>)
 8001b20:	f000 fa63 	bl	8001fea <lcd_send_string>
			break;
 8001b24:	e028      	b.n	8001b78 <Path_Solver+0x174>
		case 4:
			sprintf(First_str, " First Point: %2d   ", First_point);
 8001b26:	4b16      	ldr	r3, [pc, #88]	; (8001b80 <Path_Solver+0x17c>)
 8001b28:	f993 3000 	ldrsb.w	r3, [r3]
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	491f      	ldr	r1, [pc, #124]	; (8001bac <Path_Solver+0x1a8>)
 8001b30:	4815      	ldr	r0, [pc, #84]	; (8001b88 <Path_Solver+0x184>)
 8001b32:	f009 fecb 	bl	800b8cc <siprintf>
			lcd_send_cmd(0x80 | 0x00);
 8001b36:	2080      	movs	r0, #128	; 0x80
 8001b38:	f000 f9a6 	bl	8001e88 <lcd_send_cmd>
			lcd_send_string(First_str);
 8001b3c:	4812      	ldr	r0, [pc, #72]	; (8001b88 <Path_Solver+0x184>)
 8001b3e:	f000 fa54 	bl	8001fea <lcd_send_string>
			sprintf(Last_str, " Last Point: %2d     ", Last_point);
 8001b42:	4b12      	ldr	r3, [pc, #72]	; (8001b8c <Path_Solver+0x188>)
 8001b44:	f993 3000 	ldrsb.w	r3, [r3]
 8001b48:	461a      	mov	r2, r3
 8001b4a:	4919      	ldr	r1, [pc, #100]	; (8001bb0 <Path_Solver+0x1ac>)
 8001b4c:	4811      	ldr	r0, [pc, #68]	; (8001b94 <Path_Solver+0x190>)
 8001b4e:	f009 febd 	bl	800b8cc <siprintf>
			lcd_send_cmd(0x80 | 0x40);
 8001b52:	20c0      	movs	r0, #192	; 0xc0
 8001b54:	f000 f998 	bl	8001e88 <lcd_send_cmd>
			lcd_send_string(Last_str);
 8001b58:	480e      	ldr	r0, [pc, #56]	; (8001b94 <Path_Solver+0x190>)
 8001b5a:	f000 fa46 	bl	8001fea <lcd_send_string>
			lcd_send_cmd(0x80 | 0x14);
 8001b5e:	2094      	movs	r0, #148	; 0x94
 8001b60:	f000 f992 	bl	8001e88 <lcd_send_cmd>
			lcd_send_string(" Submit             ");
 8001b64:	480c      	ldr	r0, [pc, #48]	; (8001b98 <Path_Solver+0x194>)
 8001b66:	f000 fa40 	bl	8001fea <lcd_send_string>
			lcd_send_cmd(0x80 | 0x54);
 8001b6a:	20d4      	movs	r0, #212	; 0xd4
 8001b6c:	f000 f98c 	bl	8001e88 <lcd_send_cmd>
			lcd_send_string(">Return to main menu");
 8001b70:	4810      	ldr	r0, [pc, #64]	; (8001bb4 <Path_Solver+0x1b0>)
 8001b72:	f000 fa3a 	bl	8001fea <lcd_send_string>
			break;
 8001b76:	bf00      	nop
	}
}
 8001b78:	bf00      	nop
 8001b7a:	3708      	adds	r7, #8
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	2000026d 	.word	0x2000026d
 8001b84:	0800f8d0 	.word	0x0800f8d0
 8001b88:	20000330 	.word	0x20000330
 8001b8c:	2000026e 	.word	0x2000026e
 8001b90:	0800f8e4 	.word	0x0800f8e4
 8001b94:	2000031c 	.word	0x2000031c
 8001b98:	0800f8fc 	.word	0x0800f8fc
 8001b9c:	0800f794 	.word	0x0800f794
 8001ba0:	0800f914 	.word	0x0800f914
 8001ba4:	0800f928 	.word	0x0800f928
 8001ba8:	0800f940 	.word	0x0800f940
 8001bac:	0800f958 	.word	0x0800f958
 8001bb0:	0800f970 	.word	0x0800f970
 8001bb4:	0800f7e8 	.word	0x0800f7e8

08001bb8 <Path_show>:
static void Path_show(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af00      	add	r7, sp, #0
	char getPath_str[20];
	GetString(First_point, Last_point, getPath_str);
 8001bbe:	4b10      	ldr	r3, [pc, #64]	; (8001c00 <Path_show+0x48>)
 8001bc0:	f993 3000 	ldrsb.w	r3, [r3]
 8001bc4:	4a0f      	ldr	r2, [pc, #60]	; (8001c04 <Path_show+0x4c>)
 8001bc6:	f992 1000 	ldrsb.w	r1, [r2]
 8001bca:	1d3a      	adds	r2, r7, #4
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f001 f953 	bl	8002e78 <GetString>
	lcd_send_cmd(0x80 | 0x00);
 8001bd2:	2080      	movs	r0, #128	; 0x80
 8001bd4:	f000 f958 	bl	8001e88 <lcd_send_cmd>
	lcd_send_string("Path direction      ");
 8001bd8:	480b      	ldr	r0, [pc, #44]	; (8001c08 <Path_show+0x50>)
 8001bda:	f000 fa06 	bl	8001fea <lcd_send_string>
	lcd_send_cmd(0x80 | 0x40);
 8001bde:	20c0      	movs	r0, #192	; 0xc0
 8001be0:	f000 f952 	bl	8001e88 <lcd_send_cmd>
	lcd_send_string(getPath_str);
 8001be4:	1d3b      	adds	r3, r7, #4
 8001be6:	4618      	mov	r0, r3
 8001be8:	f000 f9ff 	bl	8001fea <lcd_send_string>
	lcd_send_cmd(0x80 | 0x14);
 8001bec:	2094      	movs	r0, #148	; 0x94
 8001bee:	f000 f94b 	bl	8001e88 <lcd_send_cmd>
	lcd_send_string("Press C to return   ");
 8001bf2:	4806      	ldr	r0, [pc, #24]	; (8001c0c <Path_show+0x54>)
 8001bf4:	f000 f9f9 	bl	8001fea <lcd_send_string>
}
 8001bf8:	bf00      	nop
 8001bfa:	3718      	adds	r7, #24
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	2000026d 	.word	0x2000026d
 8001c04:	2000026e 	.word	0x2000026e
 8001c08:	0800f988 	.word	0x0800f988
 8001c0c:	0800f9a0 	.word	0x0800f9a0

08001c10 <executeAction>:
void executeAction(uint8_t line) {
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	71fb      	strb	r3, [r7, #7]
	switch (line) {
 8001c1a:	79fb      	ldrb	r3, [r7, #7]
 8001c1c:	3b01      	subs	r3, #1
 8001c1e:	2b07      	cmp	r3, #7
 8001c20:	f200 8119 	bhi.w	8001e56 <executeAction+0x246>
 8001c24:	a201      	add	r2, pc, #4	; (adr r2, 8001c2c <executeAction+0x1c>)
 8001c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c2a:	bf00      	nop
 8001c2c:	08001c4d 	.word	0x08001c4d
 8001c30:	08001ce5 	.word	0x08001ce5
 8001c34:	08001d77 	.word	0x08001d77
 8001c38:	08001de3 	.word	0x08001de3
 8001c3c:	08001e17 	.word	0x08001e17
 8001c40:	08001e33 	.word	0x08001e33
 8001c44:	08001e3f 	.word	0x08001e3f
 8001c48:	08001e4b 	.word	0x08001e4b
	case 1:
		switch (Menu_type) {
 8001c4c:	4b84      	ldr	r3, [pc, #528]	; (8001e60 <executeAction+0x250>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	3b01      	subs	r3, #1
 8001c52:	2b07      	cmp	r3, #7
 8001c54:	d843      	bhi.n	8001cde <executeAction+0xce>
 8001c56:	a201      	add	r2, pc, #4	; (adr r2, 8001c5c <executeAction+0x4c>)
 8001c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c5c:	08001c7d 	.word	0x08001c7d
 8001c60:	08001cdf 	.word	0x08001cdf
 8001c64:	08001c8b 	.word	0x08001c8b
 8001c68:	08001ca7 	.word	0x08001ca7
 8001c6c:	08001cdf 	.word	0x08001cdf
 8001c70:	08001cdf 	.word	0x08001cdf
 8001c74:	08001cdf 	.word	0x08001cdf
 8001c78:	08001cc3 	.word	0x08001cc3
		case Main_menu:
			cancel_running = 1;
 8001c7c:	4b79      	ldr	r3, [pc, #484]	; (8001e64 <executeAction+0x254>)
 8001c7e:	2201      	movs	r2, #1
 8001c80:	701a      	strb	r2, [r3, #0]
			Menu_type = Running_Process;
 8001c82:	4b77      	ldr	r3, [pc, #476]	; (8001e60 <executeAction+0x250>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	701a      	strb	r2, [r3, #0]
			break;
 8001c88:	e029      	b.n	8001cde <executeAction+0xce>
		case PID_Menu:
			if (Kp_modify_flag == 0) {
 8001c8a:	4b77      	ldr	r3, [pc, #476]	; (8001e68 <executeAction+0x258>)
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d105      	bne.n	8001c9e <executeAction+0x8e>
				Kp_modify_flag = 1;
 8001c92:	4b75      	ldr	r3, [pc, #468]	; (8001e68 <executeAction+0x258>)
 8001c94:	2201      	movs	r2, #1
 8001c96:	701a      	strb	r2, [r3, #0]
				line = 1;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	71fb      	strb	r3, [r7, #7]
			} else {
				Kp_modify_flag = 0;
			}
			break;
 8001c9c:	e01f      	b.n	8001cde <executeAction+0xce>
				Kp_modify_flag = 0;
 8001c9e:	4b72      	ldr	r3, [pc, #456]	; (8001e68 <executeAction+0x258>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	701a      	strb	r2, [r3, #0]
			break;
 8001ca4:	e01b      	b.n	8001cde <executeAction+0xce>
		case Engine_menu:
			if (Left_modify_flag == 0) {
 8001ca6:	4b71      	ldr	r3, [pc, #452]	; (8001e6c <executeAction+0x25c>)
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d105      	bne.n	8001cba <executeAction+0xaa>
				Left_modify_flag = 1;
 8001cae:	4b6f      	ldr	r3, [pc, #444]	; (8001e6c <executeAction+0x25c>)
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	701a      	strb	r2, [r3, #0]
				line = 1;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	71fb      	strb	r3, [r7, #7]
			} else {
				Left_modify_flag = 0;
			}
			break;
 8001cb8:	e011      	b.n	8001cde <executeAction+0xce>
				Left_modify_flag = 0;
 8001cba:	4b6c      	ldr	r3, [pc, #432]	; (8001e6c <executeAction+0x25c>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	701a      	strb	r2, [r3, #0]
			break;
 8001cc0:	e00d      	b.n	8001cde <executeAction+0xce>
		case Path_solver_menu:
			if (First_point_modify_flag == 0){
 8001cc2:	4b6b      	ldr	r3, [pc, #428]	; (8001e70 <executeAction+0x260>)
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d105      	bne.n	8001cd6 <executeAction+0xc6>
				First_point_modify_flag = 1;
 8001cca:	4b69      	ldr	r3, [pc, #420]	; (8001e70 <executeAction+0x260>)
 8001ccc:	2201      	movs	r2, #1
 8001cce:	701a      	strb	r2, [r3, #0]
				line = 1;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	71fb      	strb	r3, [r7, #7]
			}
			else
			{
				First_point_modify_flag = 0;
			}
			break;
 8001cd4:	e002      	b.n	8001cdc <executeAction+0xcc>
				First_point_modify_flag = 0;
 8001cd6:	4b66      	ldr	r3, [pc, #408]	; (8001e70 <executeAction+0x260>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	701a      	strb	r2, [r3, #0]
			break;
 8001cdc:	bf00      	nop
		}

		lcd_clear();
 8001cde:	f000 f933 	bl	8001f48 <lcd_clear>
		break;
 8001ce2:	e0b8      	b.n	8001e56 <executeAction+0x246>

	case 2:
		switch (Menu_type) {
 8001ce4:	4b5e      	ldr	r3, [pc, #376]	; (8001e60 <executeAction+0x250>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	3b01      	subs	r3, #1
 8001cea:	2b07      	cmp	r3, #7
 8001cec:	d840      	bhi.n	8001d70 <executeAction+0x160>
 8001cee:	a201      	add	r2, pc, #4	; (adr r2, 8001cf4 <executeAction+0xe4>)
 8001cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cf4:	08001d15 	.word	0x08001d15
 8001cf8:	08001d71 	.word	0x08001d71
 8001cfc:	08001d1d 	.word	0x08001d1d
 8001d00:	08001d39 	.word	0x08001d39
 8001d04:	08001d71 	.word	0x08001d71
 8001d08:	08001d71 	.word	0x08001d71
 8001d0c:	08001d71 	.word	0x08001d71
 8001d10:	08001d55 	.word	0x08001d55
		case Main_menu:
			Menu_type = Color_Processing;
 8001d14:	4b52      	ldr	r3, [pc, #328]	; (8001e60 <executeAction+0x250>)
 8001d16:	2202      	movs	r2, #2
 8001d18:	701a      	strb	r2, [r3, #0]
			break;
 8001d1a:	e029      	b.n	8001d70 <executeAction+0x160>
		case PID_Menu:
			if (Ki_modify_flag == 0) {
 8001d1c:	4b55      	ldr	r3, [pc, #340]	; (8001e74 <executeAction+0x264>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d105      	bne.n	8001d30 <executeAction+0x120>
				Ki_modify_flag = 1;
 8001d24:	4b53      	ldr	r3, [pc, #332]	; (8001e74 <executeAction+0x264>)
 8001d26:	2201      	movs	r2, #1
 8001d28:	701a      	strb	r2, [r3, #0]
				line = 2;
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	71fb      	strb	r3, [r7, #7]
			} else {
				Ki_modify_flag = 0;
			}
			break;
 8001d2e:	e01f      	b.n	8001d70 <executeAction+0x160>
				Ki_modify_flag = 0;
 8001d30:	4b50      	ldr	r3, [pc, #320]	; (8001e74 <executeAction+0x264>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	701a      	strb	r2, [r3, #0]
			break;
 8001d36:	e01b      	b.n	8001d70 <executeAction+0x160>
		case Engine_menu:
			if (Right_modify_flag == 0) {
 8001d38:	4b4f      	ldr	r3, [pc, #316]	; (8001e78 <executeAction+0x268>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d105      	bne.n	8001d4c <executeAction+0x13c>
				Right_modify_flag = 1;
 8001d40:	4b4d      	ldr	r3, [pc, #308]	; (8001e78 <executeAction+0x268>)
 8001d42:	2201      	movs	r2, #1
 8001d44:	701a      	strb	r2, [r3, #0]
				line = 2;
 8001d46:	2302      	movs	r3, #2
 8001d48:	71fb      	strb	r3, [r7, #7]
			} else {
				Right_modify_flag = 0;
			}
			break;
 8001d4a:	e011      	b.n	8001d70 <executeAction+0x160>
				Right_modify_flag = 0;
 8001d4c:	4b4a      	ldr	r3, [pc, #296]	; (8001e78 <executeAction+0x268>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	701a      	strb	r2, [r3, #0]
			break;
 8001d52:	e00d      	b.n	8001d70 <executeAction+0x160>
		case Path_solver_menu:
			if (Last_point_modify_flag == 0) {
 8001d54:	4b49      	ldr	r3, [pc, #292]	; (8001e7c <executeAction+0x26c>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d105      	bne.n	8001d68 <executeAction+0x158>
				Last_point_modify_flag = 1;
 8001d5c:	4b47      	ldr	r3, [pc, #284]	; (8001e7c <executeAction+0x26c>)
 8001d5e:	2201      	movs	r2, #1
 8001d60:	701a      	strb	r2, [r3, #0]
				line = 2;
 8001d62:	2302      	movs	r3, #2
 8001d64:	71fb      	strb	r3, [r7, #7]
			} else {
				Last_point_modify_flag = 0;
			}
			break;
 8001d66:	e002      	b.n	8001d6e <executeAction+0x15e>
				Last_point_modify_flag = 0;
 8001d68:	4b44      	ldr	r3, [pc, #272]	; (8001e7c <executeAction+0x26c>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	701a      	strb	r2, [r3, #0]
			break;
 8001d6e:	bf00      	nop
		}

		lcd_clear();
 8001d70:	f000 f8ea 	bl	8001f48 <lcd_clear>
		break;
 8001d74:	e06f      	b.n	8001e56 <executeAction+0x246>

	case 3:
		switch (Menu_type) {
 8001d76:	4b3a      	ldr	r3, [pc, #232]	; (8001e60 <executeAction+0x250>)
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	2b07      	cmp	r3, #7
 8001d7e:	d82d      	bhi.n	8001ddc <executeAction+0x1cc>
 8001d80:	a201      	add	r2, pc, #4	; (adr r2, 8001d88 <executeAction+0x178>)
 8001d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d86:	bf00      	nop
 8001d88:	08001da9 	.word	0x08001da9
 8001d8c:	08001ddd 	.word	0x08001ddd
 8001d90:	08001db1 	.word	0x08001db1
 8001d94:	08001dcd 	.word	0x08001dcd
 8001d98:	08001ddd 	.word	0x08001ddd
 8001d9c:	08001ddd 	.word	0x08001ddd
 8001da0:	08001ddd 	.word	0x08001ddd
 8001da4:	08001dd5 	.word	0x08001dd5
		case Main_menu:
			Menu_type = PID_Menu;
 8001da8:	4b2d      	ldr	r3, [pc, #180]	; (8001e60 <executeAction+0x250>)
 8001daa:	2203      	movs	r2, #3
 8001dac:	701a      	strb	r2, [r3, #0]
			break;
 8001dae:	e015      	b.n	8001ddc <executeAction+0x1cc>
		case PID_Menu:
			if (Kd_modify_flag == 0) {
 8001db0:	4b33      	ldr	r3, [pc, #204]	; (8001e80 <executeAction+0x270>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d105      	bne.n	8001dc4 <executeAction+0x1b4>
				Kd_modify_flag = 1;
 8001db8:	4b31      	ldr	r3, [pc, #196]	; (8001e80 <executeAction+0x270>)
 8001dba:	2201      	movs	r2, #1
 8001dbc:	701a      	strb	r2, [r3, #0]
				line = 3;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	71fb      	strb	r3, [r7, #7]
			} else {
				Kd_modify_flag = 0;
			}
			break;
 8001dc2:	e00b      	b.n	8001ddc <executeAction+0x1cc>
				Kd_modify_flag = 0;
 8001dc4:	4b2e      	ldr	r3, [pc, #184]	; (8001e80 <executeAction+0x270>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	701a      	strb	r2, [r3, #0]
			break;
 8001dca:	e007      	b.n	8001ddc <executeAction+0x1cc>
		case Engine_menu:
			Menu_type = Main_menu;
 8001dcc:	4b24      	ldr	r3, [pc, #144]	; (8001e60 <executeAction+0x250>)
 8001dce:	2201      	movs	r2, #1
 8001dd0:	701a      	strb	r2, [r3, #0]
			break;
 8001dd2:	e003      	b.n	8001ddc <executeAction+0x1cc>
		case Path_solver_menu:
			Menu_type = Path_show_menu;
 8001dd4:	4b22      	ldr	r3, [pc, #136]	; (8001e60 <executeAction+0x250>)
 8001dd6:	2209      	movs	r2, #9
 8001dd8:	701a      	strb	r2, [r3, #0]
			break;
 8001dda:	bf00      	nop
		}

		lcd_clear();
 8001ddc:	f000 f8b4 	bl	8001f48 <lcd_clear>
		break;
 8001de0:	e039      	b.n	8001e56 <executeAction+0x246>

	case 4:
		switch (Menu_type) {
 8001de2:	4b1f      	ldr	r3, [pc, #124]	; (8001e60 <executeAction+0x250>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	2b08      	cmp	r3, #8
 8001de8:	d00e      	beq.n	8001e08 <executeAction+0x1f8>
 8001dea:	2b08      	cmp	r3, #8
 8001dec:	dc10      	bgt.n	8001e10 <executeAction+0x200>
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d002      	beq.n	8001df8 <executeAction+0x1e8>
 8001df2:	2b03      	cmp	r3, #3
 8001df4:	d004      	beq.n	8001e00 <executeAction+0x1f0>
 8001df6:	e00b      	b.n	8001e10 <executeAction+0x200>
		case Main_menu:
			Menu_type = Engine_menu;
 8001df8:	4b19      	ldr	r3, [pc, #100]	; (8001e60 <executeAction+0x250>)
 8001dfa:	2204      	movs	r2, #4
 8001dfc:	701a      	strb	r2, [r3, #0]
			break;
 8001dfe:	e007      	b.n	8001e10 <executeAction+0x200>
		case PID_Menu:
			Menu_type = Main_menu;
 8001e00:	4b17      	ldr	r3, [pc, #92]	; (8001e60 <executeAction+0x250>)
 8001e02:	2201      	movs	r2, #1
 8001e04:	701a      	strb	r2, [r3, #0]
			break;
 8001e06:	e003      	b.n	8001e10 <executeAction+0x200>
		case Path_solver_menu:
			Menu_type = Main_menu;
 8001e08:	4b15      	ldr	r3, [pc, #84]	; (8001e60 <executeAction+0x250>)
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	701a      	strb	r2, [r3, #0]
			break;
 8001e0e:	bf00      	nop
		}
		lcd_clear();
 8001e10:	f000 f89a 	bl	8001f48 <lcd_clear>
		break;
 8001e14:	e01f      	b.n	8001e56 <executeAction+0x246>

	case 5:
		switch (Menu_type) {
 8001e16:	4b12      	ldr	r3, [pc, #72]	; (8001e60 <executeAction+0x250>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d106      	bne.n	8001e2c <executeAction+0x21c>
		case Main_menu:
			cancel_menu = 1;
 8001e1e:	4b19      	ldr	r3, [pc, #100]	; (8001e84 <executeAction+0x274>)
 8001e20:	2201      	movs	r2, #1
 8001e22:	701a      	strb	r2, [r3, #0]
			Menu_type = LineDetect_Show;
 8001e24:	4b0e      	ldr	r3, [pc, #56]	; (8001e60 <executeAction+0x250>)
 8001e26:	2205      	movs	r2, #5
 8001e28:	701a      	strb	r2, [r3, #0]
			break;
 8001e2a:	bf00      	nop
		}
		lcd_clear();
 8001e2c:	f000 f88c 	bl	8001f48 <lcd_clear>
		break;
 8001e30:	e011      	b.n	8001e56 <executeAction+0x246>

	case 6:
		Menu_type = Saving_process;
 8001e32:	4b0b      	ldr	r3, [pc, #44]	; (8001e60 <executeAction+0x250>)
 8001e34:	2207      	movs	r2, #7
 8001e36:	701a      	strb	r2, [r3, #0]
		lcd_clear();
 8001e38:	f000 f886 	bl	8001f48 <lcd_clear>
		break;
 8001e3c:	e00b      	b.n	8001e56 <executeAction+0x246>

	case 7:
		Menu_type = Wifi_connect;
 8001e3e:	4b08      	ldr	r3, [pc, #32]	; (8001e60 <executeAction+0x250>)
 8001e40:	2206      	movs	r2, #6
 8001e42:	701a      	strb	r2, [r3, #0]
		lcd_clear();
 8001e44:	f000 f880 	bl	8001f48 <lcd_clear>
		break;
 8001e48:	e005      	b.n	8001e56 <executeAction+0x246>

	case 8:
		Menu_type = Path_solver_menu;
 8001e4a:	4b05      	ldr	r3, [pc, #20]	; (8001e60 <executeAction+0x250>)
 8001e4c:	2208      	movs	r2, #8
 8001e4e:	701a      	strb	r2, [r3, #0]
		lcd_clear();
 8001e50:	f000 f87a 	bl	8001f48 <lcd_clear>
		break;
 8001e54:	bf00      	nop
	}
}
 8001e56:	bf00      	nop
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	20000001 	.word	0x20000001
 8001e64:	20000006 	.word	0x20000006
 8001e68:	20000265 	.word	0x20000265
 8001e6c:	20000268 	.word	0x20000268
 8001e70:	2000026a 	.word	0x2000026a
 8001e74:	20000266 	.word	0x20000266
 8001e78:	20000269 	.word	0x20000269
 8001e7c:	2000026b 	.word	0x2000026b
 8001e80:	20000267 	.word	0x20000267
 8001e84:	20000005 	.word	0x20000005

08001e88 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c3;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af02      	add	r7, sp, #8
 8001e8e:	4603      	mov	r3, r0
 8001e90:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8001e92:	79fb      	ldrb	r3, [r7, #7]
 8001e94:	f023 030f 	bic.w	r3, r3, #15
 8001e98:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8001e9a:	79fb      	ldrb	r3, [r7, #7]
 8001e9c:	011b      	lsls	r3, r3, #4
 8001e9e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001ea0:	7bfb      	ldrb	r3, [r7, #15]
 8001ea2:	f043 030c 	orr.w	r3, r3, #12
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8001eaa:	7bfb      	ldrb	r3, [r7, #15]
 8001eac:	f043 0308 	orr.w	r3, r3, #8
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001eb4:	7bbb      	ldrb	r3, [r7, #14]
 8001eb6:	f043 030c 	orr.w	r3, r3, #12
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8001ebe:	7bbb      	ldrb	r3, [r7, #14]
 8001ec0:	f043 0308 	orr.w	r3, r3, #8
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c3, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001ec8:	f107 0208 	add.w	r2, r7, #8
 8001ecc:	2364      	movs	r3, #100	; 0x64
 8001ece:	9300      	str	r3, [sp, #0]
 8001ed0:	2304      	movs	r3, #4
 8001ed2:	214e      	movs	r1, #78	; 0x4e
 8001ed4:	4803      	ldr	r0, [pc, #12]	; (8001ee4 <lcd_send_cmd+0x5c>)
 8001ed6:	f005 fcd5 	bl	8007884 <HAL_I2C_Master_Transmit>
}
 8001eda:	bf00      	nop
 8001edc:	3710      	adds	r7, #16
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	200003a8 	.word	0x200003a8

08001ee8 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af02      	add	r7, sp, #8
 8001eee:	4603      	mov	r3, r0
 8001ef0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8001ef2:	79fb      	ldrb	r3, [r7, #7]
 8001ef4:	f023 030f 	bic.w	r3, r3, #15
 8001ef8:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8001efa:	79fb      	ldrb	r3, [r7, #7]
 8001efc:	011b      	lsls	r3, r3, #4
 8001efe:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 8001f00:	7bfb      	ldrb	r3, [r7, #15]
 8001f02:	f043 030d 	orr.w	r3, r3, #13
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 8001f0a:	7bfb      	ldrb	r3, [r7, #15]
 8001f0c:	f043 0309 	orr.w	r3, r3, #9
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 8001f14:	7bbb      	ldrb	r3, [r7, #14]
 8001f16:	f043 030d 	orr.w	r3, r3, #13
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 8001f1e:	7bbb      	ldrb	r3, [r7, #14]
 8001f20:	f043 0309 	orr.w	r3, r3, #9
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c3, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001f28:	f107 0208 	add.w	r2, r7, #8
 8001f2c:	2364      	movs	r3, #100	; 0x64
 8001f2e:	9300      	str	r3, [sp, #0]
 8001f30:	2304      	movs	r3, #4
 8001f32:	214e      	movs	r1, #78	; 0x4e
 8001f34:	4803      	ldr	r0, [pc, #12]	; (8001f44 <lcd_send_data+0x5c>)
 8001f36:	f005 fca5 	bl	8007884 <HAL_I2C_Master_Transmit>
}
 8001f3a:	bf00      	nop
 8001f3c:	3710      	adds	r7, #16
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	200003a8 	.word	0x200003a8

08001f48 <lcd_clear>:

void lcd_clear (void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x00);
 8001f4e:	2000      	movs	r0, #0
 8001f50:	f7ff ff9a 	bl	8001e88 <lcd_send_cmd>
	for (int i=0; i<100; i++)
 8001f54:	2300      	movs	r3, #0
 8001f56:	607b      	str	r3, [r7, #4]
 8001f58:	e005      	b.n	8001f66 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8001f5a:	2020      	movs	r0, #32
 8001f5c:	f7ff ffc4 	bl	8001ee8 <lcd_send_data>
	for (int i=0; i<100; i++)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	3301      	adds	r3, #1
 8001f64:	607b      	str	r3, [r7, #4]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2b63      	cmp	r3, #99	; 0x63
 8001f6a:	ddf6      	ble.n	8001f5a <lcd_clear+0x12>
	}
}
 8001f6c:	bf00      	nop
 8001f6e:	bf00      	nop
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <lcd_init>:

void lcd_init (void)
{
 8001f76:	b580      	push	{r7, lr}
 8001f78:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001f7a:	2032      	movs	r0, #50	; 0x32
 8001f7c:	f003 fef2 	bl	8005d64 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001f80:	2030      	movs	r0, #48	; 0x30
 8001f82:	f7ff ff81 	bl	8001e88 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001f86:	2005      	movs	r0, #5
 8001f88:	f003 feec 	bl	8005d64 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001f8c:	2030      	movs	r0, #48	; 0x30
 8001f8e:	f7ff ff7b 	bl	8001e88 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8001f92:	2001      	movs	r0, #1
 8001f94:	f003 fee6 	bl	8005d64 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001f98:	2030      	movs	r0, #48	; 0x30
 8001f9a:	f7ff ff75 	bl	8001e88 <lcd_send_cmd>
	HAL_Delay(10);
 8001f9e:	200a      	movs	r0, #10
 8001fa0:	f003 fee0 	bl	8005d64 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001fa4:	2020      	movs	r0, #32
 8001fa6:	f7ff ff6f 	bl	8001e88 <lcd_send_cmd>
	HAL_Delay(10);
 8001faa:	200a      	movs	r0, #10
 8001fac:	f003 feda 	bl	8005d64 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001fb0:	2028      	movs	r0, #40	; 0x28
 8001fb2:	f7ff ff69 	bl	8001e88 <lcd_send_cmd>
	HAL_Delay(1);
 8001fb6:	2001      	movs	r0, #1
 8001fb8:	f003 fed4 	bl	8005d64 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001fbc:	2008      	movs	r0, #8
 8001fbe:	f7ff ff63 	bl	8001e88 <lcd_send_cmd>
	HAL_Delay(1);
 8001fc2:	2001      	movs	r0, #1
 8001fc4:	f003 fece 	bl	8005d64 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001fc8:	2001      	movs	r0, #1
 8001fca:	f7ff ff5d 	bl	8001e88 <lcd_send_cmd>
	HAL_Delay(1);
 8001fce:	2001      	movs	r0, #1
 8001fd0:	f003 fec8 	bl	8005d64 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001fd4:	2006      	movs	r0, #6
 8001fd6:	f7ff ff57 	bl	8001e88 <lcd_send_cmd>
	HAL_Delay(1);
 8001fda:	2001      	movs	r0, #1
 8001fdc:	f003 fec2 	bl	8005d64 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001fe0:	200c      	movs	r0, #12
 8001fe2:	f7ff ff51 	bl	8001e88 <lcd_send_cmd>
}
 8001fe6:	bf00      	nop
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b082      	sub	sp, #8
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001ff2:	e006      	b.n	8002002 <lcd_send_string+0x18>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	1c5a      	adds	r2, r3, #1
 8001ff8:	607a      	str	r2, [r7, #4]
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7ff ff73 	bl	8001ee8 <lcd_send_data>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1f4      	bne.n	8001ff4 <lcd_send_string+0xa>
}
 800200a:	bf00      	nop
 800200c:	bf00      	nop
 800200e:	3708      	adds	r7, #8
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <MotorL_EnablePWM>:
 *  Created on: Apr 29, 2021
 *      Author: Duc Thang
 */
#include "HAL_MOTOR_CONTROL.h"
void MotorL_EnablePWM(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8002018:	2108      	movs	r1, #8
 800201a:	4802      	ldr	r0, [pc, #8]	; (8002024 <MotorL_EnablePWM+0x10>)
 800201c:	f006 ffd4 	bl	8008fc8 <HAL_TIM_PWM_Start>
}
 8002020:	bf00      	nop
 8002022:	bd80      	pop	{r7, pc}
 8002024:	20000510 	.word	0x20000510

08002028 <MotorR_EnablePWM>:
void MotorL_DisablePWM(void)
{
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
}
void MotorR_EnablePWM(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800202c:	210c      	movs	r1, #12
 800202e:	4802      	ldr	r0, [pc, #8]	; (8002038 <MotorR_EnablePWM+0x10>)
 8002030:	f006 ffca 	bl	8008fc8 <HAL_TIM_PWM_Start>
}
 8002034:	bf00      	nop
 8002036:	bd80      	pop	{r7, pc}
 8002038:	20000510 	.word	0x20000510

0800203c <MotorL_SetPWM>:
void MotorR_DisablePWM(void)
{
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
}
void MotorL_SetPWM(int32_t PWMVal)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
	if(PWMVal >= 7200)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 800204a:	db03      	blt.n	8002054 <MotorL_SetPWM+0x18>
	{
		PWMVal = 7200;
 800204c:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 8002050:	607b      	str	r3, [r7, #4]
 8002052:	e005      	b.n	8002060 <MotorL_SetPWM+0x24>
	}
	else if(PWMVal <= -7200)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f513 5fe1 	cmn.w	r3, #7200	; 0x1c20
 800205a:	dc01      	bgt.n	8002060 <MotorL_SetPWM+0x24>
	{
		PWMVal = -7200;
 800205c:	4b0f      	ldr	r3, [pc, #60]	; (800209c <MotorL_SetPWM+0x60>)
 800205e:	607b      	str	r3, [r7, #4]
	}
	if(PWMVal >= 0)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2b00      	cmp	r3, #0
 8002064:	db0a      	blt.n	800207c <MotorL_SetPWM+0x40>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8002066:	2200      	movs	r2, #0
 8002068:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800206c:	480c      	ldr	r0, [pc, #48]	; (80020a0 <MotorL_SetPWM+0x64>)
 800206e:	f005 fa93 	bl	8007598 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,PWMVal);
 8002072:	4b0c      	ldr	r3, [pc, #48]	; (80020a4 <MotorL_SetPWM+0x68>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	63da      	str	r2, [r3, #60]	; 0x3c
	else
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,7200+PWMVal);
	}
}
 800207a:	e00b      	b.n	8002094 <MotorL_SetPWM+0x58>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 800207c:	2201      	movs	r2, #1
 800207e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002082:	4807      	ldr	r0, [pc, #28]	; (80020a0 <MotorL_SetPWM+0x64>)
 8002084:	f005 fa88 	bl	8007598 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,7200+PWMVal);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f503 52e1 	add.w	r2, r3, #7200	; 0x1c20
 800208e:	4b05      	ldr	r3, [pc, #20]	; (80020a4 <MotorL_SetPWM+0x68>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002094:	bf00      	nop
 8002096:	3708      	adds	r7, #8
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	ffffe3e0 	.word	0xffffe3e0
 80020a0:	40020400 	.word	0x40020400
 80020a4:	20000510 	.word	0x20000510

080020a8 <MotorR_SetPWM>:
void MotorR_SetPWM(int32_t PWMVal)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
	if(PWMVal >= 7200)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 80020b6:	db03      	blt.n	80020c0 <MotorR_SetPWM+0x18>
	{
		PWMVal = 7200;
 80020b8:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 80020bc:	607b      	str	r3, [r7, #4]
 80020be:	e005      	b.n	80020cc <MotorR_SetPWM+0x24>
	}
	else if(PWMVal <= -7200)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f513 5fe1 	cmn.w	r3, #7200	; 0x1c20
 80020c6:	dc01      	bgt.n	80020cc <MotorR_SetPWM+0x24>
	{
		PWMVal = -7200;
 80020c8:	4b0e      	ldr	r3, [pc, #56]	; (8002104 <MotorR_SetPWM+0x5c>)
 80020ca:	607b      	str	r3, [r7, #4]
	}
	if(PWMVal >= 0)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	db09      	blt.n	80020e6 <MotorR_SetPWM+0x3e>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80020d2:	2200      	movs	r2, #0
 80020d4:	2104      	movs	r1, #4
 80020d6:	480c      	ldr	r0, [pc, #48]	; (8002108 <MotorR_SetPWM+0x60>)
 80020d8:	f005 fa5e 	bl	8007598 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,PWMVal);
 80020dc:	4b0b      	ldr	r3, [pc, #44]	; (800210c <MotorR_SetPWM+0x64>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	641a      	str	r2, [r3, #64]	; 0x40
	else
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,7200+PWMVal);
	}
}
 80020e4:	e00a      	b.n	80020fc <MotorR_SetPWM+0x54>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 80020e6:	2201      	movs	r2, #1
 80020e8:	2104      	movs	r1, #4
 80020ea:	4807      	ldr	r0, [pc, #28]	; (8002108 <MotorR_SetPWM+0x60>)
 80020ec:	f005 fa54 	bl	8007598 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,7200+PWMVal);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f503 52e1 	add.w	r2, r3, #7200	; 0x1c20
 80020f6:	4b05      	ldr	r3, [pc, #20]	; (800210c <MotorR_SetPWM+0x64>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	641a      	str	r2, [r3, #64]	; 0x40
}
 80020fc:	bf00      	nop
 80020fe:	3708      	adds	r7, #8
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	ffffe3e0 	.word	0xffffe3e0
 8002108:	40020400 	.word	0x40020400
 800210c:	20000510 	.word	0x20000510

08002110 <Control_File>:
#include "Matrix_solver.h"
#define max 12
static void Control_File(int A[12][12][12])
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
    for (int8_t i = 0; i < 12; i++)
 8002118:	2300      	movs	r3, #0
 800211a:	73fb      	strb	r3, [r7, #15]
 800211c:	e035      	b.n	800218a <Control_File+0x7a>
        for (int8_t j = 0; j < 12; j++)
 800211e:	2300      	movs	r3, #0
 8002120:	73bb      	strb	r3, [r7, #14]
 8002122:	e028      	b.n	8002176 <Control_File+0x66>
            for (int8_t k = 0; k < 5; k++)
 8002124:	2300      	movs	r3, #0
 8002126:	737b      	strb	r3, [r7, #13]
 8002128:	e01b      	b.n	8002162 <Control_File+0x52>
                A[i][j][k] = -1;
 800212a:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800212e:	4613      	mov	r3, r2
 8002130:	00db      	lsls	r3, r3, #3
 8002132:	4413      	add	r3, r2
 8002134:	019b      	lsls	r3, r3, #6
 8002136:	461a      	mov	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	1899      	adds	r1, r3, r2
 800213c:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8002140:	f997 000d 	ldrsb.w	r0, [r7, #13]
 8002144:	4613      	mov	r3, r2
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	4413      	add	r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	4403      	add	r3, r0
 800214e:	f04f 32ff 	mov.w	r2, #4294967295
 8002152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            for (int8_t k = 0; k < 5; k++)
 8002156:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800215a:	b2db      	uxtb	r3, r3
 800215c:	3301      	adds	r3, #1
 800215e:	b2db      	uxtb	r3, r3
 8002160:	737b      	strb	r3, [r7, #13]
 8002162:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002166:	2b04      	cmp	r3, #4
 8002168:	dddf      	ble.n	800212a <Control_File+0x1a>
        for (int8_t j = 0; j < 12; j++)
 800216a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800216e:	b2db      	uxtb	r3, r3
 8002170:	3301      	adds	r3, #1
 8002172:	b2db      	uxtb	r3, r3
 8002174:	73bb      	strb	r3, [r7, #14]
 8002176:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800217a:	2b0b      	cmp	r3, #11
 800217c:	ddd2      	ble.n	8002124 <Control_File+0x14>
    for (int8_t i = 0; i < 12; i++)
 800217e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002182:	b2db      	uxtb	r3, r3
 8002184:	3301      	adds	r3, #1
 8002186:	b2db      	uxtb	r3, r3
 8002188:	73fb      	strb	r3, [r7, #15]
 800218a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800218e:	2b0b      	cmp	r3, #11
 8002190:	ddc5      	ble.n	800211e <Control_File+0xe>
    //A[][][]=5;

    //di thang
    A[0][1][7] = 0;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	64da      	str	r2, [r3, #76]	; 0x4c
    A[1][0][2] = 0;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800219e:	2200      	movs	r2, #0
 80021a0:	609a      	str	r2, [r3, #8]
    A[2][3][1] = 0;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 80021a8:	2200      	movs	r2, #0
 80021aa:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    A[3][2][4] = 0;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f503 63d8 	add.w	r3, r3, #1728	; 0x6c0
 80021b4:	2200      	movs	r2, #0
 80021b6:	671a      	str	r2, [r3, #112]	; 0x70
    A[4][5][3] = 0;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021be:	2200      	movs	r2, #0
 80021c0:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
    A[5][4][6] = 0;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f503 6334 	add.w	r3, r3, #2880	; 0xb40
 80021ca:	2200      	movs	r2, #0
 80021cc:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
    A[6][7][5] = 0;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f503 6358 	add.w	r3, r3, #3456	; 0xd80
 80021d6:	2200      	movs	r2, #0
 80021d8:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
    A[7][6][0] = 0;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f503 637c 	add.w	r3, r3, #4032	; 0xfc0
 80021e2:	2200      	movs	r2, #0
 80021e4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    A[8][9][6] = 0;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80021ee:	2200      	movs	r2, #0
 80021f0:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
    A[8][9][7] = 0;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80021fa:	2200      	movs	r2, #0
 80021fc:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
    A[9][8][2] = 0;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8002206:	2200      	movs	r2, #0
 8002208:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    A[9][8][3] = 0;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8002212:	2200      	movs	r2, #0
 8002214:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    A[10][11][0] = 0;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 800221e:	2200      	movs	r2, #0
 8002220:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
    A[10][11][1] = 0;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 800222a:	2200      	movs	r2, #0
 800222c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    A[11][10][4] = 0;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 8002236:	2200      	movs	r2, #0
 8002238:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
    A[11][10][5] = 0;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 8002242:	2200      	movs	r2, #0
 8002244:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4

    //quay 180 đi thẳng
    A[0][1][10] = 1;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	659a      	str	r2, [r3, #88]	; 0x58
    A[0][1][1] = 1;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2201      	movs	r2, #1
 8002252:	635a      	str	r2, [r3, #52]	; 0x34
    A[1][0][0] = 1;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800225a:	2201      	movs	r2, #1
 800225c:	601a      	str	r2, [r3, #0]
    A[1][0][10] = 1;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8002264:	2201      	movs	r2, #1
 8002266:	629a      	str	r2, [r3, #40]	; 0x28
    A[2][3][3] = 1;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 800226e:	2201      	movs	r2, #1
 8002270:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    A[2][3][9] = 1;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 800227a:	2201      	movs	r2, #1
 800227c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    A[3][2][9] = 1;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f503 63d8 	add.w	r3, r3, #1728	; 0x6c0
 8002286:	2201      	movs	r2, #1
 8002288:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    A[3][2][2] = 1;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f503 63d8 	add.w	r3, r3, #1728	; 0x6c0
 8002292:	2201      	movs	r2, #1
 8002294:	669a      	str	r2, [r3, #104]	; 0x68
    A[4][5][5] = 1;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800229c:	2201      	movs	r2, #1
 800229e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    A[4][5][11] = 1;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022a8:	2201      	movs	r2, #1
 80022aa:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    A[5][4][4] = 1;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f503 6334 	add.w	r3, r3, #2880	; 0xb40
 80022b4:	2201      	movs	r2, #1
 80022b6:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    A[5][4][11] = 1;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f503 6334 	add.w	r3, r3, #2880	; 0xb40
 80022c0:	2201      	movs	r2, #1
 80022c2:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
    A[6][7][7] = 1;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f503 6358 	add.w	r3, r3, #3456	; 0xd80
 80022cc:	2201      	movs	r2, #1
 80022ce:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
    A[6][7][8] = 1;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f503 6358 	add.w	r3, r3, #3456	; 0xd80
 80022d8:	2201      	movs	r2, #1
 80022da:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
    A[7][6][6] = 1;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f503 637c 	add.w	r3, r3, #4032	; 0xfc0
 80022e4:	2201      	movs	r2, #1
 80022e6:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    A[7][6][8] = 1;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f503 637c 	add.w	r3, r3, #4032	; 0xfc0
 80022f0:	2201      	movs	r2, #1
 80022f2:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    A[8][9][10] = 1;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80022fc:	2201      	movs	r2, #1
 80022fe:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
    A[8][9][9] = 1;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002308:	2201      	movs	r2, #1
 800230a:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
    A[8][9][11] = 1;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002314:	2201      	movs	r2, #1
 8002316:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
    A[9][8][8] = 1;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8002320:	2201      	movs	r2, #1
 8002322:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    A[9][8][10] = 1;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 800232c:	2201      	movs	r2, #1
 800232e:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
    A[9][8][11] = 1;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8002338:	2201      	movs	r2, #1
 800233a:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
    A[10][11][8] = 1;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 8002344:	2201      	movs	r2, #1
 8002346:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
    A[10][11][9] = 1;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 8002350:	2201      	movs	r2, #1
 8002352:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
    A[10][11][11] = 1;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 800235c:	2201      	movs	r2, #1
 800235e:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c
    A[11][10][8] = 1;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 8002368:	2201      	movs	r2, #1
 800236a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    A[11][10][9] = 1;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 8002374:	2201      	movs	r2, #1
 8002376:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    A[11][10][10] = 1;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 8002380:	2201      	movs	r2, #1
 8002382:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208

    //quay 180 đi thẳng
    A[0][10][10] = 2;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2202      	movs	r2, #2
 800238a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
    A[0][10][1] = 2;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2202      	movs	r2, #2
 8002392:	f8c3 21e4 	str.w	r2, [r3, #484]	; 0x1e4
    A[1][2][2] = 2;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800239c:	2202      	movs	r2, #2
 800239e:	669a      	str	r2, [r3, #104]	; 0x68
    A[2][9][9] = 2;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 80023a6:	2202      	movs	r2, #2
 80023a8:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
    A[2][9][3] = 2;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 80023b2:	2202      	movs	r2, #2
 80023b4:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
    A[3][4][4] = 2;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f503 63d8 	add.w	r3, r3, #1728	; 0x6c0
 80023be:	2202      	movs	r2, #2
 80023c0:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    A[4][11][5] = 2;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023ca:	2202      	movs	r2, #2
 80023cc:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
    A[5][6][6] = 2;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f503 6334 	add.w	r3, r3, #2880	; 0xb40
 80023d6:	2202      	movs	r2, #2
 80023d8:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    A[6][8][8] = 2;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f503 6358 	add.w	r3, r3, #3456	; 0xd80
 80023e2:	2202      	movs	r2, #2
 80023e4:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    A[6][8][7] = 2;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f503 6358 	add.w	r3, r3, #3456	; 0xd80
 80023ee:	2202      	movs	r2, #2
 80023f0:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
    A[7][0][0] = 2;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f503 637c 	add.w	r3, r3, #4032	; 0xfc0
 80023fa:	2202      	movs	r2, #2
 80023fc:	601a      	str	r2, [r3, #0]
    A[8][11][9] = 2;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002404:	2202      	movs	r2, #2
 8002406:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
    A[8][11][10] = 2;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002410:	2202      	movs	r2, #2
 8002412:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
    A[8][11][11] = 2;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800241c:	2202      	movs	r2, #2
 800241e:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c
    A[8][7][6] = 2;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002428:	2202      	movs	r2, #2
 800242a:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
    A[8][7][7] = 2;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002434:	2202      	movs	r2, #2
 8002436:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
    A[9][3][2] = 2;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8002440:	2202      	movs	r2, #2
 8002442:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    A[9][3][3] = 2;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 800244c:	2202      	movs	r2, #2
 800244e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    A[9][10][8] = 2;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8002458:	2202      	movs	r2, #2
 800245a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    A[9][10][10] = 2;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8002464:	2202      	movs	r2, #2
 8002466:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
    A[9][10][11] = 2;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8002470:	2202      	movs	r2, #2
 8002472:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
    A[10][1][0] = 2;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 800247c:	2202      	movs	r2, #2
 800247e:	631a      	str	r2, [r3, #48]	; 0x30
    A[10][1][1] = 2;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 8002486:	2202      	movs	r2, #2
 8002488:	635a      	str	r2, [r3, #52]	; 0x34
    A[10][8][8] = 2;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 8002490:	2202      	movs	r2, #2
 8002492:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    A[10][8][9] = 2;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 800249c:	2202      	movs	r2, #2
 800249e:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
    A[10][8][11] = 2;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 80024a8:	2202      	movs	r2, #2
 80024aa:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
    A[11][5][4] = 2;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 80024b4:	2202      	movs	r2, #2
 80024b6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    A[11][5][5] = 2;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 80024c0:	2202      	movs	r2, #2
 80024c2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    A[11][9][8] = 2;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 80024cc:	2202      	movs	r2, #2
 80024ce:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
    A[11][9][9] = 2;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 80024d8:	2202      	movs	r2, #2
 80024da:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
    A[11][9][10] = 2;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 80024e4:	2202      	movs	r2, #2
 80024e6:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8

    //thẳng phải
    A[0][10][7] = 3;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2203      	movs	r2, #3
 80024ee:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
    A[1][2][10] = 3;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80024f8:	2203      	movs	r2, #3
 80024fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    A[1][2][0] = 3;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8002504:	2203      	movs	r2, #3
 8002506:	661a      	str	r2, [r3, #96]	; 0x60
    A[2][9][1] = 3;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 800250e:	2203      	movs	r2, #3
 8002510:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
    A[3][4][9] = 3;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f503 63d8 	add.w	r3, r3, #1728	; 0x6c0
 800251a:	2203      	movs	r2, #3
 800251c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    A[3][4][2] = 3;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f503 63d8 	add.w	r3, r3, #1728	; 0x6c0
 8002526:	2203      	movs	r2, #3
 8002528:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    A[4][11][3] = 3;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002532:	2203      	movs	r2, #3
 8002534:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    A[5][6][4] = 3;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f503 6334 	add.w	r3, r3, #2880	; 0xb40
 800253e:	2203      	movs	r2, #3
 8002540:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    A[5][6][11] = 3;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f503 6334 	add.w	r3, r3, #2880	; 0xb40
 800254a:	2203      	movs	r2, #3
 800254c:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
    A[6][8][5] = 3;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f503 6358 	add.w	r3, r3, #3456	; 0xd80
 8002556:	2203      	movs	r2, #3
 8002558:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    A[7][0][6] = 3;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f503 637c 	add.w	r3, r3, #4032	; 0xfc0
 8002562:	2203      	movs	r2, #3
 8002564:	619a      	str	r2, [r3, #24]
    A[7][0][8] = 3;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f503 637c 	add.w	r3, r3, #4032	; 0xfc0
 800256c:	2203      	movs	r2, #3
 800256e:	621a      	str	r2, [r3, #32]
    A[8][11][6] = 3;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002576:	2203      	movs	r2, #3
 8002578:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
    A[8][11][7] = 3;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002582:	2203      	movs	r2, #3
 8002584:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
    A[8][7][9] = 3;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800258e:	2203      	movs	r2, #3
 8002590:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
    A[8][7][10] = 3;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800259a:	2203      	movs	r2, #3
 800259c:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    A[8][7][11] = 3;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80025a6:	2203      	movs	r2, #3
 80025a8:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    A[9][3][8] = 3;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 80025b2:	2203      	movs	r2, #3
 80025b4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    A[9][3][10] = 3;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 80025be:	2203      	movs	r2, #3
 80025c0:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    A[9][3][11] = 3;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 80025ca:	2203      	movs	r2, #3
 80025cc:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    A[9][10][2] = 3;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 80025d6:	2203      	movs	r2, #3
 80025d8:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
    A[9][10][3] = 3;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 80025e2:	2203      	movs	r2, #3
 80025e4:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
    A[10][1][8] = 3;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 80025ee:	2203      	movs	r2, #3
 80025f0:	651a      	str	r2, [r3, #80]	; 0x50
    A[10][1][9] = 3;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 80025f8:	2203      	movs	r2, #3
 80025fa:	655a      	str	r2, [r3, #84]	; 0x54
    A[10][1][11] = 3;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 8002602:	2203      	movs	r2, #3
 8002604:	65da      	str	r2, [r3, #92]	; 0x5c
    A[10][8][0] = 3;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 800260c:	2203      	movs	r2, #3
 800260e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    A[10][8][1] = 3;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 8002618:	2203      	movs	r2, #3
 800261a:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    A[11][5][8] = 3;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 8002624:	2203      	movs	r2, #3
 8002626:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    A[11][5][9] = 3;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 8002630:	2203      	movs	r2, #3
 8002632:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    A[11][5][10] = 3;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 800263c:	2203      	movs	r2, #3
 800263e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    A[11][9][4] = 3;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 8002648:	2203      	movs	r2, #3
 800264a:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
    A[11][9][5] = 3;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 8002654:	2203      	movs	r2, #3
 8002656:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4

    //thẳng, trái
    A[0][7][10] = 4;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2204      	movs	r2, #4
 800265e:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    A[0][7][1] = 4;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2204      	movs	r2, #4
 8002666:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
    A[1][10][2] = 4;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8002670:	2204      	movs	r2, #4
 8002672:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
    A[2][1][3] = 4;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 800267c:	2204      	movs	r2, #4
 800267e:	63da      	str	r2, [r3, #60]	; 0x3c
    A[2][1][9] = 4;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8002686:	2204      	movs	r2, #4
 8002688:	655a      	str	r2, [r3, #84]	; 0x54
    A[3][9][4] = 4;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f503 63d8 	add.w	r3, r3, #1728	; 0x6c0
 8002690:	2204      	movs	r2, #4
 8002692:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
    A[4][3][11] = 4;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800269c:	2204      	movs	r2, #4
 800269e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    A[4][3][5] = 4;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026a8:	2204      	movs	r2, #4
 80026aa:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    A[5][11][6] = 4;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f503 6334 	add.w	r3, r3, #2880	; 0xb40
 80026b4:	2204      	movs	r2, #4
 80026b6:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
    A[6][5][7] = 4;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f503 6358 	add.w	r3, r3, #3456	; 0xd80
 80026c0:	2204      	movs	r2, #4
 80026c2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    A[6][5][8] = 4;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f503 6358 	add.w	r3, r3, #3456	; 0xd80
 80026cc:	2204      	movs	r2, #4
 80026ce:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    A[7][8][0] = 4;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f503 637c 	add.w	r3, r3, #4032	; 0xfc0
 80026d8:	2204      	movs	r2, #4
 80026da:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    A[8][10][6] = 4;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80026e4:	2204      	movs	r2, #4
 80026e6:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
    A[8][10][7] = 4;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80026f0:	2204      	movs	r2, #4
 80026f2:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
    A[8][6][9] = 4;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80026fc:	2204      	movs	r2, #4
 80026fe:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
    A[8][6][10] = 4;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002708:	2204      	movs	r2, #4
 800270a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    A[8][6][11] = 4;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002714:	2204      	movs	r2, #4
 8002716:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
    A[9][2][8] = 4;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8002720:	2204      	movs	r2, #4
 8002722:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    A[9][2][10] = 4;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 800272c:	2204      	movs	r2, #4
 800272e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    A[9][2][11] = 4;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8002738:	2204      	movs	r2, #4
 800273a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    A[9][11][2] = 4;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8002744:	2204      	movs	r2, #4
 8002746:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
    A[9][11][3] = 4;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 8002750:	2204      	movs	r2, #4
 8002752:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    A[10][0][8] = 4;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 800275c:	2204      	movs	r2, #4
 800275e:	621a      	str	r2, [r3, #32]
    A[10][0][9] = 4;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 8002766:	2204      	movs	r2, #4
 8002768:	625a      	str	r2, [r3, #36]	; 0x24
    A[10][0][11] = 4;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 8002770:	2204      	movs	r2, #4
 8002772:	62da      	str	r2, [r3, #44]	; 0x2c
    A[10][9][0] = 4;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 800277a:	2204      	movs	r2, #4
 800277c:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
    A[10][9][1] = 4;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 8002786:	2204      	movs	r2, #4
 8002788:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
    A[11][4][8] = 4;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 8002792:	2204      	movs	r2, #4
 8002794:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    A[11][4][9] = 4;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 800279e:	2204      	movs	r2, #4
 80027a0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    A[11][4][10] = 4;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 80027aa:	2204      	movs	r2, #4
 80027ac:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    A[11][8][4] = 4;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 80027b6:	2204      	movs	r2, #4
 80027b8:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    A[11][8][5] = 4;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 80027c2:	2204      	movs	r2, #4
 80027c4:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194

    //quay 180, thẳng, trái
    A[0][7][7] = 5;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2205      	movs	r2, #5
 80027cc:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
    A[1][10][10] = 5;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80027d6:	2205      	movs	r2, #5
 80027d8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
    A[1][10][0] = 5;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f503 7310 	add.w	r3, r3, #576	; 0x240
 80027e2:	2205      	movs	r2, #5
 80027e4:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
    A[2][1][1] = 5;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 80027ee:	2205      	movs	r2, #5
 80027f0:	635a      	str	r2, [r3, #52]	; 0x34
    A[3][9][9] = 5;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f503 63d8 	add.w	r3, r3, #1728	; 0x6c0
 80027f8:	2205      	movs	r2, #5
 80027fa:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
    A[3][9][2] = 5;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f503 63d8 	add.w	r3, r3, #1728	; 0x6c0
 8002804:	2205      	movs	r2, #5
 8002806:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
    A[4][3][3] = 5;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002810:	2205      	movs	r2, #5
 8002812:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    A[4][11][11] = 2;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800281c:	2202      	movs	r2, #2
 800281e:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c
    A[5][11][11] = 5;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f503 6334 	add.w	r3, r3, #2880	; 0xb40
 8002828:	2205      	movs	r2, #5
 800282a:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c
    A[5][11][4] = 5;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f503 6334 	add.w	r3, r3, #2880	; 0xb40
 8002834:	2205      	movs	r2, #5
 8002836:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
    A[6][5][5] = 5;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f503 6358 	add.w	r3, r3, #3456	; 0xd80
 8002840:	2205      	movs	r2, #5
 8002842:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    A[7][8][8] = 5;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f503 637c 	add.w	r3, r3, #4032	; 0xfc0
 800284c:	2205      	movs	r2, #5
 800284e:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    A[7][8][6] = 5;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f503 637c 	add.w	r3, r3, #4032	; 0xfc0
 8002858:	2205      	movs	r2, #5
 800285a:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    A[8][10][9] = 5;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002864:	2205      	movs	r2, #5
 8002866:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    A[8][10][10] = 5;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002870:	2205      	movs	r2, #5
 8002872:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
    A[8][10][11] = 5;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800287c:	2205      	movs	r2, #5
 800287e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
    A[8][6][6] = 5;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002888:	2205      	movs	r2, #5
 800288a:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    A[8][6][7] = 5;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002894:	2205      	movs	r2, #5
 8002896:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    A[9][2][2] = 5;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 80028a0:	2205      	movs	r2, #5
 80028a2:	669a      	str	r2, [r3, #104]	; 0x68
    A[9][2][3] = 5;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 80028aa:	2205      	movs	r2, #5
 80028ac:	66da      	str	r2, [r3, #108]	; 0x6c
    A[9][11][8] = 5;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 80028b4:	2205      	movs	r2, #5
 80028b6:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
    A[9][11][10] = 5;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 80028c0:	2205      	movs	r2, #5
 80028c2:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
    A[9][11][11] = 5;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f503 53a2 	add.w	r3, r3, #5184	; 0x1440
 80028cc:	2205      	movs	r2, #5
 80028ce:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c
    A[10][0][0] = 5;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 80028d8:	2205      	movs	r2, #5
 80028da:	601a      	str	r2, [r3, #0]
    A[10][0][1] = 5;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 80028e2:	2205      	movs	r2, #5
 80028e4:	605a      	str	r2, [r3, #4]
    A[10][9][8] = 5;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 80028ec:	2205      	movs	r2, #5
 80028ee:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
    A[10][9][11] = 5;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 80028f8:	2205      	movs	r2, #5
 80028fa:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
    A[10][9][9] = 5;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 8002904:	2205      	movs	r2, #5
 8002906:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
    A[11][4][4] = 5;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 8002910:	2205      	movs	r2, #5
 8002912:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    A[11][4][5] = 5;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 800291c:	2205      	movs	r2, #5
 800291e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    A[11][8][8] = 5;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 8002928:	2205      	movs	r2, #5
 800292a:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    A[11][8][9] = 5;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 8002934:	2205      	movs	r2, #5
 8002936:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
    A[11][8][10] = 5;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f503 53c6 	add.w	r3, r3, #6336	; 0x18c0
 8002940:	2205      	movs	r2, #5
 8002942:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
}
 8002946:	bf00      	nop
 8002948:	3714      	adds	r7, #20
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr

08002952 <Dijkstra>:
static int Dijkstra(int A[12][12], int n, int D, int C, int result[max])
{
 8002952:	b480      	push	{r7}
 8002954:	b0a7      	sub	sp, #156	; 0x9c
 8002956:	af00      	add	r7, sp, #0
 8002958:	60f8      	str	r0, [r7, #12]
 800295a:	60b9      	str	r1, [r7, #8]
 800295c:	607a      	str	r2, [r7, #4]
 800295e:	603b      	str	r3, [r7, #0]
    char DanhDau[max];
    int Nhan[max], Truoc[max], XP, min;
    for (int i = 0; i < n; i++)
 8002960:	2300      	movs	r3, #0
 8002962:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002966:	e01e      	b.n	80029a6 <Dijkstra+0x54>
    {
        Nhan[i] = 999;
 8002968:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002972:	4413      	add	r3, r2
 8002974:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002978:	f843 2c58 	str.w	r2, [r3, #-88]
        DanhDau[i] = 0;
 800297c:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8002980:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002984:	4413      	add	r3, r2
 8002986:	2200      	movs	r2, #0
 8002988:	701a      	strb	r2, [r3, #0]
        Truoc[i] = D;
 800298a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002994:	4413      	add	r3, r2
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	f843 2c88 	str.w	r2, [r3, #-136]
    for (int i = 0; i < n; i++)
 800299c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029a0:	3301      	adds	r3, #1
 80029a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80029a6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	dbdb      	blt.n	8002968 <Dijkstra+0x16>
    }
    Nhan[D] = 0;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80029b8:	4413      	add	r3, r2
 80029ba:	2200      	movs	r2, #0
 80029bc:	f843 2c58 	str.w	r2, [r3, #-88]
    DanhDau[D] = 1;
 80029c0:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4413      	add	r3, r2
 80029c8:	2201      	movs	r2, #1
 80029ca:	701a      	strb	r2, [r3, #0]
    XP = D;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    while (XP != C)
 80029d2:	e0ad      	b.n	8002b30 <Dijkstra+0x1de>
    {
        for (int8_t j = 0; j < n; j++)
 80029d4:	2300      	movs	r3, #0
 80029d6:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
 80029da:	e066      	b.n	8002aaa <Dijkstra+0x158>
            if (A[XP][j] > 0 && Nhan[j] > A[XP][j] + Nhan[XP] && DanhDau[j] == 0)
 80029dc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80029e0:	4613      	mov	r3, r2
 80029e2:	005b      	lsls	r3, r3, #1
 80029e4:	4413      	add	r3, r2
 80029e6:	011b      	lsls	r3, r3, #4
 80029e8:	461a      	mov	r2, r3
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	4413      	add	r3, r2
 80029ee:	f997 208b 	ldrsb.w	r2, [r7, #139]	; 0x8b
 80029f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	dd50      	ble.n	8002a9c <Dijkstra+0x14a>
 80029fa:	f997 308b 	ldrsb.w	r3, [r7, #139]	; 0x8b
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002a04:	4413      	add	r3, r2
 8002a06:	f853 1c58 	ldr.w	r1, [r3, #-88]
 8002a0a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002a0e:	4613      	mov	r3, r2
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	4413      	add	r3, r2
 8002a14:	011b      	lsls	r3, r3, #4
 8002a16:	461a      	mov	r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	f997 208b 	ldrsb.w	r2, [r7, #139]	; 0x8b
 8002a20:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002a24:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8002a2e:	4403      	add	r3, r0
 8002a30:	f853 3c58 	ldr.w	r3, [r3, #-88]
 8002a34:	4413      	add	r3, r2
 8002a36:	4299      	cmp	r1, r3
 8002a38:	dd30      	ble.n	8002a9c <Dijkstra+0x14a>
 8002a3a:	f997 308b 	ldrsb.w	r3, [r7, #139]	; 0x8b
 8002a3e:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002a42:	4413      	add	r3, r2
 8002a44:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d127      	bne.n	8002a9c <Dijkstra+0x14a>
            {
                Nhan[j] = A[XP][j] + Nhan[XP];
 8002a4c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002a50:	4613      	mov	r3, r2
 8002a52:	005b      	lsls	r3, r3, #1
 8002a54:	4413      	add	r3, r2
 8002a56:	011b      	lsls	r3, r3, #4
 8002a58:	461a      	mov	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	f997 208b 	ldrsb.w	r2, [r7, #139]	; 0x8b
 8002a62:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002a66:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002a70:	4413      	add	r3, r2
 8002a72:	f853 2c58 	ldr.w	r2, [r3, #-88]
 8002a76:	f997 308b 	ldrsb.w	r3, [r7, #139]	; 0x8b
 8002a7a:	440a      	add	r2, r1
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8002a82:	440b      	add	r3, r1
 8002a84:	f843 2c58 	str.w	r2, [r3, #-88]
                Truoc[j] = XP;
 8002a88:	f997 308b 	ldrsb.w	r3, [r7, #139]	; 0x8b
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002a92:	4413      	add	r3, r2
 8002a94:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002a98:	f843 2c88 	str.w	r2, [r3, #-136]
        for (int8_t j = 0; j < n; j++)
 8002a9c:	f997 308b 	ldrsb.w	r3, [r7, #139]	; 0x8b
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
 8002aaa:	f997 308b 	ldrsb.w	r3, [r7, #139]	; 0x8b
 8002aae:	68ba      	ldr	r2, [r7, #8]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	dc93      	bgt.n	80029dc <Dijkstra+0x8a>
            }
        min = 999;
 8002ab4:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002ab8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        for (int8_t j = 0; j < n; j++)
 8002abc:	2300      	movs	r3, #0
 8002abe:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
 8002ac2:	e029      	b.n	8002b18 <Dijkstra+0x1c6>
            if (min > Nhan[j] && DanhDau[j] == 0)
 8002ac4:	f997 308a 	ldrsb.w	r3, [r7, #138]	; 0x8a
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002ace:	4413      	add	r3, r2
 8002ad0:	f853 3c58 	ldr.w	r3, [r3, #-88]
 8002ad4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	dd16      	ble.n	8002b0a <Dijkstra+0x1b8>
 8002adc:	f997 308a 	ldrsb.w	r3, [r7, #138]	; 0x8a
 8002ae0:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002ae4:	4413      	add	r3, r2
 8002ae6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d10d      	bne.n	8002b0a <Dijkstra+0x1b8>
            {
                min = Nhan[j];
 8002aee:	f997 308a 	ldrsb.w	r3, [r7, #138]	; 0x8a
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002af8:	4413      	add	r3, r2
 8002afa:	f853 3c58 	ldr.w	r3, [r3, #-88]
 8002afe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                XP = j;
 8002b02:	f997 308a 	ldrsb.w	r3, [r7, #138]	; 0x8a
 8002b06:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        for (int8_t j = 0; j < n; j++)
 8002b0a:	f997 308a 	ldrsb.w	r3, [r7, #138]	; 0x8a
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	3301      	adds	r3, #1
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
 8002b18:	f997 308a 	ldrsb.w	r3, [r7, #138]	; 0x8a
 8002b1c:	68ba      	ldr	r2, [r7, #8]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	dcd0      	bgt.n	8002ac4 <Dijkstra+0x172>
            }
        DanhDau[XP] = 1;
 8002b22:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8002b26:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002b2a:	4413      	add	r3, r2
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	701a      	strb	r2, [r3, #0]
    while (XP != C)
 8002b30:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	f47f af4c 	bne.w	80029d4 <Dijkstra+0x82>
    }
    int lenResult = Nhan[C] + 1;
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002b44:	4413      	add	r3, r2
 8002b46:	f853 3c58 	ldr.w	r3, [r3, #-88]
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	67fb      	str	r3, [r7, #124]	; 0x7c
    int k = Nhan[C];
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002b56:	4413      	add	r3, r2
 8002b58:	f853 3c58 	ldr.w	r3, [r3, #-88]
 8002b5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    result[k--] = C;
 8002b60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b64:	1e5a      	subs	r2, r3, #1
 8002b66:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8002b70:	4413      	add	r3, r2
 8002b72:	683a      	ldr	r2, [r7, #0]
 8002b74:	601a      	str	r2, [r3, #0]
    result[k--] = Truoc[C];
 8002b76:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b7a:	1e5a      	subs	r2, r3, #1
 8002b7c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8002b86:	441a      	add	r2, r3
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8002b90:	440b      	add	r3, r1
 8002b92:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8002b96:	6013      	str	r3, [r2, #0]
    int i = Truoc[C];
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002ba0:	4413      	add	r3, r2
 8002ba2:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8002ba6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    while (i != D)
 8002baa:	e015      	b.n	8002bd8 <Dijkstra+0x286>
    {
        i = Truoc[i];
 8002bac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002bb6:	4413      	add	r3, r2
 8002bb8:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8002bbc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        result[k--] = i;
 8002bc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002bc4:	1e5a      	subs	r2, r3, #1
 8002bc6:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8002bd0:	4413      	add	r3, r2
 8002bd2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002bd6:	601a      	str	r2, [r3, #0]
    while (i != D)
 8002bd8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d1e4      	bne.n	8002bac <Dijkstra+0x25a>
    }
    return lenResult;
 8002be2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	379c      	adds	r7, #156	; 0x9c
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <Control>:
static void Control(int C[12][12][12], char control[6][3], int result[4], int len, char controlArr[12][12], int truoc, int takeResult[4])
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b086      	sub	sp, #24
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	607a      	str	r2, [r7, #4]
 8002bfc:	603b      	str	r3, [r7, #0]
    for (int8_t i = 0; i < len - 1; i++)
 8002bfe:	2300      	movs	r3, #0
 8002c00:	75fb      	strb	r3, [r7, #23]
 8002c02:	e05e      	b.n	8002cc2 <Control+0xd2>
    {
        strcpy(controlArr[i], control[C[result[i]][result[i + 1]][truoc]]);
 8002c04:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	4413      	add	r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	461a      	mov	r2, r3
 8002c12:	6a3b      	ldr	r3, [r7, #32]
 8002c14:	1898      	adds	r0, r3, r2
 8002c16:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	4413      	add	r3, r2
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	461a      	mov	r2, r3
 8002c24:	4613      	mov	r3, r2
 8002c26:	00db      	lsls	r3, r3, #3
 8002c28:	4413      	add	r3, r2
 8002c2a:	019b      	lsls	r3, r3, #6
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	1899      	adds	r1, r3, r2
 8002c32:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c36:	3301      	adds	r3, #1
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	4613      	mov	r3, r2
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	4413      	add	r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c4a:	4413      	add	r3, r2
 8002c4c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002c50:	461a      	mov	r2, r3
 8002c52:	4613      	mov	r3, r2
 8002c54:	005b      	lsls	r3, r3, #1
 8002c56:	4413      	add	r3, r2
 8002c58:	68ba      	ldr	r2, [r7, #8]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	f008 fe64 	bl	800b92a <strcpy>
        // printf("%d", C[result[i]][result[i + 1]][truoc]);
        // printf("\n");
        // printf(control[C[result[i]][result[i + 1]][truoc]]);
        // printf("\n");
        takeResult[i] = C[result[i]][result[i + 1]][truoc];
 8002c62:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	461a      	mov	r2, r3
 8002c70:	4613      	mov	r3, r2
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	4413      	add	r3, r2
 8002c76:	019b      	lsls	r3, r3, #6
 8002c78:	461a      	mov	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	1898      	adds	r0, r3, r2
 8002c7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c82:	3301      	adds	r3, #1
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	4413      	add	r3, r2
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c94:	4419      	add	r1, r3
 8002c96:	4613      	mov	r3, r2
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	4413      	add	r3, r2
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ca0:	4413      	add	r3, r2
 8002ca2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002ca6:	600b      	str	r3, [r1, #0]
        truoc = result[i];
 8002ca8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	627b      	str	r3, [r7, #36]	; 0x24
    for (int8_t i = 0; i < len - 1; i++)
 8002cb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	75fb      	strb	r3, [r7, #23]
 8002cc2:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	db9a      	blt.n	8002c04 <Control+0x14>
    }
}
 8002cce:	bf00      	nop
 8002cd0:	bf00      	nop
 8002cd2:	3718      	adds	r7, #24
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <Solver>:
int8_t Solver(int Dau, int Cuoi, int Truoc, int takeResult[4], int Step[4], int Run_Str[8])
{
 8002cd8:	b5b0      	push	{r4, r5, r7, lr}
 8002cda:	f5ad 5df0 	sub.w	sp, sp, #7680	; 0x1e00
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af04      	add	r7, sp, #16
 8002ce2:	f107 0418 	add.w	r4, r7, #24
 8002ce6:	3c0c      	subs	r4, #12
 8002ce8:	6020      	str	r0, [r4, #0]
 8002cea:	f107 0018 	add.w	r0, r7, #24
 8002cee:	3810      	subs	r0, #16
 8002cf0:	6001      	str	r1, [r0, #0]
 8002cf2:	f107 0118 	add.w	r1, r7, #24
 8002cf6:	3914      	subs	r1, #20
 8002cf8:	600a      	str	r2, [r1, #0]
 8002cfa:	f107 0218 	add.w	r2, r7, #24
 8002cfe:	3a18      	subs	r2, #24
 8002d00:	6013      	str	r3, [r2, #0]
    char controlArr[12][12];
    int A[12][12] = {
 8002d02:	f507 53d9 	add.w	r3, r7, #6944	; 0x1b20
 8002d06:	f103 0304 	add.w	r3, r3, #4
 8002d0a:	4a59      	ldr	r2, [pc, #356]	; (8002e70 <Solver+0x198>)
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	4611      	mov	r1, r2
 8002d10:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002d14:	461a      	mov	r2, r3
 8002d16:	f008 f959 	bl	800afcc <memcpy>
        {0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1},
        {0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1},
        {1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1},
        {0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0}};
    // int result[max];
    char control[6][3] = {"0", "1", "2", "3", "4", "5"};
 8002d1a:	f507 53d8 	add.w	r3, r7, #6912	; 0x1b00
 8002d1e:	f103 0310 	add.w	r3, r3, #16
 8002d22:	4a54      	ldr	r2, [pc, #336]	; (8002e74 <Solver+0x19c>)
 8002d24:	461c      	mov	r4, r3
 8002d26:	4615      	mov	r5, r2
 8002d28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d2c:	682b      	ldr	r3, [r5, #0]
 8002d2e:	8023      	strh	r3, [r4, #0]
    int C[12][12][12];
    Control_File(C);
 8002d30:	f107 0318 	add.w	r3, r7, #24
 8002d34:	3b08      	subs	r3, #8
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7ff f9ea 	bl	8002110 <Control_File>
    int length = Dijkstra(A, 12, Dau, Cuoi, Step);
 8002d3c:	f107 0318 	add.w	r3, r7, #24
 8002d40:	3b10      	subs	r3, #16
 8002d42:	f107 0218 	add.w	r2, r7, #24
 8002d46:	3a0c      	subs	r2, #12
 8002d48:	f507 50d9 	add.w	r0, r7, #6944	; 0x1b20
 8002d4c:	f100 0004 	add.w	r0, r0, #4
 8002d50:	f507 51f0 	add.w	r1, r7, #7680	; 0x1e00
 8002d54:	f101 0108 	add.w	r1, r1, #8
 8002d58:	6809      	ldr	r1, [r1, #0]
 8002d5a:	9100      	str	r1, [sp, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	6812      	ldr	r2, [r2, #0]
 8002d60:	210c      	movs	r1, #12
 8002d62:	f7ff fdf6 	bl	8002952 <Dijkstra>
 8002d66:	f507 53ef 	add.w	r3, r7, #7648	; 0x1de0
 8002d6a:	f103 0314 	add.w	r3, r3, #20
 8002d6e:	6018      	str	r0, [r3, #0]
    Control(C, control, Step, length, controlArr, Truoc, takeResult);
 8002d70:	f507 51d8 	add.w	r1, r7, #6912	; 0x1b00
 8002d74:	f101 0110 	add.w	r1, r1, #16
 8002d78:	f107 0018 	add.w	r0, r7, #24
 8002d7c:	3808      	subs	r0, #8
 8002d7e:	f107 0318 	add.w	r3, r7, #24
 8002d82:	3b18      	subs	r3, #24
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	9302      	str	r3, [sp, #8]
 8002d88:	f107 0318 	add.w	r3, r7, #24
 8002d8c:	3b14      	subs	r3, #20
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	9301      	str	r3, [sp, #4]
 8002d92:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 8002d96:	f103 0304 	add.w	r3, r3, #4
 8002d9a:	9300      	str	r3, [sp, #0]
 8002d9c:	f507 53ef 	add.w	r3, r7, #7648	; 0x1de0
 8002da0:	f103 0314 	add.w	r3, r3, #20
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f507 52f0 	add.w	r2, r7, #7680	; 0x1e00
 8002daa:	f102 0208 	add.w	r2, r2, #8
 8002dae:	6812      	ldr	r2, [r2, #0]
 8002db0:	f7ff ff1e 	bl	8002bf0 <Control>

    Run_Str[0] = 7;
 8002db4:	f507 53f0 	add.w	r3, r7, #7680	; 0x1e00
 8002db8:	f103 030c 	add.w	r3, r3, #12
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2207      	movs	r2, #7
 8002dc0:	601a      	str	r2, [r3, #0]
	Run_Str[1] = takeResult[0];
 8002dc2:	f507 53f0 	add.w	r3, r7, #7680	; 0x1e00
 8002dc6:	f103 030c 	add.w	r3, r3, #12
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	1d1a      	adds	r2, r3, #4
 8002dce:	f107 0318 	add.w	r3, r7, #24
 8002dd2:	3b18      	subs	r3, #24
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	6013      	str	r3, [r2, #0]
	Run_Str[2] = 7;
 8002dda:	f507 53f0 	add.w	r3, r7, #7680	; 0x1e00
 8002dde:	f103 030c 	add.w	r3, r3, #12
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	3308      	adds	r3, #8
 8002de6:	2207      	movs	r2, #7
 8002de8:	601a      	str	r2, [r3, #0]
	Run_Str[3] = takeResult[1];
 8002dea:	f507 53f0 	add.w	r3, r7, #7680	; 0x1e00
 8002dee:	f103 030c 	add.w	r3, r3, #12
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f103 020c 	add.w	r2, r3, #12
 8002df8:	f107 0318 	add.w	r3, r7, #24
 8002dfc:	3b18      	subs	r3, #24
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	6013      	str	r3, [r2, #0]
	Run_Str[4] = 7;
 8002e04:	f507 53f0 	add.w	r3, r7, #7680	; 0x1e00
 8002e08:	f103 030c 	add.w	r3, r3, #12
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	3310      	adds	r3, #16
 8002e10:	2207      	movs	r2, #7
 8002e12:	601a      	str	r2, [r3, #0]
	Run_Str[5] = takeResult[2];
 8002e14:	f507 53f0 	add.w	r3, r7, #7680	; 0x1e00
 8002e18:	f103 030c 	add.w	r3, r3, #12
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f103 0214 	add.w	r2, r3, #20
 8002e22:	f107 0318 	add.w	r3, r7, #24
 8002e26:	3b18      	subs	r3, #24
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	6013      	str	r3, [r2, #0]
	Run_Str[6] = 7;
 8002e2e:	f507 53f0 	add.w	r3, r7, #7680	; 0x1e00
 8002e32:	f103 030c 	add.w	r3, r3, #12
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	3318      	adds	r3, #24
 8002e3a:	2207      	movs	r2, #7
 8002e3c:	601a      	str	r2, [r3, #0]
	Run_Str[7] = takeResult[3];
 8002e3e:	f507 53f0 	add.w	r3, r7, #7680	; 0x1e00
 8002e42:	f103 030c 	add.w	r3, r3, #12
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f103 021c 	add.w	r2, r3, #28
 8002e4c:	f107 0318 	add.w	r3, r7, #24
 8002e50:	3b18      	subs	r3, #24
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	6013      	str	r3, [r2, #0]
    return length;
 8002e58:	f507 53ef 	add.w	r3, r7, #7648	; 0x1de0
 8002e5c:	f103 0314 	add.w	r3, r3, #20
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	b25b      	sxtb	r3, r3
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	f507 57ef 	add.w	r7, r7, #7648	; 0x1de0
 8002e6a:	3718      	adds	r7, #24
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bdb0      	pop	{r4, r5, r7, pc}
 8002e70:	0800f9b8 	.word	0x0800f9b8
 8002e74:	0800fbf8 	.word	0x0800fbf8

08002e78 <GetString>:
void GetString(int8_t Dau,int8_t Cuoi ,char *Result)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b092      	sub	sp, #72	; 0x48
 8002e7c:	af02      	add	r7, sp, #8
 8002e7e:	4603      	mov	r3, r0
 8002e80:	603a      	str	r2, [r7, #0]
 8002e82:	71fb      	strb	r3, [r7, #7]
 8002e84:	460b      	mov	r3, r1
 8002e86:	71bb      	strb	r3, [r7, #6]
    char buffer[5] = {0};
 8002e88:	2300      	movs	r3, #0
 8002e8a:	633b      	str	r3, [r7, #48]	; 0x30
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    char concat_buffer[20] = {0};
 8002e92:	2300      	movs	r3, #0
 8002e94:	61fb      	str	r3, [r7, #28]
 8002e96:	f107 0320 	add.w	r3, r7, #32
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	601a      	str	r2, [r3, #0]
 8002e9e:	605a      	str	r2, [r3, #4]
 8002ea0:	609a      	str	r2, [r3, #8]
 8002ea2:	60da      	str	r2, [r3, #12]
    int getStep[4];
    int length = Solver(Dau,Cuoi,12,0,getStep,0);
 8002ea4:	f997 0007 	ldrsb.w	r0, [r7, #7]
 8002ea8:	f997 1006 	ldrsb.w	r1, [r7, #6]
 8002eac:	2300      	movs	r3, #0
 8002eae:	9301      	str	r3, [sp, #4]
 8002eb0:	f107 030c 	add.w	r3, r7, #12
 8002eb4:	9300      	str	r3, [sp, #0]
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	220c      	movs	r2, #12
 8002eba:	f7ff ff0d 	bl	8002cd8 <Solver>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	63bb      	str	r3, [r7, #56]	; 0x38
    for (int8_t i = 0; i < length; i++)
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8002ec8:	e039      	b.n	8002f3e <GetString+0xc6>
    {
        if (i == length - 1)
 8002eca:	f997 203f 	ldrsb.w	r2, [r7, #63]	; 0x3f
 8002ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d116      	bne.n	8002f04 <GetString+0x8c>
        {
            sprintf(buffer, "%d", getStep[i]);
 8002ed6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002ee0:	4413      	add	r3, r2
 8002ee2:	f853 2c34 	ldr.w	r2, [r3, #-52]
 8002ee6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002eea:	491c      	ldr	r1, [pc, #112]	; (8002f5c <GetString+0xe4>)
 8002eec:	4618      	mov	r0, r3
 8002eee:	f008 fced 	bl	800b8cc <siprintf>
            strcat(concat_buffer, buffer);
 8002ef2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002ef6:	f107 031c 	add.w	r3, r7, #28
 8002efa:	4611      	mov	r1, r2
 8002efc:	4618      	mov	r0, r3
 8002efe:	f008 fd05 	bl	800b90c <strcat>
 8002f02:	e015      	b.n	8002f30 <GetString+0xb8>
        }
        else
        {
            sprintf(buffer, "%d -> ", getStep[i]);
 8002f04:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002f0e:	4413      	add	r3, r2
 8002f10:	f853 2c34 	ldr.w	r2, [r3, #-52]
 8002f14:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002f18:	4911      	ldr	r1, [pc, #68]	; (8002f60 <GetString+0xe8>)
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f008 fcd6 	bl	800b8cc <siprintf>
            strcat(concat_buffer, buffer);
 8002f20:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002f24:	f107 031c 	add.w	r3, r7, #28
 8002f28:	4611      	mov	r1, r2
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f008 fcee 	bl	800b90c <strcat>
    for (int8_t i = 0; i < length; i++)
 8002f30:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	3301      	adds	r3, #1
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8002f3e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002f42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f44:	429a      	cmp	r2, r3
 8002f46:	dcc0      	bgt.n	8002eca <GetString+0x52>
        }
    }
    strcpy(Result, concat_buffer);
 8002f48:	f107 031c 	add.w	r3, r7, #28
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	6838      	ldr	r0, [r7, #0]
 8002f50:	f008 fceb 	bl	800b92a <strcpy>
}
 8002f54:	bf00      	nop
 8002f56:	3740      	adds	r7, #64	; 0x40
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	0800fc0c 	.word	0x0800fc0c
 8002f60:	0800fc10 	.word	0x0800fc10

08002f64 <GetString_Transfer>:
void GetString_Transfer(int8_t Dau,int8_t Cuoi ,char *Result)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b092      	sub	sp, #72	; 0x48
 8002f68:	af02      	add	r7, sp, #8
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	603a      	str	r2, [r7, #0]
 8002f6e:	71fb      	strb	r3, [r7, #7]
 8002f70:	460b      	mov	r3, r1
 8002f72:	71bb      	strb	r3, [r7, #6]
    char buffer[5] = {0};
 8002f74:	2300      	movs	r3, #0
 8002f76:	633b      	str	r3, [r7, #48]	; 0x30
 8002f78:	2300      	movs	r3, #0
 8002f7a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    char concat_buffer[20] = {0};
 8002f7e:	2300      	movs	r3, #0
 8002f80:	61fb      	str	r3, [r7, #28]
 8002f82:	f107 0320 	add.w	r3, r7, #32
 8002f86:	2200      	movs	r2, #0
 8002f88:	601a      	str	r2, [r3, #0]
 8002f8a:	605a      	str	r2, [r3, #4]
 8002f8c:	609a      	str	r2, [r3, #8]
 8002f8e:	60da      	str	r2, [r3, #12]
    int getStep[4];
    int length = Solver(Dau,Cuoi,12,0,getStep,0);
 8002f90:	f997 0007 	ldrsb.w	r0, [r7, #7]
 8002f94:	f997 1006 	ldrsb.w	r1, [r7, #6]
 8002f98:	2300      	movs	r3, #0
 8002f9a:	9301      	str	r3, [sp, #4]
 8002f9c:	f107 030c 	add.w	r3, r7, #12
 8002fa0:	9300      	str	r3, [sp, #0]
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	220c      	movs	r2, #12
 8002fa6:	f7ff fe97 	bl	8002cd8 <Solver>
 8002faa:	4603      	mov	r3, r0
 8002fac:	63bb      	str	r3, [r7, #56]	; 0x38
    for (int8_t i = 0; i < length; i++)
 8002fae:	2300      	movs	r3, #0
 8002fb0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8002fb4:	e039      	b.n	800302a <GetString_Transfer+0xc6>
    {
        if (i == length - 1)
 8002fb6:	f997 203f 	ldrsb.w	r2, [r7, #63]	; 0x3f
 8002fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d116      	bne.n	8002ff0 <GetString_Transfer+0x8c>
        {
            sprintf(buffer, "%d\"", getStep[i]);
 8002fc2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002fcc:	4413      	add	r3, r2
 8002fce:	f853 2c34 	ldr.w	r2, [r3, #-52]
 8002fd2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002fd6:	491c      	ldr	r1, [pc, #112]	; (8003048 <GetString_Transfer+0xe4>)
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f008 fc77 	bl	800b8cc <siprintf>
            strcat(concat_buffer, buffer);
 8002fde:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002fe2:	f107 031c 	add.w	r3, r7, #28
 8002fe6:	4611      	mov	r1, r2
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f008 fc8f 	bl	800b90c <strcat>
 8002fee:	e015      	b.n	800301c <GetString_Transfer+0xb8>
        }
        else
        {
            sprintf(buffer, "%d ", getStep[i]);
 8002ff0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002ffa:	4413      	add	r3, r2
 8002ffc:	f853 2c34 	ldr.w	r2, [r3, #-52]
 8003000:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003004:	4911      	ldr	r1, [pc, #68]	; (800304c <GetString_Transfer+0xe8>)
 8003006:	4618      	mov	r0, r3
 8003008:	f008 fc60 	bl	800b8cc <siprintf>
            strcat(concat_buffer, buffer);
 800300c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003010:	f107 031c 	add.w	r3, r7, #28
 8003014:	4611      	mov	r1, r2
 8003016:	4618      	mov	r0, r3
 8003018:	f008 fc78 	bl	800b90c <strcat>
    for (int8_t i = 0; i < length; i++)
 800301c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8003020:	b2db      	uxtb	r3, r3
 8003022:	3301      	adds	r3, #1
 8003024:	b2db      	uxtb	r3, r3
 8003026:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800302a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800302e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003030:	429a      	cmp	r2, r3
 8003032:	dcc0      	bgt.n	8002fb6 <GetString_Transfer+0x52>
        }
    }
    strcpy(Result, concat_buffer);
 8003034:	f107 031c 	add.w	r3, r7, #28
 8003038:	4619      	mov	r1, r3
 800303a:	6838      	ldr	r0, [r7, #0]
 800303c:	f008 fc75 	bl	800b92a <strcpy>
}
 8003040:	bf00      	nop
 8003042:	3740      	adds	r7, #64	; 0x40
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	0800fc18 	.word	0x0800fc18
 800304c:	0800fc1c 	.word	0x0800fc1c

08003050 <Line_Follower_PID>:
	PWM_Output_R = RPM_R*7200/388 + adder_R;
	return PWM_Output_R;
}
#endif
int16_t Line_Follower_PID (int Setpoint , int Error,PIDController *Car)
{
 8003050:	b480      	push	{r7}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	607a      	str	r2, [r7, #4]
	Car->propotional = Setpoint - Error;
 800305c:	68fa      	ldr	r2, [r7, #12]
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	ee07 3a90 	vmov	s15, r3
 8003066:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	edc3 7a08 	vstr	s15, [r3, #32]
	Car->integral = Car->integral + Error;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	ee07 3a90 	vmov	s15, r3
 800307c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003080:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	Car->derivative = Error - Car->previous_error;
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	ee07 3a90 	vmov	s15, r3
 8003090:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	edd3 7a07 	vldr	s15, [r3, #28]
 800309a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	PID_val = (Car->Kp * Car->propotional) + (Car->Ki * Car->integral) + (Car->Kd * Car->derivative);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	ed93 7a01 	vldr	s14, [r3, #4]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	edd3 7a08 	vldr	s15, [r3, #32]
 80030b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	edd3 6a02 	vldr	s13, [r3, #8]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80030c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	edd3 6a03 	vldr	s13, [r3, #12]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80030d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030e0:	ee17 3a90 	vmov	r3, s15
 80030e4:	b21a      	sxth	r2, r3
 80030e6:	4b09      	ldr	r3, [pc, #36]	; (800310c <Line_Follower_PID+0xbc>)
 80030e8:	801a      	strh	r2, [r3, #0]
	Car->previous_error = Error;
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	ee07 3a90 	vmov	s15, r3
 80030f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	edc3 7a07 	vstr	s15, [r3, #28]
	return PID_val;
 80030fa:	4b04      	ldr	r3, [pc, #16]	; (800310c <Line_Follower_PID+0xbc>)
 80030fc:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8003100:	4618      	mov	r0, r3
 8003102:	3714      	adds	r7, #20
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr
 800310c:	2000034c 	.word	0x2000034c

08003110 <PIDController_Car_Init>:
void PIDController_Car_Init (PIDController *Car){
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
	Car->derivative = 0.0f;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f04f 0200 	mov.w	r2, #0
 800311e:	629a      	str	r2, [r3, #40]	; 0x28
	Car->integral = 0.0f;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f04f 0200 	mov.w	r2, #0
 8003126:	625a      	str	r2, [r3, #36]	; 0x24
	Car->previous_error = 0.0f;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f04f 0200 	mov.w	r2, #0
 800312e:	61da      	str	r2, [r3, #28]
	Car->adder_out = 0.0f;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003136:	bf00      	nop
 8003138:	370c      	adds	r7, #12
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
	...

08003144 <__io_putchar>:
void MFRC522_Halt(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE {
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART2 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 0xFFFF);
 800314c:	1d39      	adds	r1, r7, #4
 800314e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003152:	2201      	movs	r2, #1
 8003154:	4803      	ldr	r0, [pc, #12]	; (8003164 <__io_putchar+0x20>)
 8003156:	f006 ff90 	bl	800a07a <HAL_UART_Transmit>
	return ch;
 800315a:	687b      	ldr	r3, [r7, #4]
}
 800315c:	4618      	mov	r0, r3
 800315e:	3708      	adds	r7, #8
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	200005a0 	.word	0x200005a0

08003168 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b0a0      	sub	sp, #128	; 0x80
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
	strcpy(Rx_Buffer_copied,Rx_Buffer);
 8003170:	49bb      	ldr	r1, [pc, #748]	; (8003460 <HAL_UART_RxCpltCallback+0x2f8>)
 8003172:	48bc      	ldr	r0, [pc, #752]	; (8003464 <HAL_UART_RxCpltCallback+0x2fc>)
 8003174:	f008 fbd9 	bl	800b92a <strcpy>
	char *ID_number  = strtok(Rx_Buffer_copied," ");
 8003178:	49bb      	ldr	r1, [pc, #748]	; (8003468 <HAL_UART_RxCpltCallback+0x300>)
 800317a:	48ba      	ldr	r0, [pc, #744]	; (8003464 <HAL_UART_RxCpltCallback+0x2fc>)
 800317c:	f009 fa6c 	bl	800c658 <strtok>
 8003180:	67f8      	str	r0, [r7, #124]	; 0x7c
	ID = strtod(ID_number,NULL);
 8003182:	2100      	movs	r1, #0
 8003184:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8003186:	f009 fa01 	bl	800c58c <strtod>
 800318a:	ec53 2b10 	vmov	r2, r3, d0
 800318e:	4610      	mov	r0, r2
 8003190:	4619      	mov	r1, r3
 8003192:	f7fd fd11 	bl	8000bb8 <__aeabi_d2uiz>
 8003196:	4603      	mov	r3, r0
 8003198:	b2da      	uxtb	r2, r3
 800319a:	4bb4      	ldr	r3, [pc, #720]	; (800346c <HAL_UART_RxCpltCallback+0x304>)
 800319c:	701a      	strb	r2, [r3, #0]
	if(ID == ID_PID_MESS)
 800319e:	4bb3      	ldr	r3, [pc, #716]	; (800346c <HAL_UART_RxCpltCallback+0x304>)
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d12a      	bne.n	80031fc <HAL_UART_RxCpltCallback+0x94>
	{
		char *Data1 = strtok(NULL," ");
 80031a6:	49b0      	ldr	r1, [pc, #704]	; (8003468 <HAL_UART_RxCpltCallback+0x300>)
 80031a8:	2000      	movs	r0, #0
 80031aa:	f009 fa55 	bl	800c658 <strtok>
 80031ae:	66f8      	str	r0, [r7, #108]	; 0x6c
		char *Data2 = strtok(NULL," ");
 80031b0:	49ad      	ldr	r1, [pc, #692]	; (8003468 <HAL_UART_RxCpltCallback+0x300>)
 80031b2:	2000      	movs	r0, #0
 80031b4:	f009 fa50 	bl	800c658 <strtok>
 80031b8:	66b8      	str	r0, [r7, #104]	; 0x68
		char *Data3 = strtok(NULL,"");
 80031ba:	49ad      	ldr	r1, [pc, #692]	; (8003470 <HAL_UART_RxCpltCallback+0x308>)
 80031bc:	2000      	movs	r0, #0
 80031be:	f009 fa4b 	bl	800c658 <strtok>
 80031c2:	6678      	str	r0, [r7, #100]	; 0x64
		Kp = strtof(Data1,NULL);
 80031c4:	2100      	movs	r1, #0
 80031c6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80031c8:	f009 f9ec 	bl	800c5a4 <strtof>
 80031cc:	eef0 7a40 	vmov.f32	s15, s0
 80031d0:	4ba8      	ldr	r3, [pc, #672]	; (8003474 <HAL_UART_RxCpltCallback+0x30c>)
 80031d2:	edc3 7a00 	vstr	s15, [r3]
		Ki = strtof(Data2,NULL);
 80031d6:	2100      	movs	r1, #0
 80031d8:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80031da:	f009 f9e3 	bl	800c5a4 <strtof>
 80031de:	eef0 7a40 	vmov.f32	s15, s0
 80031e2:	4ba5      	ldr	r3, [pc, #660]	; (8003478 <HAL_UART_RxCpltCallback+0x310>)
 80031e4:	edc3 7a00 	vstr	s15, [r3]
		Kd = strtof(Data3,NULL);
 80031e8:	2100      	movs	r1, #0
 80031ea:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80031ec:	f009 f9da 	bl	800c5a4 <strtof>
 80031f0:	eef0 7a40 	vmov.f32	s15, s0
 80031f4:	4ba1      	ldr	r3, [pc, #644]	; (800347c <HAL_UART_RxCpltCallback+0x314>)
 80031f6:	edc3 7a00 	vstr	s15, [r3]
 80031fa:	e11e      	b.n	800343a <HAL_UART_RxCpltCallback+0x2d2>
	}
	else if(ID == ID_STATUS_MESS)
 80031fc:	4b9b      	ldr	r3, [pc, #620]	; (800346c <HAL_UART_RxCpltCallback+0x304>)
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	2b02      	cmp	r3, #2
 8003202:	d10c      	bne.n	800321e <HAL_UART_RxCpltCallback+0xb6>
	{
		char *Data1 = strtok(NULL," ");
 8003204:	4998      	ldr	r1, [pc, #608]	; (8003468 <HAL_UART_RxCpltCallback+0x300>)
 8003206:	2000      	movs	r0, #0
 8003208:	f009 fa26 	bl	800c658 <strtok>
 800320c:	6738      	str	r0, [r7, #112]	; 0x70
		Status = (uint8_t)atoi(Data1);
 800320e:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8003210:	f007 feae 	bl	800af70 <atoi>
 8003214:	4603      	mov	r3, r0
 8003216:	b2da      	uxtb	r2, r3
 8003218:	4b99      	ldr	r3, [pc, #612]	; (8003480 <HAL_UART_RxCpltCallback+0x318>)
 800321a:	701a      	strb	r2, [r3, #0]
 800321c:	e10d      	b.n	800343a <HAL_UART_RxCpltCallback+0x2d2>
	}
	else if(ID == ID_FIRST_LAST_MESS)
 800321e:	4b93      	ldr	r3, [pc, #588]	; (800346c <HAL_UART_RxCpltCallback+0x304>)
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	2b03      	cmp	r3, #3
 8003224:	d11b      	bne.n	800325e <HAL_UART_RxCpltCallback+0xf6>
	{
		char *Data1 = strtok(NULL," ");
 8003226:	4990      	ldr	r1, [pc, #576]	; (8003468 <HAL_UART_RxCpltCallback+0x300>)
 8003228:	2000      	movs	r0, #0
 800322a:	f009 fa15 	bl	800c658 <strtok>
 800322e:	67b8      	str	r0, [r7, #120]	; 0x78
		char *Data2 = strtok(NULL," ");
 8003230:	498d      	ldr	r1, [pc, #564]	; (8003468 <HAL_UART_RxCpltCallback+0x300>)
 8003232:	2000      	movs	r0, #0
 8003234:	f009 fa10 	bl	800c658 <strtok>
 8003238:	6778      	str	r0, [r7, #116]	; 0x74
		First_point = atoi(Data1);
 800323a:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800323c:	f007 fe98 	bl	800af70 <atoi>
 8003240:	4603      	mov	r3, r0
 8003242:	b25a      	sxtb	r2, r3
 8003244:	4b8f      	ldr	r3, [pc, #572]	; (8003484 <HAL_UART_RxCpltCallback+0x31c>)
 8003246:	701a      	strb	r2, [r3, #0]
		Last_point = atoi(Data2);
 8003248:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800324a:	f007 fe91 	bl	800af70 <atoi>
 800324e:	4603      	mov	r3, r0
 8003250:	b25a      	sxtb	r2, r3
 8003252:	4b8d      	ldr	r3, [pc, #564]	; (8003488 <HAL_UART_RxCpltCallback+0x320>)
 8003254:	701a      	strb	r2, [r3, #0]
		Begin_solving = 1;
 8003256:	4b8d      	ldr	r3, [pc, #564]	; (800348c <HAL_UART_RxCpltCallback+0x324>)
 8003258:	2201      	movs	r2, #1
 800325a:	701a      	strb	r2, [r3, #0]
 800325c:	e0ed      	b.n	800343a <HAL_UART_RxCpltCallback+0x2d2>
	}
	else if(ID == DATA_ERROR_REQ && Trans_flag == DATA_TRANS_EN)
 800325e:	4b83      	ldr	r3, [pc, #524]	; (800346c <HAL_UART_RxCpltCallback+0x304>)
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	2b04      	cmp	r3, #4
 8003264:	d114      	bne.n	8003290 <HAL_UART_RxCpltCallback+0x128>
 8003266:	4b8a      	ldr	r3, [pc, #552]	; (8003490 <HAL_UART_RxCpltCallback+0x328>)
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d110      	bne.n	8003290 <HAL_UART_RxCpltCallback+0x128>
	{
		char Error_Str[4];
		sprintf(Error_Str,"%d",Error_Val);
 800326e:	4b89      	ldr	r3, [pc, #548]	; (8003494 <HAL_UART_RxCpltCallback+0x32c>)
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003276:	4988      	ldr	r1, [pc, #544]	; (8003498 <HAL_UART_RxCpltCallback+0x330>)
 8003278:	4618      	mov	r0, r3
 800327a:	f008 fb27 	bl	800b8cc <siprintf>
		HAL_UART_Transmit(&huart6, Error_Str, sizeof(Error_Str), 5000);
 800327e:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8003282:	f241 3388 	movw	r3, #5000	; 0x1388
 8003286:	2204      	movs	r2, #4
 8003288:	4884      	ldr	r0, [pc, #528]	; (800349c <HAL_UART_RxCpltCallback+0x334>)
 800328a:	f006 fef6 	bl	800a07a <HAL_UART_Transmit>
	{
 800328e:	e0d4      	b.n	800343a <HAL_UART_RxCpltCallback+0x2d2>
	}
	else if(ID == DATA_LEFT_REQ && Trans_flag == DATA_TRANS_EN)
 8003290:	4b76      	ldr	r3, [pc, #472]	; (800346c <HAL_UART_RxCpltCallback+0x304>)
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	2b05      	cmp	r3, #5
 8003296:	d116      	bne.n	80032c6 <HAL_UART_RxCpltCallback+0x15e>
 8003298:	4b7d      	ldr	r3, [pc, #500]	; (8003490 <HAL_UART_RxCpltCallback+0x328>)
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	2b01      	cmp	r3, #1
 800329e:	d112      	bne.n	80032c6 <HAL_UART_RxCpltCallback+0x15e>
	{
		char Speed_Left_Str[5];
		sprintf(Speed_Left_Str,"%d",rateLeft);
 80032a0:	4b7f      	ldr	r3, [pc, #508]	; (80034a0 <HAL_UART_RxCpltCallback+0x338>)
 80032a2:	881b      	ldrh	r3, [r3, #0]
 80032a4:	b21b      	sxth	r3, r3
 80032a6:	461a      	mov	r2, r3
 80032a8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80032ac:	497a      	ldr	r1, [pc, #488]	; (8003498 <HAL_UART_RxCpltCallback+0x330>)
 80032ae:	4618      	mov	r0, r3
 80032b0:	f008 fb0c 	bl	800b8cc <siprintf>
		HAL_UART_Transmit(&huart6, Speed_Left_Str, sizeof(Speed_Left_Str),5000);
 80032b4:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80032b8:	f241 3388 	movw	r3, #5000	; 0x1388
 80032bc:	2205      	movs	r2, #5
 80032be:	4877      	ldr	r0, [pc, #476]	; (800349c <HAL_UART_RxCpltCallback+0x334>)
 80032c0:	f006 fedb 	bl	800a07a <HAL_UART_Transmit>
	{
 80032c4:	e0b9      	b.n	800343a <HAL_UART_RxCpltCallback+0x2d2>
	}
	else if(ID == DATA_RIGHT_REQ && Trans_flag == DATA_TRANS_EN)
 80032c6:	4b69      	ldr	r3, [pc, #420]	; (800346c <HAL_UART_RxCpltCallback+0x304>)
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	2b06      	cmp	r3, #6
 80032cc:	d116      	bne.n	80032fc <HAL_UART_RxCpltCallback+0x194>
 80032ce:	4b70      	ldr	r3, [pc, #448]	; (8003490 <HAL_UART_RxCpltCallback+0x328>)
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d112      	bne.n	80032fc <HAL_UART_RxCpltCallback+0x194>
	{
		char Speed_Right_Str[5];
		sprintf(Speed_Right_Str,"%d",rateRight);
 80032d6:	4b73      	ldr	r3, [pc, #460]	; (80034a4 <HAL_UART_RxCpltCallback+0x33c>)
 80032d8:	881b      	ldrh	r3, [r3, #0]
 80032da:	b21b      	sxth	r3, r3
 80032dc:	461a      	mov	r2, r3
 80032de:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80032e2:	496d      	ldr	r1, [pc, #436]	; (8003498 <HAL_UART_RxCpltCallback+0x330>)
 80032e4:	4618      	mov	r0, r3
 80032e6:	f008 faf1 	bl	800b8cc <siprintf>
		HAL_UART_Transmit(&huart6, Speed_Right_Str, sizeof(Speed_Right_Str), 5000);
 80032ea:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80032ee:	f241 3388 	movw	r3, #5000	; 0x1388
 80032f2:	2205      	movs	r2, #5
 80032f4:	4869      	ldr	r0, [pc, #420]	; (800349c <HAL_UART_RxCpltCallback+0x334>)
 80032f6:	f006 fec0 	bl	800a07a <HAL_UART_Transmit>
	{
 80032fa:	e09e      	b.n	800343a <HAL_UART_RxCpltCallback+0x2d2>
	}
	else if(ID == DATA_PID_REQ)
 80032fc:	4b5b      	ldr	r3, [pc, #364]	; (800346c <HAL_UART_RxCpltCallback+0x304>)
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	2b07      	cmp	r3, #7
 8003302:	d14b      	bne.n	800339c <HAL_UART_RxCpltCallback+0x234>
	{
	  char Kp_string[Kp_Buffer_Size+1],Ki_string[Ki_Buffer_Size+1],Kd_string[Kd_Buffer_Size+1],Final_string[Send_Buffer_Size];
	  memset(Final_string,0,sizeof(Final_string));
 8003304:	f107 0320 	add.w	r3, r7, #32
 8003308:	2216      	movs	r2, #22
 800330a:	2100      	movs	r1, #0
 800330c:	4618      	mov	r0, r3
 800330e:	f007 fe6b 	bl	800afe8 <memset>
	  sprintf(Kp_string,"%06.2f ",Kp);
 8003312:	4b58      	ldr	r3, [pc, #352]	; (8003474 <HAL_UART_RxCpltCallback+0x30c>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4618      	mov	r0, r3
 8003318:	f7fd f91e 	bl	8000558 <__aeabi_f2d>
 800331c:	4602      	mov	r2, r0
 800331e:	460b      	mov	r3, r1
 8003320:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8003324:	4960      	ldr	r1, [pc, #384]	; (80034a8 <HAL_UART_RxCpltCallback+0x340>)
 8003326:	f008 fad1 	bl	800b8cc <siprintf>
	  sprintf(Ki_string,"%06.2f ",Ki);
 800332a:	4b53      	ldr	r3, [pc, #332]	; (8003478 <HAL_UART_RxCpltCallback+0x310>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4618      	mov	r0, r3
 8003330:	f7fd f912 	bl	8000558 <__aeabi_f2d>
 8003334:	4602      	mov	r2, r0
 8003336:	460b      	mov	r3, r1
 8003338:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800333c:	495a      	ldr	r1, [pc, #360]	; (80034a8 <HAL_UART_RxCpltCallback+0x340>)
 800333e:	f008 fac5 	bl	800b8cc <siprintf>
	  sprintf(Kd_string,"%06.2f\"",Kd);
 8003342:	4b4e      	ldr	r3, [pc, #312]	; (800347c <HAL_UART_RxCpltCallback+0x314>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4618      	mov	r0, r3
 8003348:	f7fd f906 	bl	8000558 <__aeabi_f2d>
 800334c:	4602      	mov	r2, r0
 800334e:	460b      	mov	r3, r1
 8003350:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003354:	4955      	ldr	r1, [pc, #340]	; (80034ac <HAL_UART_RxCpltCallback+0x344>)
 8003356:	f008 fab9 	bl	800b8cc <siprintf>
	  strcat(Final_string,Kp_string);
 800335a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800335e:	f107 0320 	add.w	r3, r7, #32
 8003362:	4611      	mov	r1, r2
 8003364:	4618      	mov	r0, r3
 8003366:	f008 fad1 	bl	800b90c <strcat>
	  strcat(Final_string,Ki_string);
 800336a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800336e:	f107 0320 	add.w	r3, r7, #32
 8003372:	4611      	mov	r1, r2
 8003374:	4618      	mov	r0, r3
 8003376:	f008 fac9 	bl	800b90c <strcat>
	  strcat(Final_string,Kd_string);
 800337a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800337e:	f107 0320 	add.w	r3, r7, #32
 8003382:	4611      	mov	r1, r2
 8003384:	4618      	mov	r0, r3
 8003386:	f008 fac1 	bl	800b90c <strcat>
	  HAL_UART_Transmit(&huart6, Final_string, sizeof(Final_string), 10000);
 800338a:	f107 0120 	add.w	r1, r7, #32
 800338e:	f242 7310 	movw	r3, #10000	; 0x2710
 8003392:	2216      	movs	r2, #22
 8003394:	4841      	ldr	r0, [pc, #260]	; (800349c <HAL_UART_RxCpltCallback+0x334>)
 8003396:	f006 fe70 	bl	800a07a <HAL_UART_Transmit>
 800339a:	e04e      	b.n	800343a <HAL_UART_RxCpltCallback+0x2d2>
	}
	else if(ID == DATA_BOOT_REQ)
 800339c:	4b33      	ldr	r3, [pc, #204]	; (800346c <HAL_UART_RxCpltCallback+0x304>)
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	2b08      	cmp	r3, #8
 80033a2:	d10a      	bne.n	80033ba <HAL_UART_RxCpltCallback+0x252>
	{
		char Boot[1] = "1";
 80033a4:	2331      	movs	r3, #49	; 0x31
 80033a6:	773b      	strb	r3, [r7, #28]
		HAL_UART_Transmit(&huart6, Boot, sizeof(Boot), 1000);
 80033a8:	f107 011c 	add.w	r1, r7, #28
 80033ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033b0:	2201      	movs	r2, #1
 80033b2:	483a      	ldr	r0, [pc, #232]	; (800349c <HAL_UART_RxCpltCallback+0x334>)
 80033b4:	f006 fe61 	bl	800a07a <HAL_UART_Transmit>
 80033b8:	e03f      	b.n	800343a <HAL_UART_RxCpltCallback+0x2d2>
	}
	else if(ID == DATA_PATH_REQ)
 80033ba:	4b2c      	ldr	r3, [pc, #176]	; (800346c <HAL_UART_RxCpltCallback+0x304>)
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	2b09      	cmp	r3, #9
 80033c0:	d11a      	bne.n	80033f8 <HAL_UART_RxCpltCallback+0x290>
	{
		char PATH_DIR[15];
		memset(PATH_DIR,0,sizeof(PATH_DIR));
 80033c2:	f107 030c 	add.w	r3, r7, #12
 80033c6:	220f      	movs	r2, #15
 80033c8:	2100      	movs	r1, #0
 80033ca:	4618      	mov	r0, r3
 80033cc:	f007 fe0c 	bl	800afe8 <memset>
		GetString_Transfer(First_point, Last_point, PATH_DIR);
 80033d0:	4b2c      	ldr	r3, [pc, #176]	; (8003484 <HAL_UART_RxCpltCallback+0x31c>)
 80033d2:	f993 3000 	ldrsb.w	r3, [r3]
 80033d6:	4a2c      	ldr	r2, [pc, #176]	; (8003488 <HAL_UART_RxCpltCallback+0x320>)
 80033d8:	f992 1000 	ldrsb.w	r1, [r2]
 80033dc:	f107 020c 	add.w	r2, r7, #12
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7ff fdbf 	bl	8002f64 <GetString_Transfer>
		HAL_UART_Transmit(&huart6, PATH_DIR, sizeof(PATH_DIR), 5000);
 80033e6:	f107 010c 	add.w	r1, r7, #12
 80033ea:	f241 3388 	movw	r3, #5000	; 0x1388
 80033ee:	220f      	movs	r2, #15
 80033f0:	482a      	ldr	r0, [pc, #168]	; (800349c <HAL_UART_RxCpltCallback+0x334>)
 80033f2:	f006 fe42 	bl	800a07a <HAL_UART_Transmit>
 80033f6:	e020      	b.n	800343a <HAL_UART_RxCpltCallback+0x2d2>
	}
	else if(ID == DATA_POINT_REQ)
 80033f8:	4b1c      	ldr	r3, [pc, #112]	; (800346c <HAL_UART_RxCpltCallback+0x304>)
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	2b0a      	cmp	r3, #10
 80033fe:	d111      	bne.n	8003424 <HAL_UART_RxCpltCallback+0x2bc>
	{
		char STATION_ID_str[4];
		sprintf(STATION_ID_str,"%d",STATION_ID);
 8003400:	4b2b      	ldr	r3, [pc, #172]	; (80034b0 <HAL_UART_RxCpltCallback+0x348>)
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	461a      	mov	r2, r3
 8003406:	f107 0308 	add.w	r3, r7, #8
 800340a:	4923      	ldr	r1, [pc, #140]	; (8003498 <HAL_UART_RxCpltCallback+0x330>)
 800340c:	4618      	mov	r0, r3
 800340e:	f008 fa5d 	bl	800b8cc <siprintf>
		HAL_UART_Transmit(&huart6, STATION_ID_str, sizeof(STATION_ID_str), 2000);
 8003412:	f107 0108 	add.w	r1, r7, #8
 8003416:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800341a:	2204      	movs	r2, #4
 800341c:	481f      	ldr	r0, [pc, #124]	; (800349c <HAL_UART_RxCpltCallback+0x334>)
 800341e:	f006 fe2c 	bl	800a07a <HAL_UART_Transmit>
 8003422:	e00a      	b.n	800343a <HAL_UART_RxCpltCallback+0x2d2>
	}
	else if(ID == DATA_RFID_REQ)
 8003424:	4b11      	ldr	r3, [pc, #68]	; (800346c <HAL_UART_RxCpltCallback+0x304>)
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	2b0b      	cmp	r3, #11
 800342a:	d106      	bne.n	800343a <HAL_UART_RxCpltCallback+0x2d2>
	{
		HAL_UART_Transmit(&huart6, RFID_Str,sizeof(RFID_Str),2000);
 800342c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003430:	2214      	movs	r2, #20
 8003432:	4920      	ldr	r1, [pc, #128]	; (80034b4 <HAL_UART_RxCpltCallback+0x34c>)
 8003434:	4819      	ldr	r0, [pc, #100]	; (800349c <HAL_UART_RxCpltCallback+0x334>)
 8003436:	f006 fe20 	bl	800a07a <HAL_UART_Transmit>
	}
	memset(Rx_Buffer_copied,0,sizeof(Rx_Buffer_copied));
 800343a:	2216      	movs	r2, #22
 800343c:	2100      	movs	r1, #0
 800343e:	4809      	ldr	r0, [pc, #36]	; (8003464 <HAL_UART_RxCpltCallback+0x2fc>)
 8003440:	f007 fdd2 	bl	800afe8 <memset>
	memset(Rx_Buffer,0,sizeof(Rx_Buffer));
 8003444:	2216      	movs	r2, #22
 8003446:	2100      	movs	r1, #0
 8003448:	4805      	ldr	r0, [pc, #20]	; (8003460 <HAL_UART_RxCpltCallback+0x2f8>)
 800344a:	f007 fdcd 	bl	800afe8 <memset>
	HAL_UART_Receive_IT(&huart6, Rx_Buffer, RECEIVE_BUFF_SIZE);
 800344e:	2216      	movs	r2, #22
 8003450:	4903      	ldr	r1, [pc, #12]	; (8003460 <HAL_UART_RxCpltCallback+0x2f8>)
 8003452:	4812      	ldr	r0, [pc, #72]	; (800349c <HAL_UART_RxCpltCallback+0x334>)
 8003454:	f006 fea3 	bl	800a19e <HAL_UART_Receive_IT>

}
 8003458:	bf00      	nop
 800345a:	3780      	adds	r7, #128	; 0x80
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	20000674 	.word	0x20000674
 8003464:	200005f0 	.word	0x200005f0
 8003468:	0800fc20 	.word	0x0800fc20
 800346c:	200004a6 	.word	0x200004a6
 8003470:	0800fc24 	.word	0x0800fc24
 8003474:	2000001c 	.word	0x2000001c
 8003478:	20000280 	.word	0x20000280
 800347c:	20000020 	.word	0x20000020
 8003480:	20000007 	.word	0x20000007
 8003484:	2000026d 	.word	0x2000026d
 8003488:	2000026e 	.word	0x2000026e
 800348c:	2000026f 	.word	0x2000026f
 8003490:	2000026c 	.word	0x2000026c
 8003494:	200004c4 	.word	0x200004c4
 8003498:	0800fc28 	.word	0x0800fc28
 800349c:	20000364 	.word	0x20000364
 80034a0:	2000027a 	.word	0x2000027a
 80034a4:	2000027c 	.word	0x2000027c
 80034a8:	0800fc2c 	.word	0x0800fc2c
 80034ac:	0800fc34 	.word	0x0800fc34
 80034b0:	20000270 	.word	0x20000270
 80034b4:	20000024 	.word	0x20000024

080034b8 <Encoder_Read>:

void Encoder_Read()
{
 80034b8:	b480      	push	{r7}
 80034ba:	af00      	add	r7, sp, #0
	countLeft = __HAL_TIM_GET_COUNTER(&htim2);
 80034bc:	4b08      	ldr	r3, [pc, #32]	; (80034e0 <Encoder_Read+0x28>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c2:	b21a      	sxth	r2, r3
 80034c4:	4b07      	ldr	r3, [pc, #28]	; (80034e4 <Encoder_Read+0x2c>)
 80034c6:	801a      	strh	r2, [r3, #0]
	countRight = __HAL_TIM_GET_COUNTER(&htim4);
 80034c8:	4b07      	ldr	r3, [pc, #28]	; (80034e8 <Encoder_Read+0x30>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ce:	b21a      	sxth	r2, r3
 80034d0:	4b06      	ldr	r3, [pc, #24]	; (80034ec <Encoder_Read+0x34>)
 80034d2:	801a      	strh	r2, [r3, #0]
}
 80034d4:	bf00      	nop
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	200006dc 	.word	0x200006dc
 80034e4:	20000272 	.word	0x20000272
 80034e8:	20000454 	.word	0x20000454
 80034ec:	20000274 	.word	0x20000274

080034f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80034f6:	f002 fbc3 	bl	8005c80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80034fa:	f000 f885 	bl	8003608 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80034fe:	f000 fbf1 	bl	8003ce4 <MX_GPIO_Init>
  MX_DMA_Init();
 8003502:	f000 fbcf 	bl	8003ca4 <MX_DMA_Init>
  MX_USART6_UART_Init();
 8003506:	f000 fba3 	bl	8003c50 <MX_USART6_UART_Init>
  MX_TIM2_Init();
 800350a:	f000 f9e3 	bl	80038d4 <MX_TIM2_Init>
  MX_TIM3_Init();
 800350e:	f000 fa35 	bl	800397c <MX_TIM3_Init>
  MX_ADC1_Init();
 8003512:	f000 f8e3 	bl	80036dc <MX_ADC1_Init>
  MX_TIM4_Init();
 8003516:	f000 fa95 	bl	8003a44 <MX_TIM4_Init>
  MX_I2C3_Init();
 800351a:	f000 f977 	bl	800380c <MX_I2C3_Init>
  MX_TIM5_Init();
 800351e:	f000 fae5 	bl	8003aec <MX_TIM5_Init>
  MX_SPI2_Init();
 8003522:	f000 f9a1 	bl	8003868 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8003526:	f000 fb69 	bl	8003bfc <MX_USART1_UART_Init>
  MX_TIM9_Init();
 800352a:	f000 fb2d 	bl	8003b88 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 800352e:	f7fe fd22 	bl	8001f76 <lcd_init>
  MotorL_EnablePWM();
 8003532:	f7fe fd6f 	bl	8002014 <MotorL_EnablePWM>
  MotorR_EnablePWM();
 8003536:	f7fe fd77 	bl	8002028 <MotorR_EnablePWM>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &Sensor_ADC_Value, 6);
 800353a:	2206      	movs	r2, #6
 800353c:	4925      	ldr	r1, [pc, #148]	; (80035d4 <main+0xe4>)
 800353e:	4826      	ldr	r0, [pc, #152]	; (80035d8 <main+0xe8>)
 8003540:	f002 fdb8 	bl	80060b4 <HAL_ADC_Start_DMA>
  HAL_UART_Receive_IT(&huart6, Rx_Buffer, RECEIVE_BUFF_SIZE);
 8003544:	2216      	movs	r2, #22
 8003546:	4925      	ldr	r1, [pc, #148]	; (80035dc <main+0xec>)
 8003548:	4825      	ldr	r0, [pc, #148]	; (80035e0 <main+0xf0>)
 800354a:	f006 fe28 	bl	800a19e <HAL_UART_Receive_IT>
  /*Enable for encoder reading*/
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 800354e:	213c      	movs	r1, #60	; 0x3c
 8003550:	4824      	ldr	r0, [pc, #144]	; (80035e4 <main+0xf4>)
 8003552:	f005 fe8f 	bl	8009274 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8003556:	213c      	movs	r1, #60	; 0x3c
 8003558:	4823      	ldr	r0, [pc, #140]	; (80035e8 <main+0xf8>)
 800355a:	f005 fe8b 	bl	8009274 <HAL_TIM_Encoder_Start_IT>
  PIDController_Car_Init(&Car);
 800355e:	4823      	ldr	r0, [pc, #140]	; (80035ec <main+0xfc>)
 8003560:	f7ff fdd6 	bl	8003110 <PIDController_Car_Init>
  MFRC522_Init();
 8003564:	f001 fe99 	bl	800529a <MFRC522_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		if(LCD_INIT_FLAG == 1)
 8003568:	4b21      	ldr	r3, [pc, #132]	; (80035f0 <main+0x100>)
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	2b01      	cmp	r3, #1
 800356e:	d114      	bne.n	800359a <main+0xaa>
		{
			for(int i = 0; i < 3; i++)
 8003570:	2300      	movs	r3, #0
 8003572:	607b      	str	r3, [r7, #4]
 8003574:	e00b      	b.n	800358e <main+0x9e>
			{
				lcd_init();
 8003576:	f7fe fcfe 	bl	8001f76 <lcd_init>
				HAL_Delay(500);
 800357a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800357e:	f002 fbf1 	bl	8005d64 <HAL_Delay>
				lcd_send_cmd(0);
 8003582:	2000      	movs	r0, #0
 8003584:	f7fe fc80 	bl	8001e88 <lcd_send_cmd>
			for(int i = 0; i < 3; i++)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	3301      	adds	r3, #1
 800358c:	607b      	str	r3, [r7, #4]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2b02      	cmp	r3, #2
 8003592:	ddf0      	ble.n	8003576 <main+0x86>
			}
			LCD_INIT_FLAG = 0;
 8003594:	4b16      	ldr	r3, [pc, #88]	; (80035f0 <main+0x100>)
 8003596:	2200      	movs	r2, #0
 8003598:	701a      	strb	r2, [r3, #0]
		}
		lcd_send_cmd(1);
 800359a:	2001      	movs	r0, #1
 800359c:	f7fe fc74 	bl	8001e88 <lcd_send_cmd>
		while (menu_display)
 80035a0:	e013      	b.n	80035ca <main+0xda>
		{
			Car.Kp = Kp;
 80035a2:	4b14      	ldr	r3, [pc, #80]	; (80035f4 <main+0x104>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a11      	ldr	r2, [pc, #68]	; (80035ec <main+0xfc>)
 80035a8:	6053      	str	r3, [r2, #4]
			Car.Kd = Kd;
 80035aa:	4b13      	ldr	r3, [pc, #76]	; (80035f8 <main+0x108>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a0f      	ldr	r2, [pc, #60]	; (80035ec <main+0xfc>)
 80035b0:	60d3      	str	r3, [r2, #12]
			Menu_system_control(Menu_type, line);
 80035b2:	4b12      	ldr	r3, [pc, #72]	; (80035fc <main+0x10c>)
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	4a12      	ldr	r2, [pc, #72]	; (8003600 <main+0x110>)
 80035b8:	7812      	ldrb	r2, [r2, #0]
 80035ba:	4611      	mov	r1, r2
 80035bc:	4618      	mov	r0, r3
 80035be:	f7fd fd1d 	bl	8000ffc <Menu_system_control>
			ScrollUp();
 80035c2:	f001 f8d1 	bl	8004768 <ScrollUp>
			SelectItem();
 80035c6:	f001 f9ff 	bl	80049c8 <SelectItem>
		while (menu_display)
 80035ca:	4b0e      	ldr	r3, [pc, #56]	; (8003604 <main+0x114>)
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1e7      	bne.n	80035a2 <main+0xb2>
		if(LCD_INIT_FLAG == 1)
 80035d2:	e7c9      	b.n	8003568 <main+0x78>
 80035d4:	200004a8 	.word	0x200004a8
 80035d8:	20000558 	.word	0x20000558
 80035dc:	20000674 	.word	0x20000674
 80035e0:	20000364 	.word	0x20000364
 80035e4:	20000454 	.word	0x20000454
 80035e8:	200006dc 	.word	0x200006dc
 80035ec:	20000038 	.word	0x20000038
 80035f0:	20000008 	.word	0x20000008
 80035f4:	2000001c 	.word	0x2000001c
 80035f8:	20000020 	.word	0x20000020
 80035fc:	20000001 	.word	0x20000001
 8003600:	20000003 	.word	0x20000003
 8003604:	20000000 	.word	0x20000000

08003608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b094      	sub	sp, #80	; 0x50
 800360c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800360e:	f107 0320 	add.w	r3, r7, #32
 8003612:	2230      	movs	r2, #48	; 0x30
 8003614:	2100      	movs	r1, #0
 8003616:	4618      	mov	r0, r3
 8003618:	f007 fce6 	bl	800afe8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800361c:	f107 030c 	add.w	r3, r7, #12
 8003620:	2200      	movs	r2, #0
 8003622:	601a      	str	r2, [r3, #0]
 8003624:	605a      	str	r2, [r3, #4]
 8003626:	609a      	str	r2, [r3, #8]
 8003628:	60da      	str	r2, [r3, #12]
 800362a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800362c:	2300      	movs	r3, #0
 800362e:	60bb      	str	r3, [r7, #8]
 8003630:	4b28      	ldr	r3, [pc, #160]	; (80036d4 <SystemClock_Config+0xcc>)
 8003632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003634:	4a27      	ldr	r2, [pc, #156]	; (80036d4 <SystemClock_Config+0xcc>)
 8003636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800363a:	6413      	str	r3, [r2, #64]	; 0x40
 800363c:	4b25      	ldr	r3, [pc, #148]	; (80036d4 <SystemClock_Config+0xcc>)
 800363e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003644:	60bb      	str	r3, [r7, #8]
 8003646:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003648:	2300      	movs	r3, #0
 800364a:	607b      	str	r3, [r7, #4]
 800364c:	4b22      	ldr	r3, [pc, #136]	; (80036d8 <SystemClock_Config+0xd0>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003654:	4a20      	ldr	r2, [pc, #128]	; (80036d8 <SystemClock_Config+0xd0>)
 8003656:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800365a:	6013      	str	r3, [r2, #0]
 800365c:	4b1e      	ldr	r3, [pc, #120]	; (80036d8 <SystemClock_Config+0xd0>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003664:	607b      	str	r3, [r7, #4]
 8003666:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003668:	2302      	movs	r3, #2
 800366a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800366c:	2301      	movs	r3, #1
 800366e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003670:	2310      	movs	r3, #16
 8003672:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003674:	2302      	movs	r3, #2
 8003676:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003678:	2300      	movs	r3, #0
 800367a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800367c:	2308      	movs	r3, #8
 800367e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8003680:	2348      	movs	r3, #72	; 0x48
 8003682:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003684:	2302      	movs	r3, #2
 8003686:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003688:	2304      	movs	r3, #4
 800368a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800368c:	f107 0320 	add.w	r3, r7, #32
 8003690:	4618      	mov	r0, r3
 8003692:	f004 fbff 	bl	8007e94 <HAL_RCC_OscConfig>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d001      	beq.n	80036a0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800369c:	f001 fba2 	bl	8004de4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80036a0:	230f      	movs	r3, #15
 80036a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80036a4:	2302      	movs	r3, #2
 80036a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80036a8:	2300      	movs	r3, #0
 80036aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80036ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80036b2:	2300      	movs	r3, #0
 80036b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80036b6:	f107 030c 	add.w	r3, r7, #12
 80036ba:	2102      	movs	r1, #2
 80036bc:	4618      	mov	r0, r3
 80036be:	f004 fe61 	bl	8008384 <HAL_RCC_ClockConfig>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d001      	beq.n	80036cc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80036c8:	f001 fb8c 	bl	8004de4 <Error_Handler>
  }
}
 80036cc:	bf00      	nop
 80036ce:	3750      	adds	r7, #80	; 0x50
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	40023800 	.word	0x40023800
 80036d8:	40007000 	.word	0x40007000

080036dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80036e2:	463b      	mov	r3, r7
 80036e4:	2200      	movs	r2, #0
 80036e6:	601a      	str	r2, [r3, #0]
 80036e8:	605a      	str	r2, [r3, #4]
 80036ea:	609a      	str	r2, [r3, #8]
 80036ec:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80036ee:	4b44      	ldr	r3, [pc, #272]	; (8003800 <MX_ADC1_Init+0x124>)
 80036f0:	4a44      	ldr	r2, [pc, #272]	; (8003804 <MX_ADC1_Init+0x128>)
 80036f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80036f4:	4b42      	ldr	r3, [pc, #264]	; (8003800 <MX_ADC1_Init+0x124>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80036fa:	4b41      	ldr	r3, [pc, #260]	; (8003800 <MX_ADC1_Init+0x124>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8003700:	4b3f      	ldr	r3, [pc, #252]	; (8003800 <MX_ADC1_Init+0x124>)
 8003702:	2201      	movs	r2, #1
 8003704:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003706:	4b3e      	ldr	r3, [pc, #248]	; (8003800 <MX_ADC1_Init+0x124>)
 8003708:	2201      	movs	r2, #1
 800370a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800370c:	4b3c      	ldr	r3, [pc, #240]	; (8003800 <MX_ADC1_Init+0x124>)
 800370e:	2200      	movs	r2, #0
 8003710:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003714:	4b3a      	ldr	r3, [pc, #232]	; (8003800 <MX_ADC1_Init+0x124>)
 8003716:	2200      	movs	r2, #0
 8003718:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800371a:	4b39      	ldr	r3, [pc, #228]	; (8003800 <MX_ADC1_Init+0x124>)
 800371c:	4a3a      	ldr	r2, [pc, #232]	; (8003808 <MX_ADC1_Init+0x12c>)
 800371e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003720:	4b37      	ldr	r3, [pc, #220]	; (8003800 <MX_ADC1_Init+0x124>)
 8003722:	2200      	movs	r2, #0
 8003724:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 8003726:	4b36      	ldr	r3, [pc, #216]	; (8003800 <MX_ADC1_Init+0x124>)
 8003728:	2206      	movs	r2, #6
 800372a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800372c:	4b34      	ldr	r3, [pc, #208]	; (8003800 <MX_ADC1_Init+0x124>)
 800372e:	2201      	movs	r2, #1
 8003730:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003734:	4b32      	ldr	r3, [pc, #200]	; (8003800 <MX_ADC1_Init+0x124>)
 8003736:	2201      	movs	r2, #1
 8003738:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800373a:	4831      	ldr	r0, [pc, #196]	; (8003800 <MX_ADC1_Init+0x124>)
 800373c:	f002 fb36 	bl	8005dac <HAL_ADC_Init>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d001      	beq.n	800374a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8003746:	f001 fb4d 	bl	8004de4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800374a:	2302      	movs	r3, #2
 800374c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800374e:	2301      	movs	r3, #1
 8003750:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8003752:	2303      	movs	r3, #3
 8003754:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003756:	463b      	mov	r3, r7
 8003758:	4619      	mov	r1, r3
 800375a:	4829      	ldr	r0, [pc, #164]	; (8003800 <MX_ADC1_Init+0x124>)
 800375c:	f002 fdc2 	bl	80062e4 <HAL_ADC_ConfigChannel>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d001      	beq.n	800376a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8003766:	f001 fb3d 	bl	8004de4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800376a:	2303      	movs	r3, #3
 800376c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800376e:	2302      	movs	r3, #2
 8003770:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003772:	463b      	mov	r3, r7
 8003774:	4619      	mov	r1, r3
 8003776:	4822      	ldr	r0, [pc, #136]	; (8003800 <MX_ADC1_Init+0x124>)
 8003778:	f002 fdb4 	bl	80062e4 <HAL_ADC_ConfigChannel>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d001      	beq.n	8003786 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8003782:	f001 fb2f 	bl	8004de4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8003786:	2304      	movs	r3, #4
 8003788:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800378a:	2303      	movs	r3, #3
 800378c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800378e:	463b      	mov	r3, r7
 8003790:	4619      	mov	r1, r3
 8003792:	481b      	ldr	r0, [pc, #108]	; (8003800 <MX_ADC1_Init+0x124>)
 8003794:	f002 fda6 	bl	80062e4 <HAL_ADC_ConfigChannel>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d001      	beq.n	80037a2 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 800379e:	f001 fb21 	bl	8004de4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80037a2:	2305      	movs	r3, #5
 80037a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80037a6:	2304      	movs	r3, #4
 80037a8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80037aa:	463b      	mov	r3, r7
 80037ac:	4619      	mov	r1, r3
 80037ae:	4814      	ldr	r0, [pc, #80]	; (8003800 <MX_ADC1_Init+0x124>)
 80037b0:	f002 fd98 	bl	80062e4 <HAL_ADC_ConfigChannel>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d001      	beq.n	80037be <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80037ba:	f001 fb13 	bl	8004de4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80037be:	2306      	movs	r3, #6
 80037c0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80037c2:	2305      	movs	r3, #5
 80037c4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80037c6:	463b      	mov	r3, r7
 80037c8:	4619      	mov	r1, r3
 80037ca:	480d      	ldr	r0, [pc, #52]	; (8003800 <MX_ADC1_Init+0x124>)
 80037cc:	f002 fd8a 	bl	80062e4 <HAL_ADC_ConfigChannel>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d001      	beq.n	80037da <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 80037d6:	f001 fb05 	bl	8004de4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80037da:	2307      	movs	r3, #7
 80037dc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80037de:	2306      	movs	r3, #6
 80037e0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80037e2:	463b      	mov	r3, r7
 80037e4:	4619      	mov	r1, r3
 80037e6:	4806      	ldr	r0, [pc, #24]	; (8003800 <MX_ADC1_Init+0x124>)
 80037e8:	f002 fd7c 	bl	80062e4 <HAL_ADC_ConfigChannel>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d001      	beq.n	80037f6 <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 80037f2:	f001 faf7 	bl	8004de4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80037f6:	bf00      	nop
 80037f8:	3710      	adds	r7, #16
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	20000558 	.word	0x20000558
 8003804:	40012000 	.word	0x40012000
 8003808:	0f000001 	.word	0x0f000001

0800380c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003810:	4b12      	ldr	r3, [pc, #72]	; (800385c <MX_I2C3_Init+0x50>)
 8003812:	4a13      	ldr	r2, [pc, #76]	; (8003860 <MX_I2C3_Init+0x54>)
 8003814:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8003816:	4b11      	ldr	r3, [pc, #68]	; (800385c <MX_I2C3_Init+0x50>)
 8003818:	4a12      	ldr	r2, [pc, #72]	; (8003864 <MX_I2C3_Init+0x58>)
 800381a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800381c:	4b0f      	ldr	r3, [pc, #60]	; (800385c <MX_I2C3_Init+0x50>)
 800381e:	2200      	movs	r2, #0
 8003820:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8003822:	4b0e      	ldr	r3, [pc, #56]	; (800385c <MX_I2C3_Init+0x50>)
 8003824:	2200      	movs	r2, #0
 8003826:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003828:	4b0c      	ldr	r3, [pc, #48]	; (800385c <MX_I2C3_Init+0x50>)
 800382a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800382e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003830:	4b0a      	ldr	r3, [pc, #40]	; (800385c <MX_I2C3_Init+0x50>)
 8003832:	2200      	movs	r2, #0
 8003834:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8003836:	4b09      	ldr	r3, [pc, #36]	; (800385c <MX_I2C3_Init+0x50>)
 8003838:	2200      	movs	r2, #0
 800383a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800383c:	4b07      	ldr	r3, [pc, #28]	; (800385c <MX_I2C3_Init+0x50>)
 800383e:	2200      	movs	r2, #0
 8003840:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003842:	4b06      	ldr	r3, [pc, #24]	; (800385c <MX_I2C3_Init+0x50>)
 8003844:	2200      	movs	r2, #0
 8003846:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003848:	4804      	ldr	r0, [pc, #16]	; (800385c <MX_I2C3_Init+0x50>)
 800384a:	f003 fed7 	bl	80075fc <HAL_I2C_Init>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d001      	beq.n	8003858 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8003854:	f001 fac6 	bl	8004de4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003858:	bf00      	nop
 800385a:	bd80      	pop	{r7, pc}
 800385c:	200003a8 	.word	0x200003a8
 8003860:	40005c00 	.word	0x40005c00
 8003864:	000186a0 	.word	0x000186a0

08003868 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800386c:	4b17      	ldr	r3, [pc, #92]	; (80038cc <MX_SPI2_Init+0x64>)
 800386e:	4a18      	ldr	r2, [pc, #96]	; (80038d0 <MX_SPI2_Init+0x68>)
 8003870:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003872:	4b16      	ldr	r3, [pc, #88]	; (80038cc <MX_SPI2_Init+0x64>)
 8003874:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003878:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800387a:	4b14      	ldr	r3, [pc, #80]	; (80038cc <MX_SPI2_Init+0x64>)
 800387c:	2200      	movs	r2, #0
 800387e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003880:	4b12      	ldr	r3, [pc, #72]	; (80038cc <MX_SPI2_Init+0x64>)
 8003882:	2200      	movs	r2, #0
 8003884:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003886:	4b11      	ldr	r3, [pc, #68]	; (80038cc <MX_SPI2_Init+0x64>)
 8003888:	2200      	movs	r2, #0
 800388a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800388c:	4b0f      	ldr	r3, [pc, #60]	; (80038cc <MX_SPI2_Init+0x64>)
 800388e:	2200      	movs	r2, #0
 8003890:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003892:	4b0e      	ldr	r3, [pc, #56]	; (80038cc <MX_SPI2_Init+0x64>)
 8003894:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003898:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800389a:	4b0c      	ldr	r3, [pc, #48]	; (80038cc <MX_SPI2_Init+0x64>)
 800389c:	2218      	movs	r2, #24
 800389e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80038a0:	4b0a      	ldr	r3, [pc, #40]	; (80038cc <MX_SPI2_Init+0x64>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80038a6:	4b09      	ldr	r3, [pc, #36]	; (80038cc <MX_SPI2_Init+0x64>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038ac:	4b07      	ldr	r3, [pc, #28]	; (80038cc <MX_SPI2_Init+0x64>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80038b2:	4b06      	ldr	r3, [pc, #24]	; (80038cc <MX_SPI2_Init+0x64>)
 80038b4:	220a      	movs	r2, #10
 80038b6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80038b8:	4804      	ldr	r0, [pc, #16]	; (80038cc <MX_SPI2_Init+0x64>)
 80038ba:	f004 ff5f 	bl	800877c <HAL_SPI_Init>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d001      	beq.n	80038c8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80038c4:	f001 fa8e 	bl	8004de4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80038c8:	bf00      	nop
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	200003fc 	.word	0x200003fc
 80038d0:	40003800 	.word	0x40003800

080038d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b08c      	sub	sp, #48	; 0x30
 80038d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80038da:	f107 030c 	add.w	r3, r7, #12
 80038de:	2224      	movs	r2, #36	; 0x24
 80038e0:	2100      	movs	r1, #0
 80038e2:	4618      	mov	r0, r3
 80038e4:	f007 fb80 	bl	800afe8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038e8:	1d3b      	adds	r3, r7, #4
 80038ea:	2200      	movs	r2, #0
 80038ec:	601a      	str	r2, [r3, #0]
 80038ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80038f0:	4b21      	ldr	r3, [pc, #132]	; (8003978 <MX_TIM2_Init+0xa4>)
 80038f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80038f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80038f8:	4b1f      	ldr	r3, [pc, #124]	; (8003978 <MX_TIM2_Init+0xa4>)
 80038fa:	2200      	movs	r2, #0
 80038fc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038fe:	4b1e      	ldr	r3, [pc, #120]	; (8003978 <MX_TIM2_Init+0xa4>)
 8003900:	2200      	movs	r2, #0
 8003902:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8003904:	4b1c      	ldr	r3, [pc, #112]	; (8003978 <MX_TIM2_Init+0xa4>)
 8003906:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800390a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800390c:	4b1a      	ldr	r3, [pc, #104]	; (8003978 <MX_TIM2_Init+0xa4>)
 800390e:	2200      	movs	r2, #0
 8003910:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003912:	4b19      	ldr	r3, [pc, #100]	; (8003978 <MX_TIM2_Init+0xa4>)
 8003914:	2200      	movs	r2, #0
 8003916:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003918:	2303      	movs	r3, #3
 800391a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800391c:	2302      	movs	r3, #2
 800391e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003920:	2301      	movs	r3, #1
 8003922:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003924:	2300      	movs	r3, #0
 8003926:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003928:	2300      	movs	r3, #0
 800392a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800392c:	2302      	movs	r3, #2
 800392e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003930:	2301      	movs	r3, #1
 8003932:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003934:	2300      	movs	r3, #0
 8003936:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003938:	2300      	movs	r3, #0
 800393a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800393c:	f107 030c 	add.w	r3, r7, #12
 8003940:	4619      	mov	r1, r3
 8003942:	480d      	ldr	r0, [pc, #52]	; (8003978 <MX_TIM2_Init+0xa4>)
 8003944:	f005 fbf0 	bl	8009128 <HAL_TIM_Encoder_Init>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d001      	beq.n	8003952 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800394e:	f001 fa49 	bl	8004de4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003952:	2300      	movs	r3, #0
 8003954:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003956:	2300      	movs	r3, #0
 8003958:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800395a:	1d3b      	adds	r3, r7, #4
 800395c:	4619      	mov	r1, r3
 800395e:	4806      	ldr	r0, [pc, #24]	; (8003978 <MX_TIM2_Init+0xa4>)
 8003960:	f006 fabc 	bl	8009edc <HAL_TIMEx_MasterConfigSynchronization>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d001      	beq.n	800396e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800396a:	f001 fa3b 	bl	8004de4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800396e:	bf00      	nop
 8003970:	3730      	adds	r7, #48	; 0x30
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	200006dc 	.word	0x200006dc

0800397c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b08a      	sub	sp, #40	; 0x28
 8003980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003982:	f107 0320 	add.w	r3, r7, #32
 8003986:	2200      	movs	r2, #0
 8003988:	601a      	str	r2, [r3, #0]
 800398a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800398c:	1d3b      	adds	r3, r7, #4
 800398e:	2200      	movs	r2, #0
 8003990:	601a      	str	r2, [r3, #0]
 8003992:	605a      	str	r2, [r3, #4]
 8003994:	609a      	str	r2, [r3, #8]
 8003996:	60da      	str	r2, [r3, #12]
 8003998:	611a      	str	r2, [r3, #16]
 800399a:	615a      	str	r2, [r3, #20]
 800399c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800399e:	4b27      	ldr	r3, [pc, #156]	; (8003a3c <MX_TIM3_Init+0xc0>)
 80039a0:	4a27      	ldr	r2, [pc, #156]	; (8003a40 <MX_TIM3_Init+0xc4>)
 80039a2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80039a4:	4b25      	ldr	r3, [pc, #148]	; (8003a3c <MX_TIM3_Init+0xc0>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039aa:	4b24      	ldr	r3, [pc, #144]	; (8003a3c <MX_TIM3_Init+0xc0>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7199;
 80039b0:	4b22      	ldr	r3, [pc, #136]	; (8003a3c <MX_TIM3_Init+0xc0>)
 80039b2:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80039b6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039b8:	4b20      	ldr	r3, [pc, #128]	; (8003a3c <MX_TIM3_Init+0xc0>)
 80039ba:	2200      	movs	r2, #0
 80039bc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039be:	4b1f      	ldr	r3, [pc, #124]	; (8003a3c <MX_TIM3_Init+0xc0>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80039c4:	481d      	ldr	r0, [pc, #116]	; (8003a3c <MX_TIM3_Init+0xc0>)
 80039c6:	f005 fab0 	bl	8008f2a <HAL_TIM_PWM_Init>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d001      	beq.n	80039d4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80039d0:	f001 fa08 	bl	8004de4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039d4:	2300      	movs	r3, #0
 80039d6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039d8:	2300      	movs	r3, #0
 80039da:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80039dc:	f107 0320 	add.w	r3, r7, #32
 80039e0:	4619      	mov	r1, r3
 80039e2:	4816      	ldr	r0, [pc, #88]	; (8003a3c <MX_TIM3_Init+0xc0>)
 80039e4:	f006 fa7a 	bl	8009edc <HAL_TIMEx_MasterConfigSynchronization>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d001      	beq.n	80039f2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80039ee:	f001 f9f9 	bl	8004de4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80039f2:	2360      	movs	r3, #96	; 0x60
 80039f4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80039f6:	2300      	movs	r3, #0
 80039f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80039fa:	2300      	movs	r3, #0
 80039fc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80039fe:	2300      	movs	r3, #0
 8003a00:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003a02:	1d3b      	adds	r3, r7, #4
 8003a04:	2208      	movs	r2, #8
 8003a06:	4619      	mov	r1, r3
 8003a08:	480c      	ldr	r0, [pc, #48]	; (8003a3c <MX_TIM3_Init+0xc0>)
 8003a0a:	f005 fde9 	bl	80095e0 <HAL_TIM_PWM_ConfigChannel>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d001      	beq.n	8003a18 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8003a14:	f001 f9e6 	bl	8004de4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003a18:	1d3b      	adds	r3, r7, #4
 8003a1a:	220c      	movs	r2, #12
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	4807      	ldr	r0, [pc, #28]	; (8003a3c <MX_TIM3_Init+0xc0>)
 8003a20:	f005 fdde 	bl	80095e0 <HAL_TIM_PWM_ConfigChannel>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d001      	beq.n	8003a2e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8003a2a:	f001 f9db 	bl	8004de4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003a2e:	4803      	ldr	r0, [pc, #12]	; (8003a3c <MX_TIM3_Init+0xc0>)
 8003a30:	f001 fef2 	bl	8005818 <HAL_TIM_MspPostInit>

}
 8003a34:	bf00      	nop
 8003a36:	3728      	adds	r7, #40	; 0x28
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	20000510 	.word	0x20000510
 8003a40:	40000400 	.word	0x40000400

08003a44 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b08c      	sub	sp, #48	; 0x30
 8003a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003a4a:	f107 030c 	add.w	r3, r7, #12
 8003a4e:	2224      	movs	r2, #36	; 0x24
 8003a50:	2100      	movs	r1, #0
 8003a52:	4618      	mov	r0, r3
 8003a54:	f007 fac8 	bl	800afe8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a58:	1d3b      	adds	r3, r7, #4
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	601a      	str	r2, [r3, #0]
 8003a5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003a60:	4b20      	ldr	r3, [pc, #128]	; (8003ae4 <MX_TIM4_Init+0xa0>)
 8003a62:	4a21      	ldr	r2, [pc, #132]	; (8003ae8 <MX_TIM4_Init+0xa4>)
 8003a64:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003a66:	4b1f      	ldr	r3, [pc, #124]	; (8003ae4 <MX_TIM4_Init+0xa0>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a6c:	4b1d      	ldr	r3, [pc, #116]	; (8003ae4 <MX_TIM4_Init+0xa0>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003a72:	4b1c      	ldr	r3, [pc, #112]	; (8003ae4 <MX_TIM4_Init+0xa0>)
 8003a74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a78:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a7a:	4b1a      	ldr	r3, [pc, #104]	; (8003ae4 <MX_TIM4_Init+0xa0>)
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a80:	4b18      	ldr	r3, [pc, #96]	; (8003ae4 <MX_TIM4_Init+0xa0>)
 8003a82:	2200      	movs	r2, #0
 8003a84:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003a86:	2303      	movs	r3, #3
 8003a88:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8003a8a:	2302      	movs	r3, #2
 8003a8c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003a92:	2300      	movs	r3, #0
 8003a94:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003a96:	2300      	movs	r3, #0
 8003a98:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8003a9a:	2302      	movs	r3, #2
 8003a9c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003aaa:	f107 030c 	add.w	r3, r7, #12
 8003aae:	4619      	mov	r1, r3
 8003ab0:	480c      	ldr	r0, [pc, #48]	; (8003ae4 <MX_TIM4_Init+0xa0>)
 8003ab2:	f005 fb39 	bl	8009128 <HAL_TIM_Encoder_Init>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d001      	beq.n	8003ac0 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8003abc:	f001 f992 	bl	8004de4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003ac8:	1d3b      	adds	r3, r7, #4
 8003aca:	4619      	mov	r1, r3
 8003acc:	4805      	ldr	r0, [pc, #20]	; (8003ae4 <MX_TIM4_Init+0xa0>)
 8003ace:	f006 fa05 	bl	8009edc <HAL_TIMEx_MasterConfigSynchronization>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d001      	beq.n	8003adc <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8003ad8:	f001 f984 	bl	8004de4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003adc:	bf00      	nop
 8003ade:	3730      	adds	r7, #48	; 0x30
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	20000454 	.word	0x20000454
 8003ae8:	40000800 	.word	0x40000800

08003aec <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b086      	sub	sp, #24
 8003af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003af2:	f107 0308 	add.w	r3, r7, #8
 8003af6:	2200      	movs	r2, #0
 8003af8:	601a      	str	r2, [r3, #0]
 8003afa:	605a      	str	r2, [r3, #4]
 8003afc:	609a      	str	r2, [r3, #8]
 8003afe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b00:	463b      	mov	r3, r7
 8003b02:	2200      	movs	r2, #0
 8003b04:	601a      	str	r2, [r3, #0]
 8003b06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003b08:	4b1d      	ldr	r3, [pc, #116]	; (8003b80 <MX_TIM5_Init+0x94>)
 8003b0a:	4a1e      	ldr	r2, [pc, #120]	; (8003b84 <MX_TIM5_Init+0x98>)
 8003b0c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 60;
 8003b0e:	4b1c      	ldr	r3, [pc, #112]	; (8003b80 <MX_TIM5_Init+0x94>)
 8003b10:	223c      	movs	r2, #60	; 0x3c
 8003b12:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b14:	4b1a      	ldr	r3, [pc, #104]	; (8003b80 <MX_TIM5_Init+0x94>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 59999;
 8003b1a:	4b19      	ldr	r3, [pc, #100]	; (8003b80 <MX_TIM5_Init+0x94>)
 8003b1c:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8003b20:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b22:	4b17      	ldr	r3, [pc, #92]	; (8003b80 <MX_TIM5_Init+0x94>)
 8003b24:	2200      	movs	r2, #0
 8003b26:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b28:	4b15      	ldr	r3, [pc, #84]	; (8003b80 <MX_TIM5_Init+0x94>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003b2e:	4814      	ldr	r0, [pc, #80]	; (8003b80 <MX_TIM5_Init+0x94>)
 8003b30:	f005 f91a 	bl	8008d68 <HAL_TIM_Base_Init>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d001      	beq.n	8003b3e <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8003b3a:	f001 f953 	bl	8004de4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b42:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003b44:	f107 0308 	add.w	r3, r7, #8
 8003b48:	4619      	mov	r1, r3
 8003b4a:	480d      	ldr	r0, [pc, #52]	; (8003b80 <MX_TIM5_Init+0x94>)
 8003b4c:	f005 fe0a 	bl	8009764 <HAL_TIM_ConfigClockSource>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d001      	beq.n	8003b5a <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8003b56:	f001 f945 	bl	8004de4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003b62:	463b      	mov	r3, r7
 8003b64:	4619      	mov	r1, r3
 8003b66:	4806      	ldr	r0, [pc, #24]	; (8003b80 <MX_TIM5_Init+0x94>)
 8003b68:	f006 f9b8 	bl	8009edc <HAL_TIMEx_MasterConfigSynchronization>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d001      	beq.n	8003b76 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8003b72:	f001 f937 	bl	8004de4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003b76:	bf00      	nop
 8003b78:	3718      	adds	r7, #24
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	200004c8 	.word	0x200004c8
 8003b84:	40000c00 	.word	0x40000c00

08003b88 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b8e:	463b      	mov	r3, r7
 8003b90:	2200      	movs	r2, #0
 8003b92:	601a      	str	r2, [r3, #0]
 8003b94:	605a      	str	r2, [r3, #4]
 8003b96:	609a      	str	r2, [r3, #8]
 8003b98:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8003b9a:	4b16      	ldr	r3, [pc, #88]	; (8003bf4 <MX_TIM9_Init+0x6c>)
 8003b9c:	4a16      	ldr	r2, [pc, #88]	; (8003bf8 <MX_TIM9_Init+0x70>)
 8003b9e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 71;
 8003ba0:	4b14      	ldr	r3, [pc, #80]	; (8003bf4 <MX_TIM9_Init+0x6c>)
 8003ba2:	2247      	movs	r2, #71	; 0x47
 8003ba4:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ba6:	4b13      	ldr	r3, [pc, #76]	; (8003bf4 <MX_TIM9_Init+0x6c>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 9999;
 8003bac:	4b11      	ldr	r3, [pc, #68]	; (8003bf4 <MX_TIM9_Init+0x6c>)
 8003bae:	f242 720f 	movw	r2, #9999	; 0x270f
 8003bb2:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bb4:	4b0f      	ldr	r3, [pc, #60]	; (8003bf4 <MX_TIM9_Init+0x6c>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bba:	4b0e      	ldr	r3, [pc, #56]	; (8003bf4 <MX_TIM9_Init+0x6c>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8003bc0:	480c      	ldr	r0, [pc, #48]	; (8003bf4 <MX_TIM9_Init+0x6c>)
 8003bc2:	f005 f8d1 	bl	8008d68 <HAL_TIM_Base_Init>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d001      	beq.n	8003bd0 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8003bcc:	f001 f90a 	bl	8004de4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003bd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bd4:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8003bd6:	463b      	mov	r3, r7
 8003bd8:	4619      	mov	r1, r3
 8003bda:	4806      	ldr	r0, [pc, #24]	; (8003bf4 <MX_TIM9_Init+0x6c>)
 8003bdc:	f005 fdc2 	bl	8009764 <HAL_TIM_ConfigClockSource>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8003be6:	f001 f8fd 	bl	8004de4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8003bea:	bf00      	nop
 8003bec:	3710      	adds	r7, #16
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	20000690 	.word	0x20000690
 8003bf8:	40014000 	.word	0x40014000

08003bfc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003c00:	4b11      	ldr	r3, [pc, #68]	; (8003c48 <MX_USART1_UART_Init+0x4c>)
 8003c02:	4a12      	ldr	r2, [pc, #72]	; (8003c4c <MX_USART1_UART_Init+0x50>)
 8003c04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003c06:	4b10      	ldr	r3, [pc, #64]	; (8003c48 <MX_USART1_UART_Init+0x4c>)
 8003c08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003c0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003c0e:	4b0e      	ldr	r3, [pc, #56]	; (8003c48 <MX_USART1_UART_Init+0x4c>)
 8003c10:	2200      	movs	r2, #0
 8003c12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003c14:	4b0c      	ldr	r3, [pc, #48]	; (8003c48 <MX_USART1_UART_Init+0x4c>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003c1a:	4b0b      	ldr	r3, [pc, #44]	; (8003c48 <MX_USART1_UART_Init+0x4c>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003c20:	4b09      	ldr	r3, [pc, #36]	; (8003c48 <MX_USART1_UART_Init+0x4c>)
 8003c22:	220c      	movs	r2, #12
 8003c24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c26:	4b08      	ldr	r3, [pc, #32]	; (8003c48 <MX_USART1_UART_Init+0x4c>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c2c:	4b06      	ldr	r3, [pc, #24]	; (8003c48 <MX_USART1_UART_Init+0x4c>)
 8003c2e:	2200      	movs	r2, #0
 8003c30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003c32:	4805      	ldr	r0, [pc, #20]	; (8003c48 <MX_USART1_UART_Init+0x4c>)
 8003c34:	f006 f9d4 	bl	8009fe0 <HAL_UART_Init>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d001      	beq.n	8003c42 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003c3e:	f001 f8d1 	bl	8004de4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003c42:	bf00      	nop
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	200005a0 	.word	0x200005a0
 8003c4c:	40011000 	.word	0x40011000

08003c50 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003c54:	4b11      	ldr	r3, [pc, #68]	; (8003c9c <MX_USART6_UART_Init+0x4c>)
 8003c56:	4a12      	ldr	r2, [pc, #72]	; (8003ca0 <MX_USART6_UART_Init+0x50>)
 8003c58:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8003c5a:	4b10      	ldr	r3, [pc, #64]	; (8003c9c <MX_USART6_UART_Init+0x4c>)
 8003c5c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003c60:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003c62:	4b0e      	ldr	r3, [pc, #56]	; (8003c9c <MX_USART6_UART_Init+0x4c>)
 8003c64:	2200      	movs	r2, #0
 8003c66:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003c68:	4b0c      	ldr	r3, [pc, #48]	; (8003c9c <MX_USART6_UART_Init+0x4c>)
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003c6e:	4b0b      	ldr	r3, [pc, #44]	; (8003c9c <MX_USART6_UART_Init+0x4c>)
 8003c70:	2200      	movs	r2, #0
 8003c72:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003c74:	4b09      	ldr	r3, [pc, #36]	; (8003c9c <MX_USART6_UART_Init+0x4c>)
 8003c76:	220c      	movs	r2, #12
 8003c78:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c7a:	4b08      	ldr	r3, [pc, #32]	; (8003c9c <MX_USART6_UART_Init+0x4c>)
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c80:	4b06      	ldr	r3, [pc, #24]	; (8003c9c <MX_USART6_UART_Init+0x4c>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003c86:	4805      	ldr	r0, [pc, #20]	; (8003c9c <MX_USART6_UART_Init+0x4c>)
 8003c88:	f006 f9aa 	bl	8009fe0 <HAL_UART_Init>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d001      	beq.n	8003c96 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003c92:	f001 f8a7 	bl	8004de4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003c96:	bf00      	nop
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	20000364 	.word	0x20000364
 8003ca0:	40011400 	.word	0x40011400

08003ca4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003caa:	2300      	movs	r3, #0
 8003cac:	607b      	str	r3, [r7, #4]
 8003cae:	4b0c      	ldr	r3, [pc, #48]	; (8003ce0 <MX_DMA_Init+0x3c>)
 8003cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb2:	4a0b      	ldr	r2, [pc, #44]	; (8003ce0 <MX_DMA_Init+0x3c>)
 8003cb4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8003cba:	4b09      	ldr	r3, [pc, #36]	; (8003ce0 <MX_DMA_Init+0x3c>)
 8003cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cc2:	607b      	str	r3, [r7, #4]
 8003cc4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	2100      	movs	r1, #0
 8003cca:	2038      	movs	r0, #56	; 0x38
 8003ccc:	f002 fe8f 	bl	80069ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003cd0:	2038      	movs	r0, #56	; 0x38
 8003cd2:	f002 fea8 	bl	8006a26 <HAL_NVIC_EnableIRQ>

}
 8003cd6:	bf00      	nop
 8003cd8:	3708      	adds	r7, #8
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	40023800 	.word	0x40023800

08003ce4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b08a      	sub	sp, #40	; 0x28
 8003ce8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cea:	f107 0314 	add.w	r3, r7, #20
 8003cee:	2200      	movs	r2, #0
 8003cf0:	601a      	str	r2, [r3, #0]
 8003cf2:	605a      	str	r2, [r3, #4]
 8003cf4:	609a      	str	r2, [r3, #8]
 8003cf6:	60da      	str	r2, [r3, #12]
 8003cf8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	613b      	str	r3, [r7, #16]
 8003cfe:	4b39      	ldr	r3, [pc, #228]	; (8003de4 <MX_GPIO_Init+0x100>)
 8003d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d02:	4a38      	ldr	r2, [pc, #224]	; (8003de4 <MX_GPIO_Init+0x100>)
 8003d04:	f043 0304 	orr.w	r3, r3, #4
 8003d08:	6313      	str	r3, [r2, #48]	; 0x30
 8003d0a:	4b36      	ldr	r3, [pc, #216]	; (8003de4 <MX_GPIO_Init+0x100>)
 8003d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d0e:	f003 0304 	and.w	r3, r3, #4
 8003d12:	613b      	str	r3, [r7, #16]
 8003d14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003d16:	2300      	movs	r3, #0
 8003d18:	60fb      	str	r3, [r7, #12]
 8003d1a:	4b32      	ldr	r3, [pc, #200]	; (8003de4 <MX_GPIO_Init+0x100>)
 8003d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1e:	4a31      	ldr	r2, [pc, #196]	; (8003de4 <MX_GPIO_Init+0x100>)
 8003d20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d24:	6313      	str	r3, [r2, #48]	; 0x30
 8003d26:	4b2f      	ldr	r3, [pc, #188]	; (8003de4 <MX_GPIO_Init+0x100>)
 8003d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d2e:	60fb      	str	r3, [r7, #12]
 8003d30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d32:	2300      	movs	r3, #0
 8003d34:	60bb      	str	r3, [r7, #8]
 8003d36:	4b2b      	ldr	r3, [pc, #172]	; (8003de4 <MX_GPIO_Init+0x100>)
 8003d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3a:	4a2a      	ldr	r2, [pc, #168]	; (8003de4 <MX_GPIO_Init+0x100>)
 8003d3c:	f043 0301 	orr.w	r3, r3, #1
 8003d40:	6313      	str	r3, [r2, #48]	; 0x30
 8003d42:	4b28      	ldr	r3, [pc, #160]	; (8003de4 <MX_GPIO_Init+0x100>)
 8003d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d46:	f003 0301 	and.w	r3, r3, #1
 8003d4a:	60bb      	str	r3, [r7, #8]
 8003d4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d4e:	2300      	movs	r3, #0
 8003d50:	607b      	str	r3, [r7, #4]
 8003d52:	4b24      	ldr	r3, [pc, #144]	; (8003de4 <MX_GPIO_Init+0x100>)
 8003d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d56:	4a23      	ldr	r2, [pc, #140]	; (8003de4 <MX_GPIO_Init+0x100>)
 8003d58:	f043 0302 	orr.w	r3, r3, #2
 8003d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d5e:	4b21      	ldr	r3, [pc, #132]	; (8003de4 <MX_GPIO_Init+0x100>)
 8003d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d62:	f003 0302 	and.w	r3, r3, #2
 8003d66:	607b      	str	r3, [r7, #4]
 8003d68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_5, GPIO_PIN_RESET);
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f240 4124 	movw	r1, #1060	; 0x424
 8003d70:	481d      	ldr	r0, [pc, #116]	; (8003de8 <MX_GPIO_Init+0x104>)
 8003d72:	f003 fc11 	bl	8007598 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ButtonC_Pin */
  GPIO_InitStruct.Pin = ButtonC_Pin;
 8003d76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003d7c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003d80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d82:	2300      	movs	r3, #0
 8003d84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ButtonC_GPIO_Port, &GPIO_InitStruct);
 8003d86:	f107 0314 	add.w	r3, r7, #20
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	4817      	ldr	r0, [pc, #92]	; (8003dec <MX_GPIO_Init+0x108>)
 8003d8e:	f003 fa67 	bl	8007260 <HAL_GPIO_Init>

  /*Configure GPIO pins : ButtonB_Pin ButtonA_Pin */
  GPIO_InitStruct.Pin = ButtonB_Pin|ButtonA_Pin;
 8003d92:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003d96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003da0:	f107 0314 	add.w	r3, r7, #20
 8003da4:	4619      	mov	r1, r3
 8003da6:	4811      	ldr	r0, [pc, #68]	; (8003dec <MX_GPIO_Init+0x108>)
 8003da8:	f003 fa5a 	bl	8007260 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_5;
 8003dac:	f240 4324 	movw	r3, #1060	; 0x424
 8003db0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003db2:	2301      	movs	r3, #1
 8003db4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003db6:	2300      	movs	r3, #0
 8003db8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dbe:	f107 0314 	add.w	r3, r7, #20
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	4808      	ldr	r0, [pc, #32]	; (8003de8 <MX_GPIO_Init+0x104>)
 8003dc6:	f003 fa4b 	bl	8007260 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003dca:	2200      	movs	r2, #0
 8003dcc:	2100      	movs	r1, #0
 8003dce:	2028      	movs	r0, #40	; 0x28
 8003dd0:	f002 fe0d 	bl	80069ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003dd4:	2028      	movs	r0, #40	; 0x28
 8003dd6:	f002 fe26 	bl	8006a26 <HAL_NVIC_EnableIRQ>

}
 8003dda:	bf00      	nop
 8003ddc:	3728      	adds	r7, #40	; 0x28
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	40023800 	.word	0x40023800
 8003de8:	40020400 	.word	0x40020400
 8003dec:	40020800 	.word	0x40020800

08003df0 <Running>:

/* USER CODE BEGIN 4 */
void Running(void) // Activate the car for running
{
 8003df0:	b590      	push	{r4, r7, lr}
 8003df2:	b097      	sub	sp, #92	; 0x5c
 8003df4:	af02      	add	r7, sp, #8
	uint8_t Temp_Line;
	int8_t point_passed = -1;
 8003df6:	23ff      	movs	r3, #255	; 0xff
 8003df8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	int Instruction[8];
	int Map_Point[4],Turn_Instruction[4];
	int8_t Max_point_temp,Max_point;
	int8_t Spin_once = 0;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	int8_t Path_guidance = 1;
 8003e02:	2301      	movs	r3, #1
 8003e04:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	int8_t station_count = -1;
 8003e08:	23ff      	movs	r3, #255	; 0xff
 8003e0a:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	uint8_t Read_RFID_Flag = 0;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	lcd_send_cmd(0x80 | 0x00);
 8003e14:	2080      	movs	r0, #128	; 0x80
 8003e16:	f7fe f837 	bl	8001e88 <lcd_send_cmd>
	lcd_send_string("Car is Running!        ");
 8003e1a:	48ab      	ldr	r0, [pc, #684]	; (80040c8 <Running+0x2d8>)
 8003e1c:	f7fe f8e5 	bl	8001fea <lcd_send_string>
	lcd_send_cmd(0x80 | 0x40);
 8003e20:	20c0      	movs	r0, #192	; 0xc0
 8003e22:	f7fe f831 	bl	8001e88 <lcd_send_cmd>
	lcd_send_string("Press C for cancel     ");
 8003e26:	48a9      	ldr	r0, [pc, #676]	; (80040cc <Running+0x2dc>)
 8003e28:	f7fe f8df 	bl	8001fea <lcd_send_string>
	Previous_Line = LINE_MIDDLE;
 8003e2c:	4ba8      	ldr	r3, [pc, #672]	; (80040d0 <Running+0x2e0>)
 8003e2e:	2203      	movs	r2, #3
 8003e30:	701a      	strb	r2, [r3, #0]
	while (cancel_running) {
 8003e32:	e212      	b.n	800425a <Running+0x46a>
		if(Begin_solving == 1)
 8003e34:	4ba7      	ldr	r3, [pc, #668]	; (80040d4 <Running+0x2e4>)
 8003e36:	f993 3000 	ldrsb.w	r3, [r3]
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	f040 81cd 	bne.w	80041da <Running+0x3ea>
		{
	/*======================== CACULATING SPEED EACH 300ms ============================================*/
			unsigned long currentMillis  = HAL_GetTick();
 8003e40:	f001 ff84 	bl	8005d4c <HAL_GetTick>
 8003e44:	6478      	str	r0, [r7, #68]	; 0x44
			Encoder_Read();
 8003e46:	f7ff fb37 	bl	80034b8 <Encoder_Read>
			if(currentMillis  - previousMillis  >= interval)
 8003e4a:	4ba3      	ldr	r3, [pc, #652]	; (80040d8 <Running+0x2e8>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	2246      	movs	r2, #70	; 0x46
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d339      	bcc.n	8003ecc <Running+0xdc>
			{
				previousMillis  = previousMillis;
 8003e58:	4b9f      	ldr	r3, [pc, #636]	; (80040d8 <Running+0x2e8>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a9e      	ldr	r2, [pc, #632]	; (80040d8 <Running+0x2e8>)
 8003e5e:	6013      	str	r3, [r2, #0]
				rateLeft = (countLeft - countLeft_prv)*1345/374;
 8003e60:	4b9e      	ldr	r3, [pc, #632]	; (80040dc <Running+0x2ec>)
 8003e62:	881b      	ldrh	r3, [r3, #0]
 8003e64:	b21b      	sxth	r3, r3
 8003e66:	461a      	mov	r2, r3
 8003e68:	4b9d      	ldr	r3, [pc, #628]	; (80040e0 <Running+0x2f0>)
 8003e6a:	881b      	ldrh	r3, [r3, #0]
 8003e6c:	b21b      	sxth	r3, r3
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	f240 5241 	movw	r2, #1345	; 0x541
 8003e74:	fb02 f303 	mul.w	r3, r2, r3
 8003e78:	4a9a      	ldr	r2, [pc, #616]	; (80040e4 <Running+0x2f4>)
 8003e7a:	fb82 1203 	smull	r1, r2, r2, r3
 8003e7e:	441a      	add	r2, r3
 8003e80:	1212      	asrs	r2, r2, #8
 8003e82:	17db      	asrs	r3, r3, #31
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	b21a      	sxth	r2, r3
 8003e88:	4b97      	ldr	r3, [pc, #604]	; (80040e8 <Running+0x2f8>)
 8003e8a:	801a      	strh	r2, [r3, #0]
				rateRight = (countRight - countRight_prv)*1345/374;
 8003e8c:	4b97      	ldr	r3, [pc, #604]	; (80040ec <Running+0x2fc>)
 8003e8e:	881b      	ldrh	r3, [r3, #0]
 8003e90:	b21b      	sxth	r3, r3
 8003e92:	461a      	mov	r2, r3
 8003e94:	4b96      	ldr	r3, [pc, #600]	; (80040f0 <Running+0x300>)
 8003e96:	881b      	ldrh	r3, [r3, #0]
 8003e98:	b21b      	sxth	r3, r3
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	f240 5241 	movw	r2, #1345	; 0x541
 8003ea0:	fb02 f303 	mul.w	r3, r2, r3
 8003ea4:	4a8f      	ldr	r2, [pc, #572]	; (80040e4 <Running+0x2f4>)
 8003ea6:	fb82 1203 	smull	r1, r2, r2, r3
 8003eaa:	441a      	add	r2, r3
 8003eac:	1212      	asrs	r2, r2, #8
 8003eae:	17db      	asrs	r3, r3, #31
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	b21a      	sxth	r2, r3
 8003eb4:	4b8f      	ldr	r3, [pc, #572]	; (80040f4 <Running+0x304>)
 8003eb6:	801a      	strh	r2, [r3, #0]
				countLeft_prv = countLeft;
 8003eb8:	4b88      	ldr	r3, [pc, #544]	; (80040dc <Running+0x2ec>)
 8003eba:	881b      	ldrh	r3, [r3, #0]
 8003ebc:	b21a      	sxth	r2, r3
 8003ebe:	4b88      	ldr	r3, [pc, #544]	; (80040e0 <Running+0x2f0>)
 8003ec0:	801a      	strh	r2, [r3, #0]
				countRight_prv = countRight;
 8003ec2:	4b8a      	ldr	r3, [pc, #552]	; (80040ec <Running+0x2fc>)
 8003ec4:	881b      	ldrh	r3, [r3, #0]
 8003ec6:	b21a      	sxth	r2, r3
 8003ec8:	4b89      	ldr	r3, [pc, #548]	; (80040f0 <Running+0x300>)
 8003eca:	801a      	strh	r2, [r3, #0]
			}
			if(Path_guidance == 1)
 8003ecc:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d124      	bne.n	8003f1e <Running+0x12e>
			{
				Max_point_temp = Solver(First_point, Last_point, Previous_point, Turn_Instruction, Map_Point, Instruction);
 8003ed4:	4b88      	ldr	r3, [pc, #544]	; (80040f8 <Running+0x308>)
 8003ed6:	f993 3000 	ldrsb.w	r3, [r3]
 8003eda:	4618      	mov	r0, r3
 8003edc:	4b87      	ldr	r3, [pc, #540]	; (80040fc <Running+0x30c>)
 8003ede:	f993 3000 	ldrsb.w	r3, [r3]
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	4b86      	ldr	r3, [pc, #536]	; (8004100 <Running+0x310>)
 8003ee6:	f993 3000 	ldrsb.w	r3, [r3]
 8003eea:	461c      	mov	r4, r3
 8003eec:	463a      	mov	r2, r7
 8003eee:	f107 0320 	add.w	r3, r7, #32
 8003ef2:	9301      	str	r3, [sp, #4]
 8003ef4:	f107 0310 	add.w	r3, r7, #16
 8003ef8:	9300      	str	r3, [sp, #0]
 8003efa:	4613      	mov	r3, r2
 8003efc:	4622      	mov	r2, r4
 8003efe:	f7fe feeb 	bl	8002cd8 <Solver>
 8003f02:	4603      	mov	r3, r0
 8003f04:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
				Max_point = Max_point_temp + (Max_point_temp - 1) - 1;
 8003f08:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8003f0c:	337f      	adds	r3, #127	; 0x7f
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	005b      	lsls	r3, r3, #1
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
				Path_guidance = 0;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
			}
			Sensor_Convert_A2D();
 8003f1e:	f000 fbed 	bl	80046fc <Sensor_Convert_A2D>
			Go_Straight();
 8003f22:	f000 faff 	bl	8004524 <Go_Straight>
			Temp_Line = (LineDetect & 0b10000100);
 8003f26:	4b77      	ldr	r3, [pc, #476]	; (8004104 <Running+0x314>)
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	f023 037b 	bic.w	r3, r3, #123	; 0x7b
 8003f2e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
			if(Temp_Line == 0b10000000 || Temp_Line == 0b00000100 || Temp_Line == 0b10000100)
 8003f32:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003f36:	2b80      	cmp	r3, #128	; 0x80
 8003f38:	d007      	beq.n	8003f4a <Running+0x15a>
 8003f3a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003f3e:	2b04      	cmp	r3, #4
 8003f40:	d003      	beq.n	8003f4a <Running+0x15a>
 8003f42:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003f46:	2b84      	cmp	r3, #132	; 0x84
 8003f48:	d15c      	bne.n	8004004 <Running+0x214>
			{
				if(Temp_Line == 0b10000000)
 8003f4a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003f4e:	2b80      	cmp	r3, #128	; 0x80
 8003f50:	d104      	bne.n	8003f5c <Running+0x16c>
				{
					Error_Val = 3100;
 8003f52:	4b6d      	ldr	r3, [pc, #436]	; (8004108 <Running+0x318>)
 8003f54:	f640 421c 	movw	r2, #3100	; 0xc1c
 8003f58:	601a      	str	r2, [r3, #0]
 8003f5a:	e007      	b.n	8003f6c <Running+0x17c>
				}
				else if(Temp_Line == 0b00000100)
 8003f5c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003f60:	2b04      	cmp	r3, #4
 8003f62:	d103      	bne.n	8003f6c <Running+0x17c>
				{
					Error_Val = 4300;
 8003f64:	4b68      	ldr	r3, [pc, #416]	; (8004108 <Running+0x318>)
 8003f66:	f241 02cc 	movw	r2, #4300	; 0x10cc
 8003f6a:	601a      	str	r2, [r3, #0]
				}
				Sensor_Convert_A2D();
 8003f6c:	f000 fbc6 	bl	80046fc <Sensor_Convert_A2D>
				Previous_Line = LINE_HALF_BLACK;
 8003f70:	4b57      	ldr	r3, [pc, #348]	; (80040d0 <Running+0x2e0>)
 8003f72:	2201      	movs	r2, #1
 8003f74:	701a      	strb	r2, [r3, #0]
				if(point_passed == Max_point - 1)
 8003f76:	f997 204f 	ldrsb.w	r2, [r7, #79]	; 0x4f
 8003f7a:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d127      	bne.n	8003fd4 <Running+0x1e4>
				{
					station_count = station_count + 1;
 8003f84:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8003f88:	3301      	adds	r3, #1
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
					STATION_ID = Map_Point[station_count];
 8003f90:	f997 304a 	ldrsb.w	r3, [r7, #74]	; 0x4a
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003f9a:	4413      	add	r3, r2
 8003f9c:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8003fa0:	b2da      	uxtb	r2, r3
 8003fa2:	4b5a      	ldr	r3, [pc, #360]	; (800410c <Running+0x31c>)
 8003fa4:	701a      	strb	r2, [r3, #0]
					First_point = Last_point;
 8003fa6:	4b55      	ldr	r3, [pc, #340]	; (80040fc <Running+0x30c>)
 8003fa8:	f993 2000 	ldrsb.w	r2, [r3]
 8003fac:	4b52      	ldr	r3, [pc, #328]	; (80040f8 <Running+0x308>)
 8003fae:	701a      	strb	r2, [r3, #0]
					Previous_point = Map_Point[Max_point_temp - 2];
 8003fb0:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8003fb4:	3b02      	subs	r3, #2
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003fbc:	4413      	add	r3, r2
 8003fbe:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8003fc2:	b25a      	sxtb	r2, r3
 8003fc4:	4b4e      	ldr	r3, [pc, #312]	; (8004100 <Running+0x310>)
 8003fc6:	701a      	strb	r2, [r3, #0]
					Begin_solving = 0;
 8003fc8:	4b42      	ldr	r3, [pc, #264]	; (80040d4 <Running+0x2e4>)
 8003fca:	2200      	movs	r2, #0
 8003fcc:	701a      	strb	r2, [r3, #0]
					Read_RFID_Flag = 1;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
				}
				if(Spin_once == 0 && (Turn_Instruction[0] == TURN_180DEG_LEFT || Turn_Instruction[0] == TURN_180DEG_RIGHT || Turn_Instruction[0] == TURN_180DEG_STRAIGHT))
 8003fd4:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	f040 80e5 	bne.w	80041a8 <Running+0x3b8>
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	2b05      	cmp	r3, #5
 8003fe2:	d006      	beq.n	8003ff2 <Running+0x202>
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d003      	beq.n	8003ff2 <Running+0x202>
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	f040 80db 	bne.w	80041a8 <Running+0x3b8>
				{
					Turn_180_Deg();
 8003ff2:	f000 fa71 	bl	80044d8 <Turn_180_Deg>
					Previous_Line = LINE_HALF_BLACK;
 8003ff6:	4b36      	ldr	r3, [pc, #216]	; (80040d0 <Running+0x2e0>)
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	701a      	strb	r2, [r3, #0]
					Spin_once = 1;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
				if(Spin_once == 0 && (Turn_Instruction[0] == TURN_180DEG_LEFT || Turn_Instruction[0] == TURN_180DEG_RIGHT || Turn_Instruction[0] == TURN_180DEG_STRAIGHT))
 8004002:	e0d1      	b.n	80041a8 <Running+0x3b8>
				}
			}

		/* Truong hop xe chay line giua ---------------------------------------*/
			else if (Temp_Line == 0b00000000)
 8004004:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8004008:	2b00      	cmp	r3, #0
 800400a:	f040 80ce 	bne.w	80041aa <Running+0x3ba>
			{
				if (Previous_Line == LINE_HALF_BLACK)
 800400e:	4b30      	ldr	r3, [pc, #192]	; (80040d0 <Running+0x2e0>)
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	2b01      	cmp	r3, #1
 8004014:	d17c      	bne.n	8004110 <Running+0x320>
				{
					Sensor_Convert_A2D();
 8004016:	f000 fb71 	bl	80046fc <Sensor_Convert_A2D>
					Go_Straight();
 800401a:	f000 fa83 	bl	8004524 <Go_Straight>
					point_passed = point_passed + 1;
 800401e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004022:	3301      	adds	r3, #1
 8004024:	b2db      	uxtb	r3, r3
 8004026:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

/*Step procesing BEGIN here */
					if(point_passed < Max_point)
 800402a:	f997 204f 	ldrsb.w	r2, [r7, #79]	; 0x4f
 800402e:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 8004032:	429a      	cmp	r2, r3
 8004034:	da42      	bge.n	80040bc <Running+0x2cc>
					{
						switch(Instruction[point_passed])
 8004036:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004040:	4413      	add	r3, r2
 8004042:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8004046:	2b07      	cmp	r3, #7
 8004048:	d839      	bhi.n	80040be <Running+0x2ce>
 800404a:	a201      	add	r2, pc, #4	; (adr r2, 8004050 <Running+0x260>)
 800404c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004050:	080040a5 	.word	0x080040a5
 8004054:	080040b7 	.word	0x080040b7
 8004058:	080040b1 	.word	0x080040b1
 800405c:	0800409f 	.word	0x0800409f
 8004060:	08004099 	.word	0x08004099
 8004064:	080040ab 	.word	0x080040ab
 8004068:	080040bf 	.word	0x080040bf
 800406c:	08004071 	.word	0x08004071
						{
						case TURN_SKIP_POINT:
							station_count = station_count + 1;
 8004070:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8004074:	3301      	adds	r3, #1
 8004076:	b2db      	uxtb	r3, r3
 8004078:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
							STATION_ID = Map_Point[station_count];
 800407c:	f997 304a 	ldrsb.w	r3, [r7, #74]	; 0x4a
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004086:	4413      	add	r3, r2
 8004088:	f853 3c40 	ldr.w	r3, [r3, #-64]
 800408c:	b2da      	uxtb	r2, r3
 800408e:	4b1f      	ldr	r3, [pc, #124]	; (800410c <Running+0x31c>)
 8004090:	701a      	strb	r2, [r3, #0]
							Go_Straight();
 8004092:	f000 fa47 	bl	8004524 <Go_Straight>
							break;
 8004096:	e012      	b.n	80040be <Running+0x2ce>
						case TURN_LEFT:
							Left_Turn();
 8004098:	f000 f9da 	bl	8004450 <Left_Turn>
							break;
 800409c:	e00f      	b.n	80040be <Running+0x2ce>
						case TURN_RIGHT:
							Right_Turn();
 800409e:	f000 f9fb 	bl	8004498 <Right_Turn>
							break;
 80040a2:	e00c      	b.n	80040be <Running+0x2ce>
						case TURN_SKIP:
							Go_Straight();
 80040a4:	f000 fa3e 	bl	8004524 <Go_Straight>
							break;
 80040a8:	e009      	b.n	80040be <Running+0x2ce>
						case TURN_180DEG_LEFT:
							Left_Turn();
 80040aa:	f000 f9d1 	bl	8004450 <Left_Turn>
							break;
 80040ae:	e006      	b.n	80040be <Running+0x2ce>
						case TURN_180DEG_RIGHT:
							Right_Turn();
 80040b0:	f000 f9f2 	bl	8004498 <Right_Turn>
							break;
 80040b4:	e003      	b.n	80040be <Running+0x2ce>
						case TURN_180DEG_STRAIGHT:
							Go_Straight();
 80040b6:	f000 fa35 	bl	8004524 <Go_Straight>
							break;
 80040ba:	e000      	b.n	80040be <Running+0x2ce>
;						}
					}
 80040bc:	bf00      	nop

/*Step procesing END here */
					Previous_Line = LINE_MIDDLE;
 80040be:	4b04      	ldr	r3, [pc, #16]	; (80040d0 <Running+0x2e0>)
 80040c0:	2203      	movs	r2, #3
 80040c2:	701a      	strb	r2, [r3, #0]
 80040c4:	e071      	b.n	80041aa <Running+0x3ba>
 80040c6:	bf00      	nop
 80040c8:	0800fc3c 	.word	0x0800fc3c
 80040cc:	0800fc54 	.word	0x0800fc54
 80040d0:	20000009 	.word	0x20000009
 80040d4:	2000026f 	.word	0x2000026f
 80040d8:	20000284 	.word	0x20000284
 80040dc:	20000272 	.word	0x20000272
 80040e0:	20000276 	.word	0x20000276
 80040e4:	af3addc7 	.word	0xaf3addc7
 80040e8:	2000027a 	.word	0x2000027a
 80040ec:	20000274 	.word	0x20000274
 80040f0:	20000278 	.word	0x20000278
 80040f4:	2000027c 	.word	0x2000027c
 80040f8:	2000026d 	.word	0x2000026d
 80040fc:	2000026e 	.word	0x2000026e
 8004100:	2000000a 	.word	0x2000000a
 8004104:	20000264 	.word	0x20000264
 8004108:	200004c4 	.word	0x200004c4
 800410c:	20000270 	.word	0x20000270
				}

				else if(Previous_Line == LINE_MIDDLE)
 8004110:	4b5a      	ldr	r3, [pc, #360]	; (800427c <Running+0x48c>)
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	2b03      	cmp	r3, #3
 8004116:	d148      	bne.n	80041aa <Running+0x3ba>
				{
				Sensor_Convert_A2D();
 8004118:	f000 faf0 	bl	80046fc <Sensor_Convert_A2D>
				Error_Val = Error_Return(LineDetect);
 800411c:	4b58      	ldr	r3, [pc, #352]	; (8004280 <Running+0x490>)
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	4618      	mov	r0, r3
 8004122:	f000 fa4f 	bl	80045c4 <Error_Return>
 8004126:	4603      	mov	r3, r0
 8004128:	4a56      	ldr	r2, [pc, #344]	; (8004284 <Running+0x494>)
 800412a:	6013      	str	r3, [r2, #0]
				int16_t PID_Val = Line_Follower_PID(3500,Error_Val,&Car);
 800412c:	4b55      	ldr	r3, [pc, #340]	; (8004284 <Running+0x494>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a55      	ldr	r2, [pc, #340]	; (8004288 <Running+0x498>)
 8004132:	4619      	mov	r1, r3
 8004134:	f640 50ac 	movw	r0, #3500	; 0xdac
 8004138:	f7fe ff8a 	bl	8003050 <Line_Follower_PID>
 800413c:	4603      	mov	r3, r0
 800413e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
				Motor_Speed_R = (Right + PID_Val);
 8004142:	4b52      	ldr	r3, [pc, #328]	; (800428c <Running+0x49c>)
 8004144:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004148:	461a      	mov	r2, r3
 800414a:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 800414e:	4413      	add	r3, r2
 8004150:	4a4f      	ldr	r2, [pc, #316]	; (8004290 <Running+0x4a0>)
 8004152:	6013      	str	r3, [r2, #0]
				Motor_Speed_L = (Left - PID_Val);
 8004154:	4b4f      	ldr	r3, [pc, #316]	; (8004294 <Running+0x4a4>)
 8004156:	f9b3 3000 	ldrsh.w	r3, [r3]
 800415a:	461a      	mov	r2, r3
 800415c:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	4a4d      	ldr	r2, [pc, #308]	; (8004298 <Running+0x4a8>)
 8004164:	6013      	str	r3, [r2, #0]
				Motor_Speed_R = Constraint(Motor_Speed_R, -MAXSPEED_RIGHT,MAXSPEED_RIGHT);
 8004166:	4b4a      	ldr	r3, [pc, #296]	; (8004290 <Running+0x4a0>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f640 42e4 	movw	r2, #3300	; 0xce4
 800416e:	494b      	ldr	r1, [pc, #300]	; (800429c <Running+0x4ac>)
 8004170:	4618      	mov	r0, r3
 8004172:	f000 faa5 	bl	80046c0 <Constraint>
 8004176:	4603      	mov	r3, r0
 8004178:	4a45      	ldr	r2, [pc, #276]	; (8004290 <Running+0x4a0>)
 800417a:	6013      	str	r3, [r2, #0]
				Motor_Speed_L = Constraint(Motor_Speed_L, -MAXSPEED_LEFT,MAXSPEED_LEFT);
 800417c:	4b46      	ldr	r3, [pc, #280]	; (8004298 <Running+0x4a8>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f640 52a2 	movw	r2, #3490	; 0xda2
 8004184:	4946      	ldr	r1, [pc, #280]	; (80042a0 <Running+0x4b0>)
 8004186:	4618      	mov	r0, r3
 8004188:	f000 fa9a 	bl	80046c0 <Constraint>
 800418c:	4603      	mov	r3, r0
 800418e:	4a42      	ldr	r2, [pc, #264]	; (8004298 <Running+0x4a8>)
 8004190:	6013      	str	r3, [r2, #0]
				MotorR_SetPWM(Motor_Speed_R);
 8004192:	4b3f      	ldr	r3, [pc, #252]	; (8004290 <Running+0x4a0>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4618      	mov	r0, r3
 8004198:	f7fd ff86 	bl	80020a8 <MotorR_SetPWM>
				MotorL_SetPWM(Motor_Speed_L);
 800419c:	4b3e      	ldr	r3, [pc, #248]	; (8004298 <Running+0x4a8>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4618      	mov	r0, r3
 80041a2:	f7fd ff4b 	bl	800203c <MotorL_SetPWM>
 80041a6:	e000      	b.n	80041aa <Running+0x3ba>
				if(Spin_once == 0 && (Turn_Instruction[0] == TURN_180DEG_LEFT || Turn_Instruction[0] == TURN_180DEG_RIGHT || Turn_Instruction[0] == TURN_180DEG_STRAIGHT))
 80041a8:	bf00      	nop
				}
			}

			if(Status == 0)
 80041aa:	4b3e      	ldr	r3, [pc, #248]	; (80042a4 <Running+0x4b4>)
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d109      	bne.n	80041c6 <Running+0x3d6>
			{
				Trans_flag = DATA_TRANS_DIS;
 80041b2:	4b3d      	ldr	r3, [pc, #244]	; (80042a8 <Running+0x4b8>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	701a      	strb	r2, [r3, #0]
				lcd_send_cmd(0x80 | 0x00);
 80041b8:	2080      	movs	r0, #128	; 0x80
 80041ba:	f7fd fe65 	bl	8001e88 <lcd_send_cmd>
				lcd_send_string("Car is Pause        ");
 80041be:	483b      	ldr	r0, [pc, #236]	; (80042ac <Running+0x4bc>)
 80041c0:	f7fd ff13 	bl	8001fea <lcd_send_string>
 80041c4:	e049      	b.n	800425a <Running+0x46a>
			}
			else
			{
				Trans_flag = DATA_TRANS_EN;
 80041c6:	4b38      	ldr	r3, [pc, #224]	; (80042a8 <Running+0x4b8>)
 80041c8:	2201      	movs	r2, #1
 80041ca:	701a      	strb	r2, [r3, #0]
				lcd_send_cmd(0x80 | 0x00);
 80041cc:	2080      	movs	r0, #128	; 0x80
 80041ce:	f7fd fe5b 	bl	8001e88 <lcd_send_cmd>
				lcd_send_string("Car is Running!        ");
 80041d2:	4837      	ldr	r0, [pc, #220]	; (80042b0 <Running+0x4c0>)
 80041d4:	f7fd ff09 	bl	8001fea <lcd_send_string>
 80041d8:	e03f      	b.n	800425a <Running+0x46a>
			}
		}
		else if(Begin_solving == 0)
 80041da:	4b36      	ldr	r3, [pc, #216]	; (80042b4 <Running+0x4c4>)
 80041dc:	f993 3000 	ldrsb.w	r3, [r3]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d13a      	bne.n	800425a <Running+0x46a>
		{
			MotorL_SetPWM(0);
 80041e4:	2000      	movs	r0, #0
 80041e6:	f7fd ff29 	bl	800203c <MotorL_SetPWM>
			MotorR_SetPWM(0);
 80041ea:	2000      	movs	r0, #0
 80041ec:	f7fd ff5c 	bl	80020a8 <MotorR_SetPWM>
		/*Reset value after done solving the matrix*/
			memset(Instruction,0,sizeof(Instruction));
 80041f0:	f107 0320 	add.w	r3, r7, #32
 80041f4:	2220      	movs	r2, #32
 80041f6:	2100      	movs	r1, #0
 80041f8:	4618      	mov	r0, r3
 80041fa:	f006 fef5 	bl	800afe8 <memset>
			memset(Map_Point,0,sizeof(Map_Point));
 80041fe:	f107 0310 	add.w	r3, r7, #16
 8004202:	2210      	movs	r2, #16
 8004204:	2100      	movs	r1, #0
 8004206:	4618      	mov	r0, r3
 8004208:	f006 feee 	bl	800afe8 <memset>
			memset(Turn_Instruction,0,sizeof(Turn_Instruction));
 800420c:	463b      	mov	r3, r7
 800420e:	2210      	movs	r2, #16
 8004210:	2100      	movs	r1, #0
 8004212:	4618      	mov	r0, r3
 8004214:	f006 fee8 	bl	800afe8 <memset>
			point_passed = -1;
 8004218:	23ff      	movs	r3, #255	; 0xff
 800421a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			Max_point = 0;
 800421e:	2300      	movs	r3, #0
 8004220:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
			Max_point_temp = 0;
 8004224:	2300      	movs	r3, #0
 8004226:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
			Temp_Line = 0;
 800422a:	2300      	movs	r3, #0
 800422c:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
			Spin_once = 0;
 8004230:	2300      	movs	r3, #0
 8004232:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
			Path_guidance = 1;
 8004236:	2301      	movs	r3, #1
 8004238:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
			Max_point = 0;
 800423c:	2300      	movs	r3, #0
 800423e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
			station_count = -1;
 8004242:	23ff      	movs	r3, #255	; 0xff
 8004244:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
			if(Read_RFID_Flag == 1){
 8004248:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800424c:	2b01      	cmp	r3, #1
 800424e:	d104      	bne.n	800425a <Running+0x46a>
				Read_RFID_CARD();
 8004250:	f000 f834 	bl	80042bc <Read_RFID_CARD>
				Read_RFID_Flag = 0;
 8004254:	2300      	movs	r3, #0
 8004256:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	while (cancel_running) {
 800425a:	4b17      	ldr	r3, [pc, #92]	; (80042b8 <Running+0x4c8>)
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	2b00      	cmp	r3, #0
 8004260:	f47f ade8 	bne.w	8003e34 <Running+0x44>
			}
		}
	}
	MotorL_SetPWM(0);
 8004264:	2000      	movs	r0, #0
 8004266:	f7fd fee9 	bl	800203c <MotorL_SetPWM>
	MotorR_SetPWM(0);
 800426a:	2000      	movs	r0, #0
 800426c:	f7fd ff1c 	bl	80020a8 <MotorR_SetPWM>
	lcd_clear();
 8004270:	f7fd fe6a 	bl	8001f48 <lcd_clear>
}
 8004274:	bf00      	nop
 8004276:	3754      	adds	r7, #84	; 0x54
 8004278:	46bd      	mov	sp, r7
 800427a:	bd90      	pop	{r4, r7, pc}
 800427c:	20000009 	.word	0x20000009
 8004280:	20000264 	.word	0x20000264
 8004284:	200004c4 	.word	0x200004c4
 8004288:	20000038 	.word	0x20000038
 800428c:	2000000e 	.word	0x2000000e
 8004290:	20000738 	.word	0x20000738
 8004294:	2000000c 	.word	0x2000000c
 8004298:	20000734 	.word	0x20000734
 800429c:	fffff31c 	.word	0xfffff31c
 80042a0:	fffff25e 	.word	0xfffff25e
 80042a4:	20000007 	.word	0x20000007
 80042a8:	2000026c 	.word	0x2000026c
 80042ac:	0800fc6c 	.word	0x0800fc6c
 80042b0:	0800fc3c 	.word	0x0800fc3c
 80042b4:	2000026f 	.word	0x2000026f
 80042b8:	20000006 	.word	0x20000006

080042bc <Read_RFID_CARD>:
void Read_RFID_CARD()
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b088      	sub	sp, #32
 80042c0:	af00      	add	r7, sp, #0
	uint8_t recover_position = 0;
 80042c2:	2300      	movs	r3, #0
 80042c4:	77fb      	strb	r3, [r7, #31]
	uint8_t enable = 1;
 80042c6:	2301      	movs	r3, #1
 80042c8:	77bb      	strb	r3, [r7, #30]
	char Card_Buffer_Str[4];
	char concat_Buff[20];
	memset(concat_Buff,0,sizeof(concat_Buff));
 80042ca:	1d3b      	adds	r3, r7, #4
 80042cc:	2214      	movs	r2, #20
 80042ce:	2100      	movs	r1, #0
 80042d0:	4618      	mov	r0, r3
 80042d2:	f006 fe89 	bl	800afe8 <memset>
	memset(Card_Buffer_Str,0,sizeof(Card_Buffer_Str));
 80042d6:	f107 0318 	add.w	r3, r7, #24
 80042da:	2204      	movs	r2, #4
 80042dc:	2100      	movs	r1, #0
 80042de:	4618      	mov	r0, r3
 80042e0:	f006 fe82 	bl	800afe8 <memset>
	MotorL_SetPWM(2500);
 80042e4:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80042e8:	f7fd fea8 	bl	800203c <MotorL_SetPWM>
	MotorR_SetPWM(2500);
 80042ec:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80042f0:	f7fd feda 	bl	80020a8 <MotorR_SetPWM>
	MFRC522_Init();
 80042f4:	f000 ffd1 	bl	800529a <MFRC522_Init>
	while(enable)
 80042f8:	e069      	b.n	80043ce <Read_RFID_CARD+0x112>
	{
		if (MFRC522_Check(CardID) == MI_OK)
 80042fa:	484d      	ldr	r0, [pc, #308]	; (8004430 <Read_RFID_CARD+0x174>)
 80042fc:	f000 fe02 	bl	8004f04 <MFRC522_Check>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d163      	bne.n	80043ce <Read_RFID_CARD+0x112>
		{
			MotorL_SetPWM(0);
 8004306:	2000      	movs	r0, #0
 8004308:	f7fd fe98 	bl	800203c <MotorL_SetPWM>
			MotorR_SetPWM(0);
 800430c:	2000      	movs	r0, #0
 800430e:	f7fd fecb 	bl	80020a8 <MotorR_SetPWM>
			sprintf(Card_Buffer_Str,"\"%02x",CardID[0]);
 8004312:	4b47      	ldr	r3, [pc, #284]	; (8004430 <Read_RFID_CARD+0x174>)
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	461a      	mov	r2, r3
 8004318:	f107 0318 	add.w	r3, r7, #24
 800431c:	4945      	ldr	r1, [pc, #276]	; (8004434 <Read_RFID_CARD+0x178>)
 800431e:	4618      	mov	r0, r3
 8004320:	f007 fad4 	bl	800b8cc <siprintf>
			strcat(concat_Buff,Card_Buffer_Str);
 8004324:	f107 0218 	add.w	r2, r7, #24
 8004328:	1d3b      	adds	r3, r7, #4
 800432a:	4611      	mov	r1, r2
 800432c:	4618      	mov	r0, r3
 800432e:	f007 faed 	bl	800b90c <strcat>
			sprintf(Card_Buffer_Str,"%02x",CardID[1]);
 8004332:	4b3f      	ldr	r3, [pc, #252]	; (8004430 <Read_RFID_CARD+0x174>)
 8004334:	785b      	ldrb	r3, [r3, #1]
 8004336:	461a      	mov	r2, r3
 8004338:	f107 0318 	add.w	r3, r7, #24
 800433c:	493e      	ldr	r1, [pc, #248]	; (8004438 <Read_RFID_CARD+0x17c>)
 800433e:	4618      	mov	r0, r3
 8004340:	f007 fac4 	bl	800b8cc <siprintf>
			strcat(concat_Buff,Card_Buffer_Str);
 8004344:	f107 0218 	add.w	r2, r7, #24
 8004348:	1d3b      	adds	r3, r7, #4
 800434a:	4611      	mov	r1, r2
 800434c:	4618      	mov	r0, r3
 800434e:	f007 fadd 	bl	800b90c <strcat>
			sprintf(Card_Buffer_Str,"%02x",CardID[2]);
 8004352:	4b37      	ldr	r3, [pc, #220]	; (8004430 <Read_RFID_CARD+0x174>)
 8004354:	789b      	ldrb	r3, [r3, #2]
 8004356:	461a      	mov	r2, r3
 8004358:	f107 0318 	add.w	r3, r7, #24
 800435c:	4936      	ldr	r1, [pc, #216]	; (8004438 <Read_RFID_CARD+0x17c>)
 800435e:	4618      	mov	r0, r3
 8004360:	f007 fab4 	bl	800b8cc <siprintf>
			strcat(concat_Buff,Card_Buffer_Str);
 8004364:	f107 0218 	add.w	r2, r7, #24
 8004368:	1d3b      	adds	r3, r7, #4
 800436a:	4611      	mov	r1, r2
 800436c:	4618      	mov	r0, r3
 800436e:	f007 facd 	bl	800b90c <strcat>
			sprintf(Card_Buffer_Str,"%02x",CardID[3]);
 8004372:	4b2f      	ldr	r3, [pc, #188]	; (8004430 <Read_RFID_CARD+0x174>)
 8004374:	78db      	ldrb	r3, [r3, #3]
 8004376:	461a      	mov	r2, r3
 8004378:	f107 0318 	add.w	r3, r7, #24
 800437c:	492e      	ldr	r1, [pc, #184]	; (8004438 <Read_RFID_CARD+0x17c>)
 800437e:	4618      	mov	r0, r3
 8004380:	f007 faa4 	bl	800b8cc <siprintf>
			strcat(concat_Buff,Card_Buffer_Str);
 8004384:	f107 0218 	add.w	r2, r7, #24
 8004388:	1d3b      	adds	r3, r7, #4
 800438a:	4611      	mov	r1, r2
 800438c:	4618      	mov	r0, r3
 800438e:	f007 fabd 	bl	800b90c <strcat>
			sprintf(Card_Buffer_Str,"%02x\"",CardID[4]);
 8004392:	4b27      	ldr	r3, [pc, #156]	; (8004430 <Read_RFID_CARD+0x174>)
 8004394:	791b      	ldrb	r3, [r3, #4]
 8004396:	461a      	mov	r2, r3
 8004398:	f107 0318 	add.w	r3, r7, #24
 800439c:	4927      	ldr	r1, [pc, #156]	; (800443c <Read_RFID_CARD+0x180>)
 800439e:	4618      	mov	r0, r3
 80043a0:	f007 fa94 	bl	800b8cc <siprintf>
			strcat(concat_Buff,Card_Buffer_Str);
 80043a4:	f107 0218 	add.w	r2, r7, #24
 80043a8:	1d3b      	adds	r3, r7, #4
 80043aa:	4611      	mov	r1, r2
 80043ac:	4618      	mov	r0, r3
 80043ae:	f007 faad 	bl	800b90c <strcat>
			strcpy(RFID_Str,concat_Buff);
 80043b2:	1d3b      	adds	r3, r7, #4
 80043b4:	4619      	mov	r1, r3
 80043b6:	4822      	ldr	r0, [pc, #136]	; (8004440 <Read_RFID_CARD+0x184>)
 80043b8:	f007 fab7 	bl	800b92a <strcpy>
			RFID_ID_ready = 1;
 80043bc:	4b21      	ldr	r3, [pc, #132]	; (8004444 <Read_RFID_CARD+0x188>)
 80043be:	2201      	movs	r2, #1
 80043c0:	701a      	strb	r2, [r3, #0]
			enable = 0;
 80043c2:	2300      	movs	r3, #0
 80043c4:	77bb      	strb	r3, [r7, #30]
			recover_position = 1;
 80043c6:	2301      	movs	r3, #1
 80043c8:	77fb      	strb	r3, [r7, #31]
			MFRC522_Reset();
 80043ca:	f000 ff8a 	bl	80052e2 <MFRC522_Reset>
	while(enable)
 80043ce:	7fbb      	ldrb	r3, [r7, #30]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d192      	bne.n	80042fa <Read_RFID_CARD+0x3e>
		}
	}
	while(recover_position)
 80043d4:	e01e      	b.n	8004414 <Read_RFID_CARD+0x158>
	{
		Sensor_Convert_A2D();
 80043d6:	f000 f991 	bl	80046fc <Sensor_Convert_A2D>
		MotorL_SetPWM(-2500);
 80043da:	481b      	ldr	r0, [pc, #108]	; (8004448 <Read_RFID_CARD+0x18c>)
 80043dc:	f7fd fe2e 	bl	800203c <MotorL_SetPWM>
		MotorR_SetPWM(-2500);
 80043e0:	4819      	ldr	r0, [pc, #100]	; (8004448 <Read_RFID_CARD+0x18c>)
 80043e2:	f7fd fe61 	bl	80020a8 <MotorR_SetPWM>
		if((LineDetect & 0b10000100) == 0b10000000 || (LineDetect & 0b10000100) == 0b00000100 || (LineDetect & 0b10000100) == 0b10000100)
 80043e6:	4b19      	ldr	r3, [pc, #100]	; (800444c <Read_RFID_CARD+0x190>)
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	f003 0384 	and.w	r3, r3, #132	; 0x84
 80043ee:	2b80      	cmp	r3, #128	; 0x80
 80043f0:	d00b      	beq.n	800440a <Read_RFID_CARD+0x14e>
 80043f2:	4b16      	ldr	r3, [pc, #88]	; (800444c <Read_RFID_CARD+0x190>)
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	f003 0384 	and.w	r3, r3, #132	; 0x84
 80043fa:	2b04      	cmp	r3, #4
 80043fc:	d005      	beq.n	800440a <Read_RFID_CARD+0x14e>
 80043fe:	4b13      	ldr	r3, [pc, #76]	; (800444c <Read_RFID_CARD+0x190>)
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	f003 0384 	and.w	r3, r3, #132	; 0x84
 8004406:	2b84      	cmp	r3, #132	; 0x84
 8004408:	d104      	bne.n	8004414 <Read_RFID_CARD+0x158>
		{
			HAL_Delay(250);
 800440a:	20fa      	movs	r0, #250	; 0xfa
 800440c:	f001 fcaa 	bl	8005d64 <HAL_Delay>
			recover_position = 0;
 8004410:	2300      	movs	r3, #0
 8004412:	77fb      	strb	r3, [r7, #31]
	while(recover_position)
 8004414:	7ffb      	ldrb	r3, [r7, #31]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1dd      	bne.n	80043d6 <Read_RFID_CARD+0x11a>
		}
	}
	MotorL_SetPWM(0);
 800441a:	2000      	movs	r0, #0
 800441c:	f7fd fe0e 	bl	800203c <MotorL_SetPWM>
	MotorR_SetPWM(0);
 8004420:	2000      	movs	r0, #0
 8004422:	f7fd fe41 	bl	80020a8 <MotorR_SetPWM>
}
 8004426:	bf00      	nop
 8004428:	3720      	adds	r7, #32
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	2000072c 	.word	0x2000072c
 8004434:	0800fc84 	.word	0x0800fc84
 8004438:	0800fc8c 	.word	0x0800fc8c
 800443c:	0800fc94 	.word	0x0800fc94
 8004440:	20000024 	.word	0x20000024
 8004444:	20000271 	.word	0x20000271
 8004448:	fffff63c 	.word	0xfffff63c
 800444c:	20000264 	.word	0x20000264

08004450 <Left_Turn>:

static void Left_Turn()
{
 8004450:	b580      	push	{r7, lr}
 8004452:	af00      	add	r7, sp, #0
	MotorR_SetPWM(4900);
 8004454:	f241 3024 	movw	r0, #4900	; 0x1324
 8004458:	f7fd fe26 	bl	80020a8 <MotorR_SetPWM>
	MotorL_SetPWM(-3000);
 800445c:	480c      	ldr	r0, [pc, #48]	; (8004490 <Left_Turn+0x40>)
 800445e:	f7fd fded 	bl	800203c <MotorL_SetPWM>
	HAL_Delay(160);
 8004462:	20a0      	movs	r0, #160	; 0xa0
 8004464:	f001 fc7e 	bl	8005d64 <HAL_Delay>
	while((LineDetect & 0b11000000) <= 64)
 8004468:	e001      	b.n	800446e <Left_Turn+0x1e>
	{
		Sensor_Convert_A2D();
 800446a:	f000 f947 	bl	80046fc <Sensor_Convert_A2D>
	while((LineDetect & 0b11000000) <= 64)
 800446e:	4b09      	ldr	r3, [pc, #36]	; (8004494 <Left_Turn+0x44>)
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004476:	2b40      	cmp	r3, #64	; 0x40
 8004478:	ddf7      	ble.n	800446a <Left_Turn+0x1a>
	}
	while(LineDetect != 0b00010000)
 800447a:	e001      	b.n	8004480 <Left_Turn+0x30>
	{
		Sensor_Convert_A2D();
 800447c:	f000 f93e 	bl	80046fc <Sensor_Convert_A2D>
	while(LineDetect != 0b00010000)
 8004480:	4b04      	ldr	r3, [pc, #16]	; (8004494 <Left_Turn+0x44>)
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	2b10      	cmp	r3, #16
 8004486:	d1f9      	bne.n	800447c <Left_Turn+0x2c>
	}
}
 8004488:	bf00      	nop
 800448a:	bf00      	nop
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	fffff448 	.word	0xfffff448
 8004494:	20000264 	.word	0x20000264

08004498 <Right_Turn>:
static void Right_Turn()
{
 8004498:	b580      	push	{r7, lr}
 800449a:	af00      	add	r7, sp, #0
	MotorL_SetPWM(5400);
 800449c:	f241 5018 	movw	r0, #5400	; 0x1518
 80044a0:	f7fd fdcc 	bl	800203c <MotorL_SetPWM>
	MotorR_SetPWM(-3900);
 80044a4:	480a      	ldr	r0, [pc, #40]	; (80044d0 <Right_Turn+0x38>)
 80044a6:	f7fd fdff 	bl	80020a8 <MotorR_SetPWM>
	while((LineDetect & 0b00001100) <= 8)
 80044aa:	e001      	b.n	80044b0 <Right_Turn+0x18>
	{
		Sensor_Convert_A2D();
 80044ac:	f000 f926 	bl	80046fc <Sensor_Convert_A2D>
	while((LineDetect & 0b00001100) <= 8)
 80044b0:	4b08      	ldr	r3, [pc, #32]	; (80044d4 <Right_Turn+0x3c>)
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	f003 030c 	and.w	r3, r3, #12
 80044b8:	2b08      	cmp	r3, #8
 80044ba:	ddf7      	ble.n	80044ac <Right_Turn+0x14>
	}
	while(LineDetect != 0b00010000)
 80044bc:	e001      	b.n	80044c2 <Right_Turn+0x2a>
	{
		Sensor_Convert_A2D();
 80044be:	f000 f91d 	bl	80046fc <Sensor_Convert_A2D>
	while(LineDetect != 0b00010000)
 80044c2:	4b04      	ldr	r3, [pc, #16]	; (80044d4 <Right_Turn+0x3c>)
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	2b10      	cmp	r3, #16
 80044c8:	d1f9      	bne.n	80044be <Right_Turn+0x26>
	}
}
 80044ca:	bf00      	nop
 80044cc:	bf00      	nop
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	fffff0c4 	.word	0xfffff0c4
 80044d4:	20000264 	.word	0x20000264

080044d8 <Turn_180_Deg>:
static void Turn_180_Deg()
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	af00      	add	r7, sp, #0
	MotorL_SetPWM(6200);
 80044dc:	f641 0038 	movw	r0, #6200	; 0x1838
 80044e0:	f7fd fdac 	bl	800203c <MotorL_SetPWM>
	MotorR_SetPWM(-6200);
 80044e4:	480d      	ldr	r0, [pc, #52]	; (800451c <Turn_180_Deg+0x44>)
 80044e6:	f7fd fddf 	bl	80020a8 <MotorR_SetPWM>
	while(LineDetect != 0b00000000)
 80044ea:	e001      	b.n	80044f0 <Turn_180_Deg+0x18>
	{
		Sensor_Convert_A2D();
 80044ec:	f000 f906 	bl	80046fc <Sensor_Convert_A2D>
	while(LineDetect != 0b00000000)
 80044f0:	4b0b      	ldr	r3, [pc, #44]	; (8004520 <Turn_180_Deg+0x48>)
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d1f9      	bne.n	80044ec <Turn_180_Deg+0x14>
	}
	while(LineDetect <= 3)
 80044f8:	e001      	b.n	80044fe <Turn_180_Deg+0x26>
	{
		Sensor_Convert_A2D();
 80044fa:	f000 f8ff 	bl	80046fc <Sensor_Convert_A2D>
	while(LineDetect <= 3)
 80044fe:	4b08      	ldr	r3, [pc, #32]	; (8004520 <Turn_180_Deg+0x48>)
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	2b03      	cmp	r3, #3
 8004504:	d9f9      	bls.n	80044fa <Turn_180_Deg+0x22>
	}
	while(LineDetect != 0b00010000)
 8004506:	e001      	b.n	800450c <Turn_180_Deg+0x34>
	{
		Sensor_Convert_A2D();
 8004508:	f000 f8f8 	bl	80046fc <Sensor_Convert_A2D>
	while(LineDetect != 0b00010000)
 800450c:	4b04      	ldr	r3, [pc, #16]	; (8004520 <Turn_180_Deg+0x48>)
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	2b10      	cmp	r3, #16
 8004512:	d1f9      	bne.n	8004508 <Turn_180_Deg+0x30>
	}
}
 8004514:	bf00      	nop
 8004516:	bf00      	nop
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	ffffe7c8 	.word	0xffffe7c8
 8004520:	20000264 	.word	0x20000264

08004524 <Go_Straight>:
static void Go_Straight()
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b082      	sub	sp, #8
 8004528:	af00      	add	r7, sp, #0
	int16_t PID_Val = Line_Follower_PID(3500,3500,&Car);
 800452a:	4a1f      	ldr	r2, [pc, #124]	; (80045a8 <Go_Straight+0x84>)
 800452c:	f640 51ac 	movw	r1, #3500	; 0xdac
 8004530:	f640 50ac 	movw	r0, #3500	; 0xdac
 8004534:	f7fe fd8c 	bl	8003050 <Line_Follower_PID>
 8004538:	4603      	mov	r3, r0
 800453a:	80fb      	strh	r3, [r7, #6]
	Motor_Speed_R = (Right + PID_Val);
 800453c:	4b1b      	ldr	r3, [pc, #108]	; (80045ac <Go_Straight+0x88>)
 800453e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004542:	461a      	mov	r2, r3
 8004544:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004548:	4413      	add	r3, r2
 800454a:	4a19      	ldr	r2, [pc, #100]	; (80045b0 <Go_Straight+0x8c>)
 800454c:	6013      	str	r3, [r2, #0]
	Motor_Speed_L = (Left - PID_Val);
 800454e:	4b19      	ldr	r3, [pc, #100]	; (80045b4 <Go_Straight+0x90>)
 8004550:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004554:	461a      	mov	r2, r3
 8004556:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	4a16      	ldr	r2, [pc, #88]	; (80045b8 <Go_Straight+0x94>)
 800455e:	6013      	str	r3, [r2, #0]
	Motor_Speed_R = Constraint(Motor_Speed_R, -MAXSPEED_RIGHT,MAXSPEED_RIGHT);
 8004560:	4b13      	ldr	r3, [pc, #76]	; (80045b0 <Go_Straight+0x8c>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f640 42e4 	movw	r2, #3300	; 0xce4
 8004568:	4914      	ldr	r1, [pc, #80]	; (80045bc <Go_Straight+0x98>)
 800456a:	4618      	mov	r0, r3
 800456c:	f000 f8a8 	bl	80046c0 <Constraint>
 8004570:	4603      	mov	r3, r0
 8004572:	4a0f      	ldr	r2, [pc, #60]	; (80045b0 <Go_Straight+0x8c>)
 8004574:	6013      	str	r3, [r2, #0]
	Motor_Speed_L = Constraint(Motor_Speed_L, -MAXSPEED_LEFT,MAXSPEED_LEFT);
 8004576:	4b10      	ldr	r3, [pc, #64]	; (80045b8 <Go_Straight+0x94>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f640 52a2 	movw	r2, #3490	; 0xda2
 800457e:	4910      	ldr	r1, [pc, #64]	; (80045c0 <Go_Straight+0x9c>)
 8004580:	4618      	mov	r0, r3
 8004582:	f000 f89d 	bl	80046c0 <Constraint>
 8004586:	4603      	mov	r3, r0
 8004588:	4a0b      	ldr	r2, [pc, #44]	; (80045b8 <Go_Straight+0x94>)
 800458a:	6013      	str	r3, [r2, #0]
	MotorR_SetPWM(Motor_Speed_R);
 800458c:	4b08      	ldr	r3, [pc, #32]	; (80045b0 <Go_Straight+0x8c>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4618      	mov	r0, r3
 8004592:	f7fd fd89 	bl	80020a8 <MotorR_SetPWM>
	MotorL_SetPWM(Motor_Speed_L);
 8004596:	4b08      	ldr	r3, [pc, #32]	; (80045b8 <Go_Straight+0x94>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4618      	mov	r0, r3
 800459c:	f7fd fd4e 	bl	800203c <MotorL_SetPWM>
}
 80045a0:	bf00      	nop
 80045a2:	3708      	adds	r7, #8
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	20000038 	.word	0x20000038
 80045ac:	2000000e 	.word	0x2000000e
 80045b0:	20000738 	.word	0x20000738
 80045b4:	2000000c 	.word	0x2000000c
 80045b8:	20000734 	.word	0x20000734
 80045bc:	fffff31c 	.word	0xfffff31c
 80045c0:	fffff25e 	.word	0xfffff25e

080045c4 <Error_Return>:
static int Error_Return (uint8_t Sensor_Array){
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	4603      	mov	r3, r0
 80045cc:	71fb      	strb	r3, [r7, #7]
	switch(Sensor_Array){
 80045ce:	79fb      	ldrb	r3, [r7, #7]
 80045d0:	2b60      	cmp	r3, #96	; 0x60
 80045d2:	d066      	beq.n	80046a2 <Error_Return+0xde>
 80045d4:	2b60      	cmp	r3, #96	; 0x60
 80045d6:	dc6a      	bgt.n	80046ae <Error_Return+0xea>
 80045d8:	2b40      	cmp	r3, #64	; 0x40
 80045da:	d065      	beq.n	80046a8 <Error_Return+0xe4>
 80045dc:	2b40      	cmp	r3, #64	; 0x40
 80045de:	dc66      	bgt.n	80046ae <Error_Return+0xea>
 80045e0:	2b20      	cmp	r3, #32
 80045e2:	dc49      	bgt.n	8004678 <Error_Return+0xb4>
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	db62      	blt.n	80046ae <Error_Return+0xea>
 80045e8:	2b20      	cmp	r3, #32
 80045ea:	d860      	bhi.n	80046ae <Error_Return+0xea>
 80045ec:	a201      	add	r2, pc, #4	; (adr r2, 80045f4 <Error_Return+0x30>)
 80045ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f2:	bf00      	nop
 80045f4:	08004691 	.word	0x08004691
 80045f8:	080046af 	.word	0x080046af
 80045fc:	080046af 	.word	0x080046af
 8004600:	080046af 	.word	0x080046af
 8004604:	080046af 	.word	0x080046af
 8004608:	080046af 	.word	0x080046af
 800460c:	080046af 	.word	0x080046af
 8004610:	080046af 	.word	0x080046af
 8004614:	0800467f 	.word	0x0800467f
 8004618:	080046af 	.word	0x080046af
 800461c:	080046af 	.word	0x080046af
 8004620:	080046af 	.word	0x080046af
 8004624:	080046af 	.word	0x080046af
 8004628:	080046af 	.word	0x080046af
 800462c:	080046af 	.word	0x080046af
 8004630:	080046af 	.word	0x080046af
 8004634:	0800468b 	.word	0x0800468b
 8004638:	080046af 	.word	0x080046af
 800463c:	080046af 	.word	0x080046af
 8004640:	080046af 	.word	0x080046af
 8004644:	080046af 	.word	0x080046af
 8004648:	080046af 	.word	0x080046af
 800464c:	080046af 	.word	0x080046af
 8004650:	080046af 	.word	0x080046af
 8004654:	08004685 	.word	0x08004685
 8004658:	080046af 	.word	0x080046af
 800465c:	080046af 	.word	0x080046af
 8004660:	080046af 	.word	0x080046af
 8004664:	080046af 	.word	0x080046af
 8004668:	080046af 	.word	0x080046af
 800466c:	080046af 	.word	0x080046af
 8004670:	080046af 	.word	0x080046af
 8004674:	0800469d 	.word	0x0800469d
 8004678:	2b30      	cmp	r3, #48	; 0x30
 800467a:	d00c      	beq.n	8004696 <Error_Return+0xd2>
 800467c:	e017      	b.n	80046ae <Error_Return+0xea>
	case 0b00001000:
		return 4100;
 800467e:	f241 0304 	movw	r3, #4100	; 0x1004
 8004682:	e016      	b.n	80046b2 <Error_Return+0xee>
		break;
	case 0b00011000:
		return 3900;
 8004684:	f640 733c 	movw	r3, #3900	; 0xf3c
 8004688:	e013      	b.n	80046b2 <Error_Return+0xee>
		break;

	case 0b00010000:
		return 3700;
 800468a:	f640 6374 	movw	r3, #3700	; 0xe74
 800468e:	e010      	b.n	80046b2 <Error_Return+0xee>
		break;

	case 0b00000000:
		return 3500;
 8004690:	f640 53ac 	movw	r3, #3500	; 0xdac
 8004694:	e00d      	b.n	80046b2 <Error_Return+0xee>
		break;

	case 0b00110000:
		return 3500;
 8004696:	f640 53ac 	movw	r3, #3500	; 0xdac
 800469a:	e00a      	b.n	80046b2 <Error_Return+0xee>
		break;

	case 0b00100000:
		return 3300;
 800469c:	f640 43e4 	movw	r3, #3300	; 0xce4
 80046a0:	e007      	b.n	80046b2 <Error_Return+0xee>
		break;

	case 0b01100000:
		return 3100;
 80046a2:	f640 431c 	movw	r3, #3100	; 0xc1c
 80046a6:	e004      	b.n	80046b2 <Error_Return+0xee>
		break;
	case 0b01000000:
		return 2900;
 80046a8:	f640 3354 	movw	r3, #2900	; 0xb54
 80046ac:	e001      	b.n	80046b2 <Error_Return+0xee>
		break;
/*---------------------dont care------------------------*/
	default:
		return 3500;
 80046ae:	f640 53ac 	movw	r3, #3500	; 0xdac
		break;
	}
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	370c      	adds	r7, #12
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop

080046c0 <Constraint>:
static int Constraint (int Present_Value,int Min,int Max){
 80046c0:	b480      	push	{r7}
 80046c2:	b085      	sub	sp, #20
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	607a      	str	r2, [r7, #4]
	if(Present_Value > Max){
 80046cc:	68fa      	ldr	r2, [r7, #12]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	dd03      	ble.n	80046dc <Constraint+0x1c>
		return Present_Value = Max;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	60fb      	str	r3, [r7, #12]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	e008      	b.n	80046ee <Constraint+0x2e>
	}
	else if (Present_Value < Min ){
 80046dc:	68fa      	ldr	r2, [r7, #12]
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	da03      	bge.n	80046ec <Constraint+0x2c>
		return Present_Value = Min;
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	60fb      	str	r3, [r7, #12]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	e000      	b.n	80046ee <Constraint+0x2e>
	}
	else
		return Present_Value;
 80046ec:	68fb      	ldr	r3, [r7, #12]
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3714      	adds	r7, #20
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr
	...

080046fc <Sensor_Convert_A2D>:
static void Sensor_Convert_A2D()
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
	LineDetect = 0;
 8004702:	4b16      	ldr	r3, [pc, #88]	; (800475c <Sensor_Convert_A2D+0x60>)
 8004704:	2200      	movs	r2, #0
 8004706:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 6; ++i)
 8004708:	2300      	movs	r3, #0
 800470a:	607b      	str	r3, [r7, #4]
 800470c:	e01b      	b.n	8004746 <Sensor_Convert_A2D+0x4a>
	{
		if (Sensor_ADC_Value[i] < Sensor_Threshold[i])
 800470e:	4a14      	ldr	r2, [pc, #80]	; (8004760 <Sensor_Convert_A2D+0x64>)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8004716:	4913      	ldr	r1, [pc, #76]	; (8004764 <Sensor_Convert_A2D+0x68>)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800471e:	429a      	cmp	r2, r3
 8004720:	d20e      	bcs.n	8004740 <Sensor_Convert_A2D+0x44>
		{
			sbi(LineDetect, (7 - i));
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f1c3 0307 	rsb	r3, r3, #7
 8004728:	2201      	movs	r2, #1
 800472a:	fa02 f303 	lsl.w	r3, r2, r3
 800472e:	b25a      	sxtb	r2, r3
 8004730:	4b0a      	ldr	r3, [pc, #40]	; (800475c <Sensor_Convert_A2D+0x60>)
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	b25b      	sxtb	r3, r3
 8004736:	4313      	orrs	r3, r2
 8004738:	b25b      	sxtb	r3, r3
 800473a:	b2da      	uxtb	r2, r3
 800473c:	4b07      	ldr	r3, [pc, #28]	; (800475c <Sensor_Convert_A2D+0x60>)
 800473e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 6; ++i)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	3301      	adds	r3, #1
 8004744:	607b      	str	r3, [r7, #4]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2b05      	cmp	r3, #5
 800474a:	dde0      	ble.n	800470e <Sensor_Convert_A2D+0x12>
//			printf("0 ");
		}
	}
//	printf("\n");
//	HAL_Delay(100);
}
 800474c:	bf00      	nop
 800474e:	bf00      	nop
 8004750:	370c      	adds	r7, #12
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	20000264 	.word	0x20000264
 8004760:	200004a8 	.word	0x200004a8
 8004764:	20000010 	.word	0x20000010

08004768 <ScrollUp>:
		char buffer[6];
		itoa (LineDetect,buffer,2);
		printf ("binary: %s\n",buffer);
}
void ScrollUp(void)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(ButtonA_GPIO_Port, ButtonA_Pin) == 0)
 800476c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004770:	4883      	ldr	r0, [pc, #524]	; (8004980 <ScrollUp+0x218>)
 8004772:	f002 fef9 	bl	8007568 <HAL_GPIO_ReadPin>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	f040 80f6 	bne.w	800496a <ScrollUp+0x202>
	{
		while (HAL_GPIO_ReadPin(ButtonA_GPIO_Port, ButtonA_Pin) == 0)
 800477e:	e002      	b.n	8004786 <ScrollUp+0x1e>
		{
			HAL_Delay(50);
 8004780:	2032      	movs	r0, #50	; 0x32
 8004782:	f001 faef 	bl	8005d64 <HAL_Delay>
		while (HAL_GPIO_ReadPin(ButtonA_GPIO_Port, ButtonA_Pin) == 0)
 8004786:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800478a:	487d      	ldr	r0, [pc, #500]	; (8004980 <ScrollUp+0x218>)
 800478c:	f002 feec 	bl	8007568 <HAL_GPIO_ReadPin>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d0f4      	beq.n	8004780 <ScrollUp+0x18>
		}
		switch (Menu_type)
 8004796:	4b7b      	ldr	r3, [pc, #492]	; (8004984 <ScrollUp+0x21c>)
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	3b01      	subs	r3, #1
 800479c:	2b07      	cmp	r3, #7
 800479e:	f200 80ed 	bhi.w	800497c <ScrollUp+0x214>
 80047a2:	a201      	add	r2, pc, #4	; (adr r2, 80047a8 <ScrollUp+0x40>)
 80047a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047a8:	080047c9 	.word	0x080047c9
 80047ac:	0800497d 	.word	0x0800497d
 80047b0:	080047e7 	.word	0x080047e7
 80047b4:	0800486b 	.word	0x0800486b
 80047b8:	0800497d 	.word	0x0800497d
 80047bc:	0800497d 	.word	0x0800497d
 80047c0:	0800497d 	.word	0x0800497d
 80047c4:	080048ef 	.word	0x080048ef
		{
		case Main_menu:
			line--;
 80047c8:	4b6f      	ldr	r3, [pc, #444]	; (8004988 <ScrollUp+0x220>)
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	3b01      	subs	r3, #1
 80047ce:	b2da      	uxtb	r2, r3
 80047d0:	4b6d      	ldr	r3, [pc, #436]	; (8004988 <ScrollUp+0x220>)
 80047d2:	701a      	strb	r2, [r3, #0]
			if (line < Number_of_Menu_firstline)
 80047d4:	4b6c      	ldr	r3, [pc, #432]	; (8004988 <ScrollUp+0x220>)
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	f040 80c8 	bne.w	800496e <ScrollUp+0x206>
			{
				line = Maximum_Menu_line;
 80047de:	4b6a      	ldr	r3, [pc, #424]	; (8004988 <ScrollUp+0x220>)
 80047e0:	2208      	movs	r2, #8
 80047e2:	701a      	strb	r2, [r3, #0]
			}
			break;
 80047e4:	e0c3      	b.n	800496e <ScrollUp+0x206>
		case PID_Menu:
			line--;
 80047e6:	4b68      	ldr	r3, [pc, #416]	; (8004988 <ScrollUp+0x220>)
 80047e8:	781b      	ldrb	r3, [r3, #0]
 80047ea:	3b01      	subs	r3, #1
 80047ec:	b2da      	uxtb	r2, r3
 80047ee:	4b66      	ldr	r3, [pc, #408]	; (8004988 <ScrollUp+0x220>)
 80047f0:	701a      	strb	r2, [r3, #0]
			if (line < Number_of_Menu_firstline)
 80047f2:	4b65      	ldr	r3, [pc, #404]	; (8004988 <ScrollUp+0x220>)
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d102      	bne.n	8004800 <ScrollUp+0x98>
			{
				line = Maximum_PID_line;
 80047fa:	4b63      	ldr	r3, [pc, #396]	; (8004988 <ScrollUp+0x220>)
 80047fc:	2204      	movs	r2, #4
 80047fe:	701a      	strb	r2, [r3, #0]
			}
			if (Kp_modify_flag == 1)
 8004800:	4b62      	ldr	r3, [pc, #392]	; (800498c <ScrollUp+0x224>)
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	2b01      	cmp	r3, #1
 8004806:	d10c      	bne.n	8004822 <ScrollUp+0xba>
			{
				Kp += Kp_amount;
 8004808:	4b61      	ldr	r3, [pc, #388]	; (8004990 <ScrollUp+0x228>)
 800480a:	edd3 7a00 	vldr	s15, [r3]
 800480e:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8004994 <ScrollUp+0x22c>
 8004812:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004816:	4b5e      	ldr	r3, [pc, #376]	; (8004990 <ScrollUp+0x228>)
 8004818:	edc3 7a00 	vstr	s15, [r3]
				line = 1;
 800481c:	4b5a      	ldr	r3, [pc, #360]	; (8004988 <ScrollUp+0x220>)
 800481e:	2201      	movs	r2, #1
 8004820:	701a      	strb	r2, [r3, #0]
			}
			if (Ki_modify_flag == 1)
 8004822:	4b5d      	ldr	r3, [pc, #372]	; (8004998 <ScrollUp+0x230>)
 8004824:	781b      	ldrb	r3, [r3, #0]
 8004826:	2b01      	cmp	r3, #1
 8004828:	d10c      	bne.n	8004844 <ScrollUp+0xdc>
			{
				Ki += Ki_amount;
 800482a:	4b5c      	ldr	r3, [pc, #368]	; (800499c <ScrollUp+0x234>)
 800482c:	edd3 7a00 	vldr	s15, [r3]
 8004830:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8004994 <ScrollUp+0x22c>
 8004834:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004838:	4b58      	ldr	r3, [pc, #352]	; (800499c <ScrollUp+0x234>)
 800483a:	edc3 7a00 	vstr	s15, [r3]
				line = 2;
 800483e:	4b52      	ldr	r3, [pc, #328]	; (8004988 <ScrollUp+0x220>)
 8004840:	2202      	movs	r2, #2
 8004842:	701a      	strb	r2, [r3, #0]
			}
			if (Kd_modify_flag == 1)
 8004844:	4b56      	ldr	r3, [pc, #344]	; (80049a0 <ScrollUp+0x238>)
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	2b01      	cmp	r3, #1
 800484a:	f040 8092 	bne.w	8004972 <ScrollUp+0x20a>
			{
				Kd += Kd_amount;
 800484e:	4b55      	ldr	r3, [pc, #340]	; (80049a4 <ScrollUp+0x23c>)
 8004850:	edd3 7a00 	vldr	s15, [r3]
 8004854:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8004994 <ScrollUp+0x22c>
 8004858:	ee77 7a87 	vadd.f32	s15, s15, s14
 800485c:	4b51      	ldr	r3, [pc, #324]	; (80049a4 <ScrollUp+0x23c>)
 800485e:	edc3 7a00 	vstr	s15, [r3]
				line = 3;
 8004862:	4b49      	ldr	r3, [pc, #292]	; (8004988 <ScrollUp+0x220>)
 8004864:	2203      	movs	r2, #3
 8004866:	701a      	strb	r2, [r3, #0]
			}
			break;
 8004868:	e083      	b.n	8004972 <ScrollUp+0x20a>
		case Engine_menu:
			line--;
 800486a:	4b47      	ldr	r3, [pc, #284]	; (8004988 <ScrollUp+0x220>)
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	3b01      	subs	r3, #1
 8004870:	b2da      	uxtb	r2, r3
 8004872:	4b45      	ldr	r3, [pc, #276]	; (8004988 <ScrollUp+0x220>)
 8004874:	701a      	strb	r2, [r3, #0]
			if (line < Number_of_Menu_firstline)
 8004876:	4b44      	ldr	r3, [pc, #272]	; (8004988 <ScrollUp+0x220>)
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d102      	bne.n	8004884 <ScrollUp+0x11c>
			{
				line = Maximum_Engine_line;
 800487e:	4b42      	ldr	r3, [pc, #264]	; (8004988 <ScrollUp+0x220>)
 8004880:	2203      	movs	r2, #3
 8004882:	701a      	strb	r2, [r3, #0]
			}
			if (Left_modify_flag == 1)
 8004884:	4b48      	ldr	r3, [pc, #288]	; (80049a8 <ScrollUp+0x240>)
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	2b01      	cmp	r3, #1
 800488a:	d115      	bne.n	80048b8 <ScrollUp+0x150>
			{
				Left += 100;
 800488c:	4b47      	ldr	r3, [pc, #284]	; (80049ac <ScrollUp+0x244>)
 800488e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004892:	b29b      	uxth	r3, r3
 8004894:	3364      	adds	r3, #100	; 0x64
 8004896:	b29b      	uxth	r3, r3
 8004898:	b21a      	sxth	r2, r3
 800489a:	4b44      	ldr	r3, [pc, #272]	; (80049ac <ScrollUp+0x244>)
 800489c:	801a      	strh	r2, [r3, #0]
				line = 1;
 800489e:	4b3a      	ldr	r3, [pc, #232]	; (8004988 <ScrollUp+0x220>)
 80048a0:	2201      	movs	r2, #1
 80048a2:	701a      	strb	r2, [r3, #0]
				if (Left >= 7200)
 80048a4:	4b41      	ldr	r3, [pc, #260]	; (80049ac <ScrollUp+0x244>)
 80048a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80048aa:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 80048ae:	db03      	blt.n	80048b8 <ScrollUp+0x150>
				{
					Left = 7200;
 80048b0:	4b3e      	ldr	r3, [pc, #248]	; (80049ac <ScrollUp+0x244>)
 80048b2:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 80048b6:	801a      	strh	r2, [r3, #0]
				}
			}
			if (Right_modify_flag == 1)
 80048b8:	4b3d      	ldr	r3, [pc, #244]	; (80049b0 <ScrollUp+0x248>)
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d15a      	bne.n	8004976 <ScrollUp+0x20e>
			{
				Right += 100;
 80048c0:	4b3c      	ldr	r3, [pc, #240]	; (80049b4 <ScrollUp+0x24c>)
 80048c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	3364      	adds	r3, #100	; 0x64
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	b21a      	sxth	r2, r3
 80048ce:	4b39      	ldr	r3, [pc, #228]	; (80049b4 <ScrollUp+0x24c>)
 80048d0:	801a      	strh	r2, [r3, #0]
				line = 2;
 80048d2:	4b2d      	ldr	r3, [pc, #180]	; (8004988 <ScrollUp+0x220>)
 80048d4:	2202      	movs	r2, #2
 80048d6:	701a      	strb	r2, [r3, #0]
				if (Right >= 7200)
 80048d8:	4b36      	ldr	r3, [pc, #216]	; (80049b4 <ScrollUp+0x24c>)
 80048da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80048de:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 80048e2:	db48      	blt.n	8004976 <ScrollUp+0x20e>
				{
					Right = 7200;
 80048e4:	4b33      	ldr	r3, [pc, #204]	; (80049b4 <ScrollUp+0x24c>)
 80048e6:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 80048ea:	801a      	strh	r2, [r3, #0]
				}
			}
			break;
 80048ec:	e043      	b.n	8004976 <ScrollUp+0x20e>
		case Path_solver:
			line--;
 80048ee:	4b26      	ldr	r3, [pc, #152]	; (8004988 <ScrollUp+0x220>)
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	3b01      	subs	r3, #1
 80048f4:	b2da      	uxtb	r2, r3
 80048f6:	4b24      	ldr	r3, [pc, #144]	; (8004988 <ScrollUp+0x220>)
 80048f8:	701a      	strb	r2, [r3, #0]
			if (line < Number_of_Menu_firstline)
 80048fa:	4b23      	ldr	r3, [pc, #140]	; (8004988 <ScrollUp+0x220>)
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d102      	bne.n	8004908 <ScrollUp+0x1a0>
			{
				line = Maximum_Path_Solver_line;
 8004902:	4b21      	ldr	r3, [pc, #132]	; (8004988 <ScrollUp+0x220>)
 8004904:	2204      	movs	r2, #4
 8004906:	701a      	strb	r2, [r3, #0]
			}
			if (First_point_modify_flag == 1)
 8004908:	4b2b      	ldr	r3, [pc, #172]	; (80049b8 <ScrollUp+0x250>)
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	2b01      	cmp	r3, #1
 800490e:	d113      	bne.n	8004938 <ScrollUp+0x1d0>
			{
				First_point += 1;
 8004910:	4b2a      	ldr	r3, [pc, #168]	; (80049bc <ScrollUp+0x254>)
 8004912:	f993 3000 	ldrsb.w	r3, [r3]
 8004916:	b2db      	uxtb	r3, r3
 8004918:	3301      	adds	r3, #1
 800491a:	b2db      	uxtb	r3, r3
 800491c:	b25a      	sxtb	r2, r3
 800491e:	4b27      	ldr	r3, [pc, #156]	; (80049bc <ScrollUp+0x254>)
 8004920:	701a      	strb	r2, [r3, #0]
				line = 1;
 8004922:	4b19      	ldr	r3, [pc, #100]	; (8004988 <ScrollUp+0x220>)
 8004924:	2201      	movs	r2, #1
 8004926:	701a      	strb	r2, [r3, #0]
				if(First_point>11)
 8004928:	4b24      	ldr	r3, [pc, #144]	; (80049bc <ScrollUp+0x254>)
 800492a:	f993 3000 	ldrsb.w	r3, [r3]
 800492e:	2b0b      	cmp	r3, #11
 8004930:	dd02      	ble.n	8004938 <ScrollUp+0x1d0>
				{
					First_point = 0;
 8004932:	4b22      	ldr	r3, [pc, #136]	; (80049bc <ScrollUp+0x254>)
 8004934:	2200      	movs	r2, #0
 8004936:	701a      	strb	r2, [r3, #0]
				}
			}
			if (Last_point_modify_flag == 1)
 8004938:	4b21      	ldr	r3, [pc, #132]	; (80049c0 <ScrollUp+0x258>)
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	2b01      	cmp	r3, #1
 800493e:	d11c      	bne.n	800497a <ScrollUp+0x212>
			{
				Last_point += 1;
 8004940:	4b20      	ldr	r3, [pc, #128]	; (80049c4 <ScrollUp+0x25c>)
 8004942:	f993 3000 	ldrsb.w	r3, [r3]
 8004946:	b2db      	uxtb	r3, r3
 8004948:	3301      	adds	r3, #1
 800494a:	b2db      	uxtb	r3, r3
 800494c:	b25a      	sxtb	r2, r3
 800494e:	4b1d      	ldr	r3, [pc, #116]	; (80049c4 <ScrollUp+0x25c>)
 8004950:	701a      	strb	r2, [r3, #0]
				line = 2;
 8004952:	4b0d      	ldr	r3, [pc, #52]	; (8004988 <ScrollUp+0x220>)
 8004954:	2202      	movs	r2, #2
 8004956:	701a      	strb	r2, [r3, #0]
				if(Last_point>11)
 8004958:	4b1a      	ldr	r3, [pc, #104]	; (80049c4 <ScrollUp+0x25c>)
 800495a:	f993 3000 	ldrsb.w	r3, [r3]
 800495e:	2b0b      	cmp	r3, #11
 8004960:	dd0b      	ble.n	800497a <ScrollUp+0x212>
				{
					Last_point = 0;
 8004962:	4b18      	ldr	r3, [pc, #96]	; (80049c4 <ScrollUp+0x25c>)
 8004964:	2200      	movs	r2, #0
 8004966:	701a      	strb	r2, [r3, #0]
				}
			}
			break;
 8004968:	e007      	b.n	800497a <ScrollUp+0x212>
		}
	}
 800496a:	bf00      	nop
 800496c:	e006      	b.n	800497c <ScrollUp+0x214>
			break;
 800496e:	bf00      	nop
 8004970:	e004      	b.n	800497c <ScrollUp+0x214>
			break;
 8004972:	bf00      	nop
 8004974:	e002      	b.n	800497c <ScrollUp+0x214>
			break;
 8004976:	bf00      	nop
 8004978:	e000      	b.n	800497c <ScrollUp+0x214>
			break;
 800497a:	bf00      	nop
}
 800497c:	bf00      	nop
 800497e:	bd80      	pop	{r7, pc}
 8004980:	40020800 	.word	0x40020800
 8004984:	20000001 	.word	0x20000001
 8004988:	20000003 	.word	0x20000003
 800498c:	20000265 	.word	0x20000265
 8004990:	2000001c 	.word	0x2000001c
 8004994:	3c23d70a 	.word	0x3c23d70a
 8004998:	20000266 	.word	0x20000266
 800499c:	20000280 	.word	0x20000280
 80049a0:	20000267 	.word	0x20000267
 80049a4:	20000020 	.word	0x20000020
 80049a8:	20000268 	.word	0x20000268
 80049ac:	2000000c 	.word	0x2000000c
 80049b0:	20000269 	.word	0x20000269
 80049b4:	2000000e 	.word	0x2000000e
 80049b8:	2000026a 	.word	0x2000026a
 80049bc:	2000026d 	.word	0x2000026d
 80049c0:	2000026b 	.word	0x2000026b
 80049c4:	2000026e 	.word	0x2000026e

080049c8 <SelectItem>:
void SelectItem(void)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(ButtonB_GPIO_Port, ButtonB_Pin) == 0) //Select button
 80049cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80049d0:	481c      	ldr	r0, [pc, #112]	; (8004a44 <SelectItem+0x7c>)
 80049d2:	f002 fdc9 	bl	8007568 <HAL_GPIO_ReadPin>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d131      	bne.n	8004a40 <SelectItem+0x78>
	{
		while (HAL_GPIO_ReadPin(ButtonB_GPIO_Port, ButtonB_Pin) == 0)
 80049dc:	e002      	b.n	80049e4 <SelectItem+0x1c>
		{
			HAL_Delay(50);
 80049de:	2032      	movs	r0, #50	; 0x32
 80049e0:	f001 f9c0 	bl	8005d64 <HAL_Delay>
		while (HAL_GPIO_ReadPin(ButtonB_GPIO_Port, ButtonB_Pin) == 0)
 80049e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80049e8:	4816      	ldr	r0, [pc, #88]	; (8004a44 <SelectItem+0x7c>)
 80049ea:	f002 fdbd 	bl	8007568 <HAL_GPIO_ReadPin>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d0f4      	beq.n	80049de <SelectItem+0x16>
		}
		executeAction(line);
 80049f4:	4b14      	ldr	r3, [pc, #80]	; (8004a48 <SelectItem+0x80>)
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	4618      	mov	r0, r3
 80049fa:	f7fd f909 	bl	8001c10 <executeAction>
		if (Kp_modify_flag == 1 || Ki_modify_flag == 1 || Kd_modify_flag == 1
 80049fe:	4b13      	ldr	r3, [pc, #76]	; (8004a4c <SelectItem+0x84>)
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d017      	beq.n	8004a36 <SelectItem+0x6e>
 8004a06:	4b12      	ldr	r3, [pc, #72]	; (8004a50 <SelectItem+0x88>)
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d013      	beq.n	8004a36 <SelectItem+0x6e>
 8004a0e:	4b11      	ldr	r3, [pc, #68]	; (8004a54 <SelectItem+0x8c>)
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d00f      	beq.n	8004a36 <SelectItem+0x6e>
				|| Right_modify_flag == 1 || Left_modify_flag == 1 || First_point_modify_flag == 1 || Last_point_modify_flag == 1)
 8004a16:	4b10      	ldr	r3, [pc, #64]	; (8004a58 <SelectItem+0x90>)
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d00b      	beq.n	8004a36 <SelectItem+0x6e>
 8004a1e:	4b0f      	ldr	r3, [pc, #60]	; (8004a5c <SelectItem+0x94>)
 8004a20:	781b      	ldrb	r3, [r3, #0]
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d007      	beq.n	8004a36 <SelectItem+0x6e>
 8004a26:	4b0e      	ldr	r3, [pc, #56]	; (8004a60 <SelectItem+0x98>)
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d003      	beq.n	8004a36 <SelectItem+0x6e>
 8004a2e:	4b0d      	ldr	r3, [pc, #52]	; (8004a64 <SelectItem+0x9c>)
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d101      	bne.n	8004a3a <SelectItem+0x72>
		{
			__NOP();
 8004a36:	bf00      	nop
		else
		{
			line = 1;
		}
	}
}
 8004a38:	e002      	b.n	8004a40 <SelectItem+0x78>
			line = 1;
 8004a3a:	4b03      	ldr	r3, [pc, #12]	; (8004a48 <SelectItem+0x80>)
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	701a      	strb	r2, [r3, #0]
}
 8004a40:	bf00      	nop
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	40020800 	.word	0x40020800
 8004a48:	20000003 	.word	0x20000003
 8004a4c:	20000265 	.word	0x20000265
 8004a50:	20000266 	.word	0x20000266
 8004a54:	20000267 	.word	0x20000267
 8004a58:	20000269 	.word	0x20000269
 8004a5c:	20000268 	.word	0x20000268
 8004a60:	2000026a 	.word	0x2000026a
 8004a64:	2000026b 	.word	0x2000026b

08004a68 <MultifunctionButton>:
void MultifunctionButton(void)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	af00      	add	r7, sp, #0
	switch (Menu_type)
 8004a6c:	4ba3      	ldr	r3, [pc, #652]	; (8004cfc <MultifunctionButton+0x294>)
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	2b09      	cmp	r3, #9
 8004a72:	f200 813d 	bhi.w	8004cf0 <MultifunctionButton+0x288>
 8004a76:	a201      	add	r2, pc, #4	; (adr r2, 8004a7c <MultifunctionButton+0x14>)
 8004a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a7c:	08004aa5 	.word	0x08004aa5
 8004a80:	08004ab9 	.word	0x08004ab9
 8004a84:	08004c51 	.word	0x08004c51
 8004a88:	08004ad7 	.word	0x08004ad7
 8004a8c:	08004ba5 	.word	0x08004ba5
 8004a90:	08004c29 	.word	0x08004c29
 8004a94:	08004cf1 	.word	0x08004cf1
 8004a98:	08004c3d 	.word	0x08004c3d
 8004a9c:	08004c59 	.word	0x08004c59
 8004aa0:	08004cd5 	.word	0x08004cd5
	{
	case Running_menu:
		Menu_type = Main_menu;
 8004aa4:	4b95      	ldr	r3, [pc, #596]	; (8004cfc <MultifunctionButton+0x294>)
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	701a      	strb	r2, [r3, #0]
		line = 1;
 8004aaa:	4b95      	ldr	r3, [pc, #596]	; (8004d00 <MultifunctionButton+0x298>)
 8004aac:	2201      	movs	r2, #1
 8004aae:	701a      	strb	r2, [r3, #0]
		cancel_running = 0;
 8004ab0:	4b94      	ldr	r3, [pc, #592]	; (8004d04 <MultifunctionButton+0x29c>)
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	701a      	strb	r2, [r3, #0]
		break;
 8004ab6:	e11b      	b.n	8004cf0 <MultifunctionButton+0x288>
	case Main_menu:
		line++;
 8004ab8:	4b91      	ldr	r3, [pc, #580]	; (8004d00 <MultifunctionButton+0x298>)
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	3301      	adds	r3, #1
 8004abe:	b2da      	uxtb	r2, r3
 8004ac0:	4b8f      	ldr	r3, [pc, #572]	; (8004d00 <MultifunctionButton+0x298>)
 8004ac2:	701a      	strb	r2, [r3, #0]
		if (line > Maximum_Menu_line)
 8004ac4:	4b8e      	ldr	r3, [pc, #568]	; (8004d00 <MultifunctionButton+0x298>)
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	2b08      	cmp	r3, #8
 8004aca:	f240 810a 	bls.w	8004ce2 <MultifunctionButton+0x27a>
		{
			line = Number_of_Menu_firstline;
 8004ace:	4b8c      	ldr	r3, [pc, #560]	; (8004d00 <MultifunctionButton+0x298>)
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	701a      	strb	r2, [r3, #0]
		}
		break;
 8004ad4:	e105      	b.n	8004ce2 <MultifunctionButton+0x27a>
	case PID_Menu:
		line++;
 8004ad6:	4b8a      	ldr	r3, [pc, #552]	; (8004d00 <MultifunctionButton+0x298>)
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	3301      	adds	r3, #1
 8004adc:	b2da      	uxtb	r2, r3
 8004ade:	4b88      	ldr	r3, [pc, #544]	; (8004d00 <MultifunctionButton+0x298>)
 8004ae0:	701a      	strb	r2, [r3, #0]
		if (line > Maximum_PID_line)
 8004ae2:	4b87      	ldr	r3, [pc, #540]	; (8004d00 <MultifunctionButton+0x298>)
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	2b04      	cmp	r3, #4
 8004ae8:	d902      	bls.n	8004af0 <MultifunctionButton+0x88>
		{
			line = Number_of_Menu_firstline;
 8004aea:	4b85      	ldr	r3, [pc, #532]	; (8004d00 <MultifunctionButton+0x298>)
 8004aec:	2201      	movs	r2, #1
 8004aee:	701a      	strb	r2, [r3, #0]
		}
		if (Kp_modify_flag == 1)
 8004af0:	4b85      	ldr	r3, [pc, #532]	; (8004d08 <MultifunctionButton+0x2a0>)
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d118      	bne.n	8004b2a <MultifunctionButton+0xc2>
		{
			Kp -= Kp_amount;
 8004af8:	4b84      	ldr	r3, [pc, #528]	; (8004d0c <MultifunctionButton+0x2a4>)
 8004afa:	edd3 7a00 	vldr	s15, [r3]
 8004afe:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8004d10 <MultifunctionButton+0x2a8>
 8004b02:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004b06:	4b81      	ldr	r3, [pc, #516]	; (8004d0c <MultifunctionButton+0x2a4>)
 8004b08:	edc3 7a00 	vstr	s15, [r3]
			line = 1;
 8004b0c:	4b7c      	ldr	r3, [pc, #496]	; (8004d00 <MultifunctionButton+0x298>)
 8004b0e:	2201      	movs	r2, #1
 8004b10:	701a      	strb	r2, [r3, #0]
			if (Kp <= 0)
 8004b12:	4b7e      	ldr	r3, [pc, #504]	; (8004d0c <MultifunctionButton+0x2a4>)
 8004b14:	edd3 7a00 	vldr	s15, [r3]
 8004b18:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b20:	d803      	bhi.n	8004b2a <MultifunctionButton+0xc2>
				{Kp = 0;}
 8004b22:	4b7a      	ldr	r3, [pc, #488]	; (8004d0c <MultifunctionButton+0x2a4>)
 8004b24:	f04f 0200 	mov.w	r2, #0
 8004b28:	601a      	str	r2, [r3, #0]
		}
		if (Ki_modify_flag == 1)
 8004b2a:	4b7a      	ldr	r3, [pc, #488]	; (8004d14 <MultifunctionButton+0x2ac>)
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d118      	bne.n	8004b64 <MultifunctionButton+0xfc>
		{
			Ki -= Ki_amount;
 8004b32:	4b79      	ldr	r3, [pc, #484]	; (8004d18 <MultifunctionButton+0x2b0>)
 8004b34:	edd3 7a00 	vldr	s15, [r3]
 8004b38:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8004d10 <MultifunctionButton+0x2a8>
 8004b3c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004b40:	4b75      	ldr	r3, [pc, #468]	; (8004d18 <MultifunctionButton+0x2b0>)
 8004b42:	edc3 7a00 	vstr	s15, [r3]
			line = 2;
 8004b46:	4b6e      	ldr	r3, [pc, #440]	; (8004d00 <MultifunctionButton+0x298>)
 8004b48:	2202      	movs	r2, #2
 8004b4a:	701a      	strb	r2, [r3, #0]
			if (Ki <= 0)
 8004b4c:	4b72      	ldr	r3, [pc, #456]	; (8004d18 <MultifunctionButton+0x2b0>)
 8004b4e:	edd3 7a00 	vldr	s15, [r3]
 8004b52:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b5a:	d803      	bhi.n	8004b64 <MultifunctionButton+0xfc>
				{Ki = 0;}
 8004b5c:	4b6e      	ldr	r3, [pc, #440]	; (8004d18 <MultifunctionButton+0x2b0>)
 8004b5e:	f04f 0200 	mov.w	r2, #0
 8004b62:	601a      	str	r2, [r3, #0]
		}
		if (Kd_modify_flag == 1)
 8004b64:	4b6d      	ldr	r3, [pc, #436]	; (8004d1c <MultifunctionButton+0x2b4>)
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	f040 80bc 	bne.w	8004ce6 <MultifunctionButton+0x27e>
		{
			Kd -= Kd_amount;
 8004b6e:	4b6c      	ldr	r3, [pc, #432]	; (8004d20 <MultifunctionButton+0x2b8>)
 8004b70:	edd3 7a00 	vldr	s15, [r3]
 8004b74:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8004d10 <MultifunctionButton+0x2a8>
 8004b78:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004b7c:	4b68      	ldr	r3, [pc, #416]	; (8004d20 <MultifunctionButton+0x2b8>)
 8004b7e:	edc3 7a00 	vstr	s15, [r3]
			line = 3;
 8004b82:	4b5f      	ldr	r3, [pc, #380]	; (8004d00 <MultifunctionButton+0x298>)
 8004b84:	2203      	movs	r2, #3
 8004b86:	701a      	strb	r2, [r3, #0]
			if (Kd <= 0)
 8004b88:	4b65      	ldr	r3, [pc, #404]	; (8004d20 <MultifunctionButton+0x2b8>)
 8004b8a:	edd3 7a00 	vldr	s15, [r3]
 8004b8e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b96:	d900      	bls.n	8004b9a <MultifunctionButton+0x132>
				{Kd = 0;}
		}
		break;
 8004b98:	e0a5      	b.n	8004ce6 <MultifunctionButton+0x27e>
				{Kd = 0;}
 8004b9a:	4b61      	ldr	r3, [pc, #388]	; (8004d20 <MultifunctionButton+0x2b8>)
 8004b9c:	f04f 0200 	mov.w	r2, #0
 8004ba0:	601a      	str	r2, [r3, #0]
		break;
 8004ba2:	e0a0      	b.n	8004ce6 <MultifunctionButton+0x27e>
	case Engine_menu:
		line++;
 8004ba4:	4b56      	ldr	r3, [pc, #344]	; (8004d00 <MultifunctionButton+0x298>)
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	3301      	adds	r3, #1
 8004baa:	b2da      	uxtb	r2, r3
 8004bac:	4b54      	ldr	r3, [pc, #336]	; (8004d00 <MultifunctionButton+0x298>)
 8004bae:	701a      	strb	r2, [r3, #0]
		if (line > Maximum_Engine_line)
 8004bb0:	4b53      	ldr	r3, [pc, #332]	; (8004d00 <MultifunctionButton+0x298>)
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	2b03      	cmp	r3, #3
 8004bb6:	d902      	bls.n	8004bbe <MultifunctionButton+0x156>
		{
			line = Number_of_Menu_firstline;
 8004bb8:	4b51      	ldr	r3, [pc, #324]	; (8004d00 <MultifunctionButton+0x298>)
 8004bba:	2201      	movs	r2, #1
 8004bbc:	701a      	strb	r2, [r3, #0]
		}
		if (Left_modify_flag == 1)
 8004bbe:	4b59      	ldr	r3, [pc, #356]	; (8004d24 <MultifunctionButton+0x2bc>)
 8004bc0:	781b      	ldrb	r3, [r3, #0]
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d115      	bne.n	8004bf2 <MultifunctionButton+0x18a>
		{
			Left -= 100;
 8004bc6:	4b58      	ldr	r3, [pc, #352]	; (8004d28 <MultifunctionButton+0x2c0>)
 8004bc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	3b64      	subs	r3, #100	; 0x64
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	b21a      	sxth	r2, r3
 8004bd4:	4b54      	ldr	r3, [pc, #336]	; (8004d28 <MultifunctionButton+0x2c0>)
 8004bd6:	801a      	strh	r2, [r3, #0]
			line = 1;
 8004bd8:	4b49      	ldr	r3, [pc, #292]	; (8004d00 <MultifunctionButton+0x298>)
 8004bda:	2201      	movs	r2, #1
 8004bdc:	701a      	strb	r2, [r3, #0]
			if (Left <= -7200)
 8004bde:	4b52      	ldr	r3, [pc, #328]	; (8004d28 <MultifunctionButton+0x2c0>)
 8004be0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004be4:	f513 5fe1 	cmn.w	r3, #7200	; 0x1c20
 8004be8:	dc03      	bgt.n	8004bf2 <MultifunctionButton+0x18a>
				{Left = -7200;}
 8004bea:	4b4f      	ldr	r3, [pc, #316]	; (8004d28 <MultifunctionButton+0x2c0>)
 8004bec:	f24e 32e0 	movw	r2, #58336	; 0xe3e0
 8004bf0:	801a      	strh	r2, [r3, #0]
		}
		if (Right_modify_flag == 1)
 8004bf2:	4b4e      	ldr	r3, [pc, #312]	; (8004d2c <MultifunctionButton+0x2c4>)
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d177      	bne.n	8004cea <MultifunctionButton+0x282>
		{
			Right -= 100;
 8004bfa:	4b4d      	ldr	r3, [pc, #308]	; (8004d30 <MultifunctionButton+0x2c8>)
 8004bfc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	3b64      	subs	r3, #100	; 0x64
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	b21a      	sxth	r2, r3
 8004c08:	4b49      	ldr	r3, [pc, #292]	; (8004d30 <MultifunctionButton+0x2c8>)
 8004c0a:	801a      	strh	r2, [r3, #0]
			line = 2;
 8004c0c:	4b3c      	ldr	r3, [pc, #240]	; (8004d00 <MultifunctionButton+0x298>)
 8004c0e:	2202      	movs	r2, #2
 8004c10:	701a      	strb	r2, [r3, #0]
			if (Right <= -7200)
 8004c12:	4b47      	ldr	r3, [pc, #284]	; (8004d30 <MultifunctionButton+0x2c8>)
 8004c14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c18:	f513 5fe1 	cmn.w	r3, #7200	; 0x1c20
 8004c1c:	dc65      	bgt.n	8004cea <MultifunctionButton+0x282>
				{Right = -7200;}
 8004c1e:	4b44      	ldr	r3, [pc, #272]	; (8004d30 <MultifunctionButton+0x2c8>)
 8004c20:	f24e 32e0 	movw	r2, #58336	; 0xe3e0
 8004c24:	801a      	strh	r2, [r3, #0]
		}
		break;
 8004c26:	e060      	b.n	8004cea <MultifunctionButton+0x282>
	case LineDetect_Show:
		Menu_type = Main_menu;
 8004c28:	4b34      	ldr	r3, [pc, #208]	; (8004cfc <MultifunctionButton+0x294>)
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	701a      	strb	r2, [r3, #0]
		line = 1;
 8004c2e:	4b34      	ldr	r3, [pc, #208]	; (8004d00 <MultifunctionButton+0x298>)
 8004c30:	2201      	movs	r2, #1
 8004c32:	701a      	strb	r2, [r3, #0]
		cancel_menu = 0;
 8004c34:	4b3f      	ldr	r3, [pc, #252]	; (8004d34 <MultifunctionButton+0x2cc>)
 8004c36:	2200      	movs	r2, #0
 8004c38:	701a      	strb	r2, [r3, #0]
		break;
 8004c3a:	e059      	b.n	8004cf0 <MultifunctionButton+0x288>
	case Saving_process:
		cancel_reading_card = 0;
 8004c3c:	4b3e      	ldr	r3, [pc, #248]	; (8004d38 <MultifunctionButton+0x2d0>)
 8004c3e:	2200      	movs	r2, #0
 8004c40:	701a      	strb	r2, [r3, #0]
		Menu_type = Main_menu;
 8004c42:	4b2e      	ldr	r3, [pc, #184]	; (8004cfc <MultifunctionButton+0x294>)
 8004c44:	2201      	movs	r2, #1
 8004c46:	701a      	strb	r2, [r3, #0]
		line = 1;
 8004c48:	4b2d      	ldr	r3, [pc, #180]	; (8004d00 <MultifunctionButton+0x298>)
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	701a      	strb	r2, [r3, #0]
		break;
 8004c4e:	e04f      	b.n	8004cf0 <MultifunctionButton+0x288>
	case Color_Processing:
		Color_Read = 0;
 8004c50:	4b3a      	ldr	r3, [pc, #232]	; (8004d3c <MultifunctionButton+0x2d4>)
 8004c52:	2200      	movs	r2, #0
 8004c54:	701a      	strb	r2, [r3, #0]
		break;
 8004c56:	e04b      	b.n	8004cf0 <MultifunctionButton+0x288>
	case Path_solver:
		line++;
 8004c58:	4b29      	ldr	r3, [pc, #164]	; (8004d00 <MultifunctionButton+0x298>)
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	3301      	adds	r3, #1
 8004c5e:	b2da      	uxtb	r2, r3
 8004c60:	4b27      	ldr	r3, [pc, #156]	; (8004d00 <MultifunctionButton+0x298>)
 8004c62:	701a      	strb	r2, [r3, #0]
		if (line > Maximum_Path_Solver_line)
 8004c64:	4b26      	ldr	r3, [pc, #152]	; (8004d00 <MultifunctionButton+0x298>)
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	2b04      	cmp	r3, #4
 8004c6a:	d902      	bls.n	8004c72 <MultifunctionButton+0x20a>
		{
			line = Number_of_Menu_firstline;
 8004c6c:	4b24      	ldr	r3, [pc, #144]	; (8004d00 <MultifunctionButton+0x298>)
 8004c6e:	2201      	movs	r2, #1
 8004c70:	701a      	strb	r2, [r3, #0]
		}
		if (First_point_modify_flag == 1)
 8004c72:	4b33      	ldr	r3, [pc, #204]	; (8004d40 <MultifunctionButton+0x2d8>)
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d113      	bne.n	8004ca2 <MultifunctionButton+0x23a>
		{
			First_point -= 1;
 8004c7a:	4b32      	ldr	r3, [pc, #200]	; (8004d44 <MultifunctionButton+0x2dc>)
 8004c7c:	f993 3000 	ldrsb.w	r3, [r3]
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	3b01      	subs	r3, #1
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	b25a      	sxtb	r2, r3
 8004c88:	4b2e      	ldr	r3, [pc, #184]	; (8004d44 <MultifunctionButton+0x2dc>)
 8004c8a:	701a      	strb	r2, [r3, #0]
			line = 1;
 8004c8c:	4b1c      	ldr	r3, [pc, #112]	; (8004d00 <MultifunctionButton+0x298>)
 8004c8e:	2201      	movs	r2, #1
 8004c90:	701a      	strb	r2, [r3, #0]
			if(First_point < 0)
 8004c92:	4b2c      	ldr	r3, [pc, #176]	; (8004d44 <MultifunctionButton+0x2dc>)
 8004c94:	f993 3000 	ldrsb.w	r3, [r3]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	da02      	bge.n	8004ca2 <MultifunctionButton+0x23a>
			{
				First_point = 11;
 8004c9c:	4b29      	ldr	r3, [pc, #164]	; (8004d44 <MultifunctionButton+0x2dc>)
 8004c9e:	220b      	movs	r2, #11
 8004ca0:	701a      	strb	r2, [r3, #0]
			}
		}
		if (Last_point_modify_flag == 1)
 8004ca2:	4b29      	ldr	r3, [pc, #164]	; (8004d48 <MultifunctionButton+0x2e0>)
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d121      	bne.n	8004cee <MultifunctionButton+0x286>
		{
			Last_point -= 1;
 8004caa:	4b28      	ldr	r3, [pc, #160]	; (8004d4c <MultifunctionButton+0x2e4>)
 8004cac:	f993 3000 	ldrsb.w	r3, [r3]
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	b25a      	sxtb	r2, r3
 8004cb8:	4b24      	ldr	r3, [pc, #144]	; (8004d4c <MultifunctionButton+0x2e4>)
 8004cba:	701a      	strb	r2, [r3, #0]
			line = 2;
 8004cbc:	4b10      	ldr	r3, [pc, #64]	; (8004d00 <MultifunctionButton+0x298>)
 8004cbe:	2202      	movs	r2, #2
 8004cc0:	701a      	strb	r2, [r3, #0]
			if(Last_point < 0)
 8004cc2:	4b22      	ldr	r3, [pc, #136]	; (8004d4c <MultifunctionButton+0x2e4>)
 8004cc4:	f993 3000 	ldrsb.w	r3, [r3]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	da10      	bge.n	8004cee <MultifunctionButton+0x286>
			{
				Last_point = 11;
 8004ccc:	4b1f      	ldr	r3, [pc, #124]	; (8004d4c <MultifunctionButton+0x2e4>)
 8004cce:	220b      	movs	r2, #11
 8004cd0:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
 8004cd2:	e00c      	b.n	8004cee <MultifunctionButton+0x286>
		case Path_show_menu:
			Menu_type = Path_solver;
 8004cd4:	4b09      	ldr	r3, [pc, #36]	; (8004cfc <MultifunctionButton+0x294>)
 8004cd6:	2208      	movs	r2, #8
 8004cd8:	701a      	strb	r2, [r3, #0]
			line = 1;
 8004cda:	4b09      	ldr	r3, [pc, #36]	; (8004d00 <MultifunctionButton+0x298>)
 8004cdc:	2201      	movs	r2, #1
 8004cde:	701a      	strb	r2, [r3, #0]
			break;
 8004ce0:	e006      	b.n	8004cf0 <MultifunctionButton+0x288>
		break;
 8004ce2:	bf00      	nop
 8004ce4:	e004      	b.n	8004cf0 <MultifunctionButton+0x288>
		break;
 8004ce6:	bf00      	nop
 8004ce8:	e002      	b.n	8004cf0 <MultifunctionButton+0x288>
		break;
 8004cea:	bf00      	nop
 8004cec:	e000      	b.n	8004cf0 <MultifunctionButton+0x288>
		break;
 8004cee:	bf00      	nop
	}

}
 8004cf0:	bf00      	nop
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr
 8004cfa:	bf00      	nop
 8004cfc:	20000001 	.word	0x20000001
 8004d00:	20000003 	.word	0x20000003
 8004d04:	20000006 	.word	0x20000006
 8004d08:	20000265 	.word	0x20000265
 8004d0c:	2000001c 	.word	0x2000001c
 8004d10:	3c23d70a 	.word	0x3c23d70a
 8004d14:	20000266 	.word	0x20000266
 8004d18:	20000280 	.word	0x20000280
 8004d1c:	20000267 	.word	0x20000267
 8004d20:	20000020 	.word	0x20000020
 8004d24:	20000268 	.word	0x20000268
 8004d28:	2000000c 	.word	0x2000000c
 8004d2c:	20000269 	.word	0x20000269
 8004d30:	2000000e 	.word	0x2000000e
 8004d34:	20000005 	.word	0x20000005
 8004d38:	2000000b 	.word	0x2000000b
 8004d3c:	20000002 	.word	0x20000002
 8004d40:	2000026a 	.word	0x2000026a
 8004d44:	2000026d 	.word	0x2000026d
 8004d48:	2000026b 	.word	0x2000026b
 8004d4c:	2000026e 	.word	0x2000026e

08004d50 <HAL_GPIO_EXTI_Callback>:

//Deboucing button program
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b082      	sub	sp, #8
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	4603      	mov	r3, r0
 8004d58:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == ButtonC_Pin && stateBTNC == 1)
 8004d5a:	88fb      	ldrh	r3, [r7, #6]
 8004d5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d60:	d10b      	bne.n	8004d7a <HAL_GPIO_EXTI_Callback+0x2a>
 8004d62:	4b09      	ldr	r3, [pc, #36]	; (8004d88 <HAL_GPIO_EXTI_Callback+0x38>)
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d106      	bne.n	8004d7a <HAL_GPIO_EXTI_Callback+0x2a>
	{
		HAL_TIM_Base_Start_IT(&htim5);
 8004d6c:	4807      	ldr	r0, [pc, #28]	; (8004d8c <HAL_GPIO_EXTI_Callback+0x3c>)
 8004d6e:	f004 f84b 	bl	8008e08 <HAL_TIM_Base_Start_IT>
		stateBTNC = 0;
 8004d72:	4b05      	ldr	r3, [pc, #20]	; (8004d88 <HAL_GPIO_EXTI_Callback+0x38>)
 8004d74:	2200      	movs	r2, #0
 8004d76:	701a      	strb	r2, [r3, #0]
 8004d78:	e001      	b.n	8004d7e <HAL_GPIO_EXTI_Callback+0x2e>
	}

	else
	{
		__NOP();
 8004d7a:	bf00      	nop
	}
}
 8004d7c:	bf00      	nop
 8004d7e:	bf00      	nop
 8004d80:	3708      	adds	r7, #8
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	20000004 	.word	0x20000004
 8004d8c:	200004c8 	.word	0x200004c8

08004d90 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim5.Instance)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	4b0d      	ldr	r3, [pc, #52]	; (8004dd4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d112      	bne.n	8004dca <HAL_TIM_PeriodElapsedCallback+0x3a>
	{
		if (HAL_GPIO_ReadPin(ButtonC_GPIO_Port, ButtonC_Pin)
 8004da4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004da8:	480b      	ldr	r0, [pc, #44]	; (8004dd8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8004daa:	f002 fbdd 	bl	8007568 <HAL_GPIO_ReadPin>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d10a      	bne.n	8004dca <HAL_TIM_PeriodElapsedCallback+0x3a>
				== GPIO_PIN_RESET)
		{
			MultifunctionButton();
 8004db4:	f7ff fe58 	bl	8004a68 <MultifunctionButton>
			menu_display = 1;
 8004db8:	4b08      	ldr	r3, [pc, #32]	; (8004ddc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8004dba:	2201      	movs	r2, #1
 8004dbc:	701a      	strb	r2, [r3, #0]
			stateBTNC = 1;
 8004dbe:	4b08      	ldr	r3, [pc, #32]	; (8004de0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim5);
 8004dc4:	4803      	ldr	r0, [pc, #12]	; (8004dd4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8004dc6:	f004 f881 	bl	8008ecc <HAL_TIM_Base_Stop_IT>

		}
	}
}
 8004dca:	bf00      	nop
 8004dcc:	3708      	adds	r7, #8
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	200004c8 	.word	0x200004c8
 8004dd8:	40020800 	.word	0x40020800
 8004ddc:	20000000 	.word	0x20000000
 8004de0:	20000004 	.word	0x20000004

08004de4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004de4:	b480      	push	{r7}
 8004de6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004de8:	b672      	cpsid	i
}
 8004dea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8004dec:	e7fe      	b.n	8004dec <Error_Handler+0x8>
	...

08004df0 <SPI1SendByte>:
extern void MFRC522_Reset(void);
extern void MFRC522_AntennaOn(void);
extern void MFRC522_AntennaOff(void);
extern void MFRC522_Halt(void);

uint8_t SPI1SendByte(uint8_t data) {
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b086      	sub	sp, #24
 8004df4:	af02      	add	r7, sp, #8
 8004df6:	4603      	mov	r3, r0
 8004df8:	71fb      	strb	r3, [r7, #7]
	unsigned char writeCommand[1];
	unsigned char readValue[1];
	
	writeCommand[0] = data;
 8004dfa:	79fb      	ldrb	r3, [r7, #7]
 8004dfc:	733b      	strb	r3, [r7, #12]
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)&writeCommand, (uint8_t*)&readValue, 1, 10);
 8004dfe:	f107 0208 	add.w	r2, r7, #8
 8004e02:	f107 010c 	add.w	r1, r7, #12
 8004e06:	230a      	movs	r3, #10
 8004e08:	9300      	str	r3, [sp, #0]
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	4803      	ldr	r0, [pc, #12]	; (8004e1c <SPI1SendByte+0x2c>)
 8004e0e:	f003 fd3e 	bl	800888e <HAL_SPI_TransmitReceive>
	return readValue[0];
 8004e12:	7a3b      	ldrb	r3, [r7, #8]
	//SPI1->DR = data;															// вывод в SPI1
	//while (!(SPI1->SR & SPI_SR_RXNE));     				// ждем окончания обмена (STM32F103)
	//for (uint8_t i=0; i<50; i++) {};
	//data = SPI1->DR;															// читаем принятые данные
	//return data;
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3710      	adds	r7, #16
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	200003fc 	.word	0x200003fc

08004e20 <SPI1_WriteReg>:

void SPI1_WriteReg(uint8_t address, uint8_t value) {
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b082      	sub	sp, #8
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	4603      	mov	r3, r0
 8004e28:	460a      	mov	r2, r1
 8004e2a:	71fb      	strb	r3, [r7, #7]
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	71bb      	strb	r3, [r7, #6]
	cs_reset();
 8004e30:	2200      	movs	r2, #0
 8004e32:	2120      	movs	r1, #32
 8004e34:	4809      	ldr	r0, [pc, #36]	; (8004e5c <SPI1_WriteReg+0x3c>)
 8004e36:	f002 fbaf 	bl	8007598 <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 8004e3a:	79fb      	ldrb	r3, [r7, #7]
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f7ff ffd7 	bl	8004df0 <SPI1SendByte>
	SPI1SendByte(value);
 8004e42:	79bb      	ldrb	r3, [r7, #6]
 8004e44:	4618      	mov	r0, r3
 8004e46:	f7ff ffd3 	bl	8004df0 <SPI1SendByte>
	cs_set();
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	2120      	movs	r1, #32
 8004e4e:	4803      	ldr	r0, [pc, #12]	; (8004e5c <SPI1_WriteReg+0x3c>)
 8004e50:	f002 fba2 	bl	8007598 <HAL_GPIO_WritePin>
}
 8004e54:	bf00      	nop
 8004e56:	3708      	adds	r7, #8
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}
 8004e5c:	40020400 	.word	0x40020400

08004e60 <SPI1_ReadReg>:

uint8_t SPI1_ReadReg(uint8_t address) {
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	4603      	mov	r3, r0
 8004e68:	71fb      	strb	r3, [r7, #7]
	uint8_t	val;

	cs_reset();
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	2120      	movs	r1, #32
 8004e6e:	480b      	ldr	r0, [pc, #44]	; (8004e9c <SPI1_ReadReg+0x3c>)
 8004e70:	f002 fb92 	bl	8007598 <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 8004e74:	79fb      	ldrb	r3, [r7, #7]
 8004e76:	4618      	mov	r0, r3
 8004e78:	f7ff ffba 	bl	8004df0 <SPI1SendByte>
	val = SPI1SendByte(0x00);
 8004e7c:	2000      	movs	r0, #0
 8004e7e:	f7ff ffb7 	bl	8004df0 <SPI1SendByte>
 8004e82:	4603      	mov	r3, r0
 8004e84:	73fb      	strb	r3, [r7, #15]
	cs_set();
 8004e86:	2201      	movs	r2, #1
 8004e88:	2120      	movs	r1, #32
 8004e8a:	4804      	ldr	r0, [pc, #16]	; (8004e9c <SPI1_ReadReg+0x3c>)
 8004e8c:	f002 fb84 	bl	8007598 <HAL_GPIO_WritePin>
	return val;
 8004e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3710      	adds	r7, #16
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	40020400 	.word	0x40020400

08004ea0 <MFRC522_WriteRegister>:

void MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b082      	sub	sp, #8
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	460a      	mov	r2, r1
 8004eaa:	71fb      	strb	r3, [r7, #7]
 8004eac:	4613      	mov	r3, r2
 8004eae:	71bb      	strb	r3, [r7, #6]
	addr = (addr << 1) & 0x7E;															// Address format: 0XXXXXX0
 8004eb0:	79fb      	ldrb	r3, [r7, #7]
 8004eb2:	005b      	lsls	r3, r3, #1
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8004eba:	71fb      	strb	r3, [r7, #7]
  SPI1_WriteReg(addr, val);
 8004ebc:	79ba      	ldrb	r2, [r7, #6]
 8004ebe:	79fb      	ldrb	r3, [r7, #7]
 8004ec0:	4611      	mov	r1, r2
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f7ff ffac 	bl	8004e20 <SPI1_WriteReg>
}
 8004ec8:	bf00      	nop
 8004eca:	3708      	adds	r7, #8
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <MFRC522_ReadRegister>:

uint8_t MFRC522_ReadRegister(uint8_t addr) {
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	addr = ((addr << 1) & 0x7E) | 0x80;
 8004eda:	79fb      	ldrb	r3, [r7, #7]
 8004edc:	005b      	lsls	r3, r3, #1
 8004ede:	b25b      	sxtb	r3, r3
 8004ee0:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8004ee4:	b25b      	sxtb	r3, r3
 8004ee6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004eea:	b25b      	sxtb	r3, r3
 8004eec:	71fb      	strb	r3, [r7, #7]
	val = SPI1_ReadReg(addr);
 8004eee:	79fb      	ldrb	r3, [r7, #7]
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f7ff ffb5 	bl	8004e60 <SPI1_ReadReg>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	73fb      	strb	r3, [r7, #15]
	return val;	
 8004efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3710      	adds	r7, #16
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <MFRC522_Check>:

uint8_t MFRC522_Check(uint8_t* id) {
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
	uint8_t status;
	status = MFRC522_Request(PICC_REQIDL, id);							// Find cards, return card type
 8004f0c:	6879      	ldr	r1, [r7, #4]
 8004f0e:	2026      	movs	r0, #38	; 0x26
 8004f10:	f000 f849 	bl	8004fa6 <MFRC522_Request>
 8004f14:	4603      	mov	r3, r0
 8004f16:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK) status = MFRC522_Anticoll(id);			// Card detected. Anti-collision, return card serial number 4 bytes
 8004f18:	7bfb      	ldrb	r3, [r7, #15]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d104      	bne.n	8004f28 <MFRC522_Check+0x24>
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 f935 	bl	800518e <MFRC522_Anticoll>
 8004f24:	4603      	mov	r3, r0
 8004f26:	73fb      	strb	r3, [r7, #15]
	MFRC522_Halt();																					// Command card into hibernation 
 8004f28:	f000 f9f8 	bl	800531c <MFRC522_Halt>
	return status;
 8004f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3710      	adds	r7, #16
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}

08004f36 <MFRC522_SetBitMask>:
		if (CardID[i] != CompareID[i]) return MI_ERR;
	}
	return MI_OK;
}

void MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 8004f36:	b580      	push	{r7, lr}
 8004f38:	b082      	sub	sp, #8
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	460a      	mov	r2, r1
 8004f40:	71fb      	strb	r3, [r7, #7]
 8004f42:	4613      	mov	r3, r2
 8004f44:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) | mask);
 8004f46:	79fb      	ldrb	r3, [r7, #7]
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f7ff ffc1 	bl	8004ed0 <MFRC522_ReadRegister>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	461a      	mov	r2, r3
 8004f52:	79bb      	ldrb	r3, [r7, #6]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	b2da      	uxtb	r2, r3
 8004f58:	79fb      	ldrb	r3, [r7, #7]
 8004f5a:	4611      	mov	r1, r2
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f7ff ff9f 	bl	8004ea0 <MFRC522_WriteRegister>
}
 8004f62:	bf00      	nop
 8004f64:	3708      	adds	r7, #8
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}

08004f6a <MFRC522_ClearBitMask>:

void MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 8004f6a:	b580      	push	{r7, lr}
 8004f6c:	b082      	sub	sp, #8
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	4603      	mov	r3, r0
 8004f72:	460a      	mov	r2, r1
 8004f74:	71fb      	strb	r3, [r7, #7]
 8004f76:	4613      	mov	r3, r2
 8004f78:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) & (~mask));
 8004f7a:	79fb      	ldrb	r3, [r7, #7]
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f7ff ffa7 	bl	8004ed0 <MFRC522_ReadRegister>
 8004f82:	4603      	mov	r3, r0
 8004f84:	b25a      	sxtb	r2, r3
 8004f86:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004f8a:	43db      	mvns	r3, r3
 8004f8c:	b25b      	sxtb	r3, r3
 8004f8e:	4013      	ands	r3, r2
 8004f90:	b25b      	sxtb	r3, r3
 8004f92:	b2da      	uxtb	r2, r3
 8004f94:	79fb      	ldrb	r3, [r7, #7]
 8004f96:	4611      	mov	r1, r2
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f7ff ff81 	bl	8004ea0 <MFRC522_WriteRegister>
}
 8004f9e:	bf00      	nop
 8004fa0:	3708      	adds	r7, #8
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}

08004fa6 <MFRC522_Request>:

uint8_t MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 8004fa6:	b580      	push	{r7, lr}
 8004fa8:	b086      	sub	sp, #24
 8004faa:	af02      	add	r7, sp, #8
 8004fac:	4603      	mov	r3, r0
 8004fae:	6039      	str	r1, [r7, #0]
 8004fb0:	71fb      	strb	r3, [r7, #7]
	uint8_t status;  
	uint16_t backBits;																			// The received data bits

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		// TxLastBists = BitFramingReg[2..0]
 8004fb2:	2107      	movs	r1, #7
 8004fb4:	200d      	movs	r0, #13
 8004fb6:	f7ff ff73 	bl	8004ea0 <MFRC522_WriteRegister>
	TagType[0] = reqMode;
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	79fa      	ldrb	r2, [r7, #7]
 8004fbe:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8004fc0:	f107 030c 	add.w	r3, r7, #12
 8004fc4:	9300      	str	r3, [sp, #0]
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	2201      	movs	r2, #1
 8004fca:	6839      	ldr	r1, [r7, #0]
 8004fcc:	200c      	movs	r0, #12
 8004fce:	f000 f80f 	bl	8004ff0 <MFRC522_ToCard>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (backBits != 0x10)) status = MI_ERR;
 8004fd6:	7bfb      	ldrb	r3, [r7, #15]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d102      	bne.n	8004fe2 <MFRC522_Request+0x3c>
 8004fdc:	89bb      	ldrh	r3, [r7, #12]
 8004fde:	2b10      	cmp	r3, #16
 8004fe0:	d001      	beq.n	8004fe6 <MFRC522_Request+0x40>
 8004fe2:	2302      	movs	r3, #2
 8004fe4:	73fb      	strb	r3, [r7, #15]
	return status;
 8004fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3710      	adds	r7, #16
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <MFRC522_ToCard>:

uint8_t MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 8004ff0:	b590      	push	{r4, r7, lr}
 8004ff2:	b087      	sub	sp, #28
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	60b9      	str	r1, [r7, #8]
 8004ff8:	607b      	str	r3, [r7, #4]
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	73fb      	strb	r3, [r7, #15]
 8004ffe:	4613      	mov	r3, r2
 8005000:	73bb      	strb	r3, [r7, #14]
	uint8_t status = MI_ERR;
 8005002:	2302      	movs	r3, #2
 8005004:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 8005006:	2300      	movs	r3, #0
 8005008:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 800500a:	2300      	movs	r3, #0
 800500c:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 800500e:	7bfb      	ldrb	r3, [r7, #15]
 8005010:	2b0c      	cmp	r3, #12
 8005012:	d006      	beq.n	8005022 <MFRC522_ToCard+0x32>
 8005014:	2b0e      	cmp	r3, #14
 8005016:	d109      	bne.n	800502c <MFRC522_ToCard+0x3c>
		case PCD_AUTHENT: {
			irqEn = 0x12;
 8005018:	2312      	movs	r3, #18
 800501a:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 800501c:	2310      	movs	r3, #16
 800501e:	757b      	strb	r3, [r7, #21]
			break;
 8005020:	e005      	b.n	800502e <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE: {
			irqEn = 0x77;
 8005022:	2377      	movs	r3, #119	; 0x77
 8005024:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 8005026:	2330      	movs	r3, #48	; 0x30
 8005028:	757b      	strb	r3, [r7, #21]
			break;
 800502a:	e000      	b.n	800502e <MFRC522_ToCard+0x3e>
		}
		default:
		break;
 800502c:	bf00      	nop
	}

	MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 800502e:	7dbb      	ldrb	r3, [r7, #22]
 8005030:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005034:	b2db      	uxtb	r3, r3
 8005036:	4619      	mov	r1, r3
 8005038:	2002      	movs	r0, #2
 800503a:	f7ff ff31 	bl	8004ea0 <MFRC522_WriteRegister>
	MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 800503e:	2180      	movs	r1, #128	; 0x80
 8005040:	2004      	movs	r0, #4
 8005042:	f7ff ff92 	bl	8004f6a <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 8005046:	2180      	movs	r1, #128	; 0x80
 8005048:	200a      	movs	r0, #10
 800504a:	f7ff ff74 	bl	8004f36 <MFRC522_SetBitMask>
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 800504e:	2100      	movs	r1, #0
 8005050:	2001      	movs	r0, #1
 8005052:	f7ff ff25 	bl	8004ea0 <MFRC522_WriteRegister>

	// Writing data to the FIFO
	for (i = 0; i < sendLen; i++) MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
 8005056:	2300      	movs	r3, #0
 8005058:	827b      	strh	r3, [r7, #18]
 800505a:	e00a      	b.n	8005072 <MFRC522_ToCard+0x82>
 800505c:	8a7b      	ldrh	r3, [r7, #18]
 800505e:	68ba      	ldr	r2, [r7, #8]
 8005060:	4413      	add	r3, r2
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	4619      	mov	r1, r3
 8005066:	2009      	movs	r0, #9
 8005068:	f7ff ff1a 	bl	8004ea0 <MFRC522_WriteRegister>
 800506c:	8a7b      	ldrh	r3, [r7, #18]
 800506e:	3301      	adds	r3, #1
 8005070:	827b      	strh	r3, [r7, #18]
 8005072:	7bbb      	ldrb	r3, [r7, #14]
 8005074:	b29b      	uxth	r3, r3
 8005076:	8a7a      	ldrh	r2, [r7, #18]
 8005078:	429a      	cmp	r2, r3
 800507a:	d3ef      	bcc.n	800505c <MFRC522_ToCard+0x6c>

	// Execute the command
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 800507c:	7bfb      	ldrb	r3, [r7, #15]
 800507e:	4619      	mov	r1, r3
 8005080:	2001      	movs	r0, #1
 8005082:	f7ff ff0d 	bl	8004ea0 <MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		// StartSend=1,transmission of data starts 
 8005086:	7bfb      	ldrb	r3, [r7, #15]
 8005088:	2b0c      	cmp	r3, #12
 800508a:	d103      	bne.n	8005094 <MFRC522_ToCard+0xa4>
 800508c:	2180      	movs	r1, #128	; 0x80
 800508e:	200d      	movs	r0, #13
 8005090:	f7ff ff51 	bl	8004f36 <MFRC522_SetBitMask>

	// Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 8005094:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8005098:	827b      	strh	r3, [r7, #18]
	do {
		// CommIrqReg[7..0]
		// Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 800509a:	2004      	movs	r0, #4
 800509c:	f7ff ff18 	bl	8004ed0 <MFRC522_ReadRegister>
 80050a0:	4603      	mov	r3, r0
 80050a2:	753b      	strb	r3, [r7, #20]
		i--;
 80050a4:	8a7b      	ldrh	r3, [r7, #18]
 80050a6:	3b01      	subs	r3, #1
 80050a8:	827b      	strh	r3, [r7, #18]
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 80050aa:	8a7b      	ldrh	r3, [r7, #18]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d00a      	beq.n	80050c6 <MFRC522_ToCard+0xd6>
 80050b0:	7d3b      	ldrb	r3, [r7, #20]
 80050b2:	f003 0301 	and.w	r3, r3, #1
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d105      	bne.n	80050c6 <MFRC522_ToCard+0xd6>
 80050ba:	7d3a      	ldrb	r2, [r7, #20]
 80050bc:	7d7b      	ldrb	r3, [r7, #21]
 80050be:	4013      	ands	r3, r2
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d0e9      	beq.n	800509a <MFRC522_ToCard+0xaa>

	MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);																// StartSend=0
 80050c6:	2180      	movs	r1, #128	; 0x80
 80050c8:	200d      	movs	r0, #13
 80050ca:	f7ff ff4e 	bl	8004f6a <MFRC522_ClearBitMask>

	if (i != 0)  {
 80050ce:	8a7b      	ldrh	r3, [r7, #18]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d057      	beq.n	8005184 <MFRC522_ToCard+0x194>
		if (!(MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 80050d4:	2006      	movs	r0, #6
 80050d6:	f7ff fefb 	bl	8004ed0 <MFRC522_ReadRegister>
 80050da:	4603      	mov	r3, r0
 80050dc:	f003 031b 	and.w	r3, r3, #27
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d14d      	bne.n	8005180 <MFRC522_ToCard+0x190>
			status = MI_OK;
 80050e4:	2300      	movs	r3, #0
 80050e6:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01) status = MI_NOTAGERR;
 80050e8:	7d3a      	ldrb	r2, [r7, #20]
 80050ea:	7dbb      	ldrb	r3, [r7, #22]
 80050ec:	4013      	ands	r3, r2
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	f003 0301 	and.w	r3, r3, #1
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d001      	beq.n	80050fc <MFRC522_ToCard+0x10c>
 80050f8:	2301      	movs	r3, #1
 80050fa:	75fb      	strb	r3, [r7, #23]
			if (command == PCD_TRANSCEIVE) {
 80050fc:	7bfb      	ldrb	r3, [r7, #15]
 80050fe:	2b0c      	cmp	r3, #12
 8005100:	d140      	bne.n	8005184 <MFRC522_ToCard+0x194>
				n = MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 8005102:	200a      	movs	r0, #10
 8005104:	f7ff fee4 	bl	8004ed0 <MFRC522_ReadRegister>
 8005108:	4603      	mov	r3, r0
 800510a:	753b      	strb	r3, [r7, #20]
				lastBits = MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 800510c:	200c      	movs	r0, #12
 800510e:	f7ff fedf 	bl	8004ed0 <MFRC522_ReadRegister>
 8005112:	4603      	mov	r3, r0
 8005114:	f003 0307 	and.w	r3, r3, #7
 8005118:	747b      	strb	r3, [r7, #17]
				if (lastBits) *backLen = (n-1)*8+lastBits; else *backLen = n*8;
 800511a:	7c7b      	ldrb	r3, [r7, #17]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d00b      	beq.n	8005138 <MFRC522_ToCard+0x148>
 8005120:	7d3b      	ldrb	r3, [r7, #20]
 8005122:	3b01      	subs	r3, #1
 8005124:	b29b      	uxth	r3, r3
 8005126:	00db      	lsls	r3, r3, #3
 8005128:	b29a      	uxth	r2, r3
 800512a:	7c7b      	ldrb	r3, [r7, #17]
 800512c:	b29b      	uxth	r3, r3
 800512e:	4413      	add	r3, r2
 8005130:	b29a      	uxth	r2, r3
 8005132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005134:	801a      	strh	r2, [r3, #0]
 8005136:	e005      	b.n	8005144 <MFRC522_ToCard+0x154>
 8005138:	7d3b      	ldrb	r3, [r7, #20]
 800513a:	b29b      	uxth	r3, r3
 800513c:	00db      	lsls	r3, r3, #3
 800513e:	b29a      	uxth	r2, r3
 8005140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005142:	801a      	strh	r2, [r3, #0]
				if (n == 0) n = 1;
 8005144:	7d3b      	ldrb	r3, [r7, #20]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d101      	bne.n	800514e <MFRC522_ToCard+0x15e>
 800514a:	2301      	movs	r3, #1
 800514c:	753b      	strb	r3, [r7, #20]
				if (n > MFRC522_MAX_LEN) n = MFRC522_MAX_LEN;
 800514e:	7d3b      	ldrb	r3, [r7, #20]
 8005150:	2b10      	cmp	r3, #16
 8005152:	d901      	bls.n	8005158 <MFRC522_ToCard+0x168>
 8005154:	2310      	movs	r3, #16
 8005156:	753b      	strb	r3, [r7, #20]
				for (i = 0; i < n; i++) backData[i] = MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);		// Reading the received data in FIFO
 8005158:	2300      	movs	r3, #0
 800515a:	827b      	strh	r3, [r7, #18]
 800515c:	e00a      	b.n	8005174 <MFRC522_ToCard+0x184>
 800515e:	8a7b      	ldrh	r3, [r7, #18]
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	18d4      	adds	r4, r2, r3
 8005164:	2009      	movs	r0, #9
 8005166:	f7ff feb3 	bl	8004ed0 <MFRC522_ReadRegister>
 800516a:	4603      	mov	r3, r0
 800516c:	7023      	strb	r3, [r4, #0]
 800516e:	8a7b      	ldrh	r3, [r7, #18]
 8005170:	3301      	adds	r3, #1
 8005172:	827b      	strh	r3, [r7, #18]
 8005174:	7d3b      	ldrb	r3, [r7, #20]
 8005176:	b29b      	uxth	r3, r3
 8005178:	8a7a      	ldrh	r2, [r7, #18]
 800517a:	429a      	cmp	r2, r3
 800517c:	d3ef      	bcc.n	800515e <MFRC522_ToCard+0x16e>
 800517e:	e001      	b.n	8005184 <MFRC522_ToCard+0x194>
			}
		} else status = MI_ERR;
 8005180:	2302      	movs	r3, #2
 8005182:	75fb      	strb	r3, [r7, #23]
	}
	return status;
 8005184:	7dfb      	ldrb	r3, [r7, #23]
}
 8005186:	4618      	mov	r0, r3
 8005188:	371c      	adds	r7, #28
 800518a:	46bd      	mov	sp, r7
 800518c:	bd90      	pop	{r4, r7, pc}

0800518e <MFRC522_Anticoll>:

uint8_t MFRC522_Anticoll(uint8_t* serNum) {
 800518e:	b580      	push	{r7, lr}
 8005190:	b086      	sub	sp, #24
 8005192:	af02      	add	r7, sp, #8
 8005194:	6078      	str	r0, [r7, #4]
	uint8_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 8005196:	2300      	movs	r3, #0
 8005198:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);												// TxLastBists = BitFramingReg[2..0]
 800519a:	2100      	movs	r1, #0
 800519c:	200d      	movs	r0, #13
 800519e:	f7ff fe7f 	bl	8004ea0 <MFRC522_WriteRegister>
	serNum[0] = PICC_ANTICOLL;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2293      	movs	r2, #147	; 0x93
 80051a6:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	3301      	adds	r3, #1
 80051ac:	2220      	movs	r2, #32
 80051ae:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 80051b0:	f107 030a 	add.w	r3, r7, #10
 80051b4:	9300      	str	r3, [sp, #0]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2202      	movs	r2, #2
 80051ba:	6879      	ldr	r1, [r7, #4]
 80051bc:	200c      	movs	r0, #12
 80051be:	f7ff ff17 	bl	8004ff0 <MFRC522_ToCard>
 80051c2:	4603      	mov	r3, r0
 80051c4:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK) {
 80051c6:	7bfb      	ldrb	r3, [r7, #15]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d118      	bne.n	80051fe <MFRC522_Anticoll+0x70>
		// Check card serial number
		for (i = 0; i < 4; i++) serNumCheck ^= serNum[i];
 80051cc:	2300      	movs	r3, #0
 80051ce:	73bb      	strb	r3, [r7, #14]
 80051d0:	e009      	b.n	80051e6 <MFRC522_Anticoll+0x58>
 80051d2:	7bbb      	ldrb	r3, [r7, #14]
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	4413      	add	r3, r2
 80051d8:	781a      	ldrb	r2, [r3, #0]
 80051da:	7b7b      	ldrb	r3, [r7, #13]
 80051dc:	4053      	eors	r3, r2
 80051de:	737b      	strb	r3, [r7, #13]
 80051e0:	7bbb      	ldrb	r3, [r7, #14]
 80051e2:	3301      	adds	r3, #1
 80051e4:	73bb      	strb	r3, [r7, #14]
 80051e6:	7bbb      	ldrb	r3, [r7, #14]
 80051e8:	2b03      	cmp	r3, #3
 80051ea:	d9f2      	bls.n	80051d2 <MFRC522_Anticoll+0x44>
		if (serNumCheck != serNum[i]) status = MI_ERR;
 80051ec:	7bbb      	ldrb	r3, [r7, #14]
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	4413      	add	r3, r2
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	7b7a      	ldrb	r2, [r7, #13]
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d001      	beq.n	80051fe <MFRC522_Anticoll+0x70>
 80051fa:	2302      	movs	r3, #2
 80051fc:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 80051fe:	7bfb      	ldrb	r3, [r7, #15]
} 
 8005200:	4618      	mov	r0, r3
 8005202:	3710      	adds	r7, #16
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}

08005208 <MFRC522_CalculateCRC>:

void MFRC522_CalculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData) {
 8005208:	b590      	push	{r4, r7, lr}
 800520a:	b087      	sub	sp, #28
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	460b      	mov	r3, r1
 8005212:	607a      	str	r2, [r7, #4]
 8005214:	72fb      	strb	r3, [r7, #11]
	uint8_t i, n;

	MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);													// CRCIrq = 0
 8005216:	2104      	movs	r1, #4
 8005218:	2005      	movs	r0, #5
 800521a:	f7ff fea6 	bl	8004f6a <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);													// Clear the FIFO pointer
 800521e:	2180      	movs	r1, #128	; 0x80
 8005220:	200a      	movs	r0, #10
 8005222:	f7ff fe88 	bl	8004f36 <MFRC522_SetBitMask>
	// Write_MFRC522(CommandReg, PCD_IDLE);

	// Writing data to the FIFO	
	for (i = 0; i < len; i++) MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, *(pIndata+i));
 8005226:	2300      	movs	r3, #0
 8005228:	75fb      	strb	r3, [r7, #23]
 800522a:	e00a      	b.n	8005242 <MFRC522_CalculateCRC+0x3a>
 800522c:	7dfb      	ldrb	r3, [r7, #23]
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	4413      	add	r3, r2
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	4619      	mov	r1, r3
 8005236:	2009      	movs	r0, #9
 8005238:	f7ff fe32 	bl	8004ea0 <MFRC522_WriteRegister>
 800523c:	7dfb      	ldrb	r3, [r7, #23]
 800523e:	3301      	adds	r3, #1
 8005240:	75fb      	strb	r3, [r7, #23]
 8005242:	7dfa      	ldrb	r2, [r7, #23]
 8005244:	7afb      	ldrb	r3, [r7, #11]
 8005246:	429a      	cmp	r2, r3
 8005248:	d3f0      	bcc.n	800522c <MFRC522_CalculateCRC+0x24>
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_CALCCRC);
 800524a:	2103      	movs	r1, #3
 800524c:	2001      	movs	r0, #1
 800524e:	f7ff fe27 	bl	8004ea0 <MFRC522_WriteRegister>

	// Wait CRC calculation is complete
	i = 0xFF;
 8005252:	23ff      	movs	r3, #255	; 0xff
 8005254:	75fb      	strb	r3, [r7, #23]
	do {
		n = MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
 8005256:	2005      	movs	r0, #5
 8005258:	f7ff fe3a 	bl	8004ed0 <MFRC522_ReadRegister>
 800525c:	4603      	mov	r3, r0
 800525e:	75bb      	strb	r3, [r7, #22]
		i--;
 8005260:	7dfb      	ldrb	r3, [r7, #23]
 8005262:	3b01      	subs	r3, #1
 8005264:	75fb      	strb	r3, [r7, #23]
	} while ((i!=0) && !(n&0x04));																						// CRCIrq = 1
 8005266:	7dfb      	ldrb	r3, [r7, #23]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d004      	beq.n	8005276 <MFRC522_CalculateCRC+0x6e>
 800526c:	7dbb      	ldrb	r3, [r7, #22]
 800526e:	f003 0304 	and.w	r3, r3, #4
 8005272:	2b00      	cmp	r3, #0
 8005274:	d0ef      	beq.n	8005256 <MFRC522_CalculateCRC+0x4e>

	// Read CRC calculation result
	pOutData[0] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
 8005276:	2022      	movs	r0, #34	; 0x22
 8005278:	f7ff fe2a 	bl	8004ed0 <MFRC522_ReadRegister>
 800527c:	4603      	mov	r3, r0
 800527e:	461a      	mov	r2, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	701a      	strb	r2, [r3, #0]
	pOutData[1] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_M);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	1c5c      	adds	r4, r3, #1
 8005288:	2021      	movs	r0, #33	; 0x21
 800528a:	f7ff fe21 	bl	8004ed0 <MFRC522_ReadRegister>
 800528e:	4603      	mov	r3, r0
 8005290:	7023      	strb	r3, [r4, #0]
}
 8005292:	bf00      	nop
 8005294:	371c      	adds	r7, #28
 8005296:	46bd      	mov	sp, r7
 8005298:	bd90      	pop	{r4, r7, pc}

0800529a <MFRC522_Init>:
		if ((status != MI_OK) || (recvBits != 4) || ((buff[0] & 0x0F) != 0x0A)) status = MI_ERR;
	}
	return status;
}

void MFRC522_Init(void) {
 800529a:	b580      	push	{r7, lr}
 800529c:	af00      	add	r7, sp, #0
	MFRC522_Reset();
 800529e:	f000 f820 	bl	80052e2 <MFRC522_Reset>
	MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 80052a2:	218d      	movs	r1, #141	; 0x8d
 80052a4:	202a      	movs	r0, #42	; 0x2a
 80052a6:	f7ff fdfb 	bl	8004ea0 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 80052aa:	213e      	movs	r1, #62	; 0x3e
 80052ac:	202b      	movs	r0, #43	; 0x2b
 80052ae:	f7ff fdf7 	bl	8004ea0 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);           
 80052b2:	211e      	movs	r1, #30
 80052b4:	202d      	movs	r0, #45	; 0x2d
 80052b6:	f7ff fdf3 	bl	8004ea0 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 80052ba:	2100      	movs	r1, #0
 80052bc:	202c      	movs	r0, #44	; 0x2c
 80052be:	f7ff fdef 	bl	8004ea0 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);				// 48dB gain	
 80052c2:	2170      	movs	r1, #112	; 0x70
 80052c4:	2026      	movs	r0, #38	; 0x26
 80052c6:	f7ff fdeb 	bl	8004ea0 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 80052ca:	2140      	movs	r1, #64	; 0x40
 80052cc:	2015      	movs	r0, #21
 80052ce:	f7ff fde7 	bl	8004ea0 <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 80052d2:	213d      	movs	r1, #61	; 0x3d
 80052d4:	2011      	movs	r0, #17
 80052d6:	f7ff fde3 	bl	8004ea0 <MFRC522_WriteRegister>
	MFRC522_AntennaOn();																		// Open the antenna
 80052da:	f000 f80a 	bl	80052f2 <MFRC522_AntennaOn>
}
 80052de:	bf00      	nop
 80052e0:	bd80      	pop	{r7, pc}

080052e2 <MFRC522_Reset>:

void MFRC522_Reset(void) {
 80052e2:	b580      	push	{r7, lr}
 80052e4:	af00      	add	r7, sp, #0
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 80052e6:	210f      	movs	r1, #15
 80052e8:	2001      	movs	r0, #1
 80052ea:	f7ff fdd9 	bl	8004ea0 <MFRC522_WriteRegister>
}
 80052ee:	bf00      	nop
 80052f0:	bd80      	pop	{r7, pc}

080052f2 <MFRC522_AntennaOn>:

void MFRC522_AntennaOn(void) {
 80052f2:	b580      	push	{r7, lr}
 80052f4:	b082      	sub	sp, #8
 80052f6:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 80052f8:	2014      	movs	r0, #20
 80052fa:	f7ff fde9 	bl	8004ed0 <MFRC522_ReadRegister>
 80052fe:	4603      	mov	r3, r0
 8005300:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 8005302:	79fb      	ldrb	r3, [r7, #7]
 8005304:	f003 0303 	and.w	r3, r3, #3
 8005308:	2b00      	cmp	r3, #0
 800530a:	d103      	bne.n	8005314 <MFRC522_AntennaOn+0x22>
 800530c:	2103      	movs	r1, #3
 800530e:	2014      	movs	r0, #20
 8005310:	f7ff fe11 	bl	8004f36 <MFRC522_SetBitMask>
}
 8005314:	bf00      	nop
 8005316:	3708      	adds	r7, #8
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <MFRC522_Halt>:

void MFRC522_AntennaOff(void) {
	MFRC522_ClearBitMask(MFRC522_REG_TX_CONTROL, 0x03);
}

void MFRC522_Halt(void) {
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af02      	add	r7, sp, #8
	uint16_t unLen;
	uint8_t buff[4]; 

	buff[0] = PICC_HALT;
 8005322:	2350      	movs	r3, #80	; 0x50
 8005324:	703b      	strb	r3, [r7, #0]
	buff[1] = 0;
 8005326:	2300      	movs	r3, #0
 8005328:	707b      	strb	r3, [r7, #1]
	MFRC522_CalculateCRC(buff, 2, &buff[2]);
 800532a:	463b      	mov	r3, r7
 800532c:	1c9a      	adds	r2, r3, #2
 800532e:	463b      	mov	r3, r7
 8005330:	2102      	movs	r1, #2
 8005332:	4618      	mov	r0, r3
 8005334:	f7ff ff68 	bl	8005208 <MFRC522_CalculateCRC>
	MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 8005338:	463a      	mov	r2, r7
 800533a:	4639      	mov	r1, r7
 800533c:	1dbb      	adds	r3, r7, #6
 800533e:	9300      	str	r3, [sp, #0]
 8005340:	4613      	mov	r3, r2
 8005342:	2204      	movs	r2, #4
 8005344:	200c      	movs	r0, #12
 8005346:	f7ff fe53 	bl	8004ff0 <MFRC522_ToCard>
}
 800534a:	bf00      	nop
 800534c:	3708      	adds	r7, #8
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
	...

08005354 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800535a:	2300      	movs	r3, #0
 800535c:	607b      	str	r3, [r7, #4]
 800535e:	4b10      	ldr	r3, [pc, #64]	; (80053a0 <HAL_MspInit+0x4c>)
 8005360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005362:	4a0f      	ldr	r2, [pc, #60]	; (80053a0 <HAL_MspInit+0x4c>)
 8005364:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005368:	6453      	str	r3, [r2, #68]	; 0x44
 800536a:	4b0d      	ldr	r3, [pc, #52]	; (80053a0 <HAL_MspInit+0x4c>)
 800536c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800536e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005372:	607b      	str	r3, [r7, #4]
 8005374:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005376:	2300      	movs	r3, #0
 8005378:	603b      	str	r3, [r7, #0]
 800537a:	4b09      	ldr	r3, [pc, #36]	; (80053a0 <HAL_MspInit+0x4c>)
 800537c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537e:	4a08      	ldr	r2, [pc, #32]	; (80053a0 <HAL_MspInit+0x4c>)
 8005380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005384:	6413      	str	r3, [r2, #64]	; 0x40
 8005386:	4b06      	ldr	r3, [pc, #24]	; (80053a0 <HAL_MspInit+0x4c>)
 8005388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800538e:	603b      	str	r3, [r7, #0]
 8005390:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005392:	bf00      	nop
 8005394:	370c      	adds	r7, #12
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr
 800539e:	bf00      	nop
 80053a0:	40023800 	.word	0x40023800

080053a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b08a      	sub	sp, #40	; 0x28
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053ac:	f107 0314 	add.w	r3, r7, #20
 80053b0:	2200      	movs	r2, #0
 80053b2:	601a      	str	r2, [r3, #0]
 80053b4:	605a      	str	r2, [r3, #4]
 80053b6:	609a      	str	r2, [r3, #8]
 80053b8:	60da      	str	r2, [r3, #12]
 80053ba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a33      	ldr	r2, [pc, #204]	; (8005490 <HAL_ADC_MspInit+0xec>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d15f      	bne.n	8005486 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80053c6:	2300      	movs	r3, #0
 80053c8:	613b      	str	r3, [r7, #16]
 80053ca:	4b32      	ldr	r3, [pc, #200]	; (8005494 <HAL_ADC_MspInit+0xf0>)
 80053cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ce:	4a31      	ldr	r2, [pc, #196]	; (8005494 <HAL_ADC_MspInit+0xf0>)
 80053d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053d4:	6453      	str	r3, [r2, #68]	; 0x44
 80053d6:	4b2f      	ldr	r3, [pc, #188]	; (8005494 <HAL_ADC_MspInit+0xf0>)
 80053d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053de:	613b      	str	r3, [r7, #16]
 80053e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053e2:	2300      	movs	r3, #0
 80053e4:	60fb      	str	r3, [r7, #12]
 80053e6:	4b2b      	ldr	r3, [pc, #172]	; (8005494 <HAL_ADC_MspInit+0xf0>)
 80053e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ea:	4a2a      	ldr	r2, [pc, #168]	; (8005494 <HAL_ADC_MspInit+0xf0>)
 80053ec:	f043 0301 	orr.w	r3, r3, #1
 80053f0:	6313      	str	r3, [r2, #48]	; 0x30
 80053f2:	4b28      	ldr	r3, [pc, #160]	; (8005494 <HAL_ADC_MspInit+0xf0>)
 80053f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f6:	f003 0301 	and.w	r3, r3, #1
 80053fa:	60fb      	str	r3, [r7, #12]
 80053fc:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80053fe:	23fc      	movs	r3, #252	; 0xfc
 8005400:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005402:	2303      	movs	r3, #3
 8005404:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005406:	2300      	movs	r3, #0
 8005408:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800540a:	f107 0314 	add.w	r3, r7, #20
 800540e:	4619      	mov	r1, r3
 8005410:	4821      	ldr	r0, [pc, #132]	; (8005498 <HAL_ADC_MspInit+0xf4>)
 8005412:	f001 ff25 	bl	8007260 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8005416:	4b21      	ldr	r3, [pc, #132]	; (800549c <HAL_ADC_MspInit+0xf8>)
 8005418:	4a21      	ldr	r2, [pc, #132]	; (80054a0 <HAL_ADC_MspInit+0xfc>)
 800541a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800541c:	4b1f      	ldr	r3, [pc, #124]	; (800549c <HAL_ADC_MspInit+0xf8>)
 800541e:	2200      	movs	r2, #0
 8005420:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005422:	4b1e      	ldr	r3, [pc, #120]	; (800549c <HAL_ADC_MspInit+0xf8>)
 8005424:	2200      	movs	r2, #0
 8005426:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005428:	4b1c      	ldr	r3, [pc, #112]	; (800549c <HAL_ADC_MspInit+0xf8>)
 800542a:	2200      	movs	r2, #0
 800542c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800542e:	4b1b      	ldr	r3, [pc, #108]	; (800549c <HAL_ADC_MspInit+0xf8>)
 8005430:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005434:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005436:	4b19      	ldr	r3, [pc, #100]	; (800549c <HAL_ADC_MspInit+0xf8>)
 8005438:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800543c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800543e:	4b17      	ldr	r3, [pc, #92]	; (800549c <HAL_ADC_MspInit+0xf8>)
 8005440:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005444:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005446:	4b15      	ldr	r3, [pc, #84]	; (800549c <HAL_ADC_MspInit+0xf8>)
 8005448:	f44f 7280 	mov.w	r2, #256	; 0x100
 800544c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800544e:	4b13      	ldr	r3, [pc, #76]	; (800549c <HAL_ADC_MspInit+0xf8>)
 8005450:	2200      	movs	r2, #0
 8005452:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005454:	4b11      	ldr	r3, [pc, #68]	; (800549c <HAL_ADC_MspInit+0xf8>)
 8005456:	2200      	movs	r2, #0
 8005458:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800545a:	4810      	ldr	r0, [pc, #64]	; (800549c <HAL_ADC_MspInit+0xf8>)
 800545c:	f001 fafe 	bl	8006a5c <HAL_DMA_Init>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d001      	beq.n	800546a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8005466:	f7ff fcbd 	bl	8004de4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a0b      	ldr	r2, [pc, #44]	; (800549c <HAL_ADC_MspInit+0xf8>)
 800546e:	639a      	str	r2, [r3, #56]	; 0x38
 8005470:	4a0a      	ldr	r2, [pc, #40]	; (800549c <HAL_ADC_MspInit+0xf8>)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8005476:	2200      	movs	r2, #0
 8005478:	2100      	movs	r1, #0
 800547a:	2012      	movs	r0, #18
 800547c:	f001 fab7 	bl	80069ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8005480:	2012      	movs	r0, #18
 8005482:	f001 fad0 	bl	8006a26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8005486:	bf00      	nop
 8005488:	3728      	adds	r7, #40	; 0x28
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	40012000 	.word	0x40012000
 8005494:	40023800 	.word	0x40023800
 8005498:	40020000 	.word	0x40020000
 800549c:	20000614 	.word	0x20000614
 80054a0:	40026410 	.word	0x40026410

080054a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b08a      	sub	sp, #40	; 0x28
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054ac:	f107 0314 	add.w	r3, r7, #20
 80054b0:	2200      	movs	r2, #0
 80054b2:	601a      	str	r2, [r3, #0]
 80054b4:	605a      	str	r2, [r3, #4]
 80054b6:	609a      	str	r2, [r3, #8]
 80054b8:	60da      	str	r2, [r3, #12]
 80054ba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a28      	ldr	r2, [pc, #160]	; (8005564 <HAL_I2C_MspInit+0xc0>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d14a      	bne.n	800555c <HAL_I2C_MspInit+0xb8>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054c6:	2300      	movs	r3, #0
 80054c8:	613b      	str	r3, [r7, #16]
 80054ca:	4b27      	ldr	r3, [pc, #156]	; (8005568 <HAL_I2C_MspInit+0xc4>)
 80054cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ce:	4a26      	ldr	r2, [pc, #152]	; (8005568 <HAL_I2C_MspInit+0xc4>)
 80054d0:	f043 0301 	orr.w	r3, r3, #1
 80054d4:	6313      	str	r3, [r2, #48]	; 0x30
 80054d6:	4b24      	ldr	r3, [pc, #144]	; (8005568 <HAL_I2C_MspInit+0xc4>)
 80054d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054da:	f003 0301 	and.w	r3, r3, #1
 80054de:	613b      	str	r3, [r7, #16]
 80054e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80054e2:	2300      	movs	r3, #0
 80054e4:	60fb      	str	r3, [r7, #12]
 80054e6:	4b20      	ldr	r3, [pc, #128]	; (8005568 <HAL_I2C_MspInit+0xc4>)
 80054e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ea:	4a1f      	ldr	r2, [pc, #124]	; (8005568 <HAL_I2C_MspInit+0xc4>)
 80054ec:	f043 0302 	orr.w	r3, r3, #2
 80054f0:	6313      	str	r3, [r2, #48]	; 0x30
 80054f2:	4b1d      	ldr	r3, [pc, #116]	; (8005568 <HAL_I2C_MspInit+0xc4>)
 80054f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f6:	f003 0302 	and.w	r3, r3, #2
 80054fa:	60fb      	str	r3, [r7, #12]
 80054fc:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB4     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80054fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005502:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005504:	2312      	movs	r3, #18
 8005506:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005508:	2301      	movs	r3, #1
 800550a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800550c:	2303      	movs	r3, #3
 800550e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005510:	2304      	movs	r3, #4
 8005512:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005514:	f107 0314 	add.w	r3, r7, #20
 8005518:	4619      	mov	r1, r3
 800551a:	4814      	ldr	r0, [pc, #80]	; (800556c <HAL_I2C_MspInit+0xc8>)
 800551c:	f001 fea0 	bl	8007260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8005520:	2310      	movs	r3, #16
 8005522:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005524:	2312      	movs	r3, #18
 8005526:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005528:	2301      	movs	r3, #1
 800552a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800552c:	2303      	movs	r3, #3
 800552e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8005530:	2309      	movs	r3, #9
 8005532:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005534:	f107 0314 	add.w	r3, r7, #20
 8005538:	4619      	mov	r1, r3
 800553a:	480d      	ldr	r0, [pc, #52]	; (8005570 <HAL_I2C_MspInit+0xcc>)
 800553c:	f001 fe90 	bl	8007260 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8005540:	2300      	movs	r3, #0
 8005542:	60bb      	str	r3, [r7, #8]
 8005544:	4b08      	ldr	r3, [pc, #32]	; (8005568 <HAL_I2C_MspInit+0xc4>)
 8005546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005548:	4a07      	ldr	r2, [pc, #28]	; (8005568 <HAL_I2C_MspInit+0xc4>)
 800554a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800554e:	6413      	str	r3, [r2, #64]	; 0x40
 8005550:	4b05      	ldr	r3, [pc, #20]	; (8005568 <HAL_I2C_MspInit+0xc4>)
 8005552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005554:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005558:	60bb      	str	r3, [r7, #8]
 800555a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800555c:	bf00      	nop
 800555e:	3728      	adds	r7, #40	; 0x28
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}
 8005564:	40005c00 	.word	0x40005c00
 8005568:	40023800 	.word	0x40023800
 800556c:	40020000 	.word	0x40020000
 8005570:	40020400 	.word	0x40020400

08005574 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b08a      	sub	sp, #40	; 0x28
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800557c:	f107 0314 	add.w	r3, r7, #20
 8005580:	2200      	movs	r2, #0
 8005582:	601a      	str	r2, [r3, #0]
 8005584:	605a      	str	r2, [r3, #4]
 8005586:	609a      	str	r2, [r3, #8]
 8005588:	60da      	str	r2, [r3, #12]
 800558a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a19      	ldr	r2, [pc, #100]	; (80055f8 <HAL_SPI_MspInit+0x84>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d12c      	bne.n	80055f0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005596:	2300      	movs	r3, #0
 8005598:	613b      	str	r3, [r7, #16]
 800559a:	4b18      	ldr	r3, [pc, #96]	; (80055fc <HAL_SPI_MspInit+0x88>)
 800559c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559e:	4a17      	ldr	r2, [pc, #92]	; (80055fc <HAL_SPI_MspInit+0x88>)
 80055a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80055a4:	6413      	str	r3, [r2, #64]	; 0x40
 80055a6:	4b15      	ldr	r3, [pc, #84]	; (80055fc <HAL_SPI_MspInit+0x88>)
 80055a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055ae:	613b      	str	r3, [r7, #16]
 80055b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80055b2:	2300      	movs	r3, #0
 80055b4:	60fb      	str	r3, [r7, #12]
 80055b6:	4b11      	ldr	r3, [pc, #68]	; (80055fc <HAL_SPI_MspInit+0x88>)
 80055b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ba:	4a10      	ldr	r2, [pc, #64]	; (80055fc <HAL_SPI_MspInit+0x88>)
 80055bc:	f043 0302 	orr.w	r3, r3, #2
 80055c0:	6313      	str	r3, [r2, #48]	; 0x30
 80055c2:	4b0e      	ldr	r3, [pc, #56]	; (80055fc <HAL_SPI_MspInit+0x88>)
 80055c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c6:	f003 0302 	and.w	r3, r3, #2
 80055ca:	60fb      	str	r3, [r7, #12]
 80055cc:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80055ce:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80055d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055d4:	2302      	movs	r3, #2
 80055d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055d8:	2300      	movs	r3, #0
 80055da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055dc:	2303      	movs	r3, #3
 80055de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80055e0:	2305      	movs	r3, #5
 80055e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055e4:	f107 0314 	add.w	r3, r7, #20
 80055e8:	4619      	mov	r1, r3
 80055ea:	4805      	ldr	r0, [pc, #20]	; (8005600 <HAL_SPI_MspInit+0x8c>)
 80055ec:	f001 fe38 	bl	8007260 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80055f0:	bf00      	nop
 80055f2:	3728      	adds	r7, #40	; 0x28
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	40003800 	.word	0x40003800
 80055fc:	40023800 	.word	0x40023800
 8005600:	40020400 	.word	0x40020400

08005604 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b08c      	sub	sp, #48	; 0x30
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800560c:	f107 031c 	add.w	r3, r7, #28
 8005610:	2200      	movs	r2, #0
 8005612:	601a      	str	r2, [r3, #0]
 8005614:	605a      	str	r2, [r3, #4]
 8005616:	609a      	str	r2, [r3, #8]
 8005618:	60da      	str	r2, [r3, #12]
 800561a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005624:	d153      	bne.n	80056ce <HAL_TIM_Encoder_MspInit+0xca>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005626:	2300      	movs	r3, #0
 8005628:	61bb      	str	r3, [r7, #24]
 800562a:	4b47      	ldr	r3, [pc, #284]	; (8005748 <HAL_TIM_Encoder_MspInit+0x144>)
 800562c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562e:	4a46      	ldr	r2, [pc, #280]	; (8005748 <HAL_TIM_Encoder_MspInit+0x144>)
 8005630:	f043 0301 	orr.w	r3, r3, #1
 8005634:	6413      	str	r3, [r2, #64]	; 0x40
 8005636:	4b44      	ldr	r3, [pc, #272]	; (8005748 <HAL_TIM_Encoder_MspInit+0x144>)
 8005638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563a:	f003 0301 	and.w	r3, r3, #1
 800563e:	61bb      	str	r3, [r7, #24]
 8005640:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005642:	2300      	movs	r3, #0
 8005644:	617b      	str	r3, [r7, #20]
 8005646:	4b40      	ldr	r3, [pc, #256]	; (8005748 <HAL_TIM_Encoder_MspInit+0x144>)
 8005648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800564a:	4a3f      	ldr	r2, [pc, #252]	; (8005748 <HAL_TIM_Encoder_MspInit+0x144>)
 800564c:	f043 0301 	orr.w	r3, r3, #1
 8005650:	6313      	str	r3, [r2, #48]	; 0x30
 8005652:	4b3d      	ldr	r3, [pc, #244]	; (8005748 <HAL_TIM_Encoder_MspInit+0x144>)
 8005654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005656:	f003 0301 	and.w	r3, r3, #1
 800565a:	617b      	str	r3, [r7, #20]
 800565c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800565e:	2300      	movs	r3, #0
 8005660:	613b      	str	r3, [r7, #16]
 8005662:	4b39      	ldr	r3, [pc, #228]	; (8005748 <HAL_TIM_Encoder_MspInit+0x144>)
 8005664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005666:	4a38      	ldr	r2, [pc, #224]	; (8005748 <HAL_TIM_Encoder_MspInit+0x144>)
 8005668:	f043 0302 	orr.w	r3, r3, #2
 800566c:	6313      	str	r3, [r2, #48]	; 0x30
 800566e:	4b36      	ldr	r3, [pc, #216]	; (8005748 <HAL_TIM_Encoder_MspInit+0x144>)
 8005670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005672:	f003 0302 	and.w	r3, r3, #2
 8005676:	613b      	str	r3, [r7, #16]
 8005678:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800567a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800567e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005680:	2302      	movs	r3, #2
 8005682:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005684:	2300      	movs	r3, #0
 8005686:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005688:	2300      	movs	r3, #0
 800568a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800568c:	2301      	movs	r3, #1
 800568e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005690:	f107 031c 	add.w	r3, r7, #28
 8005694:	4619      	mov	r1, r3
 8005696:	482d      	ldr	r0, [pc, #180]	; (800574c <HAL_TIM_Encoder_MspInit+0x148>)
 8005698:	f001 fde2 	bl	8007260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800569c:	2308      	movs	r3, #8
 800569e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056a0:	2302      	movs	r3, #2
 80056a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056a4:	2300      	movs	r3, #0
 80056a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056a8:	2300      	movs	r3, #0
 80056aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80056ac:	2301      	movs	r3, #1
 80056ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056b0:	f107 031c 	add.w	r3, r7, #28
 80056b4:	4619      	mov	r1, r3
 80056b6:	4826      	ldr	r0, [pc, #152]	; (8005750 <HAL_TIM_Encoder_MspInit+0x14c>)
 80056b8:	f001 fdd2 	bl	8007260 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80056bc:	2200      	movs	r2, #0
 80056be:	2100      	movs	r1, #0
 80056c0:	201c      	movs	r0, #28
 80056c2:	f001 f994 	bl	80069ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80056c6:	201c      	movs	r0, #28
 80056c8:	f001 f9ad 	bl	8006a26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80056cc:	e038      	b.n	8005740 <HAL_TIM_Encoder_MspInit+0x13c>
  else if(htim_encoder->Instance==TIM4)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a20      	ldr	r2, [pc, #128]	; (8005754 <HAL_TIM_Encoder_MspInit+0x150>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d133      	bne.n	8005740 <HAL_TIM_Encoder_MspInit+0x13c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80056d8:	2300      	movs	r3, #0
 80056da:	60fb      	str	r3, [r7, #12]
 80056dc:	4b1a      	ldr	r3, [pc, #104]	; (8005748 <HAL_TIM_Encoder_MspInit+0x144>)
 80056de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e0:	4a19      	ldr	r2, [pc, #100]	; (8005748 <HAL_TIM_Encoder_MspInit+0x144>)
 80056e2:	f043 0304 	orr.w	r3, r3, #4
 80056e6:	6413      	str	r3, [r2, #64]	; 0x40
 80056e8:	4b17      	ldr	r3, [pc, #92]	; (8005748 <HAL_TIM_Encoder_MspInit+0x144>)
 80056ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ec:	f003 0304 	and.w	r3, r3, #4
 80056f0:	60fb      	str	r3, [r7, #12]
 80056f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80056f4:	2300      	movs	r3, #0
 80056f6:	60bb      	str	r3, [r7, #8]
 80056f8:	4b13      	ldr	r3, [pc, #76]	; (8005748 <HAL_TIM_Encoder_MspInit+0x144>)
 80056fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056fc:	4a12      	ldr	r2, [pc, #72]	; (8005748 <HAL_TIM_Encoder_MspInit+0x144>)
 80056fe:	f043 0302 	orr.w	r3, r3, #2
 8005702:	6313      	str	r3, [r2, #48]	; 0x30
 8005704:	4b10      	ldr	r3, [pc, #64]	; (8005748 <HAL_TIM_Encoder_MspInit+0x144>)
 8005706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005708:	f003 0302 	and.w	r3, r3, #2
 800570c:	60bb      	str	r3, [r7, #8]
 800570e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005710:	23c0      	movs	r3, #192	; 0xc0
 8005712:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005714:	2302      	movs	r3, #2
 8005716:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005718:	2300      	movs	r3, #0
 800571a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800571c:	2300      	movs	r3, #0
 800571e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005720:	2302      	movs	r3, #2
 8005722:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005724:	f107 031c 	add.w	r3, r7, #28
 8005728:	4619      	mov	r1, r3
 800572a:	4809      	ldr	r0, [pc, #36]	; (8005750 <HAL_TIM_Encoder_MspInit+0x14c>)
 800572c:	f001 fd98 	bl	8007260 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8005730:	2200      	movs	r2, #0
 8005732:	2100      	movs	r1, #0
 8005734:	201e      	movs	r0, #30
 8005736:	f001 f95a 	bl	80069ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800573a:	201e      	movs	r0, #30
 800573c:	f001 f973 	bl	8006a26 <HAL_NVIC_EnableIRQ>
}
 8005740:	bf00      	nop
 8005742:	3730      	adds	r7, #48	; 0x30
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}
 8005748:	40023800 	.word	0x40023800
 800574c:	40020000 	.word	0x40020000
 8005750:	40020400 	.word	0x40020400
 8005754:	40000800 	.word	0x40000800

08005758 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005758:	b480      	push	{r7}
 800575a:	b085      	sub	sp, #20
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a0b      	ldr	r2, [pc, #44]	; (8005794 <HAL_TIM_PWM_MspInit+0x3c>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d10d      	bne.n	8005786 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800576a:	2300      	movs	r3, #0
 800576c:	60fb      	str	r3, [r7, #12]
 800576e:	4b0a      	ldr	r3, [pc, #40]	; (8005798 <HAL_TIM_PWM_MspInit+0x40>)
 8005770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005772:	4a09      	ldr	r2, [pc, #36]	; (8005798 <HAL_TIM_PWM_MspInit+0x40>)
 8005774:	f043 0302 	orr.w	r3, r3, #2
 8005778:	6413      	str	r3, [r2, #64]	; 0x40
 800577a:	4b07      	ldr	r3, [pc, #28]	; (8005798 <HAL_TIM_PWM_MspInit+0x40>)
 800577c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577e:	f003 0302 	and.w	r3, r3, #2
 8005782:	60fb      	str	r3, [r7, #12]
 8005784:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8005786:	bf00      	nop
 8005788:	3714      	adds	r7, #20
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr
 8005792:	bf00      	nop
 8005794:	40000400 	.word	0x40000400
 8005798:	40023800 	.word	0x40023800

0800579c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b084      	sub	sp, #16
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a18      	ldr	r2, [pc, #96]	; (800580c <HAL_TIM_Base_MspInit+0x70>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d116      	bne.n	80057dc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80057ae:	2300      	movs	r3, #0
 80057b0:	60fb      	str	r3, [r7, #12]
 80057b2:	4b17      	ldr	r3, [pc, #92]	; (8005810 <HAL_TIM_Base_MspInit+0x74>)
 80057b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b6:	4a16      	ldr	r2, [pc, #88]	; (8005810 <HAL_TIM_Base_MspInit+0x74>)
 80057b8:	f043 0308 	orr.w	r3, r3, #8
 80057bc:	6413      	str	r3, [r2, #64]	; 0x40
 80057be:	4b14      	ldr	r3, [pc, #80]	; (8005810 <HAL_TIM_Base_MspInit+0x74>)
 80057c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c2:	f003 0308 	and.w	r3, r3, #8
 80057c6:	60fb      	str	r3, [r7, #12]
 80057c8:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80057ca:	2200      	movs	r2, #0
 80057cc:	2100      	movs	r1, #0
 80057ce:	2032      	movs	r0, #50	; 0x32
 80057d0:	f001 f90d 	bl	80069ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80057d4:	2032      	movs	r0, #50	; 0x32
 80057d6:	f001 f926 	bl	8006a26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 80057da:	e012      	b.n	8005802 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM9)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a0c      	ldr	r2, [pc, #48]	; (8005814 <HAL_TIM_Base_MspInit+0x78>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d10d      	bne.n	8005802 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80057e6:	2300      	movs	r3, #0
 80057e8:	60bb      	str	r3, [r7, #8]
 80057ea:	4b09      	ldr	r3, [pc, #36]	; (8005810 <HAL_TIM_Base_MspInit+0x74>)
 80057ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ee:	4a08      	ldr	r2, [pc, #32]	; (8005810 <HAL_TIM_Base_MspInit+0x74>)
 80057f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057f4:	6453      	str	r3, [r2, #68]	; 0x44
 80057f6:	4b06      	ldr	r3, [pc, #24]	; (8005810 <HAL_TIM_Base_MspInit+0x74>)
 80057f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057fe:	60bb      	str	r3, [r7, #8]
 8005800:	68bb      	ldr	r3, [r7, #8]
}
 8005802:	bf00      	nop
 8005804:	3710      	adds	r7, #16
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop
 800580c:	40000c00 	.word	0x40000c00
 8005810:	40023800 	.word	0x40023800
 8005814:	40014000 	.word	0x40014000

08005818 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b088      	sub	sp, #32
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005820:	f107 030c 	add.w	r3, r7, #12
 8005824:	2200      	movs	r2, #0
 8005826:	601a      	str	r2, [r3, #0]
 8005828:	605a      	str	r2, [r3, #4]
 800582a:	609a      	str	r2, [r3, #8]
 800582c:	60da      	str	r2, [r3, #12]
 800582e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a12      	ldr	r2, [pc, #72]	; (8005880 <HAL_TIM_MspPostInit+0x68>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d11d      	bne.n	8005876 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800583a:	2300      	movs	r3, #0
 800583c:	60bb      	str	r3, [r7, #8]
 800583e:	4b11      	ldr	r3, [pc, #68]	; (8005884 <HAL_TIM_MspPostInit+0x6c>)
 8005840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005842:	4a10      	ldr	r2, [pc, #64]	; (8005884 <HAL_TIM_MspPostInit+0x6c>)
 8005844:	f043 0302 	orr.w	r3, r3, #2
 8005848:	6313      	str	r3, [r2, #48]	; 0x30
 800584a:	4b0e      	ldr	r3, [pc, #56]	; (8005884 <HAL_TIM_MspPostInit+0x6c>)
 800584c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800584e:	f003 0302 	and.w	r3, r3, #2
 8005852:	60bb      	str	r3, [r7, #8]
 8005854:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005856:	2303      	movs	r3, #3
 8005858:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800585a:	2302      	movs	r3, #2
 800585c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800585e:	2300      	movs	r3, #0
 8005860:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005862:	2300      	movs	r3, #0
 8005864:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005866:	2302      	movs	r3, #2
 8005868:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800586a:	f107 030c 	add.w	r3, r7, #12
 800586e:	4619      	mov	r1, r3
 8005870:	4805      	ldr	r0, [pc, #20]	; (8005888 <HAL_TIM_MspPostInit+0x70>)
 8005872:	f001 fcf5 	bl	8007260 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8005876:	bf00      	nop
 8005878:	3720      	adds	r7, #32
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	40000400 	.word	0x40000400
 8005884:	40023800 	.word	0x40023800
 8005888:	40020400 	.word	0x40020400

0800588c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b08c      	sub	sp, #48	; 0x30
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005894:	f107 031c 	add.w	r3, r7, #28
 8005898:	2200      	movs	r2, #0
 800589a:	601a      	str	r2, [r3, #0]
 800589c:	605a      	str	r2, [r3, #4]
 800589e:	609a      	str	r2, [r3, #8]
 80058a0:	60da      	str	r2, [r3, #12]
 80058a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a37      	ldr	r2, [pc, #220]	; (8005988 <HAL_UART_MspInit+0xfc>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d12d      	bne.n	800590a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80058ae:	2300      	movs	r3, #0
 80058b0:	61bb      	str	r3, [r7, #24]
 80058b2:	4b36      	ldr	r3, [pc, #216]	; (800598c <HAL_UART_MspInit+0x100>)
 80058b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058b6:	4a35      	ldr	r2, [pc, #212]	; (800598c <HAL_UART_MspInit+0x100>)
 80058b8:	f043 0310 	orr.w	r3, r3, #16
 80058bc:	6453      	str	r3, [r2, #68]	; 0x44
 80058be:	4b33      	ldr	r3, [pc, #204]	; (800598c <HAL_UART_MspInit+0x100>)
 80058c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058c2:	f003 0310 	and.w	r3, r3, #16
 80058c6:	61bb      	str	r3, [r7, #24]
 80058c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80058ca:	2300      	movs	r3, #0
 80058cc:	617b      	str	r3, [r7, #20]
 80058ce:	4b2f      	ldr	r3, [pc, #188]	; (800598c <HAL_UART_MspInit+0x100>)
 80058d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d2:	4a2e      	ldr	r2, [pc, #184]	; (800598c <HAL_UART_MspInit+0x100>)
 80058d4:	f043 0301 	orr.w	r3, r3, #1
 80058d8:	6313      	str	r3, [r2, #48]	; 0x30
 80058da:	4b2c      	ldr	r3, [pc, #176]	; (800598c <HAL_UART_MspInit+0x100>)
 80058dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058de:	f003 0301 	and.w	r3, r3, #1
 80058e2:	617b      	str	r3, [r7, #20]
 80058e4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80058e6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80058ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058ec:	2302      	movs	r3, #2
 80058ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058f0:	2300      	movs	r3, #0
 80058f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058f4:	2303      	movs	r3, #3
 80058f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80058f8:	2307      	movs	r3, #7
 80058fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058fc:	f107 031c 	add.w	r3, r7, #28
 8005900:	4619      	mov	r1, r3
 8005902:	4823      	ldr	r0, [pc, #140]	; (8005990 <HAL_UART_MspInit+0x104>)
 8005904:	f001 fcac 	bl	8007260 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8005908:	e039      	b.n	800597e <HAL_UART_MspInit+0xf2>
  else if(huart->Instance==USART6)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a21      	ldr	r2, [pc, #132]	; (8005994 <HAL_UART_MspInit+0x108>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d134      	bne.n	800597e <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8005914:	2300      	movs	r3, #0
 8005916:	613b      	str	r3, [r7, #16]
 8005918:	4b1c      	ldr	r3, [pc, #112]	; (800598c <HAL_UART_MspInit+0x100>)
 800591a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800591c:	4a1b      	ldr	r2, [pc, #108]	; (800598c <HAL_UART_MspInit+0x100>)
 800591e:	f043 0320 	orr.w	r3, r3, #32
 8005922:	6453      	str	r3, [r2, #68]	; 0x44
 8005924:	4b19      	ldr	r3, [pc, #100]	; (800598c <HAL_UART_MspInit+0x100>)
 8005926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005928:	f003 0320 	and.w	r3, r3, #32
 800592c:	613b      	str	r3, [r7, #16]
 800592e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005930:	2300      	movs	r3, #0
 8005932:	60fb      	str	r3, [r7, #12]
 8005934:	4b15      	ldr	r3, [pc, #84]	; (800598c <HAL_UART_MspInit+0x100>)
 8005936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005938:	4a14      	ldr	r2, [pc, #80]	; (800598c <HAL_UART_MspInit+0x100>)
 800593a:	f043 0301 	orr.w	r3, r3, #1
 800593e:	6313      	str	r3, [r2, #48]	; 0x30
 8005940:	4b12      	ldr	r3, [pc, #72]	; (800598c <HAL_UART_MspInit+0x100>)
 8005942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005944:	f003 0301 	and.w	r3, r3, #1
 8005948:	60fb      	str	r3, [r7, #12]
 800594a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800594c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8005950:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005952:	2302      	movs	r3, #2
 8005954:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005956:	2300      	movs	r3, #0
 8005958:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800595a:	2303      	movs	r3, #3
 800595c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800595e:	2308      	movs	r3, #8
 8005960:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005962:	f107 031c 	add.w	r3, r7, #28
 8005966:	4619      	mov	r1, r3
 8005968:	4809      	ldr	r0, [pc, #36]	; (8005990 <HAL_UART_MspInit+0x104>)
 800596a:	f001 fc79 	bl	8007260 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800596e:	2200      	movs	r2, #0
 8005970:	2100      	movs	r1, #0
 8005972:	2047      	movs	r0, #71	; 0x47
 8005974:	f001 f83b 	bl	80069ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8005978:	2047      	movs	r0, #71	; 0x47
 800597a:	f001 f854 	bl	8006a26 <HAL_NVIC_EnableIRQ>
}
 800597e:	bf00      	nop
 8005980:	3730      	adds	r7, #48	; 0x30
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
 8005986:	bf00      	nop
 8005988:	40011000 	.word	0x40011000
 800598c:	40023800 	.word	0x40023800
 8005990:	40020000 	.word	0x40020000
 8005994:	40011400 	.word	0x40011400

08005998 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005998:	b480      	push	{r7}
 800599a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800599c:	e7fe      	b.n	800599c <NMI_Handler+0x4>

0800599e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800599e:	b480      	push	{r7}
 80059a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80059a2:	e7fe      	b.n	80059a2 <HardFault_Handler+0x4>

080059a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80059a4:	b480      	push	{r7}
 80059a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80059a8:	e7fe      	b.n	80059a8 <MemManage_Handler+0x4>

080059aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80059aa:	b480      	push	{r7}
 80059ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80059ae:	e7fe      	b.n	80059ae <BusFault_Handler+0x4>

080059b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80059b0:	b480      	push	{r7}
 80059b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80059b4:	e7fe      	b.n	80059b4 <UsageFault_Handler+0x4>

080059b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80059b6:	b480      	push	{r7}
 80059b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80059ba:	bf00      	nop
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr

080059c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80059c4:	b480      	push	{r7}
 80059c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80059c8:	bf00      	nop
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr

080059d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80059d2:	b480      	push	{r7}
 80059d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80059d6:	bf00      	nop
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr

080059e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	af00      	add	r7, sp, #0
//		old_countLeft = countLeft;
//		old_countRight = countRight;
//		indx = 0;
//	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80059e4:	f000 f99e 	bl	8005d24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80059e8:	bf00      	nop
 80059ea:	bd80      	pop	{r7, pc}

080059ec <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80059f0:	4802      	ldr	r0, [pc, #8]	; (80059fc <ADC_IRQHandler+0x10>)
 80059f2:	f000 fa1e 	bl	8005e32 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80059f6:	bf00      	nop
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop
 80059fc:	20000558 	.word	0x20000558

08005a00 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005a04:	4802      	ldr	r0, [pc, #8]	; (8005a10 <TIM2_IRQHandler+0x10>)
 8005a06:	f003 fce3 	bl	80093d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005a0a:	bf00      	nop
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	bf00      	nop
 8005a10:	200006dc 	.word	0x200006dc

08005a14 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8005a18:	4802      	ldr	r0, [pc, #8]	; (8005a24 <TIM4_IRQHandler+0x10>)
 8005a1a:	f003 fcd9 	bl	80093d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8005a1e:	bf00      	nop
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	bf00      	nop
 8005a24:	20000454 	.word	0x20000454

08005a28 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8005a2c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005a30:	f001 fdcc 	bl	80075cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005a34:	bf00      	nop
 8005a36:	bd80      	pop	{r7, pc}

08005a38 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8005a3c:	4802      	ldr	r0, [pc, #8]	; (8005a48 <TIM5_IRQHandler+0x10>)
 8005a3e:	f003 fcc7 	bl	80093d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8005a42:	bf00      	nop
 8005a44:	bd80      	pop	{r7, pc}
 8005a46:	bf00      	nop
 8005a48:	200004c8 	.word	0x200004c8

08005a4c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005a50:	4802      	ldr	r0, [pc, #8]	; (8005a5c <DMA2_Stream0_IRQHandler+0x10>)
 8005a52:	f001 f99b 	bl	8006d8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8005a56:	bf00      	nop
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	bf00      	nop
 8005a5c:	20000614 	.word	0x20000614

08005a60 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

//	Uart_isr (&huart6);

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8005a64:	4802      	ldr	r0, [pc, #8]	; (8005a70 <USART6_IRQHandler+0x10>)
 8005a66:	f004 fbcb 	bl	800a200 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8005a6a:	bf00      	nop
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	20000364 	.word	0x20000364

08005a74 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005a74:	b480      	push	{r7}
 8005a76:	af00      	add	r7, sp, #0
	return 1;
 8005a78:	2301      	movs	r3, #1
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr

08005a84 <_kill>:

int _kill(int pid, int sig)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b082      	sub	sp, #8
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005a8e:	f005 fa73 	bl	800af78 <__errno>
 8005a92:	4603      	mov	r3, r0
 8005a94:	2216      	movs	r2, #22
 8005a96:	601a      	str	r2, [r3, #0]
	return -1;
 8005a98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3708      	adds	r7, #8
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <_exit>:

void _exit (int status)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b082      	sub	sp, #8
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005aac:	f04f 31ff 	mov.w	r1, #4294967295
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f7ff ffe7 	bl	8005a84 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005ab6:	e7fe      	b.n	8005ab6 <_exit+0x12>

08005ab8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b086      	sub	sp, #24
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	617b      	str	r3, [r7, #20]
 8005ac8:	e00a      	b.n	8005ae0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005aca:	f3af 8000 	nop.w
 8005ace:	4601      	mov	r1, r0
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	1c5a      	adds	r2, r3, #1
 8005ad4:	60ba      	str	r2, [r7, #8]
 8005ad6:	b2ca      	uxtb	r2, r1
 8005ad8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	3301      	adds	r3, #1
 8005ade:	617b      	str	r3, [r7, #20]
 8005ae0:	697a      	ldr	r2, [r7, #20]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	dbf0      	blt.n	8005aca <_read+0x12>
	}

return len;
 8005ae8:	687b      	ldr	r3, [r7, #4]
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3718      	adds	r7, #24
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}

08005af2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005af2:	b580      	push	{r7, lr}
 8005af4:	b086      	sub	sp, #24
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	60f8      	str	r0, [r7, #12]
 8005afa:	60b9      	str	r1, [r7, #8]
 8005afc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005afe:	2300      	movs	r3, #0
 8005b00:	617b      	str	r3, [r7, #20]
 8005b02:	e009      	b.n	8005b18 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	1c5a      	adds	r2, r3, #1
 8005b08:	60ba      	str	r2, [r7, #8]
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f7fd fb19 	bl	8003144 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	3301      	adds	r3, #1
 8005b16:	617b      	str	r3, [r7, #20]
 8005b18:	697a      	ldr	r2, [r7, #20]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	dbf1      	blt.n	8005b04 <_write+0x12>
	}
	return len;
 8005b20:	687b      	ldr	r3, [r7, #4]
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3718      	adds	r7, #24
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}

08005b2a <_close>:

int _close(int file)
{
 8005b2a:	b480      	push	{r7}
 8005b2c:	b083      	sub	sp, #12
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
	return -1;
 8005b32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	370c      	adds	r7, #12
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr

08005b42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005b42:	b480      	push	{r7}
 8005b44:	b083      	sub	sp, #12
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6078      	str	r0, [r7, #4]
 8005b4a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005b52:	605a      	str	r2, [r3, #4]
	return 0;
 8005b54:	2300      	movs	r3, #0
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	370c      	adds	r7, #12
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr

08005b62 <_isatty>:

int _isatty(int file)
{
 8005b62:	b480      	push	{r7}
 8005b64:	b083      	sub	sp, #12
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	6078      	str	r0, [r7, #4]
	return 1;
 8005b6a:	2301      	movs	r3, #1
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	370c      	adds	r7, #12
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr

08005b78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b085      	sub	sp, #20
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	60f8      	str	r0, [r7, #12]
 8005b80:	60b9      	str	r1, [r7, #8]
 8005b82:	607a      	str	r2, [r7, #4]
	return 0;
 8005b84:	2300      	movs	r3, #0
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3714      	adds	r7, #20
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr
	...

08005b94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b086      	sub	sp, #24
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005b9c:	4a14      	ldr	r2, [pc, #80]	; (8005bf0 <_sbrk+0x5c>)
 8005b9e:	4b15      	ldr	r3, [pc, #84]	; (8005bf4 <_sbrk+0x60>)
 8005ba0:	1ad3      	subs	r3, r2, r3
 8005ba2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005ba8:	4b13      	ldr	r3, [pc, #76]	; (8005bf8 <_sbrk+0x64>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d102      	bne.n	8005bb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005bb0:	4b11      	ldr	r3, [pc, #68]	; (8005bf8 <_sbrk+0x64>)
 8005bb2:	4a12      	ldr	r2, [pc, #72]	; (8005bfc <_sbrk+0x68>)
 8005bb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005bb6:	4b10      	ldr	r3, [pc, #64]	; (8005bf8 <_sbrk+0x64>)
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	4413      	add	r3, r2
 8005bbe:	693a      	ldr	r2, [r7, #16]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d207      	bcs.n	8005bd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005bc4:	f005 f9d8 	bl	800af78 <__errno>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	220c      	movs	r2, #12
 8005bcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005bce:	f04f 33ff 	mov.w	r3, #4294967295
 8005bd2:	e009      	b.n	8005be8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005bd4:	4b08      	ldr	r3, [pc, #32]	; (8005bf8 <_sbrk+0x64>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005bda:	4b07      	ldr	r3, [pc, #28]	; (8005bf8 <_sbrk+0x64>)
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4413      	add	r3, r2
 8005be2:	4a05      	ldr	r2, [pc, #20]	; (8005bf8 <_sbrk+0x64>)
 8005be4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005be6:	68fb      	ldr	r3, [r7, #12]
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3718      	adds	r7, #24
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}
 8005bf0:	20010000 	.word	0x20010000
 8005bf4:	00000400 	.word	0x00000400
 8005bf8:	20000288 	.word	0x20000288
 8005bfc:	20000750 	.word	0x20000750

08005c00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005c00:	b480      	push	{r7}
 8005c02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005c04:	4b08      	ldr	r3, [pc, #32]	; (8005c28 <SystemInit+0x28>)
 8005c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c0a:	4a07      	ldr	r2, [pc, #28]	; (8005c28 <SystemInit+0x28>)
 8005c0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005c10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005c14:	4b04      	ldr	r3, [pc, #16]	; (8005c28 <SystemInit+0x28>)
 8005c16:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005c1a:	609a      	str	r2, [r3, #8]
#endif
}
 8005c1c:	bf00      	nop
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr
 8005c26:	bf00      	nop
 8005c28:	e000ed00 	.word	0xe000ed00

08005c2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005c2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005c64 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005c30:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005c32:	e003      	b.n	8005c3c <LoopCopyDataInit>

08005c34 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005c34:	4b0c      	ldr	r3, [pc, #48]	; (8005c68 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005c36:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005c38:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005c3a:	3104      	adds	r1, #4

08005c3c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005c3c:	480b      	ldr	r0, [pc, #44]	; (8005c6c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005c3e:	4b0c      	ldr	r3, [pc, #48]	; (8005c70 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005c40:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005c42:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005c44:	d3f6      	bcc.n	8005c34 <CopyDataInit>
  ldr  r2, =_sbss
 8005c46:	4a0b      	ldr	r2, [pc, #44]	; (8005c74 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005c48:	e002      	b.n	8005c50 <LoopFillZerobss>

08005c4a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005c4a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005c4c:	f842 3b04 	str.w	r3, [r2], #4

08005c50 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005c50:	4b09      	ldr	r3, [pc, #36]	; (8005c78 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005c52:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005c54:	d3f9      	bcc.n	8005c4a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005c56:	f7ff ffd3 	bl	8005c00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005c5a:	f005 f993 	bl	800af84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005c5e:	f7fd fc47 	bl	80034f0 <main>
  bx  lr    
 8005c62:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005c64:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 8005c68:	08010200 	.word	0x08010200
  ldr  r0, =_sdata
 8005c6c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005c70:	20000248 	.word	0x20000248
  ldr  r2, =_sbss
 8005c74:	20000248 	.word	0x20000248
  ldr  r3, = _ebss
 8005c78:	20000750 	.word	0x20000750

08005c7c <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005c7c:	e7fe      	b.n	8005c7c <DMA1_Stream0_IRQHandler>
	...

08005c80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005c84:	4b0e      	ldr	r3, [pc, #56]	; (8005cc0 <HAL_Init+0x40>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a0d      	ldr	r2, [pc, #52]	; (8005cc0 <HAL_Init+0x40>)
 8005c8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005c8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005c90:	4b0b      	ldr	r3, [pc, #44]	; (8005cc0 <HAL_Init+0x40>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a0a      	ldr	r2, [pc, #40]	; (8005cc0 <HAL_Init+0x40>)
 8005c96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005c9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005c9c:	4b08      	ldr	r3, [pc, #32]	; (8005cc0 <HAL_Init+0x40>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a07      	ldr	r2, [pc, #28]	; (8005cc0 <HAL_Init+0x40>)
 8005ca2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ca6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005ca8:	2003      	movs	r0, #3
 8005caa:	f000 fe95 	bl	80069d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005cae:	2000      	movs	r0, #0
 8005cb0:	f000 f808 	bl	8005cc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005cb4:	f7ff fb4e 	bl	8005354 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005cb8:	2300      	movs	r3, #0
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	40023c00 	.word	0x40023c00

08005cc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b082      	sub	sp, #8
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005ccc:	4b12      	ldr	r3, [pc, #72]	; (8005d18 <HAL_InitTick+0x54>)
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	4b12      	ldr	r3, [pc, #72]	; (8005d1c <HAL_InitTick+0x58>)
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005cda:	fbb3 f3f1 	udiv	r3, r3, r1
 8005cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f000 fead 	bl	8006a42 <HAL_SYSTICK_Config>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d001      	beq.n	8005cf2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e00e      	b.n	8005d10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2b0f      	cmp	r3, #15
 8005cf6:	d80a      	bhi.n	8005d0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	6879      	ldr	r1, [r7, #4]
 8005cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8005d00:	f000 fe75 	bl	80069ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005d04:	4a06      	ldr	r2, [pc, #24]	; (8005d20 <HAL_InitTick+0x5c>)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	e000      	b.n	8005d10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3708      	adds	r7, #8
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	20000068 	.word	0x20000068
 8005d1c:	20000070 	.word	0x20000070
 8005d20:	2000006c 	.word	0x2000006c

08005d24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005d24:	b480      	push	{r7}
 8005d26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005d28:	4b06      	ldr	r3, [pc, #24]	; (8005d44 <HAL_IncTick+0x20>)
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	4b06      	ldr	r3, [pc, #24]	; (8005d48 <HAL_IncTick+0x24>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4413      	add	r3, r2
 8005d34:	4a04      	ldr	r2, [pc, #16]	; (8005d48 <HAL_IncTick+0x24>)
 8005d36:	6013      	str	r3, [r2, #0]
}
 8005d38:	bf00      	nop
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr
 8005d42:	bf00      	nop
 8005d44:	20000070 	.word	0x20000070
 8005d48:	2000073c 	.word	0x2000073c

08005d4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	af00      	add	r7, sp, #0
  return uwTick;
 8005d50:	4b03      	ldr	r3, [pc, #12]	; (8005d60 <HAL_GetTick+0x14>)
 8005d52:	681b      	ldr	r3, [r3, #0]
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr
 8005d5e:	bf00      	nop
 8005d60:	2000073c 	.word	0x2000073c

08005d64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b084      	sub	sp, #16
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005d6c:	f7ff ffee 	bl	8005d4c <HAL_GetTick>
 8005d70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d7c:	d005      	beq.n	8005d8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005d7e:	4b0a      	ldr	r3, [pc, #40]	; (8005da8 <HAL_Delay+0x44>)
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	461a      	mov	r2, r3
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	4413      	add	r3, r2
 8005d88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005d8a:	bf00      	nop
 8005d8c:	f7ff ffde 	bl	8005d4c <HAL_GetTick>
 8005d90:	4602      	mov	r2, r0
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	1ad3      	subs	r3, r2, r3
 8005d96:	68fa      	ldr	r2, [r7, #12]
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d8f7      	bhi.n	8005d8c <HAL_Delay+0x28>
  {
  }
}
 8005d9c:	bf00      	nop
 8005d9e:	bf00      	nop
 8005da0:	3710      	adds	r7, #16
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	20000070 	.word	0x20000070

08005dac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005db4:	2300      	movs	r3, #0
 8005db6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d101      	bne.n	8005dc2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e033      	b.n	8005e2a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d109      	bne.n	8005dde <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f7ff faea 	bl	80053a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de2:	f003 0310 	and.w	r3, r3, #16
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d118      	bne.n	8005e1c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005df2:	f023 0302 	bic.w	r3, r3, #2
 8005df6:	f043 0202 	orr.w	r2, r3, #2
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f000 fb92 	bl	8006528 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0e:	f023 0303 	bic.w	r3, r3, #3
 8005e12:	f043 0201 	orr.w	r2, r3, #1
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	641a      	str	r2, [r3, #64]	; 0x40
 8005e1a:	e001      	b.n	8005e20 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2200      	movs	r2, #0
 8005e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3710      	adds	r7, #16
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}

08005e32 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8005e32:	b580      	push	{r7, lr}
 8005e34:	b084      	sub	sp, #16
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	60fb      	str	r3, [r7, #12]
 8005e3e:	2300      	movs	r3, #0
 8005e40:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 0302 	and.w	r3, r3, #2
 8005e4c:	2b02      	cmp	r3, #2
 8005e4e:	bf0c      	ite	eq
 8005e50:	2301      	moveq	r3, #1
 8005e52:	2300      	movne	r3, #0
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	f003 0320 	and.w	r3, r3, #32
 8005e62:	2b20      	cmp	r3, #32
 8005e64:	bf0c      	ite	eq
 8005e66:	2301      	moveq	r3, #1
 8005e68:	2300      	movne	r3, #0
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d049      	beq.n	8005f08 <HAL_ADC_IRQHandler+0xd6>
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d046      	beq.n	8005f08 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7e:	f003 0310 	and.w	r3, r3, #16
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d105      	bne.n	8005e92 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d12b      	bne.n	8005ef8 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d127      	bne.n	8005ef8 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eae:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d006      	beq.n	8005ec4 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d119      	bne.n	8005ef8 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	685a      	ldr	r2, [r3, #4]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f022 0220 	bic.w	r2, r2, #32
 8005ed2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d105      	bne.n	8005ef8 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef0:	f043 0201 	orr.w	r2, r3, #1
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f000 f9cb 	bl	8006294 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f06f 0212 	mvn.w	r2, #18
 8005f06:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f003 0304 	and.w	r3, r3, #4
 8005f12:	2b04      	cmp	r3, #4
 8005f14:	bf0c      	ite	eq
 8005f16:	2301      	moveq	r3, #1
 8005f18:	2300      	movne	r3, #0
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f28:	2b80      	cmp	r3, #128	; 0x80
 8005f2a:	bf0c      	ite	eq
 8005f2c:	2301      	moveq	r3, #1
 8005f2e:	2300      	movne	r3, #0
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d057      	beq.n	8005fea <HAL_ADC_IRQHandler+0x1b8>
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d054      	beq.n	8005fea <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f44:	f003 0310 	and.w	r3, r3, #16
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d105      	bne.n	8005f58 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f50:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d139      	bne.n	8005fda <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f6c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d006      	beq.n	8005f82 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d12b      	bne.n	8005fda <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d124      	bne.n	8005fda <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d11d      	bne.n	8005fda <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d119      	bne.n	8005fda <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	685a      	ldr	r2, [r3, #4]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005fb4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d105      	bne.n	8005fda <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd2:	f043 0201 	orr.w	r2, r3, #1
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f000 fc22 	bl	8006824 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f06f 020c 	mvn.w	r2, #12
 8005fe8:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f003 0301 	and.w	r3, r3, #1
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	bf0c      	ite	eq
 8005ff8:	2301      	moveq	r3, #1
 8005ffa:	2300      	movne	r3, #0
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800600a:	2b40      	cmp	r3, #64	; 0x40
 800600c:	bf0c      	ite	eq
 800600e:	2301      	moveq	r3, #1
 8006010:	2300      	movne	r3, #0
 8006012:	b2db      	uxtb	r3, r3
 8006014:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d017      	beq.n	800604c <HAL_ADC_IRQHandler+0x21a>
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d014      	beq.n	800604c <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f003 0301 	and.w	r3, r3, #1
 800602c:	2b01      	cmp	r3, #1
 800602e:	d10d      	bne.n	800604c <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006034:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f000 f93d 	bl	80062bc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f06f 0201 	mvn.w	r2, #1
 800604a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f003 0320 	and.w	r3, r3, #32
 8006056:	2b20      	cmp	r3, #32
 8006058:	bf0c      	ite	eq
 800605a:	2301      	moveq	r3, #1
 800605c:	2300      	movne	r3, #0
 800605e:	b2db      	uxtb	r3, r3
 8006060:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800606c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006070:	bf0c      	ite	eq
 8006072:	2301      	moveq	r3, #1
 8006074:	2300      	movne	r3, #0
 8006076:	b2db      	uxtb	r3, r3
 8006078:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d015      	beq.n	80060ac <HAL_ADC_IRQHandler+0x27a>
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d012      	beq.n	80060ac <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800608a:	f043 0202 	orr.w	r2, r3, #2
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f06f 0220 	mvn.w	r2, #32
 800609a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f000 f917 	bl	80062d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f06f 0220 	mvn.w	r2, #32
 80060aa:	601a      	str	r2, [r3, #0]
  }
}
 80060ac:	bf00      	nop
 80060ae:	3710      	adds	r7, #16
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b086      	sub	sp, #24
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	60b9      	str	r1, [r7, #8]
 80060be:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80060c0:	2300      	movs	r3, #0
 80060c2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d101      	bne.n	80060d2 <HAL_ADC_Start_DMA+0x1e>
 80060ce:	2302      	movs	r3, #2
 80060d0:	e0ce      	b.n	8006270 <HAL_ADC_Start_DMA+0x1bc>
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2201      	movs	r2, #1
 80060d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	f003 0301 	and.w	r3, r3, #1
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d018      	beq.n	800611a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	689a      	ldr	r2, [r3, #8]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f042 0201 	orr.w	r2, r2, #1
 80060f6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80060f8:	4b5f      	ldr	r3, [pc, #380]	; (8006278 <HAL_ADC_Start_DMA+0x1c4>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a5f      	ldr	r2, [pc, #380]	; (800627c <HAL_ADC_Start_DMA+0x1c8>)
 80060fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006102:	0c9a      	lsrs	r2, r3, #18
 8006104:	4613      	mov	r3, r2
 8006106:	005b      	lsls	r3, r3, #1
 8006108:	4413      	add	r3, r2
 800610a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800610c:	e002      	b.n	8006114 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	3b01      	subs	r3, #1
 8006112:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d1f9      	bne.n	800610e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006124:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006128:	d107      	bne.n	800613a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	689a      	ldr	r2, [r3, #8]
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006138:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	f003 0301 	and.w	r3, r3, #1
 8006144:	2b01      	cmp	r3, #1
 8006146:	f040 8086 	bne.w	8006256 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800614e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006152:	f023 0301 	bic.w	r3, r3, #1
 8006156:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006168:	2b00      	cmp	r3, #0
 800616a:	d007      	beq.n	800617c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006170:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006174:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006180:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006184:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006188:	d106      	bne.n	8006198 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800618e:	f023 0206 	bic.w	r2, r3, #6
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	645a      	str	r2, [r3, #68]	; 0x44
 8006196:	e002      	b.n	800619e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2200      	movs	r2, #0
 800619c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2200      	movs	r2, #0
 80061a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80061a6:	4b36      	ldr	r3, [pc, #216]	; (8006280 <HAL_ADC_Start_DMA+0x1cc>)
 80061a8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ae:	4a35      	ldr	r2, [pc, #212]	; (8006284 <HAL_ADC_Start_DMA+0x1d0>)
 80061b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061b6:	4a34      	ldr	r2, [pc, #208]	; (8006288 <HAL_ADC_Start_DMA+0x1d4>)
 80061b8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061be:	4a33      	ldr	r2, [pc, #204]	; (800628c <HAL_ADC_Start_DMA+0x1d8>)
 80061c0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80061ca:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	685a      	ldr	r2, [r3, #4]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80061da:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	689a      	ldr	r2, [r3, #8]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061ea:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	334c      	adds	r3, #76	; 0x4c
 80061f6:	4619      	mov	r1, r3
 80061f8:	68ba      	ldr	r2, [r7, #8]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f000 fcdc 	bl	8006bb8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	f003 031f 	and.w	r3, r3, #31
 8006208:	2b00      	cmp	r3, #0
 800620a:	d10f      	bne.n	800622c <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006216:	2b00      	cmp	r3, #0
 8006218:	d129      	bne.n	800626e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	689a      	ldr	r2, [r3, #8]
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006228:	609a      	str	r2, [r3, #8]
 800622a:	e020      	b.n	800626e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a17      	ldr	r2, [pc, #92]	; (8006290 <HAL_ADC_Start_DMA+0x1dc>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d11b      	bne.n	800626e <HAL_ADC_Start_DMA+0x1ba>
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006240:	2b00      	cmp	r3, #0
 8006242:	d114      	bne.n	800626e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	689a      	ldr	r2, [r3, #8]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006252:	609a      	str	r2, [r3, #8]
 8006254:	e00b      	b.n	800626e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800625a:	f043 0210 	orr.w	r2, r3, #16
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006266:	f043 0201 	orr.w	r2, r3, #1
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800626e:	2300      	movs	r3, #0
}
 8006270:	4618      	mov	r0, r3
 8006272:	3718      	adds	r7, #24
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}
 8006278:	20000068 	.word	0x20000068
 800627c:	431bde83 	.word	0x431bde83
 8006280:	40012300 	.word	0x40012300
 8006284:	08006721 	.word	0x08006721
 8006288:	080067db 	.word	0x080067db
 800628c:	080067f7 	.word	0x080067f7
 8006290:	40012000 	.word	0x40012000

08006294 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006294:	b480      	push	{r7}
 8006296:	b083      	sub	sp, #12
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800629c:	bf00      	nop
 800629e:	370c      	adds	r7, #12
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr

080062a8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b083      	sub	sp, #12
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80062b0:	bf00      	nop
 80062b2:	370c      	adds	r7, #12
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr

080062bc <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80062bc:	b480      	push	{r7}
 80062be:	b083      	sub	sp, #12
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80062c4:	bf00      	nop
 80062c6:	370c      	adds	r7, #12
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b083      	sub	sp, #12
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80062d8:	bf00      	nop
 80062da:	370c      	adds	r7, #12
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b085      	sub	sp, #20
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80062ee:	2300      	movs	r3, #0
 80062f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d101      	bne.n	8006300 <HAL_ADC_ConfigChannel+0x1c>
 80062fc:	2302      	movs	r3, #2
 80062fe:	e105      	b.n	800650c <HAL_ADC_ConfigChannel+0x228>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2201      	movs	r2, #1
 8006304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	2b09      	cmp	r3, #9
 800630e:	d925      	bls.n	800635c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	68d9      	ldr	r1, [r3, #12]
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	b29b      	uxth	r3, r3
 800631c:	461a      	mov	r2, r3
 800631e:	4613      	mov	r3, r2
 8006320:	005b      	lsls	r3, r3, #1
 8006322:	4413      	add	r3, r2
 8006324:	3b1e      	subs	r3, #30
 8006326:	2207      	movs	r2, #7
 8006328:	fa02 f303 	lsl.w	r3, r2, r3
 800632c:	43da      	mvns	r2, r3
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	400a      	ands	r2, r1
 8006334:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	68d9      	ldr	r1, [r3, #12]
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	689a      	ldr	r2, [r3, #8]
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	b29b      	uxth	r3, r3
 8006346:	4618      	mov	r0, r3
 8006348:	4603      	mov	r3, r0
 800634a:	005b      	lsls	r3, r3, #1
 800634c:	4403      	add	r3, r0
 800634e:	3b1e      	subs	r3, #30
 8006350:	409a      	lsls	r2, r3
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	430a      	orrs	r2, r1
 8006358:	60da      	str	r2, [r3, #12]
 800635a:	e022      	b.n	80063a2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	6919      	ldr	r1, [r3, #16]
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	b29b      	uxth	r3, r3
 8006368:	461a      	mov	r2, r3
 800636a:	4613      	mov	r3, r2
 800636c:	005b      	lsls	r3, r3, #1
 800636e:	4413      	add	r3, r2
 8006370:	2207      	movs	r2, #7
 8006372:	fa02 f303 	lsl.w	r3, r2, r3
 8006376:	43da      	mvns	r2, r3
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	400a      	ands	r2, r1
 800637e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	6919      	ldr	r1, [r3, #16]
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	689a      	ldr	r2, [r3, #8]
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	b29b      	uxth	r3, r3
 8006390:	4618      	mov	r0, r3
 8006392:	4603      	mov	r3, r0
 8006394:	005b      	lsls	r3, r3, #1
 8006396:	4403      	add	r3, r0
 8006398:	409a      	lsls	r2, r3
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	430a      	orrs	r2, r1
 80063a0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	2b06      	cmp	r3, #6
 80063a8:	d824      	bhi.n	80063f4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	685a      	ldr	r2, [r3, #4]
 80063b4:	4613      	mov	r3, r2
 80063b6:	009b      	lsls	r3, r3, #2
 80063b8:	4413      	add	r3, r2
 80063ba:	3b05      	subs	r3, #5
 80063bc:	221f      	movs	r2, #31
 80063be:	fa02 f303 	lsl.w	r3, r2, r3
 80063c2:	43da      	mvns	r2, r3
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	400a      	ands	r2, r1
 80063ca:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	4618      	mov	r0, r3
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	685a      	ldr	r2, [r3, #4]
 80063de:	4613      	mov	r3, r2
 80063e0:	009b      	lsls	r3, r3, #2
 80063e2:	4413      	add	r3, r2
 80063e4:	3b05      	subs	r3, #5
 80063e6:	fa00 f203 	lsl.w	r2, r0, r3
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	430a      	orrs	r2, r1
 80063f0:	635a      	str	r2, [r3, #52]	; 0x34
 80063f2:	e04c      	b.n	800648e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	2b0c      	cmp	r3, #12
 80063fa:	d824      	bhi.n	8006446 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	685a      	ldr	r2, [r3, #4]
 8006406:	4613      	mov	r3, r2
 8006408:	009b      	lsls	r3, r3, #2
 800640a:	4413      	add	r3, r2
 800640c:	3b23      	subs	r3, #35	; 0x23
 800640e:	221f      	movs	r2, #31
 8006410:	fa02 f303 	lsl.w	r3, r2, r3
 8006414:	43da      	mvns	r2, r3
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	400a      	ands	r2, r1
 800641c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	b29b      	uxth	r3, r3
 800642a:	4618      	mov	r0, r3
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	685a      	ldr	r2, [r3, #4]
 8006430:	4613      	mov	r3, r2
 8006432:	009b      	lsls	r3, r3, #2
 8006434:	4413      	add	r3, r2
 8006436:	3b23      	subs	r3, #35	; 0x23
 8006438:	fa00 f203 	lsl.w	r2, r0, r3
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	430a      	orrs	r2, r1
 8006442:	631a      	str	r2, [r3, #48]	; 0x30
 8006444:	e023      	b.n	800648e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	685a      	ldr	r2, [r3, #4]
 8006450:	4613      	mov	r3, r2
 8006452:	009b      	lsls	r3, r3, #2
 8006454:	4413      	add	r3, r2
 8006456:	3b41      	subs	r3, #65	; 0x41
 8006458:	221f      	movs	r2, #31
 800645a:	fa02 f303 	lsl.w	r3, r2, r3
 800645e:	43da      	mvns	r2, r3
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	400a      	ands	r2, r1
 8006466:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	b29b      	uxth	r3, r3
 8006474:	4618      	mov	r0, r3
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	685a      	ldr	r2, [r3, #4]
 800647a:	4613      	mov	r3, r2
 800647c:	009b      	lsls	r3, r3, #2
 800647e:	4413      	add	r3, r2
 8006480:	3b41      	subs	r3, #65	; 0x41
 8006482:	fa00 f203 	lsl.w	r2, r0, r3
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	430a      	orrs	r2, r1
 800648c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800648e:	4b22      	ldr	r3, [pc, #136]	; (8006518 <HAL_ADC_ConfigChannel+0x234>)
 8006490:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a21      	ldr	r2, [pc, #132]	; (800651c <HAL_ADC_ConfigChannel+0x238>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d109      	bne.n	80064b0 <HAL_ADC_ConfigChannel+0x1cc>
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	2b12      	cmp	r3, #18
 80064a2:	d105      	bne.n	80064b0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a19      	ldr	r2, [pc, #100]	; (800651c <HAL_ADC_ConfigChannel+0x238>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d123      	bne.n	8006502 <HAL_ADC_ConfigChannel+0x21e>
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	2b10      	cmp	r3, #16
 80064c0:	d003      	beq.n	80064ca <HAL_ADC_ConfigChannel+0x1e6>
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	2b11      	cmp	r3, #17
 80064c8:	d11b      	bne.n	8006502 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	2b10      	cmp	r3, #16
 80064dc:	d111      	bne.n	8006502 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80064de:	4b10      	ldr	r3, [pc, #64]	; (8006520 <HAL_ADC_ConfigChannel+0x23c>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a10      	ldr	r2, [pc, #64]	; (8006524 <HAL_ADC_ConfigChannel+0x240>)
 80064e4:	fba2 2303 	umull	r2, r3, r2, r3
 80064e8:	0c9a      	lsrs	r2, r3, #18
 80064ea:	4613      	mov	r3, r2
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	4413      	add	r3, r2
 80064f0:	005b      	lsls	r3, r3, #1
 80064f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80064f4:	e002      	b.n	80064fc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	3b01      	subs	r3, #1
 80064fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d1f9      	bne.n	80064f6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2200      	movs	r2, #0
 8006506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800650a:	2300      	movs	r3, #0
}
 800650c:	4618      	mov	r0, r3
 800650e:	3714      	adds	r7, #20
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr
 8006518:	40012300 	.word	0x40012300
 800651c:	40012000 	.word	0x40012000
 8006520:	20000068 	.word	0x20000068
 8006524:	431bde83 	.word	0x431bde83

08006528 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006528:	b480      	push	{r7}
 800652a:	b085      	sub	sp, #20
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006530:	4b79      	ldr	r3, [pc, #484]	; (8006718 <ADC_Init+0x1f0>)
 8006532:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	685a      	ldr	r2, [r3, #4]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	431a      	orrs	r2, r3
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	685a      	ldr	r2, [r3, #4]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800655c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	6859      	ldr	r1, [r3, #4]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	691b      	ldr	r3, [r3, #16]
 8006568:	021a      	lsls	r2, r3, #8
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	430a      	orrs	r2, r1
 8006570:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	685a      	ldr	r2, [r3, #4]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006580:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	6859      	ldr	r1, [r3, #4]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	689a      	ldr	r2, [r3, #8]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	430a      	orrs	r2, r1
 8006592:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	689a      	ldr	r2, [r3, #8]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80065a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	6899      	ldr	r1, [r3, #8]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	68da      	ldr	r2, [r3, #12]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	430a      	orrs	r2, r1
 80065b4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ba:	4a58      	ldr	r2, [pc, #352]	; (800671c <ADC_Init+0x1f4>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d022      	beq.n	8006606 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	689a      	ldr	r2, [r3, #8]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80065ce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	6899      	ldr	r1, [r3, #8]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	430a      	orrs	r2, r1
 80065e0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	689a      	ldr	r2, [r3, #8]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80065f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	6899      	ldr	r1, [r3, #8]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	430a      	orrs	r2, r1
 8006602:	609a      	str	r2, [r3, #8]
 8006604:	e00f      	b.n	8006626 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	689a      	ldr	r2, [r3, #8]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006614:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	689a      	ldr	r2, [r3, #8]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006624:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	689a      	ldr	r2, [r3, #8]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f022 0202 	bic.w	r2, r2, #2
 8006634:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	6899      	ldr	r1, [r3, #8]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	7e1b      	ldrb	r3, [r3, #24]
 8006640:	005a      	lsls	r2, r3, #1
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	430a      	orrs	r2, r1
 8006648:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d01b      	beq.n	800668c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	685a      	ldr	r2, [r3, #4]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006662:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	685a      	ldr	r2, [r3, #4]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006672:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	6859      	ldr	r1, [r3, #4]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667e:	3b01      	subs	r3, #1
 8006680:	035a      	lsls	r2, r3, #13
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	430a      	orrs	r2, r1
 8006688:	605a      	str	r2, [r3, #4]
 800668a:	e007      	b.n	800669c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	685a      	ldr	r2, [r3, #4]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800669a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80066aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	69db      	ldr	r3, [r3, #28]
 80066b6:	3b01      	subs	r3, #1
 80066b8:	051a      	lsls	r2, r3, #20
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	430a      	orrs	r2, r1
 80066c0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	689a      	ldr	r2, [r3, #8]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80066d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	6899      	ldr	r1, [r3, #8]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80066de:	025a      	lsls	r2, r3, #9
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	430a      	orrs	r2, r1
 80066e6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	689a      	ldr	r2, [r3, #8]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	6899      	ldr	r1, [r3, #8]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	695b      	ldr	r3, [r3, #20]
 8006702:	029a      	lsls	r2, r3, #10
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	430a      	orrs	r2, r1
 800670a:	609a      	str	r2, [r3, #8]
}
 800670c:	bf00      	nop
 800670e:	3714      	adds	r7, #20
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr
 8006718:	40012300 	.word	0x40012300
 800671c:	0f000001 	.word	0x0f000001

08006720 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b084      	sub	sp, #16
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800672c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006732:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006736:	2b00      	cmp	r3, #0
 8006738:	d13c      	bne.n	80067b4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800673e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006750:	2b00      	cmp	r3, #0
 8006752:	d12b      	bne.n	80067ac <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006758:	2b00      	cmp	r3, #0
 800675a:	d127      	bne.n	80067ac <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006762:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006766:	2b00      	cmp	r3, #0
 8006768:	d006      	beq.n	8006778 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006774:	2b00      	cmp	r3, #0
 8006776:	d119      	bne.n	80067ac <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	685a      	ldr	r2, [r3, #4]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f022 0220 	bic.w	r2, r2, #32
 8006786:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800678c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006798:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800679c:	2b00      	cmp	r3, #0
 800679e:	d105      	bne.n	80067ac <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a4:	f043 0201 	orr.w	r2, r3, #1
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80067ac:	68f8      	ldr	r0, [r7, #12]
 80067ae:	f7ff fd71 	bl	8006294 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80067b2:	e00e      	b.n	80067d2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b8:	f003 0310 	and.w	r3, r3, #16
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d003      	beq.n	80067c8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80067c0:	68f8      	ldr	r0, [r7, #12]
 80067c2:	f7ff fd85 	bl	80062d0 <HAL_ADC_ErrorCallback>
}
 80067c6:	e004      	b.n	80067d2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	4798      	blx	r3
}
 80067d2:	bf00      	nop
 80067d4:	3710      	adds	r7, #16
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}

080067da <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80067da:	b580      	push	{r7, lr}
 80067dc:	b084      	sub	sp, #16
 80067de:	af00      	add	r7, sp, #0
 80067e0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067e6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80067e8:	68f8      	ldr	r0, [r7, #12]
 80067ea:	f7ff fd5d 	bl	80062a8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80067ee:	bf00      	nop
 80067f0:	3710      	adds	r7, #16
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}

080067f6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80067f6:	b580      	push	{r7, lr}
 80067f8:	b084      	sub	sp, #16
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006802:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2240      	movs	r2, #64	; 0x40
 8006808:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800680e:	f043 0204 	orr.w	r2, r3, #4
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006816:	68f8      	ldr	r0, [r7, #12]
 8006818:	f7ff fd5a 	bl	80062d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800681c:	bf00      	nop
 800681e:	3710      	adds	r7, #16
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006824:	b480      	push	{r7}
 8006826:	b083      	sub	sp, #12
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800682c:	bf00      	nop
 800682e:	370c      	adds	r7, #12
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr

08006838 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006838:	b480      	push	{r7}
 800683a:	b085      	sub	sp, #20
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f003 0307 	and.w	r3, r3, #7
 8006846:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006848:	4b0c      	ldr	r3, [pc, #48]	; (800687c <__NVIC_SetPriorityGrouping+0x44>)
 800684a:	68db      	ldr	r3, [r3, #12]
 800684c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800684e:	68ba      	ldr	r2, [r7, #8]
 8006850:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006854:	4013      	ands	r3, r2
 8006856:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006860:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006864:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006868:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800686a:	4a04      	ldr	r2, [pc, #16]	; (800687c <__NVIC_SetPriorityGrouping+0x44>)
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	60d3      	str	r3, [r2, #12]
}
 8006870:	bf00      	nop
 8006872:	3714      	adds	r7, #20
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr
 800687c:	e000ed00 	.word	0xe000ed00

08006880 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006880:	b480      	push	{r7}
 8006882:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006884:	4b04      	ldr	r3, [pc, #16]	; (8006898 <__NVIC_GetPriorityGrouping+0x18>)
 8006886:	68db      	ldr	r3, [r3, #12]
 8006888:	0a1b      	lsrs	r3, r3, #8
 800688a:	f003 0307 	and.w	r3, r3, #7
}
 800688e:	4618      	mov	r0, r3
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr
 8006898:	e000ed00 	.word	0xe000ed00

0800689c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800689c:	b480      	push	{r7}
 800689e:	b083      	sub	sp, #12
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	4603      	mov	r3, r0
 80068a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80068a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	db0b      	blt.n	80068c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80068ae:	79fb      	ldrb	r3, [r7, #7]
 80068b0:	f003 021f 	and.w	r2, r3, #31
 80068b4:	4907      	ldr	r1, [pc, #28]	; (80068d4 <__NVIC_EnableIRQ+0x38>)
 80068b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068ba:	095b      	lsrs	r3, r3, #5
 80068bc:	2001      	movs	r0, #1
 80068be:	fa00 f202 	lsl.w	r2, r0, r2
 80068c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80068c6:	bf00      	nop
 80068c8:	370c      	adds	r7, #12
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr
 80068d2:	bf00      	nop
 80068d4:	e000e100 	.word	0xe000e100

080068d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80068d8:	b480      	push	{r7}
 80068da:	b083      	sub	sp, #12
 80068dc:	af00      	add	r7, sp, #0
 80068de:	4603      	mov	r3, r0
 80068e0:	6039      	str	r1, [r7, #0]
 80068e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80068e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	db0a      	blt.n	8006902 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	b2da      	uxtb	r2, r3
 80068f0:	490c      	ldr	r1, [pc, #48]	; (8006924 <__NVIC_SetPriority+0x4c>)
 80068f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068f6:	0112      	lsls	r2, r2, #4
 80068f8:	b2d2      	uxtb	r2, r2
 80068fa:	440b      	add	r3, r1
 80068fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006900:	e00a      	b.n	8006918 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	b2da      	uxtb	r2, r3
 8006906:	4908      	ldr	r1, [pc, #32]	; (8006928 <__NVIC_SetPriority+0x50>)
 8006908:	79fb      	ldrb	r3, [r7, #7]
 800690a:	f003 030f 	and.w	r3, r3, #15
 800690e:	3b04      	subs	r3, #4
 8006910:	0112      	lsls	r2, r2, #4
 8006912:	b2d2      	uxtb	r2, r2
 8006914:	440b      	add	r3, r1
 8006916:	761a      	strb	r2, [r3, #24]
}
 8006918:	bf00      	nop
 800691a:	370c      	adds	r7, #12
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr
 8006924:	e000e100 	.word	0xe000e100
 8006928:	e000ed00 	.word	0xe000ed00

0800692c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800692c:	b480      	push	{r7}
 800692e:	b089      	sub	sp, #36	; 0x24
 8006930:	af00      	add	r7, sp, #0
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	60b9      	str	r1, [r7, #8]
 8006936:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f003 0307 	and.w	r3, r3, #7
 800693e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006940:	69fb      	ldr	r3, [r7, #28]
 8006942:	f1c3 0307 	rsb	r3, r3, #7
 8006946:	2b04      	cmp	r3, #4
 8006948:	bf28      	it	cs
 800694a:	2304      	movcs	r3, #4
 800694c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800694e:	69fb      	ldr	r3, [r7, #28]
 8006950:	3304      	adds	r3, #4
 8006952:	2b06      	cmp	r3, #6
 8006954:	d902      	bls.n	800695c <NVIC_EncodePriority+0x30>
 8006956:	69fb      	ldr	r3, [r7, #28]
 8006958:	3b03      	subs	r3, #3
 800695a:	e000      	b.n	800695e <NVIC_EncodePriority+0x32>
 800695c:	2300      	movs	r3, #0
 800695e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006960:	f04f 32ff 	mov.w	r2, #4294967295
 8006964:	69bb      	ldr	r3, [r7, #24]
 8006966:	fa02 f303 	lsl.w	r3, r2, r3
 800696a:	43da      	mvns	r2, r3
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	401a      	ands	r2, r3
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006974:	f04f 31ff 	mov.w	r1, #4294967295
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	fa01 f303 	lsl.w	r3, r1, r3
 800697e:	43d9      	mvns	r1, r3
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006984:	4313      	orrs	r3, r2
         );
}
 8006986:	4618      	mov	r0, r3
 8006988:	3724      	adds	r7, #36	; 0x24
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr
	...

08006994 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b082      	sub	sp, #8
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	3b01      	subs	r3, #1
 80069a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80069a4:	d301      	bcc.n	80069aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80069a6:	2301      	movs	r3, #1
 80069a8:	e00f      	b.n	80069ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80069aa:	4a0a      	ldr	r2, [pc, #40]	; (80069d4 <SysTick_Config+0x40>)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	3b01      	subs	r3, #1
 80069b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80069b2:	210f      	movs	r1, #15
 80069b4:	f04f 30ff 	mov.w	r0, #4294967295
 80069b8:	f7ff ff8e 	bl	80068d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80069bc:	4b05      	ldr	r3, [pc, #20]	; (80069d4 <SysTick_Config+0x40>)
 80069be:	2200      	movs	r2, #0
 80069c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80069c2:	4b04      	ldr	r3, [pc, #16]	; (80069d4 <SysTick_Config+0x40>)
 80069c4:	2207      	movs	r2, #7
 80069c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80069c8:	2300      	movs	r3, #0
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3708      	adds	r7, #8
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	bf00      	nop
 80069d4:	e000e010 	.word	0xe000e010

080069d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b082      	sub	sp, #8
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f7ff ff29 	bl	8006838 <__NVIC_SetPriorityGrouping>
}
 80069e6:	bf00      	nop
 80069e8:	3708      	adds	r7, #8
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}

080069ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80069ee:	b580      	push	{r7, lr}
 80069f0:	b086      	sub	sp, #24
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	4603      	mov	r3, r0
 80069f6:	60b9      	str	r1, [r7, #8]
 80069f8:	607a      	str	r2, [r7, #4]
 80069fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80069fc:	2300      	movs	r3, #0
 80069fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006a00:	f7ff ff3e 	bl	8006880 <__NVIC_GetPriorityGrouping>
 8006a04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	68b9      	ldr	r1, [r7, #8]
 8006a0a:	6978      	ldr	r0, [r7, #20]
 8006a0c:	f7ff ff8e 	bl	800692c <NVIC_EncodePriority>
 8006a10:	4602      	mov	r2, r0
 8006a12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a16:	4611      	mov	r1, r2
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f7ff ff5d 	bl	80068d8 <__NVIC_SetPriority>
}
 8006a1e:	bf00      	nop
 8006a20:	3718      	adds	r7, #24
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}

08006a26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006a26:	b580      	push	{r7, lr}
 8006a28:	b082      	sub	sp, #8
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a34:	4618      	mov	r0, r3
 8006a36:	f7ff ff31 	bl	800689c <__NVIC_EnableIRQ>
}
 8006a3a:	bf00      	nop
 8006a3c:	3708      	adds	r7, #8
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}

08006a42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006a42:	b580      	push	{r7, lr}
 8006a44:	b082      	sub	sp, #8
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f7ff ffa2 	bl	8006994 <SysTick_Config>
 8006a50:	4603      	mov	r3, r0
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3708      	adds	r7, #8
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
	...

08006a5c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b086      	sub	sp, #24
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006a64:	2300      	movs	r3, #0
 8006a66:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006a68:	f7ff f970 	bl	8005d4c <HAL_GetTick>
 8006a6c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d101      	bne.n	8006a78 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006a74:	2301      	movs	r3, #1
 8006a76:	e099      	b.n	8006bac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2202      	movs	r2, #2
 8006a7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f022 0201 	bic.w	r2, r2, #1
 8006a96:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006a98:	e00f      	b.n	8006aba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006a9a:	f7ff f957 	bl	8005d4c <HAL_GetTick>
 8006a9e:	4602      	mov	r2, r0
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	1ad3      	subs	r3, r2, r3
 8006aa4:	2b05      	cmp	r3, #5
 8006aa6:	d908      	bls.n	8006aba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2220      	movs	r2, #32
 8006aac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2203      	movs	r2, #3
 8006ab2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006ab6:	2303      	movs	r3, #3
 8006ab8:	e078      	b.n	8006bac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f003 0301 	and.w	r3, r3, #1
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d1e8      	bne.n	8006a9a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006ad0:	697a      	ldr	r2, [r7, #20]
 8006ad2:	4b38      	ldr	r3, [pc, #224]	; (8006bb4 <HAL_DMA_Init+0x158>)
 8006ad4:	4013      	ands	r3, r2
 8006ad6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	685a      	ldr	r2, [r3, #4]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006ae6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	691b      	ldr	r3, [r3, #16]
 8006aec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006af2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	699b      	ldr	r3, [r3, #24]
 8006af8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006afe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6a1b      	ldr	r3, [r3, #32]
 8006b04:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006b06:	697a      	ldr	r2, [r7, #20]
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b10:	2b04      	cmp	r3, #4
 8006b12:	d107      	bne.n	8006b24 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	697a      	ldr	r2, [r7, #20]
 8006b20:	4313      	orrs	r3, r2
 8006b22:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	697a      	ldr	r2, [r7, #20]
 8006b2a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	695b      	ldr	r3, [r3, #20]
 8006b32:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	f023 0307 	bic.w	r3, r3, #7
 8006b3a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b40:	697a      	ldr	r2, [r7, #20]
 8006b42:	4313      	orrs	r3, r2
 8006b44:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b4a:	2b04      	cmp	r3, #4
 8006b4c:	d117      	bne.n	8006b7e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b52:	697a      	ldr	r2, [r7, #20]
 8006b54:	4313      	orrs	r3, r2
 8006b56:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d00e      	beq.n	8006b7e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f000 fb01 	bl	8007168 <DMA_CheckFifoParam>
 8006b66:	4603      	mov	r3, r0
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d008      	beq.n	8006b7e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2240      	movs	r2, #64	; 0x40
 8006b70:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2201      	movs	r2, #1
 8006b76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	e016      	b.n	8006bac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	697a      	ldr	r2, [r7, #20]
 8006b84:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 fab8 	bl	80070fc <DMA_CalcBaseAndBitshift>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b94:	223f      	movs	r2, #63	; 0x3f
 8006b96:	409a      	lsls	r2, r3
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006baa:	2300      	movs	r3, #0
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3718      	adds	r7, #24
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}
 8006bb4:	f010803f 	.word	0xf010803f

08006bb8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b086      	sub	sp, #24
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	60f8      	str	r0, [r7, #12]
 8006bc0:	60b9      	str	r1, [r7, #8]
 8006bc2:	607a      	str	r2, [r7, #4]
 8006bc4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bce:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d101      	bne.n	8006bde <HAL_DMA_Start_IT+0x26>
 8006bda:	2302      	movs	r3, #2
 8006bdc:	e040      	b.n	8006c60 <HAL_DMA_Start_IT+0xa8>
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2201      	movs	r2, #1
 8006be2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d12f      	bne.n	8006c52 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2202      	movs	r2, #2
 8006bf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	687a      	ldr	r2, [r7, #4]
 8006c04:	68b9      	ldr	r1, [r7, #8]
 8006c06:	68f8      	ldr	r0, [r7, #12]
 8006c08:	f000 fa4a 	bl	80070a0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c10:	223f      	movs	r2, #63	; 0x3f
 8006c12:	409a      	lsls	r2, r3
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f042 0216 	orr.w	r2, r2, #22
 8006c26:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d007      	beq.n	8006c40 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	681a      	ldr	r2, [r3, #0]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f042 0208 	orr.w	r2, r2, #8
 8006c3e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f042 0201 	orr.w	r2, r2, #1
 8006c4e:	601a      	str	r2, [r3, #0]
 8006c50:	e005      	b.n	8006c5e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2200      	movs	r2, #0
 8006c56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006c5a:	2302      	movs	r3, #2
 8006c5c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006c5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3718      	adds	r7, #24
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}

08006c68 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b084      	sub	sp, #16
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c74:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006c76:	f7ff f869 	bl	8005d4c <HAL_GetTick>
 8006c7a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006c82:	b2db      	uxtb	r3, r3
 8006c84:	2b02      	cmp	r3, #2
 8006c86:	d008      	beq.n	8006c9a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2280      	movs	r2, #128	; 0x80
 8006c8c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2200      	movs	r2, #0
 8006c92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006c96:	2301      	movs	r3, #1
 8006c98:	e052      	b.n	8006d40 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f022 0216 	bic.w	r2, r2, #22
 8006ca8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	695a      	ldr	r2, [r3, #20]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006cb8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d103      	bne.n	8006cca <HAL_DMA_Abort+0x62>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d007      	beq.n	8006cda <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	681a      	ldr	r2, [r3, #0]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f022 0208 	bic.w	r2, r2, #8
 8006cd8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	681a      	ldr	r2, [r3, #0]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f022 0201 	bic.w	r2, r2, #1
 8006ce8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006cea:	e013      	b.n	8006d14 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006cec:	f7ff f82e 	bl	8005d4c <HAL_GetTick>
 8006cf0:	4602      	mov	r2, r0
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	1ad3      	subs	r3, r2, r3
 8006cf6:	2b05      	cmp	r3, #5
 8006cf8:	d90c      	bls.n	8006d14 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2220      	movs	r2, #32
 8006cfe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2203      	movs	r2, #3
 8006d04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006d10:	2303      	movs	r3, #3
 8006d12:	e015      	b.n	8006d40 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f003 0301 	and.w	r3, r3, #1
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d1e4      	bne.n	8006cec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d26:	223f      	movs	r2, #63	; 0x3f
 8006d28:	409a      	lsls	r2, r3
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2201      	movs	r2, #1
 8006d32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006d3e:	2300      	movs	r3, #0
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3710      	adds	r7, #16
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}

08006d48 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006d56:	b2db      	uxtb	r3, r3
 8006d58:	2b02      	cmp	r3, #2
 8006d5a:	d004      	beq.n	8006d66 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2280      	movs	r2, #128	; 0x80
 8006d60:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	e00c      	b.n	8006d80 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2205      	movs	r2, #5
 8006d6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f022 0201 	bic.w	r2, r2, #1
 8006d7c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006d7e:	2300      	movs	r3, #0
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	370c      	adds	r7, #12
 8006d84:	46bd      	mov	sp, r7
 8006d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8a:	4770      	bx	lr

08006d8c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b086      	sub	sp, #24
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006d94:	2300      	movs	r3, #0
 8006d96:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006d98:	4b92      	ldr	r3, [pc, #584]	; (8006fe4 <HAL_DMA_IRQHandler+0x258>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a92      	ldr	r2, [pc, #584]	; (8006fe8 <HAL_DMA_IRQHandler+0x25c>)
 8006d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8006da2:	0a9b      	lsrs	r3, r3, #10
 8006da4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006daa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006db6:	2208      	movs	r2, #8
 8006db8:	409a      	lsls	r2, r3
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	4013      	ands	r3, r2
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d01a      	beq.n	8006df8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f003 0304 	and.w	r3, r3, #4
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d013      	beq.n	8006df8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f022 0204 	bic.w	r2, r2, #4
 8006dde:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006de4:	2208      	movs	r2, #8
 8006de6:	409a      	lsls	r2, r3
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006df0:	f043 0201 	orr.w	r2, r3, #1
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	409a      	lsls	r2, r3
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	4013      	ands	r3, r2
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d012      	beq.n	8006e2e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	695b      	ldr	r3, [r3, #20]
 8006e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d00b      	beq.n	8006e2e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	409a      	lsls	r2, r3
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e26:	f043 0202 	orr.w	r2, r3, #2
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e32:	2204      	movs	r2, #4
 8006e34:	409a      	lsls	r2, r3
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	4013      	ands	r3, r2
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d012      	beq.n	8006e64 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f003 0302 	and.w	r3, r3, #2
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d00b      	beq.n	8006e64 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e50:	2204      	movs	r2, #4
 8006e52:	409a      	lsls	r2, r3
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e5c:	f043 0204 	orr.w	r2, r3, #4
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e68:	2210      	movs	r2, #16
 8006e6a:	409a      	lsls	r2, r3
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	4013      	ands	r3, r2
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d043      	beq.n	8006efc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f003 0308 	and.w	r3, r3, #8
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d03c      	beq.n	8006efc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e86:	2210      	movs	r2, #16
 8006e88:	409a      	lsls	r2, r3
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d018      	beq.n	8006ece <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d108      	bne.n	8006ebc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d024      	beq.n	8006efc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	4798      	blx	r3
 8006eba:	e01f      	b.n	8006efc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d01b      	beq.n	8006efc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	4798      	blx	r3
 8006ecc:	e016      	b.n	8006efc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d107      	bne.n	8006eec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	681a      	ldr	r2, [r3, #0]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f022 0208 	bic.w	r2, r2, #8
 8006eea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d003      	beq.n	8006efc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f00:	2220      	movs	r2, #32
 8006f02:	409a      	lsls	r2, r3
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	4013      	ands	r3, r2
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	f000 808e 	beq.w	800702a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f003 0310 	and.w	r3, r3, #16
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	f000 8086 	beq.w	800702a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f22:	2220      	movs	r2, #32
 8006f24:	409a      	lsls	r2, r3
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006f30:	b2db      	uxtb	r3, r3
 8006f32:	2b05      	cmp	r3, #5
 8006f34:	d136      	bne.n	8006fa4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f022 0216 	bic.w	r2, r2, #22
 8006f44:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	695a      	ldr	r2, [r3, #20]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f54:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d103      	bne.n	8006f66 <HAL_DMA_IRQHandler+0x1da>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d007      	beq.n	8006f76 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f022 0208 	bic.w	r2, r2, #8
 8006f74:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f7a:	223f      	movs	r2, #63	; 0x3f
 8006f7c:	409a      	lsls	r2, r3
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2201      	movs	r2, #1
 8006f86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d07d      	beq.n	8007096 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	4798      	blx	r3
        }
        return;
 8006fa2:	e078      	b.n	8007096 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d01c      	beq.n	8006fec <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d108      	bne.n	8006fd2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d030      	beq.n	800702a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	4798      	blx	r3
 8006fd0:	e02b      	b.n	800702a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d027      	beq.n	800702a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	4798      	blx	r3
 8006fe2:	e022      	b.n	800702a <HAL_DMA_IRQHandler+0x29e>
 8006fe4:	20000068 	.word	0x20000068
 8006fe8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d10f      	bne.n	800701a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	681a      	ldr	r2, [r3, #0]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f022 0210 	bic.w	r2, r2, #16
 8007008:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2201      	movs	r2, #1
 800700e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2200      	movs	r2, #0
 8007016:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800701e:	2b00      	cmp	r3, #0
 8007020:	d003      	beq.n	800702a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800702e:	2b00      	cmp	r3, #0
 8007030:	d032      	beq.n	8007098 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007036:	f003 0301 	and.w	r3, r3, #1
 800703a:	2b00      	cmp	r3, #0
 800703c:	d022      	beq.n	8007084 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2205      	movs	r2, #5
 8007042:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f022 0201 	bic.w	r2, r2, #1
 8007054:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	3301      	adds	r3, #1
 800705a:	60bb      	str	r3, [r7, #8]
 800705c:	697a      	ldr	r2, [r7, #20]
 800705e:	429a      	cmp	r2, r3
 8007060:	d307      	bcc.n	8007072 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f003 0301 	and.w	r3, r3, #1
 800706c:	2b00      	cmp	r3, #0
 800706e:	d1f2      	bne.n	8007056 <HAL_DMA_IRQHandler+0x2ca>
 8007070:	e000      	b.n	8007074 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8007072:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2201      	movs	r2, #1
 8007078:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2200      	movs	r2, #0
 8007080:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007088:	2b00      	cmp	r3, #0
 800708a:	d005      	beq.n	8007098 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	4798      	blx	r3
 8007094:	e000      	b.n	8007098 <HAL_DMA_IRQHandler+0x30c>
        return;
 8007096:	bf00      	nop
    }
  }
}
 8007098:	3718      	adds	r7, #24
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}
 800709e:	bf00      	nop

080070a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b085      	sub	sp, #20
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	60f8      	str	r0, [r7, #12]
 80070a8:	60b9      	str	r1, [r7, #8]
 80070aa:	607a      	str	r2, [r7, #4]
 80070ac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80070bc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	683a      	ldr	r2, [r7, #0]
 80070c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	689b      	ldr	r3, [r3, #8]
 80070ca:	2b40      	cmp	r3, #64	; 0x40
 80070cc:	d108      	bne.n	80070e0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	687a      	ldr	r2, [r7, #4]
 80070d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	68ba      	ldr	r2, [r7, #8]
 80070dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80070de:	e007      	b.n	80070f0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	68ba      	ldr	r2, [r7, #8]
 80070e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	687a      	ldr	r2, [r7, #4]
 80070ee:	60da      	str	r2, [r3, #12]
}
 80070f0:	bf00      	nop
 80070f2:	3714      	adds	r7, #20
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr

080070fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b085      	sub	sp, #20
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	b2db      	uxtb	r3, r3
 800710a:	3b10      	subs	r3, #16
 800710c:	4a14      	ldr	r2, [pc, #80]	; (8007160 <DMA_CalcBaseAndBitshift+0x64>)
 800710e:	fba2 2303 	umull	r2, r3, r2, r3
 8007112:	091b      	lsrs	r3, r3, #4
 8007114:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007116:	4a13      	ldr	r2, [pc, #76]	; (8007164 <DMA_CalcBaseAndBitshift+0x68>)
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	4413      	add	r3, r2
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	461a      	mov	r2, r3
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2b03      	cmp	r3, #3
 8007128:	d909      	bls.n	800713e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007132:	f023 0303 	bic.w	r3, r3, #3
 8007136:	1d1a      	adds	r2, r3, #4
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	659a      	str	r2, [r3, #88]	; 0x58
 800713c:	e007      	b.n	800714e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007146:	f023 0303 	bic.w	r3, r3, #3
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007152:	4618      	mov	r0, r3
 8007154:	3714      	adds	r7, #20
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr
 800715e:	bf00      	nop
 8007160:	aaaaaaab 	.word	0xaaaaaaab
 8007164:	0800fcd4 	.word	0x0800fcd4

08007168 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007168:	b480      	push	{r7}
 800716a:	b085      	sub	sp, #20
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007170:	2300      	movs	r3, #0
 8007172:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007178:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	699b      	ldr	r3, [r3, #24]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d11f      	bne.n	80071c2 <DMA_CheckFifoParam+0x5a>
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	2b03      	cmp	r3, #3
 8007186:	d856      	bhi.n	8007236 <DMA_CheckFifoParam+0xce>
 8007188:	a201      	add	r2, pc, #4	; (adr r2, 8007190 <DMA_CheckFifoParam+0x28>)
 800718a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800718e:	bf00      	nop
 8007190:	080071a1 	.word	0x080071a1
 8007194:	080071b3 	.word	0x080071b3
 8007198:	080071a1 	.word	0x080071a1
 800719c:	08007237 	.word	0x08007237
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d046      	beq.n	800723a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80071ac:	2301      	movs	r3, #1
 80071ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80071b0:	e043      	b.n	800723a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80071ba:	d140      	bne.n	800723e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80071bc:	2301      	movs	r3, #1
 80071be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80071c0:	e03d      	b.n	800723e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	699b      	ldr	r3, [r3, #24]
 80071c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071ca:	d121      	bne.n	8007210 <DMA_CheckFifoParam+0xa8>
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	2b03      	cmp	r3, #3
 80071d0:	d837      	bhi.n	8007242 <DMA_CheckFifoParam+0xda>
 80071d2:	a201      	add	r2, pc, #4	; (adr r2, 80071d8 <DMA_CheckFifoParam+0x70>)
 80071d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071d8:	080071e9 	.word	0x080071e9
 80071dc:	080071ef 	.word	0x080071ef
 80071e0:	080071e9 	.word	0x080071e9
 80071e4:	08007201 	.word	0x08007201
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80071e8:	2301      	movs	r3, #1
 80071ea:	73fb      	strb	r3, [r7, #15]
      break;
 80071ec:	e030      	b.n	8007250 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d025      	beq.n	8007246 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80071fa:	2301      	movs	r3, #1
 80071fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80071fe:	e022      	b.n	8007246 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007204:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007208:	d11f      	bne.n	800724a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800720a:	2301      	movs	r3, #1
 800720c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800720e:	e01c      	b.n	800724a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	2b02      	cmp	r3, #2
 8007214:	d903      	bls.n	800721e <DMA_CheckFifoParam+0xb6>
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	2b03      	cmp	r3, #3
 800721a:	d003      	beq.n	8007224 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800721c:	e018      	b.n	8007250 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800721e:	2301      	movs	r3, #1
 8007220:	73fb      	strb	r3, [r7, #15]
      break;
 8007222:	e015      	b.n	8007250 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007228:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800722c:	2b00      	cmp	r3, #0
 800722e:	d00e      	beq.n	800724e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007230:	2301      	movs	r3, #1
 8007232:	73fb      	strb	r3, [r7, #15]
      break;
 8007234:	e00b      	b.n	800724e <DMA_CheckFifoParam+0xe6>
      break;
 8007236:	bf00      	nop
 8007238:	e00a      	b.n	8007250 <DMA_CheckFifoParam+0xe8>
      break;
 800723a:	bf00      	nop
 800723c:	e008      	b.n	8007250 <DMA_CheckFifoParam+0xe8>
      break;
 800723e:	bf00      	nop
 8007240:	e006      	b.n	8007250 <DMA_CheckFifoParam+0xe8>
      break;
 8007242:	bf00      	nop
 8007244:	e004      	b.n	8007250 <DMA_CheckFifoParam+0xe8>
      break;
 8007246:	bf00      	nop
 8007248:	e002      	b.n	8007250 <DMA_CheckFifoParam+0xe8>
      break;   
 800724a:	bf00      	nop
 800724c:	e000      	b.n	8007250 <DMA_CheckFifoParam+0xe8>
      break;
 800724e:	bf00      	nop
    }
  } 
  
  return status; 
 8007250:	7bfb      	ldrb	r3, [r7, #15]
}
 8007252:	4618      	mov	r0, r3
 8007254:	3714      	adds	r7, #20
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr
 800725e:	bf00      	nop

08007260 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007260:	b480      	push	{r7}
 8007262:	b089      	sub	sp, #36	; 0x24
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800726a:	2300      	movs	r3, #0
 800726c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800726e:	2300      	movs	r3, #0
 8007270:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007272:	2300      	movs	r3, #0
 8007274:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007276:	2300      	movs	r3, #0
 8007278:	61fb      	str	r3, [r7, #28]
 800727a:	e159      	b.n	8007530 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800727c:	2201      	movs	r2, #1
 800727e:	69fb      	ldr	r3, [r7, #28]
 8007280:	fa02 f303 	lsl.w	r3, r2, r3
 8007284:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	697a      	ldr	r2, [r7, #20]
 800728c:	4013      	ands	r3, r2
 800728e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007290:	693a      	ldr	r2, [r7, #16]
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	429a      	cmp	r2, r3
 8007296:	f040 8148 	bne.w	800752a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	f003 0303 	and.w	r3, r3, #3
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d005      	beq.n	80072b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80072ae:	2b02      	cmp	r3, #2
 80072b0:	d130      	bne.n	8007314 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80072b8:	69fb      	ldr	r3, [r7, #28]
 80072ba:	005b      	lsls	r3, r3, #1
 80072bc:	2203      	movs	r2, #3
 80072be:	fa02 f303 	lsl.w	r3, r2, r3
 80072c2:	43db      	mvns	r3, r3
 80072c4:	69ba      	ldr	r2, [r7, #24]
 80072c6:	4013      	ands	r3, r2
 80072c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	68da      	ldr	r2, [r3, #12]
 80072ce:	69fb      	ldr	r3, [r7, #28]
 80072d0:	005b      	lsls	r3, r3, #1
 80072d2:	fa02 f303 	lsl.w	r3, r2, r3
 80072d6:	69ba      	ldr	r2, [r7, #24]
 80072d8:	4313      	orrs	r3, r2
 80072da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	69ba      	ldr	r2, [r7, #24]
 80072e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80072e8:	2201      	movs	r2, #1
 80072ea:	69fb      	ldr	r3, [r7, #28]
 80072ec:	fa02 f303 	lsl.w	r3, r2, r3
 80072f0:	43db      	mvns	r3, r3
 80072f2:	69ba      	ldr	r2, [r7, #24]
 80072f4:	4013      	ands	r3, r2
 80072f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	091b      	lsrs	r3, r3, #4
 80072fe:	f003 0201 	and.w	r2, r3, #1
 8007302:	69fb      	ldr	r3, [r7, #28]
 8007304:	fa02 f303 	lsl.w	r3, r2, r3
 8007308:	69ba      	ldr	r2, [r7, #24]
 800730a:	4313      	orrs	r3, r2
 800730c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	69ba      	ldr	r2, [r7, #24]
 8007312:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	f003 0303 	and.w	r3, r3, #3
 800731c:	2b03      	cmp	r3, #3
 800731e:	d017      	beq.n	8007350 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	68db      	ldr	r3, [r3, #12]
 8007324:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007326:	69fb      	ldr	r3, [r7, #28]
 8007328:	005b      	lsls	r3, r3, #1
 800732a:	2203      	movs	r2, #3
 800732c:	fa02 f303 	lsl.w	r3, r2, r3
 8007330:	43db      	mvns	r3, r3
 8007332:	69ba      	ldr	r2, [r7, #24]
 8007334:	4013      	ands	r3, r2
 8007336:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	689a      	ldr	r2, [r3, #8]
 800733c:	69fb      	ldr	r3, [r7, #28]
 800733e:	005b      	lsls	r3, r3, #1
 8007340:	fa02 f303 	lsl.w	r3, r2, r3
 8007344:	69ba      	ldr	r2, [r7, #24]
 8007346:	4313      	orrs	r3, r2
 8007348:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	69ba      	ldr	r2, [r7, #24]
 800734e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	f003 0303 	and.w	r3, r3, #3
 8007358:	2b02      	cmp	r3, #2
 800735a:	d123      	bne.n	80073a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800735c:	69fb      	ldr	r3, [r7, #28]
 800735e:	08da      	lsrs	r2, r3, #3
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	3208      	adds	r2, #8
 8007364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007368:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800736a:	69fb      	ldr	r3, [r7, #28]
 800736c:	f003 0307 	and.w	r3, r3, #7
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	220f      	movs	r2, #15
 8007374:	fa02 f303 	lsl.w	r3, r2, r3
 8007378:	43db      	mvns	r3, r3
 800737a:	69ba      	ldr	r2, [r7, #24]
 800737c:	4013      	ands	r3, r2
 800737e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	691a      	ldr	r2, [r3, #16]
 8007384:	69fb      	ldr	r3, [r7, #28]
 8007386:	f003 0307 	and.w	r3, r3, #7
 800738a:	009b      	lsls	r3, r3, #2
 800738c:	fa02 f303 	lsl.w	r3, r2, r3
 8007390:	69ba      	ldr	r2, [r7, #24]
 8007392:	4313      	orrs	r3, r2
 8007394:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007396:	69fb      	ldr	r3, [r7, #28]
 8007398:	08da      	lsrs	r2, r3, #3
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	3208      	adds	r2, #8
 800739e:	69b9      	ldr	r1, [r7, #24]
 80073a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80073aa:	69fb      	ldr	r3, [r7, #28]
 80073ac:	005b      	lsls	r3, r3, #1
 80073ae:	2203      	movs	r2, #3
 80073b0:	fa02 f303 	lsl.w	r3, r2, r3
 80073b4:	43db      	mvns	r3, r3
 80073b6:	69ba      	ldr	r2, [r7, #24]
 80073b8:	4013      	ands	r3, r2
 80073ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	f003 0203 	and.w	r2, r3, #3
 80073c4:	69fb      	ldr	r3, [r7, #28]
 80073c6:	005b      	lsls	r3, r3, #1
 80073c8:	fa02 f303 	lsl.w	r3, r2, r3
 80073cc:	69ba      	ldr	r2, [r7, #24]
 80073ce:	4313      	orrs	r3, r2
 80073d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	69ba      	ldr	r2, [r7, #24]
 80073d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	f000 80a2 	beq.w	800752a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80073e6:	2300      	movs	r3, #0
 80073e8:	60fb      	str	r3, [r7, #12]
 80073ea:	4b57      	ldr	r3, [pc, #348]	; (8007548 <HAL_GPIO_Init+0x2e8>)
 80073ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073ee:	4a56      	ldr	r2, [pc, #344]	; (8007548 <HAL_GPIO_Init+0x2e8>)
 80073f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80073f4:	6453      	str	r3, [r2, #68]	; 0x44
 80073f6:	4b54      	ldr	r3, [pc, #336]	; (8007548 <HAL_GPIO_Init+0x2e8>)
 80073f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073fe:	60fb      	str	r3, [r7, #12]
 8007400:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007402:	4a52      	ldr	r2, [pc, #328]	; (800754c <HAL_GPIO_Init+0x2ec>)
 8007404:	69fb      	ldr	r3, [r7, #28]
 8007406:	089b      	lsrs	r3, r3, #2
 8007408:	3302      	adds	r3, #2
 800740a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800740e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007410:	69fb      	ldr	r3, [r7, #28]
 8007412:	f003 0303 	and.w	r3, r3, #3
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	220f      	movs	r2, #15
 800741a:	fa02 f303 	lsl.w	r3, r2, r3
 800741e:	43db      	mvns	r3, r3
 8007420:	69ba      	ldr	r2, [r7, #24]
 8007422:	4013      	ands	r3, r2
 8007424:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	4a49      	ldr	r2, [pc, #292]	; (8007550 <HAL_GPIO_Init+0x2f0>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d019      	beq.n	8007462 <HAL_GPIO_Init+0x202>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	4a48      	ldr	r2, [pc, #288]	; (8007554 <HAL_GPIO_Init+0x2f4>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d013      	beq.n	800745e <HAL_GPIO_Init+0x1fe>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	4a47      	ldr	r2, [pc, #284]	; (8007558 <HAL_GPIO_Init+0x2f8>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d00d      	beq.n	800745a <HAL_GPIO_Init+0x1fa>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	4a46      	ldr	r2, [pc, #280]	; (800755c <HAL_GPIO_Init+0x2fc>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d007      	beq.n	8007456 <HAL_GPIO_Init+0x1f6>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	4a45      	ldr	r2, [pc, #276]	; (8007560 <HAL_GPIO_Init+0x300>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d101      	bne.n	8007452 <HAL_GPIO_Init+0x1f2>
 800744e:	2304      	movs	r3, #4
 8007450:	e008      	b.n	8007464 <HAL_GPIO_Init+0x204>
 8007452:	2307      	movs	r3, #7
 8007454:	e006      	b.n	8007464 <HAL_GPIO_Init+0x204>
 8007456:	2303      	movs	r3, #3
 8007458:	e004      	b.n	8007464 <HAL_GPIO_Init+0x204>
 800745a:	2302      	movs	r3, #2
 800745c:	e002      	b.n	8007464 <HAL_GPIO_Init+0x204>
 800745e:	2301      	movs	r3, #1
 8007460:	e000      	b.n	8007464 <HAL_GPIO_Init+0x204>
 8007462:	2300      	movs	r3, #0
 8007464:	69fa      	ldr	r2, [r7, #28]
 8007466:	f002 0203 	and.w	r2, r2, #3
 800746a:	0092      	lsls	r2, r2, #2
 800746c:	4093      	lsls	r3, r2
 800746e:	69ba      	ldr	r2, [r7, #24]
 8007470:	4313      	orrs	r3, r2
 8007472:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007474:	4935      	ldr	r1, [pc, #212]	; (800754c <HAL_GPIO_Init+0x2ec>)
 8007476:	69fb      	ldr	r3, [r7, #28]
 8007478:	089b      	lsrs	r3, r3, #2
 800747a:	3302      	adds	r3, #2
 800747c:	69ba      	ldr	r2, [r7, #24]
 800747e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007482:	4b38      	ldr	r3, [pc, #224]	; (8007564 <HAL_GPIO_Init+0x304>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	43db      	mvns	r3, r3
 800748c:	69ba      	ldr	r2, [r7, #24]
 800748e:	4013      	ands	r3, r2
 8007490:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800749a:	2b00      	cmp	r3, #0
 800749c:	d003      	beq.n	80074a6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800749e:	69ba      	ldr	r2, [r7, #24]
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	4313      	orrs	r3, r2
 80074a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80074a6:	4a2f      	ldr	r2, [pc, #188]	; (8007564 <HAL_GPIO_Init+0x304>)
 80074a8:	69bb      	ldr	r3, [r7, #24]
 80074aa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80074ac:	4b2d      	ldr	r3, [pc, #180]	; (8007564 <HAL_GPIO_Init+0x304>)
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	43db      	mvns	r3, r3
 80074b6:	69ba      	ldr	r2, [r7, #24]
 80074b8:	4013      	ands	r3, r2
 80074ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d003      	beq.n	80074d0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80074c8:	69ba      	ldr	r2, [r7, #24]
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	4313      	orrs	r3, r2
 80074ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80074d0:	4a24      	ldr	r2, [pc, #144]	; (8007564 <HAL_GPIO_Init+0x304>)
 80074d2:	69bb      	ldr	r3, [r7, #24]
 80074d4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80074d6:	4b23      	ldr	r3, [pc, #140]	; (8007564 <HAL_GPIO_Init+0x304>)
 80074d8:	689b      	ldr	r3, [r3, #8]
 80074da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	43db      	mvns	r3, r3
 80074e0:	69ba      	ldr	r2, [r7, #24]
 80074e2:	4013      	ands	r3, r2
 80074e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d003      	beq.n	80074fa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80074f2:	69ba      	ldr	r2, [r7, #24]
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	4313      	orrs	r3, r2
 80074f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80074fa:	4a1a      	ldr	r2, [pc, #104]	; (8007564 <HAL_GPIO_Init+0x304>)
 80074fc:	69bb      	ldr	r3, [r7, #24]
 80074fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007500:	4b18      	ldr	r3, [pc, #96]	; (8007564 <HAL_GPIO_Init+0x304>)
 8007502:	68db      	ldr	r3, [r3, #12]
 8007504:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	43db      	mvns	r3, r3
 800750a:	69ba      	ldr	r2, [r7, #24]
 800750c:	4013      	ands	r3, r2
 800750e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007518:	2b00      	cmp	r3, #0
 800751a:	d003      	beq.n	8007524 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800751c:	69ba      	ldr	r2, [r7, #24]
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	4313      	orrs	r3, r2
 8007522:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007524:	4a0f      	ldr	r2, [pc, #60]	; (8007564 <HAL_GPIO_Init+0x304>)
 8007526:	69bb      	ldr	r3, [r7, #24]
 8007528:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800752a:	69fb      	ldr	r3, [r7, #28]
 800752c:	3301      	adds	r3, #1
 800752e:	61fb      	str	r3, [r7, #28]
 8007530:	69fb      	ldr	r3, [r7, #28]
 8007532:	2b0f      	cmp	r3, #15
 8007534:	f67f aea2 	bls.w	800727c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007538:	bf00      	nop
 800753a:	bf00      	nop
 800753c:	3724      	adds	r7, #36	; 0x24
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr
 8007546:	bf00      	nop
 8007548:	40023800 	.word	0x40023800
 800754c:	40013800 	.word	0x40013800
 8007550:	40020000 	.word	0x40020000
 8007554:	40020400 	.word	0x40020400
 8007558:	40020800 	.word	0x40020800
 800755c:	40020c00 	.word	0x40020c00
 8007560:	40021000 	.word	0x40021000
 8007564:	40013c00 	.word	0x40013c00

08007568 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007568:	b480      	push	{r7}
 800756a:	b085      	sub	sp, #20
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	460b      	mov	r3, r1
 8007572:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	691a      	ldr	r2, [r3, #16]
 8007578:	887b      	ldrh	r3, [r7, #2]
 800757a:	4013      	ands	r3, r2
 800757c:	2b00      	cmp	r3, #0
 800757e:	d002      	beq.n	8007586 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007580:	2301      	movs	r3, #1
 8007582:	73fb      	strb	r3, [r7, #15]
 8007584:	e001      	b.n	800758a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007586:	2300      	movs	r3, #0
 8007588:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800758a:	7bfb      	ldrb	r3, [r7, #15]
}
 800758c:	4618      	mov	r0, r3
 800758e:	3714      	adds	r7, #20
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr

08007598 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007598:	b480      	push	{r7}
 800759a:	b083      	sub	sp, #12
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	460b      	mov	r3, r1
 80075a2:	807b      	strh	r3, [r7, #2]
 80075a4:	4613      	mov	r3, r2
 80075a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80075a8:	787b      	ldrb	r3, [r7, #1]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d003      	beq.n	80075b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80075ae:	887a      	ldrh	r2, [r7, #2]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80075b4:	e003      	b.n	80075be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80075b6:	887b      	ldrh	r3, [r7, #2]
 80075b8:	041a      	lsls	r2, r3, #16
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	619a      	str	r2, [r3, #24]
}
 80075be:	bf00      	nop
 80075c0:	370c      	adds	r7, #12
 80075c2:	46bd      	mov	sp, r7
 80075c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c8:	4770      	bx	lr
	...

080075cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b082      	sub	sp, #8
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	4603      	mov	r3, r0
 80075d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80075d6:	4b08      	ldr	r3, [pc, #32]	; (80075f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80075d8:	695a      	ldr	r2, [r3, #20]
 80075da:	88fb      	ldrh	r3, [r7, #6]
 80075dc:	4013      	ands	r3, r2
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d006      	beq.n	80075f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80075e2:	4a05      	ldr	r2, [pc, #20]	; (80075f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80075e4:	88fb      	ldrh	r3, [r7, #6]
 80075e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80075e8:	88fb      	ldrh	r3, [r7, #6]
 80075ea:	4618      	mov	r0, r3
 80075ec:	f7fd fbb0 	bl	8004d50 <HAL_GPIO_EXTI_Callback>
  }
}
 80075f0:	bf00      	nop
 80075f2:	3708      	adds	r7, #8
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}
 80075f8:	40013c00 	.word	0x40013c00

080075fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b084      	sub	sp, #16
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d101      	bne.n	800760e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800760a:	2301      	movs	r3, #1
 800760c:	e12b      	b.n	8007866 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007614:	b2db      	uxtb	r3, r3
 8007616:	2b00      	cmp	r3, #0
 8007618:	d106      	bne.n	8007628 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2200      	movs	r2, #0
 800761e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f7fd ff3e 	bl	80054a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2224      	movs	r2, #36	; 0x24
 800762c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	681a      	ldr	r2, [r3, #0]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f022 0201 	bic.w	r2, r2, #1
 800763e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	681a      	ldr	r2, [r3, #0]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800764e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	681a      	ldr	r2, [r3, #0]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800765e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007660:	f001 f864 	bl	800872c <HAL_RCC_GetPCLK1Freq>
 8007664:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	4a81      	ldr	r2, [pc, #516]	; (8007870 <HAL_I2C_Init+0x274>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d807      	bhi.n	8007680 <HAL_I2C_Init+0x84>
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	4a80      	ldr	r2, [pc, #512]	; (8007874 <HAL_I2C_Init+0x278>)
 8007674:	4293      	cmp	r3, r2
 8007676:	bf94      	ite	ls
 8007678:	2301      	movls	r3, #1
 800767a:	2300      	movhi	r3, #0
 800767c:	b2db      	uxtb	r3, r3
 800767e:	e006      	b.n	800768e <HAL_I2C_Init+0x92>
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	4a7d      	ldr	r2, [pc, #500]	; (8007878 <HAL_I2C_Init+0x27c>)
 8007684:	4293      	cmp	r3, r2
 8007686:	bf94      	ite	ls
 8007688:	2301      	movls	r3, #1
 800768a:	2300      	movhi	r3, #0
 800768c:	b2db      	uxtb	r3, r3
 800768e:	2b00      	cmp	r3, #0
 8007690:	d001      	beq.n	8007696 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007692:	2301      	movs	r3, #1
 8007694:	e0e7      	b.n	8007866 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	4a78      	ldr	r2, [pc, #480]	; (800787c <HAL_I2C_Init+0x280>)
 800769a:	fba2 2303 	umull	r2, r3, r2, r3
 800769e:	0c9b      	lsrs	r3, r3, #18
 80076a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	68ba      	ldr	r2, [r7, #8]
 80076b2:	430a      	orrs	r2, r1
 80076b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	6a1b      	ldr	r3, [r3, #32]
 80076bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	4a6a      	ldr	r2, [pc, #424]	; (8007870 <HAL_I2C_Init+0x274>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d802      	bhi.n	80076d0 <HAL_I2C_Init+0xd4>
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	3301      	adds	r3, #1
 80076ce:	e009      	b.n	80076e4 <HAL_I2C_Init+0xe8>
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80076d6:	fb02 f303 	mul.w	r3, r2, r3
 80076da:	4a69      	ldr	r2, [pc, #420]	; (8007880 <HAL_I2C_Init+0x284>)
 80076dc:	fba2 2303 	umull	r2, r3, r2, r3
 80076e0:	099b      	lsrs	r3, r3, #6
 80076e2:	3301      	adds	r3, #1
 80076e4:	687a      	ldr	r2, [r7, #4]
 80076e6:	6812      	ldr	r2, [r2, #0]
 80076e8:	430b      	orrs	r3, r1
 80076ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	69db      	ldr	r3, [r3, #28]
 80076f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80076f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	495c      	ldr	r1, [pc, #368]	; (8007870 <HAL_I2C_Init+0x274>)
 8007700:	428b      	cmp	r3, r1
 8007702:	d819      	bhi.n	8007738 <HAL_I2C_Init+0x13c>
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	1e59      	subs	r1, r3, #1
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	685b      	ldr	r3, [r3, #4]
 800770c:	005b      	lsls	r3, r3, #1
 800770e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007712:	1c59      	adds	r1, r3, #1
 8007714:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007718:	400b      	ands	r3, r1
 800771a:	2b00      	cmp	r3, #0
 800771c:	d00a      	beq.n	8007734 <HAL_I2C_Init+0x138>
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	1e59      	subs	r1, r3, #1
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	005b      	lsls	r3, r3, #1
 8007728:	fbb1 f3f3 	udiv	r3, r1, r3
 800772c:	3301      	adds	r3, #1
 800772e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007732:	e051      	b.n	80077d8 <HAL_I2C_Init+0x1dc>
 8007734:	2304      	movs	r3, #4
 8007736:	e04f      	b.n	80077d8 <HAL_I2C_Init+0x1dc>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d111      	bne.n	8007764 <HAL_I2C_Init+0x168>
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	1e58      	subs	r0, r3, #1
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6859      	ldr	r1, [r3, #4]
 8007748:	460b      	mov	r3, r1
 800774a:	005b      	lsls	r3, r3, #1
 800774c:	440b      	add	r3, r1
 800774e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007752:	3301      	adds	r3, #1
 8007754:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007758:	2b00      	cmp	r3, #0
 800775a:	bf0c      	ite	eq
 800775c:	2301      	moveq	r3, #1
 800775e:	2300      	movne	r3, #0
 8007760:	b2db      	uxtb	r3, r3
 8007762:	e012      	b.n	800778a <HAL_I2C_Init+0x18e>
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	1e58      	subs	r0, r3, #1
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6859      	ldr	r1, [r3, #4]
 800776c:	460b      	mov	r3, r1
 800776e:	009b      	lsls	r3, r3, #2
 8007770:	440b      	add	r3, r1
 8007772:	0099      	lsls	r1, r3, #2
 8007774:	440b      	add	r3, r1
 8007776:	fbb0 f3f3 	udiv	r3, r0, r3
 800777a:	3301      	adds	r3, #1
 800777c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007780:	2b00      	cmp	r3, #0
 8007782:	bf0c      	ite	eq
 8007784:	2301      	moveq	r3, #1
 8007786:	2300      	movne	r3, #0
 8007788:	b2db      	uxtb	r3, r3
 800778a:	2b00      	cmp	r3, #0
 800778c:	d001      	beq.n	8007792 <HAL_I2C_Init+0x196>
 800778e:	2301      	movs	r3, #1
 8007790:	e022      	b.n	80077d8 <HAL_I2C_Init+0x1dc>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	689b      	ldr	r3, [r3, #8]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d10e      	bne.n	80077b8 <HAL_I2C_Init+0x1bc>
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	1e58      	subs	r0, r3, #1
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6859      	ldr	r1, [r3, #4]
 80077a2:	460b      	mov	r3, r1
 80077a4:	005b      	lsls	r3, r3, #1
 80077a6:	440b      	add	r3, r1
 80077a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80077ac:	3301      	adds	r3, #1
 80077ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80077b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077b6:	e00f      	b.n	80077d8 <HAL_I2C_Init+0x1dc>
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	1e58      	subs	r0, r3, #1
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6859      	ldr	r1, [r3, #4]
 80077c0:	460b      	mov	r3, r1
 80077c2:	009b      	lsls	r3, r3, #2
 80077c4:	440b      	add	r3, r1
 80077c6:	0099      	lsls	r1, r3, #2
 80077c8:	440b      	add	r3, r1
 80077ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80077ce:	3301      	adds	r3, #1
 80077d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80077d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80077d8:	6879      	ldr	r1, [r7, #4]
 80077da:	6809      	ldr	r1, [r1, #0]
 80077dc:	4313      	orrs	r3, r2
 80077de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	69da      	ldr	r2, [r3, #28]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6a1b      	ldr	r3, [r3, #32]
 80077f2:	431a      	orrs	r2, r3
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	430a      	orrs	r2, r1
 80077fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	689b      	ldr	r3, [r3, #8]
 8007802:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007806:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800780a:	687a      	ldr	r2, [r7, #4]
 800780c:	6911      	ldr	r1, [r2, #16]
 800780e:	687a      	ldr	r2, [r7, #4]
 8007810:	68d2      	ldr	r2, [r2, #12]
 8007812:	4311      	orrs	r1, r2
 8007814:	687a      	ldr	r2, [r7, #4]
 8007816:	6812      	ldr	r2, [r2, #0]
 8007818:	430b      	orrs	r3, r1
 800781a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	68db      	ldr	r3, [r3, #12]
 8007822:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	695a      	ldr	r2, [r3, #20]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	699b      	ldr	r3, [r3, #24]
 800782e:	431a      	orrs	r2, r3
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	430a      	orrs	r2, r1
 8007836:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f042 0201 	orr.w	r2, r2, #1
 8007846:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2200      	movs	r2, #0
 800784c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2220      	movs	r2, #32
 8007852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2200      	movs	r2, #0
 800785a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2200      	movs	r2, #0
 8007860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007864:	2300      	movs	r3, #0
}
 8007866:	4618      	mov	r0, r3
 8007868:	3710      	adds	r7, #16
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
 800786e:	bf00      	nop
 8007870:	000186a0 	.word	0x000186a0
 8007874:	001e847f 	.word	0x001e847f
 8007878:	003d08ff 	.word	0x003d08ff
 800787c:	431bde83 	.word	0x431bde83
 8007880:	10624dd3 	.word	0x10624dd3

08007884 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b088      	sub	sp, #32
 8007888:	af02      	add	r7, sp, #8
 800788a:	60f8      	str	r0, [r7, #12]
 800788c:	607a      	str	r2, [r7, #4]
 800788e:	461a      	mov	r2, r3
 8007890:	460b      	mov	r3, r1
 8007892:	817b      	strh	r3, [r7, #10]
 8007894:	4613      	mov	r3, r2
 8007896:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007898:	f7fe fa58 	bl	8005d4c <HAL_GetTick>
 800789c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078a4:	b2db      	uxtb	r3, r3
 80078a6:	2b20      	cmp	r3, #32
 80078a8:	f040 80e0 	bne.w	8007a6c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	9300      	str	r3, [sp, #0]
 80078b0:	2319      	movs	r3, #25
 80078b2:	2201      	movs	r2, #1
 80078b4:	4970      	ldr	r1, [pc, #448]	; (8007a78 <HAL_I2C_Master_Transmit+0x1f4>)
 80078b6:	68f8      	ldr	r0, [r7, #12]
 80078b8:	f000 f964 	bl	8007b84 <I2C_WaitOnFlagUntilTimeout>
 80078bc:	4603      	mov	r3, r0
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d001      	beq.n	80078c6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80078c2:	2302      	movs	r3, #2
 80078c4:	e0d3      	b.n	8007a6e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	d101      	bne.n	80078d4 <HAL_I2C_Master_Transmit+0x50>
 80078d0:	2302      	movs	r3, #2
 80078d2:	e0cc      	b.n	8007a6e <HAL_I2C_Master_Transmit+0x1ea>
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2201      	movs	r2, #1
 80078d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f003 0301 	and.w	r3, r3, #1
 80078e6:	2b01      	cmp	r3, #1
 80078e8:	d007      	beq.n	80078fa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	681a      	ldr	r2, [r3, #0]
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f042 0201 	orr.w	r2, r2, #1
 80078f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	681a      	ldr	r2, [r3, #0]
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007908:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2221      	movs	r2, #33	; 0x21
 800790e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2210      	movs	r2, #16
 8007916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2200      	movs	r2, #0
 800791e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	687a      	ldr	r2, [r7, #4]
 8007924:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	893a      	ldrh	r2, [r7, #8]
 800792a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007930:	b29a      	uxth	r2, r3
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	4a50      	ldr	r2, [pc, #320]	; (8007a7c <HAL_I2C_Master_Transmit+0x1f8>)
 800793a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800793c:	8979      	ldrh	r1, [r7, #10]
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	6a3a      	ldr	r2, [r7, #32]
 8007942:	68f8      	ldr	r0, [r7, #12]
 8007944:	f000 f89c 	bl	8007a80 <I2C_MasterRequestWrite>
 8007948:	4603      	mov	r3, r0
 800794a:	2b00      	cmp	r3, #0
 800794c:	d001      	beq.n	8007952 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800794e:	2301      	movs	r3, #1
 8007950:	e08d      	b.n	8007a6e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007952:	2300      	movs	r3, #0
 8007954:	613b      	str	r3, [r7, #16]
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	695b      	ldr	r3, [r3, #20]
 800795c:	613b      	str	r3, [r7, #16]
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	699b      	ldr	r3, [r3, #24]
 8007964:	613b      	str	r3, [r7, #16]
 8007966:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8007968:	e066      	b.n	8007a38 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800796a:	697a      	ldr	r2, [r7, #20]
 800796c:	6a39      	ldr	r1, [r7, #32]
 800796e:	68f8      	ldr	r0, [r7, #12]
 8007970:	f000 f9de 	bl	8007d30 <I2C_WaitOnTXEFlagUntilTimeout>
 8007974:	4603      	mov	r3, r0
 8007976:	2b00      	cmp	r3, #0
 8007978:	d00d      	beq.n	8007996 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800797e:	2b04      	cmp	r3, #4
 8007980:	d107      	bne.n	8007992 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	681a      	ldr	r2, [r3, #0]
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007990:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007992:	2301      	movs	r3, #1
 8007994:	e06b      	b.n	8007a6e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800799a:	781a      	ldrb	r2, [r3, #0]
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a6:	1c5a      	adds	r2, r3, #1
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	3b01      	subs	r3, #1
 80079b4:	b29a      	uxth	r2, r3
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079be:	3b01      	subs	r3, #1
 80079c0:	b29a      	uxth	r2, r3
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	695b      	ldr	r3, [r3, #20]
 80079cc:	f003 0304 	and.w	r3, r3, #4
 80079d0:	2b04      	cmp	r3, #4
 80079d2:	d11b      	bne.n	8007a0c <HAL_I2C_Master_Transmit+0x188>
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d017      	beq.n	8007a0c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e0:	781a      	ldrb	r2, [r3, #0]
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ec:	1c5a      	adds	r2, r3, #1
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079f6:	b29b      	uxth	r3, r3
 80079f8:	3b01      	subs	r3, #1
 80079fa:	b29a      	uxth	r2, r3
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a04:	3b01      	subs	r3, #1
 8007a06:	b29a      	uxth	r2, r3
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a0c:	697a      	ldr	r2, [r7, #20]
 8007a0e:	6a39      	ldr	r1, [r7, #32]
 8007a10:	68f8      	ldr	r0, [r7, #12]
 8007a12:	f000 f9ce 	bl	8007db2 <I2C_WaitOnBTFFlagUntilTimeout>
 8007a16:	4603      	mov	r3, r0
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d00d      	beq.n	8007a38 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a20:	2b04      	cmp	r3, #4
 8007a22:	d107      	bne.n	8007a34 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	681a      	ldr	r2, [r3, #0]
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a32:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007a34:	2301      	movs	r3, #1
 8007a36:	e01a      	b.n	8007a6e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d194      	bne.n	800796a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	681a      	ldr	r2, [r3, #0]
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	2220      	movs	r2, #32
 8007a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	2200      	movs	r2, #0
 8007a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	e000      	b.n	8007a6e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007a6c:	2302      	movs	r3, #2
  }
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3718      	adds	r7, #24
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}
 8007a76:	bf00      	nop
 8007a78:	00100002 	.word	0x00100002
 8007a7c:	ffff0000 	.word	0xffff0000

08007a80 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b088      	sub	sp, #32
 8007a84:	af02      	add	r7, sp, #8
 8007a86:	60f8      	str	r0, [r7, #12]
 8007a88:	607a      	str	r2, [r7, #4]
 8007a8a:	603b      	str	r3, [r7, #0]
 8007a8c:	460b      	mov	r3, r1
 8007a8e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a94:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	2b08      	cmp	r3, #8
 8007a9a:	d006      	beq.n	8007aaa <I2C_MasterRequestWrite+0x2a>
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	2b01      	cmp	r3, #1
 8007aa0:	d003      	beq.n	8007aaa <I2C_MasterRequestWrite+0x2a>
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007aa8:	d108      	bne.n	8007abc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	681a      	ldr	r2, [r3, #0]
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ab8:	601a      	str	r2, [r3, #0]
 8007aba:	e00b      	b.n	8007ad4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ac0:	2b12      	cmp	r3, #18
 8007ac2:	d107      	bne.n	8007ad4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	681a      	ldr	r2, [r3, #0]
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ad2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	9300      	str	r3, [sp, #0]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2200      	movs	r2, #0
 8007adc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007ae0:	68f8      	ldr	r0, [r7, #12]
 8007ae2:	f000 f84f 	bl	8007b84 <I2C_WaitOnFlagUntilTimeout>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d00d      	beq.n	8007b08 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007af6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007afa:	d103      	bne.n	8007b04 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b02:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007b04:	2303      	movs	r3, #3
 8007b06:	e035      	b.n	8007b74 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	691b      	ldr	r3, [r3, #16]
 8007b0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b10:	d108      	bne.n	8007b24 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007b12:	897b      	ldrh	r3, [r7, #10]
 8007b14:	b2db      	uxtb	r3, r3
 8007b16:	461a      	mov	r2, r3
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007b20:	611a      	str	r2, [r3, #16]
 8007b22:	e01b      	b.n	8007b5c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007b24:	897b      	ldrh	r3, [r7, #10]
 8007b26:	11db      	asrs	r3, r3, #7
 8007b28:	b2db      	uxtb	r3, r3
 8007b2a:	f003 0306 	and.w	r3, r3, #6
 8007b2e:	b2db      	uxtb	r3, r3
 8007b30:	f063 030f 	orn	r3, r3, #15
 8007b34:	b2da      	uxtb	r2, r3
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	687a      	ldr	r2, [r7, #4]
 8007b40:	490e      	ldr	r1, [pc, #56]	; (8007b7c <I2C_MasterRequestWrite+0xfc>)
 8007b42:	68f8      	ldr	r0, [r7, #12]
 8007b44:	f000 f875 	bl	8007c32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d001      	beq.n	8007b52 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	e010      	b.n	8007b74 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007b52:	897b      	ldrh	r3, [r7, #10]
 8007b54:	b2da      	uxtb	r2, r3
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	687a      	ldr	r2, [r7, #4]
 8007b60:	4907      	ldr	r1, [pc, #28]	; (8007b80 <I2C_MasterRequestWrite+0x100>)
 8007b62:	68f8      	ldr	r0, [r7, #12]
 8007b64:	f000 f865 	bl	8007c32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d001      	beq.n	8007b72 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	e000      	b.n	8007b74 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007b72:	2300      	movs	r3, #0
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3718      	adds	r7, #24
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}
 8007b7c:	00010008 	.word	0x00010008
 8007b80:	00010002 	.word	0x00010002

08007b84 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b084      	sub	sp, #16
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	60f8      	str	r0, [r7, #12]
 8007b8c:	60b9      	str	r1, [r7, #8]
 8007b8e:	603b      	str	r3, [r7, #0]
 8007b90:	4613      	mov	r3, r2
 8007b92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007b94:	e025      	b.n	8007be2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b9c:	d021      	beq.n	8007be2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b9e:	f7fe f8d5 	bl	8005d4c <HAL_GetTick>
 8007ba2:	4602      	mov	r2, r0
 8007ba4:	69bb      	ldr	r3, [r7, #24]
 8007ba6:	1ad3      	subs	r3, r2, r3
 8007ba8:	683a      	ldr	r2, [r7, #0]
 8007baa:	429a      	cmp	r2, r3
 8007bac:	d302      	bcc.n	8007bb4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d116      	bne.n	8007be2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2220      	movs	r2, #32
 8007bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bce:	f043 0220 	orr.w	r2, r3, #32
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007bde:	2301      	movs	r3, #1
 8007be0:	e023      	b.n	8007c2a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	0c1b      	lsrs	r3, r3, #16
 8007be6:	b2db      	uxtb	r3, r3
 8007be8:	2b01      	cmp	r3, #1
 8007bea:	d10d      	bne.n	8007c08 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	695b      	ldr	r3, [r3, #20]
 8007bf2:	43da      	mvns	r2, r3
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	4013      	ands	r3, r2
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	bf0c      	ite	eq
 8007bfe:	2301      	moveq	r3, #1
 8007c00:	2300      	movne	r3, #0
 8007c02:	b2db      	uxtb	r3, r3
 8007c04:	461a      	mov	r2, r3
 8007c06:	e00c      	b.n	8007c22 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	699b      	ldr	r3, [r3, #24]
 8007c0e:	43da      	mvns	r2, r3
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	4013      	ands	r3, r2
 8007c14:	b29b      	uxth	r3, r3
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	bf0c      	ite	eq
 8007c1a:	2301      	moveq	r3, #1
 8007c1c:	2300      	movne	r3, #0
 8007c1e:	b2db      	uxtb	r3, r3
 8007c20:	461a      	mov	r2, r3
 8007c22:	79fb      	ldrb	r3, [r7, #7]
 8007c24:	429a      	cmp	r2, r3
 8007c26:	d0b6      	beq.n	8007b96 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007c28:	2300      	movs	r3, #0
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3710      	adds	r7, #16
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}

08007c32 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007c32:	b580      	push	{r7, lr}
 8007c34:	b084      	sub	sp, #16
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	60f8      	str	r0, [r7, #12]
 8007c3a:	60b9      	str	r1, [r7, #8]
 8007c3c:	607a      	str	r2, [r7, #4]
 8007c3e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007c40:	e051      	b.n	8007ce6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	695b      	ldr	r3, [r3, #20]
 8007c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c50:	d123      	bne.n	8007c9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	681a      	ldr	r2, [r3, #0]
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c60:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007c6a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2220      	movs	r2, #32
 8007c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c86:	f043 0204 	orr.w	r2, r3, #4
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2200      	movs	r2, #0
 8007c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007c96:	2301      	movs	r3, #1
 8007c98:	e046      	b.n	8007d28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ca0:	d021      	beq.n	8007ce6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ca2:	f7fe f853 	bl	8005d4c <HAL_GetTick>
 8007ca6:	4602      	mov	r2, r0
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	1ad3      	subs	r3, r2, r3
 8007cac:	687a      	ldr	r2, [r7, #4]
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d302      	bcc.n	8007cb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d116      	bne.n	8007ce6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2220      	movs	r2, #32
 8007cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cd2:	f043 0220 	orr.w	r2, r3, #32
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	e020      	b.n	8007d28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	0c1b      	lsrs	r3, r3, #16
 8007cea:	b2db      	uxtb	r3, r3
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d10c      	bne.n	8007d0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	695b      	ldr	r3, [r3, #20]
 8007cf6:	43da      	mvns	r2, r3
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	4013      	ands	r3, r2
 8007cfc:	b29b      	uxth	r3, r3
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	bf14      	ite	ne
 8007d02:	2301      	movne	r3, #1
 8007d04:	2300      	moveq	r3, #0
 8007d06:	b2db      	uxtb	r3, r3
 8007d08:	e00b      	b.n	8007d22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	699b      	ldr	r3, [r3, #24]
 8007d10:	43da      	mvns	r2, r3
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	4013      	ands	r3, r2
 8007d16:	b29b      	uxth	r3, r3
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	bf14      	ite	ne
 8007d1c:	2301      	movne	r3, #1
 8007d1e:	2300      	moveq	r3, #0
 8007d20:	b2db      	uxtb	r3, r3
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d18d      	bne.n	8007c42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007d26:	2300      	movs	r3, #0
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3710      	adds	r7, #16
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}

08007d30 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b084      	sub	sp, #16
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	60f8      	str	r0, [r7, #12]
 8007d38:	60b9      	str	r1, [r7, #8]
 8007d3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007d3c:	e02d      	b.n	8007d9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007d3e:	68f8      	ldr	r0, [r7, #12]
 8007d40:	f000 f878 	bl	8007e34 <I2C_IsAcknowledgeFailed>
 8007d44:	4603      	mov	r3, r0
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d001      	beq.n	8007d4e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	e02d      	b.n	8007daa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d54:	d021      	beq.n	8007d9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d56:	f7fd fff9 	bl	8005d4c <HAL_GetTick>
 8007d5a:	4602      	mov	r2, r0
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	1ad3      	subs	r3, r2, r3
 8007d60:	68ba      	ldr	r2, [r7, #8]
 8007d62:	429a      	cmp	r2, r3
 8007d64:	d302      	bcc.n	8007d6c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d116      	bne.n	8007d9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	2220      	movs	r2, #32
 8007d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d86:	f043 0220 	orr.w	r2, r3, #32
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2200      	movs	r2, #0
 8007d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007d96:	2301      	movs	r3, #1
 8007d98:	e007      	b.n	8007daa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	695b      	ldr	r3, [r3, #20]
 8007da0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007da4:	2b80      	cmp	r3, #128	; 0x80
 8007da6:	d1ca      	bne.n	8007d3e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007da8:	2300      	movs	r3, #0
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3710      	adds	r7, #16
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}

08007db2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007db2:	b580      	push	{r7, lr}
 8007db4:	b084      	sub	sp, #16
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	60f8      	str	r0, [r7, #12]
 8007dba:	60b9      	str	r1, [r7, #8]
 8007dbc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007dbe:	e02d      	b.n	8007e1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007dc0:	68f8      	ldr	r0, [r7, #12]
 8007dc2:	f000 f837 	bl	8007e34 <I2C_IsAcknowledgeFailed>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d001      	beq.n	8007dd0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	e02d      	b.n	8007e2c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dd6:	d021      	beq.n	8007e1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007dd8:	f7fd ffb8 	bl	8005d4c <HAL_GetTick>
 8007ddc:	4602      	mov	r2, r0
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	1ad3      	subs	r3, r2, r3
 8007de2:	68ba      	ldr	r2, [r7, #8]
 8007de4:	429a      	cmp	r2, r3
 8007de6:	d302      	bcc.n	8007dee <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d116      	bne.n	8007e1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2200      	movs	r2, #0
 8007df2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2220      	movs	r2, #32
 8007df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e08:	f043 0220 	orr.w	r2, r3, #32
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2200      	movs	r2, #0
 8007e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007e18:	2301      	movs	r3, #1
 8007e1a:	e007      	b.n	8007e2c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	695b      	ldr	r3, [r3, #20]
 8007e22:	f003 0304 	and.w	r3, r3, #4
 8007e26:	2b04      	cmp	r3, #4
 8007e28:	d1ca      	bne.n	8007dc0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007e2a:	2300      	movs	r3, #0
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3710      	adds	r7, #16
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}

08007e34 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b083      	sub	sp, #12
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	695b      	ldr	r3, [r3, #20]
 8007e42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e4a:	d11b      	bne.n	8007e84 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007e54:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2220      	movs	r2, #32
 8007e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2200      	movs	r2, #0
 8007e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e70:	f043 0204 	orr.w	r2, r3, #4
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007e80:	2301      	movs	r3, #1
 8007e82:	e000      	b.n	8007e86 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007e84:	2300      	movs	r3, #0
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	370c      	adds	r7, #12
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e90:	4770      	bx	lr
	...

08007e94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b086      	sub	sp, #24
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d101      	bne.n	8007ea6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	e264      	b.n	8008370 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f003 0301 	and.w	r3, r3, #1
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d075      	beq.n	8007f9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007eb2:	4ba3      	ldr	r3, [pc, #652]	; (8008140 <HAL_RCC_OscConfig+0x2ac>)
 8007eb4:	689b      	ldr	r3, [r3, #8]
 8007eb6:	f003 030c 	and.w	r3, r3, #12
 8007eba:	2b04      	cmp	r3, #4
 8007ebc:	d00c      	beq.n	8007ed8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007ebe:	4ba0      	ldr	r3, [pc, #640]	; (8008140 <HAL_RCC_OscConfig+0x2ac>)
 8007ec0:	689b      	ldr	r3, [r3, #8]
 8007ec2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007ec6:	2b08      	cmp	r3, #8
 8007ec8:	d112      	bne.n	8007ef0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007eca:	4b9d      	ldr	r3, [pc, #628]	; (8008140 <HAL_RCC_OscConfig+0x2ac>)
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ed2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ed6:	d10b      	bne.n	8007ef0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ed8:	4b99      	ldr	r3, [pc, #612]	; (8008140 <HAL_RCC_OscConfig+0x2ac>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d05b      	beq.n	8007f9c <HAL_RCC_OscConfig+0x108>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	685b      	ldr	r3, [r3, #4]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d157      	bne.n	8007f9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007eec:	2301      	movs	r3, #1
 8007eee:	e23f      	b.n	8008370 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	685b      	ldr	r3, [r3, #4]
 8007ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ef8:	d106      	bne.n	8007f08 <HAL_RCC_OscConfig+0x74>
 8007efa:	4b91      	ldr	r3, [pc, #580]	; (8008140 <HAL_RCC_OscConfig+0x2ac>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	4a90      	ldr	r2, [pc, #576]	; (8008140 <HAL_RCC_OscConfig+0x2ac>)
 8007f00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f04:	6013      	str	r3, [r2, #0]
 8007f06:	e01d      	b.n	8007f44 <HAL_RCC_OscConfig+0xb0>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	685b      	ldr	r3, [r3, #4]
 8007f0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007f10:	d10c      	bne.n	8007f2c <HAL_RCC_OscConfig+0x98>
 8007f12:	4b8b      	ldr	r3, [pc, #556]	; (8008140 <HAL_RCC_OscConfig+0x2ac>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4a8a      	ldr	r2, [pc, #552]	; (8008140 <HAL_RCC_OscConfig+0x2ac>)
 8007f18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007f1c:	6013      	str	r3, [r2, #0]
 8007f1e:	4b88      	ldr	r3, [pc, #544]	; (8008140 <HAL_RCC_OscConfig+0x2ac>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a87      	ldr	r2, [pc, #540]	; (8008140 <HAL_RCC_OscConfig+0x2ac>)
 8007f24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f28:	6013      	str	r3, [r2, #0]
 8007f2a:	e00b      	b.n	8007f44 <HAL_RCC_OscConfig+0xb0>
 8007f2c:	4b84      	ldr	r3, [pc, #528]	; (8008140 <HAL_RCC_OscConfig+0x2ac>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a83      	ldr	r2, [pc, #524]	; (8008140 <HAL_RCC_OscConfig+0x2ac>)
 8007f32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f36:	6013      	str	r3, [r2, #0]
 8007f38:	4b81      	ldr	r3, [pc, #516]	; (8008140 <HAL_RCC_OscConfig+0x2ac>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4a80      	ldr	r2, [pc, #512]	; (8008140 <HAL_RCC_OscConfig+0x2ac>)
 8007f3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007f42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d013      	beq.n	8007f74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f4c:	f7fd fefe 	bl	8005d4c <HAL_GetTick>
 8007f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f52:	e008      	b.n	8007f66 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007f54:	f7fd fefa 	bl	8005d4c <HAL_GetTick>
 8007f58:	4602      	mov	r2, r0
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	1ad3      	subs	r3, r2, r3
 8007f5e:	2b64      	cmp	r3, #100	; 0x64
 8007f60:	d901      	bls.n	8007f66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007f62:	2303      	movs	r3, #3
 8007f64:	e204      	b.n	8008370 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f66:	4b76      	ldr	r3, [pc, #472]	; (8008140 <HAL_RCC_OscConfig+0x2ac>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d0f0      	beq.n	8007f54 <HAL_RCC_OscConfig+0xc0>
 8007f72:	e014      	b.n	8007f9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f74:	f7fd feea 	bl	8005d4c <HAL_GetTick>
 8007f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007f7a:	e008      	b.n	8007f8e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007f7c:	f7fd fee6 	bl	8005d4c <HAL_GetTick>
 8007f80:	4602      	mov	r2, r0
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	1ad3      	subs	r3, r2, r3
 8007f86:	2b64      	cmp	r3, #100	; 0x64
 8007f88:	d901      	bls.n	8007f8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007f8a:	2303      	movs	r3, #3
 8007f8c:	e1f0      	b.n	8008370 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007f8e:	4b6c      	ldr	r3, [pc, #432]	; (8008140 <HAL_RCC_OscConfig+0x2ac>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d1f0      	bne.n	8007f7c <HAL_RCC_OscConfig+0xe8>
 8007f9a:	e000      	b.n	8007f9e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f003 0302 	and.w	r3, r3, #2
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d063      	beq.n	8008072 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007faa:	4b65      	ldr	r3, [pc, #404]	; (8008140 <HAL_RCC_OscConfig+0x2ac>)
 8007fac:	689b      	ldr	r3, [r3, #8]
 8007fae:	f003 030c 	and.w	r3, r3, #12
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d00b      	beq.n	8007fce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007fb6:	4b62      	ldr	r3, [pc, #392]	; (8008140 <HAL_RCC_OscConfig+0x2ac>)
 8007fb8:	689b      	ldr	r3, [r3, #8]
 8007fba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007fbe:	2b08      	cmp	r3, #8
 8007fc0:	d11c      	bne.n	8007ffc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007fc2:	4b5f      	ldr	r3, [pc, #380]	; (8008140 <HAL_RCC_OscConfig+0x2ac>)
 8007fc4:	685b      	ldr	r3, [r3, #4]
 8007fc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d116      	bne.n	8007ffc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007fce:	4b5c      	ldr	r3, [pc, #368]	; (8008140 <HAL_RCC_OscConfig+0x2ac>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f003 0302 	and.w	r3, r3, #2
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d005      	beq.n	8007fe6 <HAL_RCC_OscConfig+0x152>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	68db      	ldr	r3, [r3, #12]
 8007fde:	2b01      	cmp	r3, #1
 8007fe0:	d001      	beq.n	8007fe6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	e1c4      	b.n	8008370 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007fe6:	4b56      	ldr	r3, [pc, #344]	; (8008140 <HAL_RCC_OscConfig+0x2ac>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	691b      	ldr	r3, [r3, #16]
 8007ff2:	00db      	lsls	r3, r3, #3
 8007ff4:	4952      	ldr	r1, [pc, #328]	; (8008140 <HAL_RCC_OscConfig+0x2ac>)
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007ffa:	e03a      	b.n	8008072 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	68db      	ldr	r3, [r3, #12]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d020      	beq.n	8008046 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008004:	4b4f      	ldr	r3, [pc, #316]	; (8008144 <HAL_RCC_OscConfig+0x2b0>)
 8008006:	2201      	movs	r2, #1
 8008008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800800a:	f7fd fe9f 	bl	8005d4c <HAL_GetTick>
 800800e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008010:	e008      	b.n	8008024 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008012:	f7fd fe9b 	bl	8005d4c <HAL_GetTick>
 8008016:	4602      	mov	r2, r0
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	1ad3      	subs	r3, r2, r3
 800801c:	2b02      	cmp	r3, #2
 800801e:	d901      	bls.n	8008024 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008020:	2303      	movs	r3, #3
 8008022:	e1a5      	b.n	8008370 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008024:	4b46      	ldr	r3, [pc, #280]	; (8008140 <HAL_RCC_OscConfig+0x2ac>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f003 0302 	and.w	r3, r3, #2
 800802c:	2b00      	cmp	r3, #0
 800802e:	d0f0      	beq.n	8008012 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008030:	4b43      	ldr	r3, [pc, #268]	; (8008140 <HAL_RCC_OscConfig+0x2ac>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	691b      	ldr	r3, [r3, #16]
 800803c:	00db      	lsls	r3, r3, #3
 800803e:	4940      	ldr	r1, [pc, #256]	; (8008140 <HAL_RCC_OscConfig+0x2ac>)
 8008040:	4313      	orrs	r3, r2
 8008042:	600b      	str	r3, [r1, #0]
 8008044:	e015      	b.n	8008072 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008046:	4b3f      	ldr	r3, [pc, #252]	; (8008144 <HAL_RCC_OscConfig+0x2b0>)
 8008048:	2200      	movs	r2, #0
 800804a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800804c:	f7fd fe7e 	bl	8005d4c <HAL_GetTick>
 8008050:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008052:	e008      	b.n	8008066 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008054:	f7fd fe7a 	bl	8005d4c <HAL_GetTick>
 8008058:	4602      	mov	r2, r0
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	1ad3      	subs	r3, r2, r3
 800805e:	2b02      	cmp	r3, #2
 8008060:	d901      	bls.n	8008066 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008062:	2303      	movs	r3, #3
 8008064:	e184      	b.n	8008370 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008066:	4b36      	ldr	r3, [pc, #216]	; (8008140 <HAL_RCC_OscConfig+0x2ac>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f003 0302 	and.w	r3, r3, #2
 800806e:	2b00      	cmp	r3, #0
 8008070:	d1f0      	bne.n	8008054 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f003 0308 	and.w	r3, r3, #8
 800807a:	2b00      	cmp	r3, #0
 800807c:	d030      	beq.n	80080e0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	695b      	ldr	r3, [r3, #20]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d016      	beq.n	80080b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008086:	4b30      	ldr	r3, [pc, #192]	; (8008148 <HAL_RCC_OscConfig+0x2b4>)
 8008088:	2201      	movs	r2, #1
 800808a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800808c:	f7fd fe5e 	bl	8005d4c <HAL_GetTick>
 8008090:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008092:	e008      	b.n	80080a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008094:	f7fd fe5a 	bl	8005d4c <HAL_GetTick>
 8008098:	4602      	mov	r2, r0
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	1ad3      	subs	r3, r2, r3
 800809e:	2b02      	cmp	r3, #2
 80080a0:	d901      	bls.n	80080a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80080a2:	2303      	movs	r3, #3
 80080a4:	e164      	b.n	8008370 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80080a6:	4b26      	ldr	r3, [pc, #152]	; (8008140 <HAL_RCC_OscConfig+0x2ac>)
 80080a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080aa:	f003 0302 	and.w	r3, r3, #2
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d0f0      	beq.n	8008094 <HAL_RCC_OscConfig+0x200>
 80080b2:	e015      	b.n	80080e0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80080b4:	4b24      	ldr	r3, [pc, #144]	; (8008148 <HAL_RCC_OscConfig+0x2b4>)
 80080b6:	2200      	movs	r2, #0
 80080b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80080ba:	f7fd fe47 	bl	8005d4c <HAL_GetTick>
 80080be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80080c0:	e008      	b.n	80080d4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80080c2:	f7fd fe43 	bl	8005d4c <HAL_GetTick>
 80080c6:	4602      	mov	r2, r0
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	1ad3      	subs	r3, r2, r3
 80080cc:	2b02      	cmp	r3, #2
 80080ce:	d901      	bls.n	80080d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80080d0:	2303      	movs	r3, #3
 80080d2:	e14d      	b.n	8008370 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80080d4:	4b1a      	ldr	r3, [pc, #104]	; (8008140 <HAL_RCC_OscConfig+0x2ac>)
 80080d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080d8:	f003 0302 	and.w	r3, r3, #2
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d1f0      	bne.n	80080c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f003 0304 	and.w	r3, r3, #4
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	f000 80a0 	beq.w	800822e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80080ee:	2300      	movs	r3, #0
 80080f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80080f2:	4b13      	ldr	r3, [pc, #76]	; (8008140 <HAL_RCC_OscConfig+0x2ac>)
 80080f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d10f      	bne.n	800811e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80080fe:	2300      	movs	r3, #0
 8008100:	60bb      	str	r3, [r7, #8]
 8008102:	4b0f      	ldr	r3, [pc, #60]	; (8008140 <HAL_RCC_OscConfig+0x2ac>)
 8008104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008106:	4a0e      	ldr	r2, [pc, #56]	; (8008140 <HAL_RCC_OscConfig+0x2ac>)
 8008108:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800810c:	6413      	str	r3, [r2, #64]	; 0x40
 800810e:	4b0c      	ldr	r3, [pc, #48]	; (8008140 <HAL_RCC_OscConfig+0x2ac>)
 8008110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008116:	60bb      	str	r3, [r7, #8]
 8008118:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800811a:	2301      	movs	r3, #1
 800811c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800811e:	4b0b      	ldr	r3, [pc, #44]	; (800814c <HAL_RCC_OscConfig+0x2b8>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008126:	2b00      	cmp	r3, #0
 8008128:	d121      	bne.n	800816e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800812a:	4b08      	ldr	r3, [pc, #32]	; (800814c <HAL_RCC_OscConfig+0x2b8>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4a07      	ldr	r2, [pc, #28]	; (800814c <HAL_RCC_OscConfig+0x2b8>)
 8008130:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008134:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008136:	f7fd fe09 	bl	8005d4c <HAL_GetTick>
 800813a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800813c:	e011      	b.n	8008162 <HAL_RCC_OscConfig+0x2ce>
 800813e:	bf00      	nop
 8008140:	40023800 	.word	0x40023800
 8008144:	42470000 	.word	0x42470000
 8008148:	42470e80 	.word	0x42470e80
 800814c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008150:	f7fd fdfc 	bl	8005d4c <HAL_GetTick>
 8008154:	4602      	mov	r2, r0
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	1ad3      	subs	r3, r2, r3
 800815a:	2b02      	cmp	r3, #2
 800815c:	d901      	bls.n	8008162 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800815e:	2303      	movs	r3, #3
 8008160:	e106      	b.n	8008370 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008162:	4b85      	ldr	r3, [pc, #532]	; (8008378 <HAL_RCC_OscConfig+0x4e4>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800816a:	2b00      	cmp	r3, #0
 800816c:	d0f0      	beq.n	8008150 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	689b      	ldr	r3, [r3, #8]
 8008172:	2b01      	cmp	r3, #1
 8008174:	d106      	bne.n	8008184 <HAL_RCC_OscConfig+0x2f0>
 8008176:	4b81      	ldr	r3, [pc, #516]	; (800837c <HAL_RCC_OscConfig+0x4e8>)
 8008178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800817a:	4a80      	ldr	r2, [pc, #512]	; (800837c <HAL_RCC_OscConfig+0x4e8>)
 800817c:	f043 0301 	orr.w	r3, r3, #1
 8008180:	6713      	str	r3, [r2, #112]	; 0x70
 8008182:	e01c      	b.n	80081be <HAL_RCC_OscConfig+0x32a>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	689b      	ldr	r3, [r3, #8]
 8008188:	2b05      	cmp	r3, #5
 800818a:	d10c      	bne.n	80081a6 <HAL_RCC_OscConfig+0x312>
 800818c:	4b7b      	ldr	r3, [pc, #492]	; (800837c <HAL_RCC_OscConfig+0x4e8>)
 800818e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008190:	4a7a      	ldr	r2, [pc, #488]	; (800837c <HAL_RCC_OscConfig+0x4e8>)
 8008192:	f043 0304 	orr.w	r3, r3, #4
 8008196:	6713      	str	r3, [r2, #112]	; 0x70
 8008198:	4b78      	ldr	r3, [pc, #480]	; (800837c <HAL_RCC_OscConfig+0x4e8>)
 800819a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800819c:	4a77      	ldr	r2, [pc, #476]	; (800837c <HAL_RCC_OscConfig+0x4e8>)
 800819e:	f043 0301 	orr.w	r3, r3, #1
 80081a2:	6713      	str	r3, [r2, #112]	; 0x70
 80081a4:	e00b      	b.n	80081be <HAL_RCC_OscConfig+0x32a>
 80081a6:	4b75      	ldr	r3, [pc, #468]	; (800837c <HAL_RCC_OscConfig+0x4e8>)
 80081a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081aa:	4a74      	ldr	r2, [pc, #464]	; (800837c <HAL_RCC_OscConfig+0x4e8>)
 80081ac:	f023 0301 	bic.w	r3, r3, #1
 80081b0:	6713      	str	r3, [r2, #112]	; 0x70
 80081b2:	4b72      	ldr	r3, [pc, #456]	; (800837c <HAL_RCC_OscConfig+0x4e8>)
 80081b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081b6:	4a71      	ldr	r2, [pc, #452]	; (800837c <HAL_RCC_OscConfig+0x4e8>)
 80081b8:	f023 0304 	bic.w	r3, r3, #4
 80081bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	689b      	ldr	r3, [r3, #8]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d015      	beq.n	80081f2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081c6:	f7fd fdc1 	bl	8005d4c <HAL_GetTick>
 80081ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80081cc:	e00a      	b.n	80081e4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80081ce:	f7fd fdbd 	bl	8005d4c <HAL_GetTick>
 80081d2:	4602      	mov	r2, r0
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	1ad3      	subs	r3, r2, r3
 80081d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80081dc:	4293      	cmp	r3, r2
 80081de:	d901      	bls.n	80081e4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80081e0:	2303      	movs	r3, #3
 80081e2:	e0c5      	b.n	8008370 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80081e4:	4b65      	ldr	r3, [pc, #404]	; (800837c <HAL_RCC_OscConfig+0x4e8>)
 80081e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081e8:	f003 0302 	and.w	r3, r3, #2
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d0ee      	beq.n	80081ce <HAL_RCC_OscConfig+0x33a>
 80081f0:	e014      	b.n	800821c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80081f2:	f7fd fdab 	bl	8005d4c <HAL_GetTick>
 80081f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80081f8:	e00a      	b.n	8008210 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80081fa:	f7fd fda7 	bl	8005d4c <HAL_GetTick>
 80081fe:	4602      	mov	r2, r0
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	1ad3      	subs	r3, r2, r3
 8008204:	f241 3288 	movw	r2, #5000	; 0x1388
 8008208:	4293      	cmp	r3, r2
 800820a:	d901      	bls.n	8008210 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800820c:	2303      	movs	r3, #3
 800820e:	e0af      	b.n	8008370 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008210:	4b5a      	ldr	r3, [pc, #360]	; (800837c <HAL_RCC_OscConfig+0x4e8>)
 8008212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008214:	f003 0302 	and.w	r3, r3, #2
 8008218:	2b00      	cmp	r3, #0
 800821a:	d1ee      	bne.n	80081fa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800821c:	7dfb      	ldrb	r3, [r7, #23]
 800821e:	2b01      	cmp	r3, #1
 8008220:	d105      	bne.n	800822e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008222:	4b56      	ldr	r3, [pc, #344]	; (800837c <HAL_RCC_OscConfig+0x4e8>)
 8008224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008226:	4a55      	ldr	r2, [pc, #340]	; (800837c <HAL_RCC_OscConfig+0x4e8>)
 8008228:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800822c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	699b      	ldr	r3, [r3, #24]
 8008232:	2b00      	cmp	r3, #0
 8008234:	f000 809b 	beq.w	800836e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008238:	4b50      	ldr	r3, [pc, #320]	; (800837c <HAL_RCC_OscConfig+0x4e8>)
 800823a:	689b      	ldr	r3, [r3, #8]
 800823c:	f003 030c 	and.w	r3, r3, #12
 8008240:	2b08      	cmp	r3, #8
 8008242:	d05c      	beq.n	80082fe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	699b      	ldr	r3, [r3, #24]
 8008248:	2b02      	cmp	r3, #2
 800824a:	d141      	bne.n	80082d0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800824c:	4b4c      	ldr	r3, [pc, #304]	; (8008380 <HAL_RCC_OscConfig+0x4ec>)
 800824e:	2200      	movs	r2, #0
 8008250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008252:	f7fd fd7b 	bl	8005d4c <HAL_GetTick>
 8008256:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008258:	e008      	b.n	800826c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800825a:	f7fd fd77 	bl	8005d4c <HAL_GetTick>
 800825e:	4602      	mov	r2, r0
 8008260:	693b      	ldr	r3, [r7, #16]
 8008262:	1ad3      	subs	r3, r2, r3
 8008264:	2b02      	cmp	r3, #2
 8008266:	d901      	bls.n	800826c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8008268:	2303      	movs	r3, #3
 800826a:	e081      	b.n	8008370 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800826c:	4b43      	ldr	r3, [pc, #268]	; (800837c <HAL_RCC_OscConfig+0x4e8>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008274:	2b00      	cmp	r3, #0
 8008276:	d1f0      	bne.n	800825a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	69da      	ldr	r2, [r3, #28]
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6a1b      	ldr	r3, [r3, #32]
 8008280:	431a      	orrs	r2, r3
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008286:	019b      	lsls	r3, r3, #6
 8008288:	431a      	orrs	r2, r3
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800828e:	085b      	lsrs	r3, r3, #1
 8008290:	3b01      	subs	r3, #1
 8008292:	041b      	lsls	r3, r3, #16
 8008294:	431a      	orrs	r2, r3
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800829a:	061b      	lsls	r3, r3, #24
 800829c:	4937      	ldr	r1, [pc, #220]	; (800837c <HAL_RCC_OscConfig+0x4e8>)
 800829e:	4313      	orrs	r3, r2
 80082a0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80082a2:	4b37      	ldr	r3, [pc, #220]	; (8008380 <HAL_RCC_OscConfig+0x4ec>)
 80082a4:	2201      	movs	r2, #1
 80082a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80082a8:	f7fd fd50 	bl	8005d4c <HAL_GetTick>
 80082ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80082ae:	e008      	b.n	80082c2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80082b0:	f7fd fd4c 	bl	8005d4c <HAL_GetTick>
 80082b4:	4602      	mov	r2, r0
 80082b6:	693b      	ldr	r3, [r7, #16]
 80082b8:	1ad3      	subs	r3, r2, r3
 80082ba:	2b02      	cmp	r3, #2
 80082bc:	d901      	bls.n	80082c2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80082be:	2303      	movs	r3, #3
 80082c0:	e056      	b.n	8008370 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80082c2:	4b2e      	ldr	r3, [pc, #184]	; (800837c <HAL_RCC_OscConfig+0x4e8>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d0f0      	beq.n	80082b0 <HAL_RCC_OscConfig+0x41c>
 80082ce:	e04e      	b.n	800836e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80082d0:	4b2b      	ldr	r3, [pc, #172]	; (8008380 <HAL_RCC_OscConfig+0x4ec>)
 80082d2:	2200      	movs	r2, #0
 80082d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80082d6:	f7fd fd39 	bl	8005d4c <HAL_GetTick>
 80082da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80082dc:	e008      	b.n	80082f0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80082de:	f7fd fd35 	bl	8005d4c <HAL_GetTick>
 80082e2:	4602      	mov	r2, r0
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	1ad3      	subs	r3, r2, r3
 80082e8:	2b02      	cmp	r3, #2
 80082ea:	d901      	bls.n	80082f0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80082ec:	2303      	movs	r3, #3
 80082ee:	e03f      	b.n	8008370 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80082f0:	4b22      	ldr	r3, [pc, #136]	; (800837c <HAL_RCC_OscConfig+0x4e8>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d1f0      	bne.n	80082de <HAL_RCC_OscConfig+0x44a>
 80082fc:	e037      	b.n	800836e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	699b      	ldr	r3, [r3, #24]
 8008302:	2b01      	cmp	r3, #1
 8008304:	d101      	bne.n	800830a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8008306:	2301      	movs	r3, #1
 8008308:	e032      	b.n	8008370 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800830a:	4b1c      	ldr	r3, [pc, #112]	; (800837c <HAL_RCC_OscConfig+0x4e8>)
 800830c:	685b      	ldr	r3, [r3, #4]
 800830e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	699b      	ldr	r3, [r3, #24]
 8008314:	2b01      	cmp	r3, #1
 8008316:	d028      	beq.n	800836a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008322:	429a      	cmp	r2, r3
 8008324:	d121      	bne.n	800836a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008330:	429a      	cmp	r2, r3
 8008332:	d11a      	bne.n	800836a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008334:	68fa      	ldr	r2, [r7, #12]
 8008336:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800833a:	4013      	ands	r3, r2
 800833c:	687a      	ldr	r2, [r7, #4]
 800833e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008340:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008342:	4293      	cmp	r3, r2
 8008344:	d111      	bne.n	800836a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008350:	085b      	lsrs	r3, r3, #1
 8008352:	3b01      	subs	r3, #1
 8008354:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008356:	429a      	cmp	r2, r3
 8008358:	d107      	bne.n	800836a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008364:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008366:	429a      	cmp	r2, r3
 8008368:	d001      	beq.n	800836e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800836a:	2301      	movs	r3, #1
 800836c:	e000      	b.n	8008370 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800836e:	2300      	movs	r3, #0
}
 8008370:	4618      	mov	r0, r3
 8008372:	3718      	adds	r7, #24
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}
 8008378:	40007000 	.word	0x40007000
 800837c:	40023800 	.word	0x40023800
 8008380:	42470060 	.word	0x42470060

08008384 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b084      	sub	sp, #16
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
 800838c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d101      	bne.n	8008398 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008394:	2301      	movs	r3, #1
 8008396:	e0cc      	b.n	8008532 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008398:	4b68      	ldr	r3, [pc, #416]	; (800853c <HAL_RCC_ClockConfig+0x1b8>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f003 0307 	and.w	r3, r3, #7
 80083a0:	683a      	ldr	r2, [r7, #0]
 80083a2:	429a      	cmp	r2, r3
 80083a4:	d90c      	bls.n	80083c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083a6:	4b65      	ldr	r3, [pc, #404]	; (800853c <HAL_RCC_ClockConfig+0x1b8>)
 80083a8:	683a      	ldr	r2, [r7, #0]
 80083aa:	b2d2      	uxtb	r2, r2
 80083ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80083ae:	4b63      	ldr	r3, [pc, #396]	; (800853c <HAL_RCC_ClockConfig+0x1b8>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f003 0307 	and.w	r3, r3, #7
 80083b6:	683a      	ldr	r2, [r7, #0]
 80083b8:	429a      	cmp	r2, r3
 80083ba:	d001      	beq.n	80083c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80083bc:	2301      	movs	r3, #1
 80083be:	e0b8      	b.n	8008532 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f003 0302 	and.w	r3, r3, #2
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d020      	beq.n	800840e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f003 0304 	and.w	r3, r3, #4
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d005      	beq.n	80083e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80083d8:	4b59      	ldr	r3, [pc, #356]	; (8008540 <HAL_RCC_ClockConfig+0x1bc>)
 80083da:	689b      	ldr	r3, [r3, #8]
 80083dc:	4a58      	ldr	r2, [pc, #352]	; (8008540 <HAL_RCC_ClockConfig+0x1bc>)
 80083de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80083e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f003 0308 	and.w	r3, r3, #8
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d005      	beq.n	80083fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80083f0:	4b53      	ldr	r3, [pc, #332]	; (8008540 <HAL_RCC_ClockConfig+0x1bc>)
 80083f2:	689b      	ldr	r3, [r3, #8]
 80083f4:	4a52      	ldr	r2, [pc, #328]	; (8008540 <HAL_RCC_ClockConfig+0x1bc>)
 80083f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80083fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80083fc:	4b50      	ldr	r3, [pc, #320]	; (8008540 <HAL_RCC_ClockConfig+0x1bc>)
 80083fe:	689b      	ldr	r3, [r3, #8]
 8008400:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	689b      	ldr	r3, [r3, #8]
 8008408:	494d      	ldr	r1, [pc, #308]	; (8008540 <HAL_RCC_ClockConfig+0x1bc>)
 800840a:	4313      	orrs	r3, r2
 800840c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f003 0301 	and.w	r3, r3, #1
 8008416:	2b00      	cmp	r3, #0
 8008418:	d044      	beq.n	80084a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	685b      	ldr	r3, [r3, #4]
 800841e:	2b01      	cmp	r3, #1
 8008420:	d107      	bne.n	8008432 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008422:	4b47      	ldr	r3, [pc, #284]	; (8008540 <HAL_RCC_ClockConfig+0x1bc>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800842a:	2b00      	cmp	r3, #0
 800842c:	d119      	bne.n	8008462 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800842e:	2301      	movs	r3, #1
 8008430:	e07f      	b.n	8008532 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	2b02      	cmp	r3, #2
 8008438:	d003      	beq.n	8008442 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800843e:	2b03      	cmp	r3, #3
 8008440:	d107      	bne.n	8008452 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008442:	4b3f      	ldr	r3, [pc, #252]	; (8008540 <HAL_RCC_ClockConfig+0x1bc>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800844a:	2b00      	cmp	r3, #0
 800844c:	d109      	bne.n	8008462 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800844e:	2301      	movs	r3, #1
 8008450:	e06f      	b.n	8008532 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008452:	4b3b      	ldr	r3, [pc, #236]	; (8008540 <HAL_RCC_ClockConfig+0x1bc>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f003 0302 	and.w	r3, r3, #2
 800845a:	2b00      	cmp	r3, #0
 800845c:	d101      	bne.n	8008462 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800845e:	2301      	movs	r3, #1
 8008460:	e067      	b.n	8008532 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008462:	4b37      	ldr	r3, [pc, #220]	; (8008540 <HAL_RCC_ClockConfig+0x1bc>)
 8008464:	689b      	ldr	r3, [r3, #8]
 8008466:	f023 0203 	bic.w	r2, r3, #3
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	4934      	ldr	r1, [pc, #208]	; (8008540 <HAL_RCC_ClockConfig+0x1bc>)
 8008470:	4313      	orrs	r3, r2
 8008472:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008474:	f7fd fc6a 	bl	8005d4c <HAL_GetTick>
 8008478:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800847a:	e00a      	b.n	8008492 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800847c:	f7fd fc66 	bl	8005d4c <HAL_GetTick>
 8008480:	4602      	mov	r2, r0
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	1ad3      	subs	r3, r2, r3
 8008486:	f241 3288 	movw	r2, #5000	; 0x1388
 800848a:	4293      	cmp	r3, r2
 800848c:	d901      	bls.n	8008492 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800848e:	2303      	movs	r3, #3
 8008490:	e04f      	b.n	8008532 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008492:	4b2b      	ldr	r3, [pc, #172]	; (8008540 <HAL_RCC_ClockConfig+0x1bc>)
 8008494:	689b      	ldr	r3, [r3, #8]
 8008496:	f003 020c 	and.w	r2, r3, #12
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	009b      	lsls	r3, r3, #2
 80084a0:	429a      	cmp	r2, r3
 80084a2:	d1eb      	bne.n	800847c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80084a4:	4b25      	ldr	r3, [pc, #148]	; (800853c <HAL_RCC_ClockConfig+0x1b8>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f003 0307 	and.w	r3, r3, #7
 80084ac:	683a      	ldr	r2, [r7, #0]
 80084ae:	429a      	cmp	r2, r3
 80084b0:	d20c      	bcs.n	80084cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80084b2:	4b22      	ldr	r3, [pc, #136]	; (800853c <HAL_RCC_ClockConfig+0x1b8>)
 80084b4:	683a      	ldr	r2, [r7, #0]
 80084b6:	b2d2      	uxtb	r2, r2
 80084b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80084ba:	4b20      	ldr	r3, [pc, #128]	; (800853c <HAL_RCC_ClockConfig+0x1b8>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f003 0307 	and.w	r3, r3, #7
 80084c2:	683a      	ldr	r2, [r7, #0]
 80084c4:	429a      	cmp	r2, r3
 80084c6:	d001      	beq.n	80084cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80084c8:	2301      	movs	r3, #1
 80084ca:	e032      	b.n	8008532 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f003 0304 	and.w	r3, r3, #4
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d008      	beq.n	80084ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80084d8:	4b19      	ldr	r3, [pc, #100]	; (8008540 <HAL_RCC_ClockConfig+0x1bc>)
 80084da:	689b      	ldr	r3, [r3, #8]
 80084dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	68db      	ldr	r3, [r3, #12]
 80084e4:	4916      	ldr	r1, [pc, #88]	; (8008540 <HAL_RCC_ClockConfig+0x1bc>)
 80084e6:	4313      	orrs	r3, r2
 80084e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f003 0308 	and.w	r3, r3, #8
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d009      	beq.n	800850a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80084f6:	4b12      	ldr	r3, [pc, #72]	; (8008540 <HAL_RCC_ClockConfig+0x1bc>)
 80084f8:	689b      	ldr	r3, [r3, #8]
 80084fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	691b      	ldr	r3, [r3, #16]
 8008502:	00db      	lsls	r3, r3, #3
 8008504:	490e      	ldr	r1, [pc, #56]	; (8008540 <HAL_RCC_ClockConfig+0x1bc>)
 8008506:	4313      	orrs	r3, r2
 8008508:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800850a:	f000 f821 	bl	8008550 <HAL_RCC_GetSysClockFreq>
 800850e:	4602      	mov	r2, r0
 8008510:	4b0b      	ldr	r3, [pc, #44]	; (8008540 <HAL_RCC_ClockConfig+0x1bc>)
 8008512:	689b      	ldr	r3, [r3, #8]
 8008514:	091b      	lsrs	r3, r3, #4
 8008516:	f003 030f 	and.w	r3, r3, #15
 800851a:	490a      	ldr	r1, [pc, #40]	; (8008544 <HAL_RCC_ClockConfig+0x1c0>)
 800851c:	5ccb      	ldrb	r3, [r1, r3]
 800851e:	fa22 f303 	lsr.w	r3, r2, r3
 8008522:	4a09      	ldr	r2, [pc, #36]	; (8008548 <HAL_RCC_ClockConfig+0x1c4>)
 8008524:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008526:	4b09      	ldr	r3, [pc, #36]	; (800854c <HAL_RCC_ClockConfig+0x1c8>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4618      	mov	r0, r3
 800852c:	f7fd fbca 	bl	8005cc4 <HAL_InitTick>

  return HAL_OK;
 8008530:	2300      	movs	r3, #0
}
 8008532:	4618      	mov	r0, r3
 8008534:	3710      	adds	r7, #16
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}
 800853a:	bf00      	nop
 800853c:	40023c00 	.word	0x40023c00
 8008540:	40023800 	.word	0x40023800
 8008544:	0800fcbc 	.word	0x0800fcbc
 8008548:	20000068 	.word	0x20000068
 800854c:	2000006c 	.word	0x2000006c

08008550 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008550:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008554:	b084      	sub	sp, #16
 8008556:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008558:	2300      	movs	r3, #0
 800855a:	607b      	str	r3, [r7, #4]
 800855c:	2300      	movs	r3, #0
 800855e:	60fb      	str	r3, [r7, #12]
 8008560:	2300      	movs	r3, #0
 8008562:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8008564:	2300      	movs	r3, #0
 8008566:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008568:	4b67      	ldr	r3, [pc, #412]	; (8008708 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800856a:	689b      	ldr	r3, [r3, #8]
 800856c:	f003 030c 	and.w	r3, r3, #12
 8008570:	2b08      	cmp	r3, #8
 8008572:	d00d      	beq.n	8008590 <HAL_RCC_GetSysClockFreq+0x40>
 8008574:	2b08      	cmp	r3, #8
 8008576:	f200 80bd 	bhi.w	80086f4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800857a:	2b00      	cmp	r3, #0
 800857c:	d002      	beq.n	8008584 <HAL_RCC_GetSysClockFreq+0x34>
 800857e:	2b04      	cmp	r3, #4
 8008580:	d003      	beq.n	800858a <HAL_RCC_GetSysClockFreq+0x3a>
 8008582:	e0b7      	b.n	80086f4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008584:	4b61      	ldr	r3, [pc, #388]	; (800870c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008586:	60bb      	str	r3, [r7, #8]
       break;
 8008588:	e0b7      	b.n	80086fa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800858a:	4b61      	ldr	r3, [pc, #388]	; (8008710 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800858c:	60bb      	str	r3, [r7, #8]
      break;
 800858e:	e0b4      	b.n	80086fa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008590:	4b5d      	ldr	r3, [pc, #372]	; (8008708 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008598:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800859a:	4b5b      	ldr	r3, [pc, #364]	; (8008708 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800859c:	685b      	ldr	r3, [r3, #4]
 800859e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d04d      	beq.n	8008642 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80085a6:	4b58      	ldr	r3, [pc, #352]	; (8008708 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	099b      	lsrs	r3, r3, #6
 80085ac:	461a      	mov	r2, r3
 80085ae:	f04f 0300 	mov.w	r3, #0
 80085b2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80085b6:	f04f 0100 	mov.w	r1, #0
 80085ba:	ea02 0800 	and.w	r8, r2, r0
 80085be:	ea03 0901 	and.w	r9, r3, r1
 80085c2:	4640      	mov	r0, r8
 80085c4:	4649      	mov	r1, r9
 80085c6:	f04f 0200 	mov.w	r2, #0
 80085ca:	f04f 0300 	mov.w	r3, #0
 80085ce:	014b      	lsls	r3, r1, #5
 80085d0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80085d4:	0142      	lsls	r2, r0, #5
 80085d6:	4610      	mov	r0, r2
 80085d8:	4619      	mov	r1, r3
 80085da:	ebb0 0008 	subs.w	r0, r0, r8
 80085de:	eb61 0109 	sbc.w	r1, r1, r9
 80085e2:	f04f 0200 	mov.w	r2, #0
 80085e6:	f04f 0300 	mov.w	r3, #0
 80085ea:	018b      	lsls	r3, r1, #6
 80085ec:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80085f0:	0182      	lsls	r2, r0, #6
 80085f2:	1a12      	subs	r2, r2, r0
 80085f4:	eb63 0301 	sbc.w	r3, r3, r1
 80085f8:	f04f 0000 	mov.w	r0, #0
 80085fc:	f04f 0100 	mov.w	r1, #0
 8008600:	00d9      	lsls	r1, r3, #3
 8008602:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008606:	00d0      	lsls	r0, r2, #3
 8008608:	4602      	mov	r2, r0
 800860a:	460b      	mov	r3, r1
 800860c:	eb12 0208 	adds.w	r2, r2, r8
 8008610:	eb43 0309 	adc.w	r3, r3, r9
 8008614:	f04f 0000 	mov.w	r0, #0
 8008618:	f04f 0100 	mov.w	r1, #0
 800861c:	0259      	lsls	r1, r3, #9
 800861e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8008622:	0250      	lsls	r0, r2, #9
 8008624:	4602      	mov	r2, r0
 8008626:	460b      	mov	r3, r1
 8008628:	4610      	mov	r0, r2
 800862a:	4619      	mov	r1, r3
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	461a      	mov	r2, r3
 8008630:	f04f 0300 	mov.w	r3, #0
 8008634:	f7f8 fb30 	bl	8000c98 <__aeabi_uldivmod>
 8008638:	4602      	mov	r2, r0
 800863a:	460b      	mov	r3, r1
 800863c:	4613      	mov	r3, r2
 800863e:	60fb      	str	r3, [r7, #12]
 8008640:	e04a      	b.n	80086d8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008642:	4b31      	ldr	r3, [pc, #196]	; (8008708 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008644:	685b      	ldr	r3, [r3, #4]
 8008646:	099b      	lsrs	r3, r3, #6
 8008648:	461a      	mov	r2, r3
 800864a:	f04f 0300 	mov.w	r3, #0
 800864e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008652:	f04f 0100 	mov.w	r1, #0
 8008656:	ea02 0400 	and.w	r4, r2, r0
 800865a:	ea03 0501 	and.w	r5, r3, r1
 800865e:	4620      	mov	r0, r4
 8008660:	4629      	mov	r1, r5
 8008662:	f04f 0200 	mov.w	r2, #0
 8008666:	f04f 0300 	mov.w	r3, #0
 800866a:	014b      	lsls	r3, r1, #5
 800866c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008670:	0142      	lsls	r2, r0, #5
 8008672:	4610      	mov	r0, r2
 8008674:	4619      	mov	r1, r3
 8008676:	1b00      	subs	r0, r0, r4
 8008678:	eb61 0105 	sbc.w	r1, r1, r5
 800867c:	f04f 0200 	mov.w	r2, #0
 8008680:	f04f 0300 	mov.w	r3, #0
 8008684:	018b      	lsls	r3, r1, #6
 8008686:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800868a:	0182      	lsls	r2, r0, #6
 800868c:	1a12      	subs	r2, r2, r0
 800868e:	eb63 0301 	sbc.w	r3, r3, r1
 8008692:	f04f 0000 	mov.w	r0, #0
 8008696:	f04f 0100 	mov.w	r1, #0
 800869a:	00d9      	lsls	r1, r3, #3
 800869c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80086a0:	00d0      	lsls	r0, r2, #3
 80086a2:	4602      	mov	r2, r0
 80086a4:	460b      	mov	r3, r1
 80086a6:	1912      	adds	r2, r2, r4
 80086a8:	eb45 0303 	adc.w	r3, r5, r3
 80086ac:	f04f 0000 	mov.w	r0, #0
 80086b0:	f04f 0100 	mov.w	r1, #0
 80086b4:	0299      	lsls	r1, r3, #10
 80086b6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80086ba:	0290      	lsls	r0, r2, #10
 80086bc:	4602      	mov	r2, r0
 80086be:	460b      	mov	r3, r1
 80086c0:	4610      	mov	r0, r2
 80086c2:	4619      	mov	r1, r3
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	461a      	mov	r2, r3
 80086c8:	f04f 0300 	mov.w	r3, #0
 80086cc:	f7f8 fae4 	bl	8000c98 <__aeabi_uldivmod>
 80086d0:	4602      	mov	r2, r0
 80086d2:	460b      	mov	r3, r1
 80086d4:	4613      	mov	r3, r2
 80086d6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80086d8:	4b0b      	ldr	r3, [pc, #44]	; (8008708 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80086da:	685b      	ldr	r3, [r3, #4]
 80086dc:	0c1b      	lsrs	r3, r3, #16
 80086de:	f003 0303 	and.w	r3, r3, #3
 80086e2:	3301      	adds	r3, #1
 80086e4:	005b      	lsls	r3, r3, #1
 80086e6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80086e8:	68fa      	ldr	r2, [r7, #12]
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80086f0:	60bb      	str	r3, [r7, #8]
      break;
 80086f2:	e002      	b.n	80086fa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80086f4:	4b05      	ldr	r3, [pc, #20]	; (800870c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80086f6:	60bb      	str	r3, [r7, #8]
      break;
 80086f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80086fa:	68bb      	ldr	r3, [r7, #8]
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	3710      	adds	r7, #16
 8008700:	46bd      	mov	sp, r7
 8008702:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008706:	bf00      	nop
 8008708:	40023800 	.word	0x40023800
 800870c:	00f42400 	.word	0x00f42400
 8008710:	007a1200 	.word	0x007a1200

08008714 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008714:	b480      	push	{r7}
 8008716:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008718:	4b03      	ldr	r3, [pc, #12]	; (8008728 <HAL_RCC_GetHCLKFreq+0x14>)
 800871a:	681b      	ldr	r3, [r3, #0]
}
 800871c:	4618      	mov	r0, r3
 800871e:	46bd      	mov	sp, r7
 8008720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008724:	4770      	bx	lr
 8008726:	bf00      	nop
 8008728:	20000068 	.word	0x20000068

0800872c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008730:	f7ff fff0 	bl	8008714 <HAL_RCC_GetHCLKFreq>
 8008734:	4602      	mov	r2, r0
 8008736:	4b05      	ldr	r3, [pc, #20]	; (800874c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008738:	689b      	ldr	r3, [r3, #8]
 800873a:	0a9b      	lsrs	r3, r3, #10
 800873c:	f003 0307 	and.w	r3, r3, #7
 8008740:	4903      	ldr	r1, [pc, #12]	; (8008750 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008742:	5ccb      	ldrb	r3, [r1, r3]
 8008744:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008748:	4618      	mov	r0, r3
 800874a:	bd80      	pop	{r7, pc}
 800874c:	40023800 	.word	0x40023800
 8008750:	0800fccc 	.word	0x0800fccc

08008754 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008758:	f7ff ffdc 	bl	8008714 <HAL_RCC_GetHCLKFreq>
 800875c:	4602      	mov	r2, r0
 800875e:	4b05      	ldr	r3, [pc, #20]	; (8008774 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008760:	689b      	ldr	r3, [r3, #8]
 8008762:	0b5b      	lsrs	r3, r3, #13
 8008764:	f003 0307 	and.w	r3, r3, #7
 8008768:	4903      	ldr	r1, [pc, #12]	; (8008778 <HAL_RCC_GetPCLK2Freq+0x24>)
 800876a:	5ccb      	ldrb	r3, [r1, r3]
 800876c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008770:	4618      	mov	r0, r3
 8008772:	bd80      	pop	{r7, pc}
 8008774:	40023800 	.word	0x40023800
 8008778:	0800fccc 	.word	0x0800fccc

0800877c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b082      	sub	sp, #8
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d101      	bne.n	800878e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800878a:	2301      	movs	r3, #1
 800878c:	e07b      	b.n	8008886 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008792:	2b00      	cmp	r3, #0
 8008794:	d108      	bne.n	80087a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	685b      	ldr	r3, [r3, #4]
 800879a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800879e:	d009      	beq.n	80087b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2200      	movs	r2, #0
 80087a4:	61da      	str	r2, [r3, #28]
 80087a6:	e005      	b.n	80087b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2200      	movs	r2, #0
 80087ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2200      	movs	r2, #0
 80087b2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2200      	movs	r2, #0
 80087b8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80087c0:	b2db      	uxtb	r3, r3
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d106      	bne.n	80087d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2200      	movs	r2, #0
 80087ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f7fc fed0 	bl	8005574 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2202      	movs	r2, #2
 80087d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	681a      	ldr	r2, [r3, #0]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80087ea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	685b      	ldr	r3, [r3, #4]
 80087f0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	689b      	ldr	r3, [r3, #8]
 80087f8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80087fc:	431a      	orrs	r2, r3
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	68db      	ldr	r3, [r3, #12]
 8008802:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008806:	431a      	orrs	r2, r3
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	691b      	ldr	r3, [r3, #16]
 800880c:	f003 0302 	and.w	r3, r3, #2
 8008810:	431a      	orrs	r2, r3
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	695b      	ldr	r3, [r3, #20]
 8008816:	f003 0301 	and.w	r3, r3, #1
 800881a:	431a      	orrs	r2, r3
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	699b      	ldr	r3, [r3, #24]
 8008820:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008824:	431a      	orrs	r2, r3
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	69db      	ldr	r3, [r3, #28]
 800882a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800882e:	431a      	orrs	r2, r3
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6a1b      	ldr	r3, [r3, #32]
 8008834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008838:	ea42 0103 	orr.w	r1, r2, r3
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008840:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	430a      	orrs	r2, r1
 800884a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	699b      	ldr	r3, [r3, #24]
 8008850:	0c1b      	lsrs	r3, r3, #16
 8008852:	f003 0104 	and.w	r1, r3, #4
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800885a:	f003 0210 	and.w	r2, r3, #16
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	430a      	orrs	r2, r1
 8008864:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	69da      	ldr	r2, [r3, #28]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008874:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2200      	movs	r2, #0
 800887a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2201      	movs	r2, #1
 8008880:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008884:	2300      	movs	r3, #0
}
 8008886:	4618      	mov	r0, r3
 8008888:	3708      	adds	r7, #8
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}

0800888e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800888e:	b580      	push	{r7, lr}
 8008890:	b08c      	sub	sp, #48	; 0x30
 8008892:	af00      	add	r7, sp, #0
 8008894:	60f8      	str	r0, [r7, #12]
 8008896:	60b9      	str	r1, [r7, #8]
 8008898:	607a      	str	r2, [r7, #4]
 800889a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800889c:	2301      	movs	r3, #1
 800889e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80088a0:	2300      	movs	r3, #0
 80088a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80088ac:	2b01      	cmp	r3, #1
 80088ae:	d101      	bne.n	80088b4 <HAL_SPI_TransmitReceive+0x26>
 80088b0:	2302      	movs	r3, #2
 80088b2:	e18a      	b.n	8008bca <HAL_SPI_TransmitReceive+0x33c>
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	2201      	movs	r2, #1
 80088b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80088bc:	f7fd fa46 	bl	8005d4c <HAL_GetTick>
 80088c0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80088c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80088d2:	887b      	ldrh	r3, [r7, #2]
 80088d4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80088d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80088da:	2b01      	cmp	r3, #1
 80088dc:	d00f      	beq.n	80088fe <HAL_SPI_TransmitReceive+0x70>
 80088de:	69fb      	ldr	r3, [r7, #28]
 80088e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80088e4:	d107      	bne.n	80088f6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	689b      	ldr	r3, [r3, #8]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d103      	bne.n	80088f6 <HAL_SPI_TransmitReceive+0x68>
 80088ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80088f2:	2b04      	cmp	r3, #4
 80088f4:	d003      	beq.n	80088fe <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80088f6:	2302      	movs	r3, #2
 80088f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80088fc:	e15b      	b.n	8008bb6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d005      	beq.n	8008910 <HAL_SPI_TransmitReceive+0x82>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d002      	beq.n	8008910 <HAL_SPI_TransmitReceive+0x82>
 800890a:	887b      	ldrh	r3, [r7, #2]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d103      	bne.n	8008918 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008910:	2301      	movs	r3, #1
 8008912:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008916:	e14e      	b.n	8008bb6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800891e:	b2db      	uxtb	r3, r3
 8008920:	2b04      	cmp	r3, #4
 8008922:	d003      	beq.n	800892c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	2205      	movs	r2, #5
 8008928:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	2200      	movs	r2, #0
 8008930:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	687a      	ldr	r2, [r7, #4]
 8008936:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	887a      	ldrh	r2, [r7, #2]
 800893c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	887a      	ldrh	r2, [r7, #2]
 8008942:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	68ba      	ldr	r2, [r7, #8]
 8008948:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	887a      	ldrh	r2, [r7, #2]
 800894e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	887a      	ldrh	r2, [r7, #2]
 8008954:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	2200      	movs	r2, #0
 800895a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	2200      	movs	r2, #0
 8008960:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800896c:	2b40      	cmp	r3, #64	; 0x40
 800896e:	d007      	beq.n	8008980 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	681a      	ldr	r2, [r3, #0]
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800897e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	68db      	ldr	r3, [r3, #12]
 8008984:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008988:	d178      	bne.n	8008a7c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	685b      	ldr	r3, [r3, #4]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d002      	beq.n	8008998 <HAL_SPI_TransmitReceive+0x10a>
 8008992:	8b7b      	ldrh	r3, [r7, #26]
 8008994:	2b01      	cmp	r3, #1
 8008996:	d166      	bne.n	8008a66 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800899c:	881a      	ldrh	r2, [r3, #0]
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089a8:	1c9a      	adds	r2, r3, #2
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80089b2:	b29b      	uxth	r3, r3
 80089b4:	3b01      	subs	r3, #1
 80089b6:	b29a      	uxth	r2, r3
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80089bc:	e053      	b.n	8008a66 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	689b      	ldr	r3, [r3, #8]
 80089c4:	f003 0302 	and.w	r3, r3, #2
 80089c8:	2b02      	cmp	r3, #2
 80089ca:	d11b      	bne.n	8008a04 <HAL_SPI_TransmitReceive+0x176>
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80089d0:	b29b      	uxth	r3, r3
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d016      	beq.n	8008a04 <HAL_SPI_TransmitReceive+0x176>
 80089d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089d8:	2b01      	cmp	r3, #1
 80089da:	d113      	bne.n	8008a04 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089e0:	881a      	ldrh	r2, [r3, #0]
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ec:	1c9a      	adds	r2, r3, #2
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80089f6:	b29b      	uxth	r3, r3
 80089f8:	3b01      	subs	r3, #1
 80089fa:	b29a      	uxth	r2, r3
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008a00:	2300      	movs	r3, #0
 8008a02:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	689b      	ldr	r3, [r3, #8]
 8008a0a:	f003 0301 	and.w	r3, r3, #1
 8008a0e:	2b01      	cmp	r3, #1
 8008a10:	d119      	bne.n	8008a46 <HAL_SPI_TransmitReceive+0x1b8>
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a16:	b29b      	uxth	r3, r3
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d014      	beq.n	8008a46 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	68da      	ldr	r2, [r3, #12]
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a26:	b292      	uxth	r2, r2
 8008a28:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a2e:	1c9a      	adds	r2, r3, #2
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a38:	b29b      	uxth	r3, r3
 8008a3a:	3b01      	subs	r3, #1
 8008a3c:	b29a      	uxth	r2, r3
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008a42:	2301      	movs	r3, #1
 8008a44:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008a46:	f7fd f981 	bl	8005d4c <HAL_GetTick>
 8008a4a:	4602      	mov	r2, r0
 8008a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a4e:	1ad3      	subs	r3, r2, r3
 8008a50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a52:	429a      	cmp	r2, r3
 8008a54:	d807      	bhi.n	8008a66 <HAL_SPI_TransmitReceive+0x1d8>
 8008a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a5c:	d003      	beq.n	8008a66 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008a5e:	2303      	movs	r3, #3
 8008a60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008a64:	e0a7      	b.n	8008bb6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008a6a:	b29b      	uxth	r3, r3
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d1a6      	bne.n	80089be <HAL_SPI_TransmitReceive+0x130>
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008a74:	b29b      	uxth	r3, r3
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d1a1      	bne.n	80089be <HAL_SPI_TransmitReceive+0x130>
 8008a7a:	e07c      	b.n	8008b76 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	685b      	ldr	r3, [r3, #4]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d002      	beq.n	8008a8a <HAL_SPI_TransmitReceive+0x1fc>
 8008a84:	8b7b      	ldrh	r3, [r7, #26]
 8008a86:	2b01      	cmp	r3, #1
 8008a88:	d16b      	bne.n	8008b62 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	330c      	adds	r3, #12
 8008a94:	7812      	ldrb	r2, [r2, #0]
 8008a96:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a9c:	1c5a      	adds	r2, r3, #1
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008aa6:	b29b      	uxth	r3, r3
 8008aa8:	3b01      	subs	r3, #1
 8008aaa:	b29a      	uxth	r2, r3
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008ab0:	e057      	b.n	8008b62 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	689b      	ldr	r3, [r3, #8]
 8008ab8:	f003 0302 	and.w	r3, r3, #2
 8008abc:	2b02      	cmp	r3, #2
 8008abe:	d11c      	bne.n	8008afa <HAL_SPI_TransmitReceive+0x26c>
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ac4:	b29b      	uxth	r3, r3
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d017      	beq.n	8008afa <HAL_SPI_TransmitReceive+0x26c>
 8008aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008acc:	2b01      	cmp	r3, #1
 8008ace:	d114      	bne.n	8008afa <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	330c      	adds	r3, #12
 8008ada:	7812      	ldrb	r2, [r2, #0]
 8008adc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ae2:	1c5a      	adds	r2, r3, #1
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008aec:	b29b      	uxth	r3, r3
 8008aee:	3b01      	subs	r3, #1
 8008af0:	b29a      	uxth	r2, r3
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008af6:	2300      	movs	r3, #0
 8008af8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	689b      	ldr	r3, [r3, #8]
 8008b00:	f003 0301 	and.w	r3, r3, #1
 8008b04:	2b01      	cmp	r3, #1
 8008b06:	d119      	bne.n	8008b3c <HAL_SPI_TransmitReceive+0x2ae>
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b0c:	b29b      	uxth	r3, r3
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d014      	beq.n	8008b3c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	68da      	ldr	r2, [r3, #12]
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b1c:	b2d2      	uxtb	r2, r2
 8008b1e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b24:	1c5a      	adds	r2, r3, #1
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b2e:	b29b      	uxth	r3, r3
 8008b30:	3b01      	subs	r3, #1
 8008b32:	b29a      	uxth	r2, r3
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008b38:	2301      	movs	r3, #1
 8008b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008b3c:	f7fd f906 	bl	8005d4c <HAL_GetTick>
 8008b40:	4602      	mov	r2, r0
 8008b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b44:	1ad3      	subs	r3, r2, r3
 8008b46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b48:	429a      	cmp	r2, r3
 8008b4a:	d803      	bhi.n	8008b54 <HAL_SPI_TransmitReceive+0x2c6>
 8008b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b52:	d102      	bne.n	8008b5a <HAL_SPI_TransmitReceive+0x2cc>
 8008b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d103      	bne.n	8008b62 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008b5a:	2303      	movs	r3, #3
 8008b5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008b60:	e029      	b.n	8008bb6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b66:	b29b      	uxth	r3, r3
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d1a2      	bne.n	8008ab2 <HAL_SPI_TransmitReceive+0x224>
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b70:	b29b      	uxth	r3, r3
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d19d      	bne.n	8008ab2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008b76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b78:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008b7a:	68f8      	ldr	r0, [r7, #12]
 8008b7c:	f000 f8b2 	bl	8008ce4 <SPI_EndRxTxTransaction>
 8008b80:	4603      	mov	r3, r0
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d006      	beq.n	8008b94 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008b86:	2301      	movs	r3, #1
 8008b88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	2220      	movs	r2, #32
 8008b90:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008b92:	e010      	b.n	8008bb6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	689b      	ldr	r3, [r3, #8]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d10b      	bne.n	8008bb4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	617b      	str	r3, [r7, #20]
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	68db      	ldr	r3, [r3, #12]
 8008ba6:	617b      	str	r3, [r7, #20]
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	689b      	ldr	r3, [r3, #8]
 8008bae:	617b      	str	r3, [r7, #20]
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	e000      	b.n	8008bb6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008bb4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	2201      	movs	r2, #1
 8008bba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008bc6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3730      	adds	r7, #48	; 0x30
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}
	...

08008bd4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b088      	sub	sp, #32
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	60f8      	str	r0, [r7, #12]
 8008bdc:	60b9      	str	r1, [r7, #8]
 8008bde:	603b      	str	r3, [r7, #0]
 8008be0:	4613      	mov	r3, r2
 8008be2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008be4:	f7fd f8b2 	bl	8005d4c <HAL_GetTick>
 8008be8:	4602      	mov	r2, r0
 8008bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bec:	1a9b      	subs	r3, r3, r2
 8008bee:	683a      	ldr	r2, [r7, #0]
 8008bf0:	4413      	add	r3, r2
 8008bf2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008bf4:	f7fd f8aa 	bl	8005d4c <HAL_GetTick>
 8008bf8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008bfa:	4b39      	ldr	r3, [pc, #228]	; (8008ce0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	015b      	lsls	r3, r3, #5
 8008c00:	0d1b      	lsrs	r3, r3, #20
 8008c02:	69fa      	ldr	r2, [r7, #28]
 8008c04:	fb02 f303 	mul.w	r3, r2, r3
 8008c08:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008c0a:	e054      	b.n	8008cb6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c12:	d050      	beq.n	8008cb6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008c14:	f7fd f89a 	bl	8005d4c <HAL_GetTick>
 8008c18:	4602      	mov	r2, r0
 8008c1a:	69bb      	ldr	r3, [r7, #24]
 8008c1c:	1ad3      	subs	r3, r2, r3
 8008c1e:	69fa      	ldr	r2, [r7, #28]
 8008c20:	429a      	cmp	r2, r3
 8008c22:	d902      	bls.n	8008c2a <SPI_WaitFlagStateUntilTimeout+0x56>
 8008c24:	69fb      	ldr	r3, [r7, #28]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d13d      	bne.n	8008ca6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	685a      	ldr	r2, [r3, #4]
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008c38:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008c42:	d111      	bne.n	8008c68 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	689b      	ldr	r3, [r3, #8]
 8008c48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c4c:	d004      	beq.n	8008c58 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	689b      	ldr	r3, [r3, #8]
 8008c52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c56:	d107      	bne.n	8008c68 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	681a      	ldr	r2, [r3, #0]
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c66:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c70:	d10f      	bne.n	8008c92 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	681a      	ldr	r2, [r3, #0]
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008c80:	601a      	str	r2, [r3, #0]
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	681a      	ldr	r2, [r3, #0]
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008c90:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	2201      	movs	r2, #1
 8008c96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008ca2:	2303      	movs	r3, #3
 8008ca4:	e017      	b.n	8008cd6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8008ca6:	697b      	ldr	r3, [r7, #20]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d101      	bne.n	8008cb0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008cac:	2300      	movs	r3, #0
 8008cae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	3b01      	subs	r3, #1
 8008cb4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	689a      	ldr	r2, [r3, #8]
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	4013      	ands	r3, r2
 8008cc0:	68ba      	ldr	r2, [r7, #8]
 8008cc2:	429a      	cmp	r2, r3
 8008cc4:	bf0c      	ite	eq
 8008cc6:	2301      	moveq	r3, #1
 8008cc8:	2300      	movne	r3, #0
 8008cca:	b2db      	uxtb	r3, r3
 8008ccc:	461a      	mov	r2, r3
 8008cce:	79fb      	ldrb	r3, [r7, #7]
 8008cd0:	429a      	cmp	r2, r3
 8008cd2:	d19b      	bne.n	8008c0c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008cd4:	2300      	movs	r3, #0
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	3720      	adds	r7, #32
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}
 8008cde:	bf00      	nop
 8008ce0:	20000068 	.word	0x20000068

08008ce4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b088      	sub	sp, #32
 8008ce8:	af02      	add	r7, sp, #8
 8008cea:	60f8      	str	r0, [r7, #12]
 8008cec:	60b9      	str	r1, [r7, #8]
 8008cee:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008cf0:	4b1b      	ldr	r3, [pc, #108]	; (8008d60 <SPI_EndRxTxTransaction+0x7c>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	4a1b      	ldr	r2, [pc, #108]	; (8008d64 <SPI_EndRxTxTransaction+0x80>)
 8008cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8008cfa:	0d5b      	lsrs	r3, r3, #21
 8008cfc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008d00:	fb02 f303 	mul.w	r3, r2, r3
 8008d04:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	685b      	ldr	r3, [r3, #4]
 8008d0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008d0e:	d112      	bne.n	8008d36 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	9300      	str	r3, [sp, #0]
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	2200      	movs	r2, #0
 8008d18:	2180      	movs	r1, #128	; 0x80
 8008d1a:	68f8      	ldr	r0, [r7, #12]
 8008d1c:	f7ff ff5a 	bl	8008bd4 <SPI_WaitFlagStateUntilTimeout>
 8008d20:	4603      	mov	r3, r0
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d016      	beq.n	8008d54 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d2a:	f043 0220 	orr.w	r2, r3, #32
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008d32:	2303      	movs	r3, #3
 8008d34:	e00f      	b.n	8008d56 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008d36:	697b      	ldr	r3, [r7, #20]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d00a      	beq.n	8008d52 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	3b01      	subs	r3, #1
 8008d40:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	689b      	ldr	r3, [r3, #8]
 8008d48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d4c:	2b80      	cmp	r3, #128	; 0x80
 8008d4e:	d0f2      	beq.n	8008d36 <SPI_EndRxTxTransaction+0x52>
 8008d50:	e000      	b.n	8008d54 <SPI_EndRxTxTransaction+0x70>
        break;
 8008d52:	bf00      	nop
  }

  return HAL_OK;
 8008d54:	2300      	movs	r3, #0
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3718      	adds	r7, #24
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}
 8008d5e:	bf00      	nop
 8008d60:	20000068 	.word	0x20000068
 8008d64:	165e9f81 	.word	0x165e9f81

08008d68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b082      	sub	sp, #8
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d101      	bne.n	8008d7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008d76:	2301      	movs	r3, #1
 8008d78:	e041      	b.n	8008dfe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d80:	b2db      	uxtb	r3, r3
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d106      	bne.n	8008d94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f7fc fd04 	bl	800579c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2202      	movs	r2, #2
 8008d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681a      	ldr	r2, [r3, #0]
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	3304      	adds	r3, #4
 8008da4:	4619      	mov	r1, r3
 8008da6:	4610      	mov	r0, r2
 8008da8:	f000 fdcc 	bl	8009944 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2201      	movs	r2, #1
 8008db0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2201      	movs	r2, #1
 8008db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2201      	movs	r2, #1
 8008dc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2201      	movs	r2, #1
 8008dc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2201      	movs	r2, #1
 8008dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2201      	movs	r2, #1
 8008dd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2201      	movs	r2, #1
 8008de0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2201      	movs	r2, #1
 8008de8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2201      	movs	r2, #1
 8008df0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2201      	movs	r2, #1
 8008df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008dfc:	2300      	movs	r3, #0
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	3708      	adds	r7, #8
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}
	...

08008e08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b085      	sub	sp, #20
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e16:	b2db      	uxtb	r3, r3
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	d001      	beq.n	8008e20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	e044      	b.n	8008eaa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2202      	movs	r2, #2
 8008e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	68da      	ldr	r2, [r3, #12]
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f042 0201 	orr.w	r2, r2, #1
 8008e36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	4a1e      	ldr	r2, [pc, #120]	; (8008eb8 <HAL_TIM_Base_Start_IT+0xb0>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d018      	beq.n	8008e74 <HAL_TIM_Base_Start_IT+0x6c>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e4a:	d013      	beq.n	8008e74 <HAL_TIM_Base_Start_IT+0x6c>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	4a1a      	ldr	r2, [pc, #104]	; (8008ebc <HAL_TIM_Base_Start_IT+0xb4>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d00e      	beq.n	8008e74 <HAL_TIM_Base_Start_IT+0x6c>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	4a19      	ldr	r2, [pc, #100]	; (8008ec0 <HAL_TIM_Base_Start_IT+0xb8>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d009      	beq.n	8008e74 <HAL_TIM_Base_Start_IT+0x6c>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4a17      	ldr	r2, [pc, #92]	; (8008ec4 <HAL_TIM_Base_Start_IT+0xbc>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d004      	beq.n	8008e74 <HAL_TIM_Base_Start_IT+0x6c>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	4a16      	ldr	r2, [pc, #88]	; (8008ec8 <HAL_TIM_Base_Start_IT+0xc0>)
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d111      	bne.n	8008e98 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	689b      	ldr	r3, [r3, #8]
 8008e7a:	f003 0307 	and.w	r3, r3, #7
 8008e7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	2b06      	cmp	r3, #6
 8008e84:	d010      	beq.n	8008ea8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	681a      	ldr	r2, [r3, #0]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f042 0201 	orr.w	r2, r2, #1
 8008e94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e96:	e007      	b.n	8008ea8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	681a      	ldr	r2, [r3, #0]
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f042 0201 	orr.w	r2, r2, #1
 8008ea6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008ea8:	2300      	movs	r3, #0
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3714      	adds	r7, #20
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb4:	4770      	bx	lr
 8008eb6:	bf00      	nop
 8008eb8:	40010000 	.word	0x40010000
 8008ebc:	40000400 	.word	0x40000400
 8008ec0:	40000800 	.word	0x40000800
 8008ec4:	40000c00 	.word	0x40000c00
 8008ec8:	40014000 	.word	0x40014000

08008ecc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b083      	sub	sp, #12
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	68da      	ldr	r2, [r3, #12]
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f022 0201 	bic.w	r2, r2, #1
 8008ee2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	6a1a      	ldr	r2, [r3, #32]
 8008eea:	f241 1311 	movw	r3, #4369	; 0x1111
 8008eee:	4013      	ands	r3, r2
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d10f      	bne.n	8008f14 <HAL_TIM_Base_Stop_IT+0x48>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	6a1a      	ldr	r2, [r3, #32]
 8008efa:	f240 4344 	movw	r3, #1092	; 0x444
 8008efe:	4013      	ands	r3, r2
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d107      	bne.n	8008f14 <HAL_TIM_Base_Stop_IT+0x48>
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	681a      	ldr	r2, [r3, #0]
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f022 0201 	bic.w	r2, r2, #1
 8008f12:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2201      	movs	r2, #1
 8008f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008f1c:	2300      	movs	r3, #0
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	370c      	adds	r7, #12
 8008f22:	46bd      	mov	sp, r7
 8008f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f28:	4770      	bx	lr

08008f2a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008f2a:	b580      	push	{r7, lr}
 8008f2c:	b082      	sub	sp, #8
 8008f2e:	af00      	add	r7, sp, #0
 8008f30:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d101      	bne.n	8008f3c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008f38:	2301      	movs	r3, #1
 8008f3a:	e041      	b.n	8008fc0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f42:	b2db      	uxtb	r3, r3
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d106      	bne.n	8008f56 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f7fc fc01 	bl	8005758 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2202      	movs	r2, #2
 8008f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681a      	ldr	r2, [r3, #0]
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	3304      	adds	r3, #4
 8008f66:	4619      	mov	r1, r3
 8008f68:	4610      	mov	r0, r2
 8008f6a:	f000 fceb 	bl	8009944 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2201      	movs	r2, #1
 8008f72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2201      	movs	r2, #1
 8008f7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2201      	movs	r2, #1
 8008f82:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2201      	movs	r2, #1
 8008f8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2201      	movs	r2, #1
 8008f92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2201      	movs	r2, #1
 8008f9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2201      	movs	r2, #1
 8008fa2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2201      	movs	r2, #1
 8008faa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2201      	movs	r2, #1
 8008fb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2201      	movs	r2, #1
 8008fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008fbe:	2300      	movs	r3, #0
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	3708      	adds	r7, #8
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}

08008fc8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b084      	sub	sp, #16
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
 8008fd0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d109      	bne.n	8008fec <HAL_TIM_PWM_Start+0x24>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008fde:	b2db      	uxtb	r3, r3
 8008fe0:	2b01      	cmp	r3, #1
 8008fe2:	bf14      	ite	ne
 8008fe4:	2301      	movne	r3, #1
 8008fe6:	2300      	moveq	r3, #0
 8008fe8:	b2db      	uxtb	r3, r3
 8008fea:	e022      	b.n	8009032 <HAL_TIM_PWM_Start+0x6a>
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	2b04      	cmp	r3, #4
 8008ff0:	d109      	bne.n	8009006 <HAL_TIM_PWM_Start+0x3e>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008ff8:	b2db      	uxtb	r3, r3
 8008ffa:	2b01      	cmp	r3, #1
 8008ffc:	bf14      	ite	ne
 8008ffe:	2301      	movne	r3, #1
 8009000:	2300      	moveq	r3, #0
 8009002:	b2db      	uxtb	r3, r3
 8009004:	e015      	b.n	8009032 <HAL_TIM_PWM_Start+0x6a>
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	2b08      	cmp	r3, #8
 800900a:	d109      	bne.n	8009020 <HAL_TIM_PWM_Start+0x58>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009012:	b2db      	uxtb	r3, r3
 8009014:	2b01      	cmp	r3, #1
 8009016:	bf14      	ite	ne
 8009018:	2301      	movne	r3, #1
 800901a:	2300      	moveq	r3, #0
 800901c:	b2db      	uxtb	r3, r3
 800901e:	e008      	b.n	8009032 <HAL_TIM_PWM_Start+0x6a>
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009026:	b2db      	uxtb	r3, r3
 8009028:	2b01      	cmp	r3, #1
 800902a:	bf14      	ite	ne
 800902c:	2301      	movne	r3, #1
 800902e:	2300      	moveq	r3, #0
 8009030:	b2db      	uxtb	r3, r3
 8009032:	2b00      	cmp	r3, #0
 8009034:	d001      	beq.n	800903a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009036:	2301      	movs	r3, #1
 8009038:	e068      	b.n	800910c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d104      	bne.n	800904a <HAL_TIM_PWM_Start+0x82>
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2202      	movs	r2, #2
 8009044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009048:	e013      	b.n	8009072 <HAL_TIM_PWM_Start+0xaa>
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	2b04      	cmp	r3, #4
 800904e:	d104      	bne.n	800905a <HAL_TIM_PWM_Start+0x92>
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2202      	movs	r2, #2
 8009054:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009058:	e00b      	b.n	8009072 <HAL_TIM_PWM_Start+0xaa>
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	2b08      	cmp	r3, #8
 800905e:	d104      	bne.n	800906a <HAL_TIM_PWM_Start+0xa2>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2202      	movs	r2, #2
 8009064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009068:	e003      	b.n	8009072 <HAL_TIM_PWM_Start+0xaa>
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2202      	movs	r2, #2
 800906e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	2201      	movs	r2, #1
 8009078:	6839      	ldr	r1, [r7, #0]
 800907a:	4618      	mov	r0, r3
 800907c:	f000 ff08 	bl	8009e90 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	4a23      	ldr	r2, [pc, #140]	; (8009114 <HAL_TIM_PWM_Start+0x14c>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d107      	bne.n	800909a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009098:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	4a1d      	ldr	r2, [pc, #116]	; (8009114 <HAL_TIM_PWM_Start+0x14c>)
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d018      	beq.n	80090d6 <HAL_TIM_PWM_Start+0x10e>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090ac:	d013      	beq.n	80090d6 <HAL_TIM_PWM_Start+0x10e>
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	4a19      	ldr	r2, [pc, #100]	; (8009118 <HAL_TIM_PWM_Start+0x150>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d00e      	beq.n	80090d6 <HAL_TIM_PWM_Start+0x10e>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	4a17      	ldr	r2, [pc, #92]	; (800911c <HAL_TIM_PWM_Start+0x154>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d009      	beq.n	80090d6 <HAL_TIM_PWM_Start+0x10e>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	4a16      	ldr	r2, [pc, #88]	; (8009120 <HAL_TIM_PWM_Start+0x158>)
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d004      	beq.n	80090d6 <HAL_TIM_PWM_Start+0x10e>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	4a14      	ldr	r2, [pc, #80]	; (8009124 <HAL_TIM_PWM_Start+0x15c>)
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d111      	bne.n	80090fa <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	689b      	ldr	r3, [r3, #8]
 80090dc:	f003 0307 	and.w	r3, r3, #7
 80090e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	2b06      	cmp	r3, #6
 80090e6:	d010      	beq.n	800910a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	681a      	ldr	r2, [r3, #0]
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f042 0201 	orr.w	r2, r2, #1
 80090f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090f8:	e007      	b.n	800910a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	681a      	ldr	r2, [r3, #0]
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f042 0201 	orr.w	r2, r2, #1
 8009108:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800910a:	2300      	movs	r3, #0
}
 800910c:	4618      	mov	r0, r3
 800910e:	3710      	adds	r7, #16
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}
 8009114:	40010000 	.word	0x40010000
 8009118:	40000400 	.word	0x40000400
 800911c:	40000800 	.word	0x40000800
 8009120:	40000c00 	.word	0x40000c00
 8009124:	40014000 	.word	0x40014000

08009128 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b086      	sub	sp, #24
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
 8009130:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d101      	bne.n	800913c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009138:	2301      	movs	r3, #1
 800913a:	e097      	b.n	800926c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009142:	b2db      	uxtb	r3, r3
 8009144:	2b00      	cmp	r3, #0
 8009146:	d106      	bne.n	8009156 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2200      	movs	r2, #0
 800914c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f7fc fa57 	bl	8005604 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2202      	movs	r2, #2
 800915a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	689b      	ldr	r3, [r3, #8]
 8009164:	687a      	ldr	r2, [r7, #4]
 8009166:	6812      	ldr	r2, [r2, #0]
 8009168:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800916c:	f023 0307 	bic.w	r3, r3, #7
 8009170:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681a      	ldr	r2, [r3, #0]
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	3304      	adds	r3, #4
 800917a:	4619      	mov	r1, r3
 800917c:	4610      	mov	r0, r2
 800917e:	f000 fbe1 	bl	8009944 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	689b      	ldr	r3, [r3, #8]
 8009188:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	699b      	ldr	r3, [r3, #24]
 8009190:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	6a1b      	ldr	r3, [r3, #32]
 8009198:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	697a      	ldr	r2, [r7, #20]
 80091a0:	4313      	orrs	r3, r2
 80091a2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80091a4:	693b      	ldr	r3, [r7, #16]
 80091a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091aa:	f023 0303 	bic.w	r3, r3, #3
 80091ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	689a      	ldr	r2, [r3, #8]
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	699b      	ldr	r3, [r3, #24]
 80091b8:	021b      	lsls	r3, r3, #8
 80091ba:	4313      	orrs	r3, r2
 80091bc:	693a      	ldr	r2, [r7, #16]
 80091be:	4313      	orrs	r3, r2
 80091c0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80091c8:	f023 030c 	bic.w	r3, r3, #12
 80091cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80091ce:	693b      	ldr	r3, [r7, #16]
 80091d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80091d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80091d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	68da      	ldr	r2, [r3, #12]
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	69db      	ldr	r3, [r3, #28]
 80091e2:	021b      	lsls	r3, r3, #8
 80091e4:	4313      	orrs	r3, r2
 80091e6:	693a      	ldr	r2, [r7, #16]
 80091e8:	4313      	orrs	r3, r2
 80091ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	691b      	ldr	r3, [r3, #16]
 80091f0:	011a      	lsls	r2, r3, #4
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	6a1b      	ldr	r3, [r3, #32]
 80091f6:	031b      	lsls	r3, r3, #12
 80091f8:	4313      	orrs	r3, r2
 80091fa:	693a      	ldr	r2, [r7, #16]
 80091fc:	4313      	orrs	r3, r2
 80091fe:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009206:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800920e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	685a      	ldr	r2, [r3, #4]
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	695b      	ldr	r3, [r3, #20]
 8009218:	011b      	lsls	r3, r3, #4
 800921a:	4313      	orrs	r3, r2
 800921c:	68fa      	ldr	r2, [r7, #12]
 800921e:	4313      	orrs	r3, r2
 8009220:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	697a      	ldr	r2, [r7, #20]
 8009228:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	693a      	ldr	r2, [r7, #16]
 8009230:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	68fa      	ldr	r2, [r7, #12]
 8009238:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2201      	movs	r2, #1
 800923e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2201      	movs	r2, #1
 8009246:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2201      	movs	r2, #1
 800924e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2201      	movs	r2, #1
 8009256:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2201      	movs	r2, #1
 800925e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2201      	movs	r2, #1
 8009266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800926a:	2300      	movs	r3, #0
}
 800926c:	4618      	mov	r0, r3
 800926e:	3718      	adds	r7, #24
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}

08009274 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b084      	sub	sp, #16
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
 800927c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009284:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800928c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009294:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800929c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d110      	bne.n	80092c6 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80092a4:	7bfb      	ldrb	r3, [r7, #15]
 80092a6:	2b01      	cmp	r3, #1
 80092a8:	d102      	bne.n	80092b0 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80092aa:	7b7b      	ldrb	r3, [r7, #13]
 80092ac:	2b01      	cmp	r3, #1
 80092ae:	d001      	beq.n	80092b4 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80092b0:	2301      	movs	r3, #1
 80092b2:	e089      	b.n	80093c8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2202      	movs	r2, #2
 80092b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2202      	movs	r2, #2
 80092c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80092c4:	e031      	b.n	800932a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	2b04      	cmp	r3, #4
 80092ca:	d110      	bne.n	80092ee <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80092cc:	7bbb      	ldrb	r3, [r7, #14]
 80092ce:	2b01      	cmp	r3, #1
 80092d0:	d102      	bne.n	80092d8 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80092d2:	7b3b      	ldrb	r3, [r7, #12]
 80092d4:	2b01      	cmp	r3, #1
 80092d6:	d001      	beq.n	80092dc <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80092d8:	2301      	movs	r3, #1
 80092da:	e075      	b.n	80093c8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2202      	movs	r2, #2
 80092e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2202      	movs	r2, #2
 80092e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80092ec:	e01d      	b.n	800932a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80092ee:	7bfb      	ldrb	r3, [r7, #15]
 80092f0:	2b01      	cmp	r3, #1
 80092f2:	d108      	bne.n	8009306 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80092f4:	7bbb      	ldrb	r3, [r7, #14]
 80092f6:	2b01      	cmp	r3, #1
 80092f8:	d105      	bne.n	8009306 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80092fa:	7b7b      	ldrb	r3, [r7, #13]
 80092fc:	2b01      	cmp	r3, #1
 80092fe:	d102      	bne.n	8009306 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009300:	7b3b      	ldrb	r3, [r7, #12]
 8009302:	2b01      	cmp	r3, #1
 8009304:	d001      	beq.n	800930a <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8009306:	2301      	movs	r3, #1
 8009308:	e05e      	b.n	80093c8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2202      	movs	r2, #2
 800930e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2202      	movs	r2, #2
 8009316:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2202      	movs	r2, #2
 800931e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2202      	movs	r2, #2
 8009326:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d003      	beq.n	8009338 <HAL_TIM_Encoder_Start_IT+0xc4>
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	2b04      	cmp	r3, #4
 8009334:	d010      	beq.n	8009358 <HAL_TIM_Encoder_Start_IT+0xe4>
 8009336:	e01f      	b.n	8009378 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	2201      	movs	r2, #1
 800933e:	2100      	movs	r1, #0
 8009340:	4618      	mov	r0, r3
 8009342:	f000 fda5 	bl	8009e90 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	68da      	ldr	r2, [r3, #12]
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f042 0202 	orr.w	r2, r2, #2
 8009354:	60da      	str	r2, [r3, #12]
      break;
 8009356:	e02e      	b.n	80093b6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	2201      	movs	r2, #1
 800935e:	2104      	movs	r1, #4
 8009360:	4618      	mov	r0, r3
 8009362:	f000 fd95 	bl	8009e90 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	68da      	ldr	r2, [r3, #12]
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f042 0204 	orr.w	r2, r2, #4
 8009374:	60da      	str	r2, [r3, #12]
      break;
 8009376:	e01e      	b.n	80093b6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	2201      	movs	r2, #1
 800937e:	2100      	movs	r1, #0
 8009380:	4618      	mov	r0, r3
 8009382:	f000 fd85 	bl	8009e90 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	2201      	movs	r2, #1
 800938c:	2104      	movs	r1, #4
 800938e:	4618      	mov	r0, r3
 8009390:	f000 fd7e 	bl	8009e90 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	68da      	ldr	r2, [r3, #12]
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f042 0202 	orr.w	r2, r2, #2
 80093a2:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	68da      	ldr	r2, [r3, #12]
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f042 0204 	orr.w	r2, r2, #4
 80093b2:	60da      	str	r2, [r3, #12]
      break;
 80093b4:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	681a      	ldr	r2, [r3, #0]
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	f042 0201 	orr.w	r2, r2, #1
 80093c4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80093c6:	2300      	movs	r3, #0
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	3710      	adds	r7, #16
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}

080093d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b082      	sub	sp, #8
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	691b      	ldr	r3, [r3, #16]
 80093de:	f003 0302 	and.w	r3, r3, #2
 80093e2:	2b02      	cmp	r3, #2
 80093e4:	d122      	bne.n	800942c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	68db      	ldr	r3, [r3, #12]
 80093ec:	f003 0302 	and.w	r3, r3, #2
 80093f0:	2b02      	cmp	r3, #2
 80093f2:	d11b      	bne.n	800942c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f06f 0202 	mvn.w	r2, #2
 80093fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2201      	movs	r2, #1
 8009402:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	699b      	ldr	r3, [r3, #24]
 800940a:	f003 0303 	and.w	r3, r3, #3
 800940e:	2b00      	cmp	r3, #0
 8009410:	d003      	beq.n	800941a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f000 fa77 	bl	8009906 <HAL_TIM_IC_CaptureCallback>
 8009418:	e005      	b.n	8009426 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f000 fa69 	bl	80098f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f000 fa7a 	bl	800991a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2200      	movs	r2, #0
 800942a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	691b      	ldr	r3, [r3, #16]
 8009432:	f003 0304 	and.w	r3, r3, #4
 8009436:	2b04      	cmp	r3, #4
 8009438:	d122      	bne.n	8009480 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	68db      	ldr	r3, [r3, #12]
 8009440:	f003 0304 	and.w	r3, r3, #4
 8009444:	2b04      	cmp	r3, #4
 8009446:	d11b      	bne.n	8009480 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f06f 0204 	mvn.w	r2, #4
 8009450:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2202      	movs	r2, #2
 8009456:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	699b      	ldr	r3, [r3, #24]
 800945e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009462:	2b00      	cmp	r3, #0
 8009464:	d003      	beq.n	800946e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f000 fa4d 	bl	8009906 <HAL_TIM_IC_CaptureCallback>
 800946c:	e005      	b.n	800947a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f000 fa3f 	bl	80098f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f000 fa50 	bl	800991a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2200      	movs	r2, #0
 800947e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	691b      	ldr	r3, [r3, #16]
 8009486:	f003 0308 	and.w	r3, r3, #8
 800948a:	2b08      	cmp	r3, #8
 800948c:	d122      	bne.n	80094d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	68db      	ldr	r3, [r3, #12]
 8009494:	f003 0308 	and.w	r3, r3, #8
 8009498:	2b08      	cmp	r3, #8
 800949a:	d11b      	bne.n	80094d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	f06f 0208 	mvn.w	r2, #8
 80094a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2204      	movs	r2, #4
 80094aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	69db      	ldr	r3, [r3, #28]
 80094b2:	f003 0303 	and.w	r3, r3, #3
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d003      	beq.n	80094c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f000 fa23 	bl	8009906 <HAL_TIM_IC_CaptureCallback>
 80094c0:	e005      	b.n	80094ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f000 fa15 	bl	80098f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f000 fa26 	bl	800991a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2200      	movs	r2, #0
 80094d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	691b      	ldr	r3, [r3, #16]
 80094da:	f003 0310 	and.w	r3, r3, #16
 80094de:	2b10      	cmp	r3, #16
 80094e0:	d122      	bne.n	8009528 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	68db      	ldr	r3, [r3, #12]
 80094e8:	f003 0310 	and.w	r3, r3, #16
 80094ec:	2b10      	cmp	r3, #16
 80094ee:	d11b      	bne.n	8009528 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f06f 0210 	mvn.w	r2, #16
 80094f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2208      	movs	r2, #8
 80094fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	69db      	ldr	r3, [r3, #28]
 8009506:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800950a:	2b00      	cmp	r3, #0
 800950c:	d003      	beq.n	8009516 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f000 f9f9 	bl	8009906 <HAL_TIM_IC_CaptureCallback>
 8009514:	e005      	b.n	8009522 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f000 f9eb 	bl	80098f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f000 f9fc 	bl	800991a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2200      	movs	r2, #0
 8009526:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	691b      	ldr	r3, [r3, #16]
 800952e:	f003 0301 	and.w	r3, r3, #1
 8009532:	2b01      	cmp	r3, #1
 8009534:	d10e      	bne.n	8009554 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	68db      	ldr	r3, [r3, #12]
 800953c:	f003 0301 	and.w	r3, r3, #1
 8009540:	2b01      	cmp	r3, #1
 8009542:	d107      	bne.n	8009554 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f06f 0201 	mvn.w	r2, #1
 800954c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f7fb fc1e 	bl	8004d90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	691b      	ldr	r3, [r3, #16]
 800955a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800955e:	2b80      	cmp	r3, #128	; 0x80
 8009560:	d10e      	bne.n	8009580 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	68db      	ldr	r3, [r3, #12]
 8009568:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800956c:	2b80      	cmp	r3, #128	; 0x80
 800956e:	d107      	bne.n	8009580 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009578:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f000 fd26 	bl	8009fcc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	691b      	ldr	r3, [r3, #16]
 8009586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800958a:	2b40      	cmp	r3, #64	; 0x40
 800958c:	d10e      	bne.n	80095ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	68db      	ldr	r3, [r3, #12]
 8009594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009598:	2b40      	cmp	r3, #64	; 0x40
 800959a:	d107      	bne.n	80095ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80095a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f000 f9c1 	bl	800992e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	691b      	ldr	r3, [r3, #16]
 80095b2:	f003 0320 	and.w	r3, r3, #32
 80095b6:	2b20      	cmp	r3, #32
 80095b8:	d10e      	bne.n	80095d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	68db      	ldr	r3, [r3, #12]
 80095c0:	f003 0320 	and.w	r3, r3, #32
 80095c4:	2b20      	cmp	r3, #32
 80095c6:	d107      	bne.n	80095d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f06f 0220 	mvn.w	r2, #32
 80095d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f000 fcf0 	bl	8009fb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80095d8:	bf00      	nop
 80095da:	3708      	adds	r7, #8
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}

080095e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b086      	sub	sp, #24
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	60f8      	str	r0, [r7, #12]
 80095e8:	60b9      	str	r1, [r7, #8]
 80095ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80095ec:	2300      	movs	r3, #0
 80095ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095f6:	2b01      	cmp	r3, #1
 80095f8:	d101      	bne.n	80095fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80095fa:	2302      	movs	r3, #2
 80095fc:	e0ae      	b.n	800975c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	2201      	movs	r2, #1
 8009602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2b0c      	cmp	r3, #12
 800960a:	f200 809f 	bhi.w	800974c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800960e:	a201      	add	r2, pc, #4	; (adr r2, 8009614 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009614:	08009649 	.word	0x08009649
 8009618:	0800974d 	.word	0x0800974d
 800961c:	0800974d 	.word	0x0800974d
 8009620:	0800974d 	.word	0x0800974d
 8009624:	08009689 	.word	0x08009689
 8009628:	0800974d 	.word	0x0800974d
 800962c:	0800974d 	.word	0x0800974d
 8009630:	0800974d 	.word	0x0800974d
 8009634:	080096cb 	.word	0x080096cb
 8009638:	0800974d 	.word	0x0800974d
 800963c:	0800974d 	.word	0x0800974d
 8009640:	0800974d 	.word	0x0800974d
 8009644:	0800970b 	.word	0x0800970b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	68b9      	ldr	r1, [r7, #8]
 800964e:	4618      	mov	r0, r3
 8009650:	f000 f9f8 	bl	8009a44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	699a      	ldr	r2, [r3, #24]
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f042 0208 	orr.w	r2, r2, #8
 8009662:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	699a      	ldr	r2, [r3, #24]
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f022 0204 	bic.w	r2, r2, #4
 8009672:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	6999      	ldr	r1, [r3, #24]
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	691a      	ldr	r2, [r3, #16]
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	430a      	orrs	r2, r1
 8009684:	619a      	str	r2, [r3, #24]
      break;
 8009686:	e064      	b.n	8009752 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	68b9      	ldr	r1, [r7, #8]
 800968e:	4618      	mov	r0, r3
 8009690:	f000 fa3e 	bl	8009b10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	699a      	ldr	r2, [r3, #24]
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80096a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	699a      	ldr	r2, [r3, #24]
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80096b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	6999      	ldr	r1, [r3, #24]
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	691b      	ldr	r3, [r3, #16]
 80096be:	021a      	lsls	r2, r3, #8
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	430a      	orrs	r2, r1
 80096c6:	619a      	str	r2, [r3, #24]
      break;
 80096c8:	e043      	b.n	8009752 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	68b9      	ldr	r1, [r7, #8]
 80096d0:	4618      	mov	r0, r3
 80096d2:	f000 fa89 	bl	8009be8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	69da      	ldr	r2, [r3, #28]
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f042 0208 	orr.w	r2, r2, #8
 80096e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	69da      	ldr	r2, [r3, #28]
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f022 0204 	bic.w	r2, r2, #4
 80096f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	69d9      	ldr	r1, [r3, #28]
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	691a      	ldr	r2, [r3, #16]
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	430a      	orrs	r2, r1
 8009706:	61da      	str	r2, [r3, #28]
      break;
 8009708:	e023      	b.n	8009752 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	68b9      	ldr	r1, [r7, #8]
 8009710:	4618      	mov	r0, r3
 8009712:	f000 fad3 	bl	8009cbc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	69da      	ldr	r2, [r3, #28]
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009724:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	69da      	ldr	r2, [r3, #28]
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009734:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	69d9      	ldr	r1, [r3, #28]
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	691b      	ldr	r3, [r3, #16]
 8009740:	021a      	lsls	r2, r3, #8
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	430a      	orrs	r2, r1
 8009748:	61da      	str	r2, [r3, #28]
      break;
 800974a:	e002      	b.n	8009752 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800974c:	2301      	movs	r3, #1
 800974e:	75fb      	strb	r3, [r7, #23]
      break;
 8009750:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	2200      	movs	r2, #0
 8009756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800975a:	7dfb      	ldrb	r3, [r7, #23]
}
 800975c:	4618      	mov	r0, r3
 800975e:	3718      	adds	r7, #24
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}

08009764 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b084      	sub	sp, #16
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
 800976c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800976e:	2300      	movs	r3, #0
 8009770:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009778:	2b01      	cmp	r3, #1
 800977a:	d101      	bne.n	8009780 <HAL_TIM_ConfigClockSource+0x1c>
 800977c:	2302      	movs	r3, #2
 800977e:	e0b4      	b.n	80098ea <HAL_TIM_ConfigClockSource+0x186>
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2201      	movs	r2, #1
 8009784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2202      	movs	r2, #2
 800978c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	689b      	ldr	r3, [r3, #8]
 8009796:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800979e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80097a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	68ba      	ldr	r2, [r7, #8]
 80097ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80097b8:	d03e      	beq.n	8009838 <HAL_TIM_ConfigClockSource+0xd4>
 80097ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80097be:	f200 8087 	bhi.w	80098d0 <HAL_TIM_ConfigClockSource+0x16c>
 80097c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097c6:	f000 8086 	beq.w	80098d6 <HAL_TIM_ConfigClockSource+0x172>
 80097ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097ce:	d87f      	bhi.n	80098d0 <HAL_TIM_ConfigClockSource+0x16c>
 80097d0:	2b70      	cmp	r3, #112	; 0x70
 80097d2:	d01a      	beq.n	800980a <HAL_TIM_ConfigClockSource+0xa6>
 80097d4:	2b70      	cmp	r3, #112	; 0x70
 80097d6:	d87b      	bhi.n	80098d0 <HAL_TIM_ConfigClockSource+0x16c>
 80097d8:	2b60      	cmp	r3, #96	; 0x60
 80097da:	d050      	beq.n	800987e <HAL_TIM_ConfigClockSource+0x11a>
 80097dc:	2b60      	cmp	r3, #96	; 0x60
 80097de:	d877      	bhi.n	80098d0 <HAL_TIM_ConfigClockSource+0x16c>
 80097e0:	2b50      	cmp	r3, #80	; 0x50
 80097e2:	d03c      	beq.n	800985e <HAL_TIM_ConfigClockSource+0xfa>
 80097e4:	2b50      	cmp	r3, #80	; 0x50
 80097e6:	d873      	bhi.n	80098d0 <HAL_TIM_ConfigClockSource+0x16c>
 80097e8:	2b40      	cmp	r3, #64	; 0x40
 80097ea:	d058      	beq.n	800989e <HAL_TIM_ConfigClockSource+0x13a>
 80097ec:	2b40      	cmp	r3, #64	; 0x40
 80097ee:	d86f      	bhi.n	80098d0 <HAL_TIM_ConfigClockSource+0x16c>
 80097f0:	2b30      	cmp	r3, #48	; 0x30
 80097f2:	d064      	beq.n	80098be <HAL_TIM_ConfigClockSource+0x15a>
 80097f4:	2b30      	cmp	r3, #48	; 0x30
 80097f6:	d86b      	bhi.n	80098d0 <HAL_TIM_ConfigClockSource+0x16c>
 80097f8:	2b20      	cmp	r3, #32
 80097fa:	d060      	beq.n	80098be <HAL_TIM_ConfigClockSource+0x15a>
 80097fc:	2b20      	cmp	r3, #32
 80097fe:	d867      	bhi.n	80098d0 <HAL_TIM_ConfigClockSource+0x16c>
 8009800:	2b00      	cmp	r3, #0
 8009802:	d05c      	beq.n	80098be <HAL_TIM_ConfigClockSource+0x15a>
 8009804:	2b10      	cmp	r3, #16
 8009806:	d05a      	beq.n	80098be <HAL_TIM_ConfigClockSource+0x15a>
 8009808:	e062      	b.n	80098d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6818      	ldr	r0, [r3, #0]
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	6899      	ldr	r1, [r3, #8]
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	685a      	ldr	r2, [r3, #4]
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	68db      	ldr	r3, [r3, #12]
 800981a:	f000 fb19 	bl	8009e50 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	689b      	ldr	r3, [r3, #8]
 8009824:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009826:	68bb      	ldr	r3, [r7, #8]
 8009828:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800982c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	68ba      	ldr	r2, [r7, #8]
 8009834:	609a      	str	r2, [r3, #8]
      break;
 8009836:	e04f      	b.n	80098d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6818      	ldr	r0, [r3, #0]
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	6899      	ldr	r1, [r3, #8]
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	685a      	ldr	r2, [r3, #4]
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	68db      	ldr	r3, [r3, #12]
 8009848:	f000 fb02 	bl	8009e50 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	689a      	ldr	r2, [r3, #8]
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800985a:	609a      	str	r2, [r3, #8]
      break;
 800985c:	e03c      	b.n	80098d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6818      	ldr	r0, [r3, #0]
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	6859      	ldr	r1, [r3, #4]
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	68db      	ldr	r3, [r3, #12]
 800986a:	461a      	mov	r2, r3
 800986c:	f000 fa76 	bl	8009d5c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	2150      	movs	r1, #80	; 0x50
 8009876:	4618      	mov	r0, r3
 8009878:	f000 facf 	bl	8009e1a <TIM_ITRx_SetConfig>
      break;
 800987c:	e02c      	b.n	80098d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6818      	ldr	r0, [r3, #0]
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	6859      	ldr	r1, [r3, #4]
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	68db      	ldr	r3, [r3, #12]
 800988a:	461a      	mov	r2, r3
 800988c:	f000 fa95 	bl	8009dba <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	2160      	movs	r1, #96	; 0x60
 8009896:	4618      	mov	r0, r3
 8009898:	f000 fabf 	bl	8009e1a <TIM_ITRx_SetConfig>
      break;
 800989c:	e01c      	b.n	80098d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6818      	ldr	r0, [r3, #0]
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	6859      	ldr	r1, [r3, #4]
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	68db      	ldr	r3, [r3, #12]
 80098aa:	461a      	mov	r2, r3
 80098ac:	f000 fa56 	bl	8009d5c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	2140      	movs	r1, #64	; 0x40
 80098b6:	4618      	mov	r0, r3
 80098b8:	f000 faaf 	bl	8009e1a <TIM_ITRx_SetConfig>
      break;
 80098bc:	e00c      	b.n	80098d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681a      	ldr	r2, [r3, #0]
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	4619      	mov	r1, r3
 80098c8:	4610      	mov	r0, r2
 80098ca:	f000 faa6 	bl	8009e1a <TIM_ITRx_SetConfig>
      break;
 80098ce:	e003      	b.n	80098d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80098d0:	2301      	movs	r3, #1
 80098d2:	73fb      	strb	r3, [r7, #15]
      break;
 80098d4:	e000      	b.n	80098d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80098d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2201      	movs	r2, #1
 80098dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2200      	movs	r2, #0
 80098e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80098e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	3710      	adds	r7, #16
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd80      	pop	{r7, pc}

080098f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80098f2:	b480      	push	{r7}
 80098f4:	b083      	sub	sp, #12
 80098f6:	af00      	add	r7, sp, #0
 80098f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80098fa:	bf00      	nop
 80098fc:	370c      	adds	r7, #12
 80098fe:	46bd      	mov	sp, r7
 8009900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009904:	4770      	bx	lr

08009906 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009906:	b480      	push	{r7}
 8009908:	b083      	sub	sp, #12
 800990a:	af00      	add	r7, sp, #0
 800990c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800990e:	bf00      	nop
 8009910:	370c      	adds	r7, #12
 8009912:	46bd      	mov	sp, r7
 8009914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009918:	4770      	bx	lr

0800991a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800991a:	b480      	push	{r7}
 800991c:	b083      	sub	sp, #12
 800991e:	af00      	add	r7, sp, #0
 8009920:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009922:	bf00      	nop
 8009924:	370c      	adds	r7, #12
 8009926:	46bd      	mov	sp, r7
 8009928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992c:	4770      	bx	lr

0800992e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800992e:	b480      	push	{r7}
 8009930:	b083      	sub	sp, #12
 8009932:	af00      	add	r7, sp, #0
 8009934:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009936:	bf00      	nop
 8009938:	370c      	adds	r7, #12
 800993a:	46bd      	mov	sp, r7
 800993c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009940:	4770      	bx	lr
	...

08009944 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009944:	b480      	push	{r7}
 8009946:	b085      	sub	sp, #20
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
 800994c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	4a34      	ldr	r2, [pc, #208]	; (8009a28 <TIM_Base_SetConfig+0xe4>)
 8009958:	4293      	cmp	r3, r2
 800995a:	d00f      	beq.n	800997c <TIM_Base_SetConfig+0x38>
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009962:	d00b      	beq.n	800997c <TIM_Base_SetConfig+0x38>
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	4a31      	ldr	r2, [pc, #196]	; (8009a2c <TIM_Base_SetConfig+0xe8>)
 8009968:	4293      	cmp	r3, r2
 800996a:	d007      	beq.n	800997c <TIM_Base_SetConfig+0x38>
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	4a30      	ldr	r2, [pc, #192]	; (8009a30 <TIM_Base_SetConfig+0xec>)
 8009970:	4293      	cmp	r3, r2
 8009972:	d003      	beq.n	800997c <TIM_Base_SetConfig+0x38>
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	4a2f      	ldr	r2, [pc, #188]	; (8009a34 <TIM_Base_SetConfig+0xf0>)
 8009978:	4293      	cmp	r3, r2
 800997a:	d108      	bne.n	800998e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009982:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	685b      	ldr	r3, [r3, #4]
 8009988:	68fa      	ldr	r2, [r7, #12]
 800998a:	4313      	orrs	r3, r2
 800998c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	4a25      	ldr	r2, [pc, #148]	; (8009a28 <TIM_Base_SetConfig+0xe4>)
 8009992:	4293      	cmp	r3, r2
 8009994:	d01b      	beq.n	80099ce <TIM_Base_SetConfig+0x8a>
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800999c:	d017      	beq.n	80099ce <TIM_Base_SetConfig+0x8a>
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	4a22      	ldr	r2, [pc, #136]	; (8009a2c <TIM_Base_SetConfig+0xe8>)
 80099a2:	4293      	cmp	r3, r2
 80099a4:	d013      	beq.n	80099ce <TIM_Base_SetConfig+0x8a>
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	4a21      	ldr	r2, [pc, #132]	; (8009a30 <TIM_Base_SetConfig+0xec>)
 80099aa:	4293      	cmp	r3, r2
 80099ac:	d00f      	beq.n	80099ce <TIM_Base_SetConfig+0x8a>
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	4a20      	ldr	r2, [pc, #128]	; (8009a34 <TIM_Base_SetConfig+0xf0>)
 80099b2:	4293      	cmp	r3, r2
 80099b4:	d00b      	beq.n	80099ce <TIM_Base_SetConfig+0x8a>
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	4a1f      	ldr	r2, [pc, #124]	; (8009a38 <TIM_Base_SetConfig+0xf4>)
 80099ba:	4293      	cmp	r3, r2
 80099bc:	d007      	beq.n	80099ce <TIM_Base_SetConfig+0x8a>
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	4a1e      	ldr	r2, [pc, #120]	; (8009a3c <TIM_Base_SetConfig+0xf8>)
 80099c2:	4293      	cmp	r3, r2
 80099c4:	d003      	beq.n	80099ce <TIM_Base_SetConfig+0x8a>
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	4a1d      	ldr	r2, [pc, #116]	; (8009a40 <TIM_Base_SetConfig+0xfc>)
 80099ca:	4293      	cmp	r3, r2
 80099cc:	d108      	bne.n	80099e0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80099d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	68db      	ldr	r3, [r3, #12]
 80099da:	68fa      	ldr	r2, [r7, #12]
 80099dc:	4313      	orrs	r3, r2
 80099de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	695b      	ldr	r3, [r3, #20]
 80099ea:	4313      	orrs	r3, r2
 80099ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	68fa      	ldr	r2, [r7, #12]
 80099f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	689a      	ldr	r2, [r3, #8]
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	681a      	ldr	r2, [r3, #0]
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	4a08      	ldr	r2, [pc, #32]	; (8009a28 <TIM_Base_SetConfig+0xe4>)
 8009a08:	4293      	cmp	r3, r2
 8009a0a:	d103      	bne.n	8009a14 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	691a      	ldr	r2, [r3, #16]
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2201      	movs	r2, #1
 8009a18:	615a      	str	r2, [r3, #20]
}
 8009a1a:	bf00      	nop
 8009a1c:	3714      	adds	r7, #20
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a24:	4770      	bx	lr
 8009a26:	bf00      	nop
 8009a28:	40010000 	.word	0x40010000
 8009a2c:	40000400 	.word	0x40000400
 8009a30:	40000800 	.word	0x40000800
 8009a34:	40000c00 	.word	0x40000c00
 8009a38:	40014000 	.word	0x40014000
 8009a3c:	40014400 	.word	0x40014400
 8009a40:	40014800 	.word	0x40014800

08009a44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a44:	b480      	push	{r7}
 8009a46:	b087      	sub	sp, #28
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
 8009a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6a1b      	ldr	r3, [r3, #32]
 8009a52:	f023 0201 	bic.w	r2, r3, #1
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6a1b      	ldr	r3, [r3, #32]
 8009a5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	685b      	ldr	r3, [r3, #4]
 8009a64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	699b      	ldr	r3, [r3, #24]
 8009a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	f023 0303 	bic.w	r3, r3, #3
 8009a7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	68fa      	ldr	r2, [r7, #12]
 8009a82:	4313      	orrs	r3, r2
 8009a84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009a86:	697b      	ldr	r3, [r7, #20]
 8009a88:	f023 0302 	bic.w	r3, r3, #2
 8009a8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	689b      	ldr	r3, [r3, #8]
 8009a92:	697a      	ldr	r2, [r7, #20]
 8009a94:	4313      	orrs	r3, r2
 8009a96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	4a1c      	ldr	r2, [pc, #112]	; (8009b0c <TIM_OC1_SetConfig+0xc8>)
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d10c      	bne.n	8009aba <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009aa0:	697b      	ldr	r3, [r7, #20]
 8009aa2:	f023 0308 	bic.w	r3, r3, #8
 8009aa6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	68db      	ldr	r3, [r3, #12]
 8009aac:	697a      	ldr	r2, [r7, #20]
 8009aae:	4313      	orrs	r3, r2
 8009ab0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009ab2:	697b      	ldr	r3, [r7, #20]
 8009ab4:	f023 0304 	bic.w	r3, r3, #4
 8009ab8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	4a13      	ldr	r2, [pc, #76]	; (8009b0c <TIM_OC1_SetConfig+0xc8>)
 8009abe:	4293      	cmp	r3, r2
 8009ac0:	d111      	bne.n	8009ae6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009ac2:	693b      	ldr	r3, [r7, #16]
 8009ac4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009ac8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009aca:	693b      	ldr	r3, [r7, #16]
 8009acc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009ad0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	695b      	ldr	r3, [r3, #20]
 8009ad6:	693a      	ldr	r2, [r7, #16]
 8009ad8:	4313      	orrs	r3, r2
 8009ada:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	699b      	ldr	r3, [r3, #24]
 8009ae0:	693a      	ldr	r2, [r7, #16]
 8009ae2:	4313      	orrs	r3, r2
 8009ae4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	693a      	ldr	r2, [r7, #16]
 8009aea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	68fa      	ldr	r2, [r7, #12]
 8009af0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	685a      	ldr	r2, [r3, #4]
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	697a      	ldr	r2, [r7, #20]
 8009afe:	621a      	str	r2, [r3, #32]
}
 8009b00:	bf00      	nop
 8009b02:	371c      	adds	r7, #28
 8009b04:	46bd      	mov	sp, r7
 8009b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0a:	4770      	bx	lr
 8009b0c:	40010000 	.word	0x40010000

08009b10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009b10:	b480      	push	{r7}
 8009b12:	b087      	sub	sp, #28
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
 8009b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6a1b      	ldr	r3, [r3, #32]
 8009b1e:	f023 0210 	bic.w	r2, r3, #16
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6a1b      	ldr	r3, [r3, #32]
 8009b2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	685b      	ldr	r3, [r3, #4]
 8009b30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	699b      	ldr	r3, [r3, #24]
 8009b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	021b      	lsls	r3, r3, #8
 8009b4e:	68fa      	ldr	r2, [r7, #12]
 8009b50:	4313      	orrs	r3, r2
 8009b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009b54:	697b      	ldr	r3, [r7, #20]
 8009b56:	f023 0320 	bic.w	r3, r3, #32
 8009b5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	689b      	ldr	r3, [r3, #8]
 8009b60:	011b      	lsls	r3, r3, #4
 8009b62:	697a      	ldr	r2, [r7, #20]
 8009b64:	4313      	orrs	r3, r2
 8009b66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	4a1e      	ldr	r2, [pc, #120]	; (8009be4 <TIM_OC2_SetConfig+0xd4>)
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	d10d      	bne.n	8009b8c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009b70:	697b      	ldr	r3, [r7, #20]
 8009b72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	68db      	ldr	r3, [r3, #12]
 8009b7c:	011b      	lsls	r3, r3, #4
 8009b7e:	697a      	ldr	r2, [r7, #20]
 8009b80:	4313      	orrs	r3, r2
 8009b82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009b84:	697b      	ldr	r3, [r7, #20]
 8009b86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b8a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	4a15      	ldr	r2, [pc, #84]	; (8009be4 <TIM_OC2_SetConfig+0xd4>)
 8009b90:	4293      	cmp	r3, r2
 8009b92:	d113      	bne.n	8009bbc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009b94:	693b      	ldr	r3, [r7, #16]
 8009b96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009b9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009b9c:	693b      	ldr	r3, [r7, #16]
 8009b9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009ba2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	695b      	ldr	r3, [r3, #20]
 8009ba8:	009b      	lsls	r3, r3, #2
 8009baa:	693a      	ldr	r2, [r7, #16]
 8009bac:	4313      	orrs	r3, r2
 8009bae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	699b      	ldr	r3, [r3, #24]
 8009bb4:	009b      	lsls	r3, r3, #2
 8009bb6:	693a      	ldr	r2, [r7, #16]
 8009bb8:	4313      	orrs	r3, r2
 8009bba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	693a      	ldr	r2, [r7, #16]
 8009bc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	68fa      	ldr	r2, [r7, #12]
 8009bc6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	685a      	ldr	r2, [r3, #4]
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	697a      	ldr	r2, [r7, #20]
 8009bd4:	621a      	str	r2, [r3, #32]
}
 8009bd6:	bf00      	nop
 8009bd8:	371c      	adds	r7, #28
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be0:	4770      	bx	lr
 8009be2:	bf00      	nop
 8009be4:	40010000 	.word	0x40010000

08009be8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009be8:	b480      	push	{r7}
 8009bea:	b087      	sub	sp, #28
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
 8009bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6a1b      	ldr	r3, [r3, #32]
 8009bf6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6a1b      	ldr	r3, [r3, #32]
 8009c02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	685b      	ldr	r3, [r3, #4]
 8009c08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	69db      	ldr	r3, [r3, #28]
 8009c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	f023 0303 	bic.w	r3, r3, #3
 8009c1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	68fa      	ldr	r2, [r7, #12]
 8009c26:	4313      	orrs	r3, r2
 8009c28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009c30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	689b      	ldr	r3, [r3, #8]
 8009c36:	021b      	lsls	r3, r3, #8
 8009c38:	697a      	ldr	r2, [r7, #20]
 8009c3a:	4313      	orrs	r3, r2
 8009c3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	4a1d      	ldr	r2, [pc, #116]	; (8009cb8 <TIM_OC3_SetConfig+0xd0>)
 8009c42:	4293      	cmp	r3, r2
 8009c44:	d10d      	bne.n	8009c62 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009c46:	697b      	ldr	r3, [r7, #20]
 8009c48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009c4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	68db      	ldr	r3, [r3, #12]
 8009c52:	021b      	lsls	r3, r3, #8
 8009c54:	697a      	ldr	r2, [r7, #20]
 8009c56:	4313      	orrs	r3, r2
 8009c58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009c5a:	697b      	ldr	r3, [r7, #20]
 8009c5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009c60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	4a14      	ldr	r2, [pc, #80]	; (8009cb8 <TIM_OC3_SetConfig+0xd0>)
 8009c66:	4293      	cmp	r3, r2
 8009c68:	d113      	bne.n	8009c92 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009c6a:	693b      	ldr	r3, [r7, #16]
 8009c6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009c70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009c72:	693b      	ldr	r3, [r7, #16]
 8009c74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009c78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	695b      	ldr	r3, [r3, #20]
 8009c7e:	011b      	lsls	r3, r3, #4
 8009c80:	693a      	ldr	r2, [r7, #16]
 8009c82:	4313      	orrs	r3, r2
 8009c84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	699b      	ldr	r3, [r3, #24]
 8009c8a:	011b      	lsls	r3, r3, #4
 8009c8c:	693a      	ldr	r2, [r7, #16]
 8009c8e:	4313      	orrs	r3, r2
 8009c90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	693a      	ldr	r2, [r7, #16]
 8009c96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	68fa      	ldr	r2, [r7, #12]
 8009c9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	685a      	ldr	r2, [r3, #4]
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	697a      	ldr	r2, [r7, #20]
 8009caa:	621a      	str	r2, [r3, #32]
}
 8009cac:	bf00      	nop
 8009cae:	371c      	adds	r7, #28
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb6:	4770      	bx	lr
 8009cb8:	40010000 	.word	0x40010000

08009cbc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009cbc:	b480      	push	{r7}
 8009cbe:	b087      	sub	sp, #28
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
 8009cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6a1b      	ldr	r3, [r3, #32]
 8009cca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	6a1b      	ldr	r3, [r3, #32]
 8009cd6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	685b      	ldr	r3, [r3, #4]
 8009cdc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	69db      	ldr	r3, [r3, #28]
 8009ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009cea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009cf2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	021b      	lsls	r3, r3, #8
 8009cfa:	68fa      	ldr	r2, [r7, #12]
 8009cfc:	4313      	orrs	r3, r2
 8009cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009d00:	693b      	ldr	r3, [r7, #16]
 8009d02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009d06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	689b      	ldr	r3, [r3, #8]
 8009d0c:	031b      	lsls	r3, r3, #12
 8009d0e:	693a      	ldr	r2, [r7, #16]
 8009d10:	4313      	orrs	r3, r2
 8009d12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	4a10      	ldr	r2, [pc, #64]	; (8009d58 <TIM_OC4_SetConfig+0x9c>)
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d109      	bne.n	8009d30 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009d1c:	697b      	ldr	r3, [r7, #20]
 8009d1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009d22:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	695b      	ldr	r3, [r3, #20]
 8009d28:	019b      	lsls	r3, r3, #6
 8009d2a:	697a      	ldr	r2, [r7, #20]
 8009d2c:	4313      	orrs	r3, r2
 8009d2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	697a      	ldr	r2, [r7, #20]
 8009d34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	68fa      	ldr	r2, [r7, #12]
 8009d3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	685a      	ldr	r2, [r3, #4]
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	693a      	ldr	r2, [r7, #16]
 8009d48:	621a      	str	r2, [r3, #32]
}
 8009d4a:	bf00      	nop
 8009d4c:	371c      	adds	r7, #28
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d54:	4770      	bx	lr
 8009d56:	bf00      	nop
 8009d58:	40010000 	.word	0x40010000

08009d5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009d5c:	b480      	push	{r7}
 8009d5e:	b087      	sub	sp, #28
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	60f8      	str	r0, [r7, #12]
 8009d64:	60b9      	str	r1, [r7, #8]
 8009d66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	6a1b      	ldr	r3, [r3, #32]
 8009d6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	6a1b      	ldr	r3, [r3, #32]
 8009d72:	f023 0201 	bic.w	r2, r3, #1
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	699b      	ldr	r3, [r3, #24]
 8009d7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009d80:	693b      	ldr	r3, [r7, #16]
 8009d82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009d86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	011b      	lsls	r3, r3, #4
 8009d8c:	693a      	ldr	r2, [r7, #16]
 8009d8e:	4313      	orrs	r3, r2
 8009d90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009d92:	697b      	ldr	r3, [r7, #20]
 8009d94:	f023 030a 	bic.w	r3, r3, #10
 8009d98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009d9a:	697a      	ldr	r2, [r7, #20]
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	4313      	orrs	r3, r2
 8009da0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	693a      	ldr	r2, [r7, #16]
 8009da6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	697a      	ldr	r2, [r7, #20]
 8009dac:	621a      	str	r2, [r3, #32]
}
 8009dae:	bf00      	nop
 8009db0:	371c      	adds	r7, #28
 8009db2:	46bd      	mov	sp, r7
 8009db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db8:	4770      	bx	lr

08009dba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009dba:	b480      	push	{r7}
 8009dbc:	b087      	sub	sp, #28
 8009dbe:	af00      	add	r7, sp, #0
 8009dc0:	60f8      	str	r0, [r7, #12]
 8009dc2:	60b9      	str	r1, [r7, #8]
 8009dc4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	6a1b      	ldr	r3, [r3, #32]
 8009dca:	f023 0210 	bic.w	r2, r3, #16
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	699b      	ldr	r3, [r3, #24]
 8009dd6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	6a1b      	ldr	r3, [r3, #32]
 8009ddc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009dde:	697b      	ldr	r3, [r7, #20]
 8009de0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009de4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	031b      	lsls	r3, r3, #12
 8009dea:	697a      	ldr	r2, [r7, #20]
 8009dec:	4313      	orrs	r3, r2
 8009dee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009df0:	693b      	ldr	r3, [r7, #16]
 8009df2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009df6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	011b      	lsls	r3, r3, #4
 8009dfc:	693a      	ldr	r2, [r7, #16]
 8009dfe:	4313      	orrs	r3, r2
 8009e00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	697a      	ldr	r2, [r7, #20]
 8009e06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	693a      	ldr	r2, [r7, #16]
 8009e0c:	621a      	str	r2, [r3, #32]
}
 8009e0e:	bf00      	nop
 8009e10:	371c      	adds	r7, #28
 8009e12:	46bd      	mov	sp, r7
 8009e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e18:	4770      	bx	lr

08009e1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009e1a:	b480      	push	{r7}
 8009e1c:	b085      	sub	sp, #20
 8009e1e:	af00      	add	r7, sp, #0
 8009e20:	6078      	str	r0, [r7, #4]
 8009e22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	689b      	ldr	r3, [r3, #8]
 8009e28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009e32:	683a      	ldr	r2, [r7, #0]
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	4313      	orrs	r3, r2
 8009e38:	f043 0307 	orr.w	r3, r3, #7
 8009e3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	68fa      	ldr	r2, [r7, #12]
 8009e42:	609a      	str	r2, [r3, #8]
}
 8009e44:	bf00      	nop
 8009e46:	3714      	adds	r7, #20
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4e:	4770      	bx	lr

08009e50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009e50:	b480      	push	{r7}
 8009e52:	b087      	sub	sp, #28
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	60f8      	str	r0, [r7, #12]
 8009e58:	60b9      	str	r1, [r7, #8]
 8009e5a:	607a      	str	r2, [r7, #4]
 8009e5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	689b      	ldr	r3, [r3, #8]
 8009e62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009e64:	697b      	ldr	r3, [r7, #20]
 8009e66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009e6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	021a      	lsls	r2, r3, #8
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	431a      	orrs	r2, r3
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	4313      	orrs	r3, r2
 8009e78:	697a      	ldr	r2, [r7, #20]
 8009e7a:	4313      	orrs	r3, r2
 8009e7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	697a      	ldr	r2, [r7, #20]
 8009e82:	609a      	str	r2, [r3, #8]
}
 8009e84:	bf00      	nop
 8009e86:	371c      	adds	r7, #28
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8e:	4770      	bx	lr

08009e90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009e90:	b480      	push	{r7}
 8009e92:	b087      	sub	sp, #28
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	60f8      	str	r0, [r7, #12]
 8009e98:	60b9      	str	r1, [r7, #8]
 8009e9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	f003 031f 	and.w	r3, r3, #31
 8009ea2:	2201      	movs	r2, #1
 8009ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8009ea8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	6a1a      	ldr	r2, [r3, #32]
 8009eae:	697b      	ldr	r3, [r7, #20]
 8009eb0:	43db      	mvns	r3, r3
 8009eb2:	401a      	ands	r2, r3
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	6a1a      	ldr	r2, [r3, #32]
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	f003 031f 	and.w	r3, r3, #31
 8009ec2:	6879      	ldr	r1, [r7, #4]
 8009ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8009ec8:	431a      	orrs	r2, r3
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	621a      	str	r2, [r3, #32]
}
 8009ece:	bf00      	nop
 8009ed0:	371c      	adds	r7, #28
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed8:	4770      	bx	lr
	...

08009edc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009edc:	b480      	push	{r7}
 8009ede:	b085      	sub	sp, #20
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
 8009ee4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009eec:	2b01      	cmp	r3, #1
 8009eee:	d101      	bne.n	8009ef4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009ef0:	2302      	movs	r3, #2
 8009ef2:	e050      	b.n	8009f96 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2201      	movs	r2, #1
 8009ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2202      	movs	r2, #2
 8009f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	685b      	ldr	r3, [r3, #4]
 8009f0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	689b      	ldr	r3, [r3, #8]
 8009f12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	68fa      	ldr	r2, [r7, #12]
 8009f22:	4313      	orrs	r3, r2
 8009f24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	68fa      	ldr	r2, [r7, #12]
 8009f2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	4a1c      	ldr	r2, [pc, #112]	; (8009fa4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009f34:	4293      	cmp	r3, r2
 8009f36:	d018      	beq.n	8009f6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f40:	d013      	beq.n	8009f6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	4a18      	ldr	r2, [pc, #96]	; (8009fa8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009f48:	4293      	cmp	r3, r2
 8009f4a:	d00e      	beq.n	8009f6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	4a16      	ldr	r2, [pc, #88]	; (8009fac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009f52:	4293      	cmp	r3, r2
 8009f54:	d009      	beq.n	8009f6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	4a15      	ldr	r2, [pc, #84]	; (8009fb0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009f5c:	4293      	cmp	r3, r2
 8009f5e:	d004      	beq.n	8009f6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	4a13      	ldr	r2, [pc, #76]	; (8009fb4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009f66:	4293      	cmp	r3, r2
 8009f68:	d10c      	bne.n	8009f84 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	685b      	ldr	r3, [r3, #4]
 8009f76:	68ba      	ldr	r2, [r7, #8]
 8009f78:	4313      	orrs	r3, r2
 8009f7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	68ba      	ldr	r2, [r7, #8]
 8009f82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2201      	movs	r2, #1
 8009f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2200      	movs	r2, #0
 8009f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009f94:	2300      	movs	r3, #0
}
 8009f96:	4618      	mov	r0, r3
 8009f98:	3714      	adds	r7, #20
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa0:	4770      	bx	lr
 8009fa2:	bf00      	nop
 8009fa4:	40010000 	.word	0x40010000
 8009fa8:	40000400 	.word	0x40000400
 8009fac:	40000800 	.word	0x40000800
 8009fb0:	40000c00 	.word	0x40000c00
 8009fb4:	40014000 	.word	0x40014000

08009fb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009fb8:	b480      	push	{r7}
 8009fba:	b083      	sub	sp, #12
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009fc0:	bf00      	nop
 8009fc2:	370c      	adds	r7, #12
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fca:	4770      	bx	lr

08009fcc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009fcc:	b480      	push	{r7}
 8009fce:	b083      	sub	sp, #12
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009fd4:	bf00      	nop
 8009fd6:	370c      	adds	r7, #12
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fde:	4770      	bx	lr

08009fe0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b082      	sub	sp, #8
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d101      	bne.n	8009ff2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009fee:	2301      	movs	r3, #1
 8009ff0:	e03f      	b.n	800a072 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ff8:	b2db      	uxtb	r3, r3
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d106      	bne.n	800a00c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2200      	movs	r2, #0
 800a002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a006:	6878      	ldr	r0, [r7, #4]
 800a008:	f7fb fc40 	bl	800588c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2224      	movs	r2, #36	; 0x24
 800a010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	68da      	ldr	r2, [r3, #12]
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a022:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a024:	6878      	ldr	r0, [r7, #4]
 800a026:	f000 fddb 	bl	800abe0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	691a      	ldr	r2, [r3, #16]
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a038:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	695a      	ldr	r2, [r3, #20]
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a048:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	68da      	ldr	r2, [r3, #12]
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a058:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2200      	movs	r2, #0
 800a05e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2220      	movs	r2, #32
 800a064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2220      	movs	r2, #32
 800a06c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a070:	2300      	movs	r3, #0
}
 800a072:	4618      	mov	r0, r3
 800a074:	3708      	adds	r7, #8
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}

0800a07a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a07a:	b580      	push	{r7, lr}
 800a07c:	b08a      	sub	sp, #40	; 0x28
 800a07e:	af02      	add	r7, sp, #8
 800a080:	60f8      	str	r0, [r7, #12]
 800a082:	60b9      	str	r1, [r7, #8]
 800a084:	603b      	str	r3, [r7, #0]
 800a086:	4613      	mov	r3, r2
 800a088:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a08a:	2300      	movs	r3, #0
 800a08c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a094:	b2db      	uxtb	r3, r3
 800a096:	2b20      	cmp	r3, #32
 800a098:	d17c      	bne.n	800a194 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a09a:	68bb      	ldr	r3, [r7, #8]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d002      	beq.n	800a0a6 <HAL_UART_Transmit+0x2c>
 800a0a0:	88fb      	ldrh	r3, [r7, #6]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d101      	bne.n	800a0aa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a0a6:	2301      	movs	r3, #1
 800a0a8:	e075      	b.n	800a196 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a0b0:	2b01      	cmp	r3, #1
 800a0b2:	d101      	bne.n	800a0b8 <HAL_UART_Transmit+0x3e>
 800a0b4:	2302      	movs	r3, #2
 800a0b6:	e06e      	b.n	800a196 <HAL_UART_Transmit+0x11c>
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	2201      	movs	r2, #1
 800a0bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	2221      	movs	r2, #33	; 0x21
 800a0ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a0ce:	f7fb fe3d 	bl	8005d4c <HAL_GetTick>
 800a0d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	88fa      	ldrh	r2, [r7, #6]
 800a0d8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	88fa      	ldrh	r2, [r7, #6]
 800a0de:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	689b      	ldr	r3, [r3, #8]
 800a0e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0e8:	d108      	bne.n	800a0fc <HAL_UART_Transmit+0x82>
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	691b      	ldr	r3, [r3, #16]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d104      	bne.n	800a0fc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	61bb      	str	r3, [r7, #24]
 800a0fa:	e003      	b.n	800a104 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a0fc:	68bb      	ldr	r3, [r7, #8]
 800a0fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a100:	2300      	movs	r3, #0
 800a102:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	2200      	movs	r2, #0
 800a108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800a10c:	e02a      	b.n	800a164 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	9300      	str	r3, [sp, #0]
 800a112:	697b      	ldr	r3, [r7, #20]
 800a114:	2200      	movs	r2, #0
 800a116:	2180      	movs	r1, #128	; 0x80
 800a118:	68f8      	ldr	r0, [r7, #12]
 800a11a:	f000 fb1f 	bl	800a75c <UART_WaitOnFlagUntilTimeout>
 800a11e:	4603      	mov	r3, r0
 800a120:	2b00      	cmp	r3, #0
 800a122:	d001      	beq.n	800a128 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a124:	2303      	movs	r3, #3
 800a126:	e036      	b.n	800a196 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a128:	69fb      	ldr	r3, [r7, #28]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d10b      	bne.n	800a146 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a12e:	69bb      	ldr	r3, [r7, #24]
 800a130:	881b      	ldrh	r3, [r3, #0]
 800a132:	461a      	mov	r2, r3
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a13c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a13e:	69bb      	ldr	r3, [r7, #24]
 800a140:	3302      	adds	r3, #2
 800a142:	61bb      	str	r3, [r7, #24]
 800a144:	e007      	b.n	800a156 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a146:	69fb      	ldr	r3, [r7, #28]
 800a148:	781a      	ldrb	r2, [r3, #0]
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a150:	69fb      	ldr	r3, [r7, #28]
 800a152:	3301      	adds	r3, #1
 800a154:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a15a:	b29b      	uxth	r3, r3
 800a15c:	3b01      	subs	r3, #1
 800a15e:	b29a      	uxth	r2, r3
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a168:	b29b      	uxth	r3, r3
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d1cf      	bne.n	800a10e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	9300      	str	r3, [sp, #0]
 800a172:	697b      	ldr	r3, [r7, #20]
 800a174:	2200      	movs	r2, #0
 800a176:	2140      	movs	r1, #64	; 0x40
 800a178:	68f8      	ldr	r0, [r7, #12]
 800a17a:	f000 faef 	bl	800a75c <UART_WaitOnFlagUntilTimeout>
 800a17e:	4603      	mov	r3, r0
 800a180:	2b00      	cmp	r3, #0
 800a182:	d001      	beq.n	800a188 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a184:	2303      	movs	r3, #3
 800a186:	e006      	b.n	800a196 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	2220      	movs	r2, #32
 800a18c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a190:	2300      	movs	r3, #0
 800a192:	e000      	b.n	800a196 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a194:	2302      	movs	r3, #2
  }
}
 800a196:	4618      	mov	r0, r3
 800a198:	3720      	adds	r7, #32
 800a19a:	46bd      	mov	sp, r7
 800a19c:	bd80      	pop	{r7, pc}

0800a19e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a19e:	b580      	push	{r7, lr}
 800a1a0:	b084      	sub	sp, #16
 800a1a2:	af00      	add	r7, sp, #0
 800a1a4:	60f8      	str	r0, [r7, #12]
 800a1a6:	60b9      	str	r1, [r7, #8]
 800a1a8:	4613      	mov	r3, r2
 800a1aa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a1b2:	b2db      	uxtb	r3, r3
 800a1b4:	2b20      	cmp	r3, #32
 800a1b6:	d11d      	bne.n	800a1f4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a1b8:	68bb      	ldr	r3, [r7, #8]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d002      	beq.n	800a1c4 <HAL_UART_Receive_IT+0x26>
 800a1be:	88fb      	ldrh	r3, [r7, #6]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d101      	bne.n	800a1c8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a1c4:	2301      	movs	r3, #1
 800a1c6:	e016      	b.n	800a1f6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a1ce:	2b01      	cmp	r3, #1
 800a1d0:	d101      	bne.n	800a1d6 <HAL_UART_Receive_IT+0x38>
 800a1d2:	2302      	movs	r3, #2
 800a1d4:	e00f      	b.n	800a1f6 <HAL_UART_Receive_IT+0x58>
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	2201      	movs	r2, #1
 800a1da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a1e4:	88fb      	ldrh	r3, [r7, #6]
 800a1e6:	461a      	mov	r2, r3
 800a1e8:	68b9      	ldr	r1, [r7, #8]
 800a1ea:	68f8      	ldr	r0, [r7, #12]
 800a1ec:	f000 fb24 	bl	800a838 <UART_Start_Receive_IT>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	e000      	b.n	800a1f6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a1f4:	2302      	movs	r3, #2
  }
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	3710      	adds	r7, #16
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}
	...

0800a200 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b0ba      	sub	sp, #232	; 0xe8
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	68db      	ldr	r3, [r3, #12]
 800a218:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	695b      	ldr	r3, [r3, #20]
 800a222:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a226:	2300      	movs	r3, #0
 800a228:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a22c:	2300      	movs	r3, #0
 800a22e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a236:	f003 030f 	and.w	r3, r3, #15
 800a23a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a23e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a242:	2b00      	cmp	r3, #0
 800a244:	d10f      	bne.n	800a266 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a24a:	f003 0320 	and.w	r3, r3, #32
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d009      	beq.n	800a266 <HAL_UART_IRQHandler+0x66>
 800a252:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a256:	f003 0320 	and.w	r3, r3, #32
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d003      	beq.n	800a266 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a25e:	6878      	ldr	r0, [r7, #4]
 800a260:	f000 fc03 	bl	800aa6a <UART_Receive_IT>
      return;
 800a264:	e256      	b.n	800a714 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a266:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	f000 80de 	beq.w	800a42c <HAL_UART_IRQHandler+0x22c>
 800a270:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a274:	f003 0301 	and.w	r3, r3, #1
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d106      	bne.n	800a28a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a27c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a280:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a284:	2b00      	cmp	r3, #0
 800a286:	f000 80d1 	beq.w	800a42c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a28a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a28e:	f003 0301 	and.w	r3, r3, #1
 800a292:	2b00      	cmp	r3, #0
 800a294:	d00b      	beq.n	800a2ae <HAL_UART_IRQHandler+0xae>
 800a296:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a29a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d005      	beq.n	800a2ae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2a6:	f043 0201 	orr.w	r2, r3, #1
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a2ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2b2:	f003 0304 	and.w	r3, r3, #4
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d00b      	beq.n	800a2d2 <HAL_UART_IRQHandler+0xd2>
 800a2ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a2be:	f003 0301 	and.w	r3, r3, #1
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d005      	beq.n	800a2d2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2ca:	f043 0202 	orr.w	r2, r3, #2
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a2d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2d6:	f003 0302 	and.w	r3, r3, #2
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d00b      	beq.n	800a2f6 <HAL_UART_IRQHandler+0xf6>
 800a2de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a2e2:	f003 0301 	and.w	r3, r3, #1
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d005      	beq.n	800a2f6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2ee:	f043 0204 	orr.w	r2, r3, #4
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a2f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2fa:	f003 0308 	and.w	r3, r3, #8
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d011      	beq.n	800a326 <HAL_UART_IRQHandler+0x126>
 800a302:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a306:	f003 0320 	and.w	r3, r3, #32
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d105      	bne.n	800a31a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a30e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a312:	f003 0301 	and.w	r3, r3, #1
 800a316:	2b00      	cmp	r3, #0
 800a318:	d005      	beq.n	800a326 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a31e:	f043 0208 	orr.w	r2, r3, #8
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	f000 81ed 	beq.w	800a70a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a330:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a334:	f003 0320 	and.w	r3, r3, #32
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d008      	beq.n	800a34e <HAL_UART_IRQHandler+0x14e>
 800a33c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a340:	f003 0320 	and.w	r3, r3, #32
 800a344:	2b00      	cmp	r3, #0
 800a346:	d002      	beq.n	800a34e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a348:	6878      	ldr	r0, [r7, #4]
 800a34a:	f000 fb8e 	bl	800aa6a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	695b      	ldr	r3, [r3, #20]
 800a354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a358:	2b40      	cmp	r3, #64	; 0x40
 800a35a:	bf0c      	ite	eq
 800a35c:	2301      	moveq	r3, #1
 800a35e:	2300      	movne	r3, #0
 800a360:	b2db      	uxtb	r3, r3
 800a362:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a36a:	f003 0308 	and.w	r3, r3, #8
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d103      	bne.n	800a37a <HAL_UART_IRQHandler+0x17a>
 800a372:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a376:	2b00      	cmp	r3, #0
 800a378:	d04f      	beq.n	800a41a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f000 fa96 	bl	800a8ac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	695b      	ldr	r3, [r3, #20]
 800a386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a38a:	2b40      	cmp	r3, #64	; 0x40
 800a38c:	d141      	bne.n	800a412 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	3314      	adds	r3, #20
 800a394:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a398:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a39c:	e853 3f00 	ldrex	r3, [r3]
 800a3a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a3a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a3a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a3ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	3314      	adds	r3, #20
 800a3b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a3ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a3be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a3c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a3ca:	e841 2300 	strex	r3, r2, [r1]
 800a3ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a3d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d1d9      	bne.n	800a38e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d013      	beq.n	800a40a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3e6:	4a7d      	ldr	r2, [pc, #500]	; (800a5dc <HAL_UART_IRQHandler+0x3dc>)
 800a3e8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	f7fc fcaa 	bl	8006d48 <HAL_DMA_Abort_IT>
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d016      	beq.n	800a428 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a400:	687a      	ldr	r2, [r7, #4]
 800a402:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a404:	4610      	mov	r0, r2
 800a406:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a408:	e00e      	b.n	800a428 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a40a:	6878      	ldr	r0, [r7, #4]
 800a40c:	f000 f990 	bl	800a730 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a410:	e00a      	b.n	800a428 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a412:	6878      	ldr	r0, [r7, #4]
 800a414:	f000 f98c 	bl	800a730 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a418:	e006      	b.n	800a428 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a41a:	6878      	ldr	r0, [r7, #4]
 800a41c:	f000 f988 	bl	800a730 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	2200      	movs	r2, #0
 800a424:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a426:	e170      	b.n	800a70a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a428:	bf00      	nop
    return;
 800a42a:	e16e      	b.n	800a70a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a430:	2b01      	cmp	r3, #1
 800a432:	f040 814a 	bne.w	800a6ca <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a436:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a43a:	f003 0310 	and.w	r3, r3, #16
 800a43e:	2b00      	cmp	r3, #0
 800a440:	f000 8143 	beq.w	800a6ca <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a444:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a448:	f003 0310 	and.w	r3, r3, #16
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	f000 813c 	beq.w	800a6ca <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a452:	2300      	movs	r3, #0
 800a454:	60bb      	str	r3, [r7, #8]
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	60bb      	str	r3, [r7, #8]
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	685b      	ldr	r3, [r3, #4]
 800a464:	60bb      	str	r3, [r7, #8]
 800a466:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	695b      	ldr	r3, [r3, #20]
 800a46e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a472:	2b40      	cmp	r3, #64	; 0x40
 800a474:	f040 80b4 	bne.w	800a5e0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	685b      	ldr	r3, [r3, #4]
 800a480:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a484:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a488:	2b00      	cmp	r3, #0
 800a48a:	f000 8140 	beq.w	800a70e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a492:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a496:	429a      	cmp	r2, r3
 800a498:	f080 8139 	bcs.w	800a70e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a4a2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4a8:	69db      	ldr	r3, [r3, #28]
 800a4aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4ae:	f000 8088 	beq.w	800a5c2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	330c      	adds	r3, #12
 800a4b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a4c0:	e853 3f00 	ldrex	r3, [r3]
 800a4c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a4c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a4cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a4d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	330c      	adds	r3, #12
 800a4da:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a4de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a4e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a4ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a4ee:	e841 2300 	strex	r3, r2, [r1]
 800a4f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a4f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d1d9      	bne.n	800a4b2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	3314      	adds	r3, #20
 800a504:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a506:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a508:	e853 3f00 	ldrex	r3, [r3]
 800a50c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a50e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a510:	f023 0301 	bic.w	r3, r3, #1
 800a514:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	3314      	adds	r3, #20
 800a51e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a522:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a526:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a528:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a52a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a52e:	e841 2300 	strex	r3, r2, [r1]
 800a532:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a534:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a536:	2b00      	cmp	r3, #0
 800a538:	d1e1      	bne.n	800a4fe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	3314      	adds	r3, #20
 800a540:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a542:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a544:	e853 3f00 	ldrex	r3, [r3]
 800a548:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a54a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a54c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a550:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	3314      	adds	r3, #20
 800a55a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a55e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a560:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a562:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a564:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a566:	e841 2300 	strex	r3, r2, [r1]
 800a56a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a56c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d1e3      	bne.n	800a53a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2220      	movs	r2, #32
 800a576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2200      	movs	r2, #0
 800a57e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	330c      	adds	r3, #12
 800a586:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a588:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a58a:	e853 3f00 	ldrex	r3, [r3]
 800a58e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a590:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a592:	f023 0310 	bic.w	r3, r3, #16
 800a596:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	330c      	adds	r3, #12
 800a5a0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a5a4:	65ba      	str	r2, [r7, #88]	; 0x58
 800a5a6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a5aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a5ac:	e841 2300 	strex	r3, r2, [r1]
 800a5b0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a5b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d1e3      	bne.n	800a580 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5bc:	4618      	mov	r0, r3
 800a5be:	f7fc fb53 	bl	8006c68 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a5ca:	b29b      	uxth	r3, r3
 800a5cc:	1ad3      	subs	r3, r2, r3
 800a5ce:	b29b      	uxth	r3, r3
 800a5d0:	4619      	mov	r1, r3
 800a5d2:	6878      	ldr	r0, [r7, #4]
 800a5d4:	f000 f8b6 	bl	800a744 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a5d8:	e099      	b.n	800a70e <HAL_UART_IRQHandler+0x50e>
 800a5da:	bf00      	nop
 800a5dc:	0800a973 	.word	0x0800a973
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a5e8:	b29b      	uxth	r3, r3
 800a5ea:	1ad3      	subs	r3, r2, r3
 800a5ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a5f4:	b29b      	uxth	r3, r3
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	f000 808b 	beq.w	800a712 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a5fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a600:	2b00      	cmp	r3, #0
 800a602:	f000 8086 	beq.w	800a712 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	330c      	adds	r3, #12
 800a60c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a60e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a610:	e853 3f00 	ldrex	r3, [r3]
 800a614:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a618:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a61c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	330c      	adds	r3, #12
 800a626:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a62a:	647a      	str	r2, [r7, #68]	; 0x44
 800a62c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a62e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a630:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a632:	e841 2300 	strex	r3, r2, [r1]
 800a636:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d1e3      	bne.n	800a606 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	3314      	adds	r3, #20
 800a644:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a648:	e853 3f00 	ldrex	r3, [r3]
 800a64c:	623b      	str	r3, [r7, #32]
   return(result);
 800a64e:	6a3b      	ldr	r3, [r7, #32]
 800a650:	f023 0301 	bic.w	r3, r3, #1
 800a654:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	3314      	adds	r3, #20
 800a65e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a662:	633a      	str	r2, [r7, #48]	; 0x30
 800a664:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a666:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a668:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a66a:	e841 2300 	strex	r3, r2, [r1]
 800a66e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a672:	2b00      	cmp	r3, #0
 800a674:	d1e3      	bne.n	800a63e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2220      	movs	r2, #32
 800a67a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	2200      	movs	r2, #0
 800a682:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	330c      	adds	r3, #12
 800a68a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a68c:	693b      	ldr	r3, [r7, #16]
 800a68e:	e853 3f00 	ldrex	r3, [r3]
 800a692:	60fb      	str	r3, [r7, #12]
   return(result);
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	f023 0310 	bic.w	r3, r3, #16
 800a69a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	330c      	adds	r3, #12
 800a6a4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a6a8:	61fa      	str	r2, [r7, #28]
 800a6aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6ac:	69b9      	ldr	r1, [r7, #24]
 800a6ae:	69fa      	ldr	r2, [r7, #28]
 800a6b0:	e841 2300 	strex	r3, r2, [r1]
 800a6b4:	617b      	str	r3, [r7, #20]
   return(result);
 800a6b6:	697b      	ldr	r3, [r7, #20]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d1e3      	bne.n	800a684 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a6bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a6c0:	4619      	mov	r1, r3
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f000 f83e 	bl	800a744 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a6c8:	e023      	b.n	800a712 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a6ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d009      	beq.n	800a6ea <HAL_UART_IRQHandler+0x4ea>
 800a6d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a6da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d003      	beq.n	800a6ea <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	f000 f959 	bl	800a99a <UART_Transmit_IT>
    return;
 800a6e8:	e014      	b.n	800a714 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a6ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d00e      	beq.n	800a714 <HAL_UART_IRQHandler+0x514>
 800a6f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a6fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d008      	beq.n	800a714 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	f000 f999 	bl	800aa3a <UART_EndTransmit_IT>
    return;
 800a708:	e004      	b.n	800a714 <HAL_UART_IRQHandler+0x514>
    return;
 800a70a:	bf00      	nop
 800a70c:	e002      	b.n	800a714 <HAL_UART_IRQHandler+0x514>
      return;
 800a70e:	bf00      	nop
 800a710:	e000      	b.n	800a714 <HAL_UART_IRQHandler+0x514>
      return;
 800a712:	bf00      	nop
  }
}
 800a714:	37e8      	adds	r7, #232	; 0xe8
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}
 800a71a:	bf00      	nop

0800a71c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a71c:	b480      	push	{r7}
 800a71e:	b083      	sub	sp, #12
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a724:	bf00      	nop
 800a726:	370c      	adds	r7, #12
 800a728:	46bd      	mov	sp, r7
 800a72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72e:	4770      	bx	lr

0800a730 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a730:	b480      	push	{r7}
 800a732:	b083      	sub	sp, #12
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a738:	bf00      	nop
 800a73a:	370c      	adds	r7, #12
 800a73c:	46bd      	mov	sp, r7
 800a73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a742:	4770      	bx	lr

0800a744 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a744:	b480      	push	{r7}
 800a746:	b083      	sub	sp, #12
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
 800a74c:	460b      	mov	r3, r1
 800a74e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a750:	bf00      	nop
 800a752:	370c      	adds	r7, #12
 800a754:	46bd      	mov	sp, r7
 800a756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75a:	4770      	bx	lr

0800a75c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b090      	sub	sp, #64	; 0x40
 800a760:	af00      	add	r7, sp, #0
 800a762:	60f8      	str	r0, [r7, #12]
 800a764:	60b9      	str	r1, [r7, #8]
 800a766:	603b      	str	r3, [r7, #0]
 800a768:	4613      	mov	r3, r2
 800a76a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a76c:	e050      	b.n	800a810 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a76e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a770:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a774:	d04c      	beq.n	800a810 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a776:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d007      	beq.n	800a78c <UART_WaitOnFlagUntilTimeout+0x30>
 800a77c:	f7fb fae6 	bl	8005d4c <HAL_GetTick>
 800a780:	4602      	mov	r2, r0
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	1ad3      	subs	r3, r2, r3
 800a786:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a788:	429a      	cmp	r2, r3
 800a78a:	d241      	bcs.n	800a810 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	330c      	adds	r3, #12
 800a792:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a796:	e853 3f00 	ldrex	r3, [r3]
 800a79a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a79c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a79e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a7a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	330c      	adds	r3, #12
 800a7aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a7ac:	637a      	str	r2, [r7, #52]	; 0x34
 800a7ae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a7b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a7b4:	e841 2300 	strex	r3, r2, [r1]
 800a7b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a7ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d1e5      	bne.n	800a78c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	3314      	adds	r3, #20
 800a7c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7c8:	697b      	ldr	r3, [r7, #20]
 800a7ca:	e853 3f00 	ldrex	r3, [r3]
 800a7ce:	613b      	str	r3, [r7, #16]
   return(result);
 800a7d0:	693b      	ldr	r3, [r7, #16]
 800a7d2:	f023 0301 	bic.w	r3, r3, #1
 800a7d6:	63bb      	str	r3, [r7, #56]	; 0x38
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	3314      	adds	r3, #20
 800a7de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a7e0:	623a      	str	r2, [r7, #32]
 800a7e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7e4:	69f9      	ldr	r1, [r7, #28]
 800a7e6:	6a3a      	ldr	r2, [r7, #32]
 800a7e8:	e841 2300 	strex	r3, r2, [r1]
 800a7ec:	61bb      	str	r3, [r7, #24]
   return(result);
 800a7ee:	69bb      	ldr	r3, [r7, #24]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d1e5      	bne.n	800a7c0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	2220      	movs	r2, #32
 800a7f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	2220      	movs	r2, #32
 800a800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	2200      	movs	r2, #0
 800a808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a80c:	2303      	movs	r3, #3
 800a80e:	e00f      	b.n	800a830 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	681a      	ldr	r2, [r3, #0]
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	4013      	ands	r3, r2
 800a81a:	68ba      	ldr	r2, [r7, #8]
 800a81c:	429a      	cmp	r2, r3
 800a81e:	bf0c      	ite	eq
 800a820:	2301      	moveq	r3, #1
 800a822:	2300      	movne	r3, #0
 800a824:	b2db      	uxtb	r3, r3
 800a826:	461a      	mov	r2, r3
 800a828:	79fb      	ldrb	r3, [r7, #7]
 800a82a:	429a      	cmp	r2, r3
 800a82c:	d09f      	beq.n	800a76e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a82e:	2300      	movs	r3, #0
}
 800a830:	4618      	mov	r0, r3
 800a832:	3740      	adds	r7, #64	; 0x40
 800a834:	46bd      	mov	sp, r7
 800a836:	bd80      	pop	{r7, pc}

0800a838 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a838:	b480      	push	{r7}
 800a83a:	b085      	sub	sp, #20
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	60f8      	str	r0, [r7, #12]
 800a840:	60b9      	str	r1, [r7, #8]
 800a842:	4613      	mov	r3, r2
 800a844:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	68ba      	ldr	r2, [r7, #8]
 800a84a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	88fa      	ldrh	r2, [r7, #6]
 800a850:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	88fa      	ldrh	r2, [r7, #6]
 800a856:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	2200      	movs	r2, #0
 800a85c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	2222      	movs	r2, #34	; 0x22
 800a862:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	2200      	movs	r2, #0
 800a86a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	68da      	ldr	r2, [r3, #12]
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a87c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	695a      	ldr	r2, [r3, #20]
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	f042 0201 	orr.w	r2, r2, #1
 800a88c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	68da      	ldr	r2, [r3, #12]
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	f042 0220 	orr.w	r2, r2, #32
 800a89c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a89e:	2300      	movs	r3, #0
}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	3714      	adds	r7, #20
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8aa:	4770      	bx	lr

0800a8ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a8ac:	b480      	push	{r7}
 800a8ae:	b095      	sub	sp, #84	; 0x54
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	330c      	adds	r3, #12
 800a8ba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8be:	e853 3f00 	ldrex	r3, [r3]
 800a8c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a8c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a8ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	330c      	adds	r3, #12
 800a8d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a8d4:	643a      	str	r2, [r7, #64]	; 0x40
 800a8d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a8da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a8dc:	e841 2300 	strex	r3, r2, [r1]
 800a8e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a8e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d1e5      	bne.n	800a8b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	3314      	adds	r3, #20
 800a8ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8f0:	6a3b      	ldr	r3, [r7, #32]
 800a8f2:	e853 3f00 	ldrex	r3, [r3]
 800a8f6:	61fb      	str	r3, [r7, #28]
   return(result);
 800a8f8:	69fb      	ldr	r3, [r7, #28]
 800a8fa:	f023 0301 	bic.w	r3, r3, #1
 800a8fe:	64bb      	str	r3, [r7, #72]	; 0x48
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	3314      	adds	r3, #20
 800a906:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a908:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a90a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a90c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a90e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a910:	e841 2300 	strex	r3, r2, [r1]
 800a914:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d1e5      	bne.n	800a8e8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a920:	2b01      	cmp	r3, #1
 800a922:	d119      	bne.n	800a958 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	330c      	adds	r3, #12
 800a92a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	e853 3f00 	ldrex	r3, [r3]
 800a932:	60bb      	str	r3, [r7, #8]
   return(result);
 800a934:	68bb      	ldr	r3, [r7, #8]
 800a936:	f023 0310 	bic.w	r3, r3, #16
 800a93a:	647b      	str	r3, [r7, #68]	; 0x44
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	330c      	adds	r3, #12
 800a942:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a944:	61ba      	str	r2, [r7, #24]
 800a946:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a948:	6979      	ldr	r1, [r7, #20]
 800a94a:	69ba      	ldr	r2, [r7, #24]
 800a94c:	e841 2300 	strex	r3, r2, [r1]
 800a950:	613b      	str	r3, [r7, #16]
   return(result);
 800a952:	693b      	ldr	r3, [r7, #16]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d1e5      	bne.n	800a924 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2220      	movs	r2, #32
 800a95c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2200      	movs	r2, #0
 800a964:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a966:	bf00      	nop
 800a968:	3754      	adds	r7, #84	; 0x54
 800a96a:	46bd      	mov	sp, r7
 800a96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a970:	4770      	bx	lr

0800a972 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a972:	b580      	push	{r7, lr}
 800a974:	b084      	sub	sp, #16
 800a976:	af00      	add	r7, sp, #0
 800a978:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a97e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	2200      	movs	r2, #0
 800a984:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	2200      	movs	r2, #0
 800a98a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a98c:	68f8      	ldr	r0, [r7, #12]
 800a98e:	f7ff fecf 	bl	800a730 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a992:	bf00      	nop
 800a994:	3710      	adds	r7, #16
 800a996:	46bd      	mov	sp, r7
 800a998:	bd80      	pop	{r7, pc}

0800a99a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a99a:	b480      	push	{r7}
 800a99c:	b085      	sub	sp, #20
 800a99e:	af00      	add	r7, sp, #0
 800a9a0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a9a8:	b2db      	uxtb	r3, r3
 800a9aa:	2b21      	cmp	r3, #33	; 0x21
 800a9ac:	d13e      	bne.n	800aa2c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	689b      	ldr	r3, [r3, #8]
 800a9b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9b6:	d114      	bne.n	800a9e2 <UART_Transmit_IT+0x48>
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	691b      	ldr	r3, [r3, #16]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d110      	bne.n	800a9e2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	6a1b      	ldr	r3, [r3, #32]
 800a9c4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	881b      	ldrh	r3, [r3, #0]
 800a9ca:	461a      	mov	r2, r3
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a9d4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	6a1b      	ldr	r3, [r3, #32]
 800a9da:	1c9a      	adds	r2, r3, #2
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	621a      	str	r2, [r3, #32]
 800a9e0:	e008      	b.n	800a9f4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	6a1b      	ldr	r3, [r3, #32]
 800a9e6:	1c59      	adds	r1, r3, #1
 800a9e8:	687a      	ldr	r2, [r7, #4]
 800a9ea:	6211      	str	r1, [r2, #32]
 800a9ec:	781a      	ldrb	r2, [r3, #0]
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a9f8:	b29b      	uxth	r3, r3
 800a9fa:	3b01      	subs	r3, #1
 800a9fc:	b29b      	uxth	r3, r3
 800a9fe:	687a      	ldr	r2, [r7, #4]
 800aa00:	4619      	mov	r1, r3
 800aa02:	84d1      	strh	r1, [r2, #38]	; 0x26
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d10f      	bne.n	800aa28 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	68da      	ldr	r2, [r3, #12]
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800aa16:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	68da      	ldr	r2, [r3, #12]
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aa26:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800aa28:	2300      	movs	r3, #0
 800aa2a:	e000      	b.n	800aa2e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800aa2c:	2302      	movs	r3, #2
  }
}
 800aa2e:	4618      	mov	r0, r3
 800aa30:	3714      	adds	r7, #20
 800aa32:	46bd      	mov	sp, r7
 800aa34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa38:	4770      	bx	lr

0800aa3a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800aa3a:	b580      	push	{r7, lr}
 800aa3c:	b082      	sub	sp, #8
 800aa3e:	af00      	add	r7, sp, #0
 800aa40:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	68da      	ldr	r2, [r3, #12]
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aa50:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	2220      	movs	r2, #32
 800aa56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800aa5a:	6878      	ldr	r0, [r7, #4]
 800aa5c:	f7ff fe5e 	bl	800a71c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800aa60:	2300      	movs	r3, #0
}
 800aa62:	4618      	mov	r0, r3
 800aa64:	3708      	adds	r7, #8
 800aa66:	46bd      	mov	sp, r7
 800aa68:	bd80      	pop	{r7, pc}

0800aa6a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800aa6a:	b580      	push	{r7, lr}
 800aa6c:	b08c      	sub	sp, #48	; 0x30
 800aa6e:	af00      	add	r7, sp, #0
 800aa70:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aa78:	b2db      	uxtb	r3, r3
 800aa7a:	2b22      	cmp	r3, #34	; 0x22
 800aa7c:	f040 80ab 	bne.w	800abd6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	689b      	ldr	r3, [r3, #8]
 800aa84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa88:	d117      	bne.n	800aaba <UART_Receive_IT+0x50>
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	691b      	ldr	r3, [r3, #16]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d113      	bne.n	800aaba <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800aa92:	2300      	movs	r3, #0
 800aa94:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa9a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	685b      	ldr	r3, [r3, #4]
 800aaa2:	b29b      	uxth	r3, r3
 800aaa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aaa8:	b29a      	uxth	r2, r3
 800aaaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aab2:	1c9a      	adds	r2, r3, #2
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	629a      	str	r2, [r3, #40]	; 0x28
 800aab8:	e026      	b.n	800ab08 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aabe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800aac0:	2300      	movs	r3, #0
 800aac2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	689b      	ldr	r3, [r3, #8]
 800aac8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aacc:	d007      	beq.n	800aade <UART_Receive_IT+0x74>
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	689b      	ldr	r3, [r3, #8]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d10a      	bne.n	800aaec <UART_Receive_IT+0x82>
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	691b      	ldr	r3, [r3, #16]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d106      	bne.n	800aaec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	685b      	ldr	r3, [r3, #4]
 800aae4:	b2da      	uxtb	r2, r3
 800aae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aae8:	701a      	strb	r2, [r3, #0]
 800aaea:	e008      	b.n	800aafe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	685b      	ldr	r3, [r3, #4]
 800aaf2:	b2db      	uxtb	r3, r3
 800aaf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aaf8:	b2da      	uxtb	r2, r3
 800aafa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aafc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab02:	1c5a      	adds	r2, r3, #1
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ab0c:	b29b      	uxth	r3, r3
 800ab0e:	3b01      	subs	r3, #1
 800ab10:	b29b      	uxth	r3, r3
 800ab12:	687a      	ldr	r2, [r7, #4]
 800ab14:	4619      	mov	r1, r3
 800ab16:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d15a      	bne.n	800abd2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	68da      	ldr	r2, [r3, #12]
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	f022 0220 	bic.w	r2, r2, #32
 800ab2a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	68da      	ldr	r2, [r3, #12]
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ab3a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	695a      	ldr	r2, [r3, #20]
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	f022 0201 	bic.w	r2, r2, #1
 800ab4a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2220      	movs	r2, #32
 800ab50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab58:	2b01      	cmp	r3, #1
 800ab5a:	d135      	bne.n	800abc8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2200      	movs	r2, #0
 800ab60:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	330c      	adds	r3, #12
 800ab68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab6a:	697b      	ldr	r3, [r7, #20]
 800ab6c:	e853 3f00 	ldrex	r3, [r3]
 800ab70:	613b      	str	r3, [r7, #16]
   return(result);
 800ab72:	693b      	ldr	r3, [r7, #16]
 800ab74:	f023 0310 	bic.w	r3, r3, #16
 800ab78:	627b      	str	r3, [r7, #36]	; 0x24
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	330c      	adds	r3, #12
 800ab80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab82:	623a      	str	r2, [r7, #32]
 800ab84:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab86:	69f9      	ldr	r1, [r7, #28]
 800ab88:	6a3a      	ldr	r2, [r7, #32]
 800ab8a:	e841 2300 	strex	r3, r2, [r1]
 800ab8e:	61bb      	str	r3, [r7, #24]
   return(result);
 800ab90:	69bb      	ldr	r3, [r7, #24]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d1e5      	bne.n	800ab62 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	f003 0310 	and.w	r3, r3, #16
 800aba0:	2b10      	cmp	r3, #16
 800aba2:	d10a      	bne.n	800abba <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800aba4:	2300      	movs	r3, #0
 800aba6:	60fb      	str	r3, [r7, #12]
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	60fb      	str	r3, [r7, #12]
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	685b      	ldr	r3, [r3, #4]
 800abb6:	60fb      	str	r3, [r7, #12]
 800abb8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800abbe:	4619      	mov	r1, r3
 800abc0:	6878      	ldr	r0, [r7, #4]
 800abc2:	f7ff fdbf 	bl	800a744 <HAL_UARTEx_RxEventCallback>
 800abc6:	e002      	b.n	800abce <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800abc8:	6878      	ldr	r0, [r7, #4]
 800abca:	f7f8 facd 	bl	8003168 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800abce:	2300      	movs	r3, #0
 800abd0:	e002      	b.n	800abd8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800abd2:	2300      	movs	r3, #0
 800abd4:	e000      	b.n	800abd8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800abd6:	2302      	movs	r3, #2
  }
}
 800abd8:	4618      	mov	r0, r3
 800abda:	3730      	adds	r7, #48	; 0x30
 800abdc:	46bd      	mov	sp, r7
 800abde:	bd80      	pop	{r7, pc}

0800abe0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800abe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abe4:	b09f      	sub	sp, #124	; 0x7c
 800abe6:	af00      	add	r7, sp, #0
 800abe8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800abea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	691b      	ldr	r3, [r3, #16]
 800abf0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800abf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abf6:	68d9      	ldr	r1, [r3, #12]
 800abf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abfa:	681a      	ldr	r2, [r3, #0]
 800abfc:	ea40 0301 	orr.w	r3, r0, r1
 800ac00:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ac02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac04:	689a      	ldr	r2, [r3, #8]
 800ac06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac08:	691b      	ldr	r3, [r3, #16]
 800ac0a:	431a      	orrs	r2, r3
 800ac0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac0e:	695b      	ldr	r3, [r3, #20]
 800ac10:	431a      	orrs	r2, r3
 800ac12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac14:	69db      	ldr	r3, [r3, #28]
 800ac16:	4313      	orrs	r3, r2
 800ac18:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800ac1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	68db      	ldr	r3, [r3, #12]
 800ac20:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800ac24:	f021 010c 	bic.w	r1, r1, #12
 800ac28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac2a:	681a      	ldr	r2, [r3, #0]
 800ac2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ac2e:	430b      	orrs	r3, r1
 800ac30:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ac32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	695b      	ldr	r3, [r3, #20]
 800ac38:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800ac3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac3e:	6999      	ldr	r1, [r3, #24]
 800ac40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac42:	681a      	ldr	r2, [r3, #0]
 800ac44:	ea40 0301 	orr.w	r3, r0, r1
 800ac48:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ac4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac4c:	681a      	ldr	r2, [r3, #0]
 800ac4e:	4bc5      	ldr	r3, [pc, #788]	; (800af64 <UART_SetConfig+0x384>)
 800ac50:	429a      	cmp	r2, r3
 800ac52:	d004      	beq.n	800ac5e <UART_SetConfig+0x7e>
 800ac54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac56:	681a      	ldr	r2, [r3, #0]
 800ac58:	4bc3      	ldr	r3, [pc, #780]	; (800af68 <UART_SetConfig+0x388>)
 800ac5a:	429a      	cmp	r2, r3
 800ac5c:	d103      	bne.n	800ac66 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ac5e:	f7fd fd79 	bl	8008754 <HAL_RCC_GetPCLK2Freq>
 800ac62:	6778      	str	r0, [r7, #116]	; 0x74
 800ac64:	e002      	b.n	800ac6c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ac66:	f7fd fd61 	bl	800872c <HAL_RCC_GetPCLK1Freq>
 800ac6a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ac6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac6e:	69db      	ldr	r3, [r3, #28]
 800ac70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ac74:	f040 80b6 	bne.w	800ade4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ac78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ac7a:	461c      	mov	r4, r3
 800ac7c:	f04f 0500 	mov.w	r5, #0
 800ac80:	4622      	mov	r2, r4
 800ac82:	462b      	mov	r3, r5
 800ac84:	1891      	adds	r1, r2, r2
 800ac86:	6439      	str	r1, [r7, #64]	; 0x40
 800ac88:	415b      	adcs	r3, r3
 800ac8a:	647b      	str	r3, [r7, #68]	; 0x44
 800ac8c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ac90:	1912      	adds	r2, r2, r4
 800ac92:	eb45 0303 	adc.w	r3, r5, r3
 800ac96:	f04f 0000 	mov.w	r0, #0
 800ac9a:	f04f 0100 	mov.w	r1, #0
 800ac9e:	00d9      	lsls	r1, r3, #3
 800aca0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800aca4:	00d0      	lsls	r0, r2, #3
 800aca6:	4602      	mov	r2, r0
 800aca8:	460b      	mov	r3, r1
 800acaa:	1911      	adds	r1, r2, r4
 800acac:	6639      	str	r1, [r7, #96]	; 0x60
 800acae:	416b      	adcs	r3, r5
 800acb0:	667b      	str	r3, [r7, #100]	; 0x64
 800acb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800acb4:	685b      	ldr	r3, [r3, #4]
 800acb6:	461a      	mov	r2, r3
 800acb8:	f04f 0300 	mov.w	r3, #0
 800acbc:	1891      	adds	r1, r2, r2
 800acbe:	63b9      	str	r1, [r7, #56]	; 0x38
 800acc0:	415b      	adcs	r3, r3
 800acc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800acc4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800acc8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800accc:	f7f5 ffe4 	bl	8000c98 <__aeabi_uldivmod>
 800acd0:	4602      	mov	r2, r0
 800acd2:	460b      	mov	r3, r1
 800acd4:	4ba5      	ldr	r3, [pc, #660]	; (800af6c <UART_SetConfig+0x38c>)
 800acd6:	fba3 2302 	umull	r2, r3, r3, r2
 800acda:	095b      	lsrs	r3, r3, #5
 800acdc:	011e      	lsls	r6, r3, #4
 800acde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ace0:	461c      	mov	r4, r3
 800ace2:	f04f 0500 	mov.w	r5, #0
 800ace6:	4622      	mov	r2, r4
 800ace8:	462b      	mov	r3, r5
 800acea:	1891      	adds	r1, r2, r2
 800acec:	6339      	str	r1, [r7, #48]	; 0x30
 800acee:	415b      	adcs	r3, r3
 800acf0:	637b      	str	r3, [r7, #52]	; 0x34
 800acf2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800acf6:	1912      	adds	r2, r2, r4
 800acf8:	eb45 0303 	adc.w	r3, r5, r3
 800acfc:	f04f 0000 	mov.w	r0, #0
 800ad00:	f04f 0100 	mov.w	r1, #0
 800ad04:	00d9      	lsls	r1, r3, #3
 800ad06:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ad0a:	00d0      	lsls	r0, r2, #3
 800ad0c:	4602      	mov	r2, r0
 800ad0e:	460b      	mov	r3, r1
 800ad10:	1911      	adds	r1, r2, r4
 800ad12:	65b9      	str	r1, [r7, #88]	; 0x58
 800ad14:	416b      	adcs	r3, r5
 800ad16:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ad18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad1a:	685b      	ldr	r3, [r3, #4]
 800ad1c:	461a      	mov	r2, r3
 800ad1e:	f04f 0300 	mov.w	r3, #0
 800ad22:	1891      	adds	r1, r2, r2
 800ad24:	62b9      	str	r1, [r7, #40]	; 0x28
 800ad26:	415b      	adcs	r3, r3
 800ad28:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ad2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800ad2e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800ad32:	f7f5 ffb1 	bl	8000c98 <__aeabi_uldivmod>
 800ad36:	4602      	mov	r2, r0
 800ad38:	460b      	mov	r3, r1
 800ad3a:	4b8c      	ldr	r3, [pc, #560]	; (800af6c <UART_SetConfig+0x38c>)
 800ad3c:	fba3 1302 	umull	r1, r3, r3, r2
 800ad40:	095b      	lsrs	r3, r3, #5
 800ad42:	2164      	movs	r1, #100	; 0x64
 800ad44:	fb01 f303 	mul.w	r3, r1, r3
 800ad48:	1ad3      	subs	r3, r2, r3
 800ad4a:	00db      	lsls	r3, r3, #3
 800ad4c:	3332      	adds	r3, #50	; 0x32
 800ad4e:	4a87      	ldr	r2, [pc, #540]	; (800af6c <UART_SetConfig+0x38c>)
 800ad50:	fba2 2303 	umull	r2, r3, r2, r3
 800ad54:	095b      	lsrs	r3, r3, #5
 800ad56:	005b      	lsls	r3, r3, #1
 800ad58:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ad5c:	441e      	add	r6, r3
 800ad5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ad60:	4618      	mov	r0, r3
 800ad62:	f04f 0100 	mov.w	r1, #0
 800ad66:	4602      	mov	r2, r0
 800ad68:	460b      	mov	r3, r1
 800ad6a:	1894      	adds	r4, r2, r2
 800ad6c:	623c      	str	r4, [r7, #32]
 800ad6e:	415b      	adcs	r3, r3
 800ad70:	627b      	str	r3, [r7, #36]	; 0x24
 800ad72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ad76:	1812      	adds	r2, r2, r0
 800ad78:	eb41 0303 	adc.w	r3, r1, r3
 800ad7c:	f04f 0400 	mov.w	r4, #0
 800ad80:	f04f 0500 	mov.w	r5, #0
 800ad84:	00dd      	lsls	r5, r3, #3
 800ad86:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800ad8a:	00d4      	lsls	r4, r2, #3
 800ad8c:	4622      	mov	r2, r4
 800ad8e:	462b      	mov	r3, r5
 800ad90:	1814      	adds	r4, r2, r0
 800ad92:	653c      	str	r4, [r7, #80]	; 0x50
 800ad94:	414b      	adcs	r3, r1
 800ad96:	657b      	str	r3, [r7, #84]	; 0x54
 800ad98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad9a:	685b      	ldr	r3, [r3, #4]
 800ad9c:	461a      	mov	r2, r3
 800ad9e:	f04f 0300 	mov.w	r3, #0
 800ada2:	1891      	adds	r1, r2, r2
 800ada4:	61b9      	str	r1, [r7, #24]
 800ada6:	415b      	adcs	r3, r3
 800ada8:	61fb      	str	r3, [r7, #28]
 800adaa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800adae:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800adb2:	f7f5 ff71 	bl	8000c98 <__aeabi_uldivmod>
 800adb6:	4602      	mov	r2, r0
 800adb8:	460b      	mov	r3, r1
 800adba:	4b6c      	ldr	r3, [pc, #432]	; (800af6c <UART_SetConfig+0x38c>)
 800adbc:	fba3 1302 	umull	r1, r3, r3, r2
 800adc0:	095b      	lsrs	r3, r3, #5
 800adc2:	2164      	movs	r1, #100	; 0x64
 800adc4:	fb01 f303 	mul.w	r3, r1, r3
 800adc8:	1ad3      	subs	r3, r2, r3
 800adca:	00db      	lsls	r3, r3, #3
 800adcc:	3332      	adds	r3, #50	; 0x32
 800adce:	4a67      	ldr	r2, [pc, #412]	; (800af6c <UART_SetConfig+0x38c>)
 800add0:	fba2 2303 	umull	r2, r3, r2, r3
 800add4:	095b      	lsrs	r3, r3, #5
 800add6:	f003 0207 	and.w	r2, r3, #7
 800adda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	4432      	add	r2, r6
 800ade0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ade2:	e0b9      	b.n	800af58 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ade4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ade6:	461c      	mov	r4, r3
 800ade8:	f04f 0500 	mov.w	r5, #0
 800adec:	4622      	mov	r2, r4
 800adee:	462b      	mov	r3, r5
 800adf0:	1891      	adds	r1, r2, r2
 800adf2:	6139      	str	r1, [r7, #16]
 800adf4:	415b      	adcs	r3, r3
 800adf6:	617b      	str	r3, [r7, #20]
 800adf8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800adfc:	1912      	adds	r2, r2, r4
 800adfe:	eb45 0303 	adc.w	r3, r5, r3
 800ae02:	f04f 0000 	mov.w	r0, #0
 800ae06:	f04f 0100 	mov.w	r1, #0
 800ae0a:	00d9      	lsls	r1, r3, #3
 800ae0c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ae10:	00d0      	lsls	r0, r2, #3
 800ae12:	4602      	mov	r2, r0
 800ae14:	460b      	mov	r3, r1
 800ae16:	eb12 0804 	adds.w	r8, r2, r4
 800ae1a:	eb43 0905 	adc.w	r9, r3, r5
 800ae1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae20:	685b      	ldr	r3, [r3, #4]
 800ae22:	4618      	mov	r0, r3
 800ae24:	f04f 0100 	mov.w	r1, #0
 800ae28:	f04f 0200 	mov.w	r2, #0
 800ae2c:	f04f 0300 	mov.w	r3, #0
 800ae30:	008b      	lsls	r3, r1, #2
 800ae32:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800ae36:	0082      	lsls	r2, r0, #2
 800ae38:	4640      	mov	r0, r8
 800ae3a:	4649      	mov	r1, r9
 800ae3c:	f7f5 ff2c 	bl	8000c98 <__aeabi_uldivmod>
 800ae40:	4602      	mov	r2, r0
 800ae42:	460b      	mov	r3, r1
 800ae44:	4b49      	ldr	r3, [pc, #292]	; (800af6c <UART_SetConfig+0x38c>)
 800ae46:	fba3 2302 	umull	r2, r3, r3, r2
 800ae4a:	095b      	lsrs	r3, r3, #5
 800ae4c:	011e      	lsls	r6, r3, #4
 800ae4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ae50:	4618      	mov	r0, r3
 800ae52:	f04f 0100 	mov.w	r1, #0
 800ae56:	4602      	mov	r2, r0
 800ae58:	460b      	mov	r3, r1
 800ae5a:	1894      	adds	r4, r2, r2
 800ae5c:	60bc      	str	r4, [r7, #8]
 800ae5e:	415b      	adcs	r3, r3
 800ae60:	60fb      	str	r3, [r7, #12]
 800ae62:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ae66:	1812      	adds	r2, r2, r0
 800ae68:	eb41 0303 	adc.w	r3, r1, r3
 800ae6c:	f04f 0400 	mov.w	r4, #0
 800ae70:	f04f 0500 	mov.w	r5, #0
 800ae74:	00dd      	lsls	r5, r3, #3
 800ae76:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800ae7a:	00d4      	lsls	r4, r2, #3
 800ae7c:	4622      	mov	r2, r4
 800ae7e:	462b      	mov	r3, r5
 800ae80:	1814      	adds	r4, r2, r0
 800ae82:	64bc      	str	r4, [r7, #72]	; 0x48
 800ae84:	414b      	adcs	r3, r1
 800ae86:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ae88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae8a:	685b      	ldr	r3, [r3, #4]
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	f04f 0100 	mov.w	r1, #0
 800ae92:	f04f 0200 	mov.w	r2, #0
 800ae96:	f04f 0300 	mov.w	r3, #0
 800ae9a:	008b      	lsls	r3, r1, #2
 800ae9c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800aea0:	0082      	lsls	r2, r0, #2
 800aea2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800aea6:	f7f5 fef7 	bl	8000c98 <__aeabi_uldivmod>
 800aeaa:	4602      	mov	r2, r0
 800aeac:	460b      	mov	r3, r1
 800aeae:	4b2f      	ldr	r3, [pc, #188]	; (800af6c <UART_SetConfig+0x38c>)
 800aeb0:	fba3 1302 	umull	r1, r3, r3, r2
 800aeb4:	095b      	lsrs	r3, r3, #5
 800aeb6:	2164      	movs	r1, #100	; 0x64
 800aeb8:	fb01 f303 	mul.w	r3, r1, r3
 800aebc:	1ad3      	subs	r3, r2, r3
 800aebe:	011b      	lsls	r3, r3, #4
 800aec0:	3332      	adds	r3, #50	; 0x32
 800aec2:	4a2a      	ldr	r2, [pc, #168]	; (800af6c <UART_SetConfig+0x38c>)
 800aec4:	fba2 2303 	umull	r2, r3, r2, r3
 800aec8:	095b      	lsrs	r3, r3, #5
 800aeca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aece:	441e      	add	r6, r3
 800aed0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aed2:	4618      	mov	r0, r3
 800aed4:	f04f 0100 	mov.w	r1, #0
 800aed8:	4602      	mov	r2, r0
 800aeda:	460b      	mov	r3, r1
 800aedc:	1894      	adds	r4, r2, r2
 800aede:	603c      	str	r4, [r7, #0]
 800aee0:	415b      	adcs	r3, r3
 800aee2:	607b      	str	r3, [r7, #4]
 800aee4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aee8:	1812      	adds	r2, r2, r0
 800aeea:	eb41 0303 	adc.w	r3, r1, r3
 800aeee:	f04f 0400 	mov.w	r4, #0
 800aef2:	f04f 0500 	mov.w	r5, #0
 800aef6:	00dd      	lsls	r5, r3, #3
 800aef8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800aefc:	00d4      	lsls	r4, r2, #3
 800aefe:	4622      	mov	r2, r4
 800af00:	462b      	mov	r3, r5
 800af02:	eb12 0a00 	adds.w	sl, r2, r0
 800af06:	eb43 0b01 	adc.w	fp, r3, r1
 800af0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af0c:	685b      	ldr	r3, [r3, #4]
 800af0e:	4618      	mov	r0, r3
 800af10:	f04f 0100 	mov.w	r1, #0
 800af14:	f04f 0200 	mov.w	r2, #0
 800af18:	f04f 0300 	mov.w	r3, #0
 800af1c:	008b      	lsls	r3, r1, #2
 800af1e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800af22:	0082      	lsls	r2, r0, #2
 800af24:	4650      	mov	r0, sl
 800af26:	4659      	mov	r1, fp
 800af28:	f7f5 feb6 	bl	8000c98 <__aeabi_uldivmod>
 800af2c:	4602      	mov	r2, r0
 800af2e:	460b      	mov	r3, r1
 800af30:	4b0e      	ldr	r3, [pc, #56]	; (800af6c <UART_SetConfig+0x38c>)
 800af32:	fba3 1302 	umull	r1, r3, r3, r2
 800af36:	095b      	lsrs	r3, r3, #5
 800af38:	2164      	movs	r1, #100	; 0x64
 800af3a:	fb01 f303 	mul.w	r3, r1, r3
 800af3e:	1ad3      	subs	r3, r2, r3
 800af40:	011b      	lsls	r3, r3, #4
 800af42:	3332      	adds	r3, #50	; 0x32
 800af44:	4a09      	ldr	r2, [pc, #36]	; (800af6c <UART_SetConfig+0x38c>)
 800af46:	fba2 2303 	umull	r2, r3, r2, r3
 800af4a:	095b      	lsrs	r3, r3, #5
 800af4c:	f003 020f 	and.w	r2, r3, #15
 800af50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	4432      	add	r2, r6
 800af56:	609a      	str	r2, [r3, #8]
}
 800af58:	bf00      	nop
 800af5a:	377c      	adds	r7, #124	; 0x7c
 800af5c:	46bd      	mov	sp, r7
 800af5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af62:	bf00      	nop
 800af64:	40011000 	.word	0x40011000
 800af68:	40011400 	.word	0x40011400
 800af6c:	51eb851f 	.word	0x51eb851f

0800af70 <atoi>:
 800af70:	220a      	movs	r2, #10
 800af72:	2100      	movs	r1, #0
 800af74:	f001 bc50 	b.w	800c818 <strtol>

0800af78 <__errno>:
 800af78:	4b01      	ldr	r3, [pc, #4]	; (800af80 <__errno+0x8>)
 800af7a:	6818      	ldr	r0, [r3, #0]
 800af7c:	4770      	bx	lr
 800af7e:	bf00      	nop
 800af80:	20000074 	.word	0x20000074

0800af84 <__libc_init_array>:
 800af84:	b570      	push	{r4, r5, r6, lr}
 800af86:	4d0d      	ldr	r5, [pc, #52]	; (800afbc <__libc_init_array+0x38>)
 800af88:	4c0d      	ldr	r4, [pc, #52]	; (800afc0 <__libc_init_array+0x3c>)
 800af8a:	1b64      	subs	r4, r4, r5
 800af8c:	10a4      	asrs	r4, r4, #2
 800af8e:	2600      	movs	r6, #0
 800af90:	42a6      	cmp	r6, r4
 800af92:	d109      	bne.n	800afa8 <__libc_init_array+0x24>
 800af94:	4d0b      	ldr	r5, [pc, #44]	; (800afc4 <__libc_init_array+0x40>)
 800af96:	4c0c      	ldr	r4, [pc, #48]	; (800afc8 <__libc_init_array+0x44>)
 800af98:	f004 fb12 	bl	800f5c0 <_init>
 800af9c:	1b64      	subs	r4, r4, r5
 800af9e:	10a4      	asrs	r4, r4, #2
 800afa0:	2600      	movs	r6, #0
 800afa2:	42a6      	cmp	r6, r4
 800afa4:	d105      	bne.n	800afb2 <__libc_init_array+0x2e>
 800afa6:	bd70      	pop	{r4, r5, r6, pc}
 800afa8:	f855 3b04 	ldr.w	r3, [r5], #4
 800afac:	4798      	blx	r3
 800afae:	3601      	adds	r6, #1
 800afb0:	e7ee      	b.n	800af90 <__libc_init_array+0xc>
 800afb2:	f855 3b04 	ldr.w	r3, [r5], #4
 800afb6:	4798      	blx	r3
 800afb8:	3601      	adds	r6, #1
 800afba:	e7f2      	b.n	800afa2 <__libc_init_array+0x1e>
 800afbc:	080101f8 	.word	0x080101f8
 800afc0:	080101f8 	.word	0x080101f8
 800afc4:	080101f8 	.word	0x080101f8
 800afc8:	080101fc 	.word	0x080101fc

0800afcc <memcpy>:
 800afcc:	440a      	add	r2, r1
 800afce:	4291      	cmp	r1, r2
 800afd0:	f100 33ff 	add.w	r3, r0, #4294967295
 800afd4:	d100      	bne.n	800afd8 <memcpy+0xc>
 800afd6:	4770      	bx	lr
 800afd8:	b510      	push	{r4, lr}
 800afda:	f811 4b01 	ldrb.w	r4, [r1], #1
 800afde:	f803 4f01 	strb.w	r4, [r3, #1]!
 800afe2:	4291      	cmp	r1, r2
 800afe4:	d1f9      	bne.n	800afda <memcpy+0xe>
 800afe6:	bd10      	pop	{r4, pc}

0800afe8 <memset>:
 800afe8:	4402      	add	r2, r0
 800afea:	4603      	mov	r3, r0
 800afec:	4293      	cmp	r3, r2
 800afee:	d100      	bne.n	800aff2 <memset+0xa>
 800aff0:	4770      	bx	lr
 800aff2:	f803 1b01 	strb.w	r1, [r3], #1
 800aff6:	e7f9      	b.n	800afec <memset+0x4>

0800aff8 <__cvt>:
 800aff8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800affc:	ec55 4b10 	vmov	r4, r5, d0
 800b000:	2d00      	cmp	r5, #0
 800b002:	460e      	mov	r6, r1
 800b004:	4619      	mov	r1, r3
 800b006:	462b      	mov	r3, r5
 800b008:	bfbb      	ittet	lt
 800b00a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b00e:	461d      	movlt	r5, r3
 800b010:	2300      	movge	r3, #0
 800b012:	232d      	movlt	r3, #45	; 0x2d
 800b014:	700b      	strb	r3, [r1, #0]
 800b016:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b018:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b01c:	4691      	mov	r9, r2
 800b01e:	f023 0820 	bic.w	r8, r3, #32
 800b022:	bfbc      	itt	lt
 800b024:	4622      	movlt	r2, r4
 800b026:	4614      	movlt	r4, r2
 800b028:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b02c:	d005      	beq.n	800b03a <__cvt+0x42>
 800b02e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b032:	d100      	bne.n	800b036 <__cvt+0x3e>
 800b034:	3601      	adds	r6, #1
 800b036:	2102      	movs	r1, #2
 800b038:	e000      	b.n	800b03c <__cvt+0x44>
 800b03a:	2103      	movs	r1, #3
 800b03c:	ab03      	add	r3, sp, #12
 800b03e:	9301      	str	r3, [sp, #4]
 800b040:	ab02      	add	r3, sp, #8
 800b042:	9300      	str	r3, [sp, #0]
 800b044:	ec45 4b10 	vmov	d0, r4, r5
 800b048:	4653      	mov	r3, sl
 800b04a:	4632      	mov	r2, r6
 800b04c:	f001 fc98 	bl	800c980 <_dtoa_r>
 800b050:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b054:	4607      	mov	r7, r0
 800b056:	d102      	bne.n	800b05e <__cvt+0x66>
 800b058:	f019 0f01 	tst.w	r9, #1
 800b05c:	d022      	beq.n	800b0a4 <__cvt+0xac>
 800b05e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b062:	eb07 0906 	add.w	r9, r7, r6
 800b066:	d110      	bne.n	800b08a <__cvt+0x92>
 800b068:	783b      	ldrb	r3, [r7, #0]
 800b06a:	2b30      	cmp	r3, #48	; 0x30
 800b06c:	d10a      	bne.n	800b084 <__cvt+0x8c>
 800b06e:	2200      	movs	r2, #0
 800b070:	2300      	movs	r3, #0
 800b072:	4620      	mov	r0, r4
 800b074:	4629      	mov	r1, r5
 800b076:	f7f5 fd2f 	bl	8000ad8 <__aeabi_dcmpeq>
 800b07a:	b918      	cbnz	r0, 800b084 <__cvt+0x8c>
 800b07c:	f1c6 0601 	rsb	r6, r6, #1
 800b080:	f8ca 6000 	str.w	r6, [sl]
 800b084:	f8da 3000 	ldr.w	r3, [sl]
 800b088:	4499      	add	r9, r3
 800b08a:	2200      	movs	r2, #0
 800b08c:	2300      	movs	r3, #0
 800b08e:	4620      	mov	r0, r4
 800b090:	4629      	mov	r1, r5
 800b092:	f7f5 fd21 	bl	8000ad8 <__aeabi_dcmpeq>
 800b096:	b108      	cbz	r0, 800b09c <__cvt+0xa4>
 800b098:	f8cd 900c 	str.w	r9, [sp, #12]
 800b09c:	2230      	movs	r2, #48	; 0x30
 800b09e:	9b03      	ldr	r3, [sp, #12]
 800b0a0:	454b      	cmp	r3, r9
 800b0a2:	d307      	bcc.n	800b0b4 <__cvt+0xbc>
 800b0a4:	9b03      	ldr	r3, [sp, #12]
 800b0a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b0a8:	1bdb      	subs	r3, r3, r7
 800b0aa:	4638      	mov	r0, r7
 800b0ac:	6013      	str	r3, [r2, #0]
 800b0ae:	b004      	add	sp, #16
 800b0b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0b4:	1c59      	adds	r1, r3, #1
 800b0b6:	9103      	str	r1, [sp, #12]
 800b0b8:	701a      	strb	r2, [r3, #0]
 800b0ba:	e7f0      	b.n	800b09e <__cvt+0xa6>

0800b0bc <__exponent>:
 800b0bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b0be:	4603      	mov	r3, r0
 800b0c0:	2900      	cmp	r1, #0
 800b0c2:	bfb8      	it	lt
 800b0c4:	4249      	neglt	r1, r1
 800b0c6:	f803 2b02 	strb.w	r2, [r3], #2
 800b0ca:	bfb4      	ite	lt
 800b0cc:	222d      	movlt	r2, #45	; 0x2d
 800b0ce:	222b      	movge	r2, #43	; 0x2b
 800b0d0:	2909      	cmp	r1, #9
 800b0d2:	7042      	strb	r2, [r0, #1]
 800b0d4:	dd2a      	ble.n	800b12c <__exponent+0x70>
 800b0d6:	f10d 0407 	add.w	r4, sp, #7
 800b0da:	46a4      	mov	ip, r4
 800b0dc:	270a      	movs	r7, #10
 800b0de:	46a6      	mov	lr, r4
 800b0e0:	460a      	mov	r2, r1
 800b0e2:	fb91 f6f7 	sdiv	r6, r1, r7
 800b0e6:	fb07 1516 	mls	r5, r7, r6, r1
 800b0ea:	3530      	adds	r5, #48	; 0x30
 800b0ec:	2a63      	cmp	r2, #99	; 0x63
 800b0ee:	f104 34ff 	add.w	r4, r4, #4294967295
 800b0f2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b0f6:	4631      	mov	r1, r6
 800b0f8:	dcf1      	bgt.n	800b0de <__exponent+0x22>
 800b0fa:	3130      	adds	r1, #48	; 0x30
 800b0fc:	f1ae 0502 	sub.w	r5, lr, #2
 800b100:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b104:	1c44      	adds	r4, r0, #1
 800b106:	4629      	mov	r1, r5
 800b108:	4561      	cmp	r1, ip
 800b10a:	d30a      	bcc.n	800b122 <__exponent+0x66>
 800b10c:	f10d 0209 	add.w	r2, sp, #9
 800b110:	eba2 020e 	sub.w	r2, r2, lr
 800b114:	4565      	cmp	r5, ip
 800b116:	bf88      	it	hi
 800b118:	2200      	movhi	r2, #0
 800b11a:	4413      	add	r3, r2
 800b11c:	1a18      	subs	r0, r3, r0
 800b11e:	b003      	add	sp, #12
 800b120:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b122:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b126:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b12a:	e7ed      	b.n	800b108 <__exponent+0x4c>
 800b12c:	2330      	movs	r3, #48	; 0x30
 800b12e:	3130      	adds	r1, #48	; 0x30
 800b130:	7083      	strb	r3, [r0, #2]
 800b132:	70c1      	strb	r1, [r0, #3]
 800b134:	1d03      	adds	r3, r0, #4
 800b136:	e7f1      	b.n	800b11c <__exponent+0x60>

0800b138 <_printf_float>:
 800b138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b13c:	ed2d 8b02 	vpush	{d8}
 800b140:	b08d      	sub	sp, #52	; 0x34
 800b142:	460c      	mov	r4, r1
 800b144:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b148:	4616      	mov	r6, r2
 800b14a:	461f      	mov	r7, r3
 800b14c:	4605      	mov	r5, r0
 800b14e:	f002 fe79 	bl	800de44 <_localeconv_r>
 800b152:	f8d0 a000 	ldr.w	sl, [r0]
 800b156:	4650      	mov	r0, sl
 800b158:	f7f5 f842 	bl	80001e0 <strlen>
 800b15c:	2300      	movs	r3, #0
 800b15e:	930a      	str	r3, [sp, #40]	; 0x28
 800b160:	6823      	ldr	r3, [r4, #0]
 800b162:	9305      	str	r3, [sp, #20]
 800b164:	f8d8 3000 	ldr.w	r3, [r8]
 800b168:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b16c:	3307      	adds	r3, #7
 800b16e:	f023 0307 	bic.w	r3, r3, #7
 800b172:	f103 0208 	add.w	r2, r3, #8
 800b176:	f8c8 2000 	str.w	r2, [r8]
 800b17a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b17e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b182:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b186:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b18a:	9307      	str	r3, [sp, #28]
 800b18c:	f8cd 8018 	str.w	r8, [sp, #24]
 800b190:	ee08 0a10 	vmov	s16, r0
 800b194:	4b9f      	ldr	r3, [pc, #636]	; (800b414 <_printf_float+0x2dc>)
 800b196:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b19a:	f04f 32ff 	mov.w	r2, #4294967295
 800b19e:	f7f5 fccd 	bl	8000b3c <__aeabi_dcmpun>
 800b1a2:	bb88      	cbnz	r0, 800b208 <_printf_float+0xd0>
 800b1a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b1a8:	4b9a      	ldr	r3, [pc, #616]	; (800b414 <_printf_float+0x2dc>)
 800b1aa:	f04f 32ff 	mov.w	r2, #4294967295
 800b1ae:	f7f5 fca7 	bl	8000b00 <__aeabi_dcmple>
 800b1b2:	bb48      	cbnz	r0, 800b208 <_printf_float+0xd0>
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	4640      	mov	r0, r8
 800b1ba:	4649      	mov	r1, r9
 800b1bc:	f7f5 fc96 	bl	8000aec <__aeabi_dcmplt>
 800b1c0:	b110      	cbz	r0, 800b1c8 <_printf_float+0x90>
 800b1c2:	232d      	movs	r3, #45	; 0x2d
 800b1c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b1c8:	4b93      	ldr	r3, [pc, #588]	; (800b418 <_printf_float+0x2e0>)
 800b1ca:	4894      	ldr	r0, [pc, #592]	; (800b41c <_printf_float+0x2e4>)
 800b1cc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b1d0:	bf94      	ite	ls
 800b1d2:	4698      	movls	r8, r3
 800b1d4:	4680      	movhi	r8, r0
 800b1d6:	2303      	movs	r3, #3
 800b1d8:	6123      	str	r3, [r4, #16]
 800b1da:	9b05      	ldr	r3, [sp, #20]
 800b1dc:	f023 0204 	bic.w	r2, r3, #4
 800b1e0:	6022      	str	r2, [r4, #0]
 800b1e2:	f04f 0900 	mov.w	r9, #0
 800b1e6:	9700      	str	r7, [sp, #0]
 800b1e8:	4633      	mov	r3, r6
 800b1ea:	aa0b      	add	r2, sp, #44	; 0x2c
 800b1ec:	4621      	mov	r1, r4
 800b1ee:	4628      	mov	r0, r5
 800b1f0:	f000 f9d8 	bl	800b5a4 <_printf_common>
 800b1f4:	3001      	adds	r0, #1
 800b1f6:	f040 8090 	bne.w	800b31a <_printf_float+0x1e2>
 800b1fa:	f04f 30ff 	mov.w	r0, #4294967295
 800b1fe:	b00d      	add	sp, #52	; 0x34
 800b200:	ecbd 8b02 	vpop	{d8}
 800b204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b208:	4642      	mov	r2, r8
 800b20a:	464b      	mov	r3, r9
 800b20c:	4640      	mov	r0, r8
 800b20e:	4649      	mov	r1, r9
 800b210:	f7f5 fc94 	bl	8000b3c <__aeabi_dcmpun>
 800b214:	b140      	cbz	r0, 800b228 <_printf_float+0xf0>
 800b216:	464b      	mov	r3, r9
 800b218:	2b00      	cmp	r3, #0
 800b21a:	bfbc      	itt	lt
 800b21c:	232d      	movlt	r3, #45	; 0x2d
 800b21e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b222:	487f      	ldr	r0, [pc, #508]	; (800b420 <_printf_float+0x2e8>)
 800b224:	4b7f      	ldr	r3, [pc, #508]	; (800b424 <_printf_float+0x2ec>)
 800b226:	e7d1      	b.n	800b1cc <_printf_float+0x94>
 800b228:	6863      	ldr	r3, [r4, #4]
 800b22a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b22e:	9206      	str	r2, [sp, #24]
 800b230:	1c5a      	adds	r2, r3, #1
 800b232:	d13f      	bne.n	800b2b4 <_printf_float+0x17c>
 800b234:	2306      	movs	r3, #6
 800b236:	6063      	str	r3, [r4, #4]
 800b238:	9b05      	ldr	r3, [sp, #20]
 800b23a:	6861      	ldr	r1, [r4, #4]
 800b23c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b240:	2300      	movs	r3, #0
 800b242:	9303      	str	r3, [sp, #12]
 800b244:	ab0a      	add	r3, sp, #40	; 0x28
 800b246:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b24a:	ab09      	add	r3, sp, #36	; 0x24
 800b24c:	ec49 8b10 	vmov	d0, r8, r9
 800b250:	9300      	str	r3, [sp, #0]
 800b252:	6022      	str	r2, [r4, #0]
 800b254:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b258:	4628      	mov	r0, r5
 800b25a:	f7ff fecd 	bl	800aff8 <__cvt>
 800b25e:	9b06      	ldr	r3, [sp, #24]
 800b260:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b262:	2b47      	cmp	r3, #71	; 0x47
 800b264:	4680      	mov	r8, r0
 800b266:	d108      	bne.n	800b27a <_printf_float+0x142>
 800b268:	1cc8      	adds	r0, r1, #3
 800b26a:	db02      	blt.n	800b272 <_printf_float+0x13a>
 800b26c:	6863      	ldr	r3, [r4, #4]
 800b26e:	4299      	cmp	r1, r3
 800b270:	dd41      	ble.n	800b2f6 <_printf_float+0x1be>
 800b272:	f1ab 0b02 	sub.w	fp, fp, #2
 800b276:	fa5f fb8b 	uxtb.w	fp, fp
 800b27a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b27e:	d820      	bhi.n	800b2c2 <_printf_float+0x18a>
 800b280:	3901      	subs	r1, #1
 800b282:	465a      	mov	r2, fp
 800b284:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b288:	9109      	str	r1, [sp, #36]	; 0x24
 800b28a:	f7ff ff17 	bl	800b0bc <__exponent>
 800b28e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b290:	1813      	adds	r3, r2, r0
 800b292:	2a01      	cmp	r2, #1
 800b294:	4681      	mov	r9, r0
 800b296:	6123      	str	r3, [r4, #16]
 800b298:	dc02      	bgt.n	800b2a0 <_printf_float+0x168>
 800b29a:	6822      	ldr	r2, [r4, #0]
 800b29c:	07d2      	lsls	r2, r2, #31
 800b29e:	d501      	bpl.n	800b2a4 <_printf_float+0x16c>
 800b2a0:	3301      	adds	r3, #1
 800b2a2:	6123      	str	r3, [r4, #16]
 800b2a4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d09c      	beq.n	800b1e6 <_printf_float+0xae>
 800b2ac:	232d      	movs	r3, #45	; 0x2d
 800b2ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b2b2:	e798      	b.n	800b1e6 <_printf_float+0xae>
 800b2b4:	9a06      	ldr	r2, [sp, #24]
 800b2b6:	2a47      	cmp	r2, #71	; 0x47
 800b2b8:	d1be      	bne.n	800b238 <_printf_float+0x100>
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d1bc      	bne.n	800b238 <_printf_float+0x100>
 800b2be:	2301      	movs	r3, #1
 800b2c0:	e7b9      	b.n	800b236 <_printf_float+0xfe>
 800b2c2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b2c6:	d118      	bne.n	800b2fa <_printf_float+0x1c2>
 800b2c8:	2900      	cmp	r1, #0
 800b2ca:	6863      	ldr	r3, [r4, #4]
 800b2cc:	dd0b      	ble.n	800b2e6 <_printf_float+0x1ae>
 800b2ce:	6121      	str	r1, [r4, #16]
 800b2d0:	b913      	cbnz	r3, 800b2d8 <_printf_float+0x1a0>
 800b2d2:	6822      	ldr	r2, [r4, #0]
 800b2d4:	07d0      	lsls	r0, r2, #31
 800b2d6:	d502      	bpl.n	800b2de <_printf_float+0x1a6>
 800b2d8:	3301      	adds	r3, #1
 800b2da:	440b      	add	r3, r1
 800b2dc:	6123      	str	r3, [r4, #16]
 800b2de:	65a1      	str	r1, [r4, #88]	; 0x58
 800b2e0:	f04f 0900 	mov.w	r9, #0
 800b2e4:	e7de      	b.n	800b2a4 <_printf_float+0x16c>
 800b2e6:	b913      	cbnz	r3, 800b2ee <_printf_float+0x1b6>
 800b2e8:	6822      	ldr	r2, [r4, #0]
 800b2ea:	07d2      	lsls	r2, r2, #31
 800b2ec:	d501      	bpl.n	800b2f2 <_printf_float+0x1ba>
 800b2ee:	3302      	adds	r3, #2
 800b2f0:	e7f4      	b.n	800b2dc <_printf_float+0x1a4>
 800b2f2:	2301      	movs	r3, #1
 800b2f4:	e7f2      	b.n	800b2dc <_printf_float+0x1a4>
 800b2f6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b2fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2fc:	4299      	cmp	r1, r3
 800b2fe:	db05      	blt.n	800b30c <_printf_float+0x1d4>
 800b300:	6823      	ldr	r3, [r4, #0]
 800b302:	6121      	str	r1, [r4, #16]
 800b304:	07d8      	lsls	r0, r3, #31
 800b306:	d5ea      	bpl.n	800b2de <_printf_float+0x1a6>
 800b308:	1c4b      	adds	r3, r1, #1
 800b30a:	e7e7      	b.n	800b2dc <_printf_float+0x1a4>
 800b30c:	2900      	cmp	r1, #0
 800b30e:	bfd4      	ite	le
 800b310:	f1c1 0202 	rsble	r2, r1, #2
 800b314:	2201      	movgt	r2, #1
 800b316:	4413      	add	r3, r2
 800b318:	e7e0      	b.n	800b2dc <_printf_float+0x1a4>
 800b31a:	6823      	ldr	r3, [r4, #0]
 800b31c:	055a      	lsls	r2, r3, #21
 800b31e:	d407      	bmi.n	800b330 <_printf_float+0x1f8>
 800b320:	6923      	ldr	r3, [r4, #16]
 800b322:	4642      	mov	r2, r8
 800b324:	4631      	mov	r1, r6
 800b326:	4628      	mov	r0, r5
 800b328:	47b8      	blx	r7
 800b32a:	3001      	adds	r0, #1
 800b32c:	d12c      	bne.n	800b388 <_printf_float+0x250>
 800b32e:	e764      	b.n	800b1fa <_printf_float+0xc2>
 800b330:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b334:	f240 80e0 	bls.w	800b4f8 <_printf_float+0x3c0>
 800b338:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b33c:	2200      	movs	r2, #0
 800b33e:	2300      	movs	r3, #0
 800b340:	f7f5 fbca 	bl	8000ad8 <__aeabi_dcmpeq>
 800b344:	2800      	cmp	r0, #0
 800b346:	d034      	beq.n	800b3b2 <_printf_float+0x27a>
 800b348:	4a37      	ldr	r2, [pc, #220]	; (800b428 <_printf_float+0x2f0>)
 800b34a:	2301      	movs	r3, #1
 800b34c:	4631      	mov	r1, r6
 800b34e:	4628      	mov	r0, r5
 800b350:	47b8      	blx	r7
 800b352:	3001      	adds	r0, #1
 800b354:	f43f af51 	beq.w	800b1fa <_printf_float+0xc2>
 800b358:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b35c:	429a      	cmp	r2, r3
 800b35e:	db02      	blt.n	800b366 <_printf_float+0x22e>
 800b360:	6823      	ldr	r3, [r4, #0]
 800b362:	07d8      	lsls	r0, r3, #31
 800b364:	d510      	bpl.n	800b388 <_printf_float+0x250>
 800b366:	ee18 3a10 	vmov	r3, s16
 800b36a:	4652      	mov	r2, sl
 800b36c:	4631      	mov	r1, r6
 800b36e:	4628      	mov	r0, r5
 800b370:	47b8      	blx	r7
 800b372:	3001      	adds	r0, #1
 800b374:	f43f af41 	beq.w	800b1fa <_printf_float+0xc2>
 800b378:	f04f 0800 	mov.w	r8, #0
 800b37c:	f104 091a 	add.w	r9, r4, #26
 800b380:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b382:	3b01      	subs	r3, #1
 800b384:	4543      	cmp	r3, r8
 800b386:	dc09      	bgt.n	800b39c <_printf_float+0x264>
 800b388:	6823      	ldr	r3, [r4, #0]
 800b38a:	079b      	lsls	r3, r3, #30
 800b38c:	f100 8105 	bmi.w	800b59a <_printf_float+0x462>
 800b390:	68e0      	ldr	r0, [r4, #12]
 800b392:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b394:	4298      	cmp	r0, r3
 800b396:	bfb8      	it	lt
 800b398:	4618      	movlt	r0, r3
 800b39a:	e730      	b.n	800b1fe <_printf_float+0xc6>
 800b39c:	2301      	movs	r3, #1
 800b39e:	464a      	mov	r2, r9
 800b3a0:	4631      	mov	r1, r6
 800b3a2:	4628      	mov	r0, r5
 800b3a4:	47b8      	blx	r7
 800b3a6:	3001      	adds	r0, #1
 800b3a8:	f43f af27 	beq.w	800b1fa <_printf_float+0xc2>
 800b3ac:	f108 0801 	add.w	r8, r8, #1
 800b3b0:	e7e6      	b.n	800b380 <_printf_float+0x248>
 800b3b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	dc39      	bgt.n	800b42c <_printf_float+0x2f4>
 800b3b8:	4a1b      	ldr	r2, [pc, #108]	; (800b428 <_printf_float+0x2f0>)
 800b3ba:	2301      	movs	r3, #1
 800b3bc:	4631      	mov	r1, r6
 800b3be:	4628      	mov	r0, r5
 800b3c0:	47b8      	blx	r7
 800b3c2:	3001      	adds	r0, #1
 800b3c4:	f43f af19 	beq.w	800b1fa <_printf_float+0xc2>
 800b3c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b3cc:	4313      	orrs	r3, r2
 800b3ce:	d102      	bne.n	800b3d6 <_printf_float+0x29e>
 800b3d0:	6823      	ldr	r3, [r4, #0]
 800b3d2:	07d9      	lsls	r1, r3, #31
 800b3d4:	d5d8      	bpl.n	800b388 <_printf_float+0x250>
 800b3d6:	ee18 3a10 	vmov	r3, s16
 800b3da:	4652      	mov	r2, sl
 800b3dc:	4631      	mov	r1, r6
 800b3de:	4628      	mov	r0, r5
 800b3e0:	47b8      	blx	r7
 800b3e2:	3001      	adds	r0, #1
 800b3e4:	f43f af09 	beq.w	800b1fa <_printf_float+0xc2>
 800b3e8:	f04f 0900 	mov.w	r9, #0
 800b3ec:	f104 0a1a 	add.w	sl, r4, #26
 800b3f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3f2:	425b      	negs	r3, r3
 800b3f4:	454b      	cmp	r3, r9
 800b3f6:	dc01      	bgt.n	800b3fc <_printf_float+0x2c4>
 800b3f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3fa:	e792      	b.n	800b322 <_printf_float+0x1ea>
 800b3fc:	2301      	movs	r3, #1
 800b3fe:	4652      	mov	r2, sl
 800b400:	4631      	mov	r1, r6
 800b402:	4628      	mov	r0, r5
 800b404:	47b8      	blx	r7
 800b406:	3001      	adds	r0, #1
 800b408:	f43f aef7 	beq.w	800b1fa <_printf_float+0xc2>
 800b40c:	f109 0901 	add.w	r9, r9, #1
 800b410:	e7ee      	b.n	800b3f0 <_printf_float+0x2b8>
 800b412:	bf00      	nop
 800b414:	7fefffff 	.word	0x7fefffff
 800b418:	0800fce0 	.word	0x0800fce0
 800b41c:	0800fce4 	.word	0x0800fce4
 800b420:	0800fcec 	.word	0x0800fcec
 800b424:	0800fce8 	.word	0x0800fce8
 800b428:	0800fcf0 	.word	0x0800fcf0
 800b42c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b42e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b430:	429a      	cmp	r2, r3
 800b432:	bfa8      	it	ge
 800b434:	461a      	movge	r2, r3
 800b436:	2a00      	cmp	r2, #0
 800b438:	4691      	mov	r9, r2
 800b43a:	dc37      	bgt.n	800b4ac <_printf_float+0x374>
 800b43c:	f04f 0b00 	mov.w	fp, #0
 800b440:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b444:	f104 021a 	add.w	r2, r4, #26
 800b448:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b44a:	9305      	str	r3, [sp, #20]
 800b44c:	eba3 0309 	sub.w	r3, r3, r9
 800b450:	455b      	cmp	r3, fp
 800b452:	dc33      	bgt.n	800b4bc <_printf_float+0x384>
 800b454:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b458:	429a      	cmp	r2, r3
 800b45a:	db3b      	blt.n	800b4d4 <_printf_float+0x39c>
 800b45c:	6823      	ldr	r3, [r4, #0]
 800b45e:	07da      	lsls	r2, r3, #31
 800b460:	d438      	bmi.n	800b4d4 <_printf_float+0x39c>
 800b462:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b464:	9b05      	ldr	r3, [sp, #20]
 800b466:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b468:	1ad3      	subs	r3, r2, r3
 800b46a:	eba2 0901 	sub.w	r9, r2, r1
 800b46e:	4599      	cmp	r9, r3
 800b470:	bfa8      	it	ge
 800b472:	4699      	movge	r9, r3
 800b474:	f1b9 0f00 	cmp.w	r9, #0
 800b478:	dc35      	bgt.n	800b4e6 <_printf_float+0x3ae>
 800b47a:	f04f 0800 	mov.w	r8, #0
 800b47e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b482:	f104 0a1a 	add.w	sl, r4, #26
 800b486:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b48a:	1a9b      	subs	r3, r3, r2
 800b48c:	eba3 0309 	sub.w	r3, r3, r9
 800b490:	4543      	cmp	r3, r8
 800b492:	f77f af79 	ble.w	800b388 <_printf_float+0x250>
 800b496:	2301      	movs	r3, #1
 800b498:	4652      	mov	r2, sl
 800b49a:	4631      	mov	r1, r6
 800b49c:	4628      	mov	r0, r5
 800b49e:	47b8      	blx	r7
 800b4a0:	3001      	adds	r0, #1
 800b4a2:	f43f aeaa 	beq.w	800b1fa <_printf_float+0xc2>
 800b4a6:	f108 0801 	add.w	r8, r8, #1
 800b4aa:	e7ec      	b.n	800b486 <_printf_float+0x34e>
 800b4ac:	4613      	mov	r3, r2
 800b4ae:	4631      	mov	r1, r6
 800b4b0:	4642      	mov	r2, r8
 800b4b2:	4628      	mov	r0, r5
 800b4b4:	47b8      	blx	r7
 800b4b6:	3001      	adds	r0, #1
 800b4b8:	d1c0      	bne.n	800b43c <_printf_float+0x304>
 800b4ba:	e69e      	b.n	800b1fa <_printf_float+0xc2>
 800b4bc:	2301      	movs	r3, #1
 800b4be:	4631      	mov	r1, r6
 800b4c0:	4628      	mov	r0, r5
 800b4c2:	9205      	str	r2, [sp, #20]
 800b4c4:	47b8      	blx	r7
 800b4c6:	3001      	adds	r0, #1
 800b4c8:	f43f ae97 	beq.w	800b1fa <_printf_float+0xc2>
 800b4cc:	9a05      	ldr	r2, [sp, #20]
 800b4ce:	f10b 0b01 	add.w	fp, fp, #1
 800b4d2:	e7b9      	b.n	800b448 <_printf_float+0x310>
 800b4d4:	ee18 3a10 	vmov	r3, s16
 800b4d8:	4652      	mov	r2, sl
 800b4da:	4631      	mov	r1, r6
 800b4dc:	4628      	mov	r0, r5
 800b4de:	47b8      	blx	r7
 800b4e0:	3001      	adds	r0, #1
 800b4e2:	d1be      	bne.n	800b462 <_printf_float+0x32a>
 800b4e4:	e689      	b.n	800b1fa <_printf_float+0xc2>
 800b4e6:	9a05      	ldr	r2, [sp, #20]
 800b4e8:	464b      	mov	r3, r9
 800b4ea:	4442      	add	r2, r8
 800b4ec:	4631      	mov	r1, r6
 800b4ee:	4628      	mov	r0, r5
 800b4f0:	47b8      	blx	r7
 800b4f2:	3001      	adds	r0, #1
 800b4f4:	d1c1      	bne.n	800b47a <_printf_float+0x342>
 800b4f6:	e680      	b.n	800b1fa <_printf_float+0xc2>
 800b4f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b4fa:	2a01      	cmp	r2, #1
 800b4fc:	dc01      	bgt.n	800b502 <_printf_float+0x3ca>
 800b4fe:	07db      	lsls	r3, r3, #31
 800b500:	d538      	bpl.n	800b574 <_printf_float+0x43c>
 800b502:	2301      	movs	r3, #1
 800b504:	4642      	mov	r2, r8
 800b506:	4631      	mov	r1, r6
 800b508:	4628      	mov	r0, r5
 800b50a:	47b8      	blx	r7
 800b50c:	3001      	adds	r0, #1
 800b50e:	f43f ae74 	beq.w	800b1fa <_printf_float+0xc2>
 800b512:	ee18 3a10 	vmov	r3, s16
 800b516:	4652      	mov	r2, sl
 800b518:	4631      	mov	r1, r6
 800b51a:	4628      	mov	r0, r5
 800b51c:	47b8      	blx	r7
 800b51e:	3001      	adds	r0, #1
 800b520:	f43f ae6b 	beq.w	800b1fa <_printf_float+0xc2>
 800b524:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b528:	2200      	movs	r2, #0
 800b52a:	2300      	movs	r3, #0
 800b52c:	f7f5 fad4 	bl	8000ad8 <__aeabi_dcmpeq>
 800b530:	b9d8      	cbnz	r0, 800b56a <_printf_float+0x432>
 800b532:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b534:	f108 0201 	add.w	r2, r8, #1
 800b538:	3b01      	subs	r3, #1
 800b53a:	4631      	mov	r1, r6
 800b53c:	4628      	mov	r0, r5
 800b53e:	47b8      	blx	r7
 800b540:	3001      	adds	r0, #1
 800b542:	d10e      	bne.n	800b562 <_printf_float+0x42a>
 800b544:	e659      	b.n	800b1fa <_printf_float+0xc2>
 800b546:	2301      	movs	r3, #1
 800b548:	4652      	mov	r2, sl
 800b54a:	4631      	mov	r1, r6
 800b54c:	4628      	mov	r0, r5
 800b54e:	47b8      	blx	r7
 800b550:	3001      	adds	r0, #1
 800b552:	f43f ae52 	beq.w	800b1fa <_printf_float+0xc2>
 800b556:	f108 0801 	add.w	r8, r8, #1
 800b55a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b55c:	3b01      	subs	r3, #1
 800b55e:	4543      	cmp	r3, r8
 800b560:	dcf1      	bgt.n	800b546 <_printf_float+0x40e>
 800b562:	464b      	mov	r3, r9
 800b564:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b568:	e6dc      	b.n	800b324 <_printf_float+0x1ec>
 800b56a:	f04f 0800 	mov.w	r8, #0
 800b56e:	f104 0a1a 	add.w	sl, r4, #26
 800b572:	e7f2      	b.n	800b55a <_printf_float+0x422>
 800b574:	2301      	movs	r3, #1
 800b576:	4642      	mov	r2, r8
 800b578:	e7df      	b.n	800b53a <_printf_float+0x402>
 800b57a:	2301      	movs	r3, #1
 800b57c:	464a      	mov	r2, r9
 800b57e:	4631      	mov	r1, r6
 800b580:	4628      	mov	r0, r5
 800b582:	47b8      	blx	r7
 800b584:	3001      	adds	r0, #1
 800b586:	f43f ae38 	beq.w	800b1fa <_printf_float+0xc2>
 800b58a:	f108 0801 	add.w	r8, r8, #1
 800b58e:	68e3      	ldr	r3, [r4, #12]
 800b590:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b592:	1a5b      	subs	r3, r3, r1
 800b594:	4543      	cmp	r3, r8
 800b596:	dcf0      	bgt.n	800b57a <_printf_float+0x442>
 800b598:	e6fa      	b.n	800b390 <_printf_float+0x258>
 800b59a:	f04f 0800 	mov.w	r8, #0
 800b59e:	f104 0919 	add.w	r9, r4, #25
 800b5a2:	e7f4      	b.n	800b58e <_printf_float+0x456>

0800b5a4 <_printf_common>:
 800b5a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5a8:	4616      	mov	r6, r2
 800b5aa:	4699      	mov	r9, r3
 800b5ac:	688a      	ldr	r2, [r1, #8]
 800b5ae:	690b      	ldr	r3, [r1, #16]
 800b5b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b5b4:	4293      	cmp	r3, r2
 800b5b6:	bfb8      	it	lt
 800b5b8:	4613      	movlt	r3, r2
 800b5ba:	6033      	str	r3, [r6, #0]
 800b5bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b5c0:	4607      	mov	r7, r0
 800b5c2:	460c      	mov	r4, r1
 800b5c4:	b10a      	cbz	r2, 800b5ca <_printf_common+0x26>
 800b5c6:	3301      	adds	r3, #1
 800b5c8:	6033      	str	r3, [r6, #0]
 800b5ca:	6823      	ldr	r3, [r4, #0]
 800b5cc:	0699      	lsls	r1, r3, #26
 800b5ce:	bf42      	ittt	mi
 800b5d0:	6833      	ldrmi	r3, [r6, #0]
 800b5d2:	3302      	addmi	r3, #2
 800b5d4:	6033      	strmi	r3, [r6, #0]
 800b5d6:	6825      	ldr	r5, [r4, #0]
 800b5d8:	f015 0506 	ands.w	r5, r5, #6
 800b5dc:	d106      	bne.n	800b5ec <_printf_common+0x48>
 800b5de:	f104 0a19 	add.w	sl, r4, #25
 800b5e2:	68e3      	ldr	r3, [r4, #12]
 800b5e4:	6832      	ldr	r2, [r6, #0]
 800b5e6:	1a9b      	subs	r3, r3, r2
 800b5e8:	42ab      	cmp	r3, r5
 800b5ea:	dc26      	bgt.n	800b63a <_printf_common+0x96>
 800b5ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b5f0:	1e13      	subs	r3, r2, #0
 800b5f2:	6822      	ldr	r2, [r4, #0]
 800b5f4:	bf18      	it	ne
 800b5f6:	2301      	movne	r3, #1
 800b5f8:	0692      	lsls	r2, r2, #26
 800b5fa:	d42b      	bmi.n	800b654 <_printf_common+0xb0>
 800b5fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b600:	4649      	mov	r1, r9
 800b602:	4638      	mov	r0, r7
 800b604:	47c0      	blx	r8
 800b606:	3001      	adds	r0, #1
 800b608:	d01e      	beq.n	800b648 <_printf_common+0xa4>
 800b60a:	6823      	ldr	r3, [r4, #0]
 800b60c:	68e5      	ldr	r5, [r4, #12]
 800b60e:	6832      	ldr	r2, [r6, #0]
 800b610:	f003 0306 	and.w	r3, r3, #6
 800b614:	2b04      	cmp	r3, #4
 800b616:	bf08      	it	eq
 800b618:	1aad      	subeq	r5, r5, r2
 800b61a:	68a3      	ldr	r3, [r4, #8]
 800b61c:	6922      	ldr	r2, [r4, #16]
 800b61e:	bf0c      	ite	eq
 800b620:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b624:	2500      	movne	r5, #0
 800b626:	4293      	cmp	r3, r2
 800b628:	bfc4      	itt	gt
 800b62a:	1a9b      	subgt	r3, r3, r2
 800b62c:	18ed      	addgt	r5, r5, r3
 800b62e:	2600      	movs	r6, #0
 800b630:	341a      	adds	r4, #26
 800b632:	42b5      	cmp	r5, r6
 800b634:	d11a      	bne.n	800b66c <_printf_common+0xc8>
 800b636:	2000      	movs	r0, #0
 800b638:	e008      	b.n	800b64c <_printf_common+0xa8>
 800b63a:	2301      	movs	r3, #1
 800b63c:	4652      	mov	r2, sl
 800b63e:	4649      	mov	r1, r9
 800b640:	4638      	mov	r0, r7
 800b642:	47c0      	blx	r8
 800b644:	3001      	adds	r0, #1
 800b646:	d103      	bne.n	800b650 <_printf_common+0xac>
 800b648:	f04f 30ff 	mov.w	r0, #4294967295
 800b64c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b650:	3501      	adds	r5, #1
 800b652:	e7c6      	b.n	800b5e2 <_printf_common+0x3e>
 800b654:	18e1      	adds	r1, r4, r3
 800b656:	1c5a      	adds	r2, r3, #1
 800b658:	2030      	movs	r0, #48	; 0x30
 800b65a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b65e:	4422      	add	r2, r4
 800b660:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b664:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b668:	3302      	adds	r3, #2
 800b66a:	e7c7      	b.n	800b5fc <_printf_common+0x58>
 800b66c:	2301      	movs	r3, #1
 800b66e:	4622      	mov	r2, r4
 800b670:	4649      	mov	r1, r9
 800b672:	4638      	mov	r0, r7
 800b674:	47c0      	blx	r8
 800b676:	3001      	adds	r0, #1
 800b678:	d0e6      	beq.n	800b648 <_printf_common+0xa4>
 800b67a:	3601      	adds	r6, #1
 800b67c:	e7d9      	b.n	800b632 <_printf_common+0x8e>
	...

0800b680 <_printf_i>:
 800b680:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b684:	460c      	mov	r4, r1
 800b686:	4691      	mov	r9, r2
 800b688:	7e27      	ldrb	r7, [r4, #24]
 800b68a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b68c:	2f78      	cmp	r7, #120	; 0x78
 800b68e:	4680      	mov	r8, r0
 800b690:	469a      	mov	sl, r3
 800b692:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b696:	d807      	bhi.n	800b6a8 <_printf_i+0x28>
 800b698:	2f62      	cmp	r7, #98	; 0x62
 800b69a:	d80a      	bhi.n	800b6b2 <_printf_i+0x32>
 800b69c:	2f00      	cmp	r7, #0
 800b69e:	f000 80d8 	beq.w	800b852 <_printf_i+0x1d2>
 800b6a2:	2f58      	cmp	r7, #88	; 0x58
 800b6a4:	f000 80a3 	beq.w	800b7ee <_printf_i+0x16e>
 800b6a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b6ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b6b0:	e03a      	b.n	800b728 <_printf_i+0xa8>
 800b6b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b6b6:	2b15      	cmp	r3, #21
 800b6b8:	d8f6      	bhi.n	800b6a8 <_printf_i+0x28>
 800b6ba:	a001      	add	r0, pc, #4	; (adr r0, 800b6c0 <_printf_i+0x40>)
 800b6bc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b6c0:	0800b719 	.word	0x0800b719
 800b6c4:	0800b72d 	.word	0x0800b72d
 800b6c8:	0800b6a9 	.word	0x0800b6a9
 800b6cc:	0800b6a9 	.word	0x0800b6a9
 800b6d0:	0800b6a9 	.word	0x0800b6a9
 800b6d4:	0800b6a9 	.word	0x0800b6a9
 800b6d8:	0800b72d 	.word	0x0800b72d
 800b6dc:	0800b6a9 	.word	0x0800b6a9
 800b6e0:	0800b6a9 	.word	0x0800b6a9
 800b6e4:	0800b6a9 	.word	0x0800b6a9
 800b6e8:	0800b6a9 	.word	0x0800b6a9
 800b6ec:	0800b839 	.word	0x0800b839
 800b6f0:	0800b75d 	.word	0x0800b75d
 800b6f4:	0800b81b 	.word	0x0800b81b
 800b6f8:	0800b6a9 	.word	0x0800b6a9
 800b6fc:	0800b6a9 	.word	0x0800b6a9
 800b700:	0800b85b 	.word	0x0800b85b
 800b704:	0800b6a9 	.word	0x0800b6a9
 800b708:	0800b75d 	.word	0x0800b75d
 800b70c:	0800b6a9 	.word	0x0800b6a9
 800b710:	0800b6a9 	.word	0x0800b6a9
 800b714:	0800b823 	.word	0x0800b823
 800b718:	680b      	ldr	r3, [r1, #0]
 800b71a:	1d1a      	adds	r2, r3, #4
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	600a      	str	r2, [r1, #0]
 800b720:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b724:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b728:	2301      	movs	r3, #1
 800b72a:	e0a3      	b.n	800b874 <_printf_i+0x1f4>
 800b72c:	6825      	ldr	r5, [r4, #0]
 800b72e:	6808      	ldr	r0, [r1, #0]
 800b730:	062e      	lsls	r6, r5, #24
 800b732:	f100 0304 	add.w	r3, r0, #4
 800b736:	d50a      	bpl.n	800b74e <_printf_i+0xce>
 800b738:	6805      	ldr	r5, [r0, #0]
 800b73a:	600b      	str	r3, [r1, #0]
 800b73c:	2d00      	cmp	r5, #0
 800b73e:	da03      	bge.n	800b748 <_printf_i+0xc8>
 800b740:	232d      	movs	r3, #45	; 0x2d
 800b742:	426d      	negs	r5, r5
 800b744:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b748:	485e      	ldr	r0, [pc, #376]	; (800b8c4 <_printf_i+0x244>)
 800b74a:	230a      	movs	r3, #10
 800b74c:	e019      	b.n	800b782 <_printf_i+0x102>
 800b74e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b752:	6805      	ldr	r5, [r0, #0]
 800b754:	600b      	str	r3, [r1, #0]
 800b756:	bf18      	it	ne
 800b758:	b22d      	sxthne	r5, r5
 800b75a:	e7ef      	b.n	800b73c <_printf_i+0xbc>
 800b75c:	680b      	ldr	r3, [r1, #0]
 800b75e:	6825      	ldr	r5, [r4, #0]
 800b760:	1d18      	adds	r0, r3, #4
 800b762:	6008      	str	r0, [r1, #0]
 800b764:	0628      	lsls	r0, r5, #24
 800b766:	d501      	bpl.n	800b76c <_printf_i+0xec>
 800b768:	681d      	ldr	r5, [r3, #0]
 800b76a:	e002      	b.n	800b772 <_printf_i+0xf2>
 800b76c:	0669      	lsls	r1, r5, #25
 800b76e:	d5fb      	bpl.n	800b768 <_printf_i+0xe8>
 800b770:	881d      	ldrh	r5, [r3, #0]
 800b772:	4854      	ldr	r0, [pc, #336]	; (800b8c4 <_printf_i+0x244>)
 800b774:	2f6f      	cmp	r7, #111	; 0x6f
 800b776:	bf0c      	ite	eq
 800b778:	2308      	moveq	r3, #8
 800b77a:	230a      	movne	r3, #10
 800b77c:	2100      	movs	r1, #0
 800b77e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b782:	6866      	ldr	r6, [r4, #4]
 800b784:	60a6      	str	r6, [r4, #8]
 800b786:	2e00      	cmp	r6, #0
 800b788:	bfa2      	ittt	ge
 800b78a:	6821      	ldrge	r1, [r4, #0]
 800b78c:	f021 0104 	bicge.w	r1, r1, #4
 800b790:	6021      	strge	r1, [r4, #0]
 800b792:	b90d      	cbnz	r5, 800b798 <_printf_i+0x118>
 800b794:	2e00      	cmp	r6, #0
 800b796:	d04d      	beq.n	800b834 <_printf_i+0x1b4>
 800b798:	4616      	mov	r6, r2
 800b79a:	fbb5 f1f3 	udiv	r1, r5, r3
 800b79e:	fb03 5711 	mls	r7, r3, r1, r5
 800b7a2:	5dc7      	ldrb	r7, [r0, r7]
 800b7a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b7a8:	462f      	mov	r7, r5
 800b7aa:	42bb      	cmp	r3, r7
 800b7ac:	460d      	mov	r5, r1
 800b7ae:	d9f4      	bls.n	800b79a <_printf_i+0x11a>
 800b7b0:	2b08      	cmp	r3, #8
 800b7b2:	d10b      	bne.n	800b7cc <_printf_i+0x14c>
 800b7b4:	6823      	ldr	r3, [r4, #0]
 800b7b6:	07df      	lsls	r7, r3, #31
 800b7b8:	d508      	bpl.n	800b7cc <_printf_i+0x14c>
 800b7ba:	6923      	ldr	r3, [r4, #16]
 800b7bc:	6861      	ldr	r1, [r4, #4]
 800b7be:	4299      	cmp	r1, r3
 800b7c0:	bfde      	ittt	le
 800b7c2:	2330      	movle	r3, #48	; 0x30
 800b7c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b7c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b7cc:	1b92      	subs	r2, r2, r6
 800b7ce:	6122      	str	r2, [r4, #16]
 800b7d0:	f8cd a000 	str.w	sl, [sp]
 800b7d4:	464b      	mov	r3, r9
 800b7d6:	aa03      	add	r2, sp, #12
 800b7d8:	4621      	mov	r1, r4
 800b7da:	4640      	mov	r0, r8
 800b7dc:	f7ff fee2 	bl	800b5a4 <_printf_common>
 800b7e0:	3001      	adds	r0, #1
 800b7e2:	d14c      	bne.n	800b87e <_printf_i+0x1fe>
 800b7e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b7e8:	b004      	add	sp, #16
 800b7ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7ee:	4835      	ldr	r0, [pc, #212]	; (800b8c4 <_printf_i+0x244>)
 800b7f0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b7f4:	6823      	ldr	r3, [r4, #0]
 800b7f6:	680e      	ldr	r6, [r1, #0]
 800b7f8:	061f      	lsls	r7, r3, #24
 800b7fa:	f856 5b04 	ldr.w	r5, [r6], #4
 800b7fe:	600e      	str	r6, [r1, #0]
 800b800:	d514      	bpl.n	800b82c <_printf_i+0x1ac>
 800b802:	07d9      	lsls	r1, r3, #31
 800b804:	bf44      	itt	mi
 800b806:	f043 0320 	orrmi.w	r3, r3, #32
 800b80a:	6023      	strmi	r3, [r4, #0]
 800b80c:	b91d      	cbnz	r5, 800b816 <_printf_i+0x196>
 800b80e:	6823      	ldr	r3, [r4, #0]
 800b810:	f023 0320 	bic.w	r3, r3, #32
 800b814:	6023      	str	r3, [r4, #0]
 800b816:	2310      	movs	r3, #16
 800b818:	e7b0      	b.n	800b77c <_printf_i+0xfc>
 800b81a:	6823      	ldr	r3, [r4, #0]
 800b81c:	f043 0320 	orr.w	r3, r3, #32
 800b820:	6023      	str	r3, [r4, #0]
 800b822:	2378      	movs	r3, #120	; 0x78
 800b824:	4828      	ldr	r0, [pc, #160]	; (800b8c8 <_printf_i+0x248>)
 800b826:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b82a:	e7e3      	b.n	800b7f4 <_printf_i+0x174>
 800b82c:	065e      	lsls	r6, r3, #25
 800b82e:	bf48      	it	mi
 800b830:	b2ad      	uxthmi	r5, r5
 800b832:	e7e6      	b.n	800b802 <_printf_i+0x182>
 800b834:	4616      	mov	r6, r2
 800b836:	e7bb      	b.n	800b7b0 <_printf_i+0x130>
 800b838:	680b      	ldr	r3, [r1, #0]
 800b83a:	6826      	ldr	r6, [r4, #0]
 800b83c:	6960      	ldr	r0, [r4, #20]
 800b83e:	1d1d      	adds	r5, r3, #4
 800b840:	600d      	str	r5, [r1, #0]
 800b842:	0635      	lsls	r5, r6, #24
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	d501      	bpl.n	800b84c <_printf_i+0x1cc>
 800b848:	6018      	str	r0, [r3, #0]
 800b84a:	e002      	b.n	800b852 <_printf_i+0x1d2>
 800b84c:	0671      	lsls	r1, r6, #25
 800b84e:	d5fb      	bpl.n	800b848 <_printf_i+0x1c8>
 800b850:	8018      	strh	r0, [r3, #0]
 800b852:	2300      	movs	r3, #0
 800b854:	6123      	str	r3, [r4, #16]
 800b856:	4616      	mov	r6, r2
 800b858:	e7ba      	b.n	800b7d0 <_printf_i+0x150>
 800b85a:	680b      	ldr	r3, [r1, #0]
 800b85c:	1d1a      	adds	r2, r3, #4
 800b85e:	600a      	str	r2, [r1, #0]
 800b860:	681e      	ldr	r6, [r3, #0]
 800b862:	6862      	ldr	r2, [r4, #4]
 800b864:	2100      	movs	r1, #0
 800b866:	4630      	mov	r0, r6
 800b868:	f7f4 fcc2 	bl	80001f0 <memchr>
 800b86c:	b108      	cbz	r0, 800b872 <_printf_i+0x1f2>
 800b86e:	1b80      	subs	r0, r0, r6
 800b870:	6060      	str	r0, [r4, #4]
 800b872:	6863      	ldr	r3, [r4, #4]
 800b874:	6123      	str	r3, [r4, #16]
 800b876:	2300      	movs	r3, #0
 800b878:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b87c:	e7a8      	b.n	800b7d0 <_printf_i+0x150>
 800b87e:	6923      	ldr	r3, [r4, #16]
 800b880:	4632      	mov	r2, r6
 800b882:	4649      	mov	r1, r9
 800b884:	4640      	mov	r0, r8
 800b886:	47d0      	blx	sl
 800b888:	3001      	adds	r0, #1
 800b88a:	d0ab      	beq.n	800b7e4 <_printf_i+0x164>
 800b88c:	6823      	ldr	r3, [r4, #0]
 800b88e:	079b      	lsls	r3, r3, #30
 800b890:	d413      	bmi.n	800b8ba <_printf_i+0x23a>
 800b892:	68e0      	ldr	r0, [r4, #12]
 800b894:	9b03      	ldr	r3, [sp, #12]
 800b896:	4298      	cmp	r0, r3
 800b898:	bfb8      	it	lt
 800b89a:	4618      	movlt	r0, r3
 800b89c:	e7a4      	b.n	800b7e8 <_printf_i+0x168>
 800b89e:	2301      	movs	r3, #1
 800b8a0:	4632      	mov	r2, r6
 800b8a2:	4649      	mov	r1, r9
 800b8a4:	4640      	mov	r0, r8
 800b8a6:	47d0      	blx	sl
 800b8a8:	3001      	adds	r0, #1
 800b8aa:	d09b      	beq.n	800b7e4 <_printf_i+0x164>
 800b8ac:	3501      	adds	r5, #1
 800b8ae:	68e3      	ldr	r3, [r4, #12]
 800b8b0:	9903      	ldr	r1, [sp, #12]
 800b8b2:	1a5b      	subs	r3, r3, r1
 800b8b4:	42ab      	cmp	r3, r5
 800b8b6:	dcf2      	bgt.n	800b89e <_printf_i+0x21e>
 800b8b8:	e7eb      	b.n	800b892 <_printf_i+0x212>
 800b8ba:	2500      	movs	r5, #0
 800b8bc:	f104 0619 	add.w	r6, r4, #25
 800b8c0:	e7f5      	b.n	800b8ae <_printf_i+0x22e>
 800b8c2:	bf00      	nop
 800b8c4:	0800fcf2 	.word	0x0800fcf2
 800b8c8:	0800fd03 	.word	0x0800fd03

0800b8cc <siprintf>:
 800b8cc:	b40e      	push	{r1, r2, r3}
 800b8ce:	b500      	push	{lr}
 800b8d0:	b09c      	sub	sp, #112	; 0x70
 800b8d2:	ab1d      	add	r3, sp, #116	; 0x74
 800b8d4:	9002      	str	r0, [sp, #8]
 800b8d6:	9006      	str	r0, [sp, #24]
 800b8d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b8dc:	4809      	ldr	r0, [pc, #36]	; (800b904 <siprintf+0x38>)
 800b8de:	9107      	str	r1, [sp, #28]
 800b8e0:	9104      	str	r1, [sp, #16]
 800b8e2:	4909      	ldr	r1, [pc, #36]	; (800b908 <siprintf+0x3c>)
 800b8e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8e8:	9105      	str	r1, [sp, #20]
 800b8ea:	6800      	ldr	r0, [r0, #0]
 800b8ec:	9301      	str	r3, [sp, #4]
 800b8ee:	a902      	add	r1, sp, #8
 800b8f0:	f003 f89a 	bl	800ea28 <_svfiprintf_r>
 800b8f4:	9b02      	ldr	r3, [sp, #8]
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	701a      	strb	r2, [r3, #0]
 800b8fa:	b01c      	add	sp, #112	; 0x70
 800b8fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800b900:	b003      	add	sp, #12
 800b902:	4770      	bx	lr
 800b904:	20000074 	.word	0x20000074
 800b908:	ffff0208 	.word	0xffff0208

0800b90c <strcat>:
 800b90c:	b510      	push	{r4, lr}
 800b90e:	4602      	mov	r2, r0
 800b910:	7814      	ldrb	r4, [r2, #0]
 800b912:	4613      	mov	r3, r2
 800b914:	3201      	adds	r2, #1
 800b916:	2c00      	cmp	r4, #0
 800b918:	d1fa      	bne.n	800b910 <strcat+0x4>
 800b91a:	3b01      	subs	r3, #1
 800b91c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b920:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b924:	2a00      	cmp	r2, #0
 800b926:	d1f9      	bne.n	800b91c <strcat+0x10>
 800b928:	bd10      	pop	{r4, pc}

0800b92a <strcpy>:
 800b92a:	4603      	mov	r3, r0
 800b92c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b930:	f803 2b01 	strb.w	r2, [r3], #1
 800b934:	2a00      	cmp	r2, #0
 800b936:	d1f9      	bne.n	800b92c <strcpy+0x2>
 800b938:	4770      	bx	lr

0800b93a <sulp>:
 800b93a:	b570      	push	{r4, r5, r6, lr}
 800b93c:	4604      	mov	r4, r0
 800b93e:	460d      	mov	r5, r1
 800b940:	ec45 4b10 	vmov	d0, r4, r5
 800b944:	4616      	mov	r6, r2
 800b946:	f002 fe0b 	bl	800e560 <__ulp>
 800b94a:	ec51 0b10 	vmov	r0, r1, d0
 800b94e:	b17e      	cbz	r6, 800b970 <sulp+0x36>
 800b950:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b954:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b958:	2b00      	cmp	r3, #0
 800b95a:	dd09      	ble.n	800b970 <sulp+0x36>
 800b95c:	051b      	lsls	r3, r3, #20
 800b95e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b962:	2400      	movs	r4, #0
 800b964:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b968:	4622      	mov	r2, r4
 800b96a:	462b      	mov	r3, r5
 800b96c:	f7f4 fe4c 	bl	8000608 <__aeabi_dmul>
 800b970:	bd70      	pop	{r4, r5, r6, pc}
 800b972:	0000      	movs	r0, r0
 800b974:	0000      	movs	r0, r0
	...

0800b978 <_strtod_l>:
 800b978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b97c:	b0a3      	sub	sp, #140	; 0x8c
 800b97e:	461f      	mov	r7, r3
 800b980:	2300      	movs	r3, #0
 800b982:	931e      	str	r3, [sp, #120]	; 0x78
 800b984:	4ba4      	ldr	r3, [pc, #656]	; (800bc18 <_strtod_l+0x2a0>)
 800b986:	9219      	str	r2, [sp, #100]	; 0x64
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	9307      	str	r3, [sp, #28]
 800b98c:	4604      	mov	r4, r0
 800b98e:	4618      	mov	r0, r3
 800b990:	4688      	mov	r8, r1
 800b992:	f7f4 fc25 	bl	80001e0 <strlen>
 800b996:	f04f 0a00 	mov.w	sl, #0
 800b99a:	4605      	mov	r5, r0
 800b99c:	f04f 0b00 	mov.w	fp, #0
 800b9a0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800b9a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b9a6:	781a      	ldrb	r2, [r3, #0]
 800b9a8:	2a2b      	cmp	r2, #43	; 0x2b
 800b9aa:	d04c      	beq.n	800ba46 <_strtod_l+0xce>
 800b9ac:	d839      	bhi.n	800ba22 <_strtod_l+0xaa>
 800b9ae:	2a0d      	cmp	r2, #13
 800b9b0:	d832      	bhi.n	800ba18 <_strtod_l+0xa0>
 800b9b2:	2a08      	cmp	r2, #8
 800b9b4:	d832      	bhi.n	800ba1c <_strtod_l+0xa4>
 800b9b6:	2a00      	cmp	r2, #0
 800b9b8:	d03c      	beq.n	800ba34 <_strtod_l+0xbc>
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	930e      	str	r3, [sp, #56]	; 0x38
 800b9be:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800b9c0:	7833      	ldrb	r3, [r6, #0]
 800b9c2:	2b30      	cmp	r3, #48	; 0x30
 800b9c4:	f040 80b4 	bne.w	800bb30 <_strtod_l+0x1b8>
 800b9c8:	7873      	ldrb	r3, [r6, #1]
 800b9ca:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b9ce:	2b58      	cmp	r3, #88	; 0x58
 800b9d0:	d16c      	bne.n	800baac <_strtod_l+0x134>
 800b9d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b9d4:	9301      	str	r3, [sp, #4]
 800b9d6:	ab1e      	add	r3, sp, #120	; 0x78
 800b9d8:	9702      	str	r7, [sp, #8]
 800b9da:	9300      	str	r3, [sp, #0]
 800b9dc:	4a8f      	ldr	r2, [pc, #572]	; (800bc1c <_strtod_l+0x2a4>)
 800b9de:	ab1f      	add	r3, sp, #124	; 0x7c
 800b9e0:	a91d      	add	r1, sp, #116	; 0x74
 800b9e2:	4620      	mov	r0, r4
 800b9e4:	f001 ff26 	bl	800d834 <__gethex>
 800b9e8:	f010 0707 	ands.w	r7, r0, #7
 800b9ec:	4605      	mov	r5, r0
 800b9ee:	d005      	beq.n	800b9fc <_strtod_l+0x84>
 800b9f0:	2f06      	cmp	r7, #6
 800b9f2:	d12a      	bne.n	800ba4a <_strtod_l+0xd2>
 800b9f4:	3601      	adds	r6, #1
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	961d      	str	r6, [sp, #116]	; 0x74
 800b9fa:	930e      	str	r3, [sp, #56]	; 0x38
 800b9fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	f040 8596 	bne.w	800c530 <_strtod_l+0xbb8>
 800ba04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ba06:	b1db      	cbz	r3, 800ba40 <_strtod_l+0xc8>
 800ba08:	4652      	mov	r2, sl
 800ba0a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ba0e:	ec43 2b10 	vmov	d0, r2, r3
 800ba12:	b023      	add	sp, #140	; 0x8c
 800ba14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba18:	2a20      	cmp	r2, #32
 800ba1a:	d1ce      	bne.n	800b9ba <_strtod_l+0x42>
 800ba1c:	3301      	adds	r3, #1
 800ba1e:	931d      	str	r3, [sp, #116]	; 0x74
 800ba20:	e7c0      	b.n	800b9a4 <_strtod_l+0x2c>
 800ba22:	2a2d      	cmp	r2, #45	; 0x2d
 800ba24:	d1c9      	bne.n	800b9ba <_strtod_l+0x42>
 800ba26:	2201      	movs	r2, #1
 800ba28:	920e      	str	r2, [sp, #56]	; 0x38
 800ba2a:	1c5a      	adds	r2, r3, #1
 800ba2c:	921d      	str	r2, [sp, #116]	; 0x74
 800ba2e:	785b      	ldrb	r3, [r3, #1]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d1c4      	bne.n	800b9be <_strtod_l+0x46>
 800ba34:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ba36:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	f040 8576 	bne.w	800c52c <_strtod_l+0xbb4>
 800ba40:	4652      	mov	r2, sl
 800ba42:	465b      	mov	r3, fp
 800ba44:	e7e3      	b.n	800ba0e <_strtod_l+0x96>
 800ba46:	2200      	movs	r2, #0
 800ba48:	e7ee      	b.n	800ba28 <_strtod_l+0xb0>
 800ba4a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ba4c:	b13a      	cbz	r2, 800ba5e <_strtod_l+0xe6>
 800ba4e:	2135      	movs	r1, #53	; 0x35
 800ba50:	a820      	add	r0, sp, #128	; 0x80
 800ba52:	f002 fe90 	bl	800e776 <__copybits>
 800ba56:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ba58:	4620      	mov	r0, r4
 800ba5a:	f002 fa55 	bl	800df08 <_Bfree>
 800ba5e:	3f01      	subs	r7, #1
 800ba60:	2f05      	cmp	r7, #5
 800ba62:	d807      	bhi.n	800ba74 <_strtod_l+0xfc>
 800ba64:	e8df f007 	tbb	[pc, r7]
 800ba68:	1d180b0e 	.word	0x1d180b0e
 800ba6c:	030e      	.short	0x030e
 800ba6e:	f04f 0b00 	mov.w	fp, #0
 800ba72:	46da      	mov	sl, fp
 800ba74:	0728      	lsls	r0, r5, #28
 800ba76:	d5c1      	bpl.n	800b9fc <_strtod_l+0x84>
 800ba78:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800ba7c:	e7be      	b.n	800b9fc <_strtod_l+0x84>
 800ba7e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800ba82:	e7f7      	b.n	800ba74 <_strtod_l+0xfc>
 800ba84:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800ba88:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800ba8a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ba8e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ba92:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ba96:	e7ed      	b.n	800ba74 <_strtod_l+0xfc>
 800ba98:	f8df b184 	ldr.w	fp, [pc, #388]	; 800bc20 <_strtod_l+0x2a8>
 800ba9c:	f04f 0a00 	mov.w	sl, #0
 800baa0:	e7e8      	b.n	800ba74 <_strtod_l+0xfc>
 800baa2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800baa6:	f04f 3aff 	mov.w	sl, #4294967295
 800baaa:	e7e3      	b.n	800ba74 <_strtod_l+0xfc>
 800baac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800baae:	1c5a      	adds	r2, r3, #1
 800bab0:	921d      	str	r2, [sp, #116]	; 0x74
 800bab2:	785b      	ldrb	r3, [r3, #1]
 800bab4:	2b30      	cmp	r3, #48	; 0x30
 800bab6:	d0f9      	beq.n	800baac <_strtod_l+0x134>
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d09f      	beq.n	800b9fc <_strtod_l+0x84>
 800babc:	2301      	movs	r3, #1
 800babe:	f04f 0900 	mov.w	r9, #0
 800bac2:	9304      	str	r3, [sp, #16]
 800bac4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bac6:	930a      	str	r3, [sp, #40]	; 0x28
 800bac8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800bacc:	464f      	mov	r7, r9
 800bace:	220a      	movs	r2, #10
 800bad0:	981d      	ldr	r0, [sp, #116]	; 0x74
 800bad2:	7806      	ldrb	r6, [r0, #0]
 800bad4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800bad8:	b2d9      	uxtb	r1, r3
 800bada:	2909      	cmp	r1, #9
 800badc:	d92a      	bls.n	800bb34 <_strtod_l+0x1bc>
 800bade:	9907      	ldr	r1, [sp, #28]
 800bae0:	462a      	mov	r2, r5
 800bae2:	f003 fa5e 	bl	800efa2 <strncmp>
 800bae6:	b398      	cbz	r0, 800bb50 <_strtod_l+0x1d8>
 800bae8:	2000      	movs	r0, #0
 800baea:	4633      	mov	r3, r6
 800baec:	463d      	mov	r5, r7
 800baee:	9007      	str	r0, [sp, #28]
 800baf0:	4602      	mov	r2, r0
 800baf2:	2b65      	cmp	r3, #101	; 0x65
 800baf4:	d001      	beq.n	800bafa <_strtod_l+0x182>
 800baf6:	2b45      	cmp	r3, #69	; 0x45
 800baf8:	d118      	bne.n	800bb2c <_strtod_l+0x1b4>
 800bafa:	b91d      	cbnz	r5, 800bb04 <_strtod_l+0x18c>
 800bafc:	9b04      	ldr	r3, [sp, #16]
 800bafe:	4303      	orrs	r3, r0
 800bb00:	d098      	beq.n	800ba34 <_strtod_l+0xbc>
 800bb02:	2500      	movs	r5, #0
 800bb04:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800bb08:	f108 0301 	add.w	r3, r8, #1
 800bb0c:	931d      	str	r3, [sp, #116]	; 0x74
 800bb0e:	f898 3001 	ldrb.w	r3, [r8, #1]
 800bb12:	2b2b      	cmp	r3, #43	; 0x2b
 800bb14:	d075      	beq.n	800bc02 <_strtod_l+0x28a>
 800bb16:	2b2d      	cmp	r3, #45	; 0x2d
 800bb18:	d07b      	beq.n	800bc12 <_strtod_l+0x29a>
 800bb1a:	f04f 0c00 	mov.w	ip, #0
 800bb1e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800bb22:	2909      	cmp	r1, #9
 800bb24:	f240 8082 	bls.w	800bc2c <_strtod_l+0x2b4>
 800bb28:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800bb2c:	2600      	movs	r6, #0
 800bb2e:	e09d      	b.n	800bc6c <_strtod_l+0x2f4>
 800bb30:	2300      	movs	r3, #0
 800bb32:	e7c4      	b.n	800babe <_strtod_l+0x146>
 800bb34:	2f08      	cmp	r7, #8
 800bb36:	bfd8      	it	le
 800bb38:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800bb3a:	f100 0001 	add.w	r0, r0, #1
 800bb3e:	bfda      	itte	le
 800bb40:	fb02 3301 	mlale	r3, r2, r1, r3
 800bb44:	9309      	strle	r3, [sp, #36]	; 0x24
 800bb46:	fb02 3909 	mlagt	r9, r2, r9, r3
 800bb4a:	3701      	adds	r7, #1
 800bb4c:	901d      	str	r0, [sp, #116]	; 0x74
 800bb4e:	e7bf      	b.n	800bad0 <_strtod_l+0x158>
 800bb50:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bb52:	195a      	adds	r2, r3, r5
 800bb54:	921d      	str	r2, [sp, #116]	; 0x74
 800bb56:	5d5b      	ldrb	r3, [r3, r5]
 800bb58:	2f00      	cmp	r7, #0
 800bb5a:	d037      	beq.n	800bbcc <_strtod_l+0x254>
 800bb5c:	9007      	str	r0, [sp, #28]
 800bb5e:	463d      	mov	r5, r7
 800bb60:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800bb64:	2a09      	cmp	r2, #9
 800bb66:	d912      	bls.n	800bb8e <_strtod_l+0x216>
 800bb68:	2201      	movs	r2, #1
 800bb6a:	e7c2      	b.n	800baf2 <_strtod_l+0x17a>
 800bb6c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bb6e:	1c5a      	adds	r2, r3, #1
 800bb70:	921d      	str	r2, [sp, #116]	; 0x74
 800bb72:	785b      	ldrb	r3, [r3, #1]
 800bb74:	3001      	adds	r0, #1
 800bb76:	2b30      	cmp	r3, #48	; 0x30
 800bb78:	d0f8      	beq.n	800bb6c <_strtod_l+0x1f4>
 800bb7a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800bb7e:	2a08      	cmp	r2, #8
 800bb80:	f200 84db 	bhi.w	800c53a <_strtod_l+0xbc2>
 800bb84:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800bb86:	9007      	str	r0, [sp, #28]
 800bb88:	2000      	movs	r0, #0
 800bb8a:	920a      	str	r2, [sp, #40]	; 0x28
 800bb8c:	4605      	mov	r5, r0
 800bb8e:	3b30      	subs	r3, #48	; 0x30
 800bb90:	f100 0201 	add.w	r2, r0, #1
 800bb94:	d014      	beq.n	800bbc0 <_strtod_l+0x248>
 800bb96:	9907      	ldr	r1, [sp, #28]
 800bb98:	4411      	add	r1, r2
 800bb9a:	9107      	str	r1, [sp, #28]
 800bb9c:	462a      	mov	r2, r5
 800bb9e:	eb00 0e05 	add.w	lr, r0, r5
 800bba2:	210a      	movs	r1, #10
 800bba4:	4572      	cmp	r2, lr
 800bba6:	d113      	bne.n	800bbd0 <_strtod_l+0x258>
 800bba8:	182a      	adds	r2, r5, r0
 800bbaa:	2a08      	cmp	r2, #8
 800bbac:	f105 0501 	add.w	r5, r5, #1
 800bbb0:	4405      	add	r5, r0
 800bbb2:	dc1c      	bgt.n	800bbee <_strtod_l+0x276>
 800bbb4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bbb6:	220a      	movs	r2, #10
 800bbb8:	fb02 3301 	mla	r3, r2, r1, r3
 800bbbc:	9309      	str	r3, [sp, #36]	; 0x24
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bbc2:	1c59      	adds	r1, r3, #1
 800bbc4:	911d      	str	r1, [sp, #116]	; 0x74
 800bbc6:	785b      	ldrb	r3, [r3, #1]
 800bbc8:	4610      	mov	r0, r2
 800bbca:	e7c9      	b.n	800bb60 <_strtod_l+0x1e8>
 800bbcc:	4638      	mov	r0, r7
 800bbce:	e7d2      	b.n	800bb76 <_strtod_l+0x1fe>
 800bbd0:	2a08      	cmp	r2, #8
 800bbd2:	dc04      	bgt.n	800bbde <_strtod_l+0x266>
 800bbd4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800bbd6:	434e      	muls	r6, r1
 800bbd8:	9609      	str	r6, [sp, #36]	; 0x24
 800bbda:	3201      	adds	r2, #1
 800bbdc:	e7e2      	b.n	800bba4 <_strtod_l+0x22c>
 800bbde:	f102 0c01 	add.w	ip, r2, #1
 800bbe2:	f1bc 0f10 	cmp.w	ip, #16
 800bbe6:	bfd8      	it	le
 800bbe8:	fb01 f909 	mulle.w	r9, r1, r9
 800bbec:	e7f5      	b.n	800bbda <_strtod_l+0x262>
 800bbee:	2d10      	cmp	r5, #16
 800bbf0:	bfdc      	itt	le
 800bbf2:	220a      	movle	r2, #10
 800bbf4:	fb02 3909 	mlale	r9, r2, r9, r3
 800bbf8:	e7e1      	b.n	800bbbe <_strtod_l+0x246>
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	9307      	str	r3, [sp, #28]
 800bbfe:	2201      	movs	r2, #1
 800bc00:	e77c      	b.n	800bafc <_strtod_l+0x184>
 800bc02:	f04f 0c00 	mov.w	ip, #0
 800bc06:	f108 0302 	add.w	r3, r8, #2
 800bc0a:	931d      	str	r3, [sp, #116]	; 0x74
 800bc0c:	f898 3002 	ldrb.w	r3, [r8, #2]
 800bc10:	e785      	b.n	800bb1e <_strtod_l+0x1a6>
 800bc12:	f04f 0c01 	mov.w	ip, #1
 800bc16:	e7f6      	b.n	800bc06 <_strtod_l+0x28e>
 800bc18:	08010068 	.word	0x08010068
 800bc1c:	0800fd14 	.word	0x0800fd14
 800bc20:	7ff00000 	.word	0x7ff00000
 800bc24:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bc26:	1c59      	adds	r1, r3, #1
 800bc28:	911d      	str	r1, [sp, #116]	; 0x74
 800bc2a:	785b      	ldrb	r3, [r3, #1]
 800bc2c:	2b30      	cmp	r3, #48	; 0x30
 800bc2e:	d0f9      	beq.n	800bc24 <_strtod_l+0x2ac>
 800bc30:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800bc34:	2908      	cmp	r1, #8
 800bc36:	f63f af79 	bhi.w	800bb2c <_strtod_l+0x1b4>
 800bc3a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800bc3e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bc40:	9308      	str	r3, [sp, #32]
 800bc42:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bc44:	1c59      	adds	r1, r3, #1
 800bc46:	911d      	str	r1, [sp, #116]	; 0x74
 800bc48:	785b      	ldrb	r3, [r3, #1]
 800bc4a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800bc4e:	2e09      	cmp	r6, #9
 800bc50:	d937      	bls.n	800bcc2 <_strtod_l+0x34a>
 800bc52:	9e08      	ldr	r6, [sp, #32]
 800bc54:	1b89      	subs	r1, r1, r6
 800bc56:	2908      	cmp	r1, #8
 800bc58:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800bc5c:	dc02      	bgt.n	800bc64 <_strtod_l+0x2ec>
 800bc5e:	4576      	cmp	r6, lr
 800bc60:	bfa8      	it	ge
 800bc62:	4676      	movge	r6, lr
 800bc64:	f1bc 0f00 	cmp.w	ip, #0
 800bc68:	d000      	beq.n	800bc6c <_strtod_l+0x2f4>
 800bc6a:	4276      	negs	r6, r6
 800bc6c:	2d00      	cmp	r5, #0
 800bc6e:	d14f      	bne.n	800bd10 <_strtod_l+0x398>
 800bc70:	9904      	ldr	r1, [sp, #16]
 800bc72:	4301      	orrs	r1, r0
 800bc74:	f47f aec2 	bne.w	800b9fc <_strtod_l+0x84>
 800bc78:	2a00      	cmp	r2, #0
 800bc7a:	f47f aedb 	bne.w	800ba34 <_strtod_l+0xbc>
 800bc7e:	2b69      	cmp	r3, #105	; 0x69
 800bc80:	d027      	beq.n	800bcd2 <_strtod_l+0x35a>
 800bc82:	dc24      	bgt.n	800bcce <_strtod_l+0x356>
 800bc84:	2b49      	cmp	r3, #73	; 0x49
 800bc86:	d024      	beq.n	800bcd2 <_strtod_l+0x35a>
 800bc88:	2b4e      	cmp	r3, #78	; 0x4e
 800bc8a:	f47f aed3 	bne.w	800ba34 <_strtod_l+0xbc>
 800bc8e:	499e      	ldr	r1, [pc, #632]	; (800bf08 <_strtod_l+0x590>)
 800bc90:	a81d      	add	r0, sp, #116	; 0x74
 800bc92:	f002 f827 	bl	800dce4 <__match>
 800bc96:	2800      	cmp	r0, #0
 800bc98:	f43f aecc 	beq.w	800ba34 <_strtod_l+0xbc>
 800bc9c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bc9e:	781b      	ldrb	r3, [r3, #0]
 800bca0:	2b28      	cmp	r3, #40	; 0x28
 800bca2:	d12d      	bne.n	800bd00 <_strtod_l+0x388>
 800bca4:	4999      	ldr	r1, [pc, #612]	; (800bf0c <_strtod_l+0x594>)
 800bca6:	aa20      	add	r2, sp, #128	; 0x80
 800bca8:	a81d      	add	r0, sp, #116	; 0x74
 800bcaa:	f002 f82f 	bl	800dd0c <__hexnan>
 800bcae:	2805      	cmp	r0, #5
 800bcb0:	d126      	bne.n	800bd00 <_strtod_l+0x388>
 800bcb2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bcb4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800bcb8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800bcbc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800bcc0:	e69c      	b.n	800b9fc <_strtod_l+0x84>
 800bcc2:	210a      	movs	r1, #10
 800bcc4:	fb01 3e0e 	mla	lr, r1, lr, r3
 800bcc8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800bccc:	e7b9      	b.n	800bc42 <_strtod_l+0x2ca>
 800bcce:	2b6e      	cmp	r3, #110	; 0x6e
 800bcd0:	e7db      	b.n	800bc8a <_strtod_l+0x312>
 800bcd2:	498f      	ldr	r1, [pc, #572]	; (800bf10 <_strtod_l+0x598>)
 800bcd4:	a81d      	add	r0, sp, #116	; 0x74
 800bcd6:	f002 f805 	bl	800dce4 <__match>
 800bcda:	2800      	cmp	r0, #0
 800bcdc:	f43f aeaa 	beq.w	800ba34 <_strtod_l+0xbc>
 800bce0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bce2:	498c      	ldr	r1, [pc, #560]	; (800bf14 <_strtod_l+0x59c>)
 800bce4:	3b01      	subs	r3, #1
 800bce6:	a81d      	add	r0, sp, #116	; 0x74
 800bce8:	931d      	str	r3, [sp, #116]	; 0x74
 800bcea:	f001 fffb 	bl	800dce4 <__match>
 800bcee:	b910      	cbnz	r0, 800bcf6 <_strtod_l+0x37e>
 800bcf0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bcf2:	3301      	adds	r3, #1
 800bcf4:	931d      	str	r3, [sp, #116]	; 0x74
 800bcf6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800bf24 <_strtod_l+0x5ac>
 800bcfa:	f04f 0a00 	mov.w	sl, #0
 800bcfe:	e67d      	b.n	800b9fc <_strtod_l+0x84>
 800bd00:	4885      	ldr	r0, [pc, #532]	; (800bf18 <_strtod_l+0x5a0>)
 800bd02:	f003 f8ed 	bl	800eee0 <nan>
 800bd06:	ed8d 0b04 	vstr	d0, [sp, #16]
 800bd0a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800bd0e:	e675      	b.n	800b9fc <_strtod_l+0x84>
 800bd10:	9b07      	ldr	r3, [sp, #28]
 800bd12:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd14:	1af3      	subs	r3, r6, r3
 800bd16:	2f00      	cmp	r7, #0
 800bd18:	bf08      	it	eq
 800bd1a:	462f      	moveq	r7, r5
 800bd1c:	2d10      	cmp	r5, #16
 800bd1e:	9308      	str	r3, [sp, #32]
 800bd20:	46a8      	mov	r8, r5
 800bd22:	bfa8      	it	ge
 800bd24:	f04f 0810 	movge.w	r8, #16
 800bd28:	f7f4 fbf4 	bl	8000514 <__aeabi_ui2d>
 800bd2c:	2d09      	cmp	r5, #9
 800bd2e:	4682      	mov	sl, r0
 800bd30:	468b      	mov	fp, r1
 800bd32:	dd13      	ble.n	800bd5c <_strtod_l+0x3e4>
 800bd34:	4b79      	ldr	r3, [pc, #484]	; (800bf1c <_strtod_l+0x5a4>)
 800bd36:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800bd3a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800bd3e:	f7f4 fc63 	bl	8000608 <__aeabi_dmul>
 800bd42:	4682      	mov	sl, r0
 800bd44:	4648      	mov	r0, r9
 800bd46:	468b      	mov	fp, r1
 800bd48:	f7f4 fbe4 	bl	8000514 <__aeabi_ui2d>
 800bd4c:	4602      	mov	r2, r0
 800bd4e:	460b      	mov	r3, r1
 800bd50:	4650      	mov	r0, sl
 800bd52:	4659      	mov	r1, fp
 800bd54:	f7f4 faa2 	bl	800029c <__adddf3>
 800bd58:	4682      	mov	sl, r0
 800bd5a:	468b      	mov	fp, r1
 800bd5c:	2d0f      	cmp	r5, #15
 800bd5e:	dc38      	bgt.n	800bdd2 <_strtod_l+0x45a>
 800bd60:	9b08      	ldr	r3, [sp, #32]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	f43f ae4a 	beq.w	800b9fc <_strtod_l+0x84>
 800bd68:	dd24      	ble.n	800bdb4 <_strtod_l+0x43c>
 800bd6a:	2b16      	cmp	r3, #22
 800bd6c:	dc0b      	bgt.n	800bd86 <_strtod_l+0x40e>
 800bd6e:	4d6b      	ldr	r5, [pc, #428]	; (800bf1c <_strtod_l+0x5a4>)
 800bd70:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800bd74:	e9d5 0100 	ldrd	r0, r1, [r5]
 800bd78:	4652      	mov	r2, sl
 800bd7a:	465b      	mov	r3, fp
 800bd7c:	f7f4 fc44 	bl	8000608 <__aeabi_dmul>
 800bd80:	4682      	mov	sl, r0
 800bd82:	468b      	mov	fp, r1
 800bd84:	e63a      	b.n	800b9fc <_strtod_l+0x84>
 800bd86:	9a08      	ldr	r2, [sp, #32]
 800bd88:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800bd8c:	4293      	cmp	r3, r2
 800bd8e:	db20      	blt.n	800bdd2 <_strtod_l+0x45a>
 800bd90:	4c62      	ldr	r4, [pc, #392]	; (800bf1c <_strtod_l+0x5a4>)
 800bd92:	f1c5 050f 	rsb	r5, r5, #15
 800bd96:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800bd9a:	4652      	mov	r2, sl
 800bd9c:	465b      	mov	r3, fp
 800bd9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bda2:	f7f4 fc31 	bl	8000608 <__aeabi_dmul>
 800bda6:	9b08      	ldr	r3, [sp, #32]
 800bda8:	1b5d      	subs	r5, r3, r5
 800bdaa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800bdae:	e9d4 2300 	ldrd	r2, r3, [r4]
 800bdb2:	e7e3      	b.n	800bd7c <_strtod_l+0x404>
 800bdb4:	9b08      	ldr	r3, [sp, #32]
 800bdb6:	3316      	adds	r3, #22
 800bdb8:	db0b      	blt.n	800bdd2 <_strtod_l+0x45a>
 800bdba:	9b07      	ldr	r3, [sp, #28]
 800bdbc:	4a57      	ldr	r2, [pc, #348]	; (800bf1c <_strtod_l+0x5a4>)
 800bdbe:	1b9e      	subs	r6, r3, r6
 800bdc0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800bdc4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bdc8:	4650      	mov	r0, sl
 800bdca:	4659      	mov	r1, fp
 800bdcc:	f7f4 fd46 	bl	800085c <__aeabi_ddiv>
 800bdd0:	e7d6      	b.n	800bd80 <_strtod_l+0x408>
 800bdd2:	9b08      	ldr	r3, [sp, #32]
 800bdd4:	eba5 0808 	sub.w	r8, r5, r8
 800bdd8:	4498      	add	r8, r3
 800bdda:	f1b8 0f00 	cmp.w	r8, #0
 800bdde:	dd71      	ble.n	800bec4 <_strtod_l+0x54c>
 800bde0:	f018 030f 	ands.w	r3, r8, #15
 800bde4:	d00a      	beq.n	800bdfc <_strtod_l+0x484>
 800bde6:	494d      	ldr	r1, [pc, #308]	; (800bf1c <_strtod_l+0x5a4>)
 800bde8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bdec:	4652      	mov	r2, sl
 800bdee:	465b      	mov	r3, fp
 800bdf0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bdf4:	f7f4 fc08 	bl	8000608 <__aeabi_dmul>
 800bdf8:	4682      	mov	sl, r0
 800bdfa:	468b      	mov	fp, r1
 800bdfc:	f038 080f 	bics.w	r8, r8, #15
 800be00:	d04d      	beq.n	800be9e <_strtod_l+0x526>
 800be02:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800be06:	dd22      	ble.n	800be4e <_strtod_l+0x4d6>
 800be08:	2500      	movs	r5, #0
 800be0a:	462e      	mov	r6, r5
 800be0c:	9509      	str	r5, [sp, #36]	; 0x24
 800be0e:	9507      	str	r5, [sp, #28]
 800be10:	2322      	movs	r3, #34	; 0x22
 800be12:	f8df b110 	ldr.w	fp, [pc, #272]	; 800bf24 <_strtod_l+0x5ac>
 800be16:	6023      	str	r3, [r4, #0]
 800be18:	f04f 0a00 	mov.w	sl, #0
 800be1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be1e:	2b00      	cmp	r3, #0
 800be20:	f43f adec 	beq.w	800b9fc <_strtod_l+0x84>
 800be24:	991e      	ldr	r1, [sp, #120]	; 0x78
 800be26:	4620      	mov	r0, r4
 800be28:	f002 f86e 	bl	800df08 <_Bfree>
 800be2c:	9907      	ldr	r1, [sp, #28]
 800be2e:	4620      	mov	r0, r4
 800be30:	f002 f86a 	bl	800df08 <_Bfree>
 800be34:	4631      	mov	r1, r6
 800be36:	4620      	mov	r0, r4
 800be38:	f002 f866 	bl	800df08 <_Bfree>
 800be3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800be3e:	4620      	mov	r0, r4
 800be40:	f002 f862 	bl	800df08 <_Bfree>
 800be44:	4629      	mov	r1, r5
 800be46:	4620      	mov	r0, r4
 800be48:	f002 f85e 	bl	800df08 <_Bfree>
 800be4c:	e5d6      	b.n	800b9fc <_strtod_l+0x84>
 800be4e:	2300      	movs	r3, #0
 800be50:	ea4f 1828 	mov.w	r8, r8, asr #4
 800be54:	4650      	mov	r0, sl
 800be56:	4659      	mov	r1, fp
 800be58:	4699      	mov	r9, r3
 800be5a:	f1b8 0f01 	cmp.w	r8, #1
 800be5e:	dc21      	bgt.n	800bea4 <_strtod_l+0x52c>
 800be60:	b10b      	cbz	r3, 800be66 <_strtod_l+0x4ee>
 800be62:	4682      	mov	sl, r0
 800be64:	468b      	mov	fp, r1
 800be66:	4b2e      	ldr	r3, [pc, #184]	; (800bf20 <_strtod_l+0x5a8>)
 800be68:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800be6c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800be70:	4652      	mov	r2, sl
 800be72:	465b      	mov	r3, fp
 800be74:	e9d9 0100 	ldrd	r0, r1, [r9]
 800be78:	f7f4 fbc6 	bl	8000608 <__aeabi_dmul>
 800be7c:	4b29      	ldr	r3, [pc, #164]	; (800bf24 <_strtod_l+0x5ac>)
 800be7e:	460a      	mov	r2, r1
 800be80:	400b      	ands	r3, r1
 800be82:	4929      	ldr	r1, [pc, #164]	; (800bf28 <_strtod_l+0x5b0>)
 800be84:	428b      	cmp	r3, r1
 800be86:	4682      	mov	sl, r0
 800be88:	d8be      	bhi.n	800be08 <_strtod_l+0x490>
 800be8a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800be8e:	428b      	cmp	r3, r1
 800be90:	bf86      	itte	hi
 800be92:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800bf2c <_strtod_l+0x5b4>
 800be96:	f04f 3aff 	movhi.w	sl, #4294967295
 800be9a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800be9e:	2300      	movs	r3, #0
 800bea0:	9304      	str	r3, [sp, #16]
 800bea2:	e081      	b.n	800bfa8 <_strtod_l+0x630>
 800bea4:	f018 0f01 	tst.w	r8, #1
 800bea8:	d007      	beq.n	800beba <_strtod_l+0x542>
 800beaa:	4b1d      	ldr	r3, [pc, #116]	; (800bf20 <_strtod_l+0x5a8>)
 800beac:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800beb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beb4:	f7f4 fba8 	bl	8000608 <__aeabi_dmul>
 800beb8:	2301      	movs	r3, #1
 800beba:	f109 0901 	add.w	r9, r9, #1
 800bebe:	ea4f 0868 	mov.w	r8, r8, asr #1
 800bec2:	e7ca      	b.n	800be5a <_strtod_l+0x4e2>
 800bec4:	d0eb      	beq.n	800be9e <_strtod_l+0x526>
 800bec6:	f1c8 0800 	rsb	r8, r8, #0
 800beca:	f018 020f 	ands.w	r2, r8, #15
 800bece:	d00a      	beq.n	800bee6 <_strtod_l+0x56e>
 800bed0:	4b12      	ldr	r3, [pc, #72]	; (800bf1c <_strtod_l+0x5a4>)
 800bed2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bed6:	4650      	mov	r0, sl
 800bed8:	4659      	mov	r1, fp
 800beda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bede:	f7f4 fcbd 	bl	800085c <__aeabi_ddiv>
 800bee2:	4682      	mov	sl, r0
 800bee4:	468b      	mov	fp, r1
 800bee6:	ea5f 1828 	movs.w	r8, r8, asr #4
 800beea:	d0d8      	beq.n	800be9e <_strtod_l+0x526>
 800beec:	f1b8 0f1f 	cmp.w	r8, #31
 800bef0:	dd1e      	ble.n	800bf30 <_strtod_l+0x5b8>
 800bef2:	2500      	movs	r5, #0
 800bef4:	462e      	mov	r6, r5
 800bef6:	9509      	str	r5, [sp, #36]	; 0x24
 800bef8:	9507      	str	r5, [sp, #28]
 800befa:	2322      	movs	r3, #34	; 0x22
 800befc:	f04f 0a00 	mov.w	sl, #0
 800bf00:	f04f 0b00 	mov.w	fp, #0
 800bf04:	6023      	str	r3, [r4, #0]
 800bf06:	e789      	b.n	800be1c <_strtod_l+0x4a4>
 800bf08:	0800fced 	.word	0x0800fced
 800bf0c:	0800fd28 	.word	0x0800fd28
 800bf10:	0800fce5 	.word	0x0800fce5
 800bf14:	0800ff20 	.word	0x0800ff20
 800bf18:	0800fe1b 	.word	0x0800fe1b
 800bf1c:	08010108 	.word	0x08010108
 800bf20:	080100e0 	.word	0x080100e0
 800bf24:	7ff00000 	.word	0x7ff00000
 800bf28:	7ca00000 	.word	0x7ca00000
 800bf2c:	7fefffff 	.word	0x7fefffff
 800bf30:	f018 0310 	ands.w	r3, r8, #16
 800bf34:	bf18      	it	ne
 800bf36:	236a      	movne	r3, #106	; 0x6a
 800bf38:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800c2f0 <_strtod_l+0x978>
 800bf3c:	9304      	str	r3, [sp, #16]
 800bf3e:	4650      	mov	r0, sl
 800bf40:	4659      	mov	r1, fp
 800bf42:	2300      	movs	r3, #0
 800bf44:	f018 0f01 	tst.w	r8, #1
 800bf48:	d004      	beq.n	800bf54 <_strtod_l+0x5dc>
 800bf4a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800bf4e:	f7f4 fb5b 	bl	8000608 <__aeabi_dmul>
 800bf52:	2301      	movs	r3, #1
 800bf54:	ea5f 0868 	movs.w	r8, r8, asr #1
 800bf58:	f109 0908 	add.w	r9, r9, #8
 800bf5c:	d1f2      	bne.n	800bf44 <_strtod_l+0x5cc>
 800bf5e:	b10b      	cbz	r3, 800bf64 <_strtod_l+0x5ec>
 800bf60:	4682      	mov	sl, r0
 800bf62:	468b      	mov	fp, r1
 800bf64:	9b04      	ldr	r3, [sp, #16]
 800bf66:	b1bb      	cbz	r3, 800bf98 <_strtod_l+0x620>
 800bf68:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800bf6c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	4659      	mov	r1, fp
 800bf74:	dd10      	ble.n	800bf98 <_strtod_l+0x620>
 800bf76:	2b1f      	cmp	r3, #31
 800bf78:	f340 8128 	ble.w	800c1cc <_strtod_l+0x854>
 800bf7c:	2b34      	cmp	r3, #52	; 0x34
 800bf7e:	bfde      	ittt	le
 800bf80:	3b20      	suble	r3, #32
 800bf82:	f04f 32ff 	movle.w	r2, #4294967295
 800bf86:	fa02 f303 	lslle.w	r3, r2, r3
 800bf8a:	f04f 0a00 	mov.w	sl, #0
 800bf8e:	bfcc      	ite	gt
 800bf90:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800bf94:	ea03 0b01 	andle.w	fp, r3, r1
 800bf98:	2200      	movs	r2, #0
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	4650      	mov	r0, sl
 800bf9e:	4659      	mov	r1, fp
 800bfa0:	f7f4 fd9a 	bl	8000ad8 <__aeabi_dcmpeq>
 800bfa4:	2800      	cmp	r0, #0
 800bfa6:	d1a4      	bne.n	800bef2 <_strtod_l+0x57a>
 800bfa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfaa:	9300      	str	r3, [sp, #0]
 800bfac:	990a      	ldr	r1, [sp, #40]	; 0x28
 800bfae:	462b      	mov	r3, r5
 800bfb0:	463a      	mov	r2, r7
 800bfb2:	4620      	mov	r0, r4
 800bfb4:	f002 f814 	bl	800dfe0 <__s2b>
 800bfb8:	9009      	str	r0, [sp, #36]	; 0x24
 800bfba:	2800      	cmp	r0, #0
 800bfbc:	f43f af24 	beq.w	800be08 <_strtod_l+0x490>
 800bfc0:	9b07      	ldr	r3, [sp, #28]
 800bfc2:	1b9e      	subs	r6, r3, r6
 800bfc4:	9b08      	ldr	r3, [sp, #32]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	bfb4      	ite	lt
 800bfca:	4633      	movlt	r3, r6
 800bfcc:	2300      	movge	r3, #0
 800bfce:	9310      	str	r3, [sp, #64]	; 0x40
 800bfd0:	9b08      	ldr	r3, [sp, #32]
 800bfd2:	2500      	movs	r5, #0
 800bfd4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800bfd8:	9318      	str	r3, [sp, #96]	; 0x60
 800bfda:	462e      	mov	r6, r5
 800bfdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfde:	4620      	mov	r0, r4
 800bfe0:	6859      	ldr	r1, [r3, #4]
 800bfe2:	f001 ff51 	bl	800de88 <_Balloc>
 800bfe6:	9007      	str	r0, [sp, #28]
 800bfe8:	2800      	cmp	r0, #0
 800bfea:	f43f af11 	beq.w	800be10 <_strtod_l+0x498>
 800bfee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bff0:	691a      	ldr	r2, [r3, #16]
 800bff2:	3202      	adds	r2, #2
 800bff4:	f103 010c 	add.w	r1, r3, #12
 800bff8:	0092      	lsls	r2, r2, #2
 800bffa:	300c      	adds	r0, #12
 800bffc:	f7fe ffe6 	bl	800afcc <memcpy>
 800c000:	ec4b ab10 	vmov	d0, sl, fp
 800c004:	aa20      	add	r2, sp, #128	; 0x80
 800c006:	a91f      	add	r1, sp, #124	; 0x7c
 800c008:	4620      	mov	r0, r4
 800c00a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800c00e:	f002 fb23 	bl	800e658 <__d2b>
 800c012:	901e      	str	r0, [sp, #120]	; 0x78
 800c014:	2800      	cmp	r0, #0
 800c016:	f43f aefb 	beq.w	800be10 <_strtod_l+0x498>
 800c01a:	2101      	movs	r1, #1
 800c01c:	4620      	mov	r0, r4
 800c01e:	f002 f879 	bl	800e114 <__i2b>
 800c022:	4606      	mov	r6, r0
 800c024:	2800      	cmp	r0, #0
 800c026:	f43f aef3 	beq.w	800be10 <_strtod_l+0x498>
 800c02a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c02c:	9904      	ldr	r1, [sp, #16]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	bfab      	itete	ge
 800c032:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800c034:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800c036:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800c038:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800c03c:	bfac      	ite	ge
 800c03e:	eb03 0902 	addge.w	r9, r3, r2
 800c042:	1ad7      	sublt	r7, r2, r3
 800c044:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c046:	eba3 0801 	sub.w	r8, r3, r1
 800c04a:	4490      	add	r8, r2
 800c04c:	4ba3      	ldr	r3, [pc, #652]	; (800c2dc <_strtod_l+0x964>)
 800c04e:	f108 38ff 	add.w	r8, r8, #4294967295
 800c052:	4598      	cmp	r8, r3
 800c054:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c058:	f280 80cc 	bge.w	800c1f4 <_strtod_l+0x87c>
 800c05c:	eba3 0308 	sub.w	r3, r3, r8
 800c060:	2b1f      	cmp	r3, #31
 800c062:	eba2 0203 	sub.w	r2, r2, r3
 800c066:	f04f 0101 	mov.w	r1, #1
 800c06a:	f300 80b6 	bgt.w	800c1da <_strtod_l+0x862>
 800c06e:	fa01 f303 	lsl.w	r3, r1, r3
 800c072:	9311      	str	r3, [sp, #68]	; 0x44
 800c074:	2300      	movs	r3, #0
 800c076:	930c      	str	r3, [sp, #48]	; 0x30
 800c078:	eb09 0802 	add.w	r8, r9, r2
 800c07c:	9b04      	ldr	r3, [sp, #16]
 800c07e:	45c1      	cmp	r9, r8
 800c080:	4417      	add	r7, r2
 800c082:	441f      	add	r7, r3
 800c084:	464b      	mov	r3, r9
 800c086:	bfa8      	it	ge
 800c088:	4643      	movge	r3, r8
 800c08a:	42bb      	cmp	r3, r7
 800c08c:	bfa8      	it	ge
 800c08e:	463b      	movge	r3, r7
 800c090:	2b00      	cmp	r3, #0
 800c092:	bfc2      	ittt	gt
 800c094:	eba8 0803 	subgt.w	r8, r8, r3
 800c098:	1aff      	subgt	r7, r7, r3
 800c09a:	eba9 0903 	subgt.w	r9, r9, r3
 800c09e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	dd17      	ble.n	800c0d4 <_strtod_l+0x75c>
 800c0a4:	4631      	mov	r1, r6
 800c0a6:	461a      	mov	r2, r3
 800c0a8:	4620      	mov	r0, r4
 800c0aa:	f002 f8ef 	bl	800e28c <__pow5mult>
 800c0ae:	4606      	mov	r6, r0
 800c0b0:	2800      	cmp	r0, #0
 800c0b2:	f43f aead 	beq.w	800be10 <_strtod_l+0x498>
 800c0b6:	4601      	mov	r1, r0
 800c0b8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c0ba:	4620      	mov	r0, r4
 800c0bc:	f002 f840 	bl	800e140 <__multiply>
 800c0c0:	900f      	str	r0, [sp, #60]	; 0x3c
 800c0c2:	2800      	cmp	r0, #0
 800c0c4:	f43f aea4 	beq.w	800be10 <_strtod_l+0x498>
 800c0c8:	991e      	ldr	r1, [sp, #120]	; 0x78
 800c0ca:	4620      	mov	r0, r4
 800c0cc:	f001 ff1c 	bl	800df08 <_Bfree>
 800c0d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c0d2:	931e      	str	r3, [sp, #120]	; 0x78
 800c0d4:	f1b8 0f00 	cmp.w	r8, #0
 800c0d8:	f300 8091 	bgt.w	800c1fe <_strtod_l+0x886>
 800c0dc:	9b08      	ldr	r3, [sp, #32]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	dd08      	ble.n	800c0f4 <_strtod_l+0x77c>
 800c0e2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c0e4:	9907      	ldr	r1, [sp, #28]
 800c0e6:	4620      	mov	r0, r4
 800c0e8:	f002 f8d0 	bl	800e28c <__pow5mult>
 800c0ec:	9007      	str	r0, [sp, #28]
 800c0ee:	2800      	cmp	r0, #0
 800c0f0:	f43f ae8e 	beq.w	800be10 <_strtod_l+0x498>
 800c0f4:	2f00      	cmp	r7, #0
 800c0f6:	dd08      	ble.n	800c10a <_strtod_l+0x792>
 800c0f8:	9907      	ldr	r1, [sp, #28]
 800c0fa:	463a      	mov	r2, r7
 800c0fc:	4620      	mov	r0, r4
 800c0fe:	f002 f91f 	bl	800e340 <__lshift>
 800c102:	9007      	str	r0, [sp, #28]
 800c104:	2800      	cmp	r0, #0
 800c106:	f43f ae83 	beq.w	800be10 <_strtod_l+0x498>
 800c10a:	f1b9 0f00 	cmp.w	r9, #0
 800c10e:	dd08      	ble.n	800c122 <_strtod_l+0x7aa>
 800c110:	4631      	mov	r1, r6
 800c112:	464a      	mov	r2, r9
 800c114:	4620      	mov	r0, r4
 800c116:	f002 f913 	bl	800e340 <__lshift>
 800c11a:	4606      	mov	r6, r0
 800c11c:	2800      	cmp	r0, #0
 800c11e:	f43f ae77 	beq.w	800be10 <_strtod_l+0x498>
 800c122:	9a07      	ldr	r2, [sp, #28]
 800c124:	991e      	ldr	r1, [sp, #120]	; 0x78
 800c126:	4620      	mov	r0, r4
 800c128:	f002 f992 	bl	800e450 <__mdiff>
 800c12c:	4605      	mov	r5, r0
 800c12e:	2800      	cmp	r0, #0
 800c130:	f43f ae6e 	beq.w	800be10 <_strtod_l+0x498>
 800c134:	68c3      	ldr	r3, [r0, #12]
 800c136:	930f      	str	r3, [sp, #60]	; 0x3c
 800c138:	2300      	movs	r3, #0
 800c13a:	60c3      	str	r3, [r0, #12]
 800c13c:	4631      	mov	r1, r6
 800c13e:	f002 f96b 	bl	800e418 <__mcmp>
 800c142:	2800      	cmp	r0, #0
 800c144:	da65      	bge.n	800c212 <_strtod_l+0x89a>
 800c146:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c148:	ea53 030a 	orrs.w	r3, r3, sl
 800c14c:	f040 8087 	bne.w	800c25e <_strtod_l+0x8e6>
 800c150:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c154:	2b00      	cmp	r3, #0
 800c156:	f040 8082 	bne.w	800c25e <_strtod_l+0x8e6>
 800c15a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c15e:	0d1b      	lsrs	r3, r3, #20
 800c160:	051b      	lsls	r3, r3, #20
 800c162:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c166:	d97a      	bls.n	800c25e <_strtod_l+0x8e6>
 800c168:	696b      	ldr	r3, [r5, #20]
 800c16a:	b913      	cbnz	r3, 800c172 <_strtod_l+0x7fa>
 800c16c:	692b      	ldr	r3, [r5, #16]
 800c16e:	2b01      	cmp	r3, #1
 800c170:	dd75      	ble.n	800c25e <_strtod_l+0x8e6>
 800c172:	4629      	mov	r1, r5
 800c174:	2201      	movs	r2, #1
 800c176:	4620      	mov	r0, r4
 800c178:	f002 f8e2 	bl	800e340 <__lshift>
 800c17c:	4631      	mov	r1, r6
 800c17e:	4605      	mov	r5, r0
 800c180:	f002 f94a 	bl	800e418 <__mcmp>
 800c184:	2800      	cmp	r0, #0
 800c186:	dd6a      	ble.n	800c25e <_strtod_l+0x8e6>
 800c188:	9904      	ldr	r1, [sp, #16]
 800c18a:	4a55      	ldr	r2, [pc, #340]	; (800c2e0 <_strtod_l+0x968>)
 800c18c:	465b      	mov	r3, fp
 800c18e:	2900      	cmp	r1, #0
 800c190:	f000 8085 	beq.w	800c29e <_strtod_l+0x926>
 800c194:	ea02 010b 	and.w	r1, r2, fp
 800c198:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c19c:	dc7f      	bgt.n	800c29e <_strtod_l+0x926>
 800c19e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c1a2:	f77f aeaa 	ble.w	800befa <_strtod_l+0x582>
 800c1a6:	4a4f      	ldr	r2, [pc, #316]	; (800c2e4 <_strtod_l+0x96c>)
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800c1ae:	4650      	mov	r0, sl
 800c1b0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800c1b4:	4659      	mov	r1, fp
 800c1b6:	f7f4 fa27 	bl	8000608 <__aeabi_dmul>
 800c1ba:	460b      	mov	r3, r1
 800c1bc:	4303      	orrs	r3, r0
 800c1be:	bf08      	it	eq
 800c1c0:	2322      	moveq	r3, #34	; 0x22
 800c1c2:	4682      	mov	sl, r0
 800c1c4:	468b      	mov	fp, r1
 800c1c6:	bf08      	it	eq
 800c1c8:	6023      	streq	r3, [r4, #0]
 800c1ca:	e62b      	b.n	800be24 <_strtod_l+0x4ac>
 800c1cc:	f04f 32ff 	mov.w	r2, #4294967295
 800c1d0:	fa02 f303 	lsl.w	r3, r2, r3
 800c1d4:	ea03 0a0a 	and.w	sl, r3, sl
 800c1d8:	e6de      	b.n	800bf98 <_strtod_l+0x620>
 800c1da:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800c1de:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800c1e2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800c1e6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800c1ea:	fa01 f308 	lsl.w	r3, r1, r8
 800c1ee:	930c      	str	r3, [sp, #48]	; 0x30
 800c1f0:	9111      	str	r1, [sp, #68]	; 0x44
 800c1f2:	e741      	b.n	800c078 <_strtod_l+0x700>
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	930c      	str	r3, [sp, #48]	; 0x30
 800c1f8:	2301      	movs	r3, #1
 800c1fa:	9311      	str	r3, [sp, #68]	; 0x44
 800c1fc:	e73c      	b.n	800c078 <_strtod_l+0x700>
 800c1fe:	991e      	ldr	r1, [sp, #120]	; 0x78
 800c200:	4642      	mov	r2, r8
 800c202:	4620      	mov	r0, r4
 800c204:	f002 f89c 	bl	800e340 <__lshift>
 800c208:	901e      	str	r0, [sp, #120]	; 0x78
 800c20a:	2800      	cmp	r0, #0
 800c20c:	f47f af66 	bne.w	800c0dc <_strtod_l+0x764>
 800c210:	e5fe      	b.n	800be10 <_strtod_l+0x498>
 800c212:	465f      	mov	r7, fp
 800c214:	d16e      	bne.n	800c2f4 <_strtod_l+0x97c>
 800c216:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c218:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c21c:	b342      	cbz	r2, 800c270 <_strtod_l+0x8f8>
 800c21e:	4a32      	ldr	r2, [pc, #200]	; (800c2e8 <_strtod_l+0x970>)
 800c220:	4293      	cmp	r3, r2
 800c222:	d128      	bne.n	800c276 <_strtod_l+0x8fe>
 800c224:	9b04      	ldr	r3, [sp, #16]
 800c226:	4650      	mov	r0, sl
 800c228:	b1eb      	cbz	r3, 800c266 <_strtod_l+0x8ee>
 800c22a:	4a2d      	ldr	r2, [pc, #180]	; (800c2e0 <_strtod_l+0x968>)
 800c22c:	403a      	ands	r2, r7
 800c22e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800c232:	f04f 31ff 	mov.w	r1, #4294967295
 800c236:	d819      	bhi.n	800c26c <_strtod_l+0x8f4>
 800c238:	0d12      	lsrs	r2, r2, #20
 800c23a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c23e:	fa01 f303 	lsl.w	r3, r1, r3
 800c242:	4298      	cmp	r0, r3
 800c244:	d117      	bne.n	800c276 <_strtod_l+0x8fe>
 800c246:	4b29      	ldr	r3, [pc, #164]	; (800c2ec <_strtod_l+0x974>)
 800c248:	429f      	cmp	r7, r3
 800c24a:	d102      	bne.n	800c252 <_strtod_l+0x8da>
 800c24c:	3001      	adds	r0, #1
 800c24e:	f43f addf 	beq.w	800be10 <_strtod_l+0x498>
 800c252:	4b23      	ldr	r3, [pc, #140]	; (800c2e0 <_strtod_l+0x968>)
 800c254:	403b      	ands	r3, r7
 800c256:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800c25a:	f04f 0a00 	mov.w	sl, #0
 800c25e:	9b04      	ldr	r3, [sp, #16]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d1a0      	bne.n	800c1a6 <_strtod_l+0x82e>
 800c264:	e5de      	b.n	800be24 <_strtod_l+0x4ac>
 800c266:	f04f 33ff 	mov.w	r3, #4294967295
 800c26a:	e7ea      	b.n	800c242 <_strtod_l+0x8ca>
 800c26c:	460b      	mov	r3, r1
 800c26e:	e7e8      	b.n	800c242 <_strtod_l+0x8ca>
 800c270:	ea53 030a 	orrs.w	r3, r3, sl
 800c274:	d088      	beq.n	800c188 <_strtod_l+0x810>
 800c276:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c278:	b1db      	cbz	r3, 800c2b2 <_strtod_l+0x93a>
 800c27a:	423b      	tst	r3, r7
 800c27c:	d0ef      	beq.n	800c25e <_strtod_l+0x8e6>
 800c27e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c280:	9a04      	ldr	r2, [sp, #16]
 800c282:	4650      	mov	r0, sl
 800c284:	4659      	mov	r1, fp
 800c286:	b1c3      	cbz	r3, 800c2ba <_strtod_l+0x942>
 800c288:	f7ff fb57 	bl	800b93a <sulp>
 800c28c:	4602      	mov	r2, r0
 800c28e:	460b      	mov	r3, r1
 800c290:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c294:	f7f4 f802 	bl	800029c <__adddf3>
 800c298:	4682      	mov	sl, r0
 800c29a:	468b      	mov	fp, r1
 800c29c:	e7df      	b.n	800c25e <_strtod_l+0x8e6>
 800c29e:	4013      	ands	r3, r2
 800c2a0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c2a4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c2a8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c2ac:	f04f 3aff 	mov.w	sl, #4294967295
 800c2b0:	e7d5      	b.n	800c25e <_strtod_l+0x8e6>
 800c2b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c2b4:	ea13 0f0a 	tst.w	r3, sl
 800c2b8:	e7e0      	b.n	800c27c <_strtod_l+0x904>
 800c2ba:	f7ff fb3e 	bl	800b93a <sulp>
 800c2be:	4602      	mov	r2, r0
 800c2c0:	460b      	mov	r3, r1
 800c2c2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c2c6:	f7f3 ffe7 	bl	8000298 <__aeabi_dsub>
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	4682      	mov	sl, r0
 800c2d0:	468b      	mov	fp, r1
 800c2d2:	f7f4 fc01 	bl	8000ad8 <__aeabi_dcmpeq>
 800c2d6:	2800      	cmp	r0, #0
 800c2d8:	d0c1      	beq.n	800c25e <_strtod_l+0x8e6>
 800c2da:	e60e      	b.n	800befa <_strtod_l+0x582>
 800c2dc:	fffffc02 	.word	0xfffffc02
 800c2e0:	7ff00000 	.word	0x7ff00000
 800c2e4:	39500000 	.word	0x39500000
 800c2e8:	000fffff 	.word	0x000fffff
 800c2ec:	7fefffff 	.word	0x7fefffff
 800c2f0:	0800fd40 	.word	0x0800fd40
 800c2f4:	4631      	mov	r1, r6
 800c2f6:	4628      	mov	r0, r5
 800c2f8:	f002 fa0a 	bl	800e710 <__ratio>
 800c2fc:	ec59 8b10 	vmov	r8, r9, d0
 800c300:	ee10 0a10 	vmov	r0, s0
 800c304:	2200      	movs	r2, #0
 800c306:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c30a:	4649      	mov	r1, r9
 800c30c:	f7f4 fbf8 	bl	8000b00 <__aeabi_dcmple>
 800c310:	2800      	cmp	r0, #0
 800c312:	d07c      	beq.n	800c40e <_strtod_l+0xa96>
 800c314:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c316:	2b00      	cmp	r3, #0
 800c318:	d04c      	beq.n	800c3b4 <_strtod_l+0xa3c>
 800c31a:	4b95      	ldr	r3, [pc, #596]	; (800c570 <_strtod_l+0xbf8>)
 800c31c:	2200      	movs	r2, #0
 800c31e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800c322:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800c570 <_strtod_l+0xbf8>
 800c326:	f04f 0800 	mov.w	r8, #0
 800c32a:	4b92      	ldr	r3, [pc, #584]	; (800c574 <_strtod_l+0xbfc>)
 800c32c:	403b      	ands	r3, r7
 800c32e:	9311      	str	r3, [sp, #68]	; 0x44
 800c330:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c332:	4b91      	ldr	r3, [pc, #580]	; (800c578 <_strtod_l+0xc00>)
 800c334:	429a      	cmp	r2, r3
 800c336:	f040 80b2 	bne.w	800c49e <_strtod_l+0xb26>
 800c33a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c33e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c342:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800c346:	ec4b ab10 	vmov	d0, sl, fp
 800c34a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800c34e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c352:	f002 f905 	bl	800e560 <__ulp>
 800c356:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c35a:	ec53 2b10 	vmov	r2, r3, d0
 800c35e:	f7f4 f953 	bl	8000608 <__aeabi_dmul>
 800c362:	4652      	mov	r2, sl
 800c364:	465b      	mov	r3, fp
 800c366:	f7f3 ff99 	bl	800029c <__adddf3>
 800c36a:	460b      	mov	r3, r1
 800c36c:	4981      	ldr	r1, [pc, #516]	; (800c574 <_strtod_l+0xbfc>)
 800c36e:	4a83      	ldr	r2, [pc, #524]	; (800c57c <_strtod_l+0xc04>)
 800c370:	4019      	ands	r1, r3
 800c372:	4291      	cmp	r1, r2
 800c374:	4682      	mov	sl, r0
 800c376:	d95e      	bls.n	800c436 <_strtod_l+0xabe>
 800c378:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c37a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800c37e:	4293      	cmp	r3, r2
 800c380:	d103      	bne.n	800c38a <_strtod_l+0xa12>
 800c382:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c384:	3301      	adds	r3, #1
 800c386:	f43f ad43 	beq.w	800be10 <_strtod_l+0x498>
 800c38a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800c588 <_strtod_l+0xc10>
 800c38e:	f04f 3aff 	mov.w	sl, #4294967295
 800c392:	991e      	ldr	r1, [sp, #120]	; 0x78
 800c394:	4620      	mov	r0, r4
 800c396:	f001 fdb7 	bl	800df08 <_Bfree>
 800c39a:	9907      	ldr	r1, [sp, #28]
 800c39c:	4620      	mov	r0, r4
 800c39e:	f001 fdb3 	bl	800df08 <_Bfree>
 800c3a2:	4631      	mov	r1, r6
 800c3a4:	4620      	mov	r0, r4
 800c3a6:	f001 fdaf 	bl	800df08 <_Bfree>
 800c3aa:	4629      	mov	r1, r5
 800c3ac:	4620      	mov	r0, r4
 800c3ae:	f001 fdab 	bl	800df08 <_Bfree>
 800c3b2:	e613      	b.n	800bfdc <_strtod_l+0x664>
 800c3b4:	f1ba 0f00 	cmp.w	sl, #0
 800c3b8:	d11b      	bne.n	800c3f2 <_strtod_l+0xa7a>
 800c3ba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c3be:	b9f3      	cbnz	r3, 800c3fe <_strtod_l+0xa86>
 800c3c0:	4b6b      	ldr	r3, [pc, #428]	; (800c570 <_strtod_l+0xbf8>)
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	4640      	mov	r0, r8
 800c3c6:	4649      	mov	r1, r9
 800c3c8:	f7f4 fb90 	bl	8000aec <__aeabi_dcmplt>
 800c3cc:	b9d0      	cbnz	r0, 800c404 <_strtod_l+0xa8c>
 800c3ce:	4640      	mov	r0, r8
 800c3d0:	4649      	mov	r1, r9
 800c3d2:	4b6b      	ldr	r3, [pc, #428]	; (800c580 <_strtod_l+0xc08>)
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	f7f4 f917 	bl	8000608 <__aeabi_dmul>
 800c3da:	4680      	mov	r8, r0
 800c3dc:	4689      	mov	r9, r1
 800c3de:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c3e2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800c3e6:	931b      	str	r3, [sp, #108]	; 0x6c
 800c3e8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800c3ec:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800c3f0:	e79b      	b.n	800c32a <_strtod_l+0x9b2>
 800c3f2:	f1ba 0f01 	cmp.w	sl, #1
 800c3f6:	d102      	bne.n	800c3fe <_strtod_l+0xa86>
 800c3f8:	2f00      	cmp	r7, #0
 800c3fa:	f43f ad7e 	beq.w	800befa <_strtod_l+0x582>
 800c3fe:	4b61      	ldr	r3, [pc, #388]	; (800c584 <_strtod_l+0xc0c>)
 800c400:	2200      	movs	r2, #0
 800c402:	e78c      	b.n	800c31e <_strtod_l+0x9a6>
 800c404:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800c580 <_strtod_l+0xc08>
 800c408:	f04f 0800 	mov.w	r8, #0
 800c40c:	e7e7      	b.n	800c3de <_strtod_l+0xa66>
 800c40e:	4b5c      	ldr	r3, [pc, #368]	; (800c580 <_strtod_l+0xc08>)
 800c410:	4640      	mov	r0, r8
 800c412:	4649      	mov	r1, r9
 800c414:	2200      	movs	r2, #0
 800c416:	f7f4 f8f7 	bl	8000608 <__aeabi_dmul>
 800c41a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c41c:	4680      	mov	r8, r0
 800c41e:	4689      	mov	r9, r1
 800c420:	b933      	cbnz	r3, 800c430 <_strtod_l+0xab8>
 800c422:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c426:	9012      	str	r0, [sp, #72]	; 0x48
 800c428:	9313      	str	r3, [sp, #76]	; 0x4c
 800c42a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800c42e:	e7dd      	b.n	800c3ec <_strtod_l+0xa74>
 800c430:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800c434:	e7f9      	b.n	800c42a <_strtod_l+0xab2>
 800c436:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800c43a:	9b04      	ldr	r3, [sp, #16]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d1a8      	bne.n	800c392 <_strtod_l+0xa1a>
 800c440:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c444:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c446:	0d1b      	lsrs	r3, r3, #20
 800c448:	051b      	lsls	r3, r3, #20
 800c44a:	429a      	cmp	r2, r3
 800c44c:	d1a1      	bne.n	800c392 <_strtod_l+0xa1a>
 800c44e:	4640      	mov	r0, r8
 800c450:	4649      	mov	r1, r9
 800c452:	f7f4 fc39 	bl	8000cc8 <__aeabi_d2lz>
 800c456:	f7f4 f8a9 	bl	80005ac <__aeabi_l2d>
 800c45a:	4602      	mov	r2, r0
 800c45c:	460b      	mov	r3, r1
 800c45e:	4640      	mov	r0, r8
 800c460:	4649      	mov	r1, r9
 800c462:	f7f3 ff19 	bl	8000298 <__aeabi_dsub>
 800c466:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c468:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c46c:	ea43 030a 	orr.w	r3, r3, sl
 800c470:	4313      	orrs	r3, r2
 800c472:	4680      	mov	r8, r0
 800c474:	4689      	mov	r9, r1
 800c476:	d053      	beq.n	800c520 <_strtod_l+0xba8>
 800c478:	a335      	add	r3, pc, #212	; (adr r3, 800c550 <_strtod_l+0xbd8>)
 800c47a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c47e:	f7f4 fb35 	bl	8000aec <__aeabi_dcmplt>
 800c482:	2800      	cmp	r0, #0
 800c484:	f47f acce 	bne.w	800be24 <_strtod_l+0x4ac>
 800c488:	a333      	add	r3, pc, #204	; (adr r3, 800c558 <_strtod_l+0xbe0>)
 800c48a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c48e:	4640      	mov	r0, r8
 800c490:	4649      	mov	r1, r9
 800c492:	f7f4 fb49 	bl	8000b28 <__aeabi_dcmpgt>
 800c496:	2800      	cmp	r0, #0
 800c498:	f43f af7b 	beq.w	800c392 <_strtod_l+0xa1a>
 800c49c:	e4c2      	b.n	800be24 <_strtod_l+0x4ac>
 800c49e:	9b04      	ldr	r3, [sp, #16]
 800c4a0:	b333      	cbz	r3, 800c4f0 <_strtod_l+0xb78>
 800c4a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c4a4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c4a8:	d822      	bhi.n	800c4f0 <_strtod_l+0xb78>
 800c4aa:	a32d      	add	r3, pc, #180	; (adr r3, 800c560 <_strtod_l+0xbe8>)
 800c4ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4b0:	4640      	mov	r0, r8
 800c4b2:	4649      	mov	r1, r9
 800c4b4:	f7f4 fb24 	bl	8000b00 <__aeabi_dcmple>
 800c4b8:	b1a0      	cbz	r0, 800c4e4 <_strtod_l+0xb6c>
 800c4ba:	4649      	mov	r1, r9
 800c4bc:	4640      	mov	r0, r8
 800c4be:	f7f4 fb7b 	bl	8000bb8 <__aeabi_d2uiz>
 800c4c2:	2801      	cmp	r0, #1
 800c4c4:	bf38      	it	cc
 800c4c6:	2001      	movcc	r0, #1
 800c4c8:	f7f4 f824 	bl	8000514 <__aeabi_ui2d>
 800c4cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c4ce:	4680      	mov	r8, r0
 800c4d0:	4689      	mov	r9, r1
 800c4d2:	bb13      	cbnz	r3, 800c51a <_strtod_l+0xba2>
 800c4d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c4d8:	9014      	str	r0, [sp, #80]	; 0x50
 800c4da:	9315      	str	r3, [sp, #84]	; 0x54
 800c4dc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c4e0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800c4e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c4e6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c4e8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c4ec:	1a9b      	subs	r3, r3, r2
 800c4ee:	930d      	str	r3, [sp, #52]	; 0x34
 800c4f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c4f4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800c4f8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c4fc:	f002 f830 	bl	800e560 <__ulp>
 800c500:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c504:	ec53 2b10 	vmov	r2, r3, d0
 800c508:	f7f4 f87e 	bl	8000608 <__aeabi_dmul>
 800c50c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c510:	f7f3 fec4 	bl	800029c <__adddf3>
 800c514:	4682      	mov	sl, r0
 800c516:	468b      	mov	fp, r1
 800c518:	e78f      	b.n	800c43a <_strtod_l+0xac2>
 800c51a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800c51e:	e7dd      	b.n	800c4dc <_strtod_l+0xb64>
 800c520:	a311      	add	r3, pc, #68	; (adr r3, 800c568 <_strtod_l+0xbf0>)
 800c522:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c526:	f7f4 fae1 	bl	8000aec <__aeabi_dcmplt>
 800c52a:	e7b4      	b.n	800c496 <_strtod_l+0xb1e>
 800c52c:	2300      	movs	r3, #0
 800c52e:	930e      	str	r3, [sp, #56]	; 0x38
 800c530:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c532:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c534:	6013      	str	r3, [r2, #0]
 800c536:	f7ff ba65 	b.w	800ba04 <_strtod_l+0x8c>
 800c53a:	2b65      	cmp	r3, #101	; 0x65
 800c53c:	f43f ab5d 	beq.w	800bbfa <_strtod_l+0x282>
 800c540:	2b45      	cmp	r3, #69	; 0x45
 800c542:	f43f ab5a 	beq.w	800bbfa <_strtod_l+0x282>
 800c546:	2201      	movs	r2, #1
 800c548:	f7ff bb92 	b.w	800bc70 <_strtod_l+0x2f8>
 800c54c:	f3af 8000 	nop.w
 800c550:	94a03595 	.word	0x94a03595
 800c554:	3fdfffff 	.word	0x3fdfffff
 800c558:	35afe535 	.word	0x35afe535
 800c55c:	3fe00000 	.word	0x3fe00000
 800c560:	ffc00000 	.word	0xffc00000
 800c564:	41dfffff 	.word	0x41dfffff
 800c568:	94a03595 	.word	0x94a03595
 800c56c:	3fcfffff 	.word	0x3fcfffff
 800c570:	3ff00000 	.word	0x3ff00000
 800c574:	7ff00000 	.word	0x7ff00000
 800c578:	7fe00000 	.word	0x7fe00000
 800c57c:	7c9fffff 	.word	0x7c9fffff
 800c580:	3fe00000 	.word	0x3fe00000
 800c584:	bff00000 	.word	0xbff00000
 800c588:	7fefffff 	.word	0x7fefffff

0800c58c <strtod>:
 800c58c:	460a      	mov	r2, r1
 800c58e:	4601      	mov	r1, r0
 800c590:	4802      	ldr	r0, [pc, #8]	; (800c59c <strtod+0x10>)
 800c592:	4b03      	ldr	r3, [pc, #12]	; (800c5a0 <strtod+0x14>)
 800c594:	6800      	ldr	r0, [r0, #0]
 800c596:	f7ff b9ef 	b.w	800b978 <_strtod_l>
 800c59a:	bf00      	nop
 800c59c:	20000074 	.word	0x20000074
 800c5a0:	200000dc 	.word	0x200000dc

0800c5a4 <strtof>:
 800c5a4:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 800c5a8:	4e26      	ldr	r6, [pc, #152]	; (800c644 <strtof+0xa0>)
 800c5aa:	4b27      	ldr	r3, [pc, #156]	; (800c648 <strtof+0xa4>)
 800c5ac:	460a      	mov	r2, r1
 800c5ae:	ed2d 8b02 	vpush	{d8}
 800c5b2:	4601      	mov	r1, r0
 800c5b4:	6830      	ldr	r0, [r6, #0]
 800c5b6:	f7ff f9df 	bl	800b978 <_strtod_l>
 800c5ba:	ec55 4b10 	vmov	r4, r5, d0
 800c5be:	ee10 2a10 	vmov	r2, s0
 800c5c2:	ee10 0a10 	vmov	r0, s0
 800c5c6:	462b      	mov	r3, r5
 800c5c8:	4629      	mov	r1, r5
 800c5ca:	f7f4 fab7 	bl	8000b3c <__aeabi_dcmpun>
 800c5ce:	b190      	cbz	r0, 800c5f6 <strtof+0x52>
 800c5d0:	2d00      	cmp	r5, #0
 800c5d2:	481e      	ldr	r0, [pc, #120]	; (800c64c <strtof+0xa8>)
 800c5d4:	da09      	bge.n	800c5ea <strtof+0x46>
 800c5d6:	f002 fc9b 	bl	800ef10 <nanf>
 800c5da:	eeb1 8a40 	vneg.f32	s16, s0
 800c5de:	eeb0 0a48 	vmov.f32	s0, s16
 800c5e2:	ecbd 8b02 	vpop	{d8}
 800c5e6:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800c5ea:	ecbd 8b02 	vpop	{d8}
 800c5ee:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
 800c5f2:	f002 bc8d 	b.w	800ef10 <nanf>
 800c5f6:	4620      	mov	r0, r4
 800c5f8:	4629      	mov	r1, r5
 800c5fa:	f7f4 fafd 	bl	8000bf8 <__aeabi_d2f>
 800c5fe:	ee08 0a10 	vmov	s16, r0
 800c602:	eddf 7a13 	vldr	s15, [pc, #76]	; 800c650 <strtof+0xac>
 800c606:	eeb0 7ac8 	vabs.f32	s14, s16
 800c60a:	eeb4 7a67 	vcmp.f32	s14, s15
 800c60e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c612:	dde4      	ble.n	800c5de <strtof+0x3a>
 800c614:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
 800c618:	4b0e      	ldr	r3, [pc, #56]	; (800c654 <strtof+0xb0>)
 800c61a:	f04f 32ff 	mov.w	r2, #4294967295
 800c61e:	4620      	mov	r0, r4
 800c620:	4649      	mov	r1, r9
 800c622:	f7f4 fa8b 	bl	8000b3c <__aeabi_dcmpun>
 800c626:	b940      	cbnz	r0, 800c63a <strtof+0x96>
 800c628:	4b0a      	ldr	r3, [pc, #40]	; (800c654 <strtof+0xb0>)
 800c62a:	f04f 32ff 	mov.w	r2, #4294967295
 800c62e:	4620      	mov	r0, r4
 800c630:	4649      	mov	r1, r9
 800c632:	f7f4 fa65 	bl	8000b00 <__aeabi_dcmple>
 800c636:	2800      	cmp	r0, #0
 800c638:	d0d1      	beq.n	800c5de <strtof+0x3a>
 800c63a:	6833      	ldr	r3, [r6, #0]
 800c63c:	2222      	movs	r2, #34	; 0x22
 800c63e:	601a      	str	r2, [r3, #0]
 800c640:	e7cd      	b.n	800c5de <strtof+0x3a>
 800c642:	bf00      	nop
 800c644:	20000074 	.word	0x20000074
 800c648:	200000dc 	.word	0x200000dc
 800c64c:	0800fe1b 	.word	0x0800fe1b
 800c650:	7f7fffff 	.word	0x7f7fffff
 800c654:	7fefffff 	.word	0x7fefffff

0800c658 <strtok>:
 800c658:	4b16      	ldr	r3, [pc, #88]	; (800c6b4 <strtok+0x5c>)
 800c65a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c65c:	681e      	ldr	r6, [r3, #0]
 800c65e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800c660:	4605      	mov	r5, r0
 800c662:	b9fc      	cbnz	r4, 800c6a4 <strtok+0x4c>
 800c664:	2050      	movs	r0, #80	; 0x50
 800c666:	9101      	str	r1, [sp, #4]
 800c668:	f001 fbf4 	bl	800de54 <malloc>
 800c66c:	9901      	ldr	r1, [sp, #4]
 800c66e:	65b0      	str	r0, [r6, #88]	; 0x58
 800c670:	4602      	mov	r2, r0
 800c672:	b920      	cbnz	r0, 800c67e <strtok+0x26>
 800c674:	4b10      	ldr	r3, [pc, #64]	; (800c6b8 <strtok+0x60>)
 800c676:	4811      	ldr	r0, [pc, #68]	; (800c6bc <strtok+0x64>)
 800c678:	2157      	movs	r1, #87	; 0x57
 800c67a:	f000 f8d7 	bl	800c82c <__assert_func>
 800c67e:	e9c0 4400 	strd	r4, r4, [r0]
 800c682:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800c686:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800c68a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800c68e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800c692:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800c696:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800c69a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800c69e:	6184      	str	r4, [r0, #24]
 800c6a0:	7704      	strb	r4, [r0, #28]
 800c6a2:	6244      	str	r4, [r0, #36]	; 0x24
 800c6a4:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800c6a6:	2301      	movs	r3, #1
 800c6a8:	4628      	mov	r0, r5
 800c6aa:	b002      	add	sp, #8
 800c6ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c6b0:	f000 b806 	b.w	800c6c0 <__strtok_r>
 800c6b4:	20000074 	.word	0x20000074
 800c6b8:	0800fd68 	.word	0x0800fd68
 800c6bc:	0800fd7f 	.word	0x0800fd7f

0800c6c0 <__strtok_r>:
 800c6c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c6c2:	b908      	cbnz	r0, 800c6c8 <__strtok_r+0x8>
 800c6c4:	6810      	ldr	r0, [r2, #0]
 800c6c6:	b188      	cbz	r0, 800c6ec <__strtok_r+0x2c>
 800c6c8:	4604      	mov	r4, r0
 800c6ca:	4620      	mov	r0, r4
 800c6cc:	f814 5b01 	ldrb.w	r5, [r4], #1
 800c6d0:	460f      	mov	r7, r1
 800c6d2:	f817 6b01 	ldrb.w	r6, [r7], #1
 800c6d6:	b91e      	cbnz	r6, 800c6e0 <__strtok_r+0x20>
 800c6d8:	b965      	cbnz	r5, 800c6f4 <__strtok_r+0x34>
 800c6da:	6015      	str	r5, [r2, #0]
 800c6dc:	4628      	mov	r0, r5
 800c6de:	e005      	b.n	800c6ec <__strtok_r+0x2c>
 800c6e0:	42b5      	cmp	r5, r6
 800c6e2:	d1f6      	bne.n	800c6d2 <__strtok_r+0x12>
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d1f0      	bne.n	800c6ca <__strtok_r+0xa>
 800c6e8:	6014      	str	r4, [r2, #0]
 800c6ea:	7003      	strb	r3, [r0, #0]
 800c6ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6ee:	461c      	mov	r4, r3
 800c6f0:	e00c      	b.n	800c70c <__strtok_r+0x4c>
 800c6f2:	b915      	cbnz	r5, 800c6fa <__strtok_r+0x3a>
 800c6f4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c6f8:	460e      	mov	r6, r1
 800c6fa:	f816 5b01 	ldrb.w	r5, [r6], #1
 800c6fe:	42ab      	cmp	r3, r5
 800c700:	d1f7      	bne.n	800c6f2 <__strtok_r+0x32>
 800c702:	2b00      	cmp	r3, #0
 800c704:	d0f3      	beq.n	800c6ee <__strtok_r+0x2e>
 800c706:	2300      	movs	r3, #0
 800c708:	f804 3c01 	strb.w	r3, [r4, #-1]
 800c70c:	6014      	str	r4, [r2, #0]
 800c70e:	e7ed      	b.n	800c6ec <__strtok_r+0x2c>

0800c710 <_strtol_l.isra.0>:
 800c710:	2b01      	cmp	r3, #1
 800c712:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c716:	d001      	beq.n	800c71c <_strtol_l.isra.0+0xc>
 800c718:	2b24      	cmp	r3, #36	; 0x24
 800c71a:	d906      	bls.n	800c72a <_strtol_l.isra.0+0x1a>
 800c71c:	f7fe fc2c 	bl	800af78 <__errno>
 800c720:	2316      	movs	r3, #22
 800c722:	6003      	str	r3, [r0, #0]
 800c724:	2000      	movs	r0, #0
 800c726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c72a:	4f3a      	ldr	r7, [pc, #232]	; (800c814 <_strtol_l.isra.0+0x104>)
 800c72c:	468e      	mov	lr, r1
 800c72e:	4676      	mov	r6, lr
 800c730:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800c734:	5de5      	ldrb	r5, [r4, r7]
 800c736:	f015 0508 	ands.w	r5, r5, #8
 800c73a:	d1f8      	bne.n	800c72e <_strtol_l.isra.0+0x1e>
 800c73c:	2c2d      	cmp	r4, #45	; 0x2d
 800c73e:	d134      	bne.n	800c7aa <_strtol_l.isra.0+0x9a>
 800c740:	f89e 4000 	ldrb.w	r4, [lr]
 800c744:	f04f 0801 	mov.w	r8, #1
 800c748:	f106 0e02 	add.w	lr, r6, #2
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d05c      	beq.n	800c80a <_strtol_l.isra.0+0xfa>
 800c750:	2b10      	cmp	r3, #16
 800c752:	d10c      	bne.n	800c76e <_strtol_l.isra.0+0x5e>
 800c754:	2c30      	cmp	r4, #48	; 0x30
 800c756:	d10a      	bne.n	800c76e <_strtol_l.isra.0+0x5e>
 800c758:	f89e 4000 	ldrb.w	r4, [lr]
 800c75c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c760:	2c58      	cmp	r4, #88	; 0x58
 800c762:	d14d      	bne.n	800c800 <_strtol_l.isra.0+0xf0>
 800c764:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800c768:	2310      	movs	r3, #16
 800c76a:	f10e 0e02 	add.w	lr, lr, #2
 800c76e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800c772:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c776:	2600      	movs	r6, #0
 800c778:	fbbc f9f3 	udiv	r9, ip, r3
 800c77c:	4635      	mov	r5, r6
 800c77e:	fb03 ca19 	mls	sl, r3, r9, ip
 800c782:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800c786:	2f09      	cmp	r7, #9
 800c788:	d818      	bhi.n	800c7bc <_strtol_l.isra.0+0xac>
 800c78a:	463c      	mov	r4, r7
 800c78c:	42a3      	cmp	r3, r4
 800c78e:	dd24      	ble.n	800c7da <_strtol_l.isra.0+0xca>
 800c790:	2e00      	cmp	r6, #0
 800c792:	db1f      	blt.n	800c7d4 <_strtol_l.isra.0+0xc4>
 800c794:	45a9      	cmp	r9, r5
 800c796:	d31d      	bcc.n	800c7d4 <_strtol_l.isra.0+0xc4>
 800c798:	d101      	bne.n	800c79e <_strtol_l.isra.0+0x8e>
 800c79a:	45a2      	cmp	sl, r4
 800c79c:	db1a      	blt.n	800c7d4 <_strtol_l.isra.0+0xc4>
 800c79e:	fb05 4503 	mla	r5, r5, r3, r4
 800c7a2:	2601      	movs	r6, #1
 800c7a4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800c7a8:	e7eb      	b.n	800c782 <_strtol_l.isra.0+0x72>
 800c7aa:	2c2b      	cmp	r4, #43	; 0x2b
 800c7ac:	bf08      	it	eq
 800c7ae:	f89e 4000 	ldrbeq.w	r4, [lr]
 800c7b2:	46a8      	mov	r8, r5
 800c7b4:	bf08      	it	eq
 800c7b6:	f106 0e02 	addeq.w	lr, r6, #2
 800c7ba:	e7c7      	b.n	800c74c <_strtol_l.isra.0+0x3c>
 800c7bc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800c7c0:	2f19      	cmp	r7, #25
 800c7c2:	d801      	bhi.n	800c7c8 <_strtol_l.isra.0+0xb8>
 800c7c4:	3c37      	subs	r4, #55	; 0x37
 800c7c6:	e7e1      	b.n	800c78c <_strtol_l.isra.0+0x7c>
 800c7c8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800c7cc:	2f19      	cmp	r7, #25
 800c7ce:	d804      	bhi.n	800c7da <_strtol_l.isra.0+0xca>
 800c7d0:	3c57      	subs	r4, #87	; 0x57
 800c7d2:	e7db      	b.n	800c78c <_strtol_l.isra.0+0x7c>
 800c7d4:	f04f 36ff 	mov.w	r6, #4294967295
 800c7d8:	e7e4      	b.n	800c7a4 <_strtol_l.isra.0+0x94>
 800c7da:	2e00      	cmp	r6, #0
 800c7dc:	da05      	bge.n	800c7ea <_strtol_l.isra.0+0xda>
 800c7de:	2322      	movs	r3, #34	; 0x22
 800c7e0:	6003      	str	r3, [r0, #0]
 800c7e2:	4665      	mov	r5, ip
 800c7e4:	b942      	cbnz	r2, 800c7f8 <_strtol_l.isra.0+0xe8>
 800c7e6:	4628      	mov	r0, r5
 800c7e8:	e79d      	b.n	800c726 <_strtol_l.isra.0+0x16>
 800c7ea:	f1b8 0f00 	cmp.w	r8, #0
 800c7ee:	d000      	beq.n	800c7f2 <_strtol_l.isra.0+0xe2>
 800c7f0:	426d      	negs	r5, r5
 800c7f2:	2a00      	cmp	r2, #0
 800c7f4:	d0f7      	beq.n	800c7e6 <_strtol_l.isra.0+0xd6>
 800c7f6:	b10e      	cbz	r6, 800c7fc <_strtol_l.isra.0+0xec>
 800c7f8:	f10e 31ff 	add.w	r1, lr, #4294967295
 800c7fc:	6011      	str	r1, [r2, #0]
 800c7fe:	e7f2      	b.n	800c7e6 <_strtol_l.isra.0+0xd6>
 800c800:	2430      	movs	r4, #48	; 0x30
 800c802:	2b00      	cmp	r3, #0
 800c804:	d1b3      	bne.n	800c76e <_strtol_l.isra.0+0x5e>
 800c806:	2308      	movs	r3, #8
 800c808:	e7b1      	b.n	800c76e <_strtol_l.isra.0+0x5e>
 800c80a:	2c30      	cmp	r4, #48	; 0x30
 800c80c:	d0a4      	beq.n	800c758 <_strtol_l.isra.0+0x48>
 800c80e:	230a      	movs	r3, #10
 800c810:	e7ad      	b.n	800c76e <_strtol_l.isra.0+0x5e>
 800c812:	bf00      	nop
 800c814:	0800fe1d 	.word	0x0800fe1d

0800c818 <strtol>:
 800c818:	4613      	mov	r3, r2
 800c81a:	460a      	mov	r2, r1
 800c81c:	4601      	mov	r1, r0
 800c81e:	4802      	ldr	r0, [pc, #8]	; (800c828 <strtol+0x10>)
 800c820:	6800      	ldr	r0, [r0, #0]
 800c822:	f7ff bf75 	b.w	800c710 <_strtol_l.isra.0>
 800c826:	bf00      	nop
 800c828:	20000074 	.word	0x20000074

0800c82c <__assert_func>:
 800c82c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c82e:	4614      	mov	r4, r2
 800c830:	461a      	mov	r2, r3
 800c832:	4b09      	ldr	r3, [pc, #36]	; (800c858 <__assert_func+0x2c>)
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	4605      	mov	r5, r0
 800c838:	68d8      	ldr	r0, [r3, #12]
 800c83a:	b14c      	cbz	r4, 800c850 <__assert_func+0x24>
 800c83c:	4b07      	ldr	r3, [pc, #28]	; (800c85c <__assert_func+0x30>)
 800c83e:	9100      	str	r1, [sp, #0]
 800c840:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c844:	4906      	ldr	r1, [pc, #24]	; (800c860 <__assert_func+0x34>)
 800c846:	462b      	mov	r3, r5
 800c848:	f000 ff5c 	bl	800d704 <fiprintf>
 800c84c:	f002 fc9c 	bl	800f188 <abort>
 800c850:	4b04      	ldr	r3, [pc, #16]	; (800c864 <__assert_func+0x38>)
 800c852:	461c      	mov	r4, r3
 800c854:	e7f3      	b.n	800c83e <__assert_func+0x12>
 800c856:	bf00      	nop
 800c858:	20000074 	.word	0x20000074
 800c85c:	0800fde0 	.word	0x0800fde0
 800c860:	0800fded 	.word	0x0800fded
 800c864:	0800fe1b 	.word	0x0800fe1b

0800c868 <quorem>:
 800c868:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c86c:	6903      	ldr	r3, [r0, #16]
 800c86e:	690c      	ldr	r4, [r1, #16]
 800c870:	42a3      	cmp	r3, r4
 800c872:	4607      	mov	r7, r0
 800c874:	f2c0 8081 	blt.w	800c97a <quorem+0x112>
 800c878:	3c01      	subs	r4, #1
 800c87a:	f101 0814 	add.w	r8, r1, #20
 800c87e:	f100 0514 	add.w	r5, r0, #20
 800c882:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c886:	9301      	str	r3, [sp, #4]
 800c888:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c88c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c890:	3301      	adds	r3, #1
 800c892:	429a      	cmp	r2, r3
 800c894:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c898:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c89c:	fbb2 f6f3 	udiv	r6, r2, r3
 800c8a0:	d331      	bcc.n	800c906 <quorem+0x9e>
 800c8a2:	f04f 0e00 	mov.w	lr, #0
 800c8a6:	4640      	mov	r0, r8
 800c8a8:	46ac      	mov	ip, r5
 800c8aa:	46f2      	mov	sl, lr
 800c8ac:	f850 2b04 	ldr.w	r2, [r0], #4
 800c8b0:	b293      	uxth	r3, r2
 800c8b2:	fb06 e303 	mla	r3, r6, r3, lr
 800c8b6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c8ba:	b29b      	uxth	r3, r3
 800c8bc:	ebaa 0303 	sub.w	r3, sl, r3
 800c8c0:	0c12      	lsrs	r2, r2, #16
 800c8c2:	f8dc a000 	ldr.w	sl, [ip]
 800c8c6:	fb06 e202 	mla	r2, r6, r2, lr
 800c8ca:	fa13 f38a 	uxtah	r3, r3, sl
 800c8ce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c8d2:	fa1f fa82 	uxth.w	sl, r2
 800c8d6:	f8dc 2000 	ldr.w	r2, [ip]
 800c8da:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800c8de:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c8e2:	b29b      	uxth	r3, r3
 800c8e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c8e8:	4581      	cmp	r9, r0
 800c8ea:	f84c 3b04 	str.w	r3, [ip], #4
 800c8ee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c8f2:	d2db      	bcs.n	800c8ac <quorem+0x44>
 800c8f4:	f855 300b 	ldr.w	r3, [r5, fp]
 800c8f8:	b92b      	cbnz	r3, 800c906 <quorem+0x9e>
 800c8fa:	9b01      	ldr	r3, [sp, #4]
 800c8fc:	3b04      	subs	r3, #4
 800c8fe:	429d      	cmp	r5, r3
 800c900:	461a      	mov	r2, r3
 800c902:	d32e      	bcc.n	800c962 <quorem+0xfa>
 800c904:	613c      	str	r4, [r7, #16]
 800c906:	4638      	mov	r0, r7
 800c908:	f001 fd86 	bl	800e418 <__mcmp>
 800c90c:	2800      	cmp	r0, #0
 800c90e:	db24      	blt.n	800c95a <quorem+0xf2>
 800c910:	3601      	adds	r6, #1
 800c912:	4628      	mov	r0, r5
 800c914:	f04f 0c00 	mov.w	ip, #0
 800c918:	f858 2b04 	ldr.w	r2, [r8], #4
 800c91c:	f8d0 e000 	ldr.w	lr, [r0]
 800c920:	b293      	uxth	r3, r2
 800c922:	ebac 0303 	sub.w	r3, ip, r3
 800c926:	0c12      	lsrs	r2, r2, #16
 800c928:	fa13 f38e 	uxtah	r3, r3, lr
 800c92c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c930:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c934:	b29b      	uxth	r3, r3
 800c936:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c93a:	45c1      	cmp	r9, r8
 800c93c:	f840 3b04 	str.w	r3, [r0], #4
 800c940:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c944:	d2e8      	bcs.n	800c918 <quorem+0xb0>
 800c946:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c94a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c94e:	b922      	cbnz	r2, 800c95a <quorem+0xf2>
 800c950:	3b04      	subs	r3, #4
 800c952:	429d      	cmp	r5, r3
 800c954:	461a      	mov	r2, r3
 800c956:	d30a      	bcc.n	800c96e <quorem+0x106>
 800c958:	613c      	str	r4, [r7, #16]
 800c95a:	4630      	mov	r0, r6
 800c95c:	b003      	add	sp, #12
 800c95e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c962:	6812      	ldr	r2, [r2, #0]
 800c964:	3b04      	subs	r3, #4
 800c966:	2a00      	cmp	r2, #0
 800c968:	d1cc      	bne.n	800c904 <quorem+0x9c>
 800c96a:	3c01      	subs	r4, #1
 800c96c:	e7c7      	b.n	800c8fe <quorem+0x96>
 800c96e:	6812      	ldr	r2, [r2, #0]
 800c970:	3b04      	subs	r3, #4
 800c972:	2a00      	cmp	r2, #0
 800c974:	d1f0      	bne.n	800c958 <quorem+0xf0>
 800c976:	3c01      	subs	r4, #1
 800c978:	e7eb      	b.n	800c952 <quorem+0xea>
 800c97a:	2000      	movs	r0, #0
 800c97c:	e7ee      	b.n	800c95c <quorem+0xf4>
	...

0800c980 <_dtoa_r>:
 800c980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c984:	ed2d 8b02 	vpush	{d8}
 800c988:	ec57 6b10 	vmov	r6, r7, d0
 800c98c:	b095      	sub	sp, #84	; 0x54
 800c98e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c990:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c994:	9105      	str	r1, [sp, #20]
 800c996:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800c99a:	4604      	mov	r4, r0
 800c99c:	9209      	str	r2, [sp, #36]	; 0x24
 800c99e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c9a0:	b975      	cbnz	r5, 800c9c0 <_dtoa_r+0x40>
 800c9a2:	2010      	movs	r0, #16
 800c9a4:	f001 fa56 	bl	800de54 <malloc>
 800c9a8:	4602      	mov	r2, r0
 800c9aa:	6260      	str	r0, [r4, #36]	; 0x24
 800c9ac:	b920      	cbnz	r0, 800c9b8 <_dtoa_r+0x38>
 800c9ae:	4bb2      	ldr	r3, [pc, #712]	; (800cc78 <_dtoa_r+0x2f8>)
 800c9b0:	21ea      	movs	r1, #234	; 0xea
 800c9b2:	48b2      	ldr	r0, [pc, #712]	; (800cc7c <_dtoa_r+0x2fc>)
 800c9b4:	f7ff ff3a 	bl	800c82c <__assert_func>
 800c9b8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c9bc:	6005      	str	r5, [r0, #0]
 800c9be:	60c5      	str	r5, [r0, #12]
 800c9c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c9c2:	6819      	ldr	r1, [r3, #0]
 800c9c4:	b151      	cbz	r1, 800c9dc <_dtoa_r+0x5c>
 800c9c6:	685a      	ldr	r2, [r3, #4]
 800c9c8:	604a      	str	r2, [r1, #4]
 800c9ca:	2301      	movs	r3, #1
 800c9cc:	4093      	lsls	r3, r2
 800c9ce:	608b      	str	r3, [r1, #8]
 800c9d0:	4620      	mov	r0, r4
 800c9d2:	f001 fa99 	bl	800df08 <_Bfree>
 800c9d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c9d8:	2200      	movs	r2, #0
 800c9da:	601a      	str	r2, [r3, #0]
 800c9dc:	1e3b      	subs	r3, r7, #0
 800c9de:	bfb9      	ittee	lt
 800c9e0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c9e4:	9303      	strlt	r3, [sp, #12]
 800c9e6:	2300      	movge	r3, #0
 800c9e8:	f8c8 3000 	strge.w	r3, [r8]
 800c9ec:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800c9f0:	4ba3      	ldr	r3, [pc, #652]	; (800cc80 <_dtoa_r+0x300>)
 800c9f2:	bfbc      	itt	lt
 800c9f4:	2201      	movlt	r2, #1
 800c9f6:	f8c8 2000 	strlt.w	r2, [r8]
 800c9fa:	ea33 0309 	bics.w	r3, r3, r9
 800c9fe:	d11b      	bne.n	800ca38 <_dtoa_r+0xb8>
 800ca00:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ca02:	f242 730f 	movw	r3, #9999	; 0x270f
 800ca06:	6013      	str	r3, [r2, #0]
 800ca08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ca0c:	4333      	orrs	r3, r6
 800ca0e:	f000 857a 	beq.w	800d506 <_dtoa_r+0xb86>
 800ca12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ca14:	b963      	cbnz	r3, 800ca30 <_dtoa_r+0xb0>
 800ca16:	4b9b      	ldr	r3, [pc, #620]	; (800cc84 <_dtoa_r+0x304>)
 800ca18:	e024      	b.n	800ca64 <_dtoa_r+0xe4>
 800ca1a:	4b9b      	ldr	r3, [pc, #620]	; (800cc88 <_dtoa_r+0x308>)
 800ca1c:	9300      	str	r3, [sp, #0]
 800ca1e:	3308      	adds	r3, #8
 800ca20:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ca22:	6013      	str	r3, [r2, #0]
 800ca24:	9800      	ldr	r0, [sp, #0]
 800ca26:	b015      	add	sp, #84	; 0x54
 800ca28:	ecbd 8b02 	vpop	{d8}
 800ca2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca30:	4b94      	ldr	r3, [pc, #592]	; (800cc84 <_dtoa_r+0x304>)
 800ca32:	9300      	str	r3, [sp, #0]
 800ca34:	3303      	adds	r3, #3
 800ca36:	e7f3      	b.n	800ca20 <_dtoa_r+0xa0>
 800ca38:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ca3c:	2200      	movs	r2, #0
 800ca3e:	ec51 0b17 	vmov	r0, r1, d7
 800ca42:	2300      	movs	r3, #0
 800ca44:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800ca48:	f7f4 f846 	bl	8000ad8 <__aeabi_dcmpeq>
 800ca4c:	4680      	mov	r8, r0
 800ca4e:	b158      	cbz	r0, 800ca68 <_dtoa_r+0xe8>
 800ca50:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ca52:	2301      	movs	r3, #1
 800ca54:	6013      	str	r3, [r2, #0]
 800ca56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	f000 8551 	beq.w	800d500 <_dtoa_r+0xb80>
 800ca5e:	488b      	ldr	r0, [pc, #556]	; (800cc8c <_dtoa_r+0x30c>)
 800ca60:	6018      	str	r0, [r3, #0]
 800ca62:	1e43      	subs	r3, r0, #1
 800ca64:	9300      	str	r3, [sp, #0]
 800ca66:	e7dd      	b.n	800ca24 <_dtoa_r+0xa4>
 800ca68:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800ca6c:	aa12      	add	r2, sp, #72	; 0x48
 800ca6e:	a913      	add	r1, sp, #76	; 0x4c
 800ca70:	4620      	mov	r0, r4
 800ca72:	f001 fdf1 	bl	800e658 <__d2b>
 800ca76:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ca7a:	4683      	mov	fp, r0
 800ca7c:	2d00      	cmp	r5, #0
 800ca7e:	d07c      	beq.n	800cb7a <_dtoa_r+0x1fa>
 800ca80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca82:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800ca86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ca8a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800ca8e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ca92:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ca96:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ca9a:	4b7d      	ldr	r3, [pc, #500]	; (800cc90 <_dtoa_r+0x310>)
 800ca9c:	2200      	movs	r2, #0
 800ca9e:	4630      	mov	r0, r6
 800caa0:	4639      	mov	r1, r7
 800caa2:	f7f3 fbf9 	bl	8000298 <__aeabi_dsub>
 800caa6:	a36e      	add	r3, pc, #440	; (adr r3, 800cc60 <_dtoa_r+0x2e0>)
 800caa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caac:	f7f3 fdac 	bl	8000608 <__aeabi_dmul>
 800cab0:	a36d      	add	r3, pc, #436	; (adr r3, 800cc68 <_dtoa_r+0x2e8>)
 800cab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cab6:	f7f3 fbf1 	bl	800029c <__adddf3>
 800caba:	4606      	mov	r6, r0
 800cabc:	4628      	mov	r0, r5
 800cabe:	460f      	mov	r7, r1
 800cac0:	f7f3 fd38 	bl	8000534 <__aeabi_i2d>
 800cac4:	a36a      	add	r3, pc, #424	; (adr r3, 800cc70 <_dtoa_r+0x2f0>)
 800cac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caca:	f7f3 fd9d 	bl	8000608 <__aeabi_dmul>
 800cace:	4602      	mov	r2, r0
 800cad0:	460b      	mov	r3, r1
 800cad2:	4630      	mov	r0, r6
 800cad4:	4639      	mov	r1, r7
 800cad6:	f7f3 fbe1 	bl	800029c <__adddf3>
 800cada:	4606      	mov	r6, r0
 800cadc:	460f      	mov	r7, r1
 800cade:	f7f4 f843 	bl	8000b68 <__aeabi_d2iz>
 800cae2:	2200      	movs	r2, #0
 800cae4:	4682      	mov	sl, r0
 800cae6:	2300      	movs	r3, #0
 800cae8:	4630      	mov	r0, r6
 800caea:	4639      	mov	r1, r7
 800caec:	f7f3 fffe 	bl	8000aec <__aeabi_dcmplt>
 800caf0:	b148      	cbz	r0, 800cb06 <_dtoa_r+0x186>
 800caf2:	4650      	mov	r0, sl
 800caf4:	f7f3 fd1e 	bl	8000534 <__aeabi_i2d>
 800caf8:	4632      	mov	r2, r6
 800cafa:	463b      	mov	r3, r7
 800cafc:	f7f3 ffec 	bl	8000ad8 <__aeabi_dcmpeq>
 800cb00:	b908      	cbnz	r0, 800cb06 <_dtoa_r+0x186>
 800cb02:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cb06:	f1ba 0f16 	cmp.w	sl, #22
 800cb0a:	d854      	bhi.n	800cbb6 <_dtoa_r+0x236>
 800cb0c:	4b61      	ldr	r3, [pc, #388]	; (800cc94 <_dtoa_r+0x314>)
 800cb0e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800cb12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb16:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cb1a:	f7f3 ffe7 	bl	8000aec <__aeabi_dcmplt>
 800cb1e:	2800      	cmp	r0, #0
 800cb20:	d04b      	beq.n	800cbba <_dtoa_r+0x23a>
 800cb22:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cb26:	2300      	movs	r3, #0
 800cb28:	930e      	str	r3, [sp, #56]	; 0x38
 800cb2a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cb2c:	1b5d      	subs	r5, r3, r5
 800cb2e:	1e6b      	subs	r3, r5, #1
 800cb30:	9304      	str	r3, [sp, #16]
 800cb32:	bf43      	ittte	mi
 800cb34:	2300      	movmi	r3, #0
 800cb36:	f1c5 0801 	rsbmi	r8, r5, #1
 800cb3a:	9304      	strmi	r3, [sp, #16]
 800cb3c:	f04f 0800 	movpl.w	r8, #0
 800cb40:	f1ba 0f00 	cmp.w	sl, #0
 800cb44:	db3b      	blt.n	800cbbe <_dtoa_r+0x23e>
 800cb46:	9b04      	ldr	r3, [sp, #16]
 800cb48:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800cb4c:	4453      	add	r3, sl
 800cb4e:	9304      	str	r3, [sp, #16]
 800cb50:	2300      	movs	r3, #0
 800cb52:	9306      	str	r3, [sp, #24]
 800cb54:	9b05      	ldr	r3, [sp, #20]
 800cb56:	2b09      	cmp	r3, #9
 800cb58:	d869      	bhi.n	800cc2e <_dtoa_r+0x2ae>
 800cb5a:	2b05      	cmp	r3, #5
 800cb5c:	bfc4      	itt	gt
 800cb5e:	3b04      	subgt	r3, #4
 800cb60:	9305      	strgt	r3, [sp, #20]
 800cb62:	9b05      	ldr	r3, [sp, #20]
 800cb64:	f1a3 0302 	sub.w	r3, r3, #2
 800cb68:	bfcc      	ite	gt
 800cb6a:	2500      	movgt	r5, #0
 800cb6c:	2501      	movle	r5, #1
 800cb6e:	2b03      	cmp	r3, #3
 800cb70:	d869      	bhi.n	800cc46 <_dtoa_r+0x2c6>
 800cb72:	e8df f003 	tbb	[pc, r3]
 800cb76:	4e2c      	.short	0x4e2c
 800cb78:	5a4c      	.short	0x5a4c
 800cb7a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800cb7e:	441d      	add	r5, r3
 800cb80:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800cb84:	2b20      	cmp	r3, #32
 800cb86:	bfc1      	itttt	gt
 800cb88:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800cb8c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800cb90:	fa09 f303 	lslgt.w	r3, r9, r3
 800cb94:	fa26 f000 	lsrgt.w	r0, r6, r0
 800cb98:	bfda      	itte	le
 800cb9a:	f1c3 0320 	rsble	r3, r3, #32
 800cb9e:	fa06 f003 	lslle.w	r0, r6, r3
 800cba2:	4318      	orrgt	r0, r3
 800cba4:	f7f3 fcb6 	bl	8000514 <__aeabi_ui2d>
 800cba8:	2301      	movs	r3, #1
 800cbaa:	4606      	mov	r6, r0
 800cbac:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800cbb0:	3d01      	subs	r5, #1
 800cbb2:	9310      	str	r3, [sp, #64]	; 0x40
 800cbb4:	e771      	b.n	800ca9a <_dtoa_r+0x11a>
 800cbb6:	2301      	movs	r3, #1
 800cbb8:	e7b6      	b.n	800cb28 <_dtoa_r+0x1a8>
 800cbba:	900e      	str	r0, [sp, #56]	; 0x38
 800cbbc:	e7b5      	b.n	800cb2a <_dtoa_r+0x1aa>
 800cbbe:	f1ca 0300 	rsb	r3, sl, #0
 800cbc2:	9306      	str	r3, [sp, #24]
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	eba8 080a 	sub.w	r8, r8, sl
 800cbca:	930d      	str	r3, [sp, #52]	; 0x34
 800cbcc:	e7c2      	b.n	800cb54 <_dtoa_r+0x1d4>
 800cbce:	2300      	movs	r3, #0
 800cbd0:	9308      	str	r3, [sp, #32]
 800cbd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	dc39      	bgt.n	800cc4c <_dtoa_r+0x2cc>
 800cbd8:	f04f 0901 	mov.w	r9, #1
 800cbdc:	f8cd 9004 	str.w	r9, [sp, #4]
 800cbe0:	464b      	mov	r3, r9
 800cbe2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800cbe6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800cbe8:	2200      	movs	r2, #0
 800cbea:	6042      	str	r2, [r0, #4]
 800cbec:	2204      	movs	r2, #4
 800cbee:	f102 0614 	add.w	r6, r2, #20
 800cbf2:	429e      	cmp	r6, r3
 800cbf4:	6841      	ldr	r1, [r0, #4]
 800cbf6:	d92f      	bls.n	800cc58 <_dtoa_r+0x2d8>
 800cbf8:	4620      	mov	r0, r4
 800cbfa:	f001 f945 	bl	800de88 <_Balloc>
 800cbfe:	9000      	str	r0, [sp, #0]
 800cc00:	2800      	cmp	r0, #0
 800cc02:	d14b      	bne.n	800cc9c <_dtoa_r+0x31c>
 800cc04:	4b24      	ldr	r3, [pc, #144]	; (800cc98 <_dtoa_r+0x318>)
 800cc06:	4602      	mov	r2, r0
 800cc08:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800cc0c:	e6d1      	b.n	800c9b2 <_dtoa_r+0x32>
 800cc0e:	2301      	movs	r3, #1
 800cc10:	e7de      	b.n	800cbd0 <_dtoa_r+0x250>
 800cc12:	2300      	movs	r3, #0
 800cc14:	9308      	str	r3, [sp, #32]
 800cc16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc18:	eb0a 0903 	add.w	r9, sl, r3
 800cc1c:	f109 0301 	add.w	r3, r9, #1
 800cc20:	2b01      	cmp	r3, #1
 800cc22:	9301      	str	r3, [sp, #4]
 800cc24:	bfb8      	it	lt
 800cc26:	2301      	movlt	r3, #1
 800cc28:	e7dd      	b.n	800cbe6 <_dtoa_r+0x266>
 800cc2a:	2301      	movs	r3, #1
 800cc2c:	e7f2      	b.n	800cc14 <_dtoa_r+0x294>
 800cc2e:	2501      	movs	r5, #1
 800cc30:	2300      	movs	r3, #0
 800cc32:	9305      	str	r3, [sp, #20]
 800cc34:	9508      	str	r5, [sp, #32]
 800cc36:	f04f 39ff 	mov.w	r9, #4294967295
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	f8cd 9004 	str.w	r9, [sp, #4]
 800cc40:	2312      	movs	r3, #18
 800cc42:	9209      	str	r2, [sp, #36]	; 0x24
 800cc44:	e7cf      	b.n	800cbe6 <_dtoa_r+0x266>
 800cc46:	2301      	movs	r3, #1
 800cc48:	9308      	str	r3, [sp, #32]
 800cc4a:	e7f4      	b.n	800cc36 <_dtoa_r+0x2b6>
 800cc4c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800cc50:	f8cd 9004 	str.w	r9, [sp, #4]
 800cc54:	464b      	mov	r3, r9
 800cc56:	e7c6      	b.n	800cbe6 <_dtoa_r+0x266>
 800cc58:	3101      	adds	r1, #1
 800cc5a:	6041      	str	r1, [r0, #4]
 800cc5c:	0052      	lsls	r2, r2, #1
 800cc5e:	e7c6      	b.n	800cbee <_dtoa_r+0x26e>
 800cc60:	636f4361 	.word	0x636f4361
 800cc64:	3fd287a7 	.word	0x3fd287a7
 800cc68:	8b60c8b3 	.word	0x8b60c8b3
 800cc6c:	3fc68a28 	.word	0x3fc68a28
 800cc70:	509f79fb 	.word	0x509f79fb
 800cc74:	3fd34413 	.word	0x3fd34413
 800cc78:	0800fd68 	.word	0x0800fd68
 800cc7c:	0800ff2a 	.word	0x0800ff2a
 800cc80:	7ff00000 	.word	0x7ff00000
 800cc84:	0800ff26 	.word	0x0800ff26
 800cc88:	0800ff1d 	.word	0x0800ff1d
 800cc8c:	0800fcf1 	.word	0x0800fcf1
 800cc90:	3ff80000 	.word	0x3ff80000
 800cc94:	08010108 	.word	0x08010108
 800cc98:	0800ff89 	.word	0x0800ff89
 800cc9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cc9e:	9a00      	ldr	r2, [sp, #0]
 800cca0:	601a      	str	r2, [r3, #0]
 800cca2:	9b01      	ldr	r3, [sp, #4]
 800cca4:	2b0e      	cmp	r3, #14
 800cca6:	f200 80ad 	bhi.w	800ce04 <_dtoa_r+0x484>
 800ccaa:	2d00      	cmp	r5, #0
 800ccac:	f000 80aa 	beq.w	800ce04 <_dtoa_r+0x484>
 800ccb0:	f1ba 0f00 	cmp.w	sl, #0
 800ccb4:	dd36      	ble.n	800cd24 <_dtoa_r+0x3a4>
 800ccb6:	4ac3      	ldr	r2, [pc, #780]	; (800cfc4 <_dtoa_r+0x644>)
 800ccb8:	f00a 030f 	and.w	r3, sl, #15
 800ccbc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ccc0:	ed93 7b00 	vldr	d7, [r3]
 800ccc4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800ccc8:	ea4f 172a 	mov.w	r7, sl, asr #4
 800cccc:	eeb0 8a47 	vmov.f32	s16, s14
 800ccd0:	eef0 8a67 	vmov.f32	s17, s15
 800ccd4:	d016      	beq.n	800cd04 <_dtoa_r+0x384>
 800ccd6:	4bbc      	ldr	r3, [pc, #752]	; (800cfc8 <_dtoa_r+0x648>)
 800ccd8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ccdc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cce0:	f7f3 fdbc 	bl	800085c <__aeabi_ddiv>
 800cce4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cce8:	f007 070f 	and.w	r7, r7, #15
 800ccec:	2503      	movs	r5, #3
 800ccee:	4eb6      	ldr	r6, [pc, #728]	; (800cfc8 <_dtoa_r+0x648>)
 800ccf0:	b957      	cbnz	r7, 800cd08 <_dtoa_r+0x388>
 800ccf2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ccf6:	ec53 2b18 	vmov	r2, r3, d8
 800ccfa:	f7f3 fdaf 	bl	800085c <__aeabi_ddiv>
 800ccfe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cd02:	e029      	b.n	800cd58 <_dtoa_r+0x3d8>
 800cd04:	2502      	movs	r5, #2
 800cd06:	e7f2      	b.n	800ccee <_dtoa_r+0x36e>
 800cd08:	07f9      	lsls	r1, r7, #31
 800cd0a:	d508      	bpl.n	800cd1e <_dtoa_r+0x39e>
 800cd0c:	ec51 0b18 	vmov	r0, r1, d8
 800cd10:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cd14:	f7f3 fc78 	bl	8000608 <__aeabi_dmul>
 800cd18:	ec41 0b18 	vmov	d8, r0, r1
 800cd1c:	3501      	adds	r5, #1
 800cd1e:	107f      	asrs	r7, r7, #1
 800cd20:	3608      	adds	r6, #8
 800cd22:	e7e5      	b.n	800ccf0 <_dtoa_r+0x370>
 800cd24:	f000 80a6 	beq.w	800ce74 <_dtoa_r+0x4f4>
 800cd28:	f1ca 0600 	rsb	r6, sl, #0
 800cd2c:	4ba5      	ldr	r3, [pc, #660]	; (800cfc4 <_dtoa_r+0x644>)
 800cd2e:	4fa6      	ldr	r7, [pc, #664]	; (800cfc8 <_dtoa_r+0x648>)
 800cd30:	f006 020f 	and.w	r2, r6, #15
 800cd34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cd38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd3c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cd40:	f7f3 fc62 	bl	8000608 <__aeabi_dmul>
 800cd44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cd48:	1136      	asrs	r6, r6, #4
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	2502      	movs	r5, #2
 800cd4e:	2e00      	cmp	r6, #0
 800cd50:	f040 8085 	bne.w	800ce5e <_dtoa_r+0x4de>
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d1d2      	bne.n	800ccfe <_dtoa_r+0x37e>
 800cd58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	f000 808c 	beq.w	800ce78 <_dtoa_r+0x4f8>
 800cd60:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800cd64:	4b99      	ldr	r3, [pc, #612]	; (800cfcc <_dtoa_r+0x64c>)
 800cd66:	2200      	movs	r2, #0
 800cd68:	4630      	mov	r0, r6
 800cd6a:	4639      	mov	r1, r7
 800cd6c:	f7f3 febe 	bl	8000aec <__aeabi_dcmplt>
 800cd70:	2800      	cmp	r0, #0
 800cd72:	f000 8081 	beq.w	800ce78 <_dtoa_r+0x4f8>
 800cd76:	9b01      	ldr	r3, [sp, #4]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d07d      	beq.n	800ce78 <_dtoa_r+0x4f8>
 800cd7c:	f1b9 0f00 	cmp.w	r9, #0
 800cd80:	dd3c      	ble.n	800cdfc <_dtoa_r+0x47c>
 800cd82:	f10a 33ff 	add.w	r3, sl, #4294967295
 800cd86:	9307      	str	r3, [sp, #28]
 800cd88:	2200      	movs	r2, #0
 800cd8a:	4b91      	ldr	r3, [pc, #580]	; (800cfd0 <_dtoa_r+0x650>)
 800cd8c:	4630      	mov	r0, r6
 800cd8e:	4639      	mov	r1, r7
 800cd90:	f7f3 fc3a 	bl	8000608 <__aeabi_dmul>
 800cd94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cd98:	3501      	adds	r5, #1
 800cd9a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800cd9e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800cda2:	4628      	mov	r0, r5
 800cda4:	f7f3 fbc6 	bl	8000534 <__aeabi_i2d>
 800cda8:	4632      	mov	r2, r6
 800cdaa:	463b      	mov	r3, r7
 800cdac:	f7f3 fc2c 	bl	8000608 <__aeabi_dmul>
 800cdb0:	4b88      	ldr	r3, [pc, #544]	; (800cfd4 <_dtoa_r+0x654>)
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	f7f3 fa72 	bl	800029c <__adddf3>
 800cdb8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800cdbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cdc0:	9303      	str	r3, [sp, #12]
 800cdc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d15c      	bne.n	800ce82 <_dtoa_r+0x502>
 800cdc8:	4b83      	ldr	r3, [pc, #524]	; (800cfd8 <_dtoa_r+0x658>)
 800cdca:	2200      	movs	r2, #0
 800cdcc:	4630      	mov	r0, r6
 800cdce:	4639      	mov	r1, r7
 800cdd0:	f7f3 fa62 	bl	8000298 <__aeabi_dsub>
 800cdd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cdd8:	4606      	mov	r6, r0
 800cdda:	460f      	mov	r7, r1
 800cddc:	f7f3 fea4 	bl	8000b28 <__aeabi_dcmpgt>
 800cde0:	2800      	cmp	r0, #0
 800cde2:	f040 8296 	bne.w	800d312 <_dtoa_r+0x992>
 800cde6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800cdea:	4630      	mov	r0, r6
 800cdec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cdf0:	4639      	mov	r1, r7
 800cdf2:	f7f3 fe7b 	bl	8000aec <__aeabi_dcmplt>
 800cdf6:	2800      	cmp	r0, #0
 800cdf8:	f040 8288 	bne.w	800d30c <_dtoa_r+0x98c>
 800cdfc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ce00:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ce04:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	f2c0 8158 	blt.w	800d0bc <_dtoa_r+0x73c>
 800ce0c:	f1ba 0f0e 	cmp.w	sl, #14
 800ce10:	f300 8154 	bgt.w	800d0bc <_dtoa_r+0x73c>
 800ce14:	4b6b      	ldr	r3, [pc, #428]	; (800cfc4 <_dtoa_r+0x644>)
 800ce16:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ce1a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ce1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	f280 80e3 	bge.w	800cfec <_dtoa_r+0x66c>
 800ce26:	9b01      	ldr	r3, [sp, #4]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	f300 80df 	bgt.w	800cfec <_dtoa_r+0x66c>
 800ce2e:	f040 826d 	bne.w	800d30c <_dtoa_r+0x98c>
 800ce32:	4b69      	ldr	r3, [pc, #420]	; (800cfd8 <_dtoa_r+0x658>)
 800ce34:	2200      	movs	r2, #0
 800ce36:	4640      	mov	r0, r8
 800ce38:	4649      	mov	r1, r9
 800ce3a:	f7f3 fbe5 	bl	8000608 <__aeabi_dmul>
 800ce3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ce42:	f7f3 fe67 	bl	8000b14 <__aeabi_dcmpge>
 800ce46:	9e01      	ldr	r6, [sp, #4]
 800ce48:	4637      	mov	r7, r6
 800ce4a:	2800      	cmp	r0, #0
 800ce4c:	f040 8243 	bne.w	800d2d6 <_dtoa_r+0x956>
 800ce50:	9d00      	ldr	r5, [sp, #0]
 800ce52:	2331      	movs	r3, #49	; 0x31
 800ce54:	f805 3b01 	strb.w	r3, [r5], #1
 800ce58:	f10a 0a01 	add.w	sl, sl, #1
 800ce5c:	e23f      	b.n	800d2de <_dtoa_r+0x95e>
 800ce5e:	07f2      	lsls	r2, r6, #31
 800ce60:	d505      	bpl.n	800ce6e <_dtoa_r+0x4ee>
 800ce62:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce66:	f7f3 fbcf 	bl	8000608 <__aeabi_dmul>
 800ce6a:	3501      	adds	r5, #1
 800ce6c:	2301      	movs	r3, #1
 800ce6e:	1076      	asrs	r6, r6, #1
 800ce70:	3708      	adds	r7, #8
 800ce72:	e76c      	b.n	800cd4e <_dtoa_r+0x3ce>
 800ce74:	2502      	movs	r5, #2
 800ce76:	e76f      	b.n	800cd58 <_dtoa_r+0x3d8>
 800ce78:	9b01      	ldr	r3, [sp, #4]
 800ce7a:	f8cd a01c 	str.w	sl, [sp, #28]
 800ce7e:	930c      	str	r3, [sp, #48]	; 0x30
 800ce80:	e78d      	b.n	800cd9e <_dtoa_r+0x41e>
 800ce82:	9900      	ldr	r1, [sp, #0]
 800ce84:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ce86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ce88:	4b4e      	ldr	r3, [pc, #312]	; (800cfc4 <_dtoa_r+0x644>)
 800ce8a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ce8e:	4401      	add	r1, r0
 800ce90:	9102      	str	r1, [sp, #8]
 800ce92:	9908      	ldr	r1, [sp, #32]
 800ce94:	eeb0 8a47 	vmov.f32	s16, s14
 800ce98:	eef0 8a67 	vmov.f32	s17, s15
 800ce9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cea0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cea4:	2900      	cmp	r1, #0
 800cea6:	d045      	beq.n	800cf34 <_dtoa_r+0x5b4>
 800cea8:	494c      	ldr	r1, [pc, #304]	; (800cfdc <_dtoa_r+0x65c>)
 800ceaa:	2000      	movs	r0, #0
 800ceac:	f7f3 fcd6 	bl	800085c <__aeabi_ddiv>
 800ceb0:	ec53 2b18 	vmov	r2, r3, d8
 800ceb4:	f7f3 f9f0 	bl	8000298 <__aeabi_dsub>
 800ceb8:	9d00      	ldr	r5, [sp, #0]
 800ceba:	ec41 0b18 	vmov	d8, r0, r1
 800cebe:	4639      	mov	r1, r7
 800cec0:	4630      	mov	r0, r6
 800cec2:	f7f3 fe51 	bl	8000b68 <__aeabi_d2iz>
 800cec6:	900c      	str	r0, [sp, #48]	; 0x30
 800cec8:	f7f3 fb34 	bl	8000534 <__aeabi_i2d>
 800cecc:	4602      	mov	r2, r0
 800cece:	460b      	mov	r3, r1
 800ced0:	4630      	mov	r0, r6
 800ced2:	4639      	mov	r1, r7
 800ced4:	f7f3 f9e0 	bl	8000298 <__aeabi_dsub>
 800ced8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ceda:	3330      	adds	r3, #48	; 0x30
 800cedc:	f805 3b01 	strb.w	r3, [r5], #1
 800cee0:	ec53 2b18 	vmov	r2, r3, d8
 800cee4:	4606      	mov	r6, r0
 800cee6:	460f      	mov	r7, r1
 800cee8:	f7f3 fe00 	bl	8000aec <__aeabi_dcmplt>
 800ceec:	2800      	cmp	r0, #0
 800ceee:	d165      	bne.n	800cfbc <_dtoa_r+0x63c>
 800cef0:	4632      	mov	r2, r6
 800cef2:	463b      	mov	r3, r7
 800cef4:	4935      	ldr	r1, [pc, #212]	; (800cfcc <_dtoa_r+0x64c>)
 800cef6:	2000      	movs	r0, #0
 800cef8:	f7f3 f9ce 	bl	8000298 <__aeabi_dsub>
 800cefc:	ec53 2b18 	vmov	r2, r3, d8
 800cf00:	f7f3 fdf4 	bl	8000aec <__aeabi_dcmplt>
 800cf04:	2800      	cmp	r0, #0
 800cf06:	f040 80b9 	bne.w	800d07c <_dtoa_r+0x6fc>
 800cf0a:	9b02      	ldr	r3, [sp, #8]
 800cf0c:	429d      	cmp	r5, r3
 800cf0e:	f43f af75 	beq.w	800cdfc <_dtoa_r+0x47c>
 800cf12:	4b2f      	ldr	r3, [pc, #188]	; (800cfd0 <_dtoa_r+0x650>)
 800cf14:	ec51 0b18 	vmov	r0, r1, d8
 800cf18:	2200      	movs	r2, #0
 800cf1a:	f7f3 fb75 	bl	8000608 <__aeabi_dmul>
 800cf1e:	4b2c      	ldr	r3, [pc, #176]	; (800cfd0 <_dtoa_r+0x650>)
 800cf20:	ec41 0b18 	vmov	d8, r0, r1
 800cf24:	2200      	movs	r2, #0
 800cf26:	4630      	mov	r0, r6
 800cf28:	4639      	mov	r1, r7
 800cf2a:	f7f3 fb6d 	bl	8000608 <__aeabi_dmul>
 800cf2e:	4606      	mov	r6, r0
 800cf30:	460f      	mov	r7, r1
 800cf32:	e7c4      	b.n	800cebe <_dtoa_r+0x53e>
 800cf34:	ec51 0b17 	vmov	r0, r1, d7
 800cf38:	f7f3 fb66 	bl	8000608 <__aeabi_dmul>
 800cf3c:	9b02      	ldr	r3, [sp, #8]
 800cf3e:	9d00      	ldr	r5, [sp, #0]
 800cf40:	930c      	str	r3, [sp, #48]	; 0x30
 800cf42:	ec41 0b18 	vmov	d8, r0, r1
 800cf46:	4639      	mov	r1, r7
 800cf48:	4630      	mov	r0, r6
 800cf4a:	f7f3 fe0d 	bl	8000b68 <__aeabi_d2iz>
 800cf4e:	9011      	str	r0, [sp, #68]	; 0x44
 800cf50:	f7f3 faf0 	bl	8000534 <__aeabi_i2d>
 800cf54:	4602      	mov	r2, r0
 800cf56:	460b      	mov	r3, r1
 800cf58:	4630      	mov	r0, r6
 800cf5a:	4639      	mov	r1, r7
 800cf5c:	f7f3 f99c 	bl	8000298 <__aeabi_dsub>
 800cf60:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cf62:	3330      	adds	r3, #48	; 0x30
 800cf64:	f805 3b01 	strb.w	r3, [r5], #1
 800cf68:	9b02      	ldr	r3, [sp, #8]
 800cf6a:	429d      	cmp	r5, r3
 800cf6c:	4606      	mov	r6, r0
 800cf6e:	460f      	mov	r7, r1
 800cf70:	f04f 0200 	mov.w	r2, #0
 800cf74:	d134      	bne.n	800cfe0 <_dtoa_r+0x660>
 800cf76:	4b19      	ldr	r3, [pc, #100]	; (800cfdc <_dtoa_r+0x65c>)
 800cf78:	ec51 0b18 	vmov	r0, r1, d8
 800cf7c:	f7f3 f98e 	bl	800029c <__adddf3>
 800cf80:	4602      	mov	r2, r0
 800cf82:	460b      	mov	r3, r1
 800cf84:	4630      	mov	r0, r6
 800cf86:	4639      	mov	r1, r7
 800cf88:	f7f3 fdce 	bl	8000b28 <__aeabi_dcmpgt>
 800cf8c:	2800      	cmp	r0, #0
 800cf8e:	d175      	bne.n	800d07c <_dtoa_r+0x6fc>
 800cf90:	ec53 2b18 	vmov	r2, r3, d8
 800cf94:	4911      	ldr	r1, [pc, #68]	; (800cfdc <_dtoa_r+0x65c>)
 800cf96:	2000      	movs	r0, #0
 800cf98:	f7f3 f97e 	bl	8000298 <__aeabi_dsub>
 800cf9c:	4602      	mov	r2, r0
 800cf9e:	460b      	mov	r3, r1
 800cfa0:	4630      	mov	r0, r6
 800cfa2:	4639      	mov	r1, r7
 800cfa4:	f7f3 fda2 	bl	8000aec <__aeabi_dcmplt>
 800cfa8:	2800      	cmp	r0, #0
 800cfaa:	f43f af27 	beq.w	800cdfc <_dtoa_r+0x47c>
 800cfae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cfb0:	1e6b      	subs	r3, r5, #1
 800cfb2:	930c      	str	r3, [sp, #48]	; 0x30
 800cfb4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cfb8:	2b30      	cmp	r3, #48	; 0x30
 800cfba:	d0f8      	beq.n	800cfae <_dtoa_r+0x62e>
 800cfbc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800cfc0:	e04a      	b.n	800d058 <_dtoa_r+0x6d8>
 800cfc2:	bf00      	nop
 800cfc4:	08010108 	.word	0x08010108
 800cfc8:	080100e0 	.word	0x080100e0
 800cfcc:	3ff00000 	.word	0x3ff00000
 800cfd0:	40240000 	.word	0x40240000
 800cfd4:	401c0000 	.word	0x401c0000
 800cfd8:	40140000 	.word	0x40140000
 800cfdc:	3fe00000 	.word	0x3fe00000
 800cfe0:	4baf      	ldr	r3, [pc, #700]	; (800d2a0 <_dtoa_r+0x920>)
 800cfe2:	f7f3 fb11 	bl	8000608 <__aeabi_dmul>
 800cfe6:	4606      	mov	r6, r0
 800cfe8:	460f      	mov	r7, r1
 800cfea:	e7ac      	b.n	800cf46 <_dtoa_r+0x5c6>
 800cfec:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800cff0:	9d00      	ldr	r5, [sp, #0]
 800cff2:	4642      	mov	r2, r8
 800cff4:	464b      	mov	r3, r9
 800cff6:	4630      	mov	r0, r6
 800cff8:	4639      	mov	r1, r7
 800cffa:	f7f3 fc2f 	bl	800085c <__aeabi_ddiv>
 800cffe:	f7f3 fdb3 	bl	8000b68 <__aeabi_d2iz>
 800d002:	9002      	str	r0, [sp, #8]
 800d004:	f7f3 fa96 	bl	8000534 <__aeabi_i2d>
 800d008:	4642      	mov	r2, r8
 800d00a:	464b      	mov	r3, r9
 800d00c:	f7f3 fafc 	bl	8000608 <__aeabi_dmul>
 800d010:	4602      	mov	r2, r0
 800d012:	460b      	mov	r3, r1
 800d014:	4630      	mov	r0, r6
 800d016:	4639      	mov	r1, r7
 800d018:	f7f3 f93e 	bl	8000298 <__aeabi_dsub>
 800d01c:	9e02      	ldr	r6, [sp, #8]
 800d01e:	9f01      	ldr	r7, [sp, #4]
 800d020:	3630      	adds	r6, #48	; 0x30
 800d022:	f805 6b01 	strb.w	r6, [r5], #1
 800d026:	9e00      	ldr	r6, [sp, #0]
 800d028:	1bae      	subs	r6, r5, r6
 800d02a:	42b7      	cmp	r7, r6
 800d02c:	4602      	mov	r2, r0
 800d02e:	460b      	mov	r3, r1
 800d030:	d137      	bne.n	800d0a2 <_dtoa_r+0x722>
 800d032:	f7f3 f933 	bl	800029c <__adddf3>
 800d036:	4642      	mov	r2, r8
 800d038:	464b      	mov	r3, r9
 800d03a:	4606      	mov	r6, r0
 800d03c:	460f      	mov	r7, r1
 800d03e:	f7f3 fd73 	bl	8000b28 <__aeabi_dcmpgt>
 800d042:	b9c8      	cbnz	r0, 800d078 <_dtoa_r+0x6f8>
 800d044:	4642      	mov	r2, r8
 800d046:	464b      	mov	r3, r9
 800d048:	4630      	mov	r0, r6
 800d04a:	4639      	mov	r1, r7
 800d04c:	f7f3 fd44 	bl	8000ad8 <__aeabi_dcmpeq>
 800d050:	b110      	cbz	r0, 800d058 <_dtoa_r+0x6d8>
 800d052:	9b02      	ldr	r3, [sp, #8]
 800d054:	07d9      	lsls	r1, r3, #31
 800d056:	d40f      	bmi.n	800d078 <_dtoa_r+0x6f8>
 800d058:	4620      	mov	r0, r4
 800d05a:	4659      	mov	r1, fp
 800d05c:	f000 ff54 	bl	800df08 <_Bfree>
 800d060:	2300      	movs	r3, #0
 800d062:	702b      	strb	r3, [r5, #0]
 800d064:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d066:	f10a 0001 	add.w	r0, sl, #1
 800d06a:	6018      	str	r0, [r3, #0]
 800d06c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d06e:	2b00      	cmp	r3, #0
 800d070:	f43f acd8 	beq.w	800ca24 <_dtoa_r+0xa4>
 800d074:	601d      	str	r5, [r3, #0]
 800d076:	e4d5      	b.n	800ca24 <_dtoa_r+0xa4>
 800d078:	f8cd a01c 	str.w	sl, [sp, #28]
 800d07c:	462b      	mov	r3, r5
 800d07e:	461d      	mov	r5, r3
 800d080:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d084:	2a39      	cmp	r2, #57	; 0x39
 800d086:	d108      	bne.n	800d09a <_dtoa_r+0x71a>
 800d088:	9a00      	ldr	r2, [sp, #0]
 800d08a:	429a      	cmp	r2, r3
 800d08c:	d1f7      	bne.n	800d07e <_dtoa_r+0x6fe>
 800d08e:	9a07      	ldr	r2, [sp, #28]
 800d090:	9900      	ldr	r1, [sp, #0]
 800d092:	3201      	adds	r2, #1
 800d094:	9207      	str	r2, [sp, #28]
 800d096:	2230      	movs	r2, #48	; 0x30
 800d098:	700a      	strb	r2, [r1, #0]
 800d09a:	781a      	ldrb	r2, [r3, #0]
 800d09c:	3201      	adds	r2, #1
 800d09e:	701a      	strb	r2, [r3, #0]
 800d0a0:	e78c      	b.n	800cfbc <_dtoa_r+0x63c>
 800d0a2:	4b7f      	ldr	r3, [pc, #508]	; (800d2a0 <_dtoa_r+0x920>)
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	f7f3 faaf 	bl	8000608 <__aeabi_dmul>
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	2300      	movs	r3, #0
 800d0ae:	4606      	mov	r6, r0
 800d0b0:	460f      	mov	r7, r1
 800d0b2:	f7f3 fd11 	bl	8000ad8 <__aeabi_dcmpeq>
 800d0b6:	2800      	cmp	r0, #0
 800d0b8:	d09b      	beq.n	800cff2 <_dtoa_r+0x672>
 800d0ba:	e7cd      	b.n	800d058 <_dtoa_r+0x6d8>
 800d0bc:	9a08      	ldr	r2, [sp, #32]
 800d0be:	2a00      	cmp	r2, #0
 800d0c0:	f000 80c4 	beq.w	800d24c <_dtoa_r+0x8cc>
 800d0c4:	9a05      	ldr	r2, [sp, #20]
 800d0c6:	2a01      	cmp	r2, #1
 800d0c8:	f300 80a8 	bgt.w	800d21c <_dtoa_r+0x89c>
 800d0cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d0ce:	2a00      	cmp	r2, #0
 800d0d0:	f000 80a0 	beq.w	800d214 <_dtoa_r+0x894>
 800d0d4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d0d8:	9e06      	ldr	r6, [sp, #24]
 800d0da:	4645      	mov	r5, r8
 800d0dc:	9a04      	ldr	r2, [sp, #16]
 800d0de:	2101      	movs	r1, #1
 800d0e0:	441a      	add	r2, r3
 800d0e2:	4620      	mov	r0, r4
 800d0e4:	4498      	add	r8, r3
 800d0e6:	9204      	str	r2, [sp, #16]
 800d0e8:	f001 f814 	bl	800e114 <__i2b>
 800d0ec:	4607      	mov	r7, r0
 800d0ee:	2d00      	cmp	r5, #0
 800d0f0:	dd0b      	ble.n	800d10a <_dtoa_r+0x78a>
 800d0f2:	9b04      	ldr	r3, [sp, #16]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	dd08      	ble.n	800d10a <_dtoa_r+0x78a>
 800d0f8:	42ab      	cmp	r3, r5
 800d0fa:	9a04      	ldr	r2, [sp, #16]
 800d0fc:	bfa8      	it	ge
 800d0fe:	462b      	movge	r3, r5
 800d100:	eba8 0803 	sub.w	r8, r8, r3
 800d104:	1aed      	subs	r5, r5, r3
 800d106:	1ad3      	subs	r3, r2, r3
 800d108:	9304      	str	r3, [sp, #16]
 800d10a:	9b06      	ldr	r3, [sp, #24]
 800d10c:	b1fb      	cbz	r3, 800d14e <_dtoa_r+0x7ce>
 800d10e:	9b08      	ldr	r3, [sp, #32]
 800d110:	2b00      	cmp	r3, #0
 800d112:	f000 809f 	beq.w	800d254 <_dtoa_r+0x8d4>
 800d116:	2e00      	cmp	r6, #0
 800d118:	dd11      	ble.n	800d13e <_dtoa_r+0x7be>
 800d11a:	4639      	mov	r1, r7
 800d11c:	4632      	mov	r2, r6
 800d11e:	4620      	mov	r0, r4
 800d120:	f001 f8b4 	bl	800e28c <__pow5mult>
 800d124:	465a      	mov	r2, fp
 800d126:	4601      	mov	r1, r0
 800d128:	4607      	mov	r7, r0
 800d12a:	4620      	mov	r0, r4
 800d12c:	f001 f808 	bl	800e140 <__multiply>
 800d130:	4659      	mov	r1, fp
 800d132:	9007      	str	r0, [sp, #28]
 800d134:	4620      	mov	r0, r4
 800d136:	f000 fee7 	bl	800df08 <_Bfree>
 800d13a:	9b07      	ldr	r3, [sp, #28]
 800d13c:	469b      	mov	fp, r3
 800d13e:	9b06      	ldr	r3, [sp, #24]
 800d140:	1b9a      	subs	r2, r3, r6
 800d142:	d004      	beq.n	800d14e <_dtoa_r+0x7ce>
 800d144:	4659      	mov	r1, fp
 800d146:	4620      	mov	r0, r4
 800d148:	f001 f8a0 	bl	800e28c <__pow5mult>
 800d14c:	4683      	mov	fp, r0
 800d14e:	2101      	movs	r1, #1
 800d150:	4620      	mov	r0, r4
 800d152:	f000 ffdf 	bl	800e114 <__i2b>
 800d156:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d158:	2b00      	cmp	r3, #0
 800d15a:	4606      	mov	r6, r0
 800d15c:	dd7c      	ble.n	800d258 <_dtoa_r+0x8d8>
 800d15e:	461a      	mov	r2, r3
 800d160:	4601      	mov	r1, r0
 800d162:	4620      	mov	r0, r4
 800d164:	f001 f892 	bl	800e28c <__pow5mult>
 800d168:	9b05      	ldr	r3, [sp, #20]
 800d16a:	2b01      	cmp	r3, #1
 800d16c:	4606      	mov	r6, r0
 800d16e:	dd76      	ble.n	800d25e <_dtoa_r+0x8de>
 800d170:	2300      	movs	r3, #0
 800d172:	9306      	str	r3, [sp, #24]
 800d174:	6933      	ldr	r3, [r6, #16]
 800d176:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d17a:	6918      	ldr	r0, [r3, #16]
 800d17c:	f000 ff7a 	bl	800e074 <__hi0bits>
 800d180:	f1c0 0020 	rsb	r0, r0, #32
 800d184:	9b04      	ldr	r3, [sp, #16]
 800d186:	4418      	add	r0, r3
 800d188:	f010 001f 	ands.w	r0, r0, #31
 800d18c:	f000 8086 	beq.w	800d29c <_dtoa_r+0x91c>
 800d190:	f1c0 0320 	rsb	r3, r0, #32
 800d194:	2b04      	cmp	r3, #4
 800d196:	dd7f      	ble.n	800d298 <_dtoa_r+0x918>
 800d198:	f1c0 001c 	rsb	r0, r0, #28
 800d19c:	9b04      	ldr	r3, [sp, #16]
 800d19e:	4403      	add	r3, r0
 800d1a0:	4480      	add	r8, r0
 800d1a2:	4405      	add	r5, r0
 800d1a4:	9304      	str	r3, [sp, #16]
 800d1a6:	f1b8 0f00 	cmp.w	r8, #0
 800d1aa:	dd05      	ble.n	800d1b8 <_dtoa_r+0x838>
 800d1ac:	4659      	mov	r1, fp
 800d1ae:	4642      	mov	r2, r8
 800d1b0:	4620      	mov	r0, r4
 800d1b2:	f001 f8c5 	bl	800e340 <__lshift>
 800d1b6:	4683      	mov	fp, r0
 800d1b8:	9b04      	ldr	r3, [sp, #16]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	dd05      	ble.n	800d1ca <_dtoa_r+0x84a>
 800d1be:	4631      	mov	r1, r6
 800d1c0:	461a      	mov	r2, r3
 800d1c2:	4620      	mov	r0, r4
 800d1c4:	f001 f8bc 	bl	800e340 <__lshift>
 800d1c8:	4606      	mov	r6, r0
 800d1ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d069      	beq.n	800d2a4 <_dtoa_r+0x924>
 800d1d0:	4631      	mov	r1, r6
 800d1d2:	4658      	mov	r0, fp
 800d1d4:	f001 f920 	bl	800e418 <__mcmp>
 800d1d8:	2800      	cmp	r0, #0
 800d1da:	da63      	bge.n	800d2a4 <_dtoa_r+0x924>
 800d1dc:	2300      	movs	r3, #0
 800d1de:	4659      	mov	r1, fp
 800d1e0:	220a      	movs	r2, #10
 800d1e2:	4620      	mov	r0, r4
 800d1e4:	f000 feb2 	bl	800df4c <__multadd>
 800d1e8:	9b08      	ldr	r3, [sp, #32]
 800d1ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d1ee:	4683      	mov	fp, r0
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	f000 818f 	beq.w	800d514 <_dtoa_r+0xb94>
 800d1f6:	4639      	mov	r1, r7
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	220a      	movs	r2, #10
 800d1fc:	4620      	mov	r0, r4
 800d1fe:	f000 fea5 	bl	800df4c <__multadd>
 800d202:	f1b9 0f00 	cmp.w	r9, #0
 800d206:	4607      	mov	r7, r0
 800d208:	f300 808e 	bgt.w	800d328 <_dtoa_r+0x9a8>
 800d20c:	9b05      	ldr	r3, [sp, #20]
 800d20e:	2b02      	cmp	r3, #2
 800d210:	dc50      	bgt.n	800d2b4 <_dtoa_r+0x934>
 800d212:	e089      	b.n	800d328 <_dtoa_r+0x9a8>
 800d214:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d216:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d21a:	e75d      	b.n	800d0d8 <_dtoa_r+0x758>
 800d21c:	9b01      	ldr	r3, [sp, #4]
 800d21e:	1e5e      	subs	r6, r3, #1
 800d220:	9b06      	ldr	r3, [sp, #24]
 800d222:	42b3      	cmp	r3, r6
 800d224:	bfbf      	itttt	lt
 800d226:	9b06      	ldrlt	r3, [sp, #24]
 800d228:	9606      	strlt	r6, [sp, #24]
 800d22a:	1af2      	sublt	r2, r6, r3
 800d22c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800d22e:	bfb6      	itet	lt
 800d230:	189b      	addlt	r3, r3, r2
 800d232:	1b9e      	subge	r6, r3, r6
 800d234:	930d      	strlt	r3, [sp, #52]	; 0x34
 800d236:	9b01      	ldr	r3, [sp, #4]
 800d238:	bfb8      	it	lt
 800d23a:	2600      	movlt	r6, #0
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	bfb5      	itete	lt
 800d240:	eba8 0503 	sublt.w	r5, r8, r3
 800d244:	9b01      	ldrge	r3, [sp, #4]
 800d246:	2300      	movlt	r3, #0
 800d248:	4645      	movge	r5, r8
 800d24a:	e747      	b.n	800d0dc <_dtoa_r+0x75c>
 800d24c:	9e06      	ldr	r6, [sp, #24]
 800d24e:	9f08      	ldr	r7, [sp, #32]
 800d250:	4645      	mov	r5, r8
 800d252:	e74c      	b.n	800d0ee <_dtoa_r+0x76e>
 800d254:	9a06      	ldr	r2, [sp, #24]
 800d256:	e775      	b.n	800d144 <_dtoa_r+0x7c4>
 800d258:	9b05      	ldr	r3, [sp, #20]
 800d25a:	2b01      	cmp	r3, #1
 800d25c:	dc18      	bgt.n	800d290 <_dtoa_r+0x910>
 800d25e:	9b02      	ldr	r3, [sp, #8]
 800d260:	b9b3      	cbnz	r3, 800d290 <_dtoa_r+0x910>
 800d262:	9b03      	ldr	r3, [sp, #12]
 800d264:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d268:	b9a3      	cbnz	r3, 800d294 <_dtoa_r+0x914>
 800d26a:	9b03      	ldr	r3, [sp, #12]
 800d26c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d270:	0d1b      	lsrs	r3, r3, #20
 800d272:	051b      	lsls	r3, r3, #20
 800d274:	b12b      	cbz	r3, 800d282 <_dtoa_r+0x902>
 800d276:	9b04      	ldr	r3, [sp, #16]
 800d278:	3301      	adds	r3, #1
 800d27a:	9304      	str	r3, [sp, #16]
 800d27c:	f108 0801 	add.w	r8, r8, #1
 800d280:	2301      	movs	r3, #1
 800d282:	9306      	str	r3, [sp, #24]
 800d284:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d286:	2b00      	cmp	r3, #0
 800d288:	f47f af74 	bne.w	800d174 <_dtoa_r+0x7f4>
 800d28c:	2001      	movs	r0, #1
 800d28e:	e779      	b.n	800d184 <_dtoa_r+0x804>
 800d290:	2300      	movs	r3, #0
 800d292:	e7f6      	b.n	800d282 <_dtoa_r+0x902>
 800d294:	9b02      	ldr	r3, [sp, #8]
 800d296:	e7f4      	b.n	800d282 <_dtoa_r+0x902>
 800d298:	d085      	beq.n	800d1a6 <_dtoa_r+0x826>
 800d29a:	4618      	mov	r0, r3
 800d29c:	301c      	adds	r0, #28
 800d29e:	e77d      	b.n	800d19c <_dtoa_r+0x81c>
 800d2a0:	40240000 	.word	0x40240000
 800d2a4:	9b01      	ldr	r3, [sp, #4]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	dc38      	bgt.n	800d31c <_dtoa_r+0x99c>
 800d2aa:	9b05      	ldr	r3, [sp, #20]
 800d2ac:	2b02      	cmp	r3, #2
 800d2ae:	dd35      	ble.n	800d31c <_dtoa_r+0x99c>
 800d2b0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800d2b4:	f1b9 0f00 	cmp.w	r9, #0
 800d2b8:	d10d      	bne.n	800d2d6 <_dtoa_r+0x956>
 800d2ba:	4631      	mov	r1, r6
 800d2bc:	464b      	mov	r3, r9
 800d2be:	2205      	movs	r2, #5
 800d2c0:	4620      	mov	r0, r4
 800d2c2:	f000 fe43 	bl	800df4c <__multadd>
 800d2c6:	4601      	mov	r1, r0
 800d2c8:	4606      	mov	r6, r0
 800d2ca:	4658      	mov	r0, fp
 800d2cc:	f001 f8a4 	bl	800e418 <__mcmp>
 800d2d0:	2800      	cmp	r0, #0
 800d2d2:	f73f adbd 	bgt.w	800ce50 <_dtoa_r+0x4d0>
 800d2d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2d8:	9d00      	ldr	r5, [sp, #0]
 800d2da:	ea6f 0a03 	mvn.w	sl, r3
 800d2de:	f04f 0800 	mov.w	r8, #0
 800d2e2:	4631      	mov	r1, r6
 800d2e4:	4620      	mov	r0, r4
 800d2e6:	f000 fe0f 	bl	800df08 <_Bfree>
 800d2ea:	2f00      	cmp	r7, #0
 800d2ec:	f43f aeb4 	beq.w	800d058 <_dtoa_r+0x6d8>
 800d2f0:	f1b8 0f00 	cmp.w	r8, #0
 800d2f4:	d005      	beq.n	800d302 <_dtoa_r+0x982>
 800d2f6:	45b8      	cmp	r8, r7
 800d2f8:	d003      	beq.n	800d302 <_dtoa_r+0x982>
 800d2fa:	4641      	mov	r1, r8
 800d2fc:	4620      	mov	r0, r4
 800d2fe:	f000 fe03 	bl	800df08 <_Bfree>
 800d302:	4639      	mov	r1, r7
 800d304:	4620      	mov	r0, r4
 800d306:	f000 fdff 	bl	800df08 <_Bfree>
 800d30a:	e6a5      	b.n	800d058 <_dtoa_r+0x6d8>
 800d30c:	2600      	movs	r6, #0
 800d30e:	4637      	mov	r7, r6
 800d310:	e7e1      	b.n	800d2d6 <_dtoa_r+0x956>
 800d312:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800d314:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800d318:	4637      	mov	r7, r6
 800d31a:	e599      	b.n	800ce50 <_dtoa_r+0x4d0>
 800d31c:	9b08      	ldr	r3, [sp, #32]
 800d31e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800d322:	2b00      	cmp	r3, #0
 800d324:	f000 80fd 	beq.w	800d522 <_dtoa_r+0xba2>
 800d328:	2d00      	cmp	r5, #0
 800d32a:	dd05      	ble.n	800d338 <_dtoa_r+0x9b8>
 800d32c:	4639      	mov	r1, r7
 800d32e:	462a      	mov	r2, r5
 800d330:	4620      	mov	r0, r4
 800d332:	f001 f805 	bl	800e340 <__lshift>
 800d336:	4607      	mov	r7, r0
 800d338:	9b06      	ldr	r3, [sp, #24]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d05c      	beq.n	800d3f8 <_dtoa_r+0xa78>
 800d33e:	6879      	ldr	r1, [r7, #4]
 800d340:	4620      	mov	r0, r4
 800d342:	f000 fda1 	bl	800de88 <_Balloc>
 800d346:	4605      	mov	r5, r0
 800d348:	b928      	cbnz	r0, 800d356 <_dtoa_r+0x9d6>
 800d34a:	4b80      	ldr	r3, [pc, #512]	; (800d54c <_dtoa_r+0xbcc>)
 800d34c:	4602      	mov	r2, r0
 800d34e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d352:	f7ff bb2e 	b.w	800c9b2 <_dtoa_r+0x32>
 800d356:	693a      	ldr	r2, [r7, #16]
 800d358:	3202      	adds	r2, #2
 800d35a:	0092      	lsls	r2, r2, #2
 800d35c:	f107 010c 	add.w	r1, r7, #12
 800d360:	300c      	adds	r0, #12
 800d362:	f7fd fe33 	bl	800afcc <memcpy>
 800d366:	2201      	movs	r2, #1
 800d368:	4629      	mov	r1, r5
 800d36a:	4620      	mov	r0, r4
 800d36c:	f000 ffe8 	bl	800e340 <__lshift>
 800d370:	9b00      	ldr	r3, [sp, #0]
 800d372:	3301      	adds	r3, #1
 800d374:	9301      	str	r3, [sp, #4]
 800d376:	9b00      	ldr	r3, [sp, #0]
 800d378:	444b      	add	r3, r9
 800d37a:	9307      	str	r3, [sp, #28]
 800d37c:	9b02      	ldr	r3, [sp, #8]
 800d37e:	f003 0301 	and.w	r3, r3, #1
 800d382:	46b8      	mov	r8, r7
 800d384:	9306      	str	r3, [sp, #24]
 800d386:	4607      	mov	r7, r0
 800d388:	9b01      	ldr	r3, [sp, #4]
 800d38a:	4631      	mov	r1, r6
 800d38c:	3b01      	subs	r3, #1
 800d38e:	4658      	mov	r0, fp
 800d390:	9302      	str	r3, [sp, #8]
 800d392:	f7ff fa69 	bl	800c868 <quorem>
 800d396:	4603      	mov	r3, r0
 800d398:	3330      	adds	r3, #48	; 0x30
 800d39a:	9004      	str	r0, [sp, #16]
 800d39c:	4641      	mov	r1, r8
 800d39e:	4658      	mov	r0, fp
 800d3a0:	9308      	str	r3, [sp, #32]
 800d3a2:	f001 f839 	bl	800e418 <__mcmp>
 800d3a6:	463a      	mov	r2, r7
 800d3a8:	4681      	mov	r9, r0
 800d3aa:	4631      	mov	r1, r6
 800d3ac:	4620      	mov	r0, r4
 800d3ae:	f001 f84f 	bl	800e450 <__mdiff>
 800d3b2:	68c2      	ldr	r2, [r0, #12]
 800d3b4:	9b08      	ldr	r3, [sp, #32]
 800d3b6:	4605      	mov	r5, r0
 800d3b8:	bb02      	cbnz	r2, 800d3fc <_dtoa_r+0xa7c>
 800d3ba:	4601      	mov	r1, r0
 800d3bc:	4658      	mov	r0, fp
 800d3be:	f001 f82b 	bl	800e418 <__mcmp>
 800d3c2:	9b08      	ldr	r3, [sp, #32]
 800d3c4:	4602      	mov	r2, r0
 800d3c6:	4629      	mov	r1, r5
 800d3c8:	4620      	mov	r0, r4
 800d3ca:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800d3ce:	f000 fd9b 	bl	800df08 <_Bfree>
 800d3d2:	9b05      	ldr	r3, [sp, #20]
 800d3d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d3d6:	9d01      	ldr	r5, [sp, #4]
 800d3d8:	ea43 0102 	orr.w	r1, r3, r2
 800d3dc:	9b06      	ldr	r3, [sp, #24]
 800d3de:	430b      	orrs	r3, r1
 800d3e0:	9b08      	ldr	r3, [sp, #32]
 800d3e2:	d10d      	bne.n	800d400 <_dtoa_r+0xa80>
 800d3e4:	2b39      	cmp	r3, #57	; 0x39
 800d3e6:	d029      	beq.n	800d43c <_dtoa_r+0xabc>
 800d3e8:	f1b9 0f00 	cmp.w	r9, #0
 800d3ec:	dd01      	ble.n	800d3f2 <_dtoa_r+0xa72>
 800d3ee:	9b04      	ldr	r3, [sp, #16]
 800d3f0:	3331      	adds	r3, #49	; 0x31
 800d3f2:	9a02      	ldr	r2, [sp, #8]
 800d3f4:	7013      	strb	r3, [r2, #0]
 800d3f6:	e774      	b.n	800d2e2 <_dtoa_r+0x962>
 800d3f8:	4638      	mov	r0, r7
 800d3fa:	e7b9      	b.n	800d370 <_dtoa_r+0x9f0>
 800d3fc:	2201      	movs	r2, #1
 800d3fe:	e7e2      	b.n	800d3c6 <_dtoa_r+0xa46>
 800d400:	f1b9 0f00 	cmp.w	r9, #0
 800d404:	db06      	blt.n	800d414 <_dtoa_r+0xa94>
 800d406:	9905      	ldr	r1, [sp, #20]
 800d408:	ea41 0909 	orr.w	r9, r1, r9
 800d40c:	9906      	ldr	r1, [sp, #24]
 800d40e:	ea59 0101 	orrs.w	r1, r9, r1
 800d412:	d120      	bne.n	800d456 <_dtoa_r+0xad6>
 800d414:	2a00      	cmp	r2, #0
 800d416:	ddec      	ble.n	800d3f2 <_dtoa_r+0xa72>
 800d418:	4659      	mov	r1, fp
 800d41a:	2201      	movs	r2, #1
 800d41c:	4620      	mov	r0, r4
 800d41e:	9301      	str	r3, [sp, #4]
 800d420:	f000 ff8e 	bl	800e340 <__lshift>
 800d424:	4631      	mov	r1, r6
 800d426:	4683      	mov	fp, r0
 800d428:	f000 fff6 	bl	800e418 <__mcmp>
 800d42c:	2800      	cmp	r0, #0
 800d42e:	9b01      	ldr	r3, [sp, #4]
 800d430:	dc02      	bgt.n	800d438 <_dtoa_r+0xab8>
 800d432:	d1de      	bne.n	800d3f2 <_dtoa_r+0xa72>
 800d434:	07da      	lsls	r2, r3, #31
 800d436:	d5dc      	bpl.n	800d3f2 <_dtoa_r+0xa72>
 800d438:	2b39      	cmp	r3, #57	; 0x39
 800d43a:	d1d8      	bne.n	800d3ee <_dtoa_r+0xa6e>
 800d43c:	9a02      	ldr	r2, [sp, #8]
 800d43e:	2339      	movs	r3, #57	; 0x39
 800d440:	7013      	strb	r3, [r2, #0]
 800d442:	462b      	mov	r3, r5
 800d444:	461d      	mov	r5, r3
 800d446:	3b01      	subs	r3, #1
 800d448:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d44c:	2a39      	cmp	r2, #57	; 0x39
 800d44e:	d050      	beq.n	800d4f2 <_dtoa_r+0xb72>
 800d450:	3201      	adds	r2, #1
 800d452:	701a      	strb	r2, [r3, #0]
 800d454:	e745      	b.n	800d2e2 <_dtoa_r+0x962>
 800d456:	2a00      	cmp	r2, #0
 800d458:	dd03      	ble.n	800d462 <_dtoa_r+0xae2>
 800d45a:	2b39      	cmp	r3, #57	; 0x39
 800d45c:	d0ee      	beq.n	800d43c <_dtoa_r+0xabc>
 800d45e:	3301      	adds	r3, #1
 800d460:	e7c7      	b.n	800d3f2 <_dtoa_r+0xa72>
 800d462:	9a01      	ldr	r2, [sp, #4]
 800d464:	9907      	ldr	r1, [sp, #28]
 800d466:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d46a:	428a      	cmp	r2, r1
 800d46c:	d02a      	beq.n	800d4c4 <_dtoa_r+0xb44>
 800d46e:	4659      	mov	r1, fp
 800d470:	2300      	movs	r3, #0
 800d472:	220a      	movs	r2, #10
 800d474:	4620      	mov	r0, r4
 800d476:	f000 fd69 	bl	800df4c <__multadd>
 800d47a:	45b8      	cmp	r8, r7
 800d47c:	4683      	mov	fp, r0
 800d47e:	f04f 0300 	mov.w	r3, #0
 800d482:	f04f 020a 	mov.w	r2, #10
 800d486:	4641      	mov	r1, r8
 800d488:	4620      	mov	r0, r4
 800d48a:	d107      	bne.n	800d49c <_dtoa_r+0xb1c>
 800d48c:	f000 fd5e 	bl	800df4c <__multadd>
 800d490:	4680      	mov	r8, r0
 800d492:	4607      	mov	r7, r0
 800d494:	9b01      	ldr	r3, [sp, #4]
 800d496:	3301      	adds	r3, #1
 800d498:	9301      	str	r3, [sp, #4]
 800d49a:	e775      	b.n	800d388 <_dtoa_r+0xa08>
 800d49c:	f000 fd56 	bl	800df4c <__multadd>
 800d4a0:	4639      	mov	r1, r7
 800d4a2:	4680      	mov	r8, r0
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	220a      	movs	r2, #10
 800d4a8:	4620      	mov	r0, r4
 800d4aa:	f000 fd4f 	bl	800df4c <__multadd>
 800d4ae:	4607      	mov	r7, r0
 800d4b0:	e7f0      	b.n	800d494 <_dtoa_r+0xb14>
 800d4b2:	f1b9 0f00 	cmp.w	r9, #0
 800d4b6:	9a00      	ldr	r2, [sp, #0]
 800d4b8:	bfcc      	ite	gt
 800d4ba:	464d      	movgt	r5, r9
 800d4bc:	2501      	movle	r5, #1
 800d4be:	4415      	add	r5, r2
 800d4c0:	f04f 0800 	mov.w	r8, #0
 800d4c4:	4659      	mov	r1, fp
 800d4c6:	2201      	movs	r2, #1
 800d4c8:	4620      	mov	r0, r4
 800d4ca:	9301      	str	r3, [sp, #4]
 800d4cc:	f000 ff38 	bl	800e340 <__lshift>
 800d4d0:	4631      	mov	r1, r6
 800d4d2:	4683      	mov	fp, r0
 800d4d4:	f000 ffa0 	bl	800e418 <__mcmp>
 800d4d8:	2800      	cmp	r0, #0
 800d4da:	dcb2      	bgt.n	800d442 <_dtoa_r+0xac2>
 800d4dc:	d102      	bne.n	800d4e4 <_dtoa_r+0xb64>
 800d4de:	9b01      	ldr	r3, [sp, #4]
 800d4e0:	07db      	lsls	r3, r3, #31
 800d4e2:	d4ae      	bmi.n	800d442 <_dtoa_r+0xac2>
 800d4e4:	462b      	mov	r3, r5
 800d4e6:	461d      	mov	r5, r3
 800d4e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d4ec:	2a30      	cmp	r2, #48	; 0x30
 800d4ee:	d0fa      	beq.n	800d4e6 <_dtoa_r+0xb66>
 800d4f0:	e6f7      	b.n	800d2e2 <_dtoa_r+0x962>
 800d4f2:	9a00      	ldr	r2, [sp, #0]
 800d4f4:	429a      	cmp	r2, r3
 800d4f6:	d1a5      	bne.n	800d444 <_dtoa_r+0xac4>
 800d4f8:	f10a 0a01 	add.w	sl, sl, #1
 800d4fc:	2331      	movs	r3, #49	; 0x31
 800d4fe:	e779      	b.n	800d3f4 <_dtoa_r+0xa74>
 800d500:	4b13      	ldr	r3, [pc, #76]	; (800d550 <_dtoa_r+0xbd0>)
 800d502:	f7ff baaf 	b.w	800ca64 <_dtoa_r+0xe4>
 800d506:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d508:	2b00      	cmp	r3, #0
 800d50a:	f47f aa86 	bne.w	800ca1a <_dtoa_r+0x9a>
 800d50e:	4b11      	ldr	r3, [pc, #68]	; (800d554 <_dtoa_r+0xbd4>)
 800d510:	f7ff baa8 	b.w	800ca64 <_dtoa_r+0xe4>
 800d514:	f1b9 0f00 	cmp.w	r9, #0
 800d518:	dc03      	bgt.n	800d522 <_dtoa_r+0xba2>
 800d51a:	9b05      	ldr	r3, [sp, #20]
 800d51c:	2b02      	cmp	r3, #2
 800d51e:	f73f aec9 	bgt.w	800d2b4 <_dtoa_r+0x934>
 800d522:	9d00      	ldr	r5, [sp, #0]
 800d524:	4631      	mov	r1, r6
 800d526:	4658      	mov	r0, fp
 800d528:	f7ff f99e 	bl	800c868 <quorem>
 800d52c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800d530:	f805 3b01 	strb.w	r3, [r5], #1
 800d534:	9a00      	ldr	r2, [sp, #0]
 800d536:	1aaa      	subs	r2, r5, r2
 800d538:	4591      	cmp	r9, r2
 800d53a:	ddba      	ble.n	800d4b2 <_dtoa_r+0xb32>
 800d53c:	4659      	mov	r1, fp
 800d53e:	2300      	movs	r3, #0
 800d540:	220a      	movs	r2, #10
 800d542:	4620      	mov	r0, r4
 800d544:	f000 fd02 	bl	800df4c <__multadd>
 800d548:	4683      	mov	fp, r0
 800d54a:	e7eb      	b.n	800d524 <_dtoa_r+0xba4>
 800d54c:	0800ff89 	.word	0x0800ff89
 800d550:	0800fcf0 	.word	0x0800fcf0
 800d554:	0800ff1d 	.word	0x0800ff1d

0800d558 <std>:
 800d558:	2300      	movs	r3, #0
 800d55a:	b510      	push	{r4, lr}
 800d55c:	4604      	mov	r4, r0
 800d55e:	e9c0 3300 	strd	r3, r3, [r0]
 800d562:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d566:	6083      	str	r3, [r0, #8]
 800d568:	8181      	strh	r1, [r0, #12]
 800d56a:	6643      	str	r3, [r0, #100]	; 0x64
 800d56c:	81c2      	strh	r2, [r0, #14]
 800d56e:	6183      	str	r3, [r0, #24]
 800d570:	4619      	mov	r1, r3
 800d572:	2208      	movs	r2, #8
 800d574:	305c      	adds	r0, #92	; 0x5c
 800d576:	f7fd fd37 	bl	800afe8 <memset>
 800d57a:	4b05      	ldr	r3, [pc, #20]	; (800d590 <std+0x38>)
 800d57c:	6263      	str	r3, [r4, #36]	; 0x24
 800d57e:	4b05      	ldr	r3, [pc, #20]	; (800d594 <std+0x3c>)
 800d580:	62a3      	str	r3, [r4, #40]	; 0x28
 800d582:	4b05      	ldr	r3, [pc, #20]	; (800d598 <std+0x40>)
 800d584:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d586:	4b05      	ldr	r3, [pc, #20]	; (800d59c <std+0x44>)
 800d588:	6224      	str	r4, [r4, #32]
 800d58a:	6323      	str	r3, [r4, #48]	; 0x30
 800d58c:	bd10      	pop	{r4, pc}
 800d58e:	bf00      	nop
 800d590:	0800ef1d 	.word	0x0800ef1d
 800d594:	0800ef3f 	.word	0x0800ef3f
 800d598:	0800ef77 	.word	0x0800ef77
 800d59c:	0800ef9b 	.word	0x0800ef9b

0800d5a0 <_cleanup_r>:
 800d5a0:	4901      	ldr	r1, [pc, #4]	; (800d5a8 <_cleanup_r+0x8>)
 800d5a2:	f000 b8c1 	b.w	800d728 <_fwalk_reent>
 800d5a6:	bf00      	nop
 800d5a8:	0800f2c5 	.word	0x0800f2c5

0800d5ac <__sfmoreglue>:
 800d5ac:	b570      	push	{r4, r5, r6, lr}
 800d5ae:	1e4a      	subs	r2, r1, #1
 800d5b0:	2568      	movs	r5, #104	; 0x68
 800d5b2:	4355      	muls	r5, r2
 800d5b4:	460e      	mov	r6, r1
 800d5b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d5ba:	f001 f97f 	bl	800e8bc <_malloc_r>
 800d5be:	4604      	mov	r4, r0
 800d5c0:	b140      	cbz	r0, 800d5d4 <__sfmoreglue+0x28>
 800d5c2:	2100      	movs	r1, #0
 800d5c4:	e9c0 1600 	strd	r1, r6, [r0]
 800d5c8:	300c      	adds	r0, #12
 800d5ca:	60a0      	str	r0, [r4, #8]
 800d5cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d5d0:	f7fd fd0a 	bl	800afe8 <memset>
 800d5d4:	4620      	mov	r0, r4
 800d5d6:	bd70      	pop	{r4, r5, r6, pc}

0800d5d8 <__sfp_lock_acquire>:
 800d5d8:	4801      	ldr	r0, [pc, #4]	; (800d5e0 <__sfp_lock_acquire+0x8>)
 800d5da:	f000 bc38 	b.w	800de4e <__retarget_lock_acquire_recursive>
 800d5de:	bf00      	nop
 800d5e0:	20000748 	.word	0x20000748

0800d5e4 <__sfp_lock_release>:
 800d5e4:	4801      	ldr	r0, [pc, #4]	; (800d5ec <__sfp_lock_release+0x8>)
 800d5e6:	f000 bc33 	b.w	800de50 <__retarget_lock_release_recursive>
 800d5ea:	bf00      	nop
 800d5ec:	20000748 	.word	0x20000748

0800d5f0 <__sinit_lock_acquire>:
 800d5f0:	4801      	ldr	r0, [pc, #4]	; (800d5f8 <__sinit_lock_acquire+0x8>)
 800d5f2:	f000 bc2c 	b.w	800de4e <__retarget_lock_acquire_recursive>
 800d5f6:	bf00      	nop
 800d5f8:	20000743 	.word	0x20000743

0800d5fc <__sinit_lock_release>:
 800d5fc:	4801      	ldr	r0, [pc, #4]	; (800d604 <__sinit_lock_release+0x8>)
 800d5fe:	f000 bc27 	b.w	800de50 <__retarget_lock_release_recursive>
 800d602:	bf00      	nop
 800d604:	20000743 	.word	0x20000743

0800d608 <__sinit>:
 800d608:	b510      	push	{r4, lr}
 800d60a:	4604      	mov	r4, r0
 800d60c:	f7ff fff0 	bl	800d5f0 <__sinit_lock_acquire>
 800d610:	69a3      	ldr	r3, [r4, #24]
 800d612:	b11b      	cbz	r3, 800d61c <__sinit+0x14>
 800d614:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d618:	f7ff bff0 	b.w	800d5fc <__sinit_lock_release>
 800d61c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d620:	6523      	str	r3, [r4, #80]	; 0x50
 800d622:	4b13      	ldr	r3, [pc, #76]	; (800d670 <__sinit+0x68>)
 800d624:	4a13      	ldr	r2, [pc, #76]	; (800d674 <__sinit+0x6c>)
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	62a2      	str	r2, [r4, #40]	; 0x28
 800d62a:	42a3      	cmp	r3, r4
 800d62c:	bf04      	itt	eq
 800d62e:	2301      	moveq	r3, #1
 800d630:	61a3      	streq	r3, [r4, #24]
 800d632:	4620      	mov	r0, r4
 800d634:	f000 f820 	bl	800d678 <__sfp>
 800d638:	6060      	str	r0, [r4, #4]
 800d63a:	4620      	mov	r0, r4
 800d63c:	f000 f81c 	bl	800d678 <__sfp>
 800d640:	60a0      	str	r0, [r4, #8]
 800d642:	4620      	mov	r0, r4
 800d644:	f000 f818 	bl	800d678 <__sfp>
 800d648:	2200      	movs	r2, #0
 800d64a:	60e0      	str	r0, [r4, #12]
 800d64c:	2104      	movs	r1, #4
 800d64e:	6860      	ldr	r0, [r4, #4]
 800d650:	f7ff ff82 	bl	800d558 <std>
 800d654:	68a0      	ldr	r0, [r4, #8]
 800d656:	2201      	movs	r2, #1
 800d658:	2109      	movs	r1, #9
 800d65a:	f7ff ff7d 	bl	800d558 <std>
 800d65e:	68e0      	ldr	r0, [r4, #12]
 800d660:	2202      	movs	r2, #2
 800d662:	2112      	movs	r1, #18
 800d664:	f7ff ff78 	bl	800d558 <std>
 800d668:	2301      	movs	r3, #1
 800d66a:	61a3      	str	r3, [r4, #24]
 800d66c:	e7d2      	b.n	800d614 <__sinit+0xc>
 800d66e:	bf00      	nop
 800d670:	0800fcdc 	.word	0x0800fcdc
 800d674:	0800d5a1 	.word	0x0800d5a1

0800d678 <__sfp>:
 800d678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d67a:	4607      	mov	r7, r0
 800d67c:	f7ff ffac 	bl	800d5d8 <__sfp_lock_acquire>
 800d680:	4b1e      	ldr	r3, [pc, #120]	; (800d6fc <__sfp+0x84>)
 800d682:	681e      	ldr	r6, [r3, #0]
 800d684:	69b3      	ldr	r3, [r6, #24]
 800d686:	b913      	cbnz	r3, 800d68e <__sfp+0x16>
 800d688:	4630      	mov	r0, r6
 800d68a:	f7ff ffbd 	bl	800d608 <__sinit>
 800d68e:	3648      	adds	r6, #72	; 0x48
 800d690:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d694:	3b01      	subs	r3, #1
 800d696:	d503      	bpl.n	800d6a0 <__sfp+0x28>
 800d698:	6833      	ldr	r3, [r6, #0]
 800d69a:	b30b      	cbz	r3, 800d6e0 <__sfp+0x68>
 800d69c:	6836      	ldr	r6, [r6, #0]
 800d69e:	e7f7      	b.n	800d690 <__sfp+0x18>
 800d6a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d6a4:	b9d5      	cbnz	r5, 800d6dc <__sfp+0x64>
 800d6a6:	4b16      	ldr	r3, [pc, #88]	; (800d700 <__sfp+0x88>)
 800d6a8:	60e3      	str	r3, [r4, #12]
 800d6aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d6ae:	6665      	str	r5, [r4, #100]	; 0x64
 800d6b0:	f000 fbcc 	bl	800de4c <__retarget_lock_init_recursive>
 800d6b4:	f7ff ff96 	bl	800d5e4 <__sfp_lock_release>
 800d6b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d6bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d6c0:	6025      	str	r5, [r4, #0]
 800d6c2:	61a5      	str	r5, [r4, #24]
 800d6c4:	2208      	movs	r2, #8
 800d6c6:	4629      	mov	r1, r5
 800d6c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d6cc:	f7fd fc8c 	bl	800afe8 <memset>
 800d6d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d6d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d6d8:	4620      	mov	r0, r4
 800d6da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6dc:	3468      	adds	r4, #104	; 0x68
 800d6de:	e7d9      	b.n	800d694 <__sfp+0x1c>
 800d6e0:	2104      	movs	r1, #4
 800d6e2:	4638      	mov	r0, r7
 800d6e4:	f7ff ff62 	bl	800d5ac <__sfmoreglue>
 800d6e8:	4604      	mov	r4, r0
 800d6ea:	6030      	str	r0, [r6, #0]
 800d6ec:	2800      	cmp	r0, #0
 800d6ee:	d1d5      	bne.n	800d69c <__sfp+0x24>
 800d6f0:	f7ff ff78 	bl	800d5e4 <__sfp_lock_release>
 800d6f4:	230c      	movs	r3, #12
 800d6f6:	603b      	str	r3, [r7, #0]
 800d6f8:	e7ee      	b.n	800d6d8 <__sfp+0x60>
 800d6fa:	bf00      	nop
 800d6fc:	0800fcdc 	.word	0x0800fcdc
 800d700:	ffff0001 	.word	0xffff0001

0800d704 <fiprintf>:
 800d704:	b40e      	push	{r1, r2, r3}
 800d706:	b503      	push	{r0, r1, lr}
 800d708:	4601      	mov	r1, r0
 800d70a:	ab03      	add	r3, sp, #12
 800d70c:	4805      	ldr	r0, [pc, #20]	; (800d724 <fiprintf+0x20>)
 800d70e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d712:	6800      	ldr	r0, [r0, #0]
 800d714:	9301      	str	r3, [sp, #4]
 800d716:	f001 fab1 	bl	800ec7c <_vfiprintf_r>
 800d71a:	b002      	add	sp, #8
 800d71c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d720:	b003      	add	sp, #12
 800d722:	4770      	bx	lr
 800d724:	20000074 	.word	0x20000074

0800d728 <_fwalk_reent>:
 800d728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d72c:	4606      	mov	r6, r0
 800d72e:	4688      	mov	r8, r1
 800d730:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d734:	2700      	movs	r7, #0
 800d736:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d73a:	f1b9 0901 	subs.w	r9, r9, #1
 800d73e:	d505      	bpl.n	800d74c <_fwalk_reent+0x24>
 800d740:	6824      	ldr	r4, [r4, #0]
 800d742:	2c00      	cmp	r4, #0
 800d744:	d1f7      	bne.n	800d736 <_fwalk_reent+0xe>
 800d746:	4638      	mov	r0, r7
 800d748:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d74c:	89ab      	ldrh	r3, [r5, #12]
 800d74e:	2b01      	cmp	r3, #1
 800d750:	d907      	bls.n	800d762 <_fwalk_reent+0x3a>
 800d752:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d756:	3301      	adds	r3, #1
 800d758:	d003      	beq.n	800d762 <_fwalk_reent+0x3a>
 800d75a:	4629      	mov	r1, r5
 800d75c:	4630      	mov	r0, r6
 800d75e:	47c0      	blx	r8
 800d760:	4307      	orrs	r7, r0
 800d762:	3568      	adds	r5, #104	; 0x68
 800d764:	e7e9      	b.n	800d73a <_fwalk_reent+0x12>

0800d766 <rshift>:
 800d766:	6903      	ldr	r3, [r0, #16]
 800d768:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d76c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d770:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d774:	f100 0414 	add.w	r4, r0, #20
 800d778:	dd45      	ble.n	800d806 <rshift+0xa0>
 800d77a:	f011 011f 	ands.w	r1, r1, #31
 800d77e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d782:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d786:	d10c      	bne.n	800d7a2 <rshift+0x3c>
 800d788:	f100 0710 	add.w	r7, r0, #16
 800d78c:	4629      	mov	r1, r5
 800d78e:	42b1      	cmp	r1, r6
 800d790:	d334      	bcc.n	800d7fc <rshift+0x96>
 800d792:	1a9b      	subs	r3, r3, r2
 800d794:	009b      	lsls	r3, r3, #2
 800d796:	1eea      	subs	r2, r5, #3
 800d798:	4296      	cmp	r6, r2
 800d79a:	bf38      	it	cc
 800d79c:	2300      	movcc	r3, #0
 800d79e:	4423      	add	r3, r4
 800d7a0:	e015      	b.n	800d7ce <rshift+0x68>
 800d7a2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d7a6:	f1c1 0820 	rsb	r8, r1, #32
 800d7aa:	40cf      	lsrs	r7, r1
 800d7ac:	f105 0e04 	add.w	lr, r5, #4
 800d7b0:	46a1      	mov	r9, r4
 800d7b2:	4576      	cmp	r6, lr
 800d7b4:	46f4      	mov	ip, lr
 800d7b6:	d815      	bhi.n	800d7e4 <rshift+0x7e>
 800d7b8:	1a9b      	subs	r3, r3, r2
 800d7ba:	009a      	lsls	r2, r3, #2
 800d7bc:	3a04      	subs	r2, #4
 800d7be:	3501      	adds	r5, #1
 800d7c0:	42ae      	cmp	r6, r5
 800d7c2:	bf38      	it	cc
 800d7c4:	2200      	movcc	r2, #0
 800d7c6:	18a3      	adds	r3, r4, r2
 800d7c8:	50a7      	str	r7, [r4, r2]
 800d7ca:	b107      	cbz	r7, 800d7ce <rshift+0x68>
 800d7cc:	3304      	adds	r3, #4
 800d7ce:	1b1a      	subs	r2, r3, r4
 800d7d0:	42a3      	cmp	r3, r4
 800d7d2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d7d6:	bf08      	it	eq
 800d7d8:	2300      	moveq	r3, #0
 800d7da:	6102      	str	r2, [r0, #16]
 800d7dc:	bf08      	it	eq
 800d7de:	6143      	streq	r3, [r0, #20]
 800d7e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d7e4:	f8dc c000 	ldr.w	ip, [ip]
 800d7e8:	fa0c fc08 	lsl.w	ip, ip, r8
 800d7ec:	ea4c 0707 	orr.w	r7, ip, r7
 800d7f0:	f849 7b04 	str.w	r7, [r9], #4
 800d7f4:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d7f8:	40cf      	lsrs	r7, r1
 800d7fa:	e7da      	b.n	800d7b2 <rshift+0x4c>
 800d7fc:	f851 cb04 	ldr.w	ip, [r1], #4
 800d800:	f847 cf04 	str.w	ip, [r7, #4]!
 800d804:	e7c3      	b.n	800d78e <rshift+0x28>
 800d806:	4623      	mov	r3, r4
 800d808:	e7e1      	b.n	800d7ce <rshift+0x68>

0800d80a <__hexdig_fun>:
 800d80a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d80e:	2b09      	cmp	r3, #9
 800d810:	d802      	bhi.n	800d818 <__hexdig_fun+0xe>
 800d812:	3820      	subs	r0, #32
 800d814:	b2c0      	uxtb	r0, r0
 800d816:	4770      	bx	lr
 800d818:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d81c:	2b05      	cmp	r3, #5
 800d81e:	d801      	bhi.n	800d824 <__hexdig_fun+0x1a>
 800d820:	3847      	subs	r0, #71	; 0x47
 800d822:	e7f7      	b.n	800d814 <__hexdig_fun+0xa>
 800d824:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d828:	2b05      	cmp	r3, #5
 800d82a:	d801      	bhi.n	800d830 <__hexdig_fun+0x26>
 800d82c:	3827      	subs	r0, #39	; 0x27
 800d82e:	e7f1      	b.n	800d814 <__hexdig_fun+0xa>
 800d830:	2000      	movs	r0, #0
 800d832:	4770      	bx	lr

0800d834 <__gethex>:
 800d834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d838:	ed2d 8b02 	vpush	{d8}
 800d83c:	b089      	sub	sp, #36	; 0x24
 800d83e:	ee08 0a10 	vmov	s16, r0
 800d842:	9304      	str	r3, [sp, #16]
 800d844:	4bbc      	ldr	r3, [pc, #752]	; (800db38 <__gethex+0x304>)
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	9301      	str	r3, [sp, #4]
 800d84a:	4618      	mov	r0, r3
 800d84c:	468b      	mov	fp, r1
 800d84e:	4690      	mov	r8, r2
 800d850:	f7f2 fcc6 	bl	80001e0 <strlen>
 800d854:	9b01      	ldr	r3, [sp, #4]
 800d856:	f8db 2000 	ldr.w	r2, [fp]
 800d85a:	4403      	add	r3, r0
 800d85c:	4682      	mov	sl, r0
 800d85e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800d862:	9305      	str	r3, [sp, #20]
 800d864:	1c93      	adds	r3, r2, #2
 800d866:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d86a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d86e:	32fe      	adds	r2, #254	; 0xfe
 800d870:	18d1      	adds	r1, r2, r3
 800d872:	461f      	mov	r7, r3
 800d874:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d878:	9100      	str	r1, [sp, #0]
 800d87a:	2830      	cmp	r0, #48	; 0x30
 800d87c:	d0f8      	beq.n	800d870 <__gethex+0x3c>
 800d87e:	f7ff ffc4 	bl	800d80a <__hexdig_fun>
 800d882:	4604      	mov	r4, r0
 800d884:	2800      	cmp	r0, #0
 800d886:	d13a      	bne.n	800d8fe <__gethex+0xca>
 800d888:	9901      	ldr	r1, [sp, #4]
 800d88a:	4652      	mov	r2, sl
 800d88c:	4638      	mov	r0, r7
 800d88e:	f001 fb88 	bl	800efa2 <strncmp>
 800d892:	4605      	mov	r5, r0
 800d894:	2800      	cmp	r0, #0
 800d896:	d168      	bne.n	800d96a <__gethex+0x136>
 800d898:	f817 000a 	ldrb.w	r0, [r7, sl]
 800d89c:	eb07 060a 	add.w	r6, r7, sl
 800d8a0:	f7ff ffb3 	bl	800d80a <__hexdig_fun>
 800d8a4:	2800      	cmp	r0, #0
 800d8a6:	d062      	beq.n	800d96e <__gethex+0x13a>
 800d8a8:	4633      	mov	r3, r6
 800d8aa:	7818      	ldrb	r0, [r3, #0]
 800d8ac:	2830      	cmp	r0, #48	; 0x30
 800d8ae:	461f      	mov	r7, r3
 800d8b0:	f103 0301 	add.w	r3, r3, #1
 800d8b4:	d0f9      	beq.n	800d8aa <__gethex+0x76>
 800d8b6:	f7ff ffa8 	bl	800d80a <__hexdig_fun>
 800d8ba:	2301      	movs	r3, #1
 800d8bc:	fab0 f480 	clz	r4, r0
 800d8c0:	0964      	lsrs	r4, r4, #5
 800d8c2:	4635      	mov	r5, r6
 800d8c4:	9300      	str	r3, [sp, #0]
 800d8c6:	463a      	mov	r2, r7
 800d8c8:	4616      	mov	r6, r2
 800d8ca:	3201      	adds	r2, #1
 800d8cc:	7830      	ldrb	r0, [r6, #0]
 800d8ce:	f7ff ff9c 	bl	800d80a <__hexdig_fun>
 800d8d2:	2800      	cmp	r0, #0
 800d8d4:	d1f8      	bne.n	800d8c8 <__gethex+0x94>
 800d8d6:	9901      	ldr	r1, [sp, #4]
 800d8d8:	4652      	mov	r2, sl
 800d8da:	4630      	mov	r0, r6
 800d8dc:	f001 fb61 	bl	800efa2 <strncmp>
 800d8e0:	b980      	cbnz	r0, 800d904 <__gethex+0xd0>
 800d8e2:	b94d      	cbnz	r5, 800d8f8 <__gethex+0xc4>
 800d8e4:	eb06 050a 	add.w	r5, r6, sl
 800d8e8:	462a      	mov	r2, r5
 800d8ea:	4616      	mov	r6, r2
 800d8ec:	3201      	adds	r2, #1
 800d8ee:	7830      	ldrb	r0, [r6, #0]
 800d8f0:	f7ff ff8b 	bl	800d80a <__hexdig_fun>
 800d8f4:	2800      	cmp	r0, #0
 800d8f6:	d1f8      	bne.n	800d8ea <__gethex+0xb6>
 800d8f8:	1bad      	subs	r5, r5, r6
 800d8fa:	00ad      	lsls	r5, r5, #2
 800d8fc:	e004      	b.n	800d908 <__gethex+0xd4>
 800d8fe:	2400      	movs	r4, #0
 800d900:	4625      	mov	r5, r4
 800d902:	e7e0      	b.n	800d8c6 <__gethex+0x92>
 800d904:	2d00      	cmp	r5, #0
 800d906:	d1f7      	bne.n	800d8f8 <__gethex+0xc4>
 800d908:	7833      	ldrb	r3, [r6, #0]
 800d90a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d90e:	2b50      	cmp	r3, #80	; 0x50
 800d910:	d13b      	bne.n	800d98a <__gethex+0x156>
 800d912:	7873      	ldrb	r3, [r6, #1]
 800d914:	2b2b      	cmp	r3, #43	; 0x2b
 800d916:	d02c      	beq.n	800d972 <__gethex+0x13e>
 800d918:	2b2d      	cmp	r3, #45	; 0x2d
 800d91a:	d02e      	beq.n	800d97a <__gethex+0x146>
 800d91c:	1c71      	adds	r1, r6, #1
 800d91e:	f04f 0900 	mov.w	r9, #0
 800d922:	7808      	ldrb	r0, [r1, #0]
 800d924:	f7ff ff71 	bl	800d80a <__hexdig_fun>
 800d928:	1e43      	subs	r3, r0, #1
 800d92a:	b2db      	uxtb	r3, r3
 800d92c:	2b18      	cmp	r3, #24
 800d92e:	d82c      	bhi.n	800d98a <__gethex+0x156>
 800d930:	f1a0 0210 	sub.w	r2, r0, #16
 800d934:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d938:	f7ff ff67 	bl	800d80a <__hexdig_fun>
 800d93c:	1e43      	subs	r3, r0, #1
 800d93e:	b2db      	uxtb	r3, r3
 800d940:	2b18      	cmp	r3, #24
 800d942:	d91d      	bls.n	800d980 <__gethex+0x14c>
 800d944:	f1b9 0f00 	cmp.w	r9, #0
 800d948:	d000      	beq.n	800d94c <__gethex+0x118>
 800d94a:	4252      	negs	r2, r2
 800d94c:	4415      	add	r5, r2
 800d94e:	f8cb 1000 	str.w	r1, [fp]
 800d952:	b1e4      	cbz	r4, 800d98e <__gethex+0x15a>
 800d954:	9b00      	ldr	r3, [sp, #0]
 800d956:	2b00      	cmp	r3, #0
 800d958:	bf14      	ite	ne
 800d95a:	2700      	movne	r7, #0
 800d95c:	2706      	moveq	r7, #6
 800d95e:	4638      	mov	r0, r7
 800d960:	b009      	add	sp, #36	; 0x24
 800d962:	ecbd 8b02 	vpop	{d8}
 800d966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d96a:	463e      	mov	r6, r7
 800d96c:	4625      	mov	r5, r4
 800d96e:	2401      	movs	r4, #1
 800d970:	e7ca      	b.n	800d908 <__gethex+0xd4>
 800d972:	f04f 0900 	mov.w	r9, #0
 800d976:	1cb1      	adds	r1, r6, #2
 800d978:	e7d3      	b.n	800d922 <__gethex+0xee>
 800d97a:	f04f 0901 	mov.w	r9, #1
 800d97e:	e7fa      	b.n	800d976 <__gethex+0x142>
 800d980:	230a      	movs	r3, #10
 800d982:	fb03 0202 	mla	r2, r3, r2, r0
 800d986:	3a10      	subs	r2, #16
 800d988:	e7d4      	b.n	800d934 <__gethex+0x100>
 800d98a:	4631      	mov	r1, r6
 800d98c:	e7df      	b.n	800d94e <__gethex+0x11a>
 800d98e:	1bf3      	subs	r3, r6, r7
 800d990:	3b01      	subs	r3, #1
 800d992:	4621      	mov	r1, r4
 800d994:	2b07      	cmp	r3, #7
 800d996:	dc0b      	bgt.n	800d9b0 <__gethex+0x17c>
 800d998:	ee18 0a10 	vmov	r0, s16
 800d99c:	f000 fa74 	bl	800de88 <_Balloc>
 800d9a0:	4604      	mov	r4, r0
 800d9a2:	b940      	cbnz	r0, 800d9b6 <__gethex+0x182>
 800d9a4:	4b65      	ldr	r3, [pc, #404]	; (800db3c <__gethex+0x308>)
 800d9a6:	4602      	mov	r2, r0
 800d9a8:	21de      	movs	r1, #222	; 0xde
 800d9aa:	4865      	ldr	r0, [pc, #404]	; (800db40 <__gethex+0x30c>)
 800d9ac:	f7fe ff3e 	bl	800c82c <__assert_func>
 800d9b0:	3101      	adds	r1, #1
 800d9b2:	105b      	asrs	r3, r3, #1
 800d9b4:	e7ee      	b.n	800d994 <__gethex+0x160>
 800d9b6:	f100 0914 	add.w	r9, r0, #20
 800d9ba:	f04f 0b00 	mov.w	fp, #0
 800d9be:	f1ca 0301 	rsb	r3, sl, #1
 800d9c2:	f8cd 9008 	str.w	r9, [sp, #8]
 800d9c6:	f8cd b000 	str.w	fp, [sp]
 800d9ca:	9306      	str	r3, [sp, #24]
 800d9cc:	42b7      	cmp	r7, r6
 800d9ce:	d340      	bcc.n	800da52 <__gethex+0x21e>
 800d9d0:	9802      	ldr	r0, [sp, #8]
 800d9d2:	9b00      	ldr	r3, [sp, #0]
 800d9d4:	f840 3b04 	str.w	r3, [r0], #4
 800d9d8:	eba0 0009 	sub.w	r0, r0, r9
 800d9dc:	1080      	asrs	r0, r0, #2
 800d9de:	0146      	lsls	r6, r0, #5
 800d9e0:	6120      	str	r0, [r4, #16]
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	f000 fb46 	bl	800e074 <__hi0bits>
 800d9e8:	1a30      	subs	r0, r6, r0
 800d9ea:	f8d8 6000 	ldr.w	r6, [r8]
 800d9ee:	42b0      	cmp	r0, r6
 800d9f0:	dd63      	ble.n	800daba <__gethex+0x286>
 800d9f2:	1b87      	subs	r7, r0, r6
 800d9f4:	4639      	mov	r1, r7
 800d9f6:	4620      	mov	r0, r4
 800d9f8:	f000 fee0 	bl	800e7bc <__any_on>
 800d9fc:	4682      	mov	sl, r0
 800d9fe:	b1a8      	cbz	r0, 800da2c <__gethex+0x1f8>
 800da00:	1e7b      	subs	r3, r7, #1
 800da02:	1159      	asrs	r1, r3, #5
 800da04:	f003 021f 	and.w	r2, r3, #31
 800da08:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800da0c:	f04f 0a01 	mov.w	sl, #1
 800da10:	fa0a f202 	lsl.w	r2, sl, r2
 800da14:	420a      	tst	r2, r1
 800da16:	d009      	beq.n	800da2c <__gethex+0x1f8>
 800da18:	4553      	cmp	r3, sl
 800da1a:	dd05      	ble.n	800da28 <__gethex+0x1f4>
 800da1c:	1eb9      	subs	r1, r7, #2
 800da1e:	4620      	mov	r0, r4
 800da20:	f000 fecc 	bl	800e7bc <__any_on>
 800da24:	2800      	cmp	r0, #0
 800da26:	d145      	bne.n	800dab4 <__gethex+0x280>
 800da28:	f04f 0a02 	mov.w	sl, #2
 800da2c:	4639      	mov	r1, r7
 800da2e:	4620      	mov	r0, r4
 800da30:	f7ff fe99 	bl	800d766 <rshift>
 800da34:	443d      	add	r5, r7
 800da36:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800da3a:	42ab      	cmp	r3, r5
 800da3c:	da4c      	bge.n	800dad8 <__gethex+0x2a4>
 800da3e:	ee18 0a10 	vmov	r0, s16
 800da42:	4621      	mov	r1, r4
 800da44:	f000 fa60 	bl	800df08 <_Bfree>
 800da48:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800da4a:	2300      	movs	r3, #0
 800da4c:	6013      	str	r3, [r2, #0]
 800da4e:	27a3      	movs	r7, #163	; 0xa3
 800da50:	e785      	b.n	800d95e <__gethex+0x12a>
 800da52:	1e73      	subs	r3, r6, #1
 800da54:	9a05      	ldr	r2, [sp, #20]
 800da56:	9303      	str	r3, [sp, #12]
 800da58:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800da5c:	4293      	cmp	r3, r2
 800da5e:	d019      	beq.n	800da94 <__gethex+0x260>
 800da60:	f1bb 0f20 	cmp.w	fp, #32
 800da64:	d107      	bne.n	800da76 <__gethex+0x242>
 800da66:	9b02      	ldr	r3, [sp, #8]
 800da68:	9a00      	ldr	r2, [sp, #0]
 800da6a:	f843 2b04 	str.w	r2, [r3], #4
 800da6e:	9302      	str	r3, [sp, #8]
 800da70:	2300      	movs	r3, #0
 800da72:	9300      	str	r3, [sp, #0]
 800da74:	469b      	mov	fp, r3
 800da76:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800da7a:	f7ff fec6 	bl	800d80a <__hexdig_fun>
 800da7e:	9b00      	ldr	r3, [sp, #0]
 800da80:	f000 000f 	and.w	r0, r0, #15
 800da84:	fa00 f00b 	lsl.w	r0, r0, fp
 800da88:	4303      	orrs	r3, r0
 800da8a:	9300      	str	r3, [sp, #0]
 800da8c:	f10b 0b04 	add.w	fp, fp, #4
 800da90:	9b03      	ldr	r3, [sp, #12]
 800da92:	e00d      	b.n	800dab0 <__gethex+0x27c>
 800da94:	9b03      	ldr	r3, [sp, #12]
 800da96:	9a06      	ldr	r2, [sp, #24]
 800da98:	4413      	add	r3, r2
 800da9a:	42bb      	cmp	r3, r7
 800da9c:	d3e0      	bcc.n	800da60 <__gethex+0x22c>
 800da9e:	4618      	mov	r0, r3
 800daa0:	9901      	ldr	r1, [sp, #4]
 800daa2:	9307      	str	r3, [sp, #28]
 800daa4:	4652      	mov	r2, sl
 800daa6:	f001 fa7c 	bl	800efa2 <strncmp>
 800daaa:	9b07      	ldr	r3, [sp, #28]
 800daac:	2800      	cmp	r0, #0
 800daae:	d1d7      	bne.n	800da60 <__gethex+0x22c>
 800dab0:	461e      	mov	r6, r3
 800dab2:	e78b      	b.n	800d9cc <__gethex+0x198>
 800dab4:	f04f 0a03 	mov.w	sl, #3
 800dab8:	e7b8      	b.n	800da2c <__gethex+0x1f8>
 800daba:	da0a      	bge.n	800dad2 <__gethex+0x29e>
 800dabc:	1a37      	subs	r7, r6, r0
 800dabe:	4621      	mov	r1, r4
 800dac0:	ee18 0a10 	vmov	r0, s16
 800dac4:	463a      	mov	r2, r7
 800dac6:	f000 fc3b 	bl	800e340 <__lshift>
 800daca:	1bed      	subs	r5, r5, r7
 800dacc:	4604      	mov	r4, r0
 800dace:	f100 0914 	add.w	r9, r0, #20
 800dad2:	f04f 0a00 	mov.w	sl, #0
 800dad6:	e7ae      	b.n	800da36 <__gethex+0x202>
 800dad8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800dadc:	42a8      	cmp	r0, r5
 800dade:	dd72      	ble.n	800dbc6 <__gethex+0x392>
 800dae0:	1b45      	subs	r5, r0, r5
 800dae2:	42ae      	cmp	r6, r5
 800dae4:	dc36      	bgt.n	800db54 <__gethex+0x320>
 800dae6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800daea:	2b02      	cmp	r3, #2
 800daec:	d02a      	beq.n	800db44 <__gethex+0x310>
 800daee:	2b03      	cmp	r3, #3
 800daf0:	d02c      	beq.n	800db4c <__gethex+0x318>
 800daf2:	2b01      	cmp	r3, #1
 800daf4:	d115      	bne.n	800db22 <__gethex+0x2ee>
 800daf6:	42ae      	cmp	r6, r5
 800daf8:	d113      	bne.n	800db22 <__gethex+0x2ee>
 800dafa:	2e01      	cmp	r6, #1
 800dafc:	d10b      	bne.n	800db16 <__gethex+0x2e2>
 800dafe:	9a04      	ldr	r2, [sp, #16]
 800db00:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800db04:	6013      	str	r3, [r2, #0]
 800db06:	2301      	movs	r3, #1
 800db08:	6123      	str	r3, [r4, #16]
 800db0a:	f8c9 3000 	str.w	r3, [r9]
 800db0e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800db10:	2762      	movs	r7, #98	; 0x62
 800db12:	601c      	str	r4, [r3, #0]
 800db14:	e723      	b.n	800d95e <__gethex+0x12a>
 800db16:	1e71      	subs	r1, r6, #1
 800db18:	4620      	mov	r0, r4
 800db1a:	f000 fe4f 	bl	800e7bc <__any_on>
 800db1e:	2800      	cmp	r0, #0
 800db20:	d1ed      	bne.n	800dafe <__gethex+0x2ca>
 800db22:	ee18 0a10 	vmov	r0, s16
 800db26:	4621      	mov	r1, r4
 800db28:	f000 f9ee 	bl	800df08 <_Bfree>
 800db2c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800db2e:	2300      	movs	r3, #0
 800db30:	6013      	str	r3, [r2, #0]
 800db32:	2750      	movs	r7, #80	; 0x50
 800db34:	e713      	b.n	800d95e <__gethex+0x12a>
 800db36:	bf00      	nop
 800db38:	08010068 	.word	0x08010068
 800db3c:	0800ff89 	.word	0x0800ff89
 800db40:	0800fffc 	.word	0x0800fffc
 800db44:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800db46:	2b00      	cmp	r3, #0
 800db48:	d1eb      	bne.n	800db22 <__gethex+0x2ee>
 800db4a:	e7d8      	b.n	800dafe <__gethex+0x2ca>
 800db4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d1d5      	bne.n	800dafe <__gethex+0x2ca>
 800db52:	e7e6      	b.n	800db22 <__gethex+0x2ee>
 800db54:	1e6f      	subs	r7, r5, #1
 800db56:	f1ba 0f00 	cmp.w	sl, #0
 800db5a:	d131      	bne.n	800dbc0 <__gethex+0x38c>
 800db5c:	b127      	cbz	r7, 800db68 <__gethex+0x334>
 800db5e:	4639      	mov	r1, r7
 800db60:	4620      	mov	r0, r4
 800db62:	f000 fe2b 	bl	800e7bc <__any_on>
 800db66:	4682      	mov	sl, r0
 800db68:	117b      	asrs	r3, r7, #5
 800db6a:	2101      	movs	r1, #1
 800db6c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800db70:	f007 071f 	and.w	r7, r7, #31
 800db74:	fa01 f707 	lsl.w	r7, r1, r7
 800db78:	421f      	tst	r7, r3
 800db7a:	4629      	mov	r1, r5
 800db7c:	4620      	mov	r0, r4
 800db7e:	bf18      	it	ne
 800db80:	f04a 0a02 	orrne.w	sl, sl, #2
 800db84:	1b76      	subs	r6, r6, r5
 800db86:	f7ff fdee 	bl	800d766 <rshift>
 800db8a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800db8e:	2702      	movs	r7, #2
 800db90:	f1ba 0f00 	cmp.w	sl, #0
 800db94:	d048      	beq.n	800dc28 <__gethex+0x3f4>
 800db96:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800db9a:	2b02      	cmp	r3, #2
 800db9c:	d015      	beq.n	800dbca <__gethex+0x396>
 800db9e:	2b03      	cmp	r3, #3
 800dba0:	d017      	beq.n	800dbd2 <__gethex+0x39e>
 800dba2:	2b01      	cmp	r3, #1
 800dba4:	d109      	bne.n	800dbba <__gethex+0x386>
 800dba6:	f01a 0f02 	tst.w	sl, #2
 800dbaa:	d006      	beq.n	800dbba <__gethex+0x386>
 800dbac:	f8d9 0000 	ldr.w	r0, [r9]
 800dbb0:	ea4a 0a00 	orr.w	sl, sl, r0
 800dbb4:	f01a 0f01 	tst.w	sl, #1
 800dbb8:	d10e      	bne.n	800dbd8 <__gethex+0x3a4>
 800dbba:	f047 0710 	orr.w	r7, r7, #16
 800dbbe:	e033      	b.n	800dc28 <__gethex+0x3f4>
 800dbc0:	f04f 0a01 	mov.w	sl, #1
 800dbc4:	e7d0      	b.n	800db68 <__gethex+0x334>
 800dbc6:	2701      	movs	r7, #1
 800dbc8:	e7e2      	b.n	800db90 <__gethex+0x35c>
 800dbca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dbcc:	f1c3 0301 	rsb	r3, r3, #1
 800dbd0:	9315      	str	r3, [sp, #84]	; 0x54
 800dbd2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d0f0      	beq.n	800dbba <__gethex+0x386>
 800dbd8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800dbdc:	f104 0314 	add.w	r3, r4, #20
 800dbe0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800dbe4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800dbe8:	f04f 0c00 	mov.w	ip, #0
 800dbec:	4618      	mov	r0, r3
 800dbee:	f853 2b04 	ldr.w	r2, [r3], #4
 800dbf2:	f1b2 3fff 	cmp.w	r2, #4294967295
 800dbf6:	d01c      	beq.n	800dc32 <__gethex+0x3fe>
 800dbf8:	3201      	adds	r2, #1
 800dbfa:	6002      	str	r2, [r0, #0]
 800dbfc:	2f02      	cmp	r7, #2
 800dbfe:	f104 0314 	add.w	r3, r4, #20
 800dc02:	d13f      	bne.n	800dc84 <__gethex+0x450>
 800dc04:	f8d8 2000 	ldr.w	r2, [r8]
 800dc08:	3a01      	subs	r2, #1
 800dc0a:	42b2      	cmp	r2, r6
 800dc0c:	d10a      	bne.n	800dc24 <__gethex+0x3f0>
 800dc0e:	1171      	asrs	r1, r6, #5
 800dc10:	2201      	movs	r2, #1
 800dc12:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dc16:	f006 061f 	and.w	r6, r6, #31
 800dc1a:	fa02 f606 	lsl.w	r6, r2, r6
 800dc1e:	421e      	tst	r6, r3
 800dc20:	bf18      	it	ne
 800dc22:	4617      	movne	r7, r2
 800dc24:	f047 0720 	orr.w	r7, r7, #32
 800dc28:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dc2a:	601c      	str	r4, [r3, #0]
 800dc2c:	9b04      	ldr	r3, [sp, #16]
 800dc2e:	601d      	str	r5, [r3, #0]
 800dc30:	e695      	b.n	800d95e <__gethex+0x12a>
 800dc32:	4299      	cmp	r1, r3
 800dc34:	f843 cc04 	str.w	ip, [r3, #-4]
 800dc38:	d8d8      	bhi.n	800dbec <__gethex+0x3b8>
 800dc3a:	68a3      	ldr	r3, [r4, #8]
 800dc3c:	459b      	cmp	fp, r3
 800dc3e:	db19      	blt.n	800dc74 <__gethex+0x440>
 800dc40:	6861      	ldr	r1, [r4, #4]
 800dc42:	ee18 0a10 	vmov	r0, s16
 800dc46:	3101      	adds	r1, #1
 800dc48:	f000 f91e 	bl	800de88 <_Balloc>
 800dc4c:	4681      	mov	r9, r0
 800dc4e:	b918      	cbnz	r0, 800dc58 <__gethex+0x424>
 800dc50:	4b1a      	ldr	r3, [pc, #104]	; (800dcbc <__gethex+0x488>)
 800dc52:	4602      	mov	r2, r0
 800dc54:	2184      	movs	r1, #132	; 0x84
 800dc56:	e6a8      	b.n	800d9aa <__gethex+0x176>
 800dc58:	6922      	ldr	r2, [r4, #16]
 800dc5a:	3202      	adds	r2, #2
 800dc5c:	f104 010c 	add.w	r1, r4, #12
 800dc60:	0092      	lsls	r2, r2, #2
 800dc62:	300c      	adds	r0, #12
 800dc64:	f7fd f9b2 	bl	800afcc <memcpy>
 800dc68:	4621      	mov	r1, r4
 800dc6a:	ee18 0a10 	vmov	r0, s16
 800dc6e:	f000 f94b 	bl	800df08 <_Bfree>
 800dc72:	464c      	mov	r4, r9
 800dc74:	6923      	ldr	r3, [r4, #16]
 800dc76:	1c5a      	adds	r2, r3, #1
 800dc78:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dc7c:	6122      	str	r2, [r4, #16]
 800dc7e:	2201      	movs	r2, #1
 800dc80:	615a      	str	r2, [r3, #20]
 800dc82:	e7bb      	b.n	800dbfc <__gethex+0x3c8>
 800dc84:	6922      	ldr	r2, [r4, #16]
 800dc86:	455a      	cmp	r2, fp
 800dc88:	dd0b      	ble.n	800dca2 <__gethex+0x46e>
 800dc8a:	2101      	movs	r1, #1
 800dc8c:	4620      	mov	r0, r4
 800dc8e:	f7ff fd6a 	bl	800d766 <rshift>
 800dc92:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dc96:	3501      	adds	r5, #1
 800dc98:	42ab      	cmp	r3, r5
 800dc9a:	f6ff aed0 	blt.w	800da3e <__gethex+0x20a>
 800dc9e:	2701      	movs	r7, #1
 800dca0:	e7c0      	b.n	800dc24 <__gethex+0x3f0>
 800dca2:	f016 061f 	ands.w	r6, r6, #31
 800dca6:	d0fa      	beq.n	800dc9e <__gethex+0x46a>
 800dca8:	449a      	add	sl, r3
 800dcaa:	f1c6 0620 	rsb	r6, r6, #32
 800dcae:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800dcb2:	f000 f9df 	bl	800e074 <__hi0bits>
 800dcb6:	42b0      	cmp	r0, r6
 800dcb8:	dbe7      	blt.n	800dc8a <__gethex+0x456>
 800dcba:	e7f0      	b.n	800dc9e <__gethex+0x46a>
 800dcbc:	0800ff89 	.word	0x0800ff89

0800dcc0 <L_shift>:
 800dcc0:	f1c2 0208 	rsb	r2, r2, #8
 800dcc4:	0092      	lsls	r2, r2, #2
 800dcc6:	b570      	push	{r4, r5, r6, lr}
 800dcc8:	f1c2 0620 	rsb	r6, r2, #32
 800dccc:	6843      	ldr	r3, [r0, #4]
 800dcce:	6804      	ldr	r4, [r0, #0]
 800dcd0:	fa03 f506 	lsl.w	r5, r3, r6
 800dcd4:	432c      	orrs	r4, r5
 800dcd6:	40d3      	lsrs	r3, r2
 800dcd8:	6004      	str	r4, [r0, #0]
 800dcda:	f840 3f04 	str.w	r3, [r0, #4]!
 800dcde:	4288      	cmp	r0, r1
 800dce0:	d3f4      	bcc.n	800dccc <L_shift+0xc>
 800dce2:	bd70      	pop	{r4, r5, r6, pc}

0800dce4 <__match>:
 800dce4:	b530      	push	{r4, r5, lr}
 800dce6:	6803      	ldr	r3, [r0, #0]
 800dce8:	3301      	adds	r3, #1
 800dcea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dcee:	b914      	cbnz	r4, 800dcf6 <__match+0x12>
 800dcf0:	6003      	str	r3, [r0, #0]
 800dcf2:	2001      	movs	r0, #1
 800dcf4:	bd30      	pop	{r4, r5, pc}
 800dcf6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dcfa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800dcfe:	2d19      	cmp	r5, #25
 800dd00:	bf98      	it	ls
 800dd02:	3220      	addls	r2, #32
 800dd04:	42a2      	cmp	r2, r4
 800dd06:	d0f0      	beq.n	800dcea <__match+0x6>
 800dd08:	2000      	movs	r0, #0
 800dd0a:	e7f3      	b.n	800dcf4 <__match+0x10>

0800dd0c <__hexnan>:
 800dd0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd10:	680b      	ldr	r3, [r1, #0]
 800dd12:	6801      	ldr	r1, [r0, #0]
 800dd14:	115e      	asrs	r6, r3, #5
 800dd16:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800dd1a:	f013 031f 	ands.w	r3, r3, #31
 800dd1e:	b087      	sub	sp, #28
 800dd20:	bf18      	it	ne
 800dd22:	3604      	addne	r6, #4
 800dd24:	2500      	movs	r5, #0
 800dd26:	1f37      	subs	r7, r6, #4
 800dd28:	4682      	mov	sl, r0
 800dd2a:	4690      	mov	r8, r2
 800dd2c:	9301      	str	r3, [sp, #4]
 800dd2e:	f846 5c04 	str.w	r5, [r6, #-4]
 800dd32:	46b9      	mov	r9, r7
 800dd34:	463c      	mov	r4, r7
 800dd36:	9502      	str	r5, [sp, #8]
 800dd38:	46ab      	mov	fp, r5
 800dd3a:	784a      	ldrb	r2, [r1, #1]
 800dd3c:	1c4b      	adds	r3, r1, #1
 800dd3e:	9303      	str	r3, [sp, #12]
 800dd40:	b342      	cbz	r2, 800dd94 <__hexnan+0x88>
 800dd42:	4610      	mov	r0, r2
 800dd44:	9105      	str	r1, [sp, #20]
 800dd46:	9204      	str	r2, [sp, #16]
 800dd48:	f7ff fd5f 	bl	800d80a <__hexdig_fun>
 800dd4c:	2800      	cmp	r0, #0
 800dd4e:	d14f      	bne.n	800ddf0 <__hexnan+0xe4>
 800dd50:	9a04      	ldr	r2, [sp, #16]
 800dd52:	9905      	ldr	r1, [sp, #20]
 800dd54:	2a20      	cmp	r2, #32
 800dd56:	d818      	bhi.n	800dd8a <__hexnan+0x7e>
 800dd58:	9b02      	ldr	r3, [sp, #8]
 800dd5a:	459b      	cmp	fp, r3
 800dd5c:	dd13      	ble.n	800dd86 <__hexnan+0x7a>
 800dd5e:	454c      	cmp	r4, r9
 800dd60:	d206      	bcs.n	800dd70 <__hexnan+0x64>
 800dd62:	2d07      	cmp	r5, #7
 800dd64:	dc04      	bgt.n	800dd70 <__hexnan+0x64>
 800dd66:	462a      	mov	r2, r5
 800dd68:	4649      	mov	r1, r9
 800dd6a:	4620      	mov	r0, r4
 800dd6c:	f7ff ffa8 	bl	800dcc0 <L_shift>
 800dd70:	4544      	cmp	r4, r8
 800dd72:	d950      	bls.n	800de16 <__hexnan+0x10a>
 800dd74:	2300      	movs	r3, #0
 800dd76:	f1a4 0904 	sub.w	r9, r4, #4
 800dd7a:	f844 3c04 	str.w	r3, [r4, #-4]
 800dd7e:	f8cd b008 	str.w	fp, [sp, #8]
 800dd82:	464c      	mov	r4, r9
 800dd84:	461d      	mov	r5, r3
 800dd86:	9903      	ldr	r1, [sp, #12]
 800dd88:	e7d7      	b.n	800dd3a <__hexnan+0x2e>
 800dd8a:	2a29      	cmp	r2, #41	; 0x29
 800dd8c:	d156      	bne.n	800de3c <__hexnan+0x130>
 800dd8e:	3102      	adds	r1, #2
 800dd90:	f8ca 1000 	str.w	r1, [sl]
 800dd94:	f1bb 0f00 	cmp.w	fp, #0
 800dd98:	d050      	beq.n	800de3c <__hexnan+0x130>
 800dd9a:	454c      	cmp	r4, r9
 800dd9c:	d206      	bcs.n	800ddac <__hexnan+0xa0>
 800dd9e:	2d07      	cmp	r5, #7
 800dda0:	dc04      	bgt.n	800ddac <__hexnan+0xa0>
 800dda2:	462a      	mov	r2, r5
 800dda4:	4649      	mov	r1, r9
 800dda6:	4620      	mov	r0, r4
 800dda8:	f7ff ff8a 	bl	800dcc0 <L_shift>
 800ddac:	4544      	cmp	r4, r8
 800ddae:	d934      	bls.n	800de1a <__hexnan+0x10e>
 800ddb0:	f1a8 0204 	sub.w	r2, r8, #4
 800ddb4:	4623      	mov	r3, r4
 800ddb6:	f853 1b04 	ldr.w	r1, [r3], #4
 800ddba:	f842 1f04 	str.w	r1, [r2, #4]!
 800ddbe:	429f      	cmp	r7, r3
 800ddc0:	d2f9      	bcs.n	800ddb6 <__hexnan+0xaa>
 800ddc2:	1b3b      	subs	r3, r7, r4
 800ddc4:	f023 0303 	bic.w	r3, r3, #3
 800ddc8:	3304      	adds	r3, #4
 800ddca:	3401      	adds	r4, #1
 800ddcc:	3e03      	subs	r6, #3
 800ddce:	42b4      	cmp	r4, r6
 800ddd0:	bf88      	it	hi
 800ddd2:	2304      	movhi	r3, #4
 800ddd4:	4443      	add	r3, r8
 800ddd6:	2200      	movs	r2, #0
 800ddd8:	f843 2b04 	str.w	r2, [r3], #4
 800dddc:	429f      	cmp	r7, r3
 800ddde:	d2fb      	bcs.n	800ddd8 <__hexnan+0xcc>
 800dde0:	683b      	ldr	r3, [r7, #0]
 800dde2:	b91b      	cbnz	r3, 800ddec <__hexnan+0xe0>
 800dde4:	4547      	cmp	r7, r8
 800dde6:	d127      	bne.n	800de38 <__hexnan+0x12c>
 800dde8:	2301      	movs	r3, #1
 800ddea:	603b      	str	r3, [r7, #0]
 800ddec:	2005      	movs	r0, #5
 800ddee:	e026      	b.n	800de3e <__hexnan+0x132>
 800ddf0:	3501      	adds	r5, #1
 800ddf2:	2d08      	cmp	r5, #8
 800ddf4:	f10b 0b01 	add.w	fp, fp, #1
 800ddf8:	dd06      	ble.n	800de08 <__hexnan+0xfc>
 800ddfa:	4544      	cmp	r4, r8
 800ddfc:	d9c3      	bls.n	800dd86 <__hexnan+0x7a>
 800ddfe:	2300      	movs	r3, #0
 800de00:	f844 3c04 	str.w	r3, [r4, #-4]
 800de04:	2501      	movs	r5, #1
 800de06:	3c04      	subs	r4, #4
 800de08:	6822      	ldr	r2, [r4, #0]
 800de0a:	f000 000f 	and.w	r0, r0, #15
 800de0e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800de12:	6022      	str	r2, [r4, #0]
 800de14:	e7b7      	b.n	800dd86 <__hexnan+0x7a>
 800de16:	2508      	movs	r5, #8
 800de18:	e7b5      	b.n	800dd86 <__hexnan+0x7a>
 800de1a:	9b01      	ldr	r3, [sp, #4]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d0df      	beq.n	800dde0 <__hexnan+0xd4>
 800de20:	f04f 32ff 	mov.w	r2, #4294967295
 800de24:	f1c3 0320 	rsb	r3, r3, #32
 800de28:	fa22 f303 	lsr.w	r3, r2, r3
 800de2c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800de30:	401a      	ands	r2, r3
 800de32:	f846 2c04 	str.w	r2, [r6, #-4]
 800de36:	e7d3      	b.n	800dde0 <__hexnan+0xd4>
 800de38:	3f04      	subs	r7, #4
 800de3a:	e7d1      	b.n	800dde0 <__hexnan+0xd4>
 800de3c:	2004      	movs	r0, #4
 800de3e:	b007      	add	sp, #28
 800de40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800de44 <_localeconv_r>:
 800de44:	4800      	ldr	r0, [pc, #0]	; (800de48 <_localeconv_r+0x4>)
 800de46:	4770      	bx	lr
 800de48:	200001cc 	.word	0x200001cc

0800de4c <__retarget_lock_init_recursive>:
 800de4c:	4770      	bx	lr

0800de4e <__retarget_lock_acquire_recursive>:
 800de4e:	4770      	bx	lr

0800de50 <__retarget_lock_release_recursive>:
 800de50:	4770      	bx	lr
	...

0800de54 <malloc>:
 800de54:	4b02      	ldr	r3, [pc, #8]	; (800de60 <malloc+0xc>)
 800de56:	4601      	mov	r1, r0
 800de58:	6818      	ldr	r0, [r3, #0]
 800de5a:	f000 bd2f 	b.w	800e8bc <_malloc_r>
 800de5e:	bf00      	nop
 800de60:	20000074 	.word	0x20000074

0800de64 <__ascii_mbtowc>:
 800de64:	b082      	sub	sp, #8
 800de66:	b901      	cbnz	r1, 800de6a <__ascii_mbtowc+0x6>
 800de68:	a901      	add	r1, sp, #4
 800de6a:	b142      	cbz	r2, 800de7e <__ascii_mbtowc+0x1a>
 800de6c:	b14b      	cbz	r3, 800de82 <__ascii_mbtowc+0x1e>
 800de6e:	7813      	ldrb	r3, [r2, #0]
 800de70:	600b      	str	r3, [r1, #0]
 800de72:	7812      	ldrb	r2, [r2, #0]
 800de74:	1e10      	subs	r0, r2, #0
 800de76:	bf18      	it	ne
 800de78:	2001      	movne	r0, #1
 800de7a:	b002      	add	sp, #8
 800de7c:	4770      	bx	lr
 800de7e:	4610      	mov	r0, r2
 800de80:	e7fb      	b.n	800de7a <__ascii_mbtowc+0x16>
 800de82:	f06f 0001 	mvn.w	r0, #1
 800de86:	e7f8      	b.n	800de7a <__ascii_mbtowc+0x16>

0800de88 <_Balloc>:
 800de88:	b570      	push	{r4, r5, r6, lr}
 800de8a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800de8c:	4604      	mov	r4, r0
 800de8e:	460d      	mov	r5, r1
 800de90:	b976      	cbnz	r6, 800deb0 <_Balloc+0x28>
 800de92:	2010      	movs	r0, #16
 800de94:	f7ff ffde 	bl	800de54 <malloc>
 800de98:	4602      	mov	r2, r0
 800de9a:	6260      	str	r0, [r4, #36]	; 0x24
 800de9c:	b920      	cbnz	r0, 800dea8 <_Balloc+0x20>
 800de9e:	4b18      	ldr	r3, [pc, #96]	; (800df00 <_Balloc+0x78>)
 800dea0:	4818      	ldr	r0, [pc, #96]	; (800df04 <_Balloc+0x7c>)
 800dea2:	2166      	movs	r1, #102	; 0x66
 800dea4:	f7fe fcc2 	bl	800c82c <__assert_func>
 800dea8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800deac:	6006      	str	r6, [r0, #0]
 800deae:	60c6      	str	r6, [r0, #12]
 800deb0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800deb2:	68f3      	ldr	r3, [r6, #12]
 800deb4:	b183      	cbz	r3, 800ded8 <_Balloc+0x50>
 800deb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800deb8:	68db      	ldr	r3, [r3, #12]
 800deba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800debe:	b9b8      	cbnz	r0, 800def0 <_Balloc+0x68>
 800dec0:	2101      	movs	r1, #1
 800dec2:	fa01 f605 	lsl.w	r6, r1, r5
 800dec6:	1d72      	adds	r2, r6, #5
 800dec8:	0092      	lsls	r2, r2, #2
 800deca:	4620      	mov	r0, r4
 800decc:	f000 fc97 	bl	800e7fe <_calloc_r>
 800ded0:	b160      	cbz	r0, 800deec <_Balloc+0x64>
 800ded2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ded6:	e00e      	b.n	800def6 <_Balloc+0x6e>
 800ded8:	2221      	movs	r2, #33	; 0x21
 800deda:	2104      	movs	r1, #4
 800dedc:	4620      	mov	r0, r4
 800dede:	f000 fc8e 	bl	800e7fe <_calloc_r>
 800dee2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dee4:	60f0      	str	r0, [r6, #12]
 800dee6:	68db      	ldr	r3, [r3, #12]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d1e4      	bne.n	800deb6 <_Balloc+0x2e>
 800deec:	2000      	movs	r0, #0
 800deee:	bd70      	pop	{r4, r5, r6, pc}
 800def0:	6802      	ldr	r2, [r0, #0]
 800def2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800def6:	2300      	movs	r3, #0
 800def8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800defc:	e7f7      	b.n	800deee <_Balloc+0x66>
 800defe:	bf00      	nop
 800df00:	0800fd68 	.word	0x0800fd68
 800df04:	0801007c 	.word	0x0801007c

0800df08 <_Bfree>:
 800df08:	b570      	push	{r4, r5, r6, lr}
 800df0a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800df0c:	4605      	mov	r5, r0
 800df0e:	460c      	mov	r4, r1
 800df10:	b976      	cbnz	r6, 800df30 <_Bfree+0x28>
 800df12:	2010      	movs	r0, #16
 800df14:	f7ff ff9e 	bl	800de54 <malloc>
 800df18:	4602      	mov	r2, r0
 800df1a:	6268      	str	r0, [r5, #36]	; 0x24
 800df1c:	b920      	cbnz	r0, 800df28 <_Bfree+0x20>
 800df1e:	4b09      	ldr	r3, [pc, #36]	; (800df44 <_Bfree+0x3c>)
 800df20:	4809      	ldr	r0, [pc, #36]	; (800df48 <_Bfree+0x40>)
 800df22:	218a      	movs	r1, #138	; 0x8a
 800df24:	f7fe fc82 	bl	800c82c <__assert_func>
 800df28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800df2c:	6006      	str	r6, [r0, #0]
 800df2e:	60c6      	str	r6, [r0, #12]
 800df30:	b13c      	cbz	r4, 800df42 <_Bfree+0x3a>
 800df32:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800df34:	6862      	ldr	r2, [r4, #4]
 800df36:	68db      	ldr	r3, [r3, #12]
 800df38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800df3c:	6021      	str	r1, [r4, #0]
 800df3e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800df42:	bd70      	pop	{r4, r5, r6, pc}
 800df44:	0800fd68 	.word	0x0800fd68
 800df48:	0801007c 	.word	0x0801007c

0800df4c <__multadd>:
 800df4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df50:	690e      	ldr	r6, [r1, #16]
 800df52:	4607      	mov	r7, r0
 800df54:	4698      	mov	r8, r3
 800df56:	460c      	mov	r4, r1
 800df58:	f101 0014 	add.w	r0, r1, #20
 800df5c:	2300      	movs	r3, #0
 800df5e:	6805      	ldr	r5, [r0, #0]
 800df60:	b2a9      	uxth	r1, r5
 800df62:	fb02 8101 	mla	r1, r2, r1, r8
 800df66:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800df6a:	0c2d      	lsrs	r5, r5, #16
 800df6c:	fb02 c505 	mla	r5, r2, r5, ip
 800df70:	b289      	uxth	r1, r1
 800df72:	3301      	adds	r3, #1
 800df74:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800df78:	429e      	cmp	r6, r3
 800df7a:	f840 1b04 	str.w	r1, [r0], #4
 800df7e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800df82:	dcec      	bgt.n	800df5e <__multadd+0x12>
 800df84:	f1b8 0f00 	cmp.w	r8, #0
 800df88:	d022      	beq.n	800dfd0 <__multadd+0x84>
 800df8a:	68a3      	ldr	r3, [r4, #8]
 800df8c:	42b3      	cmp	r3, r6
 800df8e:	dc19      	bgt.n	800dfc4 <__multadd+0x78>
 800df90:	6861      	ldr	r1, [r4, #4]
 800df92:	4638      	mov	r0, r7
 800df94:	3101      	adds	r1, #1
 800df96:	f7ff ff77 	bl	800de88 <_Balloc>
 800df9a:	4605      	mov	r5, r0
 800df9c:	b928      	cbnz	r0, 800dfaa <__multadd+0x5e>
 800df9e:	4602      	mov	r2, r0
 800dfa0:	4b0d      	ldr	r3, [pc, #52]	; (800dfd8 <__multadd+0x8c>)
 800dfa2:	480e      	ldr	r0, [pc, #56]	; (800dfdc <__multadd+0x90>)
 800dfa4:	21b5      	movs	r1, #181	; 0xb5
 800dfa6:	f7fe fc41 	bl	800c82c <__assert_func>
 800dfaa:	6922      	ldr	r2, [r4, #16]
 800dfac:	3202      	adds	r2, #2
 800dfae:	f104 010c 	add.w	r1, r4, #12
 800dfb2:	0092      	lsls	r2, r2, #2
 800dfb4:	300c      	adds	r0, #12
 800dfb6:	f7fd f809 	bl	800afcc <memcpy>
 800dfba:	4621      	mov	r1, r4
 800dfbc:	4638      	mov	r0, r7
 800dfbe:	f7ff ffa3 	bl	800df08 <_Bfree>
 800dfc2:	462c      	mov	r4, r5
 800dfc4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800dfc8:	3601      	adds	r6, #1
 800dfca:	f8c3 8014 	str.w	r8, [r3, #20]
 800dfce:	6126      	str	r6, [r4, #16]
 800dfd0:	4620      	mov	r0, r4
 800dfd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfd6:	bf00      	nop
 800dfd8:	0800ff89 	.word	0x0800ff89
 800dfdc:	0801007c 	.word	0x0801007c

0800dfe0 <__s2b>:
 800dfe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dfe4:	460c      	mov	r4, r1
 800dfe6:	4615      	mov	r5, r2
 800dfe8:	461f      	mov	r7, r3
 800dfea:	2209      	movs	r2, #9
 800dfec:	3308      	adds	r3, #8
 800dfee:	4606      	mov	r6, r0
 800dff0:	fb93 f3f2 	sdiv	r3, r3, r2
 800dff4:	2100      	movs	r1, #0
 800dff6:	2201      	movs	r2, #1
 800dff8:	429a      	cmp	r2, r3
 800dffa:	db09      	blt.n	800e010 <__s2b+0x30>
 800dffc:	4630      	mov	r0, r6
 800dffe:	f7ff ff43 	bl	800de88 <_Balloc>
 800e002:	b940      	cbnz	r0, 800e016 <__s2b+0x36>
 800e004:	4602      	mov	r2, r0
 800e006:	4b19      	ldr	r3, [pc, #100]	; (800e06c <__s2b+0x8c>)
 800e008:	4819      	ldr	r0, [pc, #100]	; (800e070 <__s2b+0x90>)
 800e00a:	21ce      	movs	r1, #206	; 0xce
 800e00c:	f7fe fc0e 	bl	800c82c <__assert_func>
 800e010:	0052      	lsls	r2, r2, #1
 800e012:	3101      	adds	r1, #1
 800e014:	e7f0      	b.n	800dff8 <__s2b+0x18>
 800e016:	9b08      	ldr	r3, [sp, #32]
 800e018:	6143      	str	r3, [r0, #20]
 800e01a:	2d09      	cmp	r5, #9
 800e01c:	f04f 0301 	mov.w	r3, #1
 800e020:	6103      	str	r3, [r0, #16]
 800e022:	dd16      	ble.n	800e052 <__s2b+0x72>
 800e024:	f104 0909 	add.w	r9, r4, #9
 800e028:	46c8      	mov	r8, r9
 800e02a:	442c      	add	r4, r5
 800e02c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e030:	4601      	mov	r1, r0
 800e032:	3b30      	subs	r3, #48	; 0x30
 800e034:	220a      	movs	r2, #10
 800e036:	4630      	mov	r0, r6
 800e038:	f7ff ff88 	bl	800df4c <__multadd>
 800e03c:	45a0      	cmp	r8, r4
 800e03e:	d1f5      	bne.n	800e02c <__s2b+0x4c>
 800e040:	f1a5 0408 	sub.w	r4, r5, #8
 800e044:	444c      	add	r4, r9
 800e046:	1b2d      	subs	r5, r5, r4
 800e048:	1963      	adds	r3, r4, r5
 800e04a:	42bb      	cmp	r3, r7
 800e04c:	db04      	blt.n	800e058 <__s2b+0x78>
 800e04e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e052:	340a      	adds	r4, #10
 800e054:	2509      	movs	r5, #9
 800e056:	e7f6      	b.n	800e046 <__s2b+0x66>
 800e058:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e05c:	4601      	mov	r1, r0
 800e05e:	3b30      	subs	r3, #48	; 0x30
 800e060:	220a      	movs	r2, #10
 800e062:	4630      	mov	r0, r6
 800e064:	f7ff ff72 	bl	800df4c <__multadd>
 800e068:	e7ee      	b.n	800e048 <__s2b+0x68>
 800e06a:	bf00      	nop
 800e06c:	0800ff89 	.word	0x0800ff89
 800e070:	0801007c 	.word	0x0801007c

0800e074 <__hi0bits>:
 800e074:	0c03      	lsrs	r3, r0, #16
 800e076:	041b      	lsls	r3, r3, #16
 800e078:	b9d3      	cbnz	r3, 800e0b0 <__hi0bits+0x3c>
 800e07a:	0400      	lsls	r0, r0, #16
 800e07c:	2310      	movs	r3, #16
 800e07e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e082:	bf04      	itt	eq
 800e084:	0200      	lsleq	r0, r0, #8
 800e086:	3308      	addeq	r3, #8
 800e088:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e08c:	bf04      	itt	eq
 800e08e:	0100      	lsleq	r0, r0, #4
 800e090:	3304      	addeq	r3, #4
 800e092:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e096:	bf04      	itt	eq
 800e098:	0080      	lsleq	r0, r0, #2
 800e09a:	3302      	addeq	r3, #2
 800e09c:	2800      	cmp	r0, #0
 800e09e:	db05      	blt.n	800e0ac <__hi0bits+0x38>
 800e0a0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e0a4:	f103 0301 	add.w	r3, r3, #1
 800e0a8:	bf08      	it	eq
 800e0aa:	2320      	moveq	r3, #32
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	4770      	bx	lr
 800e0b0:	2300      	movs	r3, #0
 800e0b2:	e7e4      	b.n	800e07e <__hi0bits+0xa>

0800e0b4 <__lo0bits>:
 800e0b4:	6803      	ldr	r3, [r0, #0]
 800e0b6:	f013 0207 	ands.w	r2, r3, #7
 800e0ba:	4601      	mov	r1, r0
 800e0bc:	d00b      	beq.n	800e0d6 <__lo0bits+0x22>
 800e0be:	07da      	lsls	r2, r3, #31
 800e0c0:	d424      	bmi.n	800e10c <__lo0bits+0x58>
 800e0c2:	0798      	lsls	r0, r3, #30
 800e0c4:	bf49      	itett	mi
 800e0c6:	085b      	lsrmi	r3, r3, #1
 800e0c8:	089b      	lsrpl	r3, r3, #2
 800e0ca:	2001      	movmi	r0, #1
 800e0cc:	600b      	strmi	r3, [r1, #0]
 800e0ce:	bf5c      	itt	pl
 800e0d0:	600b      	strpl	r3, [r1, #0]
 800e0d2:	2002      	movpl	r0, #2
 800e0d4:	4770      	bx	lr
 800e0d6:	b298      	uxth	r0, r3
 800e0d8:	b9b0      	cbnz	r0, 800e108 <__lo0bits+0x54>
 800e0da:	0c1b      	lsrs	r3, r3, #16
 800e0dc:	2010      	movs	r0, #16
 800e0de:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e0e2:	bf04      	itt	eq
 800e0e4:	0a1b      	lsreq	r3, r3, #8
 800e0e6:	3008      	addeq	r0, #8
 800e0e8:	071a      	lsls	r2, r3, #28
 800e0ea:	bf04      	itt	eq
 800e0ec:	091b      	lsreq	r3, r3, #4
 800e0ee:	3004      	addeq	r0, #4
 800e0f0:	079a      	lsls	r2, r3, #30
 800e0f2:	bf04      	itt	eq
 800e0f4:	089b      	lsreq	r3, r3, #2
 800e0f6:	3002      	addeq	r0, #2
 800e0f8:	07da      	lsls	r2, r3, #31
 800e0fa:	d403      	bmi.n	800e104 <__lo0bits+0x50>
 800e0fc:	085b      	lsrs	r3, r3, #1
 800e0fe:	f100 0001 	add.w	r0, r0, #1
 800e102:	d005      	beq.n	800e110 <__lo0bits+0x5c>
 800e104:	600b      	str	r3, [r1, #0]
 800e106:	4770      	bx	lr
 800e108:	4610      	mov	r0, r2
 800e10a:	e7e8      	b.n	800e0de <__lo0bits+0x2a>
 800e10c:	2000      	movs	r0, #0
 800e10e:	4770      	bx	lr
 800e110:	2020      	movs	r0, #32
 800e112:	4770      	bx	lr

0800e114 <__i2b>:
 800e114:	b510      	push	{r4, lr}
 800e116:	460c      	mov	r4, r1
 800e118:	2101      	movs	r1, #1
 800e11a:	f7ff feb5 	bl	800de88 <_Balloc>
 800e11e:	4602      	mov	r2, r0
 800e120:	b928      	cbnz	r0, 800e12e <__i2b+0x1a>
 800e122:	4b05      	ldr	r3, [pc, #20]	; (800e138 <__i2b+0x24>)
 800e124:	4805      	ldr	r0, [pc, #20]	; (800e13c <__i2b+0x28>)
 800e126:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e12a:	f7fe fb7f 	bl	800c82c <__assert_func>
 800e12e:	2301      	movs	r3, #1
 800e130:	6144      	str	r4, [r0, #20]
 800e132:	6103      	str	r3, [r0, #16]
 800e134:	bd10      	pop	{r4, pc}
 800e136:	bf00      	nop
 800e138:	0800ff89 	.word	0x0800ff89
 800e13c:	0801007c 	.word	0x0801007c

0800e140 <__multiply>:
 800e140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e144:	4614      	mov	r4, r2
 800e146:	690a      	ldr	r2, [r1, #16]
 800e148:	6923      	ldr	r3, [r4, #16]
 800e14a:	429a      	cmp	r2, r3
 800e14c:	bfb8      	it	lt
 800e14e:	460b      	movlt	r3, r1
 800e150:	460d      	mov	r5, r1
 800e152:	bfbc      	itt	lt
 800e154:	4625      	movlt	r5, r4
 800e156:	461c      	movlt	r4, r3
 800e158:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800e15c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e160:	68ab      	ldr	r3, [r5, #8]
 800e162:	6869      	ldr	r1, [r5, #4]
 800e164:	eb0a 0709 	add.w	r7, sl, r9
 800e168:	42bb      	cmp	r3, r7
 800e16a:	b085      	sub	sp, #20
 800e16c:	bfb8      	it	lt
 800e16e:	3101      	addlt	r1, #1
 800e170:	f7ff fe8a 	bl	800de88 <_Balloc>
 800e174:	b930      	cbnz	r0, 800e184 <__multiply+0x44>
 800e176:	4602      	mov	r2, r0
 800e178:	4b42      	ldr	r3, [pc, #264]	; (800e284 <__multiply+0x144>)
 800e17a:	4843      	ldr	r0, [pc, #268]	; (800e288 <__multiply+0x148>)
 800e17c:	f240 115d 	movw	r1, #349	; 0x15d
 800e180:	f7fe fb54 	bl	800c82c <__assert_func>
 800e184:	f100 0614 	add.w	r6, r0, #20
 800e188:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800e18c:	4633      	mov	r3, r6
 800e18e:	2200      	movs	r2, #0
 800e190:	4543      	cmp	r3, r8
 800e192:	d31e      	bcc.n	800e1d2 <__multiply+0x92>
 800e194:	f105 0c14 	add.w	ip, r5, #20
 800e198:	f104 0314 	add.w	r3, r4, #20
 800e19c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800e1a0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800e1a4:	9202      	str	r2, [sp, #8]
 800e1a6:	ebac 0205 	sub.w	r2, ip, r5
 800e1aa:	3a15      	subs	r2, #21
 800e1ac:	f022 0203 	bic.w	r2, r2, #3
 800e1b0:	3204      	adds	r2, #4
 800e1b2:	f105 0115 	add.w	r1, r5, #21
 800e1b6:	458c      	cmp	ip, r1
 800e1b8:	bf38      	it	cc
 800e1ba:	2204      	movcc	r2, #4
 800e1bc:	9201      	str	r2, [sp, #4]
 800e1be:	9a02      	ldr	r2, [sp, #8]
 800e1c0:	9303      	str	r3, [sp, #12]
 800e1c2:	429a      	cmp	r2, r3
 800e1c4:	d808      	bhi.n	800e1d8 <__multiply+0x98>
 800e1c6:	2f00      	cmp	r7, #0
 800e1c8:	dc55      	bgt.n	800e276 <__multiply+0x136>
 800e1ca:	6107      	str	r7, [r0, #16]
 800e1cc:	b005      	add	sp, #20
 800e1ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1d2:	f843 2b04 	str.w	r2, [r3], #4
 800e1d6:	e7db      	b.n	800e190 <__multiply+0x50>
 800e1d8:	f8b3 a000 	ldrh.w	sl, [r3]
 800e1dc:	f1ba 0f00 	cmp.w	sl, #0
 800e1e0:	d020      	beq.n	800e224 <__multiply+0xe4>
 800e1e2:	f105 0e14 	add.w	lr, r5, #20
 800e1e6:	46b1      	mov	r9, r6
 800e1e8:	2200      	movs	r2, #0
 800e1ea:	f85e 4b04 	ldr.w	r4, [lr], #4
 800e1ee:	f8d9 b000 	ldr.w	fp, [r9]
 800e1f2:	b2a1      	uxth	r1, r4
 800e1f4:	fa1f fb8b 	uxth.w	fp, fp
 800e1f8:	fb0a b101 	mla	r1, sl, r1, fp
 800e1fc:	4411      	add	r1, r2
 800e1fe:	f8d9 2000 	ldr.w	r2, [r9]
 800e202:	0c24      	lsrs	r4, r4, #16
 800e204:	0c12      	lsrs	r2, r2, #16
 800e206:	fb0a 2404 	mla	r4, sl, r4, r2
 800e20a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800e20e:	b289      	uxth	r1, r1
 800e210:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800e214:	45f4      	cmp	ip, lr
 800e216:	f849 1b04 	str.w	r1, [r9], #4
 800e21a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800e21e:	d8e4      	bhi.n	800e1ea <__multiply+0xaa>
 800e220:	9901      	ldr	r1, [sp, #4]
 800e222:	5072      	str	r2, [r6, r1]
 800e224:	9a03      	ldr	r2, [sp, #12]
 800e226:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e22a:	3304      	adds	r3, #4
 800e22c:	f1b9 0f00 	cmp.w	r9, #0
 800e230:	d01f      	beq.n	800e272 <__multiply+0x132>
 800e232:	6834      	ldr	r4, [r6, #0]
 800e234:	f105 0114 	add.w	r1, r5, #20
 800e238:	46b6      	mov	lr, r6
 800e23a:	f04f 0a00 	mov.w	sl, #0
 800e23e:	880a      	ldrh	r2, [r1, #0]
 800e240:	f8be b002 	ldrh.w	fp, [lr, #2]
 800e244:	fb09 b202 	mla	r2, r9, r2, fp
 800e248:	4492      	add	sl, r2
 800e24a:	b2a4      	uxth	r4, r4
 800e24c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800e250:	f84e 4b04 	str.w	r4, [lr], #4
 800e254:	f851 4b04 	ldr.w	r4, [r1], #4
 800e258:	f8be 2000 	ldrh.w	r2, [lr]
 800e25c:	0c24      	lsrs	r4, r4, #16
 800e25e:	fb09 2404 	mla	r4, r9, r4, r2
 800e262:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800e266:	458c      	cmp	ip, r1
 800e268:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e26c:	d8e7      	bhi.n	800e23e <__multiply+0xfe>
 800e26e:	9a01      	ldr	r2, [sp, #4]
 800e270:	50b4      	str	r4, [r6, r2]
 800e272:	3604      	adds	r6, #4
 800e274:	e7a3      	b.n	800e1be <__multiply+0x7e>
 800e276:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d1a5      	bne.n	800e1ca <__multiply+0x8a>
 800e27e:	3f01      	subs	r7, #1
 800e280:	e7a1      	b.n	800e1c6 <__multiply+0x86>
 800e282:	bf00      	nop
 800e284:	0800ff89 	.word	0x0800ff89
 800e288:	0801007c 	.word	0x0801007c

0800e28c <__pow5mult>:
 800e28c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e290:	4615      	mov	r5, r2
 800e292:	f012 0203 	ands.w	r2, r2, #3
 800e296:	4606      	mov	r6, r0
 800e298:	460f      	mov	r7, r1
 800e29a:	d007      	beq.n	800e2ac <__pow5mult+0x20>
 800e29c:	4c25      	ldr	r4, [pc, #148]	; (800e334 <__pow5mult+0xa8>)
 800e29e:	3a01      	subs	r2, #1
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e2a6:	f7ff fe51 	bl	800df4c <__multadd>
 800e2aa:	4607      	mov	r7, r0
 800e2ac:	10ad      	asrs	r5, r5, #2
 800e2ae:	d03d      	beq.n	800e32c <__pow5mult+0xa0>
 800e2b0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e2b2:	b97c      	cbnz	r4, 800e2d4 <__pow5mult+0x48>
 800e2b4:	2010      	movs	r0, #16
 800e2b6:	f7ff fdcd 	bl	800de54 <malloc>
 800e2ba:	4602      	mov	r2, r0
 800e2bc:	6270      	str	r0, [r6, #36]	; 0x24
 800e2be:	b928      	cbnz	r0, 800e2cc <__pow5mult+0x40>
 800e2c0:	4b1d      	ldr	r3, [pc, #116]	; (800e338 <__pow5mult+0xac>)
 800e2c2:	481e      	ldr	r0, [pc, #120]	; (800e33c <__pow5mult+0xb0>)
 800e2c4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e2c8:	f7fe fab0 	bl	800c82c <__assert_func>
 800e2cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e2d0:	6004      	str	r4, [r0, #0]
 800e2d2:	60c4      	str	r4, [r0, #12]
 800e2d4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e2d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e2dc:	b94c      	cbnz	r4, 800e2f2 <__pow5mult+0x66>
 800e2de:	f240 2171 	movw	r1, #625	; 0x271
 800e2e2:	4630      	mov	r0, r6
 800e2e4:	f7ff ff16 	bl	800e114 <__i2b>
 800e2e8:	2300      	movs	r3, #0
 800e2ea:	f8c8 0008 	str.w	r0, [r8, #8]
 800e2ee:	4604      	mov	r4, r0
 800e2f0:	6003      	str	r3, [r0, #0]
 800e2f2:	f04f 0900 	mov.w	r9, #0
 800e2f6:	07eb      	lsls	r3, r5, #31
 800e2f8:	d50a      	bpl.n	800e310 <__pow5mult+0x84>
 800e2fa:	4639      	mov	r1, r7
 800e2fc:	4622      	mov	r2, r4
 800e2fe:	4630      	mov	r0, r6
 800e300:	f7ff ff1e 	bl	800e140 <__multiply>
 800e304:	4639      	mov	r1, r7
 800e306:	4680      	mov	r8, r0
 800e308:	4630      	mov	r0, r6
 800e30a:	f7ff fdfd 	bl	800df08 <_Bfree>
 800e30e:	4647      	mov	r7, r8
 800e310:	106d      	asrs	r5, r5, #1
 800e312:	d00b      	beq.n	800e32c <__pow5mult+0xa0>
 800e314:	6820      	ldr	r0, [r4, #0]
 800e316:	b938      	cbnz	r0, 800e328 <__pow5mult+0x9c>
 800e318:	4622      	mov	r2, r4
 800e31a:	4621      	mov	r1, r4
 800e31c:	4630      	mov	r0, r6
 800e31e:	f7ff ff0f 	bl	800e140 <__multiply>
 800e322:	6020      	str	r0, [r4, #0]
 800e324:	f8c0 9000 	str.w	r9, [r0]
 800e328:	4604      	mov	r4, r0
 800e32a:	e7e4      	b.n	800e2f6 <__pow5mult+0x6a>
 800e32c:	4638      	mov	r0, r7
 800e32e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e332:	bf00      	nop
 800e334:	080101d0 	.word	0x080101d0
 800e338:	0800fd68 	.word	0x0800fd68
 800e33c:	0801007c 	.word	0x0801007c

0800e340 <__lshift>:
 800e340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e344:	460c      	mov	r4, r1
 800e346:	6849      	ldr	r1, [r1, #4]
 800e348:	6923      	ldr	r3, [r4, #16]
 800e34a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e34e:	68a3      	ldr	r3, [r4, #8]
 800e350:	4607      	mov	r7, r0
 800e352:	4691      	mov	r9, r2
 800e354:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e358:	f108 0601 	add.w	r6, r8, #1
 800e35c:	42b3      	cmp	r3, r6
 800e35e:	db0b      	blt.n	800e378 <__lshift+0x38>
 800e360:	4638      	mov	r0, r7
 800e362:	f7ff fd91 	bl	800de88 <_Balloc>
 800e366:	4605      	mov	r5, r0
 800e368:	b948      	cbnz	r0, 800e37e <__lshift+0x3e>
 800e36a:	4602      	mov	r2, r0
 800e36c:	4b28      	ldr	r3, [pc, #160]	; (800e410 <__lshift+0xd0>)
 800e36e:	4829      	ldr	r0, [pc, #164]	; (800e414 <__lshift+0xd4>)
 800e370:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e374:	f7fe fa5a 	bl	800c82c <__assert_func>
 800e378:	3101      	adds	r1, #1
 800e37a:	005b      	lsls	r3, r3, #1
 800e37c:	e7ee      	b.n	800e35c <__lshift+0x1c>
 800e37e:	2300      	movs	r3, #0
 800e380:	f100 0114 	add.w	r1, r0, #20
 800e384:	f100 0210 	add.w	r2, r0, #16
 800e388:	4618      	mov	r0, r3
 800e38a:	4553      	cmp	r3, sl
 800e38c:	db33      	blt.n	800e3f6 <__lshift+0xb6>
 800e38e:	6920      	ldr	r0, [r4, #16]
 800e390:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e394:	f104 0314 	add.w	r3, r4, #20
 800e398:	f019 091f 	ands.w	r9, r9, #31
 800e39c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e3a0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e3a4:	d02b      	beq.n	800e3fe <__lshift+0xbe>
 800e3a6:	f1c9 0e20 	rsb	lr, r9, #32
 800e3aa:	468a      	mov	sl, r1
 800e3ac:	2200      	movs	r2, #0
 800e3ae:	6818      	ldr	r0, [r3, #0]
 800e3b0:	fa00 f009 	lsl.w	r0, r0, r9
 800e3b4:	4302      	orrs	r2, r0
 800e3b6:	f84a 2b04 	str.w	r2, [sl], #4
 800e3ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800e3be:	459c      	cmp	ip, r3
 800e3c0:	fa22 f20e 	lsr.w	r2, r2, lr
 800e3c4:	d8f3      	bhi.n	800e3ae <__lshift+0x6e>
 800e3c6:	ebac 0304 	sub.w	r3, ip, r4
 800e3ca:	3b15      	subs	r3, #21
 800e3cc:	f023 0303 	bic.w	r3, r3, #3
 800e3d0:	3304      	adds	r3, #4
 800e3d2:	f104 0015 	add.w	r0, r4, #21
 800e3d6:	4584      	cmp	ip, r0
 800e3d8:	bf38      	it	cc
 800e3da:	2304      	movcc	r3, #4
 800e3dc:	50ca      	str	r2, [r1, r3]
 800e3de:	b10a      	cbz	r2, 800e3e4 <__lshift+0xa4>
 800e3e0:	f108 0602 	add.w	r6, r8, #2
 800e3e4:	3e01      	subs	r6, #1
 800e3e6:	4638      	mov	r0, r7
 800e3e8:	612e      	str	r6, [r5, #16]
 800e3ea:	4621      	mov	r1, r4
 800e3ec:	f7ff fd8c 	bl	800df08 <_Bfree>
 800e3f0:	4628      	mov	r0, r5
 800e3f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3f6:	f842 0f04 	str.w	r0, [r2, #4]!
 800e3fa:	3301      	adds	r3, #1
 800e3fc:	e7c5      	b.n	800e38a <__lshift+0x4a>
 800e3fe:	3904      	subs	r1, #4
 800e400:	f853 2b04 	ldr.w	r2, [r3], #4
 800e404:	f841 2f04 	str.w	r2, [r1, #4]!
 800e408:	459c      	cmp	ip, r3
 800e40a:	d8f9      	bhi.n	800e400 <__lshift+0xc0>
 800e40c:	e7ea      	b.n	800e3e4 <__lshift+0xa4>
 800e40e:	bf00      	nop
 800e410:	0800ff89 	.word	0x0800ff89
 800e414:	0801007c 	.word	0x0801007c

0800e418 <__mcmp>:
 800e418:	b530      	push	{r4, r5, lr}
 800e41a:	6902      	ldr	r2, [r0, #16]
 800e41c:	690c      	ldr	r4, [r1, #16]
 800e41e:	1b12      	subs	r2, r2, r4
 800e420:	d10e      	bne.n	800e440 <__mcmp+0x28>
 800e422:	f100 0314 	add.w	r3, r0, #20
 800e426:	3114      	adds	r1, #20
 800e428:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e42c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e430:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e434:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e438:	42a5      	cmp	r5, r4
 800e43a:	d003      	beq.n	800e444 <__mcmp+0x2c>
 800e43c:	d305      	bcc.n	800e44a <__mcmp+0x32>
 800e43e:	2201      	movs	r2, #1
 800e440:	4610      	mov	r0, r2
 800e442:	bd30      	pop	{r4, r5, pc}
 800e444:	4283      	cmp	r3, r0
 800e446:	d3f3      	bcc.n	800e430 <__mcmp+0x18>
 800e448:	e7fa      	b.n	800e440 <__mcmp+0x28>
 800e44a:	f04f 32ff 	mov.w	r2, #4294967295
 800e44e:	e7f7      	b.n	800e440 <__mcmp+0x28>

0800e450 <__mdiff>:
 800e450:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e454:	460c      	mov	r4, r1
 800e456:	4606      	mov	r6, r0
 800e458:	4611      	mov	r1, r2
 800e45a:	4620      	mov	r0, r4
 800e45c:	4617      	mov	r7, r2
 800e45e:	f7ff ffdb 	bl	800e418 <__mcmp>
 800e462:	1e05      	subs	r5, r0, #0
 800e464:	d110      	bne.n	800e488 <__mdiff+0x38>
 800e466:	4629      	mov	r1, r5
 800e468:	4630      	mov	r0, r6
 800e46a:	f7ff fd0d 	bl	800de88 <_Balloc>
 800e46e:	b930      	cbnz	r0, 800e47e <__mdiff+0x2e>
 800e470:	4b39      	ldr	r3, [pc, #228]	; (800e558 <__mdiff+0x108>)
 800e472:	4602      	mov	r2, r0
 800e474:	f240 2132 	movw	r1, #562	; 0x232
 800e478:	4838      	ldr	r0, [pc, #224]	; (800e55c <__mdiff+0x10c>)
 800e47a:	f7fe f9d7 	bl	800c82c <__assert_func>
 800e47e:	2301      	movs	r3, #1
 800e480:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e484:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e488:	bfa4      	itt	ge
 800e48a:	463b      	movge	r3, r7
 800e48c:	4627      	movge	r7, r4
 800e48e:	4630      	mov	r0, r6
 800e490:	6879      	ldr	r1, [r7, #4]
 800e492:	bfa6      	itte	ge
 800e494:	461c      	movge	r4, r3
 800e496:	2500      	movge	r5, #0
 800e498:	2501      	movlt	r5, #1
 800e49a:	f7ff fcf5 	bl	800de88 <_Balloc>
 800e49e:	b920      	cbnz	r0, 800e4aa <__mdiff+0x5a>
 800e4a0:	4b2d      	ldr	r3, [pc, #180]	; (800e558 <__mdiff+0x108>)
 800e4a2:	4602      	mov	r2, r0
 800e4a4:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e4a8:	e7e6      	b.n	800e478 <__mdiff+0x28>
 800e4aa:	693e      	ldr	r6, [r7, #16]
 800e4ac:	60c5      	str	r5, [r0, #12]
 800e4ae:	6925      	ldr	r5, [r4, #16]
 800e4b0:	f107 0114 	add.w	r1, r7, #20
 800e4b4:	f104 0914 	add.w	r9, r4, #20
 800e4b8:	f100 0e14 	add.w	lr, r0, #20
 800e4bc:	f107 0210 	add.w	r2, r7, #16
 800e4c0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800e4c4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800e4c8:	46f2      	mov	sl, lr
 800e4ca:	2700      	movs	r7, #0
 800e4cc:	f859 3b04 	ldr.w	r3, [r9], #4
 800e4d0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e4d4:	fa1f f883 	uxth.w	r8, r3
 800e4d8:	fa17 f78b 	uxtah	r7, r7, fp
 800e4dc:	0c1b      	lsrs	r3, r3, #16
 800e4de:	eba7 0808 	sub.w	r8, r7, r8
 800e4e2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e4e6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e4ea:	fa1f f888 	uxth.w	r8, r8
 800e4ee:	141f      	asrs	r7, r3, #16
 800e4f0:	454d      	cmp	r5, r9
 800e4f2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e4f6:	f84a 3b04 	str.w	r3, [sl], #4
 800e4fa:	d8e7      	bhi.n	800e4cc <__mdiff+0x7c>
 800e4fc:	1b2b      	subs	r3, r5, r4
 800e4fe:	3b15      	subs	r3, #21
 800e500:	f023 0303 	bic.w	r3, r3, #3
 800e504:	3304      	adds	r3, #4
 800e506:	3415      	adds	r4, #21
 800e508:	42a5      	cmp	r5, r4
 800e50a:	bf38      	it	cc
 800e50c:	2304      	movcc	r3, #4
 800e50e:	4419      	add	r1, r3
 800e510:	4473      	add	r3, lr
 800e512:	469e      	mov	lr, r3
 800e514:	460d      	mov	r5, r1
 800e516:	4565      	cmp	r5, ip
 800e518:	d30e      	bcc.n	800e538 <__mdiff+0xe8>
 800e51a:	f10c 0203 	add.w	r2, ip, #3
 800e51e:	1a52      	subs	r2, r2, r1
 800e520:	f022 0203 	bic.w	r2, r2, #3
 800e524:	3903      	subs	r1, #3
 800e526:	458c      	cmp	ip, r1
 800e528:	bf38      	it	cc
 800e52a:	2200      	movcc	r2, #0
 800e52c:	441a      	add	r2, r3
 800e52e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e532:	b17b      	cbz	r3, 800e554 <__mdiff+0x104>
 800e534:	6106      	str	r6, [r0, #16]
 800e536:	e7a5      	b.n	800e484 <__mdiff+0x34>
 800e538:	f855 8b04 	ldr.w	r8, [r5], #4
 800e53c:	fa17 f488 	uxtah	r4, r7, r8
 800e540:	1422      	asrs	r2, r4, #16
 800e542:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800e546:	b2a4      	uxth	r4, r4
 800e548:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800e54c:	f84e 4b04 	str.w	r4, [lr], #4
 800e550:	1417      	asrs	r7, r2, #16
 800e552:	e7e0      	b.n	800e516 <__mdiff+0xc6>
 800e554:	3e01      	subs	r6, #1
 800e556:	e7ea      	b.n	800e52e <__mdiff+0xde>
 800e558:	0800ff89 	.word	0x0800ff89
 800e55c:	0801007c 	.word	0x0801007c

0800e560 <__ulp>:
 800e560:	b082      	sub	sp, #8
 800e562:	ed8d 0b00 	vstr	d0, [sp]
 800e566:	9b01      	ldr	r3, [sp, #4]
 800e568:	4912      	ldr	r1, [pc, #72]	; (800e5b4 <__ulp+0x54>)
 800e56a:	4019      	ands	r1, r3
 800e56c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800e570:	2900      	cmp	r1, #0
 800e572:	dd05      	ble.n	800e580 <__ulp+0x20>
 800e574:	2200      	movs	r2, #0
 800e576:	460b      	mov	r3, r1
 800e578:	ec43 2b10 	vmov	d0, r2, r3
 800e57c:	b002      	add	sp, #8
 800e57e:	4770      	bx	lr
 800e580:	4249      	negs	r1, r1
 800e582:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800e586:	ea4f 5021 	mov.w	r0, r1, asr #20
 800e58a:	f04f 0200 	mov.w	r2, #0
 800e58e:	f04f 0300 	mov.w	r3, #0
 800e592:	da04      	bge.n	800e59e <__ulp+0x3e>
 800e594:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800e598:	fa41 f300 	asr.w	r3, r1, r0
 800e59c:	e7ec      	b.n	800e578 <__ulp+0x18>
 800e59e:	f1a0 0114 	sub.w	r1, r0, #20
 800e5a2:	291e      	cmp	r1, #30
 800e5a4:	bfda      	itte	le
 800e5a6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800e5aa:	fa20 f101 	lsrle.w	r1, r0, r1
 800e5ae:	2101      	movgt	r1, #1
 800e5b0:	460a      	mov	r2, r1
 800e5b2:	e7e1      	b.n	800e578 <__ulp+0x18>
 800e5b4:	7ff00000 	.word	0x7ff00000

0800e5b8 <__b2d>:
 800e5b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5ba:	6905      	ldr	r5, [r0, #16]
 800e5bc:	f100 0714 	add.w	r7, r0, #20
 800e5c0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800e5c4:	1f2e      	subs	r6, r5, #4
 800e5c6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800e5ca:	4620      	mov	r0, r4
 800e5cc:	f7ff fd52 	bl	800e074 <__hi0bits>
 800e5d0:	f1c0 0320 	rsb	r3, r0, #32
 800e5d4:	280a      	cmp	r0, #10
 800e5d6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800e654 <__b2d+0x9c>
 800e5da:	600b      	str	r3, [r1, #0]
 800e5dc:	dc14      	bgt.n	800e608 <__b2d+0x50>
 800e5de:	f1c0 0e0b 	rsb	lr, r0, #11
 800e5e2:	fa24 f10e 	lsr.w	r1, r4, lr
 800e5e6:	42b7      	cmp	r7, r6
 800e5e8:	ea41 030c 	orr.w	r3, r1, ip
 800e5ec:	bf34      	ite	cc
 800e5ee:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e5f2:	2100      	movcs	r1, #0
 800e5f4:	3015      	adds	r0, #21
 800e5f6:	fa04 f000 	lsl.w	r0, r4, r0
 800e5fa:	fa21 f10e 	lsr.w	r1, r1, lr
 800e5fe:	ea40 0201 	orr.w	r2, r0, r1
 800e602:	ec43 2b10 	vmov	d0, r2, r3
 800e606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e608:	42b7      	cmp	r7, r6
 800e60a:	bf3a      	itte	cc
 800e60c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e610:	f1a5 0608 	subcc.w	r6, r5, #8
 800e614:	2100      	movcs	r1, #0
 800e616:	380b      	subs	r0, #11
 800e618:	d017      	beq.n	800e64a <__b2d+0x92>
 800e61a:	f1c0 0c20 	rsb	ip, r0, #32
 800e61e:	fa04 f500 	lsl.w	r5, r4, r0
 800e622:	42be      	cmp	r6, r7
 800e624:	fa21 f40c 	lsr.w	r4, r1, ip
 800e628:	ea45 0504 	orr.w	r5, r5, r4
 800e62c:	bf8c      	ite	hi
 800e62e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800e632:	2400      	movls	r4, #0
 800e634:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800e638:	fa01 f000 	lsl.w	r0, r1, r0
 800e63c:	fa24 f40c 	lsr.w	r4, r4, ip
 800e640:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e644:	ea40 0204 	orr.w	r2, r0, r4
 800e648:	e7db      	b.n	800e602 <__b2d+0x4a>
 800e64a:	ea44 030c 	orr.w	r3, r4, ip
 800e64e:	460a      	mov	r2, r1
 800e650:	e7d7      	b.n	800e602 <__b2d+0x4a>
 800e652:	bf00      	nop
 800e654:	3ff00000 	.word	0x3ff00000

0800e658 <__d2b>:
 800e658:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e65c:	4689      	mov	r9, r1
 800e65e:	2101      	movs	r1, #1
 800e660:	ec57 6b10 	vmov	r6, r7, d0
 800e664:	4690      	mov	r8, r2
 800e666:	f7ff fc0f 	bl	800de88 <_Balloc>
 800e66a:	4604      	mov	r4, r0
 800e66c:	b930      	cbnz	r0, 800e67c <__d2b+0x24>
 800e66e:	4602      	mov	r2, r0
 800e670:	4b25      	ldr	r3, [pc, #148]	; (800e708 <__d2b+0xb0>)
 800e672:	4826      	ldr	r0, [pc, #152]	; (800e70c <__d2b+0xb4>)
 800e674:	f240 310a 	movw	r1, #778	; 0x30a
 800e678:	f7fe f8d8 	bl	800c82c <__assert_func>
 800e67c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e680:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e684:	bb35      	cbnz	r5, 800e6d4 <__d2b+0x7c>
 800e686:	2e00      	cmp	r6, #0
 800e688:	9301      	str	r3, [sp, #4]
 800e68a:	d028      	beq.n	800e6de <__d2b+0x86>
 800e68c:	4668      	mov	r0, sp
 800e68e:	9600      	str	r6, [sp, #0]
 800e690:	f7ff fd10 	bl	800e0b4 <__lo0bits>
 800e694:	9900      	ldr	r1, [sp, #0]
 800e696:	b300      	cbz	r0, 800e6da <__d2b+0x82>
 800e698:	9a01      	ldr	r2, [sp, #4]
 800e69a:	f1c0 0320 	rsb	r3, r0, #32
 800e69e:	fa02 f303 	lsl.w	r3, r2, r3
 800e6a2:	430b      	orrs	r3, r1
 800e6a4:	40c2      	lsrs	r2, r0
 800e6a6:	6163      	str	r3, [r4, #20]
 800e6a8:	9201      	str	r2, [sp, #4]
 800e6aa:	9b01      	ldr	r3, [sp, #4]
 800e6ac:	61a3      	str	r3, [r4, #24]
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	bf14      	ite	ne
 800e6b2:	2202      	movne	r2, #2
 800e6b4:	2201      	moveq	r2, #1
 800e6b6:	6122      	str	r2, [r4, #16]
 800e6b8:	b1d5      	cbz	r5, 800e6f0 <__d2b+0x98>
 800e6ba:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e6be:	4405      	add	r5, r0
 800e6c0:	f8c9 5000 	str.w	r5, [r9]
 800e6c4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e6c8:	f8c8 0000 	str.w	r0, [r8]
 800e6cc:	4620      	mov	r0, r4
 800e6ce:	b003      	add	sp, #12
 800e6d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e6d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e6d8:	e7d5      	b.n	800e686 <__d2b+0x2e>
 800e6da:	6161      	str	r1, [r4, #20]
 800e6dc:	e7e5      	b.n	800e6aa <__d2b+0x52>
 800e6de:	a801      	add	r0, sp, #4
 800e6e0:	f7ff fce8 	bl	800e0b4 <__lo0bits>
 800e6e4:	9b01      	ldr	r3, [sp, #4]
 800e6e6:	6163      	str	r3, [r4, #20]
 800e6e8:	2201      	movs	r2, #1
 800e6ea:	6122      	str	r2, [r4, #16]
 800e6ec:	3020      	adds	r0, #32
 800e6ee:	e7e3      	b.n	800e6b8 <__d2b+0x60>
 800e6f0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e6f4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e6f8:	f8c9 0000 	str.w	r0, [r9]
 800e6fc:	6918      	ldr	r0, [r3, #16]
 800e6fe:	f7ff fcb9 	bl	800e074 <__hi0bits>
 800e702:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e706:	e7df      	b.n	800e6c8 <__d2b+0x70>
 800e708:	0800ff89 	.word	0x0800ff89
 800e70c:	0801007c 	.word	0x0801007c

0800e710 <__ratio>:
 800e710:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e714:	4688      	mov	r8, r1
 800e716:	4669      	mov	r1, sp
 800e718:	4681      	mov	r9, r0
 800e71a:	f7ff ff4d 	bl	800e5b8 <__b2d>
 800e71e:	a901      	add	r1, sp, #4
 800e720:	4640      	mov	r0, r8
 800e722:	ec55 4b10 	vmov	r4, r5, d0
 800e726:	f7ff ff47 	bl	800e5b8 <__b2d>
 800e72a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e72e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e732:	eba3 0c02 	sub.w	ip, r3, r2
 800e736:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e73a:	1a9b      	subs	r3, r3, r2
 800e73c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e740:	ec51 0b10 	vmov	r0, r1, d0
 800e744:	2b00      	cmp	r3, #0
 800e746:	bfd6      	itet	le
 800e748:	460a      	movle	r2, r1
 800e74a:	462a      	movgt	r2, r5
 800e74c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e750:	468b      	mov	fp, r1
 800e752:	462f      	mov	r7, r5
 800e754:	bfd4      	ite	le
 800e756:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800e75a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e75e:	4620      	mov	r0, r4
 800e760:	ee10 2a10 	vmov	r2, s0
 800e764:	465b      	mov	r3, fp
 800e766:	4639      	mov	r1, r7
 800e768:	f7f2 f878 	bl	800085c <__aeabi_ddiv>
 800e76c:	ec41 0b10 	vmov	d0, r0, r1
 800e770:	b003      	add	sp, #12
 800e772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e776 <__copybits>:
 800e776:	3901      	subs	r1, #1
 800e778:	b570      	push	{r4, r5, r6, lr}
 800e77a:	1149      	asrs	r1, r1, #5
 800e77c:	6914      	ldr	r4, [r2, #16]
 800e77e:	3101      	adds	r1, #1
 800e780:	f102 0314 	add.w	r3, r2, #20
 800e784:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e788:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e78c:	1f05      	subs	r5, r0, #4
 800e78e:	42a3      	cmp	r3, r4
 800e790:	d30c      	bcc.n	800e7ac <__copybits+0x36>
 800e792:	1aa3      	subs	r3, r4, r2
 800e794:	3b11      	subs	r3, #17
 800e796:	f023 0303 	bic.w	r3, r3, #3
 800e79a:	3211      	adds	r2, #17
 800e79c:	42a2      	cmp	r2, r4
 800e79e:	bf88      	it	hi
 800e7a0:	2300      	movhi	r3, #0
 800e7a2:	4418      	add	r0, r3
 800e7a4:	2300      	movs	r3, #0
 800e7a6:	4288      	cmp	r0, r1
 800e7a8:	d305      	bcc.n	800e7b6 <__copybits+0x40>
 800e7aa:	bd70      	pop	{r4, r5, r6, pc}
 800e7ac:	f853 6b04 	ldr.w	r6, [r3], #4
 800e7b0:	f845 6f04 	str.w	r6, [r5, #4]!
 800e7b4:	e7eb      	b.n	800e78e <__copybits+0x18>
 800e7b6:	f840 3b04 	str.w	r3, [r0], #4
 800e7ba:	e7f4      	b.n	800e7a6 <__copybits+0x30>

0800e7bc <__any_on>:
 800e7bc:	f100 0214 	add.w	r2, r0, #20
 800e7c0:	6900      	ldr	r0, [r0, #16]
 800e7c2:	114b      	asrs	r3, r1, #5
 800e7c4:	4298      	cmp	r0, r3
 800e7c6:	b510      	push	{r4, lr}
 800e7c8:	db11      	blt.n	800e7ee <__any_on+0x32>
 800e7ca:	dd0a      	ble.n	800e7e2 <__any_on+0x26>
 800e7cc:	f011 011f 	ands.w	r1, r1, #31
 800e7d0:	d007      	beq.n	800e7e2 <__any_on+0x26>
 800e7d2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e7d6:	fa24 f001 	lsr.w	r0, r4, r1
 800e7da:	fa00 f101 	lsl.w	r1, r0, r1
 800e7de:	428c      	cmp	r4, r1
 800e7e0:	d10b      	bne.n	800e7fa <__any_on+0x3e>
 800e7e2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e7e6:	4293      	cmp	r3, r2
 800e7e8:	d803      	bhi.n	800e7f2 <__any_on+0x36>
 800e7ea:	2000      	movs	r0, #0
 800e7ec:	bd10      	pop	{r4, pc}
 800e7ee:	4603      	mov	r3, r0
 800e7f0:	e7f7      	b.n	800e7e2 <__any_on+0x26>
 800e7f2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e7f6:	2900      	cmp	r1, #0
 800e7f8:	d0f5      	beq.n	800e7e6 <__any_on+0x2a>
 800e7fa:	2001      	movs	r0, #1
 800e7fc:	e7f6      	b.n	800e7ec <__any_on+0x30>

0800e7fe <_calloc_r>:
 800e7fe:	b513      	push	{r0, r1, r4, lr}
 800e800:	434a      	muls	r2, r1
 800e802:	4611      	mov	r1, r2
 800e804:	9201      	str	r2, [sp, #4]
 800e806:	f000 f859 	bl	800e8bc <_malloc_r>
 800e80a:	4604      	mov	r4, r0
 800e80c:	b118      	cbz	r0, 800e816 <_calloc_r+0x18>
 800e80e:	9a01      	ldr	r2, [sp, #4]
 800e810:	2100      	movs	r1, #0
 800e812:	f7fc fbe9 	bl	800afe8 <memset>
 800e816:	4620      	mov	r0, r4
 800e818:	b002      	add	sp, #8
 800e81a:	bd10      	pop	{r4, pc}

0800e81c <_free_r>:
 800e81c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e81e:	2900      	cmp	r1, #0
 800e820:	d048      	beq.n	800e8b4 <_free_r+0x98>
 800e822:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e826:	9001      	str	r0, [sp, #4]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	f1a1 0404 	sub.w	r4, r1, #4
 800e82e:	bfb8      	it	lt
 800e830:	18e4      	addlt	r4, r4, r3
 800e832:	f000 fe13 	bl	800f45c <__malloc_lock>
 800e836:	4a20      	ldr	r2, [pc, #128]	; (800e8b8 <_free_r+0x9c>)
 800e838:	9801      	ldr	r0, [sp, #4]
 800e83a:	6813      	ldr	r3, [r2, #0]
 800e83c:	4615      	mov	r5, r2
 800e83e:	b933      	cbnz	r3, 800e84e <_free_r+0x32>
 800e840:	6063      	str	r3, [r4, #4]
 800e842:	6014      	str	r4, [r2, #0]
 800e844:	b003      	add	sp, #12
 800e846:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e84a:	f000 be0d 	b.w	800f468 <__malloc_unlock>
 800e84e:	42a3      	cmp	r3, r4
 800e850:	d90b      	bls.n	800e86a <_free_r+0x4e>
 800e852:	6821      	ldr	r1, [r4, #0]
 800e854:	1862      	adds	r2, r4, r1
 800e856:	4293      	cmp	r3, r2
 800e858:	bf04      	itt	eq
 800e85a:	681a      	ldreq	r2, [r3, #0]
 800e85c:	685b      	ldreq	r3, [r3, #4]
 800e85e:	6063      	str	r3, [r4, #4]
 800e860:	bf04      	itt	eq
 800e862:	1852      	addeq	r2, r2, r1
 800e864:	6022      	streq	r2, [r4, #0]
 800e866:	602c      	str	r4, [r5, #0]
 800e868:	e7ec      	b.n	800e844 <_free_r+0x28>
 800e86a:	461a      	mov	r2, r3
 800e86c:	685b      	ldr	r3, [r3, #4]
 800e86e:	b10b      	cbz	r3, 800e874 <_free_r+0x58>
 800e870:	42a3      	cmp	r3, r4
 800e872:	d9fa      	bls.n	800e86a <_free_r+0x4e>
 800e874:	6811      	ldr	r1, [r2, #0]
 800e876:	1855      	adds	r5, r2, r1
 800e878:	42a5      	cmp	r5, r4
 800e87a:	d10b      	bne.n	800e894 <_free_r+0x78>
 800e87c:	6824      	ldr	r4, [r4, #0]
 800e87e:	4421      	add	r1, r4
 800e880:	1854      	adds	r4, r2, r1
 800e882:	42a3      	cmp	r3, r4
 800e884:	6011      	str	r1, [r2, #0]
 800e886:	d1dd      	bne.n	800e844 <_free_r+0x28>
 800e888:	681c      	ldr	r4, [r3, #0]
 800e88a:	685b      	ldr	r3, [r3, #4]
 800e88c:	6053      	str	r3, [r2, #4]
 800e88e:	4421      	add	r1, r4
 800e890:	6011      	str	r1, [r2, #0]
 800e892:	e7d7      	b.n	800e844 <_free_r+0x28>
 800e894:	d902      	bls.n	800e89c <_free_r+0x80>
 800e896:	230c      	movs	r3, #12
 800e898:	6003      	str	r3, [r0, #0]
 800e89a:	e7d3      	b.n	800e844 <_free_r+0x28>
 800e89c:	6825      	ldr	r5, [r4, #0]
 800e89e:	1961      	adds	r1, r4, r5
 800e8a0:	428b      	cmp	r3, r1
 800e8a2:	bf04      	itt	eq
 800e8a4:	6819      	ldreq	r1, [r3, #0]
 800e8a6:	685b      	ldreq	r3, [r3, #4]
 800e8a8:	6063      	str	r3, [r4, #4]
 800e8aa:	bf04      	itt	eq
 800e8ac:	1949      	addeq	r1, r1, r5
 800e8ae:	6021      	streq	r1, [r4, #0]
 800e8b0:	6054      	str	r4, [r2, #4]
 800e8b2:	e7c7      	b.n	800e844 <_free_r+0x28>
 800e8b4:	b003      	add	sp, #12
 800e8b6:	bd30      	pop	{r4, r5, pc}
 800e8b8:	2000028c 	.word	0x2000028c

0800e8bc <_malloc_r>:
 800e8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8be:	1ccd      	adds	r5, r1, #3
 800e8c0:	f025 0503 	bic.w	r5, r5, #3
 800e8c4:	3508      	adds	r5, #8
 800e8c6:	2d0c      	cmp	r5, #12
 800e8c8:	bf38      	it	cc
 800e8ca:	250c      	movcc	r5, #12
 800e8cc:	2d00      	cmp	r5, #0
 800e8ce:	4606      	mov	r6, r0
 800e8d0:	db01      	blt.n	800e8d6 <_malloc_r+0x1a>
 800e8d2:	42a9      	cmp	r1, r5
 800e8d4:	d903      	bls.n	800e8de <_malloc_r+0x22>
 800e8d6:	230c      	movs	r3, #12
 800e8d8:	6033      	str	r3, [r6, #0]
 800e8da:	2000      	movs	r0, #0
 800e8dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e8de:	f000 fdbd 	bl	800f45c <__malloc_lock>
 800e8e2:	4921      	ldr	r1, [pc, #132]	; (800e968 <_malloc_r+0xac>)
 800e8e4:	680a      	ldr	r2, [r1, #0]
 800e8e6:	4614      	mov	r4, r2
 800e8e8:	b99c      	cbnz	r4, 800e912 <_malloc_r+0x56>
 800e8ea:	4f20      	ldr	r7, [pc, #128]	; (800e96c <_malloc_r+0xb0>)
 800e8ec:	683b      	ldr	r3, [r7, #0]
 800e8ee:	b923      	cbnz	r3, 800e8fa <_malloc_r+0x3e>
 800e8f0:	4621      	mov	r1, r4
 800e8f2:	4630      	mov	r0, r6
 800e8f4:	f000 fafc 	bl	800eef0 <_sbrk_r>
 800e8f8:	6038      	str	r0, [r7, #0]
 800e8fa:	4629      	mov	r1, r5
 800e8fc:	4630      	mov	r0, r6
 800e8fe:	f000 faf7 	bl	800eef0 <_sbrk_r>
 800e902:	1c43      	adds	r3, r0, #1
 800e904:	d123      	bne.n	800e94e <_malloc_r+0x92>
 800e906:	230c      	movs	r3, #12
 800e908:	6033      	str	r3, [r6, #0]
 800e90a:	4630      	mov	r0, r6
 800e90c:	f000 fdac 	bl	800f468 <__malloc_unlock>
 800e910:	e7e3      	b.n	800e8da <_malloc_r+0x1e>
 800e912:	6823      	ldr	r3, [r4, #0]
 800e914:	1b5b      	subs	r3, r3, r5
 800e916:	d417      	bmi.n	800e948 <_malloc_r+0x8c>
 800e918:	2b0b      	cmp	r3, #11
 800e91a:	d903      	bls.n	800e924 <_malloc_r+0x68>
 800e91c:	6023      	str	r3, [r4, #0]
 800e91e:	441c      	add	r4, r3
 800e920:	6025      	str	r5, [r4, #0]
 800e922:	e004      	b.n	800e92e <_malloc_r+0x72>
 800e924:	6863      	ldr	r3, [r4, #4]
 800e926:	42a2      	cmp	r2, r4
 800e928:	bf0c      	ite	eq
 800e92a:	600b      	streq	r3, [r1, #0]
 800e92c:	6053      	strne	r3, [r2, #4]
 800e92e:	4630      	mov	r0, r6
 800e930:	f000 fd9a 	bl	800f468 <__malloc_unlock>
 800e934:	f104 000b 	add.w	r0, r4, #11
 800e938:	1d23      	adds	r3, r4, #4
 800e93a:	f020 0007 	bic.w	r0, r0, #7
 800e93e:	1ac2      	subs	r2, r0, r3
 800e940:	d0cc      	beq.n	800e8dc <_malloc_r+0x20>
 800e942:	1a1b      	subs	r3, r3, r0
 800e944:	50a3      	str	r3, [r4, r2]
 800e946:	e7c9      	b.n	800e8dc <_malloc_r+0x20>
 800e948:	4622      	mov	r2, r4
 800e94a:	6864      	ldr	r4, [r4, #4]
 800e94c:	e7cc      	b.n	800e8e8 <_malloc_r+0x2c>
 800e94e:	1cc4      	adds	r4, r0, #3
 800e950:	f024 0403 	bic.w	r4, r4, #3
 800e954:	42a0      	cmp	r0, r4
 800e956:	d0e3      	beq.n	800e920 <_malloc_r+0x64>
 800e958:	1a21      	subs	r1, r4, r0
 800e95a:	4630      	mov	r0, r6
 800e95c:	f000 fac8 	bl	800eef0 <_sbrk_r>
 800e960:	3001      	adds	r0, #1
 800e962:	d1dd      	bne.n	800e920 <_malloc_r+0x64>
 800e964:	e7cf      	b.n	800e906 <_malloc_r+0x4a>
 800e966:	bf00      	nop
 800e968:	2000028c 	.word	0x2000028c
 800e96c:	20000290 	.word	0x20000290

0800e970 <__ssputs_r>:
 800e970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e974:	688e      	ldr	r6, [r1, #8]
 800e976:	429e      	cmp	r6, r3
 800e978:	4682      	mov	sl, r0
 800e97a:	460c      	mov	r4, r1
 800e97c:	4690      	mov	r8, r2
 800e97e:	461f      	mov	r7, r3
 800e980:	d838      	bhi.n	800e9f4 <__ssputs_r+0x84>
 800e982:	898a      	ldrh	r2, [r1, #12]
 800e984:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e988:	d032      	beq.n	800e9f0 <__ssputs_r+0x80>
 800e98a:	6825      	ldr	r5, [r4, #0]
 800e98c:	6909      	ldr	r1, [r1, #16]
 800e98e:	eba5 0901 	sub.w	r9, r5, r1
 800e992:	6965      	ldr	r5, [r4, #20]
 800e994:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e998:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e99c:	3301      	adds	r3, #1
 800e99e:	444b      	add	r3, r9
 800e9a0:	106d      	asrs	r5, r5, #1
 800e9a2:	429d      	cmp	r5, r3
 800e9a4:	bf38      	it	cc
 800e9a6:	461d      	movcc	r5, r3
 800e9a8:	0553      	lsls	r3, r2, #21
 800e9aa:	d531      	bpl.n	800ea10 <__ssputs_r+0xa0>
 800e9ac:	4629      	mov	r1, r5
 800e9ae:	f7ff ff85 	bl	800e8bc <_malloc_r>
 800e9b2:	4606      	mov	r6, r0
 800e9b4:	b950      	cbnz	r0, 800e9cc <__ssputs_r+0x5c>
 800e9b6:	230c      	movs	r3, #12
 800e9b8:	f8ca 3000 	str.w	r3, [sl]
 800e9bc:	89a3      	ldrh	r3, [r4, #12]
 800e9be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e9c2:	81a3      	strh	r3, [r4, #12]
 800e9c4:	f04f 30ff 	mov.w	r0, #4294967295
 800e9c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9cc:	6921      	ldr	r1, [r4, #16]
 800e9ce:	464a      	mov	r2, r9
 800e9d0:	f7fc fafc 	bl	800afcc <memcpy>
 800e9d4:	89a3      	ldrh	r3, [r4, #12]
 800e9d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e9da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e9de:	81a3      	strh	r3, [r4, #12]
 800e9e0:	6126      	str	r6, [r4, #16]
 800e9e2:	6165      	str	r5, [r4, #20]
 800e9e4:	444e      	add	r6, r9
 800e9e6:	eba5 0509 	sub.w	r5, r5, r9
 800e9ea:	6026      	str	r6, [r4, #0]
 800e9ec:	60a5      	str	r5, [r4, #8]
 800e9ee:	463e      	mov	r6, r7
 800e9f0:	42be      	cmp	r6, r7
 800e9f2:	d900      	bls.n	800e9f6 <__ssputs_r+0x86>
 800e9f4:	463e      	mov	r6, r7
 800e9f6:	4632      	mov	r2, r6
 800e9f8:	6820      	ldr	r0, [r4, #0]
 800e9fa:	4641      	mov	r1, r8
 800e9fc:	f000 fd14 	bl	800f428 <memmove>
 800ea00:	68a3      	ldr	r3, [r4, #8]
 800ea02:	6822      	ldr	r2, [r4, #0]
 800ea04:	1b9b      	subs	r3, r3, r6
 800ea06:	4432      	add	r2, r6
 800ea08:	60a3      	str	r3, [r4, #8]
 800ea0a:	6022      	str	r2, [r4, #0]
 800ea0c:	2000      	movs	r0, #0
 800ea0e:	e7db      	b.n	800e9c8 <__ssputs_r+0x58>
 800ea10:	462a      	mov	r2, r5
 800ea12:	f000 fd2f 	bl	800f474 <_realloc_r>
 800ea16:	4606      	mov	r6, r0
 800ea18:	2800      	cmp	r0, #0
 800ea1a:	d1e1      	bne.n	800e9e0 <__ssputs_r+0x70>
 800ea1c:	6921      	ldr	r1, [r4, #16]
 800ea1e:	4650      	mov	r0, sl
 800ea20:	f7ff fefc 	bl	800e81c <_free_r>
 800ea24:	e7c7      	b.n	800e9b6 <__ssputs_r+0x46>
	...

0800ea28 <_svfiprintf_r>:
 800ea28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea2c:	4698      	mov	r8, r3
 800ea2e:	898b      	ldrh	r3, [r1, #12]
 800ea30:	061b      	lsls	r3, r3, #24
 800ea32:	b09d      	sub	sp, #116	; 0x74
 800ea34:	4607      	mov	r7, r0
 800ea36:	460d      	mov	r5, r1
 800ea38:	4614      	mov	r4, r2
 800ea3a:	d50e      	bpl.n	800ea5a <_svfiprintf_r+0x32>
 800ea3c:	690b      	ldr	r3, [r1, #16]
 800ea3e:	b963      	cbnz	r3, 800ea5a <_svfiprintf_r+0x32>
 800ea40:	2140      	movs	r1, #64	; 0x40
 800ea42:	f7ff ff3b 	bl	800e8bc <_malloc_r>
 800ea46:	6028      	str	r0, [r5, #0]
 800ea48:	6128      	str	r0, [r5, #16]
 800ea4a:	b920      	cbnz	r0, 800ea56 <_svfiprintf_r+0x2e>
 800ea4c:	230c      	movs	r3, #12
 800ea4e:	603b      	str	r3, [r7, #0]
 800ea50:	f04f 30ff 	mov.w	r0, #4294967295
 800ea54:	e0d1      	b.n	800ebfa <_svfiprintf_r+0x1d2>
 800ea56:	2340      	movs	r3, #64	; 0x40
 800ea58:	616b      	str	r3, [r5, #20]
 800ea5a:	2300      	movs	r3, #0
 800ea5c:	9309      	str	r3, [sp, #36]	; 0x24
 800ea5e:	2320      	movs	r3, #32
 800ea60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ea64:	f8cd 800c 	str.w	r8, [sp, #12]
 800ea68:	2330      	movs	r3, #48	; 0x30
 800ea6a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ec14 <_svfiprintf_r+0x1ec>
 800ea6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ea72:	f04f 0901 	mov.w	r9, #1
 800ea76:	4623      	mov	r3, r4
 800ea78:	469a      	mov	sl, r3
 800ea7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ea7e:	b10a      	cbz	r2, 800ea84 <_svfiprintf_r+0x5c>
 800ea80:	2a25      	cmp	r2, #37	; 0x25
 800ea82:	d1f9      	bne.n	800ea78 <_svfiprintf_r+0x50>
 800ea84:	ebba 0b04 	subs.w	fp, sl, r4
 800ea88:	d00b      	beq.n	800eaa2 <_svfiprintf_r+0x7a>
 800ea8a:	465b      	mov	r3, fp
 800ea8c:	4622      	mov	r2, r4
 800ea8e:	4629      	mov	r1, r5
 800ea90:	4638      	mov	r0, r7
 800ea92:	f7ff ff6d 	bl	800e970 <__ssputs_r>
 800ea96:	3001      	adds	r0, #1
 800ea98:	f000 80aa 	beq.w	800ebf0 <_svfiprintf_r+0x1c8>
 800ea9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ea9e:	445a      	add	r2, fp
 800eaa0:	9209      	str	r2, [sp, #36]	; 0x24
 800eaa2:	f89a 3000 	ldrb.w	r3, [sl]
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	f000 80a2 	beq.w	800ebf0 <_svfiprintf_r+0x1c8>
 800eaac:	2300      	movs	r3, #0
 800eaae:	f04f 32ff 	mov.w	r2, #4294967295
 800eab2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eab6:	f10a 0a01 	add.w	sl, sl, #1
 800eaba:	9304      	str	r3, [sp, #16]
 800eabc:	9307      	str	r3, [sp, #28]
 800eabe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eac2:	931a      	str	r3, [sp, #104]	; 0x68
 800eac4:	4654      	mov	r4, sl
 800eac6:	2205      	movs	r2, #5
 800eac8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eacc:	4851      	ldr	r0, [pc, #324]	; (800ec14 <_svfiprintf_r+0x1ec>)
 800eace:	f7f1 fb8f 	bl	80001f0 <memchr>
 800ead2:	9a04      	ldr	r2, [sp, #16]
 800ead4:	b9d8      	cbnz	r0, 800eb0e <_svfiprintf_r+0xe6>
 800ead6:	06d0      	lsls	r0, r2, #27
 800ead8:	bf44      	itt	mi
 800eada:	2320      	movmi	r3, #32
 800eadc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eae0:	0711      	lsls	r1, r2, #28
 800eae2:	bf44      	itt	mi
 800eae4:	232b      	movmi	r3, #43	; 0x2b
 800eae6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eaea:	f89a 3000 	ldrb.w	r3, [sl]
 800eaee:	2b2a      	cmp	r3, #42	; 0x2a
 800eaf0:	d015      	beq.n	800eb1e <_svfiprintf_r+0xf6>
 800eaf2:	9a07      	ldr	r2, [sp, #28]
 800eaf4:	4654      	mov	r4, sl
 800eaf6:	2000      	movs	r0, #0
 800eaf8:	f04f 0c0a 	mov.w	ip, #10
 800eafc:	4621      	mov	r1, r4
 800eafe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eb02:	3b30      	subs	r3, #48	; 0x30
 800eb04:	2b09      	cmp	r3, #9
 800eb06:	d94e      	bls.n	800eba6 <_svfiprintf_r+0x17e>
 800eb08:	b1b0      	cbz	r0, 800eb38 <_svfiprintf_r+0x110>
 800eb0a:	9207      	str	r2, [sp, #28]
 800eb0c:	e014      	b.n	800eb38 <_svfiprintf_r+0x110>
 800eb0e:	eba0 0308 	sub.w	r3, r0, r8
 800eb12:	fa09 f303 	lsl.w	r3, r9, r3
 800eb16:	4313      	orrs	r3, r2
 800eb18:	9304      	str	r3, [sp, #16]
 800eb1a:	46a2      	mov	sl, r4
 800eb1c:	e7d2      	b.n	800eac4 <_svfiprintf_r+0x9c>
 800eb1e:	9b03      	ldr	r3, [sp, #12]
 800eb20:	1d19      	adds	r1, r3, #4
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	9103      	str	r1, [sp, #12]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	bfbb      	ittet	lt
 800eb2a:	425b      	neglt	r3, r3
 800eb2c:	f042 0202 	orrlt.w	r2, r2, #2
 800eb30:	9307      	strge	r3, [sp, #28]
 800eb32:	9307      	strlt	r3, [sp, #28]
 800eb34:	bfb8      	it	lt
 800eb36:	9204      	strlt	r2, [sp, #16]
 800eb38:	7823      	ldrb	r3, [r4, #0]
 800eb3a:	2b2e      	cmp	r3, #46	; 0x2e
 800eb3c:	d10c      	bne.n	800eb58 <_svfiprintf_r+0x130>
 800eb3e:	7863      	ldrb	r3, [r4, #1]
 800eb40:	2b2a      	cmp	r3, #42	; 0x2a
 800eb42:	d135      	bne.n	800ebb0 <_svfiprintf_r+0x188>
 800eb44:	9b03      	ldr	r3, [sp, #12]
 800eb46:	1d1a      	adds	r2, r3, #4
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	9203      	str	r2, [sp, #12]
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	bfb8      	it	lt
 800eb50:	f04f 33ff 	movlt.w	r3, #4294967295
 800eb54:	3402      	adds	r4, #2
 800eb56:	9305      	str	r3, [sp, #20]
 800eb58:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ec24 <_svfiprintf_r+0x1fc>
 800eb5c:	7821      	ldrb	r1, [r4, #0]
 800eb5e:	2203      	movs	r2, #3
 800eb60:	4650      	mov	r0, sl
 800eb62:	f7f1 fb45 	bl	80001f0 <memchr>
 800eb66:	b140      	cbz	r0, 800eb7a <_svfiprintf_r+0x152>
 800eb68:	2340      	movs	r3, #64	; 0x40
 800eb6a:	eba0 000a 	sub.w	r0, r0, sl
 800eb6e:	fa03 f000 	lsl.w	r0, r3, r0
 800eb72:	9b04      	ldr	r3, [sp, #16]
 800eb74:	4303      	orrs	r3, r0
 800eb76:	3401      	adds	r4, #1
 800eb78:	9304      	str	r3, [sp, #16]
 800eb7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb7e:	4826      	ldr	r0, [pc, #152]	; (800ec18 <_svfiprintf_r+0x1f0>)
 800eb80:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eb84:	2206      	movs	r2, #6
 800eb86:	f7f1 fb33 	bl	80001f0 <memchr>
 800eb8a:	2800      	cmp	r0, #0
 800eb8c:	d038      	beq.n	800ec00 <_svfiprintf_r+0x1d8>
 800eb8e:	4b23      	ldr	r3, [pc, #140]	; (800ec1c <_svfiprintf_r+0x1f4>)
 800eb90:	bb1b      	cbnz	r3, 800ebda <_svfiprintf_r+0x1b2>
 800eb92:	9b03      	ldr	r3, [sp, #12]
 800eb94:	3307      	adds	r3, #7
 800eb96:	f023 0307 	bic.w	r3, r3, #7
 800eb9a:	3308      	adds	r3, #8
 800eb9c:	9303      	str	r3, [sp, #12]
 800eb9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eba0:	4433      	add	r3, r6
 800eba2:	9309      	str	r3, [sp, #36]	; 0x24
 800eba4:	e767      	b.n	800ea76 <_svfiprintf_r+0x4e>
 800eba6:	fb0c 3202 	mla	r2, ip, r2, r3
 800ebaa:	460c      	mov	r4, r1
 800ebac:	2001      	movs	r0, #1
 800ebae:	e7a5      	b.n	800eafc <_svfiprintf_r+0xd4>
 800ebb0:	2300      	movs	r3, #0
 800ebb2:	3401      	adds	r4, #1
 800ebb4:	9305      	str	r3, [sp, #20]
 800ebb6:	4619      	mov	r1, r3
 800ebb8:	f04f 0c0a 	mov.w	ip, #10
 800ebbc:	4620      	mov	r0, r4
 800ebbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ebc2:	3a30      	subs	r2, #48	; 0x30
 800ebc4:	2a09      	cmp	r2, #9
 800ebc6:	d903      	bls.n	800ebd0 <_svfiprintf_r+0x1a8>
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d0c5      	beq.n	800eb58 <_svfiprintf_r+0x130>
 800ebcc:	9105      	str	r1, [sp, #20]
 800ebce:	e7c3      	b.n	800eb58 <_svfiprintf_r+0x130>
 800ebd0:	fb0c 2101 	mla	r1, ip, r1, r2
 800ebd4:	4604      	mov	r4, r0
 800ebd6:	2301      	movs	r3, #1
 800ebd8:	e7f0      	b.n	800ebbc <_svfiprintf_r+0x194>
 800ebda:	ab03      	add	r3, sp, #12
 800ebdc:	9300      	str	r3, [sp, #0]
 800ebde:	462a      	mov	r2, r5
 800ebe0:	4b0f      	ldr	r3, [pc, #60]	; (800ec20 <_svfiprintf_r+0x1f8>)
 800ebe2:	a904      	add	r1, sp, #16
 800ebe4:	4638      	mov	r0, r7
 800ebe6:	f7fc faa7 	bl	800b138 <_printf_float>
 800ebea:	1c42      	adds	r2, r0, #1
 800ebec:	4606      	mov	r6, r0
 800ebee:	d1d6      	bne.n	800eb9e <_svfiprintf_r+0x176>
 800ebf0:	89ab      	ldrh	r3, [r5, #12]
 800ebf2:	065b      	lsls	r3, r3, #25
 800ebf4:	f53f af2c 	bmi.w	800ea50 <_svfiprintf_r+0x28>
 800ebf8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ebfa:	b01d      	add	sp, #116	; 0x74
 800ebfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec00:	ab03      	add	r3, sp, #12
 800ec02:	9300      	str	r3, [sp, #0]
 800ec04:	462a      	mov	r2, r5
 800ec06:	4b06      	ldr	r3, [pc, #24]	; (800ec20 <_svfiprintf_r+0x1f8>)
 800ec08:	a904      	add	r1, sp, #16
 800ec0a:	4638      	mov	r0, r7
 800ec0c:	f7fc fd38 	bl	800b680 <_printf_i>
 800ec10:	e7eb      	b.n	800ebea <_svfiprintf_r+0x1c2>
 800ec12:	bf00      	nop
 800ec14:	080101dc 	.word	0x080101dc
 800ec18:	080101e6 	.word	0x080101e6
 800ec1c:	0800b139 	.word	0x0800b139
 800ec20:	0800e971 	.word	0x0800e971
 800ec24:	080101e2 	.word	0x080101e2

0800ec28 <__sfputc_r>:
 800ec28:	6893      	ldr	r3, [r2, #8]
 800ec2a:	3b01      	subs	r3, #1
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	b410      	push	{r4}
 800ec30:	6093      	str	r3, [r2, #8]
 800ec32:	da08      	bge.n	800ec46 <__sfputc_r+0x1e>
 800ec34:	6994      	ldr	r4, [r2, #24]
 800ec36:	42a3      	cmp	r3, r4
 800ec38:	db01      	blt.n	800ec3e <__sfputc_r+0x16>
 800ec3a:	290a      	cmp	r1, #10
 800ec3c:	d103      	bne.n	800ec46 <__sfputc_r+0x1e>
 800ec3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ec42:	f000 b9c1 	b.w	800efc8 <__swbuf_r>
 800ec46:	6813      	ldr	r3, [r2, #0]
 800ec48:	1c58      	adds	r0, r3, #1
 800ec4a:	6010      	str	r0, [r2, #0]
 800ec4c:	7019      	strb	r1, [r3, #0]
 800ec4e:	4608      	mov	r0, r1
 800ec50:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ec54:	4770      	bx	lr

0800ec56 <__sfputs_r>:
 800ec56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec58:	4606      	mov	r6, r0
 800ec5a:	460f      	mov	r7, r1
 800ec5c:	4614      	mov	r4, r2
 800ec5e:	18d5      	adds	r5, r2, r3
 800ec60:	42ac      	cmp	r4, r5
 800ec62:	d101      	bne.n	800ec68 <__sfputs_r+0x12>
 800ec64:	2000      	movs	r0, #0
 800ec66:	e007      	b.n	800ec78 <__sfputs_r+0x22>
 800ec68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec6c:	463a      	mov	r2, r7
 800ec6e:	4630      	mov	r0, r6
 800ec70:	f7ff ffda 	bl	800ec28 <__sfputc_r>
 800ec74:	1c43      	adds	r3, r0, #1
 800ec76:	d1f3      	bne.n	800ec60 <__sfputs_r+0xa>
 800ec78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ec7c <_vfiprintf_r>:
 800ec7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec80:	460d      	mov	r5, r1
 800ec82:	b09d      	sub	sp, #116	; 0x74
 800ec84:	4614      	mov	r4, r2
 800ec86:	4698      	mov	r8, r3
 800ec88:	4606      	mov	r6, r0
 800ec8a:	b118      	cbz	r0, 800ec94 <_vfiprintf_r+0x18>
 800ec8c:	6983      	ldr	r3, [r0, #24]
 800ec8e:	b90b      	cbnz	r3, 800ec94 <_vfiprintf_r+0x18>
 800ec90:	f7fe fcba 	bl	800d608 <__sinit>
 800ec94:	4b89      	ldr	r3, [pc, #548]	; (800eebc <_vfiprintf_r+0x240>)
 800ec96:	429d      	cmp	r5, r3
 800ec98:	d11b      	bne.n	800ecd2 <_vfiprintf_r+0x56>
 800ec9a:	6875      	ldr	r5, [r6, #4]
 800ec9c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ec9e:	07d9      	lsls	r1, r3, #31
 800eca0:	d405      	bmi.n	800ecae <_vfiprintf_r+0x32>
 800eca2:	89ab      	ldrh	r3, [r5, #12]
 800eca4:	059a      	lsls	r2, r3, #22
 800eca6:	d402      	bmi.n	800ecae <_vfiprintf_r+0x32>
 800eca8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ecaa:	f7ff f8d0 	bl	800de4e <__retarget_lock_acquire_recursive>
 800ecae:	89ab      	ldrh	r3, [r5, #12]
 800ecb0:	071b      	lsls	r3, r3, #28
 800ecb2:	d501      	bpl.n	800ecb8 <_vfiprintf_r+0x3c>
 800ecb4:	692b      	ldr	r3, [r5, #16]
 800ecb6:	b9eb      	cbnz	r3, 800ecf4 <_vfiprintf_r+0x78>
 800ecb8:	4629      	mov	r1, r5
 800ecba:	4630      	mov	r0, r6
 800ecbc:	f000 f9f6 	bl	800f0ac <__swsetup_r>
 800ecc0:	b1c0      	cbz	r0, 800ecf4 <_vfiprintf_r+0x78>
 800ecc2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ecc4:	07dc      	lsls	r4, r3, #31
 800ecc6:	d50e      	bpl.n	800ece6 <_vfiprintf_r+0x6a>
 800ecc8:	f04f 30ff 	mov.w	r0, #4294967295
 800eccc:	b01d      	add	sp, #116	; 0x74
 800ecce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecd2:	4b7b      	ldr	r3, [pc, #492]	; (800eec0 <_vfiprintf_r+0x244>)
 800ecd4:	429d      	cmp	r5, r3
 800ecd6:	d101      	bne.n	800ecdc <_vfiprintf_r+0x60>
 800ecd8:	68b5      	ldr	r5, [r6, #8]
 800ecda:	e7df      	b.n	800ec9c <_vfiprintf_r+0x20>
 800ecdc:	4b79      	ldr	r3, [pc, #484]	; (800eec4 <_vfiprintf_r+0x248>)
 800ecde:	429d      	cmp	r5, r3
 800ece0:	bf08      	it	eq
 800ece2:	68f5      	ldreq	r5, [r6, #12]
 800ece4:	e7da      	b.n	800ec9c <_vfiprintf_r+0x20>
 800ece6:	89ab      	ldrh	r3, [r5, #12]
 800ece8:	0598      	lsls	r0, r3, #22
 800ecea:	d4ed      	bmi.n	800ecc8 <_vfiprintf_r+0x4c>
 800ecec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ecee:	f7ff f8af 	bl	800de50 <__retarget_lock_release_recursive>
 800ecf2:	e7e9      	b.n	800ecc8 <_vfiprintf_r+0x4c>
 800ecf4:	2300      	movs	r3, #0
 800ecf6:	9309      	str	r3, [sp, #36]	; 0x24
 800ecf8:	2320      	movs	r3, #32
 800ecfa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ecfe:	f8cd 800c 	str.w	r8, [sp, #12]
 800ed02:	2330      	movs	r3, #48	; 0x30
 800ed04:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800eec8 <_vfiprintf_r+0x24c>
 800ed08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ed0c:	f04f 0901 	mov.w	r9, #1
 800ed10:	4623      	mov	r3, r4
 800ed12:	469a      	mov	sl, r3
 800ed14:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ed18:	b10a      	cbz	r2, 800ed1e <_vfiprintf_r+0xa2>
 800ed1a:	2a25      	cmp	r2, #37	; 0x25
 800ed1c:	d1f9      	bne.n	800ed12 <_vfiprintf_r+0x96>
 800ed1e:	ebba 0b04 	subs.w	fp, sl, r4
 800ed22:	d00b      	beq.n	800ed3c <_vfiprintf_r+0xc0>
 800ed24:	465b      	mov	r3, fp
 800ed26:	4622      	mov	r2, r4
 800ed28:	4629      	mov	r1, r5
 800ed2a:	4630      	mov	r0, r6
 800ed2c:	f7ff ff93 	bl	800ec56 <__sfputs_r>
 800ed30:	3001      	adds	r0, #1
 800ed32:	f000 80aa 	beq.w	800ee8a <_vfiprintf_r+0x20e>
 800ed36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ed38:	445a      	add	r2, fp
 800ed3a:	9209      	str	r2, [sp, #36]	; 0x24
 800ed3c:	f89a 3000 	ldrb.w	r3, [sl]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	f000 80a2 	beq.w	800ee8a <_vfiprintf_r+0x20e>
 800ed46:	2300      	movs	r3, #0
 800ed48:	f04f 32ff 	mov.w	r2, #4294967295
 800ed4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ed50:	f10a 0a01 	add.w	sl, sl, #1
 800ed54:	9304      	str	r3, [sp, #16]
 800ed56:	9307      	str	r3, [sp, #28]
 800ed58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ed5c:	931a      	str	r3, [sp, #104]	; 0x68
 800ed5e:	4654      	mov	r4, sl
 800ed60:	2205      	movs	r2, #5
 800ed62:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed66:	4858      	ldr	r0, [pc, #352]	; (800eec8 <_vfiprintf_r+0x24c>)
 800ed68:	f7f1 fa42 	bl	80001f0 <memchr>
 800ed6c:	9a04      	ldr	r2, [sp, #16]
 800ed6e:	b9d8      	cbnz	r0, 800eda8 <_vfiprintf_r+0x12c>
 800ed70:	06d1      	lsls	r1, r2, #27
 800ed72:	bf44      	itt	mi
 800ed74:	2320      	movmi	r3, #32
 800ed76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ed7a:	0713      	lsls	r3, r2, #28
 800ed7c:	bf44      	itt	mi
 800ed7e:	232b      	movmi	r3, #43	; 0x2b
 800ed80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ed84:	f89a 3000 	ldrb.w	r3, [sl]
 800ed88:	2b2a      	cmp	r3, #42	; 0x2a
 800ed8a:	d015      	beq.n	800edb8 <_vfiprintf_r+0x13c>
 800ed8c:	9a07      	ldr	r2, [sp, #28]
 800ed8e:	4654      	mov	r4, sl
 800ed90:	2000      	movs	r0, #0
 800ed92:	f04f 0c0a 	mov.w	ip, #10
 800ed96:	4621      	mov	r1, r4
 800ed98:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ed9c:	3b30      	subs	r3, #48	; 0x30
 800ed9e:	2b09      	cmp	r3, #9
 800eda0:	d94e      	bls.n	800ee40 <_vfiprintf_r+0x1c4>
 800eda2:	b1b0      	cbz	r0, 800edd2 <_vfiprintf_r+0x156>
 800eda4:	9207      	str	r2, [sp, #28]
 800eda6:	e014      	b.n	800edd2 <_vfiprintf_r+0x156>
 800eda8:	eba0 0308 	sub.w	r3, r0, r8
 800edac:	fa09 f303 	lsl.w	r3, r9, r3
 800edb0:	4313      	orrs	r3, r2
 800edb2:	9304      	str	r3, [sp, #16]
 800edb4:	46a2      	mov	sl, r4
 800edb6:	e7d2      	b.n	800ed5e <_vfiprintf_r+0xe2>
 800edb8:	9b03      	ldr	r3, [sp, #12]
 800edba:	1d19      	adds	r1, r3, #4
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	9103      	str	r1, [sp, #12]
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	bfbb      	ittet	lt
 800edc4:	425b      	neglt	r3, r3
 800edc6:	f042 0202 	orrlt.w	r2, r2, #2
 800edca:	9307      	strge	r3, [sp, #28]
 800edcc:	9307      	strlt	r3, [sp, #28]
 800edce:	bfb8      	it	lt
 800edd0:	9204      	strlt	r2, [sp, #16]
 800edd2:	7823      	ldrb	r3, [r4, #0]
 800edd4:	2b2e      	cmp	r3, #46	; 0x2e
 800edd6:	d10c      	bne.n	800edf2 <_vfiprintf_r+0x176>
 800edd8:	7863      	ldrb	r3, [r4, #1]
 800edda:	2b2a      	cmp	r3, #42	; 0x2a
 800eddc:	d135      	bne.n	800ee4a <_vfiprintf_r+0x1ce>
 800edde:	9b03      	ldr	r3, [sp, #12]
 800ede0:	1d1a      	adds	r2, r3, #4
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	9203      	str	r2, [sp, #12]
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	bfb8      	it	lt
 800edea:	f04f 33ff 	movlt.w	r3, #4294967295
 800edee:	3402      	adds	r4, #2
 800edf0:	9305      	str	r3, [sp, #20]
 800edf2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800eed8 <_vfiprintf_r+0x25c>
 800edf6:	7821      	ldrb	r1, [r4, #0]
 800edf8:	2203      	movs	r2, #3
 800edfa:	4650      	mov	r0, sl
 800edfc:	f7f1 f9f8 	bl	80001f0 <memchr>
 800ee00:	b140      	cbz	r0, 800ee14 <_vfiprintf_r+0x198>
 800ee02:	2340      	movs	r3, #64	; 0x40
 800ee04:	eba0 000a 	sub.w	r0, r0, sl
 800ee08:	fa03 f000 	lsl.w	r0, r3, r0
 800ee0c:	9b04      	ldr	r3, [sp, #16]
 800ee0e:	4303      	orrs	r3, r0
 800ee10:	3401      	adds	r4, #1
 800ee12:	9304      	str	r3, [sp, #16]
 800ee14:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee18:	482c      	ldr	r0, [pc, #176]	; (800eecc <_vfiprintf_r+0x250>)
 800ee1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ee1e:	2206      	movs	r2, #6
 800ee20:	f7f1 f9e6 	bl	80001f0 <memchr>
 800ee24:	2800      	cmp	r0, #0
 800ee26:	d03f      	beq.n	800eea8 <_vfiprintf_r+0x22c>
 800ee28:	4b29      	ldr	r3, [pc, #164]	; (800eed0 <_vfiprintf_r+0x254>)
 800ee2a:	bb1b      	cbnz	r3, 800ee74 <_vfiprintf_r+0x1f8>
 800ee2c:	9b03      	ldr	r3, [sp, #12]
 800ee2e:	3307      	adds	r3, #7
 800ee30:	f023 0307 	bic.w	r3, r3, #7
 800ee34:	3308      	adds	r3, #8
 800ee36:	9303      	str	r3, [sp, #12]
 800ee38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee3a:	443b      	add	r3, r7
 800ee3c:	9309      	str	r3, [sp, #36]	; 0x24
 800ee3e:	e767      	b.n	800ed10 <_vfiprintf_r+0x94>
 800ee40:	fb0c 3202 	mla	r2, ip, r2, r3
 800ee44:	460c      	mov	r4, r1
 800ee46:	2001      	movs	r0, #1
 800ee48:	e7a5      	b.n	800ed96 <_vfiprintf_r+0x11a>
 800ee4a:	2300      	movs	r3, #0
 800ee4c:	3401      	adds	r4, #1
 800ee4e:	9305      	str	r3, [sp, #20]
 800ee50:	4619      	mov	r1, r3
 800ee52:	f04f 0c0a 	mov.w	ip, #10
 800ee56:	4620      	mov	r0, r4
 800ee58:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ee5c:	3a30      	subs	r2, #48	; 0x30
 800ee5e:	2a09      	cmp	r2, #9
 800ee60:	d903      	bls.n	800ee6a <_vfiprintf_r+0x1ee>
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d0c5      	beq.n	800edf2 <_vfiprintf_r+0x176>
 800ee66:	9105      	str	r1, [sp, #20]
 800ee68:	e7c3      	b.n	800edf2 <_vfiprintf_r+0x176>
 800ee6a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ee6e:	4604      	mov	r4, r0
 800ee70:	2301      	movs	r3, #1
 800ee72:	e7f0      	b.n	800ee56 <_vfiprintf_r+0x1da>
 800ee74:	ab03      	add	r3, sp, #12
 800ee76:	9300      	str	r3, [sp, #0]
 800ee78:	462a      	mov	r2, r5
 800ee7a:	4b16      	ldr	r3, [pc, #88]	; (800eed4 <_vfiprintf_r+0x258>)
 800ee7c:	a904      	add	r1, sp, #16
 800ee7e:	4630      	mov	r0, r6
 800ee80:	f7fc f95a 	bl	800b138 <_printf_float>
 800ee84:	4607      	mov	r7, r0
 800ee86:	1c78      	adds	r0, r7, #1
 800ee88:	d1d6      	bne.n	800ee38 <_vfiprintf_r+0x1bc>
 800ee8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ee8c:	07d9      	lsls	r1, r3, #31
 800ee8e:	d405      	bmi.n	800ee9c <_vfiprintf_r+0x220>
 800ee90:	89ab      	ldrh	r3, [r5, #12]
 800ee92:	059a      	lsls	r2, r3, #22
 800ee94:	d402      	bmi.n	800ee9c <_vfiprintf_r+0x220>
 800ee96:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ee98:	f7fe ffda 	bl	800de50 <__retarget_lock_release_recursive>
 800ee9c:	89ab      	ldrh	r3, [r5, #12]
 800ee9e:	065b      	lsls	r3, r3, #25
 800eea0:	f53f af12 	bmi.w	800ecc8 <_vfiprintf_r+0x4c>
 800eea4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eea6:	e711      	b.n	800eccc <_vfiprintf_r+0x50>
 800eea8:	ab03      	add	r3, sp, #12
 800eeaa:	9300      	str	r3, [sp, #0]
 800eeac:	462a      	mov	r2, r5
 800eeae:	4b09      	ldr	r3, [pc, #36]	; (800eed4 <_vfiprintf_r+0x258>)
 800eeb0:	a904      	add	r1, sp, #16
 800eeb2:	4630      	mov	r0, r6
 800eeb4:	f7fc fbe4 	bl	800b680 <_printf_i>
 800eeb8:	e7e4      	b.n	800ee84 <_vfiprintf_r+0x208>
 800eeba:	bf00      	nop
 800eebc:	0800ffbc 	.word	0x0800ffbc
 800eec0:	0800ffdc 	.word	0x0800ffdc
 800eec4:	0800ff9c 	.word	0x0800ff9c
 800eec8:	080101dc 	.word	0x080101dc
 800eecc:	080101e6 	.word	0x080101e6
 800eed0:	0800b139 	.word	0x0800b139
 800eed4:	0800ec57 	.word	0x0800ec57
 800eed8:	080101e2 	.word	0x080101e2
 800eedc:	00000000 	.word	0x00000000

0800eee0 <nan>:
 800eee0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800eee8 <nan+0x8>
 800eee4:	4770      	bx	lr
 800eee6:	bf00      	nop
 800eee8:	00000000 	.word	0x00000000
 800eeec:	7ff80000 	.word	0x7ff80000

0800eef0 <_sbrk_r>:
 800eef0:	b538      	push	{r3, r4, r5, lr}
 800eef2:	4d06      	ldr	r5, [pc, #24]	; (800ef0c <_sbrk_r+0x1c>)
 800eef4:	2300      	movs	r3, #0
 800eef6:	4604      	mov	r4, r0
 800eef8:	4608      	mov	r0, r1
 800eefa:	602b      	str	r3, [r5, #0]
 800eefc:	f7f6 fe4a 	bl	8005b94 <_sbrk>
 800ef00:	1c43      	adds	r3, r0, #1
 800ef02:	d102      	bne.n	800ef0a <_sbrk_r+0x1a>
 800ef04:	682b      	ldr	r3, [r5, #0]
 800ef06:	b103      	cbz	r3, 800ef0a <_sbrk_r+0x1a>
 800ef08:	6023      	str	r3, [r4, #0]
 800ef0a:	bd38      	pop	{r3, r4, r5, pc}
 800ef0c:	2000074c 	.word	0x2000074c

0800ef10 <nanf>:
 800ef10:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ef18 <nanf+0x8>
 800ef14:	4770      	bx	lr
 800ef16:	bf00      	nop
 800ef18:	7fc00000 	.word	0x7fc00000

0800ef1c <__sread>:
 800ef1c:	b510      	push	{r4, lr}
 800ef1e:	460c      	mov	r4, r1
 800ef20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef24:	f000 facc 	bl	800f4c0 <_read_r>
 800ef28:	2800      	cmp	r0, #0
 800ef2a:	bfab      	itete	ge
 800ef2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ef2e:	89a3      	ldrhlt	r3, [r4, #12]
 800ef30:	181b      	addge	r3, r3, r0
 800ef32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ef36:	bfac      	ite	ge
 800ef38:	6563      	strge	r3, [r4, #84]	; 0x54
 800ef3a:	81a3      	strhlt	r3, [r4, #12]
 800ef3c:	bd10      	pop	{r4, pc}

0800ef3e <__swrite>:
 800ef3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef42:	461f      	mov	r7, r3
 800ef44:	898b      	ldrh	r3, [r1, #12]
 800ef46:	05db      	lsls	r3, r3, #23
 800ef48:	4605      	mov	r5, r0
 800ef4a:	460c      	mov	r4, r1
 800ef4c:	4616      	mov	r6, r2
 800ef4e:	d505      	bpl.n	800ef5c <__swrite+0x1e>
 800ef50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef54:	2302      	movs	r3, #2
 800ef56:	2200      	movs	r2, #0
 800ef58:	f000 f9f0 	bl	800f33c <_lseek_r>
 800ef5c:	89a3      	ldrh	r3, [r4, #12]
 800ef5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ef62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ef66:	81a3      	strh	r3, [r4, #12]
 800ef68:	4632      	mov	r2, r6
 800ef6a:	463b      	mov	r3, r7
 800ef6c:	4628      	mov	r0, r5
 800ef6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ef72:	f000 b889 	b.w	800f088 <_write_r>

0800ef76 <__sseek>:
 800ef76:	b510      	push	{r4, lr}
 800ef78:	460c      	mov	r4, r1
 800ef7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef7e:	f000 f9dd 	bl	800f33c <_lseek_r>
 800ef82:	1c43      	adds	r3, r0, #1
 800ef84:	89a3      	ldrh	r3, [r4, #12]
 800ef86:	bf15      	itete	ne
 800ef88:	6560      	strne	r0, [r4, #84]	; 0x54
 800ef8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ef8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ef92:	81a3      	strheq	r3, [r4, #12]
 800ef94:	bf18      	it	ne
 800ef96:	81a3      	strhne	r3, [r4, #12]
 800ef98:	bd10      	pop	{r4, pc}

0800ef9a <__sclose>:
 800ef9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef9e:	f000 b8fb 	b.w	800f198 <_close_r>

0800efa2 <strncmp>:
 800efa2:	b510      	push	{r4, lr}
 800efa4:	b16a      	cbz	r2, 800efc2 <strncmp+0x20>
 800efa6:	3901      	subs	r1, #1
 800efa8:	1884      	adds	r4, r0, r2
 800efaa:	f810 3b01 	ldrb.w	r3, [r0], #1
 800efae:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800efb2:	4293      	cmp	r3, r2
 800efb4:	d103      	bne.n	800efbe <strncmp+0x1c>
 800efb6:	42a0      	cmp	r0, r4
 800efb8:	d001      	beq.n	800efbe <strncmp+0x1c>
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d1f5      	bne.n	800efaa <strncmp+0x8>
 800efbe:	1a98      	subs	r0, r3, r2
 800efc0:	bd10      	pop	{r4, pc}
 800efc2:	4610      	mov	r0, r2
 800efc4:	e7fc      	b.n	800efc0 <strncmp+0x1e>
	...

0800efc8 <__swbuf_r>:
 800efc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efca:	460e      	mov	r6, r1
 800efcc:	4614      	mov	r4, r2
 800efce:	4605      	mov	r5, r0
 800efd0:	b118      	cbz	r0, 800efda <__swbuf_r+0x12>
 800efd2:	6983      	ldr	r3, [r0, #24]
 800efd4:	b90b      	cbnz	r3, 800efda <__swbuf_r+0x12>
 800efd6:	f7fe fb17 	bl	800d608 <__sinit>
 800efda:	4b21      	ldr	r3, [pc, #132]	; (800f060 <__swbuf_r+0x98>)
 800efdc:	429c      	cmp	r4, r3
 800efde:	d12b      	bne.n	800f038 <__swbuf_r+0x70>
 800efe0:	686c      	ldr	r4, [r5, #4]
 800efe2:	69a3      	ldr	r3, [r4, #24]
 800efe4:	60a3      	str	r3, [r4, #8]
 800efe6:	89a3      	ldrh	r3, [r4, #12]
 800efe8:	071a      	lsls	r2, r3, #28
 800efea:	d52f      	bpl.n	800f04c <__swbuf_r+0x84>
 800efec:	6923      	ldr	r3, [r4, #16]
 800efee:	b36b      	cbz	r3, 800f04c <__swbuf_r+0x84>
 800eff0:	6923      	ldr	r3, [r4, #16]
 800eff2:	6820      	ldr	r0, [r4, #0]
 800eff4:	1ac0      	subs	r0, r0, r3
 800eff6:	6963      	ldr	r3, [r4, #20]
 800eff8:	b2f6      	uxtb	r6, r6
 800effa:	4283      	cmp	r3, r0
 800effc:	4637      	mov	r7, r6
 800effe:	dc04      	bgt.n	800f00a <__swbuf_r+0x42>
 800f000:	4621      	mov	r1, r4
 800f002:	4628      	mov	r0, r5
 800f004:	f000 f95e 	bl	800f2c4 <_fflush_r>
 800f008:	bb30      	cbnz	r0, 800f058 <__swbuf_r+0x90>
 800f00a:	68a3      	ldr	r3, [r4, #8]
 800f00c:	3b01      	subs	r3, #1
 800f00e:	60a3      	str	r3, [r4, #8]
 800f010:	6823      	ldr	r3, [r4, #0]
 800f012:	1c5a      	adds	r2, r3, #1
 800f014:	6022      	str	r2, [r4, #0]
 800f016:	701e      	strb	r6, [r3, #0]
 800f018:	6963      	ldr	r3, [r4, #20]
 800f01a:	3001      	adds	r0, #1
 800f01c:	4283      	cmp	r3, r0
 800f01e:	d004      	beq.n	800f02a <__swbuf_r+0x62>
 800f020:	89a3      	ldrh	r3, [r4, #12]
 800f022:	07db      	lsls	r3, r3, #31
 800f024:	d506      	bpl.n	800f034 <__swbuf_r+0x6c>
 800f026:	2e0a      	cmp	r6, #10
 800f028:	d104      	bne.n	800f034 <__swbuf_r+0x6c>
 800f02a:	4621      	mov	r1, r4
 800f02c:	4628      	mov	r0, r5
 800f02e:	f000 f949 	bl	800f2c4 <_fflush_r>
 800f032:	b988      	cbnz	r0, 800f058 <__swbuf_r+0x90>
 800f034:	4638      	mov	r0, r7
 800f036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f038:	4b0a      	ldr	r3, [pc, #40]	; (800f064 <__swbuf_r+0x9c>)
 800f03a:	429c      	cmp	r4, r3
 800f03c:	d101      	bne.n	800f042 <__swbuf_r+0x7a>
 800f03e:	68ac      	ldr	r4, [r5, #8]
 800f040:	e7cf      	b.n	800efe2 <__swbuf_r+0x1a>
 800f042:	4b09      	ldr	r3, [pc, #36]	; (800f068 <__swbuf_r+0xa0>)
 800f044:	429c      	cmp	r4, r3
 800f046:	bf08      	it	eq
 800f048:	68ec      	ldreq	r4, [r5, #12]
 800f04a:	e7ca      	b.n	800efe2 <__swbuf_r+0x1a>
 800f04c:	4621      	mov	r1, r4
 800f04e:	4628      	mov	r0, r5
 800f050:	f000 f82c 	bl	800f0ac <__swsetup_r>
 800f054:	2800      	cmp	r0, #0
 800f056:	d0cb      	beq.n	800eff0 <__swbuf_r+0x28>
 800f058:	f04f 37ff 	mov.w	r7, #4294967295
 800f05c:	e7ea      	b.n	800f034 <__swbuf_r+0x6c>
 800f05e:	bf00      	nop
 800f060:	0800ffbc 	.word	0x0800ffbc
 800f064:	0800ffdc 	.word	0x0800ffdc
 800f068:	0800ff9c 	.word	0x0800ff9c

0800f06c <__ascii_wctomb>:
 800f06c:	b149      	cbz	r1, 800f082 <__ascii_wctomb+0x16>
 800f06e:	2aff      	cmp	r2, #255	; 0xff
 800f070:	bf85      	ittet	hi
 800f072:	238a      	movhi	r3, #138	; 0x8a
 800f074:	6003      	strhi	r3, [r0, #0]
 800f076:	700a      	strbls	r2, [r1, #0]
 800f078:	f04f 30ff 	movhi.w	r0, #4294967295
 800f07c:	bf98      	it	ls
 800f07e:	2001      	movls	r0, #1
 800f080:	4770      	bx	lr
 800f082:	4608      	mov	r0, r1
 800f084:	4770      	bx	lr
	...

0800f088 <_write_r>:
 800f088:	b538      	push	{r3, r4, r5, lr}
 800f08a:	4d07      	ldr	r5, [pc, #28]	; (800f0a8 <_write_r+0x20>)
 800f08c:	4604      	mov	r4, r0
 800f08e:	4608      	mov	r0, r1
 800f090:	4611      	mov	r1, r2
 800f092:	2200      	movs	r2, #0
 800f094:	602a      	str	r2, [r5, #0]
 800f096:	461a      	mov	r2, r3
 800f098:	f7f6 fd2b 	bl	8005af2 <_write>
 800f09c:	1c43      	adds	r3, r0, #1
 800f09e:	d102      	bne.n	800f0a6 <_write_r+0x1e>
 800f0a0:	682b      	ldr	r3, [r5, #0]
 800f0a2:	b103      	cbz	r3, 800f0a6 <_write_r+0x1e>
 800f0a4:	6023      	str	r3, [r4, #0]
 800f0a6:	bd38      	pop	{r3, r4, r5, pc}
 800f0a8:	2000074c 	.word	0x2000074c

0800f0ac <__swsetup_r>:
 800f0ac:	4b32      	ldr	r3, [pc, #200]	; (800f178 <__swsetup_r+0xcc>)
 800f0ae:	b570      	push	{r4, r5, r6, lr}
 800f0b0:	681d      	ldr	r5, [r3, #0]
 800f0b2:	4606      	mov	r6, r0
 800f0b4:	460c      	mov	r4, r1
 800f0b6:	b125      	cbz	r5, 800f0c2 <__swsetup_r+0x16>
 800f0b8:	69ab      	ldr	r3, [r5, #24]
 800f0ba:	b913      	cbnz	r3, 800f0c2 <__swsetup_r+0x16>
 800f0bc:	4628      	mov	r0, r5
 800f0be:	f7fe faa3 	bl	800d608 <__sinit>
 800f0c2:	4b2e      	ldr	r3, [pc, #184]	; (800f17c <__swsetup_r+0xd0>)
 800f0c4:	429c      	cmp	r4, r3
 800f0c6:	d10f      	bne.n	800f0e8 <__swsetup_r+0x3c>
 800f0c8:	686c      	ldr	r4, [r5, #4]
 800f0ca:	89a3      	ldrh	r3, [r4, #12]
 800f0cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f0d0:	0719      	lsls	r1, r3, #28
 800f0d2:	d42c      	bmi.n	800f12e <__swsetup_r+0x82>
 800f0d4:	06dd      	lsls	r5, r3, #27
 800f0d6:	d411      	bmi.n	800f0fc <__swsetup_r+0x50>
 800f0d8:	2309      	movs	r3, #9
 800f0da:	6033      	str	r3, [r6, #0]
 800f0dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f0e0:	81a3      	strh	r3, [r4, #12]
 800f0e2:	f04f 30ff 	mov.w	r0, #4294967295
 800f0e6:	e03e      	b.n	800f166 <__swsetup_r+0xba>
 800f0e8:	4b25      	ldr	r3, [pc, #148]	; (800f180 <__swsetup_r+0xd4>)
 800f0ea:	429c      	cmp	r4, r3
 800f0ec:	d101      	bne.n	800f0f2 <__swsetup_r+0x46>
 800f0ee:	68ac      	ldr	r4, [r5, #8]
 800f0f0:	e7eb      	b.n	800f0ca <__swsetup_r+0x1e>
 800f0f2:	4b24      	ldr	r3, [pc, #144]	; (800f184 <__swsetup_r+0xd8>)
 800f0f4:	429c      	cmp	r4, r3
 800f0f6:	bf08      	it	eq
 800f0f8:	68ec      	ldreq	r4, [r5, #12]
 800f0fa:	e7e6      	b.n	800f0ca <__swsetup_r+0x1e>
 800f0fc:	0758      	lsls	r0, r3, #29
 800f0fe:	d512      	bpl.n	800f126 <__swsetup_r+0x7a>
 800f100:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f102:	b141      	cbz	r1, 800f116 <__swsetup_r+0x6a>
 800f104:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f108:	4299      	cmp	r1, r3
 800f10a:	d002      	beq.n	800f112 <__swsetup_r+0x66>
 800f10c:	4630      	mov	r0, r6
 800f10e:	f7ff fb85 	bl	800e81c <_free_r>
 800f112:	2300      	movs	r3, #0
 800f114:	6363      	str	r3, [r4, #52]	; 0x34
 800f116:	89a3      	ldrh	r3, [r4, #12]
 800f118:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f11c:	81a3      	strh	r3, [r4, #12]
 800f11e:	2300      	movs	r3, #0
 800f120:	6063      	str	r3, [r4, #4]
 800f122:	6923      	ldr	r3, [r4, #16]
 800f124:	6023      	str	r3, [r4, #0]
 800f126:	89a3      	ldrh	r3, [r4, #12]
 800f128:	f043 0308 	orr.w	r3, r3, #8
 800f12c:	81a3      	strh	r3, [r4, #12]
 800f12e:	6923      	ldr	r3, [r4, #16]
 800f130:	b94b      	cbnz	r3, 800f146 <__swsetup_r+0x9a>
 800f132:	89a3      	ldrh	r3, [r4, #12]
 800f134:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f138:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f13c:	d003      	beq.n	800f146 <__swsetup_r+0x9a>
 800f13e:	4621      	mov	r1, r4
 800f140:	4630      	mov	r0, r6
 800f142:	f000 f931 	bl	800f3a8 <__smakebuf_r>
 800f146:	89a0      	ldrh	r0, [r4, #12]
 800f148:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f14c:	f010 0301 	ands.w	r3, r0, #1
 800f150:	d00a      	beq.n	800f168 <__swsetup_r+0xbc>
 800f152:	2300      	movs	r3, #0
 800f154:	60a3      	str	r3, [r4, #8]
 800f156:	6963      	ldr	r3, [r4, #20]
 800f158:	425b      	negs	r3, r3
 800f15a:	61a3      	str	r3, [r4, #24]
 800f15c:	6923      	ldr	r3, [r4, #16]
 800f15e:	b943      	cbnz	r3, 800f172 <__swsetup_r+0xc6>
 800f160:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f164:	d1ba      	bne.n	800f0dc <__swsetup_r+0x30>
 800f166:	bd70      	pop	{r4, r5, r6, pc}
 800f168:	0781      	lsls	r1, r0, #30
 800f16a:	bf58      	it	pl
 800f16c:	6963      	ldrpl	r3, [r4, #20]
 800f16e:	60a3      	str	r3, [r4, #8]
 800f170:	e7f4      	b.n	800f15c <__swsetup_r+0xb0>
 800f172:	2000      	movs	r0, #0
 800f174:	e7f7      	b.n	800f166 <__swsetup_r+0xba>
 800f176:	bf00      	nop
 800f178:	20000074 	.word	0x20000074
 800f17c:	0800ffbc 	.word	0x0800ffbc
 800f180:	0800ffdc 	.word	0x0800ffdc
 800f184:	0800ff9c 	.word	0x0800ff9c

0800f188 <abort>:
 800f188:	b508      	push	{r3, lr}
 800f18a:	2006      	movs	r0, #6
 800f18c:	f000 f9d2 	bl	800f534 <raise>
 800f190:	2001      	movs	r0, #1
 800f192:	f7f6 fc87 	bl	8005aa4 <_exit>
	...

0800f198 <_close_r>:
 800f198:	b538      	push	{r3, r4, r5, lr}
 800f19a:	4d06      	ldr	r5, [pc, #24]	; (800f1b4 <_close_r+0x1c>)
 800f19c:	2300      	movs	r3, #0
 800f19e:	4604      	mov	r4, r0
 800f1a0:	4608      	mov	r0, r1
 800f1a2:	602b      	str	r3, [r5, #0]
 800f1a4:	f7f6 fcc1 	bl	8005b2a <_close>
 800f1a8:	1c43      	adds	r3, r0, #1
 800f1aa:	d102      	bne.n	800f1b2 <_close_r+0x1a>
 800f1ac:	682b      	ldr	r3, [r5, #0]
 800f1ae:	b103      	cbz	r3, 800f1b2 <_close_r+0x1a>
 800f1b0:	6023      	str	r3, [r4, #0]
 800f1b2:	bd38      	pop	{r3, r4, r5, pc}
 800f1b4:	2000074c 	.word	0x2000074c

0800f1b8 <__sflush_r>:
 800f1b8:	898a      	ldrh	r2, [r1, #12]
 800f1ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1be:	4605      	mov	r5, r0
 800f1c0:	0710      	lsls	r0, r2, #28
 800f1c2:	460c      	mov	r4, r1
 800f1c4:	d458      	bmi.n	800f278 <__sflush_r+0xc0>
 800f1c6:	684b      	ldr	r3, [r1, #4]
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	dc05      	bgt.n	800f1d8 <__sflush_r+0x20>
 800f1cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	dc02      	bgt.n	800f1d8 <__sflush_r+0x20>
 800f1d2:	2000      	movs	r0, #0
 800f1d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f1da:	2e00      	cmp	r6, #0
 800f1dc:	d0f9      	beq.n	800f1d2 <__sflush_r+0x1a>
 800f1de:	2300      	movs	r3, #0
 800f1e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f1e4:	682f      	ldr	r7, [r5, #0]
 800f1e6:	602b      	str	r3, [r5, #0]
 800f1e8:	d032      	beq.n	800f250 <__sflush_r+0x98>
 800f1ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f1ec:	89a3      	ldrh	r3, [r4, #12]
 800f1ee:	075a      	lsls	r2, r3, #29
 800f1f0:	d505      	bpl.n	800f1fe <__sflush_r+0x46>
 800f1f2:	6863      	ldr	r3, [r4, #4]
 800f1f4:	1ac0      	subs	r0, r0, r3
 800f1f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f1f8:	b10b      	cbz	r3, 800f1fe <__sflush_r+0x46>
 800f1fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f1fc:	1ac0      	subs	r0, r0, r3
 800f1fe:	2300      	movs	r3, #0
 800f200:	4602      	mov	r2, r0
 800f202:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f204:	6a21      	ldr	r1, [r4, #32]
 800f206:	4628      	mov	r0, r5
 800f208:	47b0      	blx	r6
 800f20a:	1c43      	adds	r3, r0, #1
 800f20c:	89a3      	ldrh	r3, [r4, #12]
 800f20e:	d106      	bne.n	800f21e <__sflush_r+0x66>
 800f210:	6829      	ldr	r1, [r5, #0]
 800f212:	291d      	cmp	r1, #29
 800f214:	d82c      	bhi.n	800f270 <__sflush_r+0xb8>
 800f216:	4a2a      	ldr	r2, [pc, #168]	; (800f2c0 <__sflush_r+0x108>)
 800f218:	40ca      	lsrs	r2, r1
 800f21a:	07d6      	lsls	r6, r2, #31
 800f21c:	d528      	bpl.n	800f270 <__sflush_r+0xb8>
 800f21e:	2200      	movs	r2, #0
 800f220:	6062      	str	r2, [r4, #4]
 800f222:	04d9      	lsls	r1, r3, #19
 800f224:	6922      	ldr	r2, [r4, #16]
 800f226:	6022      	str	r2, [r4, #0]
 800f228:	d504      	bpl.n	800f234 <__sflush_r+0x7c>
 800f22a:	1c42      	adds	r2, r0, #1
 800f22c:	d101      	bne.n	800f232 <__sflush_r+0x7a>
 800f22e:	682b      	ldr	r3, [r5, #0]
 800f230:	b903      	cbnz	r3, 800f234 <__sflush_r+0x7c>
 800f232:	6560      	str	r0, [r4, #84]	; 0x54
 800f234:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f236:	602f      	str	r7, [r5, #0]
 800f238:	2900      	cmp	r1, #0
 800f23a:	d0ca      	beq.n	800f1d2 <__sflush_r+0x1a>
 800f23c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f240:	4299      	cmp	r1, r3
 800f242:	d002      	beq.n	800f24a <__sflush_r+0x92>
 800f244:	4628      	mov	r0, r5
 800f246:	f7ff fae9 	bl	800e81c <_free_r>
 800f24a:	2000      	movs	r0, #0
 800f24c:	6360      	str	r0, [r4, #52]	; 0x34
 800f24e:	e7c1      	b.n	800f1d4 <__sflush_r+0x1c>
 800f250:	6a21      	ldr	r1, [r4, #32]
 800f252:	2301      	movs	r3, #1
 800f254:	4628      	mov	r0, r5
 800f256:	47b0      	blx	r6
 800f258:	1c41      	adds	r1, r0, #1
 800f25a:	d1c7      	bne.n	800f1ec <__sflush_r+0x34>
 800f25c:	682b      	ldr	r3, [r5, #0]
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d0c4      	beq.n	800f1ec <__sflush_r+0x34>
 800f262:	2b1d      	cmp	r3, #29
 800f264:	d001      	beq.n	800f26a <__sflush_r+0xb2>
 800f266:	2b16      	cmp	r3, #22
 800f268:	d101      	bne.n	800f26e <__sflush_r+0xb6>
 800f26a:	602f      	str	r7, [r5, #0]
 800f26c:	e7b1      	b.n	800f1d2 <__sflush_r+0x1a>
 800f26e:	89a3      	ldrh	r3, [r4, #12]
 800f270:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f274:	81a3      	strh	r3, [r4, #12]
 800f276:	e7ad      	b.n	800f1d4 <__sflush_r+0x1c>
 800f278:	690f      	ldr	r7, [r1, #16]
 800f27a:	2f00      	cmp	r7, #0
 800f27c:	d0a9      	beq.n	800f1d2 <__sflush_r+0x1a>
 800f27e:	0793      	lsls	r3, r2, #30
 800f280:	680e      	ldr	r6, [r1, #0]
 800f282:	bf08      	it	eq
 800f284:	694b      	ldreq	r3, [r1, #20]
 800f286:	600f      	str	r7, [r1, #0]
 800f288:	bf18      	it	ne
 800f28a:	2300      	movne	r3, #0
 800f28c:	eba6 0807 	sub.w	r8, r6, r7
 800f290:	608b      	str	r3, [r1, #8]
 800f292:	f1b8 0f00 	cmp.w	r8, #0
 800f296:	dd9c      	ble.n	800f1d2 <__sflush_r+0x1a>
 800f298:	6a21      	ldr	r1, [r4, #32]
 800f29a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f29c:	4643      	mov	r3, r8
 800f29e:	463a      	mov	r2, r7
 800f2a0:	4628      	mov	r0, r5
 800f2a2:	47b0      	blx	r6
 800f2a4:	2800      	cmp	r0, #0
 800f2a6:	dc06      	bgt.n	800f2b6 <__sflush_r+0xfe>
 800f2a8:	89a3      	ldrh	r3, [r4, #12]
 800f2aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f2ae:	81a3      	strh	r3, [r4, #12]
 800f2b0:	f04f 30ff 	mov.w	r0, #4294967295
 800f2b4:	e78e      	b.n	800f1d4 <__sflush_r+0x1c>
 800f2b6:	4407      	add	r7, r0
 800f2b8:	eba8 0800 	sub.w	r8, r8, r0
 800f2bc:	e7e9      	b.n	800f292 <__sflush_r+0xda>
 800f2be:	bf00      	nop
 800f2c0:	20400001 	.word	0x20400001

0800f2c4 <_fflush_r>:
 800f2c4:	b538      	push	{r3, r4, r5, lr}
 800f2c6:	690b      	ldr	r3, [r1, #16]
 800f2c8:	4605      	mov	r5, r0
 800f2ca:	460c      	mov	r4, r1
 800f2cc:	b913      	cbnz	r3, 800f2d4 <_fflush_r+0x10>
 800f2ce:	2500      	movs	r5, #0
 800f2d0:	4628      	mov	r0, r5
 800f2d2:	bd38      	pop	{r3, r4, r5, pc}
 800f2d4:	b118      	cbz	r0, 800f2de <_fflush_r+0x1a>
 800f2d6:	6983      	ldr	r3, [r0, #24]
 800f2d8:	b90b      	cbnz	r3, 800f2de <_fflush_r+0x1a>
 800f2da:	f7fe f995 	bl	800d608 <__sinit>
 800f2de:	4b14      	ldr	r3, [pc, #80]	; (800f330 <_fflush_r+0x6c>)
 800f2e0:	429c      	cmp	r4, r3
 800f2e2:	d11b      	bne.n	800f31c <_fflush_r+0x58>
 800f2e4:	686c      	ldr	r4, [r5, #4]
 800f2e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d0ef      	beq.n	800f2ce <_fflush_r+0xa>
 800f2ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f2f0:	07d0      	lsls	r0, r2, #31
 800f2f2:	d404      	bmi.n	800f2fe <_fflush_r+0x3a>
 800f2f4:	0599      	lsls	r1, r3, #22
 800f2f6:	d402      	bmi.n	800f2fe <_fflush_r+0x3a>
 800f2f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f2fa:	f7fe fda8 	bl	800de4e <__retarget_lock_acquire_recursive>
 800f2fe:	4628      	mov	r0, r5
 800f300:	4621      	mov	r1, r4
 800f302:	f7ff ff59 	bl	800f1b8 <__sflush_r>
 800f306:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f308:	07da      	lsls	r2, r3, #31
 800f30a:	4605      	mov	r5, r0
 800f30c:	d4e0      	bmi.n	800f2d0 <_fflush_r+0xc>
 800f30e:	89a3      	ldrh	r3, [r4, #12]
 800f310:	059b      	lsls	r3, r3, #22
 800f312:	d4dd      	bmi.n	800f2d0 <_fflush_r+0xc>
 800f314:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f316:	f7fe fd9b 	bl	800de50 <__retarget_lock_release_recursive>
 800f31a:	e7d9      	b.n	800f2d0 <_fflush_r+0xc>
 800f31c:	4b05      	ldr	r3, [pc, #20]	; (800f334 <_fflush_r+0x70>)
 800f31e:	429c      	cmp	r4, r3
 800f320:	d101      	bne.n	800f326 <_fflush_r+0x62>
 800f322:	68ac      	ldr	r4, [r5, #8]
 800f324:	e7df      	b.n	800f2e6 <_fflush_r+0x22>
 800f326:	4b04      	ldr	r3, [pc, #16]	; (800f338 <_fflush_r+0x74>)
 800f328:	429c      	cmp	r4, r3
 800f32a:	bf08      	it	eq
 800f32c:	68ec      	ldreq	r4, [r5, #12]
 800f32e:	e7da      	b.n	800f2e6 <_fflush_r+0x22>
 800f330:	0800ffbc 	.word	0x0800ffbc
 800f334:	0800ffdc 	.word	0x0800ffdc
 800f338:	0800ff9c 	.word	0x0800ff9c

0800f33c <_lseek_r>:
 800f33c:	b538      	push	{r3, r4, r5, lr}
 800f33e:	4d07      	ldr	r5, [pc, #28]	; (800f35c <_lseek_r+0x20>)
 800f340:	4604      	mov	r4, r0
 800f342:	4608      	mov	r0, r1
 800f344:	4611      	mov	r1, r2
 800f346:	2200      	movs	r2, #0
 800f348:	602a      	str	r2, [r5, #0]
 800f34a:	461a      	mov	r2, r3
 800f34c:	f7f6 fc14 	bl	8005b78 <_lseek>
 800f350:	1c43      	adds	r3, r0, #1
 800f352:	d102      	bne.n	800f35a <_lseek_r+0x1e>
 800f354:	682b      	ldr	r3, [r5, #0]
 800f356:	b103      	cbz	r3, 800f35a <_lseek_r+0x1e>
 800f358:	6023      	str	r3, [r4, #0]
 800f35a:	bd38      	pop	{r3, r4, r5, pc}
 800f35c:	2000074c 	.word	0x2000074c

0800f360 <__swhatbuf_r>:
 800f360:	b570      	push	{r4, r5, r6, lr}
 800f362:	460e      	mov	r6, r1
 800f364:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f368:	2900      	cmp	r1, #0
 800f36a:	b096      	sub	sp, #88	; 0x58
 800f36c:	4614      	mov	r4, r2
 800f36e:	461d      	mov	r5, r3
 800f370:	da07      	bge.n	800f382 <__swhatbuf_r+0x22>
 800f372:	2300      	movs	r3, #0
 800f374:	602b      	str	r3, [r5, #0]
 800f376:	89b3      	ldrh	r3, [r6, #12]
 800f378:	061a      	lsls	r2, r3, #24
 800f37a:	d410      	bmi.n	800f39e <__swhatbuf_r+0x3e>
 800f37c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f380:	e00e      	b.n	800f3a0 <__swhatbuf_r+0x40>
 800f382:	466a      	mov	r2, sp
 800f384:	f000 f8f2 	bl	800f56c <_fstat_r>
 800f388:	2800      	cmp	r0, #0
 800f38a:	dbf2      	blt.n	800f372 <__swhatbuf_r+0x12>
 800f38c:	9a01      	ldr	r2, [sp, #4]
 800f38e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f392:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f396:	425a      	negs	r2, r3
 800f398:	415a      	adcs	r2, r3
 800f39a:	602a      	str	r2, [r5, #0]
 800f39c:	e7ee      	b.n	800f37c <__swhatbuf_r+0x1c>
 800f39e:	2340      	movs	r3, #64	; 0x40
 800f3a0:	2000      	movs	r0, #0
 800f3a2:	6023      	str	r3, [r4, #0]
 800f3a4:	b016      	add	sp, #88	; 0x58
 800f3a6:	bd70      	pop	{r4, r5, r6, pc}

0800f3a8 <__smakebuf_r>:
 800f3a8:	898b      	ldrh	r3, [r1, #12]
 800f3aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f3ac:	079d      	lsls	r5, r3, #30
 800f3ae:	4606      	mov	r6, r0
 800f3b0:	460c      	mov	r4, r1
 800f3b2:	d507      	bpl.n	800f3c4 <__smakebuf_r+0x1c>
 800f3b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f3b8:	6023      	str	r3, [r4, #0]
 800f3ba:	6123      	str	r3, [r4, #16]
 800f3bc:	2301      	movs	r3, #1
 800f3be:	6163      	str	r3, [r4, #20]
 800f3c0:	b002      	add	sp, #8
 800f3c2:	bd70      	pop	{r4, r5, r6, pc}
 800f3c4:	ab01      	add	r3, sp, #4
 800f3c6:	466a      	mov	r2, sp
 800f3c8:	f7ff ffca 	bl	800f360 <__swhatbuf_r>
 800f3cc:	9900      	ldr	r1, [sp, #0]
 800f3ce:	4605      	mov	r5, r0
 800f3d0:	4630      	mov	r0, r6
 800f3d2:	f7ff fa73 	bl	800e8bc <_malloc_r>
 800f3d6:	b948      	cbnz	r0, 800f3ec <__smakebuf_r+0x44>
 800f3d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f3dc:	059a      	lsls	r2, r3, #22
 800f3de:	d4ef      	bmi.n	800f3c0 <__smakebuf_r+0x18>
 800f3e0:	f023 0303 	bic.w	r3, r3, #3
 800f3e4:	f043 0302 	orr.w	r3, r3, #2
 800f3e8:	81a3      	strh	r3, [r4, #12]
 800f3ea:	e7e3      	b.n	800f3b4 <__smakebuf_r+0xc>
 800f3ec:	4b0d      	ldr	r3, [pc, #52]	; (800f424 <__smakebuf_r+0x7c>)
 800f3ee:	62b3      	str	r3, [r6, #40]	; 0x28
 800f3f0:	89a3      	ldrh	r3, [r4, #12]
 800f3f2:	6020      	str	r0, [r4, #0]
 800f3f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f3f8:	81a3      	strh	r3, [r4, #12]
 800f3fa:	9b00      	ldr	r3, [sp, #0]
 800f3fc:	6163      	str	r3, [r4, #20]
 800f3fe:	9b01      	ldr	r3, [sp, #4]
 800f400:	6120      	str	r0, [r4, #16]
 800f402:	b15b      	cbz	r3, 800f41c <__smakebuf_r+0x74>
 800f404:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f408:	4630      	mov	r0, r6
 800f40a:	f000 f8c1 	bl	800f590 <_isatty_r>
 800f40e:	b128      	cbz	r0, 800f41c <__smakebuf_r+0x74>
 800f410:	89a3      	ldrh	r3, [r4, #12]
 800f412:	f023 0303 	bic.w	r3, r3, #3
 800f416:	f043 0301 	orr.w	r3, r3, #1
 800f41a:	81a3      	strh	r3, [r4, #12]
 800f41c:	89a0      	ldrh	r0, [r4, #12]
 800f41e:	4305      	orrs	r5, r0
 800f420:	81a5      	strh	r5, [r4, #12]
 800f422:	e7cd      	b.n	800f3c0 <__smakebuf_r+0x18>
 800f424:	0800d5a1 	.word	0x0800d5a1

0800f428 <memmove>:
 800f428:	4288      	cmp	r0, r1
 800f42a:	b510      	push	{r4, lr}
 800f42c:	eb01 0402 	add.w	r4, r1, r2
 800f430:	d902      	bls.n	800f438 <memmove+0x10>
 800f432:	4284      	cmp	r4, r0
 800f434:	4623      	mov	r3, r4
 800f436:	d807      	bhi.n	800f448 <memmove+0x20>
 800f438:	1e43      	subs	r3, r0, #1
 800f43a:	42a1      	cmp	r1, r4
 800f43c:	d008      	beq.n	800f450 <memmove+0x28>
 800f43e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f442:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f446:	e7f8      	b.n	800f43a <memmove+0x12>
 800f448:	4402      	add	r2, r0
 800f44a:	4601      	mov	r1, r0
 800f44c:	428a      	cmp	r2, r1
 800f44e:	d100      	bne.n	800f452 <memmove+0x2a>
 800f450:	bd10      	pop	{r4, pc}
 800f452:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f456:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f45a:	e7f7      	b.n	800f44c <memmove+0x24>

0800f45c <__malloc_lock>:
 800f45c:	4801      	ldr	r0, [pc, #4]	; (800f464 <__malloc_lock+0x8>)
 800f45e:	f7fe bcf6 	b.w	800de4e <__retarget_lock_acquire_recursive>
 800f462:	bf00      	nop
 800f464:	20000744 	.word	0x20000744

0800f468 <__malloc_unlock>:
 800f468:	4801      	ldr	r0, [pc, #4]	; (800f470 <__malloc_unlock+0x8>)
 800f46a:	f7fe bcf1 	b.w	800de50 <__retarget_lock_release_recursive>
 800f46e:	bf00      	nop
 800f470:	20000744 	.word	0x20000744

0800f474 <_realloc_r>:
 800f474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f476:	4607      	mov	r7, r0
 800f478:	4614      	mov	r4, r2
 800f47a:	460e      	mov	r6, r1
 800f47c:	b921      	cbnz	r1, 800f488 <_realloc_r+0x14>
 800f47e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f482:	4611      	mov	r1, r2
 800f484:	f7ff ba1a 	b.w	800e8bc <_malloc_r>
 800f488:	b922      	cbnz	r2, 800f494 <_realloc_r+0x20>
 800f48a:	f7ff f9c7 	bl	800e81c <_free_r>
 800f48e:	4625      	mov	r5, r4
 800f490:	4628      	mov	r0, r5
 800f492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f494:	f000 f88c 	bl	800f5b0 <_malloc_usable_size_r>
 800f498:	42a0      	cmp	r0, r4
 800f49a:	d20f      	bcs.n	800f4bc <_realloc_r+0x48>
 800f49c:	4621      	mov	r1, r4
 800f49e:	4638      	mov	r0, r7
 800f4a0:	f7ff fa0c 	bl	800e8bc <_malloc_r>
 800f4a4:	4605      	mov	r5, r0
 800f4a6:	2800      	cmp	r0, #0
 800f4a8:	d0f2      	beq.n	800f490 <_realloc_r+0x1c>
 800f4aa:	4631      	mov	r1, r6
 800f4ac:	4622      	mov	r2, r4
 800f4ae:	f7fb fd8d 	bl	800afcc <memcpy>
 800f4b2:	4631      	mov	r1, r6
 800f4b4:	4638      	mov	r0, r7
 800f4b6:	f7ff f9b1 	bl	800e81c <_free_r>
 800f4ba:	e7e9      	b.n	800f490 <_realloc_r+0x1c>
 800f4bc:	4635      	mov	r5, r6
 800f4be:	e7e7      	b.n	800f490 <_realloc_r+0x1c>

0800f4c0 <_read_r>:
 800f4c0:	b538      	push	{r3, r4, r5, lr}
 800f4c2:	4d07      	ldr	r5, [pc, #28]	; (800f4e0 <_read_r+0x20>)
 800f4c4:	4604      	mov	r4, r0
 800f4c6:	4608      	mov	r0, r1
 800f4c8:	4611      	mov	r1, r2
 800f4ca:	2200      	movs	r2, #0
 800f4cc:	602a      	str	r2, [r5, #0]
 800f4ce:	461a      	mov	r2, r3
 800f4d0:	f7f6 faf2 	bl	8005ab8 <_read>
 800f4d4:	1c43      	adds	r3, r0, #1
 800f4d6:	d102      	bne.n	800f4de <_read_r+0x1e>
 800f4d8:	682b      	ldr	r3, [r5, #0]
 800f4da:	b103      	cbz	r3, 800f4de <_read_r+0x1e>
 800f4dc:	6023      	str	r3, [r4, #0]
 800f4de:	bd38      	pop	{r3, r4, r5, pc}
 800f4e0:	2000074c 	.word	0x2000074c

0800f4e4 <_raise_r>:
 800f4e4:	291f      	cmp	r1, #31
 800f4e6:	b538      	push	{r3, r4, r5, lr}
 800f4e8:	4604      	mov	r4, r0
 800f4ea:	460d      	mov	r5, r1
 800f4ec:	d904      	bls.n	800f4f8 <_raise_r+0x14>
 800f4ee:	2316      	movs	r3, #22
 800f4f0:	6003      	str	r3, [r0, #0]
 800f4f2:	f04f 30ff 	mov.w	r0, #4294967295
 800f4f6:	bd38      	pop	{r3, r4, r5, pc}
 800f4f8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f4fa:	b112      	cbz	r2, 800f502 <_raise_r+0x1e>
 800f4fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f500:	b94b      	cbnz	r3, 800f516 <_raise_r+0x32>
 800f502:	4620      	mov	r0, r4
 800f504:	f000 f830 	bl	800f568 <_getpid_r>
 800f508:	462a      	mov	r2, r5
 800f50a:	4601      	mov	r1, r0
 800f50c:	4620      	mov	r0, r4
 800f50e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f512:	f000 b817 	b.w	800f544 <_kill_r>
 800f516:	2b01      	cmp	r3, #1
 800f518:	d00a      	beq.n	800f530 <_raise_r+0x4c>
 800f51a:	1c59      	adds	r1, r3, #1
 800f51c:	d103      	bne.n	800f526 <_raise_r+0x42>
 800f51e:	2316      	movs	r3, #22
 800f520:	6003      	str	r3, [r0, #0]
 800f522:	2001      	movs	r0, #1
 800f524:	e7e7      	b.n	800f4f6 <_raise_r+0x12>
 800f526:	2400      	movs	r4, #0
 800f528:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f52c:	4628      	mov	r0, r5
 800f52e:	4798      	blx	r3
 800f530:	2000      	movs	r0, #0
 800f532:	e7e0      	b.n	800f4f6 <_raise_r+0x12>

0800f534 <raise>:
 800f534:	4b02      	ldr	r3, [pc, #8]	; (800f540 <raise+0xc>)
 800f536:	4601      	mov	r1, r0
 800f538:	6818      	ldr	r0, [r3, #0]
 800f53a:	f7ff bfd3 	b.w	800f4e4 <_raise_r>
 800f53e:	bf00      	nop
 800f540:	20000074 	.word	0x20000074

0800f544 <_kill_r>:
 800f544:	b538      	push	{r3, r4, r5, lr}
 800f546:	4d07      	ldr	r5, [pc, #28]	; (800f564 <_kill_r+0x20>)
 800f548:	2300      	movs	r3, #0
 800f54a:	4604      	mov	r4, r0
 800f54c:	4608      	mov	r0, r1
 800f54e:	4611      	mov	r1, r2
 800f550:	602b      	str	r3, [r5, #0]
 800f552:	f7f6 fa97 	bl	8005a84 <_kill>
 800f556:	1c43      	adds	r3, r0, #1
 800f558:	d102      	bne.n	800f560 <_kill_r+0x1c>
 800f55a:	682b      	ldr	r3, [r5, #0]
 800f55c:	b103      	cbz	r3, 800f560 <_kill_r+0x1c>
 800f55e:	6023      	str	r3, [r4, #0]
 800f560:	bd38      	pop	{r3, r4, r5, pc}
 800f562:	bf00      	nop
 800f564:	2000074c 	.word	0x2000074c

0800f568 <_getpid_r>:
 800f568:	f7f6 ba84 	b.w	8005a74 <_getpid>

0800f56c <_fstat_r>:
 800f56c:	b538      	push	{r3, r4, r5, lr}
 800f56e:	4d07      	ldr	r5, [pc, #28]	; (800f58c <_fstat_r+0x20>)
 800f570:	2300      	movs	r3, #0
 800f572:	4604      	mov	r4, r0
 800f574:	4608      	mov	r0, r1
 800f576:	4611      	mov	r1, r2
 800f578:	602b      	str	r3, [r5, #0]
 800f57a:	f7f6 fae2 	bl	8005b42 <_fstat>
 800f57e:	1c43      	adds	r3, r0, #1
 800f580:	d102      	bne.n	800f588 <_fstat_r+0x1c>
 800f582:	682b      	ldr	r3, [r5, #0]
 800f584:	b103      	cbz	r3, 800f588 <_fstat_r+0x1c>
 800f586:	6023      	str	r3, [r4, #0]
 800f588:	bd38      	pop	{r3, r4, r5, pc}
 800f58a:	bf00      	nop
 800f58c:	2000074c 	.word	0x2000074c

0800f590 <_isatty_r>:
 800f590:	b538      	push	{r3, r4, r5, lr}
 800f592:	4d06      	ldr	r5, [pc, #24]	; (800f5ac <_isatty_r+0x1c>)
 800f594:	2300      	movs	r3, #0
 800f596:	4604      	mov	r4, r0
 800f598:	4608      	mov	r0, r1
 800f59a:	602b      	str	r3, [r5, #0]
 800f59c:	f7f6 fae1 	bl	8005b62 <_isatty>
 800f5a0:	1c43      	adds	r3, r0, #1
 800f5a2:	d102      	bne.n	800f5aa <_isatty_r+0x1a>
 800f5a4:	682b      	ldr	r3, [r5, #0]
 800f5a6:	b103      	cbz	r3, 800f5aa <_isatty_r+0x1a>
 800f5a8:	6023      	str	r3, [r4, #0]
 800f5aa:	bd38      	pop	{r3, r4, r5, pc}
 800f5ac:	2000074c 	.word	0x2000074c

0800f5b0 <_malloc_usable_size_r>:
 800f5b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f5b4:	1f18      	subs	r0, r3, #4
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	bfbc      	itt	lt
 800f5ba:	580b      	ldrlt	r3, [r1, r0]
 800f5bc:	18c0      	addlt	r0, r0, r3
 800f5be:	4770      	bx	lr

0800f5c0 <_init>:
 800f5c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5c2:	bf00      	nop
 800f5c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f5c6:	bc08      	pop	{r3}
 800f5c8:	469e      	mov	lr, r3
 800f5ca:	4770      	bx	lr

0800f5cc <_fini>:
 800f5cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5ce:	bf00      	nop
 800f5d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f5d2:	bc08      	pop	{r3}
 800f5d4:	469e      	mov	lr, r3
 800f5d6:	4770      	bx	lr


Nap.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b904  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000650  0800baa8  0800baa8  0001baa8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c0f8  0800c0f8  00020224  2**0
                  CONTENTS
  4 .ARM          00000008  0800c0f8  0800c0f8  0001c0f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c100  0800c100  00020224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c100  0800c100  0001c100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c104  0800c104  0001c104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000224  20000000  0800c108  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a4  20000224  0800c32c  00020224  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005c8  0800c32c  000205c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001abcc  00000000  00000000  00020254  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003594  00000000  00000000  0003ae20  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001420  00000000  00000000  0003e3b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012d8  00000000  00000000  0003f7d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000195e4  00000000  00000000  00040ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011862  00000000  00000000  0005a094  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00094994  00000000  00000000  0006b8f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010028a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006230  00000000  00000000  00100308  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000224 	.word	0x20000224
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ba8c 	.word	0x0800ba8c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000228 	.word	0x20000228
 80001dc:	0800ba8c 	.word	0x0800ba8c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b972 	b.w	8000f94 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	4688      	mov	r8, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14b      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4615      	mov	r5, r2
 8000cda:	d967      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0720 	rsb	r7, r2, #32
 8000ce6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cea:	fa20 f707 	lsr.w	r7, r0, r7
 8000cee:	4095      	lsls	r5, r2
 8000cf0:	ea47 0803 	orr.w	r8, r7, r3
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d00:	fa1f fc85 	uxth.w	ip, r5
 8000d04:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d08:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18eb      	adds	r3, r5, r3
 8000d16:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d1a:	f080 811b 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8118 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d24:	3f02      	subs	r7, #2
 8000d26:	442b      	add	r3, r5
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d3c:	45a4      	cmp	ip, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	192c      	adds	r4, r5, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d46:	f080 8107 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d4a:	45a4      	cmp	ip, r4
 8000d4c:	f240 8104 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d50:	3802      	subs	r0, #2
 8000d52:	442c      	add	r4, r5
 8000d54:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d58:	eba4 040c 	sub.w	r4, r4, ip
 8000d5c:	2700      	movs	r7, #0
 8000d5e:	b11e      	cbz	r6, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c6 4300 	strd	r4, r3, [r6]
 8000d68:	4639      	mov	r1, r7
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0xbe>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80eb 	beq.w	8000f4e <__udivmoddi4+0x286>
 8000d78:	2700      	movs	r7, #0
 8000d7a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d7e:	4638      	mov	r0, r7
 8000d80:	4639      	mov	r1, r7
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	fab3 f783 	clz	r7, r3
 8000d8a:	2f00      	cmp	r7, #0
 8000d8c:	d147      	bne.n	8000e1e <__udivmoddi4+0x156>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d302      	bcc.n	8000d98 <__udivmoddi4+0xd0>
 8000d92:	4282      	cmp	r2, r0
 8000d94:	f200 80fa 	bhi.w	8000f8c <__udivmoddi4+0x2c4>
 8000d98:	1a84      	subs	r4, r0, r2
 8000d9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d9e:	2001      	movs	r0, #1
 8000da0:	4698      	mov	r8, r3
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	d0e0      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000da6:	e9c6 4800 	strd	r4, r8, [r6]
 8000daa:	e7dd      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000dac:	b902      	cbnz	r2, 8000db0 <__udivmoddi4+0xe8>
 8000dae:	deff      	udf	#255	; 0xff
 8000db0:	fab2 f282 	clz	r2, r2
 8000db4:	2a00      	cmp	r2, #0
 8000db6:	f040 808f 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000dba:	1b49      	subs	r1, r1, r5
 8000dbc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dc0:	fa1f f885 	uxth.w	r8, r5
 8000dc4:	2701      	movs	r7, #1
 8000dc6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dca:	0c23      	lsrs	r3, r4, #16
 8000dcc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x124>
 8000ddc:	18eb      	adds	r3, r5, r3
 8000dde:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4299      	cmp	r1, r3
 8000de6:	f200 80cd 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dea:	4684      	mov	ip, r0
 8000dec:	1a59      	subs	r1, r3, r1
 8000dee:	b2a3      	uxth	r3, r4
 8000df0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000df8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dfc:	fb08 f800 	mul.w	r8, r8, r0
 8000e00:	45a0      	cmp	r8, r4
 8000e02:	d907      	bls.n	8000e14 <__udivmoddi4+0x14c>
 8000e04:	192c      	adds	r4, r5, r4
 8000e06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x14a>
 8000e0c:	45a0      	cmp	r8, r4
 8000e0e:	f200 80b6 	bhi.w	8000f7e <__udivmoddi4+0x2b6>
 8000e12:	4618      	mov	r0, r3
 8000e14:	eba4 0408 	sub.w	r4, r4, r8
 8000e18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e1c:	e79f      	b.n	8000d5e <__udivmoddi4+0x96>
 8000e1e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e22:	40bb      	lsls	r3, r7
 8000e24:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e28:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e2c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e30:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e34:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e38:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e3c:	4325      	orrs	r5, r4
 8000e3e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e42:	0c2c      	lsrs	r4, r5, #16
 8000e44:	fb08 3319 	mls	r3, r8, r9, r3
 8000e48:	fa1f fa8e 	uxth.w	sl, lr
 8000e4c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e50:	fb09 f40a 	mul.w	r4, r9, sl
 8000e54:	429c      	cmp	r4, r3
 8000e56:	fa02 f207 	lsl.w	r2, r2, r7
 8000e5a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1e 0303 	adds.w	r3, lr, r3
 8000e64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e68:	f080 8087 	bcs.w	8000f7a <__udivmoddi4+0x2b2>
 8000e6c:	429c      	cmp	r4, r3
 8000e6e:	f240 8084 	bls.w	8000f7a <__udivmoddi4+0x2b2>
 8000e72:	f1a9 0902 	sub.w	r9, r9, #2
 8000e76:	4473      	add	r3, lr
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	b2ad      	uxth	r5, r5
 8000e7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e80:	fb08 3310 	mls	r3, r8, r0, r3
 8000e84:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e88:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e8c:	45a2      	cmp	sl, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1e 0404 	adds.w	r4, lr, r4
 8000e94:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e98:	d26b      	bcs.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9a:	45a2      	cmp	sl, r4
 8000e9c:	d969      	bls.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	4474      	add	r4, lr
 8000ea2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ea6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eaa:	eba4 040a 	sub.w	r4, r4, sl
 8000eae:	454c      	cmp	r4, r9
 8000eb0:	46c2      	mov	sl, r8
 8000eb2:	464b      	mov	r3, r9
 8000eb4:	d354      	bcc.n	8000f60 <__udivmoddi4+0x298>
 8000eb6:	d051      	beq.n	8000f5c <__udivmoddi4+0x294>
 8000eb8:	2e00      	cmp	r6, #0
 8000eba:	d069      	beq.n	8000f90 <__udivmoddi4+0x2c8>
 8000ebc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ec0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ec4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ec8:	40fd      	lsrs	r5, r7
 8000eca:	40fc      	lsrs	r4, r7
 8000ecc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ed0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ed4:	2700      	movs	r7, #0
 8000ed6:	e747      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ee0:	4095      	lsls	r5, r2
 8000ee2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ee6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eee:	4338      	orrs	r0, r7
 8000ef0:	0c01      	lsrs	r1, r0, #16
 8000ef2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ef6:	fa1f f885 	uxth.w	r8, r5
 8000efa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000efe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f02:	fb07 f308 	mul.w	r3, r7, r8
 8000f06:	428b      	cmp	r3, r1
 8000f08:	fa04 f402 	lsl.w	r4, r4, r2
 8000f0c:	d907      	bls.n	8000f1e <__udivmoddi4+0x256>
 8000f0e:	1869      	adds	r1, r5, r1
 8000f10:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f14:	d22f      	bcs.n	8000f76 <__udivmoddi4+0x2ae>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	d92d      	bls.n	8000f76 <__udivmoddi4+0x2ae>
 8000f1a:	3f02      	subs	r7, #2
 8000f1c:	4429      	add	r1, r5
 8000f1e:	1acb      	subs	r3, r1, r3
 8000f20:	b281      	uxth	r1, r0
 8000f22:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f26:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f2e:	fb00 f308 	mul.w	r3, r0, r8
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x27e>
 8000f36:	1869      	adds	r1, r5, r1
 8000f38:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f3c:	d217      	bcs.n	8000f6e <__udivmoddi4+0x2a6>
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	d915      	bls.n	8000f6e <__udivmoddi4+0x2a6>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4429      	add	r1, r5
 8000f46:	1ac9      	subs	r1, r1, r3
 8000f48:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f4c:	e73b      	b.n	8000dc6 <__udivmoddi4+0xfe>
 8000f4e:	4637      	mov	r7, r6
 8000f50:	4630      	mov	r0, r6
 8000f52:	e709      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f54:	4607      	mov	r7, r0
 8000f56:	e6e7      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f58:	4618      	mov	r0, r3
 8000f5a:	e6fb      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f5c:	4541      	cmp	r1, r8
 8000f5e:	d2ab      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f60:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f64:	eb69 020e 	sbc.w	r2, r9, lr
 8000f68:	3801      	subs	r0, #1
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	e7a4      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f6e:	4660      	mov	r0, ip
 8000f70:	e7e9      	b.n	8000f46 <__udivmoddi4+0x27e>
 8000f72:	4618      	mov	r0, r3
 8000f74:	e795      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f76:	4667      	mov	r7, ip
 8000f78:	e7d1      	b.n	8000f1e <__udivmoddi4+0x256>
 8000f7a:	4681      	mov	r9, r0
 8000f7c:	e77c      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f7e:	3802      	subs	r0, #2
 8000f80:	442c      	add	r4, r5
 8000f82:	e747      	b.n	8000e14 <__udivmoddi4+0x14c>
 8000f84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f88:	442b      	add	r3, r5
 8000f8a:	e72f      	b.n	8000dec <__udivmoddi4+0x124>
 8000f8c:	4638      	mov	r0, r7
 8000f8e:	e708      	b.n	8000da2 <__udivmoddi4+0xda>
 8000f90:	4637      	mov	r7, r6
 8000f92:	e6e9      	b.n	8000d68 <__udivmoddi4+0xa0>

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <Menu_system_control>:
uint8_t line = 1;
extern int16_t Left, Right;
extern uint16_t Sensor_Threshold[6];
extern uint16_t Sensor_ADC_Value[6];

void Menu_system_control(uint8_t Menu_type, uint8_t line) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	460a      	mov	r2, r1
 8000fa2:	71fb      	strb	r3, [r7, #7]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	71bb      	strb	r3, [r7, #6]
	switch (Menu_type) {
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
 8000faa:	2b06      	cmp	r3, #6
 8000fac:	d82b      	bhi.n	8001006 <Menu_system_control+0x6e>
 8000fae:	a201      	add	r2, pc, #4	; (adr r2, 8000fb4 <Menu_system_control+0x1c>)
 8000fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fb4:	08000fd1 	.word	0x08000fd1
 8000fb8:	08000fd7 	.word	0x08000fd7
 8000fbc:	08000fe1 	.word	0x08000fe1
 8000fc0:	08000fe7 	.word	0x08000fe7
 8000fc4:	08000ff1 	.word	0x08000ff1
 8000fc8:	08000ffb 	.word	0x08000ffb
 8000fcc:	08001001 	.word	0x08001001
	case 0:
		Running();
 8000fd0:	f001 fc8c 	bl	80028ec <Running>
		break;
 8000fd4:	e017      	b.n	8001006 <Menu_system_control+0x6e>
	case Main_menu:
		Mainmenu(line);
 8000fd6:	79bb      	ldrb	r3, [r7, #6]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f000 f819 	bl	8001010 <Mainmenu>
		break;
 8000fde:	e012      	b.n	8001006 <Menu_system_control+0x6e>
	case Color_Processing:
		Color_Studying_process();
 8000fe0:	f000 fac8 	bl	8001574 <Color_Studying_process>
		break;
 8000fe4:	e00f      	b.n	8001006 <Menu_system_control+0x6e>
	case PID_Menu:
		PID_menu(line);
 8000fe6:	79bb      	ldrb	r3, [r7, #6]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f000 f8ff 	bl	80011ec <PID_menu>
		break;
 8000fee:	e00a      	b.n	8001006 <Menu_system_control+0x6e>
	case Engine_menu:
		Speed_menu(line);
 8000ff0:	79bb      	ldrb	r3, [r7, #6]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 fa30 	bl	8001458 <Speed_menu>
		break;
 8000ff8:	e005      	b.n	8001006 <Menu_system_control+0x6e>
	case LineDetect_Show:
		LineDetect_show();
 8000ffa:	f000 fb55 	bl	80016a8 <LineDetect_show>
		break;
 8000ffe:	e002      	b.n	8001006 <Menu_system_control+0x6e>
	case Wifi_connect:
		Wifi_Connect_establish();
 8001000:	f000 fc66 	bl	80018d0 <Wifi_Connect_establish>
		break;
 8001004:	bf00      	nop
	}
}
 8001006:	bf00      	nop
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop

08001010 <Mainmenu>:
void Mainmenu(uint8_t line) {
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	71fb      	strb	r3, [r7, #7]
	switch (line) {
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	3b01      	subs	r3, #1
 800101e:	2b06      	cmp	r3, #6
 8001020:	f200 80c1 	bhi.w	80011a6 <Mainmenu+0x196>
 8001024:	a201      	add	r2, pc, #4	; (adr r2, 800102c <Mainmenu+0x1c>)
 8001026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800102a:	bf00      	nop
 800102c:	08001049 	.word	0x08001049
 8001030:	0800107b 	.word	0x0800107b
 8001034:	080010ad 	.word	0x080010ad
 8001038:	080010df 	.word	0x080010df
 800103c:	08001111 	.word	0x08001111
 8001040:	08001143 	.word	0x08001143
 8001044:	08001175 	.word	0x08001175
	case 1:
		lcd_send_cmd(0x80 | 0x00);
 8001048:	2080      	movs	r0, #128	; 0x80
 800104a:	f000 fecd 	bl	8001de8 <lcd_send_cmd>
		lcd_send_string(">Car Run            ");
 800104e:	4858      	ldr	r0, [pc, #352]	; (80011b0 <Mainmenu+0x1a0>)
 8001050:	f000 ff7a 	bl	8001f48 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x40);
 8001054:	20c0      	movs	r0, #192	; 0xc0
 8001056:	f000 fec7 	bl	8001de8 <lcd_send_cmd>
		lcd_send_string(" Color studying     ");
 800105a:	4856      	ldr	r0, [pc, #344]	; (80011b4 <Mainmenu+0x1a4>)
 800105c:	f000 ff74 	bl	8001f48 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x14);
 8001060:	2094      	movs	r0, #148	; 0x94
 8001062:	f000 fec1 	bl	8001de8 <lcd_send_cmd>
		lcd_send_string(" PID value modify   ");
 8001066:	4854      	ldr	r0, [pc, #336]	; (80011b8 <Mainmenu+0x1a8>)
 8001068:	f000 ff6e 	bl	8001f48 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x54);
 800106c:	20d4      	movs	r0, #212	; 0xd4
 800106e:	f000 febb 	bl	8001de8 <lcd_send_cmd>
		lcd_send_string(" Max speed config   ");
 8001072:	4852      	ldr	r0, [pc, #328]	; (80011bc <Mainmenu+0x1ac>)
 8001074:	f000 ff68 	bl	8001f48 <lcd_send_string>
		break;
 8001078:	e095      	b.n	80011a6 <Mainmenu+0x196>
	case 2:
		lcd_send_cmd(0x80 | 0x00);
 800107a:	2080      	movs	r0, #128	; 0x80
 800107c:	f000 feb4 	bl	8001de8 <lcd_send_cmd>
		lcd_send_string(" Car Run            ");
 8001080:	484f      	ldr	r0, [pc, #316]	; (80011c0 <Mainmenu+0x1b0>)
 8001082:	f000 ff61 	bl	8001f48 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x40);
 8001086:	20c0      	movs	r0, #192	; 0xc0
 8001088:	f000 feae 	bl	8001de8 <lcd_send_cmd>
		lcd_send_string(">Color studying     ");
 800108c:	484d      	ldr	r0, [pc, #308]	; (80011c4 <Mainmenu+0x1b4>)
 800108e:	f000 ff5b 	bl	8001f48 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x14);
 8001092:	2094      	movs	r0, #148	; 0x94
 8001094:	f000 fea8 	bl	8001de8 <lcd_send_cmd>
		lcd_send_string(" PID value modify   ");
 8001098:	4847      	ldr	r0, [pc, #284]	; (80011b8 <Mainmenu+0x1a8>)
 800109a:	f000 ff55 	bl	8001f48 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x54);
 800109e:	20d4      	movs	r0, #212	; 0xd4
 80010a0:	f000 fea2 	bl	8001de8 <lcd_send_cmd>
		lcd_send_string(" Max speed config   ");
 80010a4:	4845      	ldr	r0, [pc, #276]	; (80011bc <Mainmenu+0x1ac>)
 80010a6:	f000 ff4f 	bl	8001f48 <lcd_send_string>
		break;
 80010aa:	e07c      	b.n	80011a6 <Mainmenu+0x196>
	case 3:
		lcd_send_cmd(0x80 | 0x00);
 80010ac:	2080      	movs	r0, #128	; 0x80
 80010ae:	f000 fe9b 	bl	8001de8 <lcd_send_cmd>
		lcd_send_string(" Car Run            ");
 80010b2:	4843      	ldr	r0, [pc, #268]	; (80011c0 <Mainmenu+0x1b0>)
 80010b4:	f000 ff48 	bl	8001f48 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x40);
 80010b8:	20c0      	movs	r0, #192	; 0xc0
 80010ba:	f000 fe95 	bl	8001de8 <lcd_send_cmd>
		lcd_send_string(" Color studying     ");
 80010be:	483d      	ldr	r0, [pc, #244]	; (80011b4 <Mainmenu+0x1a4>)
 80010c0:	f000 ff42 	bl	8001f48 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x14);
 80010c4:	2094      	movs	r0, #148	; 0x94
 80010c6:	f000 fe8f 	bl	8001de8 <lcd_send_cmd>
		lcd_send_string(">PID value modify   ");
 80010ca:	483f      	ldr	r0, [pc, #252]	; (80011c8 <Mainmenu+0x1b8>)
 80010cc:	f000 ff3c 	bl	8001f48 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x54);
 80010d0:	20d4      	movs	r0, #212	; 0xd4
 80010d2:	f000 fe89 	bl	8001de8 <lcd_send_cmd>
		lcd_send_string(" Max speed config   ");
 80010d6:	4839      	ldr	r0, [pc, #228]	; (80011bc <Mainmenu+0x1ac>)
 80010d8:	f000 ff36 	bl	8001f48 <lcd_send_string>
		break;
 80010dc:	e063      	b.n	80011a6 <Mainmenu+0x196>
	case 4:
		lcd_send_cmd(0x80 | 0x00);
 80010de:	2080      	movs	r0, #128	; 0x80
 80010e0:	f000 fe82 	bl	8001de8 <lcd_send_cmd>
		lcd_send_string(" Car Run            ");
 80010e4:	4836      	ldr	r0, [pc, #216]	; (80011c0 <Mainmenu+0x1b0>)
 80010e6:	f000 ff2f 	bl	8001f48 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x40);
 80010ea:	20c0      	movs	r0, #192	; 0xc0
 80010ec:	f000 fe7c 	bl	8001de8 <lcd_send_cmd>
		lcd_send_string(" Color studying     ");
 80010f0:	4830      	ldr	r0, [pc, #192]	; (80011b4 <Mainmenu+0x1a4>)
 80010f2:	f000 ff29 	bl	8001f48 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x14);
 80010f6:	2094      	movs	r0, #148	; 0x94
 80010f8:	f000 fe76 	bl	8001de8 <lcd_send_cmd>
		lcd_send_string(" PID value modify   ");
 80010fc:	482e      	ldr	r0, [pc, #184]	; (80011b8 <Mainmenu+0x1a8>)
 80010fe:	f000 ff23 	bl	8001f48 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x54);
 8001102:	20d4      	movs	r0, #212	; 0xd4
 8001104:	f000 fe70 	bl	8001de8 <lcd_send_cmd>
		lcd_send_string(">Max speed config   ");
 8001108:	4830      	ldr	r0, [pc, #192]	; (80011cc <Mainmenu+0x1bc>)
 800110a:	f000 ff1d 	bl	8001f48 <lcd_send_string>
		break;
 800110e:	e04a      	b.n	80011a6 <Mainmenu+0x196>
	case 5:
		lcd_send_cmd(0x80 | 0x00);
 8001110:	2080      	movs	r0, #128	; 0x80
 8001112:	f000 fe69 	bl	8001de8 <lcd_send_cmd>
		lcd_send_string(">Line Detect show   ");
 8001116:	482e      	ldr	r0, [pc, #184]	; (80011d0 <Mainmenu+0x1c0>)
 8001118:	f000 ff16 	bl	8001f48 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x40);
 800111c:	20c0      	movs	r0, #192	; 0xc0
 800111e:	f000 fe63 	bl	8001de8 <lcd_send_cmd>
		lcd_send_string(" Save system value  ");
 8001122:	482c      	ldr	r0, [pc, #176]	; (80011d4 <Mainmenu+0x1c4>)
 8001124:	f000 ff10 	bl	8001f48 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x14);
 8001128:	2094      	movs	r0, #148	; 0x94
 800112a:	f000 fe5d 	bl	8001de8 <lcd_send_cmd>
		lcd_send_string(" Wifi Connect       ");
 800112e:	482a      	ldr	r0, [pc, #168]	; (80011d8 <Mainmenu+0x1c8>)
 8001130:	f000 ff0a 	bl	8001f48 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x54);
 8001134:	20d4      	movs	r0, #212	; 0xd4
 8001136:	f000 fe57 	bl	8001de8 <lcd_send_cmd>
		lcd_send_string("                    ");
 800113a:	4828      	ldr	r0, [pc, #160]	; (80011dc <Mainmenu+0x1cc>)
 800113c:	f000 ff04 	bl	8001f48 <lcd_send_string>
		break;
 8001140:	e031      	b.n	80011a6 <Mainmenu+0x196>
	case 6:
		lcd_send_cmd(0x80 | 0x00);
 8001142:	2080      	movs	r0, #128	; 0x80
 8001144:	f000 fe50 	bl	8001de8 <lcd_send_cmd>
		lcd_send_string(" Line Detect show   ");
 8001148:	4825      	ldr	r0, [pc, #148]	; (80011e0 <Mainmenu+0x1d0>)
 800114a:	f000 fefd 	bl	8001f48 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x40);
 800114e:	20c0      	movs	r0, #192	; 0xc0
 8001150:	f000 fe4a 	bl	8001de8 <lcd_send_cmd>
		lcd_send_string(">Save system value  ");
 8001154:	4823      	ldr	r0, [pc, #140]	; (80011e4 <Mainmenu+0x1d4>)
 8001156:	f000 fef7 	bl	8001f48 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x14);
 800115a:	2094      	movs	r0, #148	; 0x94
 800115c:	f000 fe44 	bl	8001de8 <lcd_send_cmd>
		lcd_send_string(" Wifi Connect       ");
 8001160:	481d      	ldr	r0, [pc, #116]	; (80011d8 <Mainmenu+0x1c8>)
 8001162:	f000 fef1 	bl	8001f48 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x54);
 8001166:	20d4      	movs	r0, #212	; 0xd4
 8001168:	f000 fe3e 	bl	8001de8 <lcd_send_cmd>
		lcd_send_string("                    ");
 800116c:	481b      	ldr	r0, [pc, #108]	; (80011dc <Mainmenu+0x1cc>)
 800116e:	f000 feeb 	bl	8001f48 <lcd_send_string>
		break;
 8001172:	e018      	b.n	80011a6 <Mainmenu+0x196>
	case 7:
		lcd_send_cmd(0x80 | 0x00);
 8001174:	2080      	movs	r0, #128	; 0x80
 8001176:	f000 fe37 	bl	8001de8 <lcd_send_cmd>
		lcd_send_string(" Line Detect show   ");
 800117a:	4819      	ldr	r0, [pc, #100]	; (80011e0 <Mainmenu+0x1d0>)
 800117c:	f000 fee4 	bl	8001f48 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x40);
 8001180:	20c0      	movs	r0, #192	; 0xc0
 8001182:	f000 fe31 	bl	8001de8 <lcd_send_cmd>
		lcd_send_string(" Save system value  ");
 8001186:	4813      	ldr	r0, [pc, #76]	; (80011d4 <Mainmenu+0x1c4>)
 8001188:	f000 fede 	bl	8001f48 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x14);
 800118c:	2094      	movs	r0, #148	; 0x94
 800118e:	f000 fe2b 	bl	8001de8 <lcd_send_cmd>
		lcd_send_string(">Wifi Connect       ");
 8001192:	4815      	ldr	r0, [pc, #84]	; (80011e8 <Mainmenu+0x1d8>)
 8001194:	f000 fed8 	bl	8001f48 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x54);
 8001198:	20d4      	movs	r0, #212	; 0xd4
 800119a:	f000 fe25 	bl	8001de8 <lcd_send_cmd>
		lcd_send_string("                    ");
 800119e:	480f      	ldr	r0, [pc, #60]	; (80011dc <Mainmenu+0x1cc>)
 80011a0:	f000 fed2 	bl	8001f48 <lcd_send_string>
		break;
 80011a4:	bf00      	nop
	}
}
 80011a6:	bf00      	nop
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	0800baa8 	.word	0x0800baa8
 80011b4:	0800bac0 	.word	0x0800bac0
 80011b8:	0800bad8 	.word	0x0800bad8
 80011bc:	0800baf0 	.word	0x0800baf0
 80011c0:	0800bb08 	.word	0x0800bb08
 80011c4:	0800bb20 	.word	0x0800bb20
 80011c8:	0800bb38 	.word	0x0800bb38
 80011cc:	0800bb50 	.word	0x0800bb50
 80011d0:	0800bb68 	.word	0x0800bb68
 80011d4:	0800bb80 	.word	0x0800bb80
 80011d8:	0800bb98 	.word	0x0800bb98
 80011dc:	0800bbb0 	.word	0x0800bbb0
 80011e0:	0800bbc8 	.word	0x0800bbc8
 80011e4:	0800bbe0 	.word	0x0800bbe0
 80011e8:	0800bbf8 	.word	0x0800bbf8

080011ec <PID_menu>:
void PID_menu(uint8_t line) {
 80011ec:	b590      	push	{r4, r7, lr}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	71fb      	strb	r3, [r7, #7]

	switch (line) {
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	3b01      	subs	r3, #1
 80011fa:	2b03      	cmp	r3, #3
 80011fc:	f200 810c 	bhi.w	8001418 <PID_menu+0x22c>
 8001200:	a201      	add	r2, pc, #4	; (adr r2, 8001208 <PID_menu+0x1c>)
 8001202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001206:	bf00      	nop
 8001208:	08001219 	.word	0x08001219
 800120c:	08001299 	.word	0x08001299
 8001210:	08001319 	.word	0x08001319
 8001214:	08001399 	.word	0x08001399
	case 1:
		sprintf(kp_str, ">Kp = %.2f         ", Kp);
 8001218:	4b81      	ldr	r3, [pc, #516]	; (8001420 <PID_menu+0x234>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff f99b 	bl	8000558 <__aeabi_f2d>
 8001222:	4603      	mov	r3, r0
 8001224:	460c      	mov	r4, r1
 8001226:	461a      	mov	r2, r3
 8001228:	4623      	mov	r3, r4
 800122a:	497e      	ldr	r1, [pc, #504]	; (8001424 <PID_menu+0x238>)
 800122c:	487e      	ldr	r0, [pc, #504]	; (8001428 <PID_menu+0x23c>)
 800122e:	f007 fd65 	bl	8008cfc <siprintf>
		lcd_send_cmd(0x80 | 0x00);
 8001232:	2080      	movs	r0, #128	; 0x80
 8001234:	f000 fdd8 	bl	8001de8 <lcd_send_cmd>
		lcd_send_string(kp_str);
 8001238:	487b      	ldr	r0, [pc, #492]	; (8001428 <PID_menu+0x23c>)
 800123a:	f000 fe85 	bl	8001f48 <lcd_send_string>
		sprintf(ki_str, " Ki = %.2f         ", Ki);
 800123e:	4b7b      	ldr	r3, [pc, #492]	; (800142c <PID_menu+0x240>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff f988 	bl	8000558 <__aeabi_f2d>
 8001248:	4603      	mov	r3, r0
 800124a:	460c      	mov	r4, r1
 800124c:	461a      	mov	r2, r3
 800124e:	4623      	mov	r3, r4
 8001250:	4977      	ldr	r1, [pc, #476]	; (8001430 <PID_menu+0x244>)
 8001252:	4878      	ldr	r0, [pc, #480]	; (8001434 <PID_menu+0x248>)
 8001254:	f007 fd52 	bl	8008cfc <siprintf>
		lcd_send_cmd(0x80 | 0x40);
 8001258:	20c0      	movs	r0, #192	; 0xc0
 800125a:	f000 fdc5 	bl	8001de8 <lcd_send_cmd>
		lcd_send_string(ki_str);
 800125e:	4875      	ldr	r0, [pc, #468]	; (8001434 <PID_menu+0x248>)
 8001260:	f000 fe72 	bl	8001f48 <lcd_send_string>
		sprintf(kd_str, " Kd = %.2f         ", Kd);
 8001264:	4b74      	ldr	r3, [pc, #464]	; (8001438 <PID_menu+0x24c>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff f975 	bl	8000558 <__aeabi_f2d>
 800126e:	4603      	mov	r3, r0
 8001270:	460c      	mov	r4, r1
 8001272:	461a      	mov	r2, r3
 8001274:	4623      	mov	r3, r4
 8001276:	4971      	ldr	r1, [pc, #452]	; (800143c <PID_menu+0x250>)
 8001278:	4871      	ldr	r0, [pc, #452]	; (8001440 <PID_menu+0x254>)
 800127a:	f007 fd3f 	bl	8008cfc <siprintf>
		lcd_send_cmd(0x80 | 0x14);
 800127e:	2094      	movs	r0, #148	; 0x94
 8001280:	f000 fdb2 	bl	8001de8 <lcd_send_cmd>
		lcd_send_string(kd_str);
 8001284:	486e      	ldr	r0, [pc, #440]	; (8001440 <PID_menu+0x254>)
 8001286:	f000 fe5f 	bl	8001f48 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x54);
 800128a:	20d4      	movs	r0, #212	; 0xd4
 800128c:	f000 fdac 	bl	8001de8 <lcd_send_cmd>
		lcd_send_string(" Return to main menu");
 8001290:	486c      	ldr	r0, [pc, #432]	; (8001444 <PID_menu+0x258>)
 8001292:	f000 fe59 	bl	8001f48 <lcd_send_string>
		break;
 8001296:	e0bf      	b.n	8001418 <PID_menu+0x22c>
	case 2:
		sprintf(kp_str, " Kp = %.2f         ", Kp);
 8001298:	4b61      	ldr	r3, [pc, #388]	; (8001420 <PID_menu+0x234>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff f95b 	bl	8000558 <__aeabi_f2d>
 80012a2:	4603      	mov	r3, r0
 80012a4:	460c      	mov	r4, r1
 80012a6:	461a      	mov	r2, r3
 80012a8:	4623      	mov	r3, r4
 80012aa:	4967      	ldr	r1, [pc, #412]	; (8001448 <PID_menu+0x25c>)
 80012ac:	485e      	ldr	r0, [pc, #376]	; (8001428 <PID_menu+0x23c>)
 80012ae:	f007 fd25 	bl	8008cfc <siprintf>
		lcd_send_cmd(0x80 | 0x00);
 80012b2:	2080      	movs	r0, #128	; 0x80
 80012b4:	f000 fd98 	bl	8001de8 <lcd_send_cmd>
		lcd_send_string(kp_str);
 80012b8:	485b      	ldr	r0, [pc, #364]	; (8001428 <PID_menu+0x23c>)
 80012ba:	f000 fe45 	bl	8001f48 <lcd_send_string>
		sprintf(ki_str, ">Ki = %.2f         ", Ki);
 80012be:	4b5b      	ldr	r3, [pc, #364]	; (800142c <PID_menu+0x240>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff f948 	bl	8000558 <__aeabi_f2d>
 80012c8:	4603      	mov	r3, r0
 80012ca:	460c      	mov	r4, r1
 80012cc:	461a      	mov	r2, r3
 80012ce:	4623      	mov	r3, r4
 80012d0:	495e      	ldr	r1, [pc, #376]	; (800144c <PID_menu+0x260>)
 80012d2:	4858      	ldr	r0, [pc, #352]	; (8001434 <PID_menu+0x248>)
 80012d4:	f007 fd12 	bl	8008cfc <siprintf>
		lcd_send_cmd(0x80 | 0x40);
 80012d8:	20c0      	movs	r0, #192	; 0xc0
 80012da:	f000 fd85 	bl	8001de8 <lcd_send_cmd>
		lcd_send_string(ki_str);
 80012de:	4855      	ldr	r0, [pc, #340]	; (8001434 <PID_menu+0x248>)
 80012e0:	f000 fe32 	bl	8001f48 <lcd_send_string>
		sprintf(kd_str, " Kd = %.2f         ", Kd);
 80012e4:	4b54      	ldr	r3, [pc, #336]	; (8001438 <PID_menu+0x24c>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff f935 	bl	8000558 <__aeabi_f2d>
 80012ee:	4603      	mov	r3, r0
 80012f0:	460c      	mov	r4, r1
 80012f2:	461a      	mov	r2, r3
 80012f4:	4623      	mov	r3, r4
 80012f6:	4951      	ldr	r1, [pc, #324]	; (800143c <PID_menu+0x250>)
 80012f8:	4851      	ldr	r0, [pc, #324]	; (8001440 <PID_menu+0x254>)
 80012fa:	f007 fcff 	bl	8008cfc <siprintf>
		lcd_send_cmd(0x80 | 0x14);
 80012fe:	2094      	movs	r0, #148	; 0x94
 8001300:	f000 fd72 	bl	8001de8 <lcd_send_cmd>
		lcd_send_string(kd_str);
 8001304:	484e      	ldr	r0, [pc, #312]	; (8001440 <PID_menu+0x254>)
 8001306:	f000 fe1f 	bl	8001f48 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x54);
 800130a:	20d4      	movs	r0, #212	; 0xd4
 800130c:	f000 fd6c 	bl	8001de8 <lcd_send_cmd>
		lcd_send_string(" Return to main menu");
 8001310:	484c      	ldr	r0, [pc, #304]	; (8001444 <PID_menu+0x258>)
 8001312:	f000 fe19 	bl	8001f48 <lcd_send_string>
		break;
 8001316:	e07f      	b.n	8001418 <PID_menu+0x22c>
	case 3:
		sprintf(kp_str, " Kp = %.2f         ", Kp);
 8001318:	4b41      	ldr	r3, [pc, #260]	; (8001420 <PID_menu+0x234>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff f91b 	bl	8000558 <__aeabi_f2d>
 8001322:	4603      	mov	r3, r0
 8001324:	460c      	mov	r4, r1
 8001326:	461a      	mov	r2, r3
 8001328:	4623      	mov	r3, r4
 800132a:	4947      	ldr	r1, [pc, #284]	; (8001448 <PID_menu+0x25c>)
 800132c:	483e      	ldr	r0, [pc, #248]	; (8001428 <PID_menu+0x23c>)
 800132e:	f007 fce5 	bl	8008cfc <siprintf>
		lcd_send_cmd(0x80 | 0x00);
 8001332:	2080      	movs	r0, #128	; 0x80
 8001334:	f000 fd58 	bl	8001de8 <lcd_send_cmd>
		lcd_send_string(kp_str);
 8001338:	483b      	ldr	r0, [pc, #236]	; (8001428 <PID_menu+0x23c>)
 800133a:	f000 fe05 	bl	8001f48 <lcd_send_string>
		sprintf(ki_str, " Ki = %.2f         ", Ki);
 800133e:	4b3b      	ldr	r3, [pc, #236]	; (800142c <PID_menu+0x240>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff f908 	bl	8000558 <__aeabi_f2d>
 8001348:	4603      	mov	r3, r0
 800134a:	460c      	mov	r4, r1
 800134c:	461a      	mov	r2, r3
 800134e:	4623      	mov	r3, r4
 8001350:	4937      	ldr	r1, [pc, #220]	; (8001430 <PID_menu+0x244>)
 8001352:	4838      	ldr	r0, [pc, #224]	; (8001434 <PID_menu+0x248>)
 8001354:	f007 fcd2 	bl	8008cfc <siprintf>
		lcd_send_cmd(0x80 | 0x40);
 8001358:	20c0      	movs	r0, #192	; 0xc0
 800135a:	f000 fd45 	bl	8001de8 <lcd_send_cmd>
		lcd_send_string(ki_str);
 800135e:	4835      	ldr	r0, [pc, #212]	; (8001434 <PID_menu+0x248>)
 8001360:	f000 fdf2 	bl	8001f48 <lcd_send_string>
		sprintf(kd_str, ">Kd = %.2f         ", Kd);
 8001364:	4b34      	ldr	r3, [pc, #208]	; (8001438 <PID_menu+0x24c>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff f8f5 	bl	8000558 <__aeabi_f2d>
 800136e:	4603      	mov	r3, r0
 8001370:	460c      	mov	r4, r1
 8001372:	461a      	mov	r2, r3
 8001374:	4623      	mov	r3, r4
 8001376:	4936      	ldr	r1, [pc, #216]	; (8001450 <PID_menu+0x264>)
 8001378:	4831      	ldr	r0, [pc, #196]	; (8001440 <PID_menu+0x254>)
 800137a:	f007 fcbf 	bl	8008cfc <siprintf>
		lcd_send_cmd(0x80 | 0x14);
 800137e:	2094      	movs	r0, #148	; 0x94
 8001380:	f000 fd32 	bl	8001de8 <lcd_send_cmd>
		lcd_send_string(kd_str);
 8001384:	482e      	ldr	r0, [pc, #184]	; (8001440 <PID_menu+0x254>)
 8001386:	f000 fddf 	bl	8001f48 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x54);
 800138a:	20d4      	movs	r0, #212	; 0xd4
 800138c:	f000 fd2c 	bl	8001de8 <lcd_send_cmd>
		lcd_send_string(" Return to main menu");
 8001390:	482c      	ldr	r0, [pc, #176]	; (8001444 <PID_menu+0x258>)
 8001392:	f000 fdd9 	bl	8001f48 <lcd_send_string>
		break;
 8001396:	e03f      	b.n	8001418 <PID_menu+0x22c>
	case 4:
		sprintf(kp_str, " Kp = %.2f         ", Kp);
 8001398:	4b21      	ldr	r3, [pc, #132]	; (8001420 <PID_menu+0x234>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff f8db 	bl	8000558 <__aeabi_f2d>
 80013a2:	4603      	mov	r3, r0
 80013a4:	460c      	mov	r4, r1
 80013a6:	461a      	mov	r2, r3
 80013a8:	4623      	mov	r3, r4
 80013aa:	4927      	ldr	r1, [pc, #156]	; (8001448 <PID_menu+0x25c>)
 80013ac:	481e      	ldr	r0, [pc, #120]	; (8001428 <PID_menu+0x23c>)
 80013ae:	f007 fca5 	bl	8008cfc <siprintf>
		lcd_send_cmd(0x80 | 0x00);
 80013b2:	2080      	movs	r0, #128	; 0x80
 80013b4:	f000 fd18 	bl	8001de8 <lcd_send_cmd>
		lcd_send_string(kp_str);
 80013b8:	481b      	ldr	r0, [pc, #108]	; (8001428 <PID_menu+0x23c>)
 80013ba:	f000 fdc5 	bl	8001f48 <lcd_send_string>
		sprintf(ki_str, " Ki = %.2f         ", Ki);
 80013be:	4b1b      	ldr	r3, [pc, #108]	; (800142c <PID_menu+0x240>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff f8c8 	bl	8000558 <__aeabi_f2d>
 80013c8:	4603      	mov	r3, r0
 80013ca:	460c      	mov	r4, r1
 80013cc:	461a      	mov	r2, r3
 80013ce:	4623      	mov	r3, r4
 80013d0:	4917      	ldr	r1, [pc, #92]	; (8001430 <PID_menu+0x244>)
 80013d2:	4818      	ldr	r0, [pc, #96]	; (8001434 <PID_menu+0x248>)
 80013d4:	f007 fc92 	bl	8008cfc <siprintf>
		lcd_send_cmd(0x80 | 0x40);
 80013d8:	20c0      	movs	r0, #192	; 0xc0
 80013da:	f000 fd05 	bl	8001de8 <lcd_send_cmd>
		lcd_send_string(ki_str);
 80013de:	4815      	ldr	r0, [pc, #84]	; (8001434 <PID_menu+0x248>)
 80013e0:	f000 fdb2 	bl	8001f48 <lcd_send_string>
		sprintf(kd_str, " Kd = %.2f         ", Kd);
 80013e4:	4b14      	ldr	r3, [pc, #80]	; (8001438 <PID_menu+0x24c>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff f8b5 	bl	8000558 <__aeabi_f2d>
 80013ee:	4603      	mov	r3, r0
 80013f0:	460c      	mov	r4, r1
 80013f2:	461a      	mov	r2, r3
 80013f4:	4623      	mov	r3, r4
 80013f6:	4911      	ldr	r1, [pc, #68]	; (800143c <PID_menu+0x250>)
 80013f8:	4811      	ldr	r0, [pc, #68]	; (8001440 <PID_menu+0x254>)
 80013fa:	f007 fc7f 	bl	8008cfc <siprintf>
		lcd_send_cmd(0x80 | 0x14);
 80013fe:	2094      	movs	r0, #148	; 0x94
 8001400:	f000 fcf2 	bl	8001de8 <lcd_send_cmd>
		lcd_send_string(kd_str);
 8001404:	480e      	ldr	r0, [pc, #56]	; (8001440 <PID_menu+0x254>)
 8001406:	f000 fd9f 	bl	8001f48 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x54);
 800140a:	20d4      	movs	r0, #212	; 0xd4
 800140c:	f000 fcec 	bl	8001de8 <lcd_send_cmd>
		lcd_send_string(">Return to main menu");
 8001410:	4810      	ldr	r0, [pc, #64]	; (8001454 <PID_menu+0x268>)
 8001412:	f000 fd99 	bl	8001f48 <lcd_send_string>
		break;
 8001416:	bf00      	nop
	}
}
 8001418:	bf00      	nop
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	bd90      	pop	{r4, r7, pc}
 8001420:	2000025c 	.word	0x2000025c
 8001424:	0800bc10 	.word	0x0800bc10
 8001428:	200002e8 	.word	0x200002e8
 800142c:	20000260 	.word	0x20000260
 8001430:	0800bc24 	.word	0x0800bc24
 8001434:	2000029c 	.word	0x2000029c
 8001438:	20000264 	.word	0x20000264
 800143c:	0800bc38 	.word	0x0800bc38
 8001440:	200002c8 	.word	0x200002c8
 8001444:	0800bc4c 	.word	0x0800bc4c
 8001448:	0800bc64 	.word	0x0800bc64
 800144c:	0800bc78 	.word	0x0800bc78
 8001450:	0800bc8c 	.word	0x0800bc8c
 8001454:	0800bca0 	.word	0x0800bca0

08001458 <Speed_menu>:
void Speed_menu(uint8_t line) {
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	71fb      	strb	r3, [r7, #7]
	switch (line) {
 8001462:	79fb      	ldrb	r3, [r7, #7]
 8001464:	2b02      	cmp	r3, #2
 8001466:	d027      	beq.n	80014b8 <Speed_menu+0x60>
 8001468:	2b03      	cmp	r3, #3
 800146a:	d048      	beq.n	80014fe <Speed_menu+0xa6>
 800146c:	2b01      	cmp	r3, #1
 800146e:	d000      	beq.n	8001472 <Speed_menu+0x1a>
		lcd_send_string(Right_str);
		lcd_send_cmd(0x80 | 0x14);
		lcd_send_string(">Return to main menu");
		break;
	}
}
 8001470:	e068      	b.n	8001544 <Speed_menu+0xec>
		sprintf(Left_str, ">Left Eng = %d", Left);
 8001472:	4b36      	ldr	r3, [pc, #216]	; (800154c <Speed_menu+0xf4>)
 8001474:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001478:	461a      	mov	r2, r3
 800147a:	4935      	ldr	r1, [pc, #212]	; (8001550 <Speed_menu+0xf8>)
 800147c:	4835      	ldr	r0, [pc, #212]	; (8001554 <Speed_menu+0xfc>)
 800147e:	f007 fc3d 	bl	8008cfc <siprintf>
		lcd_send_cmd(0x80 | 0x00);
 8001482:	2080      	movs	r0, #128	; 0x80
 8001484:	f000 fcb0 	bl	8001de8 <lcd_send_cmd>
		lcd_send_string(Left_str);
 8001488:	4832      	ldr	r0, [pc, #200]	; (8001554 <Speed_menu+0xfc>)
 800148a:	f000 fd5d 	bl	8001f48 <lcd_send_string>
		sprintf(Right_str, " Right Eng = %d", Right);
 800148e:	4b32      	ldr	r3, [pc, #200]	; (8001558 <Speed_menu+0x100>)
 8001490:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001494:	461a      	mov	r2, r3
 8001496:	4931      	ldr	r1, [pc, #196]	; (800155c <Speed_menu+0x104>)
 8001498:	4831      	ldr	r0, [pc, #196]	; (8001560 <Speed_menu+0x108>)
 800149a:	f007 fc2f 	bl	8008cfc <siprintf>
		lcd_send_cmd(0x80 | 0x40);
 800149e:	20c0      	movs	r0, #192	; 0xc0
 80014a0:	f000 fca2 	bl	8001de8 <lcd_send_cmd>
		lcd_send_string(Right_str);
 80014a4:	482e      	ldr	r0, [pc, #184]	; (8001560 <Speed_menu+0x108>)
 80014a6:	f000 fd4f 	bl	8001f48 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x14);
 80014aa:	2094      	movs	r0, #148	; 0x94
 80014ac:	f000 fc9c 	bl	8001de8 <lcd_send_cmd>
		lcd_send_string(" Return to main menu");
 80014b0:	482c      	ldr	r0, [pc, #176]	; (8001564 <Speed_menu+0x10c>)
 80014b2:	f000 fd49 	bl	8001f48 <lcd_send_string>
		break;
 80014b6:	e045      	b.n	8001544 <Speed_menu+0xec>
		sprintf(Left_str, " Left Eng = %d", Left);
 80014b8:	4b24      	ldr	r3, [pc, #144]	; (800154c <Speed_menu+0xf4>)
 80014ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014be:	461a      	mov	r2, r3
 80014c0:	4929      	ldr	r1, [pc, #164]	; (8001568 <Speed_menu+0x110>)
 80014c2:	4824      	ldr	r0, [pc, #144]	; (8001554 <Speed_menu+0xfc>)
 80014c4:	f007 fc1a 	bl	8008cfc <siprintf>
		lcd_send_cmd(0x80 | 0x00);
 80014c8:	2080      	movs	r0, #128	; 0x80
 80014ca:	f000 fc8d 	bl	8001de8 <lcd_send_cmd>
		lcd_send_string(Left_str);
 80014ce:	4821      	ldr	r0, [pc, #132]	; (8001554 <Speed_menu+0xfc>)
 80014d0:	f000 fd3a 	bl	8001f48 <lcd_send_string>
		sprintf(Right_str, ">Right Eng = %d", Right);
 80014d4:	4b20      	ldr	r3, [pc, #128]	; (8001558 <Speed_menu+0x100>)
 80014d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014da:	461a      	mov	r2, r3
 80014dc:	4923      	ldr	r1, [pc, #140]	; (800156c <Speed_menu+0x114>)
 80014de:	4820      	ldr	r0, [pc, #128]	; (8001560 <Speed_menu+0x108>)
 80014e0:	f007 fc0c 	bl	8008cfc <siprintf>
		lcd_send_cmd(0x80 | 0x40);
 80014e4:	20c0      	movs	r0, #192	; 0xc0
 80014e6:	f000 fc7f 	bl	8001de8 <lcd_send_cmd>
		lcd_send_string(Right_str);
 80014ea:	481d      	ldr	r0, [pc, #116]	; (8001560 <Speed_menu+0x108>)
 80014ec:	f000 fd2c 	bl	8001f48 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x14);
 80014f0:	2094      	movs	r0, #148	; 0x94
 80014f2:	f000 fc79 	bl	8001de8 <lcd_send_cmd>
		lcd_send_string(" Return to main menu");
 80014f6:	481b      	ldr	r0, [pc, #108]	; (8001564 <Speed_menu+0x10c>)
 80014f8:	f000 fd26 	bl	8001f48 <lcd_send_string>
		break;
 80014fc:	e022      	b.n	8001544 <Speed_menu+0xec>
		sprintf(Left_str, " Left Eng = %d", Left);
 80014fe:	4b13      	ldr	r3, [pc, #76]	; (800154c <Speed_menu+0xf4>)
 8001500:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001504:	461a      	mov	r2, r3
 8001506:	4918      	ldr	r1, [pc, #96]	; (8001568 <Speed_menu+0x110>)
 8001508:	4812      	ldr	r0, [pc, #72]	; (8001554 <Speed_menu+0xfc>)
 800150a:	f007 fbf7 	bl	8008cfc <siprintf>
		lcd_send_cmd(0x80 | 0x00);
 800150e:	2080      	movs	r0, #128	; 0x80
 8001510:	f000 fc6a 	bl	8001de8 <lcd_send_cmd>
		lcd_send_string(Left_str);
 8001514:	480f      	ldr	r0, [pc, #60]	; (8001554 <Speed_menu+0xfc>)
 8001516:	f000 fd17 	bl	8001f48 <lcd_send_string>
		sprintf(Right_str, " Right Eng = %d", Right);
 800151a:	4b0f      	ldr	r3, [pc, #60]	; (8001558 <Speed_menu+0x100>)
 800151c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001520:	461a      	mov	r2, r3
 8001522:	490e      	ldr	r1, [pc, #56]	; (800155c <Speed_menu+0x104>)
 8001524:	480e      	ldr	r0, [pc, #56]	; (8001560 <Speed_menu+0x108>)
 8001526:	f007 fbe9 	bl	8008cfc <siprintf>
		lcd_send_cmd(0x80 | 0x40);
 800152a:	20c0      	movs	r0, #192	; 0xc0
 800152c:	f000 fc5c 	bl	8001de8 <lcd_send_cmd>
		lcd_send_string(Right_str);
 8001530:	480b      	ldr	r0, [pc, #44]	; (8001560 <Speed_menu+0x108>)
 8001532:	f000 fd09 	bl	8001f48 <lcd_send_string>
		lcd_send_cmd(0x80 | 0x14);
 8001536:	2094      	movs	r0, #148	; 0x94
 8001538:	f000 fc56 	bl	8001de8 <lcd_send_cmd>
		lcd_send_string(">Return to main menu");
 800153c:	480c      	ldr	r0, [pc, #48]	; (8001570 <Speed_menu+0x118>)
 800153e:	f000 fd03 	bl	8001f48 <lcd_send_string>
		break;
 8001542:	bf00      	nop
}
 8001544:	bf00      	nop
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	20000008 	.word	0x20000008
 8001550:	0800bcb8 	.word	0x0800bcb8
 8001554:	20000288 	.word	0x20000288
 8001558:	2000000a 	.word	0x2000000a
 800155c:	0800bcc8 	.word	0x0800bcc8
 8001560:	20000274 	.word	0x20000274
 8001564:	0800bc4c 	.word	0x0800bc4c
 8001568:	0800bcd8 	.word	0x0800bcd8
 800156c:	0800bce8 	.word	0x0800bce8
 8001570:	0800bca0 	.word	0x0800bca0

08001574 <Color_Studying_process>:
void Color_Studying_process(void) {
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af00      	add	r7, sp, #0
	uint16_t BlackLine[] = {0 ,0 ,0 ,0, 0, 0};
 800157a:	463b      	mov	r3, r7
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
	Color_Read = 1;
 8001584:	4b40      	ldr	r3, [pc, #256]	; (8001688 <Color_Studying_process+0x114>)
 8001586:	2201      	movs	r2, #1
 8001588:	701a      	strb	r2, [r3, #0]
	lcd_send_cmd(0x80 | 0x00);
 800158a:	2080      	movs	r0, #128	; 0x80
 800158c:	f000 fc2c 	bl	8001de8 <lcd_send_cmd>
	lcd_send_string("Out line read      ");
 8001590:	483e      	ldr	r0, [pc, #248]	; (800168c <Color_Studying_process+0x118>)
 8001592:	f000 fcd9 	bl	8001f48 <lcd_send_string>
	lcd_send_cmd(0x80 | 0x40);
 8001596:	20c0      	movs	r0, #192	; 0xc0
 8001598:	f000 fc26 	bl	8001de8 <lcd_send_cmd>
	lcd_send_string("Press B to begin   ");
 800159c:	483c      	ldr	r0, [pc, #240]	; (8001690 <Color_Studying_process+0x11c>)
 800159e:	f000 fcd3 	bl	8001f48 <lcd_send_string>
	while(Color_Read){
 80015a2:	e058      	b.n	8001656 <Color_Studying_process+0xe2>
		if (HAL_GPIO_ReadPin(ButtonB_GPIO_Port, ButtonB_Pin) == 0)
 80015a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015a8:	483a      	ldr	r0, [pc, #232]	; (8001694 <Color_Studying_process+0x120>)
 80015aa:	f003 ffcd 	bl	8005548 <HAL_GPIO_ReadPin>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d150      	bne.n	8001656 <Color_Studying_process+0xe2>
		{
			while (HAL_GPIO_ReadPin(ButtonB_GPIO_Port, ButtonB_Pin) == 0)
 80015b4:	e002      	b.n	80015bc <Color_Studying_process+0x48>
			{
				HAL_Delay(50);
 80015b6:	2032      	movs	r0, #50	; 0x32
 80015b8:	f002 f94c 	bl	8003854 <HAL_Delay>
			while (HAL_GPIO_ReadPin(ButtonB_GPIO_Port, ButtonB_Pin) == 0)
 80015bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015c0:	4834      	ldr	r0, [pc, #208]	; (8001694 <Color_Studying_process+0x120>)
 80015c2:	f003 ffc1 	bl	8005548 <HAL_GPIO_ReadPin>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d0f4      	beq.n	80015b6 <Color_Studying_process+0x42>
			}
			for(int i=0;i<ADC_Sample_Times;i++)
 80015cc:	2300      	movs	r3, #0
 80015ce:	617b      	str	r3, [r7, #20]
 80015d0:	e023      	b.n	800161a <Color_Studying_process+0xa6>
			{
				for(int i=0;i<Number_of_Sensors;i++)
 80015d2:	2300      	movs	r3, #0
 80015d4:	613b      	str	r3, [r7, #16]
 80015d6:	e01a      	b.n	800160e <Color_Studying_process+0x9a>
				{
					if(Sensor_ADC_Value[i] > BlackLine[i])
 80015d8:	4a2f      	ldr	r2, [pc, #188]	; (8001698 <Color_Studying_process+0x124>)
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	f107 0118 	add.w	r1, r7, #24
 80015e8:	440b      	add	r3, r1
 80015ea:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d90a      	bls.n	8001608 <Color_Studying_process+0x94>
					{
						BlackLine[i] = Sensor_ADC_Value[i];
 80015f2:	4a29      	ldr	r2, [pc, #164]	; (8001698 <Color_Studying_process+0x124>)
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	f107 0118 	add.w	r1, r7, #24
 8001602:	440b      	add	r3, r1
 8001604:	f823 2c18 	strh.w	r2, [r3, #-24]
				for(int i=0;i<Number_of_Sensors;i++)
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	3301      	adds	r3, #1
 800160c:	613b      	str	r3, [r7, #16]
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	2b05      	cmp	r3, #5
 8001612:	dde1      	ble.n	80015d8 <Color_Studying_process+0x64>
			for(int i=0;i<ADC_Sample_Times;i++)
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	3301      	adds	r3, #1
 8001618:	617b      	str	r3, [r7, #20]
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001620:	4293      	cmp	r3, r2
 8001622:	ddd6      	ble.n	80015d2 <Color_Studying_process+0x5e>
					}
				}
			}
			for(int i=0;i<Number_of_Sensors;i++)
 8001624:	2300      	movs	r3, #0
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	e00f      	b.n	800164a <Color_Studying_process+0xd6>
			{
				Sensor_Threshold[i]=BlackLine[i]-10;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	f107 0218 	add.w	r2, r7, #24
 8001632:	4413      	add	r3, r2
 8001634:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001638:	3b0a      	subs	r3, #10
 800163a:	b299      	uxth	r1, r3
 800163c:	4a17      	ldr	r2, [pc, #92]	; (800169c <Color_Studying_process+0x128>)
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int i=0;i<Number_of_Sensors;i++)
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	3301      	adds	r3, #1
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	2b05      	cmp	r3, #5
 800164e:	ddec      	ble.n	800162a <Color_Studying_process+0xb6>
			}
			Color_Read = 0;
 8001650:	4b0d      	ldr	r3, [pc, #52]	; (8001688 <Color_Studying_process+0x114>)
 8001652:	2200      	movs	r2, #0
 8001654:	701a      	strb	r2, [r3, #0]
	while(Color_Read){
 8001656:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <Color_Studying_process+0x114>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d1a2      	bne.n	80015a4 <Color_Studying_process+0x30>
		}
	}
	lcd_clear();
 800165e:	f000 fc23 	bl	8001ea8 <lcd_clear>
	lcd_send_cmd(0x80 | 0x00);
 8001662:	2080      	movs	r0, #128	; 0x80
 8001664:	f000 fbc0 	bl	8001de8 <lcd_send_cmd>
	lcd_send_string("Done               ");
 8001668:	480d      	ldr	r0, [pc, #52]	; (80016a0 <Color_Studying_process+0x12c>)
 800166a:	f000 fc6d 	bl	8001f48 <lcd_send_string>
	HAL_Delay(200);
 800166e:	20c8      	movs	r0, #200	; 0xc8
 8001670:	f002 f8f0 	bl	8003854 <HAL_Delay>
	Menu_type = Main_menu;
 8001674:	4b0b      	ldr	r3, [pc, #44]	; (80016a4 <Color_Studying_process+0x130>)
 8001676:	2201      	movs	r2, #1
 8001678:	701a      	strb	r2, [r3, #0]
	lcd_clear();
 800167a:	f000 fc15 	bl	8001ea8 <lcd_clear>
}
 800167e:	bf00      	nop
 8001680:	3718      	adds	r7, #24
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20000002 	.word	0x20000002
 800168c:	0800bcf8 	.word	0x0800bcf8
 8001690:	0800bd0c 	.word	0x0800bd0c
 8001694:	40020800 	.word	0x40020800
 8001698:	200003fc 	.word	0x200003fc
 800169c:	2000000c 	.word	0x2000000c
 80016a0:	0800bd20 	.word	0x0800bd20
 80016a4:	20000001 	.word	0x20000001

080016a8 <LineDetect_show>:
void LineDetect_show(void) {
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x80 | 0x00);
 80016ae:	2080      	movs	r0, #128	; 0x80
 80016b0:	f000 fb9a 	bl	8001de8 <lcd_send_cmd>
	lcd_send_string("Line Detect        ");
 80016b4:	4857      	ldr	r0, [pc, #348]	; (8001814 <LineDetect_show+0x16c>)
 80016b6:	f000 fc47 	bl	8001f48 <lcd_send_string>
	lcd_send_cmd(0x80 | 0x40);
 80016ba:	20c0      	movs	r0, #192	; 0xc0
 80016bc:	f000 fb94 	bl	8001de8 <lcd_send_cmd>
	lcd_send_string("Press C for cancer ");
 80016c0:	4855      	ldr	r0, [pc, #340]	; (8001818 <LineDetect_show+0x170>)
 80016c2:	f000 fc41 	bl	8001f48 <lcd_send_string>
	while (cancer_menu) {
 80016c6:	e099      	b.n	80017fc <LineDetect_show+0x154>
		for (int i = 0; i < 6; i++) {
 80016c8:	2300      	movs	r3, #0
 80016ca:	607b      	str	r3, [r7, #4]
 80016cc:	e092      	b.n	80017f4 <LineDetect_show+0x14c>
			if (Sensor_ADC_Value[0] < Sensor_Threshold[0]) {
 80016ce:	4b53      	ldr	r3, [pc, #332]	; (800181c <LineDetect_show+0x174>)
 80016d0:	881a      	ldrh	r2, [r3, #0]
 80016d2:	4b53      	ldr	r3, [pc, #332]	; (8001820 <LineDetect_show+0x178>)
 80016d4:	881b      	ldrh	r3, [r3, #0]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d205      	bcs.n	80016e6 <LineDetect_show+0x3e>
				lcd_send_cmd(0x80 | 0x16);
 80016da:	2096      	movs	r0, #150	; 0x96
 80016dc:	f000 fb84 	bl	8001de8 <lcd_send_cmd>
				lcd_send_string("1");
 80016e0:	4850      	ldr	r0, [pc, #320]	; (8001824 <LineDetect_show+0x17c>)
 80016e2:	f000 fc31 	bl	8001f48 <lcd_send_string>
			}
			if (Sensor_ADC_Value[1] < Sensor_Threshold[1]) {
 80016e6:	4b4d      	ldr	r3, [pc, #308]	; (800181c <LineDetect_show+0x174>)
 80016e8:	885a      	ldrh	r2, [r3, #2]
 80016ea:	4b4d      	ldr	r3, [pc, #308]	; (8001820 <LineDetect_show+0x178>)
 80016ec:	885b      	ldrh	r3, [r3, #2]
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d205      	bcs.n	80016fe <LineDetect_show+0x56>
				lcd_send_cmd(0x80 | 0x18);
 80016f2:	2098      	movs	r0, #152	; 0x98
 80016f4:	f000 fb78 	bl	8001de8 <lcd_send_cmd>
				lcd_send_string("1");
 80016f8:	484a      	ldr	r0, [pc, #296]	; (8001824 <LineDetect_show+0x17c>)
 80016fa:	f000 fc25 	bl	8001f48 <lcd_send_string>
			}
			if (Sensor_ADC_Value[2] < Sensor_Threshold[2]) {
 80016fe:	4b47      	ldr	r3, [pc, #284]	; (800181c <LineDetect_show+0x174>)
 8001700:	889a      	ldrh	r2, [r3, #4]
 8001702:	4b47      	ldr	r3, [pc, #284]	; (8001820 <LineDetect_show+0x178>)
 8001704:	889b      	ldrh	r3, [r3, #4]
 8001706:	429a      	cmp	r2, r3
 8001708:	d205      	bcs.n	8001716 <LineDetect_show+0x6e>
				lcd_send_cmd(0x80 | 0x1A);
 800170a:	209a      	movs	r0, #154	; 0x9a
 800170c:	f000 fb6c 	bl	8001de8 <lcd_send_cmd>
				lcd_send_string("1");
 8001710:	4844      	ldr	r0, [pc, #272]	; (8001824 <LineDetect_show+0x17c>)
 8001712:	f000 fc19 	bl	8001f48 <lcd_send_string>
			}
			if (Sensor_ADC_Value[3] < Sensor_Threshold[3]) {
 8001716:	4b41      	ldr	r3, [pc, #260]	; (800181c <LineDetect_show+0x174>)
 8001718:	88da      	ldrh	r2, [r3, #6]
 800171a:	4b41      	ldr	r3, [pc, #260]	; (8001820 <LineDetect_show+0x178>)
 800171c:	88db      	ldrh	r3, [r3, #6]
 800171e:	429a      	cmp	r2, r3
 8001720:	d205      	bcs.n	800172e <LineDetect_show+0x86>
				lcd_send_cmd(0x80 | 0x1C);
 8001722:	209c      	movs	r0, #156	; 0x9c
 8001724:	f000 fb60 	bl	8001de8 <lcd_send_cmd>
				lcd_send_string("1");
 8001728:	483e      	ldr	r0, [pc, #248]	; (8001824 <LineDetect_show+0x17c>)
 800172a:	f000 fc0d 	bl	8001f48 <lcd_send_string>
			}
			if (Sensor_ADC_Value[4] < Sensor_Threshold[4]) {
 800172e:	4b3b      	ldr	r3, [pc, #236]	; (800181c <LineDetect_show+0x174>)
 8001730:	891a      	ldrh	r2, [r3, #8]
 8001732:	4b3b      	ldr	r3, [pc, #236]	; (8001820 <LineDetect_show+0x178>)
 8001734:	891b      	ldrh	r3, [r3, #8]
 8001736:	429a      	cmp	r2, r3
 8001738:	d205      	bcs.n	8001746 <LineDetect_show+0x9e>
				lcd_send_cmd(0x80 | 0x1E);
 800173a:	209e      	movs	r0, #158	; 0x9e
 800173c:	f000 fb54 	bl	8001de8 <lcd_send_cmd>
				lcd_send_string("1");
 8001740:	4838      	ldr	r0, [pc, #224]	; (8001824 <LineDetect_show+0x17c>)
 8001742:	f000 fc01 	bl	8001f48 <lcd_send_string>
			}
			if (Sensor_ADC_Value[5] < Sensor_Threshold[5]) {
 8001746:	4b35      	ldr	r3, [pc, #212]	; (800181c <LineDetect_show+0x174>)
 8001748:	895a      	ldrh	r2, [r3, #10]
 800174a:	4b35      	ldr	r3, [pc, #212]	; (8001820 <LineDetect_show+0x178>)
 800174c:	895b      	ldrh	r3, [r3, #10]
 800174e:	429a      	cmp	r2, r3
 8001750:	d205      	bcs.n	800175e <LineDetect_show+0xb6>
				lcd_send_cmd(0x80 | 0x20);
 8001752:	20a0      	movs	r0, #160	; 0xa0
 8001754:	f000 fb48 	bl	8001de8 <lcd_send_cmd>
				lcd_send_string("1");
 8001758:	4832      	ldr	r0, [pc, #200]	; (8001824 <LineDetect_show+0x17c>)
 800175a:	f000 fbf5 	bl	8001f48 <lcd_send_string>
			}
			if (Sensor_ADC_Value[0] > Sensor_Threshold[0]) {
 800175e:	4b2f      	ldr	r3, [pc, #188]	; (800181c <LineDetect_show+0x174>)
 8001760:	881a      	ldrh	r2, [r3, #0]
 8001762:	4b2f      	ldr	r3, [pc, #188]	; (8001820 <LineDetect_show+0x178>)
 8001764:	881b      	ldrh	r3, [r3, #0]
 8001766:	429a      	cmp	r2, r3
 8001768:	d905      	bls.n	8001776 <LineDetect_show+0xce>
				lcd_send_cmd(0x80 | 0x16);
 800176a:	2096      	movs	r0, #150	; 0x96
 800176c:	f000 fb3c 	bl	8001de8 <lcd_send_cmd>
				lcd_send_string(" ");
 8001770:	482d      	ldr	r0, [pc, #180]	; (8001828 <LineDetect_show+0x180>)
 8001772:	f000 fbe9 	bl	8001f48 <lcd_send_string>
			}
			if (Sensor_ADC_Value[1] > Sensor_Threshold[1]) {
 8001776:	4b29      	ldr	r3, [pc, #164]	; (800181c <LineDetect_show+0x174>)
 8001778:	885a      	ldrh	r2, [r3, #2]
 800177a:	4b29      	ldr	r3, [pc, #164]	; (8001820 <LineDetect_show+0x178>)
 800177c:	885b      	ldrh	r3, [r3, #2]
 800177e:	429a      	cmp	r2, r3
 8001780:	d905      	bls.n	800178e <LineDetect_show+0xe6>
				lcd_send_cmd(0x80 | 0x18);
 8001782:	2098      	movs	r0, #152	; 0x98
 8001784:	f000 fb30 	bl	8001de8 <lcd_send_cmd>
				lcd_send_string(" ");
 8001788:	4827      	ldr	r0, [pc, #156]	; (8001828 <LineDetect_show+0x180>)
 800178a:	f000 fbdd 	bl	8001f48 <lcd_send_string>
			}
			if (Sensor_ADC_Value[2] > Sensor_Threshold[2]) {
 800178e:	4b23      	ldr	r3, [pc, #140]	; (800181c <LineDetect_show+0x174>)
 8001790:	889a      	ldrh	r2, [r3, #4]
 8001792:	4b23      	ldr	r3, [pc, #140]	; (8001820 <LineDetect_show+0x178>)
 8001794:	889b      	ldrh	r3, [r3, #4]
 8001796:	429a      	cmp	r2, r3
 8001798:	d905      	bls.n	80017a6 <LineDetect_show+0xfe>
				lcd_send_cmd(0x80 | 0x1A);
 800179a:	209a      	movs	r0, #154	; 0x9a
 800179c:	f000 fb24 	bl	8001de8 <lcd_send_cmd>
				lcd_send_string(" ");
 80017a0:	4821      	ldr	r0, [pc, #132]	; (8001828 <LineDetect_show+0x180>)
 80017a2:	f000 fbd1 	bl	8001f48 <lcd_send_string>
			}
			if (Sensor_ADC_Value[3] > Sensor_Threshold[3]) {
 80017a6:	4b1d      	ldr	r3, [pc, #116]	; (800181c <LineDetect_show+0x174>)
 80017a8:	88da      	ldrh	r2, [r3, #6]
 80017aa:	4b1d      	ldr	r3, [pc, #116]	; (8001820 <LineDetect_show+0x178>)
 80017ac:	88db      	ldrh	r3, [r3, #6]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d905      	bls.n	80017be <LineDetect_show+0x116>
				lcd_send_cmd(0x80 | 0x1C);
 80017b2:	209c      	movs	r0, #156	; 0x9c
 80017b4:	f000 fb18 	bl	8001de8 <lcd_send_cmd>
				lcd_send_string(" ");
 80017b8:	481b      	ldr	r0, [pc, #108]	; (8001828 <LineDetect_show+0x180>)
 80017ba:	f000 fbc5 	bl	8001f48 <lcd_send_string>
			}
			if (Sensor_ADC_Value[4] > Sensor_Threshold[4]) {
 80017be:	4b17      	ldr	r3, [pc, #92]	; (800181c <LineDetect_show+0x174>)
 80017c0:	891a      	ldrh	r2, [r3, #8]
 80017c2:	4b17      	ldr	r3, [pc, #92]	; (8001820 <LineDetect_show+0x178>)
 80017c4:	891b      	ldrh	r3, [r3, #8]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d905      	bls.n	80017d6 <LineDetect_show+0x12e>
				lcd_send_cmd(0x80 | 0x1E);
 80017ca:	209e      	movs	r0, #158	; 0x9e
 80017cc:	f000 fb0c 	bl	8001de8 <lcd_send_cmd>
				lcd_send_string(" ");
 80017d0:	4815      	ldr	r0, [pc, #84]	; (8001828 <LineDetect_show+0x180>)
 80017d2:	f000 fbb9 	bl	8001f48 <lcd_send_string>
			}
			if (Sensor_ADC_Value[5] > Sensor_Threshold[5]) {
 80017d6:	4b11      	ldr	r3, [pc, #68]	; (800181c <LineDetect_show+0x174>)
 80017d8:	895a      	ldrh	r2, [r3, #10]
 80017da:	4b11      	ldr	r3, [pc, #68]	; (8001820 <LineDetect_show+0x178>)
 80017dc:	895b      	ldrh	r3, [r3, #10]
 80017de:	429a      	cmp	r2, r3
 80017e0:	d905      	bls.n	80017ee <LineDetect_show+0x146>
				lcd_send_cmd(0x80 | 0x20);
 80017e2:	20a0      	movs	r0, #160	; 0xa0
 80017e4:	f000 fb00 	bl	8001de8 <lcd_send_cmd>
				lcd_send_string(" ");
 80017e8:	480f      	ldr	r0, [pc, #60]	; (8001828 <LineDetect_show+0x180>)
 80017ea:	f000 fbad 	bl	8001f48 <lcd_send_string>
		for (int i = 0; i < 6; i++) {
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	3301      	adds	r3, #1
 80017f2:	607b      	str	r3, [r7, #4]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2b05      	cmp	r3, #5
 80017f8:	f77f af69 	ble.w	80016ce <LineDetect_show+0x26>
	while (cancer_menu) {
 80017fc:	4b0b      	ldr	r3, [pc, #44]	; (800182c <LineDetect_show+0x184>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	f47f af61 	bne.w	80016c8 <LineDetect_show+0x20>
			}
		}
	}
	lcd_clear();
 8001806:	f000 fb4f 	bl	8001ea8 <lcd_clear>
}
 800180a:	bf00      	nop
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	0800bd34 	.word	0x0800bd34
 8001818:	0800bd48 	.word	0x0800bd48
 800181c:	200003fc 	.word	0x200003fc
 8001820:	2000000c 	.word	0x2000000c
 8001824:	0800bd5c 	.word	0x0800bd5c
 8001828:	0800bd60 	.word	0x0800bd60
 800182c:	20000006 	.word	0x20000006

08001830 <Saving_Process>:

void Saving_Process(void)
{
 8001830:	b598      	push	{r3, r4, r7, lr}
 8001832:	af00      	add	r7, sp, #0
		sprintf(kp_val,"%.2f ",Kp);
 8001834:	4b1d      	ldr	r3, [pc, #116]	; (80018ac <Saving_Process+0x7c>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4618      	mov	r0, r3
 800183a:	f7fe fe8d 	bl	8000558 <__aeabi_f2d>
 800183e:	4603      	mov	r3, r0
 8001840:	460c      	mov	r4, r1
 8001842:	461a      	mov	r2, r3
 8001844:	4623      	mov	r3, r4
 8001846:	491a      	ldr	r1, [pc, #104]	; (80018b0 <Saving_Process+0x80>)
 8001848:	481a      	ldr	r0, [pc, #104]	; (80018b4 <Saving_Process+0x84>)
 800184a:	f007 fa57 	bl	8008cfc <siprintf>
		strcat(string,kp_val);
 800184e:	4919      	ldr	r1, [pc, #100]	; (80018b4 <Saving_Process+0x84>)
 8001850:	4819      	ldr	r0, [pc, #100]	; (80018b8 <Saving_Process+0x88>)
 8001852:	f007 fa73 	bl	8008d3c <strcat>
		sprintf(ki_val,"%.2f ",Ki);
 8001856:	4b19      	ldr	r3, [pc, #100]	; (80018bc <Saving_Process+0x8c>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4618      	mov	r0, r3
 800185c:	f7fe fe7c 	bl	8000558 <__aeabi_f2d>
 8001860:	4603      	mov	r3, r0
 8001862:	460c      	mov	r4, r1
 8001864:	461a      	mov	r2, r3
 8001866:	4623      	mov	r3, r4
 8001868:	4911      	ldr	r1, [pc, #68]	; (80018b0 <Saving_Process+0x80>)
 800186a:	4815      	ldr	r0, [pc, #84]	; (80018c0 <Saving_Process+0x90>)
 800186c:	f007 fa46 	bl	8008cfc <siprintf>
		strcat(string,ki_val);
 8001870:	4913      	ldr	r1, [pc, #76]	; (80018c0 <Saving_Process+0x90>)
 8001872:	4811      	ldr	r0, [pc, #68]	; (80018b8 <Saving_Process+0x88>)
 8001874:	f007 fa62 	bl	8008d3c <strcat>
		sprintf(kd_val,"%.2f ",Kd);
 8001878:	4b12      	ldr	r3, [pc, #72]	; (80018c4 <Saving_Process+0x94>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4618      	mov	r0, r3
 800187e:	f7fe fe6b 	bl	8000558 <__aeabi_f2d>
 8001882:	4603      	mov	r3, r0
 8001884:	460c      	mov	r4, r1
 8001886:	461a      	mov	r2, r3
 8001888:	4623      	mov	r3, r4
 800188a:	4909      	ldr	r1, [pc, #36]	; (80018b0 <Saving_Process+0x80>)
 800188c:	480e      	ldr	r0, [pc, #56]	; (80018c8 <Saving_Process+0x98>)
 800188e:	f007 fa35 	bl	8008cfc <siprintf>
		strcat(string,kd_val);
 8001892:	490d      	ldr	r1, [pc, #52]	; (80018c8 <Saving_Process+0x98>)
 8001894:	4808      	ldr	r0, [pc, #32]	; (80018b8 <Saving_Process+0x88>)
 8001896:	f007 fa51 	bl	8008d3c <strcat>
		Flash_Write_Data(0x08020000, string);
 800189a:	4907      	ldr	r1, [pc, #28]	; (80018b8 <Saving_Process+0x88>)
 800189c:	480b      	ldr	r0, [pc, #44]	; (80018cc <Saving_Process+0x9c>)
 800189e:	f000 f9d7 	bl	8001c50 <Flash_Write_Data>
		HAL_NVIC_SystemReset();
 80018a2:	f002 fe3c 	bl	800451e <HAL_NVIC_SystemReset>
}
 80018a6:	bf00      	nop
 80018a8:	bd98      	pop	{r3, r4, r7, pc}
 80018aa:	bf00      	nop
 80018ac:	2000025c 	.word	0x2000025c
 80018b0:	0800bd64 	.word	0x0800bd64
 80018b4:	20000408 	.word	0x20000408
 80018b8:	200002b4 	.word	0x200002b4
 80018bc:	20000260 	.word	0x20000260
 80018c0:	200004e8 	.word	0x200004e8
 80018c4:	20000264 	.word	0x20000264
 80018c8:	200003f0 	.word	0x200003f0
 80018cc:	08020000 	.word	0x08020000

080018d0 <Wifi_Connect_establish>:
void Wifi_Connect_establish(void)
{
 80018d0:	b590      	push	{r4, r7, lr}
 80018d2:	b08b      	sub	sp, #44	; 0x2c
 80018d4:	af00      	add	r7, sp, #0
	char Rx_Buff[24] = {0};
 80018d6:	1d3b      	adds	r3, r7, #4
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	605a      	str	r2, [r3, #4]
 80018de:	609a      	str	r2, [r3, #8]
 80018e0:	60da      	str	r2, [r3, #12]
 80018e2:	611a      	str	r2, [r3, #16]
 80018e4:	615a      	str	r2, [r3, #20]
	Wifi_Connecting = 1;
 80018e6:	4b36      	ldr	r3, [pc, #216]	; (80019c0 <Wifi_Connect_establish+0xf0>)
 80018e8:	2201      	movs	r2, #1
 80018ea:	701a      	strb	r2, [r3, #0]
	while(Wifi_Connecting){
 80018ec:	e05b      	b.n	80019a6 <Wifi_Connect_establish+0xd6>
//		HAL_UART_Receive_IT(&huart6, Rx_Buff, sizeof(Rx_Buff));
		HAL_UART_Receive(&huart6, Rx_Buff, 24, 5000);
 80018ee:	1d39      	adds	r1, r7, #4
 80018f0:	f241 3388 	movw	r3, #5000	; 0x1388
 80018f4:	2218      	movs	r2, #24
 80018f6:	4833      	ldr	r0, [pc, #204]	; (80019c4 <Wifi_Connect_establish+0xf4>)
 80018f8:	f005 fec5 	bl	8007686 <HAL_UART_Receive>
		char *KpinString = strtok(Rx_Buff," ");
 80018fc:	1d3b      	adds	r3, r7, #4
 80018fe:	4932      	ldr	r1, [pc, #200]	; (80019c8 <Wifi_Connect_establish+0xf8>)
 8001900:	4618      	mov	r0, r3
 8001902:	f008 f851 	bl	80099a8 <strtok>
 8001906:	6278      	str	r0, [r7, #36]	; 0x24
		char *KiinString = strtok(NULL," ");
 8001908:	492f      	ldr	r1, [pc, #188]	; (80019c8 <Wifi_Connect_establish+0xf8>)
 800190a:	2000      	movs	r0, #0
 800190c:	f008 f84c 	bl	80099a8 <strtok>
 8001910:	6238      	str	r0, [r7, #32]
		char *KdinString = strtok(NULL," ");
 8001912:	492d      	ldr	r1, [pc, #180]	; (80019c8 <Wifi_Connect_establish+0xf8>)
 8001914:	2000      	movs	r0, #0
 8001916:	f008 f847 	bl	80099a8 <strtok>
 800191a:	61f8      	str	r0, [r7, #28]
		Kp = strtod(KpinString, NULL);
 800191c:	2100      	movs	r1, #0
 800191e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001920:	f008 f82e 	bl	8009980 <strtod>
 8001924:	ec54 3b10 	vmov	r3, r4, d0
 8001928:	4618      	mov	r0, r3
 800192a:	4621      	mov	r1, r4
 800192c:	f7ff f964 	bl	8000bf8 <__aeabi_d2f>
 8001930:	4602      	mov	r2, r0
 8001932:	4b26      	ldr	r3, [pc, #152]	; (80019cc <Wifi_Connect_establish+0xfc>)
 8001934:	601a      	str	r2, [r3, #0]
		Ki = strtod(KiinString, NULL);
 8001936:	2100      	movs	r1, #0
 8001938:	6a38      	ldr	r0, [r7, #32]
 800193a:	f008 f821 	bl	8009980 <strtod>
 800193e:	ec54 3b10 	vmov	r3, r4, d0
 8001942:	4618      	mov	r0, r3
 8001944:	4621      	mov	r1, r4
 8001946:	f7ff f957 	bl	8000bf8 <__aeabi_d2f>
 800194a:	4602      	mov	r2, r0
 800194c:	4b20      	ldr	r3, [pc, #128]	; (80019d0 <Wifi_Connect_establish+0x100>)
 800194e:	601a      	str	r2, [r3, #0]
		Kd = strtod(KdinString, NULL);
 8001950:	2100      	movs	r1, #0
 8001952:	69f8      	ldr	r0, [r7, #28]
 8001954:	f008 f814 	bl	8009980 <strtod>
 8001958:	ec54 3b10 	vmov	r3, r4, d0
 800195c:	4618      	mov	r0, r3
 800195e:	4621      	mov	r1, r4
 8001960:	f7ff f94a 	bl	8000bf8 <__aeabi_d2f>
 8001964:	4602      	mov	r2, r0
 8001966:	4b1b      	ldr	r3, [pc, #108]	; (80019d4 <Wifi_Connect_establish+0x104>)
 8001968:	601a      	str	r2, [r3, #0]
		if(Kp > 0 && Ki > 0 && Kd > 0)
 800196a:	4b18      	ldr	r3, [pc, #96]	; (80019cc <Wifi_Connect_establish+0xfc>)
 800196c:	edd3 7a00 	vldr	s15, [r3]
 8001970:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001978:	dc00      	bgt.n	800197c <Wifi_Connect_establish+0xac>
 800197a:	e014      	b.n	80019a6 <Wifi_Connect_establish+0xd6>
 800197c:	4b14      	ldr	r3, [pc, #80]	; (80019d0 <Wifi_Connect_establish+0x100>)
 800197e:	edd3 7a00 	vldr	s15, [r3]
 8001982:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800198a:	dc00      	bgt.n	800198e <Wifi_Connect_establish+0xbe>
 800198c:	e00b      	b.n	80019a6 <Wifi_Connect_establish+0xd6>
 800198e:	4b11      	ldr	r3, [pc, #68]	; (80019d4 <Wifi_Connect_establish+0x104>)
 8001990:	edd3 7a00 	vldr	s15, [r3]
 8001994:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800199c:	dc00      	bgt.n	80019a0 <Wifi_Connect_establish+0xd0>
 800199e:	e002      	b.n	80019a6 <Wifi_Connect_establish+0xd6>
		{
				Wifi_Connecting = 0;
 80019a0:	4b07      	ldr	r3, [pc, #28]	; (80019c0 <Wifi_Connect_establish+0xf0>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	701a      	strb	r2, [r3, #0]
	while(Wifi_Connecting){
 80019a6:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <Wifi_Connect_establish+0xf0>)
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d19f      	bne.n	80018ee <Wifi_Connect_establish+0x1e>

		}
	}

		Menu_type = Main_menu;
 80019ae:	4b0a      	ldr	r3, [pc, #40]	; (80019d8 <Wifi_Connect_establish+0x108>)
 80019b0:	2201      	movs	r2, #1
 80019b2:	701a      	strb	r2, [r3, #0]
		lcd_clear();
 80019b4:	f000 fa78 	bl	8001ea8 <lcd_clear>
}
 80019b8:	bf00      	nop
 80019ba:	372c      	adds	r7, #44	; 0x2c
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd90      	pop	{r4, r7, pc}
 80019c0:	20000003 	.word	0x20000003
 80019c4:	2000031c 	.word	0x2000031c
 80019c8:	0800bd60 	.word	0x0800bd60
 80019cc:	2000025c 	.word	0x2000025c
 80019d0:	20000260 	.word	0x20000260
 80019d4:	20000264 	.word	0x20000264
 80019d8:	20000001 	.word	0x20000001

080019dc <executeAction>:
void executeAction(uint8_t line) {
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	71fb      	strb	r3, [r7, #7]
	switch (line) {
 80019e6:	79fb      	ldrb	r3, [r7, #7]
 80019e8:	3b01      	subs	r3, #1
 80019ea:	2b06      	cmp	r3, #6
 80019ec:	f200 80b8 	bhi.w	8001b60 <executeAction+0x184>
 80019f0:	a201      	add	r2, pc, #4	; (adr r2, 80019f8 <executeAction+0x1c>)
 80019f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019f6:	bf00      	nop
 80019f8:	08001a15 	.word	0x08001a15
 80019fc:	08001a71 	.word	0x08001a71
 8001a00:	08001ac7 	.word	0x08001ac7
 8001a04:	08001b09 	.word	0x08001b09
 8001a08:	08001b2d 	.word	0x08001b2d
 8001a0c:	08001b49 	.word	0x08001b49
 8001a10:	08001b55 	.word	0x08001b55
	case 1:
		switch (Menu_type) {
 8001a14:	4b54      	ldr	r3, [pc, #336]	; (8001b68 <executeAction+0x18c>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2b03      	cmp	r3, #3
 8001a1a:	d00a      	beq.n	8001a32 <executeAction+0x56>
 8001a1c:	2b04      	cmp	r3, #4
 8001a1e:	d016      	beq.n	8001a4e <executeAction+0x72>
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d122      	bne.n	8001a6a <executeAction+0x8e>
		case Main_menu:
			cancer_running = 1;
 8001a24:	4b51      	ldr	r3, [pc, #324]	; (8001b6c <executeAction+0x190>)
 8001a26:	2201      	movs	r2, #1
 8001a28:	701a      	strb	r2, [r3, #0]
			Menu_type = Running_Process;
 8001a2a:	4b4f      	ldr	r3, [pc, #316]	; (8001b68 <executeAction+0x18c>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	701a      	strb	r2, [r3, #0]
			break;
 8001a30:	e01b      	b.n	8001a6a <executeAction+0x8e>
		case PID_Menu:
			if (Kp_modify_flag == 0) {
 8001a32:	4b4f      	ldr	r3, [pc, #316]	; (8001b70 <executeAction+0x194>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d105      	bne.n	8001a46 <executeAction+0x6a>
				Kp_modify_flag = 1;
 8001a3a:	4b4d      	ldr	r3, [pc, #308]	; (8001b70 <executeAction+0x194>)
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	701a      	strb	r2, [r3, #0]
				line = 1;
 8001a40:	2301      	movs	r3, #1
 8001a42:	71fb      	strb	r3, [r7, #7]
			} else {
				Kp_modify_flag = 0;
			}
			break;
 8001a44:	e011      	b.n	8001a6a <executeAction+0x8e>
				Kp_modify_flag = 0;
 8001a46:	4b4a      	ldr	r3, [pc, #296]	; (8001b70 <executeAction+0x194>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	701a      	strb	r2, [r3, #0]
			break;
 8001a4c:	e00d      	b.n	8001a6a <executeAction+0x8e>
		case Engine_menu:
			if (Left_modify_flag == 0) {
 8001a4e:	4b49      	ldr	r3, [pc, #292]	; (8001b74 <executeAction+0x198>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d105      	bne.n	8001a62 <executeAction+0x86>
				Left_modify_flag = 1;
 8001a56:	4b47      	ldr	r3, [pc, #284]	; (8001b74 <executeAction+0x198>)
 8001a58:	2201      	movs	r2, #1
 8001a5a:	701a      	strb	r2, [r3, #0]
				line = 1;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	71fb      	strb	r3, [r7, #7]
			} else {
				Left_modify_flag = 0;
			}
			break;
 8001a60:	e002      	b.n	8001a68 <executeAction+0x8c>
				Left_modify_flag = 0;
 8001a62:	4b44      	ldr	r3, [pc, #272]	; (8001b74 <executeAction+0x198>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	701a      	strb	r2, [r3, #0]
			break;
 8001a68:	bf00      	nop

		}
		lcd_clear();
 8001a6a:	f000 fa1d 	bl	8001ea8 <lcd_clear>
		break;
 8001a6e:	e077      	b.n	8001b60 <executeAction+0x184>

	case 2:
		switch (Menu_type) {
 8001a70:	4b3d      	ldr	r3, [pc, #244]	; (8001b68 <executeAction+0x18c>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	2b03      	cmp	r3, #3
 8001a76:	d007      	beq.n	8001a88 <executeAction+0xac>
 8001a78:	2b04      	cmp	r3, #4
 8001a7a:	d013      	beq.n	8001aa4 <executeAction+0xc8>
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d11f      	bne.n	8001ac0 <executeAction+0xe4>
		case Main_menu:
			Menu_type = Color_Processing;
 8001a80:	4b39      	ldr	r3, [pc, #228]	; (8001b68 <executeAction+0x18c>)
 8001a82:	2202      	movs	r2, #2
 8001a84:	701a      	strb	r2, [r3, #0]
			break;
 8001a86:	e01b      	b.n	8001ac0 <executeAction+0xe4>
		case PID_Menu:
			if (Ki_modify_flag == 0) {
 8001a88:	4b3b      	ldr	r3, [pc, #236]	; (8001b78 <executeAction+0x19c>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d105      	bne.n	8001a9c <executeAction+0xc0>
				Ki_modify_flag = 1;
 8001a90:	4b39      	ldr	r3, [pc, #228]	; (8001b78 <executeAction+0x19c>)
 8001a92:	2201      	movs	r2, #1
 8001a94:	701a      	strb	r2, [r3, #0]
				line = 2;
 8001a96:	2302      	movs	r3, #2
 8001a98:	71fb      	strb	r3, [r7, #7]
			} else {
				Ki_modify_flag = 0;
			}
			break;
 8001a9a:	e011      	b.n	8001ac0 <executeAction+0xe4>
				Ki_modify_flag = 0;
 8001a9c:	4b36      	ldr	r3, [pc, #216]	; (8001b78 <executeAction+0x19c>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	701a      	strb	r2, [r3, #0]
			break;
 8001aa2:	e00d      	b.n	8001ac0 <executeAction+0xe4>
		case Engine_menu:
			if (Right_modify_flag == 0) {
 8001aa4:	4b35      	ldr	r3, [pc, #212]	; (8001b7c <executeAction+0x1a0>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d105      	bne.n	8001ab8 <executeAction+0xdc>
				Right_modify_flag = 1;
 8001aac:	4b33      	ldr	r3, [pc, #204]	; (8001b7c <executeAction+0x1a0>)
 8001aae:	2201      	movs	r2, #1
 8001ab0:	701a      	strb	r2, [r3, #0]
				line = 2;
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	71fb      	strb	r3, [r7, #7]
			} else {
				Right_modify_flag = 0;
			}
			break;
 8001ab6:	e002      	b.n	8001abe <executeAction+0xe2>
				Right_modify_flag = 0;
 8001ab8:	4b30      	ldr	r3, [pc, #192]	; (8001b7c <executeAction+0x1a0>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	701a      	strb	r2, [r3, #0]
			break;
 8001abe:	bf00      	nop
		}
		lcd_clear();
 8001ac0:	f000 f9f2 	bl	8001ea8 <lcd_clear>
		break;
 8001ac4:	e04c      	b.n	8001b60 <executeAction+0x184>

	case 3:
		switch (Menu_type) {
 8001ac6:	4b28      	ldr	r3, [pc, #160]	; (8001b68 <executeAction+0x18c>)
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	2b03      	cmp	r3, #3
 8001acc:	d007      	beq.n	8001ade <executeAction+0x102>
 8001ace:	2b04      	cmp	r3, #4
 8001ad0:	d013      	beq.n	8001afa <executeAction+0x11e>
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d115      	bne.n	8001b02 <executeAction+0x126>
		case Main_menu:
			Menu_type = PID_Menu;
 8001ad6:	4b24      	ldr	r3, [pc, #144]	; (8001b68 <executeAction+0x18c>)
 8001ad8:	2203      	movs	r2, #3
 8001ada:	701a      	strb	r2, [r3, #0]
			break;
 8001adc:	e011      	b.n	8001b02 <executeAction+0x126>
		case PID_Menu:
			if (Kd_modify_flag == 0) {
 8001ade:	4b28      	ldr	r3, [pc, #160]	; (8001b80 <executeAction+0x1a4>)
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d105      	bne.n	8001af2 <executeAction+0x116>
				Kd_modify_flag = 1;
 8001ae6:	4b26      	ldr	r3, [pc, #152]	; (8001b80 <executeAction+0x1a4>)
 8001ae8:	2201      	movs	r2, #1
 8001aea:	701a      	strb	r2, [r3, #0]
				line = 3;
 8001aec:	2303      	movs	r3, #3
 8001aee:	71fb      	strb	r3, [r7, #7]
			} else {
				Kd_modify_flag = 0;
			}
			break;
 8001af0:	e007      	b.n	8001b02 <executeAction+0x126>
				Kd_modify_flag = 0;
 8001af2:	4b23      	ldr	r3, [pc, #140]	; (8001b80 <executeAction+0x1a4>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	701a      	strb	r2, [r3, #0]
			break;
 8001af8:	e003      	b.n	8001b02 <executeAction+0x126>
		case Engine_menu:
			Menu_type = Main_menu;
 8001afa:	4b1b      	ldr	r3, [pc, #108]	; (8001b68 <executeAction+0x18c>)
 8001afc:	2201      	movs	r2, #1
 8001afe:	701a      	strb	r2, [r3, #0]
			break;
 8001b00:	bf00      	nop

		}
		lcd_clear();
 8001b02:	f000 f9d1 	bl	8001ea8 <lcd_clear>
		break;
 8001b06:	e02b      	b.n	8001b60 <executeAction+0x184>

	case 4:
		switch (Menu_type) {
 8001b08:	4b17      	ldr	r3, [pc, #92]	; (8001b68 <executeAction+0x18c>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d002      	beq.n	8001b16 <executeAction+0x13a>
 8001b10:	2b03      	cmp	r3, #3
 8001b12:	d004      	beq.n	8001b1e <executeAction+0x142>
 8001b14:	e007      	b.n	8001b26 <executeAction+0x14a>
		case Main_menu:
			Menu_type = Engine_menu;
 8001b16:	4b14      	ldr	r3, [pc, #80]	; (8001b68 <executeAction+0x18c>)
 8001b18:	2204      	movs	r2, #4
 8001b1a:	701a      	strb	r2, [r3, #0]
			break;
 8001b1c:	e003      	b.n	8001b26 <executeAction+0x14a>
		case PID_Menu:
			Menu_type = Main_menu;
 8001b1e:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <executeAction+0x18c>)
 8001b20:	2201      	movs	r2, #1
 8001b22:	701a      	strb	r2, [r3, #0]
			break;
 8001b24:	bf00      	nop
		}
		lcd_clear();
 8001b26:	f000 f9bf 	bl	8001ea8 <lcd_clear>
		break;
 8001b2a:	e019      	b.n	8001b60 <executeAction+0x184>

	case 5:
		switch (Menu_type) {
 8001b2c:	4b0e      	ldr	r3, [pc, #56]	; (8001b68 <executeAction+0x18c>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d106      	bne.n	8001b42 <executeAction+0x166>
		case Main_menu:
			cancer_menu = 1;
 8001b34:	4b13      	ldr	r3, [pc, #76]	; (8001b84 <executeAction+0x1a8>)
 8001b36:	2201      	movs	r2, #1
 8001b38:	701a      	strb	r2, [r3, #0]
			Menu_type = LineDetect_Show;
 8001b3a:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <executeAction+0x18c>)
 8001b3c:	2205      	movs	r2, #5
 8001b3e:	701a      	strb	r2, [r3, #0]
			break;
 8001b40:	bf00      	nop
		}
		lcd_clear();
 8001b42:	f000 f9b1 	bl	8001ea8 <lcd_clear>
		break;
 8001b46:	e00b      	b.n	8001b60 <executeAction+0x184>

	case 6:
		Saving_Process();
 8001b48:	f7ff fe72 	bl	8001830 <Saving_Process>
		Menu_type = Main_menu;
 8001b4c:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <executeAction+0x18c>)
 8001b4e:	2201      	movs	r2, #1
 8001b50:	701a      	strb	r2, [r3, #0]
		break;
 8001b52:	e005      	b.n	8001b60 <executeAction+0x184>

	case 7:
		Menu_type = Wifi_connect;
 8001b54:	4b04      	ldr	r3, [pc, #16]	; (8001b68 <executeAction+0x18c>)
 8001b56:	2206      	movs	r2, #6
 8001b58:	701a      	strb	r2, [r3, #0]
		lcd_clear();
 8001b5a:	f000 f9a5 	bl	8001ea8 <lcd_clear>
		break;
 8001b5e:	bf00      	nop
	}
}
 8001b60:	bf00      	nop
 8001b62:	3708      	adds	r7, #8
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	20000001 	.word	0x20000001
 8001b6c:	20000007 	.word	0x20000007
 8001b70:	20000255 	.word	0x20000255
 8001b74:	20000258 	.word	0x20000258
 8001b78:	20000256 	.word	0x20000256
 8001b7c:	20000259 	.word	0x20000259
 8001b80:	20000257 	.word	0x20000257
 8001b84:	20000006 	.word	0x20000006

08001b88 <GetSector>:
  * @brief  Gets the sector of a given address
  * @param  None
  * @retval The sector of a given address
  */
static uint32_t GetSector(uint32_t Address)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 8001b90:	2300      	movs	r3, #0
 8001b92:	60fb      	str	r3, [r7, #12]

  if((Address < 0x08003FFF) && (Address >= 0x08000000))
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	4a23      	ldr	r2, [pc, #140]	; (8001c24 <GetSector+0x9c>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d806      	bhi.n	8001baa <GetSector+0x22>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001ba2:	d302      	bcc.n	8001baa <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	60fb      	str	r3, [r7, #12]
 8001ba8:	e035      	b.n	8001c16 <GetSector+0x8e>
  }
  else if((Address < 0x08007FFF) && (Address >= 0x08004000))
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a1e      	ldr	r2, [pc, #120]	; (8001c28 <GetSector+0xa0>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d806      	bhi.n	8001bc0 <GetSector+0x38>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a1d      	ldr	r2, [pc, #116]	; (8001c2c <GetSector+0xa4>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d902      	bls.n	8001bc0 <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	60fb      	str	r3, [r7, #12]
 8001bbe:	e02a      	b.n	8001c16 <GetSector+0x8e>
  }
  else if((Address < 0x0800BFFF) && (Address >= 0x08008000))
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	4a1b      	ldr	r2, [pc, #108]	; (8001c30 <GetSector+0xa8>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d806      	bhi.n	8001bd6 <GetSector+0x4e>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	4a1a      	ldr	r2, [pc, #104]	; (8001c34 <GetSector+0xac>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d902      	bls.n	8001bd6 <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	60fb      	str	r3, [r7, #12]
 8001bd4:	e01f      	b.n	8001c16 <GetSector+0x8e>
  }
  else if((Address < 0x0800FFFF) && (Address >= 0x0800C000))
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a17      	ldr	r2, [pc, #92]	; (8001c38 <GetSector+0xb0>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d806      	bhi.n	8001bec <GetSector+0x64>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a16      	ldr	r2, [pc, #88]	; (8001c3c <GetSector+0xb4>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d902      	bls.n	8001bec <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;
 8001be6:	2303      	movs	r3, #3
 8001be8:	60fb      	str	r3, [r7, #12]
 8001bea:	e014      	b.n	8001c16 <GetSector+0x8e>
  }
  else if((Address < 0x0801FFFF) && (Address >= 0x08010000))
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	4a14      	ldr	r2, [pc, #80]	; (8001c40 <GetSector+0xb8>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d806      	bhi.n	8001c02 <GetSector+0x7a>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4a13      	ldr	r2, [pc, #76]	; (8001c44 <GetSector+0xbc>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d902      	bls.n	8001c02 <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;
 8001bfc:	2304      	movs	r3, #4
 8001bfe:	60fb      	str	r3, [r7, #12]
 8001c00:	e009      	b.n	8001c16 <GetSector+0x8e>
  }
  else if((Address < 0x0803FFFF) && (Address >= 0x08020000))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a10      	ldr	r2, [pc, #64]	; (8001c48 <GetSector+0xc0>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d805      	bhi.n	8001c16 <GetSector+0x8e>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a0f      	ldr	r2, [pc, #60]	; (8001c4c <GetSector+0xc4>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d901      	bls.n	8001c16 <GetSector+0x8e>
  {
    sector = FLASH_SECTOR_5;
 8001c12:	2305      	movs	r3, #5
 8001c14:	60fb      	str	r3, [r7, #12]
  }
  else if (Address < 0x081FFFFF) && (Address >= 0x081E0000)
  {
    sector = FLASH_SECTOR_23;
  }*/
  return sector;
 8001c16:	68fb      	ldr	r3, [r7, #12]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3714      	adds	r7, #20
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	08003ffe 	.word	0x08003ffe
 8001c28:	08007ffe 	.word	0x08007ffe
 8001c2c:	08003fff 	.word	0x08003fff
 8001c30:	0800bffe 	.word	0x0800bffe
 8001c34:	08007fff 	.word	0x08007fff
 8001c38:	0800fffe 	.word	0x0800fffe
 8001c3c:	0800bfff 	.word	0x0800bfff
 8001c40:	0801fffe 	.word	0x0801fffe
 8001c44:	0800ffff 	.word	0x0800ffff
 8001c48:	0803fffe 	.word	0x0803fffe
 8001c4c:	0801ffff 	.word	0x0801ffff

08001c50 <Flash_Write_Data>:
}*/



uint32_t Flash_Write_Data (uint32_t StartSectorAddress, uint32_t * DATA_32)
{
 8001c50:	b590      	push	{r4, r7, lr}
 8001c52:	b089      	sub	sp, #36	; 0x24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	int sofar=0;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	61fb      	str	r3, [r7, #28]

	int numberofwords = (strlen(DATA_32)/4) + ((strlen(DATA_32) % 4) != 0);
 8001c5e:	6838      	ldr	r0, [r7, #0]
 8001c60:	f7fe fabe 	bl	80001e0 <strlen>
 8001c64:	4603      	mov	r3, r0
 8001c66:	089c      	lsrs	r4, r3, #2
 8001c68:	6838      	ldr	r0, [r7, #0]
 8001c6a:	f7fe fab9 	bl	80001e0 <strlen>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	f003 0303 	and.w	r3, r3, #3
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	bf14      	ite	ne
 8001c78:	2301      	movne	r3, #1
 8001c7a:	2300      	moveq	r3, #0
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	4423      	add	r3, r4
 8001c80:	61bb      	str	r3, [r7, #24]


	 /* Unlock the Flash to enable the flash control register access *************/
	  HAL_FLASH_Unlock();
 8001c82:	f003 f841 	bl	8004d08 <HAL_FLASH_Unlock>

	  /* Erase the user Flash area */

	  /* Get the number of sector to erase from 1st sector */

	  uint32_t StartSector = GetSector(StartSectorAddress);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f7ff ff7e 	bl	8001b88 <GetSector>
 8001c8c:	6178      	str	r0, [r7, #20]
	  uint32_t EndSectorAddress = StartSectorAddress + numberofwords*4;
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	461a      	mov	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4413      	add	r3, r2
 8001c98:	613b      	str	r3, [r7, #16]
	  uint32_t EndSector = GetSector(EndSectorAddress);
 8001c9a:	6938      	ldr	r0, [r7, #16]
 8001c9c:	f7ff ff74 	bl	8001b88 <GetSector>
 8001ca0:	60f8      	str	r0, [r7, #12]

	  /* Fill EraseInit structure*/
	  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8001ca2:	4b21      	ldr	r3, [pc, #132]	; (8001d28 <Flash_Write_Data+0xd8>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
	  EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8001ca8:	4b1f      	ldr	r3, [pc, #124]	; (8001d28 <Flash_Write_Data+0xd8>)
 8001caa:	2202      	movs	r2, #2
 8001cac:	611a      	str	r2, [r3, #16]
	  EraseInitStruct.Sector        = StartSector;
 8001cae:	4a1e      	ldr	r2, [pc, #120]	; (8001d28 <Flash_Write_Data+0xd8>)
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	6093      	str	r3, [r2, #8]
	  EraseInitStruct.NbSectors     = (EndSector - StartSector) + 1;
 8001cb4:	68fa      	ldr	r2, [r7, #12]
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	3301      	adds	r3, #1
 8001cbc:	4a1a      	ldr	r2, [pc, #104]	; (8001d28 <Flash_Write_Data+0xd8>)
 8001cbe:	60d3      	str	r3, [r2, #12]

	  /* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
	     you have to make sure that these data are rewritten before they are accessed during code
	     execution. If this cannot be done safely, it is recommended to flush the caches by setting the
	     DCRST and ICRST bits in the FLASH_CR register. */
	  if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 8001cc0:	f107 0308 	add.w	r3, r7, #8
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	4818      	ldr	r0, [pc, #96]	; (8001d28 <Flash_Write_Data+0xd8>)
 8001cc8:	f003 f99a 	bl	8005000 <HAL_FLASHEx_Erase>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d01e      	beq.n	8001d10 <Flash_Write_Data+0xc0>
	  {
		  return HAL_FLASH_GetError ();
 8001cd2:	f003 f84b 	bl	8004d6c <HAL_FLASH_GetError>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	e021      	b.n	8001d1e <Flash_Write_Data+0xce>
	  /* Program the user Flash area word by word
	    (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartSectorAddress, DATA_32[sofar]) == HAL_OK)
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	683a      	ldr	r2, [r7, #0]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f04f 0400 	mov.w	r4, #0
 8001ce8:	461a      	mov	r2, r3
 8001cea:	4623      	mov	r3, r4
 8001cec:	6879      	ldr	r1, [r7, #4]
 8001cee:	2002      	movs	r0, #2
 8001cf0:	f002 ffb6 	bl	8004c60 <HAL_FLASH_Program>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d106      	bne.n	8001d08 <Flash_Write_Data+0xb8>
	     {
	    	 StartSectorAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	3304      	adds	r3, #4
 8001cfe:	607b      	str	r3, [r7, #4]
	    	 sofar++;
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	3301      	adds	r3, #1
 8001d04:	61fb      	str	r3, [r7, #28]
 8001d06:	e003      	b.n	8001d10 <Flash_Write_Data+0xc0>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 8001d08:	f003 f830 	bl	8004d6c <HAL_FLASH_GetError>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	e006      	b.n	8001d1e <Flash_Write_Data+0xce>
	   while (sofar<numberofwords)
 8001d10:	69fa      	ldr	r2, [r7, #28]
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	dbe0      	blt.n	8001cda <Flash_Write_Data+0x8a>
	     }
	   }

	  /* Lock the Flash to disable the flash control register access (recommended
	     to protect the FLASH memory against possible unwanted operation) *********/
	  HAL_FLASH_Lock();
 8001d18:	f003 f818 	bl	8004d4c <HAL_FLASH_Lock>

	   return 0;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3724      	adds	r7, #36	; 0x24
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd90      	pop	{r4, r7, pc}
 8001d26:	bf00      	nop
 8001d28:	20000240 	.word	0x20000240

08001d2c <Flash_Read_Data>:


void Flash_Read_Data (uint32_t StartSectorAddress, __IO uint32_t * DATA_32)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
	while (1)
	{

		*DATA_32 = *(__IO uint32_t *)StartSectorAddress;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	601a      	str	r2, [r3, #0]
		if (*DATA_32 == 0xffffffff)
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d46:	d103      	bne.n	8001d50 <Flash_Read_Data+0x24>
		{
			*DATA_32 = '\0';
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
			break;
 8001d4e:	e006      	b.n	8001d5e <Flash_Read_Data+0x32>
		}
		StartSectorAddress += 4;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	3304      	adds	r3, #4
 8001d54:	607b      	str	r3, [r7, #4]
		DATA_32++;
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	3304      	adds	r3, #4
 8001d5a:	603b      	str	r3, [r7, #0]
		*DATA_32 = *(__IO uint32_t *)StartSectorAddress;
 8001d5c:	e7eb      	b.n	8001d36 <Flash_Read_Data+0xa>
	}
}
 8001d5e:	bf00      	nop
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr

08001d6a <Convert_To_Str>:

void Convert_To_Str (uint32_t *data, char *str)
{
 8001d6a:	b590      	push	{r4, r7, lr}
 8001d6c:	b085      	sub	sp, #20
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
 8001d72:	6039      	str	r1, [r7, #0]
	int numberofbytes = ((strlen(data)/4) + ((strlen(data) % 4) != 0)) *4;
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f7fe fa33 	bl	80001e0 <strlen>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	089c      	lsrs	r4, r3, #2
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f7fe fa2e 	bl	80001e0 <strlen>
 8001d84:	4603      	mov	r3, r0
 8001d86:	f003 0303 	and.w	r3, r3, #3
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	bf14      	ite	ne
 8001d8e:	2301      	movne	r3, #1
 8001d90:	2300      	moveq	r3, #0
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	4423      	add	r3, r4
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	60bb      	str	r3, [r7, #8]

	for (int i=0; i<numberofbytes; i++)
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	e01b      	b.n	8001dd8 <Convert_To_Str+0x6e>
	{
		str[i] = data[i/4]>>(8*(i%4));
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	da00      	bge.n	8001da8 <Convert_To_Str+0x3e>
 8001da6:	3303      	adds	r3, #3
 8001da8:	109b      	asrs	r3, r3, #2
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	4413      	add	r3, r2
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	4259      	negs	r1, r3
 8001db6:	f003 0303 	and.w	r3, r3, #3
 8001dba:	f001 0103 	and.w	r1, r1, #3
 8001dbe:	bf58      	it	pl
 8001dc0:	424b      	negpl	r3, r1
 8001dc2:	00db      	lsls	r3, r3, #3
 8001dc4:	fa22 f103 	lsr.w	r1, r2, r3
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	683a      	ldr	r2, [r7, #0]
 8001dcc:	4413      	add	r3, r2
 8001dce:	b2ca      	uxtb	r2, r1
 8001dd0:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<numberofbytes; i++)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	68fa      	ldr	r2, [r7, #12]
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	dbdf      	blt.n	8001da0 <Convert_To_Str+0x36>
	}
}
 8001de0:	bf00      	nop
 8001de2:	3714      	adds	r7, #20
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd90      	pop	{r4, r7, pc}

08001de8 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c3;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af02      	add	r7, sp, #8
 8001dee:	4603      	mov	r3, r0
 8001df0:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8001df2:	79fb      	ldrb	r3, [r7, #7]
 8001df4:	f023 030f 	bic.w	r3, r3, #15
 8001df8:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8001dfa:	79fb      	ldrb	r3, [r7, #7]
 8001dfc:	011b      	lsls	r3, r3, #4
 8001dfe:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001e00:	7bfb      	ldrb	r3, [r7, #15]
 8001e02:	f043 030c 	orr.w	r3, r3, #12
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8001e0a:	7bfb      	ldrb	r3, [r7, #15]
 8001e0c:	f043 0308 	orr.w	r3, r3, #8
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001e14:	7bbb      	ldrb	r3, [r7, #14]
 8001e16:	f043 030c 	orr.w	r3, r3, #12
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8001e1e:	7bbb      	ldrb	r3, [r7, #14]
 8001e20:	f043 0308 	orr.w	r3, r3, #8
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c3, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001e28:	f107 0208 	add.w	r2, r7, #8
 8001e2c:	2364      	movs	r3, #100	; 0x64
 8001e2e:	9300      	str	r3, [sp, #0]
 8001e30:	2304      	movs	r3, #4
 8001e32:	214e      	movs	r1, #78	; 0x4e
 8001e34:	4803      	ldr	r0, [pc, #12]	; (8001e44 <lcd_send_cmd+0x5c>)
 8001e36:	f003 fd09 	bl	800584c <HAL_I2C_Master_Transmit>
}
 8001e3a:	bf00      	nop
 8001e3c:	3710      	adds	r7, #16
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	2000035c 	.word	0x2000035c

08001e48 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af02      	add	r7, sp, #8
 8001e4e:	4603      	mov	r3, r0
 8001e50:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8001e52:	79fb      	ldrb	r3, [r7, #7]
 8001e54:	f023 030f 	bic.w	r3, r3, #15
 8001e58:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8001e5a:	79fb      	ldrb	r3, [r7, #7]
 8001e5c:	011b      	lsls	r3, r3, #4
 8001e5e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 8001e60:	7bfb      	ldrb	r3, [r7, #15]
 8001e62:	f043 030d 	orr.w	r3, r3, #13
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 8001e6a:	7bfb      	ldrb	r3, [r7, #15]
 8001e6c:	f043 0309 	orr.w	r3, r3, #9
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 8001e74:	7bbb      	ldrb	r3, [r7, #14]
 8001e76:	f043 030d 	orr.w	r3, r3, #13
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 8001e7e:	7bbb      	ldrb	r3, [r7, #14]
 8001e80:	f043 0309 	orr.w	r3, r3, #9
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c3, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001e88:	f107 0208 	add.w	r2, r7, #8
 8001e8c:	2364      	movs	r3, #100	; 0x64
 8001e8e:	9300      	str	r3, [sp, #0]
 8001e90:	2304      	movs	r3, #4
 8001e92:	214e      	movs	r1, #78	; 0x4e
 8001e94:	4803      	ldr	r0, [pc, #12]	; (8001ea4 <lcd_send_data+0x5c>)
 8001e96:	f003 fcd9 	bl	800584c <HAL_I2C_Master_Transmit>
}
 8001e9a:	bf00      	nop
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	2000035c 	.word	0x2000035c

08001ea8 <lcd_clear>:

void lcd_clear (void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x00);
 8001eae:	2000      	movs	r0, #0
 8001eb0:	f7ff ff9a 	bl	8001de8 <lcd_send_cmd>
	for (int i=0; i<100; i++)
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	607b      	str	r3, [r7, #4]
 8001eb8:	e005      	b.n	8001ec6 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8001eba:	2020      	movs	r0, #32
 8001ebc:	f7ff ffc4 	bl	8001e48 <lcd_send_data>
	for (int i=0; i<100; i++)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	607b      	str	r3, [r7, #4]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2b63      	cmp	r3, #99	; 0x63
 8001eca:	ddf6      	ble.n	8001eba <lcd_clear+0x12>
	}
}
 8001ecc:	bf00      	nop
 8001ece:	3708      	adds	r7, #8
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <lcd_init>:

void lcd_init (void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001ed8:	2032      	movs	r0, #50	; 0x32
 8001eda:	f001 fcbb 	bl	8003854 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001ede:	2030      	movs	r0, #48	; 0x30
 8001ee0:	f7ff ff82 	bl	8001de8 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001ee4:	2005      	movs	r0, #5
 8001ee6:	f001 fcb5 	bl	8003854 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001eea:	2030      	movs	r0, #48	; 0x30
 8001eec:	f7ff ff7c 	bl	8001de8 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8001ef0:	2001      	movs	r0, #1
 8001ef2:	f001 fcaf 	bl	8003854 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001ef6:	2030      	movs	r0, #48	; 0x30
 8001ef8:	f7ff ff76 	bl	8001de8 <lcd_send_cmd>
	HAL_Delay(10);
 8001efc:	200a      	movs	r0, #10
 8001efe:	f001 fca9 	bl	8003854 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001f02:	2020      	movs	r0, #32
 8001f04:	f7ff ff70 	bl	8001de8 <lcd_send_cmd>
	HAL_Delay(10);
 8001f08:	200a      	movs	r0, #10
 8001f0a:	f001 fca3 	bl	8003854 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001f0e:	2028      	movs	r0, #40	; 0x28
 8001f10:	f7ff ff6a 	bl	8001de8 <lcd_send_cmd>
	HAL_Delay(1);
 8001f14:	2001      	movs	r0, #1
 8001f16:	f001 fc9d 	bl	8003854 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001f1a:	2008      	movs	r0, #8
 8001f1c:	f7ff ff64 	bl	8001de8 <lcd_send_cmd>
	HAL_Delay(1);
 8001f20:	2001      	movs	r0, #1
 8001f22:	f001 fc97 	bl	8003854 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001f26:	2001      	movs	r0, #1
 8001f28:	f7ff ff5e 	bl	8001de8 <lcd_send_cmd>
	HAL_Delay(1);
 8001f2c:	2001      	movs	r0, #1
 8001f2e:	f001 fc91 	bl	8003854 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001f32:	2006      	movs	r0, #6
 8001f34:	f7ff ff58 	bl	8001de8 <lcd_send_cmd>
	HAL_Delay(1);
 8001f38:	2001      	movs	r0, #1
 8001f3a:	f001 fc8b 	bl	8003854 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001f3e:	200c      	movs	r0, #12
 8001f40:	f7ff ff52 	bl	8001de8 <lcd_send_cmd>
}
 8001f44:	bf00      	nop
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001f50:	e006      	b.n	8001f60 <lcd_send_string+0x18>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	1c5a      	adds	r2, r3, #1
 8001f56:	607a      	str	r2, [r7, #4]
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7ff ff74 	bl	8001e48 <lcd_send_data>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d1f4      	bne.n	8001f52 <lcd_send_string+0xa>
}
 8001f68:	bf00      	nop
 8001f6a:	3708      	adds	r7, #8
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <MotorL_EnablePWM>:
 *  Created on: Apr 29, 2021
 *      Author: Duc Thang
 */
#include "HAL_MOTOR_CONTROL.h"
void MotorL_EnablePWM(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001f74:	2108      	movs	r1, #8
 8001f76:	4802      	ldr	r0, [pc, #8]	; (8001f80 <MotorL_EnablePWM+0x10>)
 8001f78:	f004 fc78 	bl	800686c <HAL_TIM_PWM_Start>
}
 8001f7c:	bf00      	nop
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	20000454 	.word	0x20000454

08001f84 <MotorR_EnablePWM>:
void MotorL_DisablePWM(void)
{
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
}
void MotorR_EnablePWM(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001f88:	210c      	movs	r1, #12
 8001f8a:	4802      	ldr	r0, [pc, #8]	; (8001f94 <MotorR_EnablePWM+0x10>)
 8001f8c:	f004 fc6e 	bl	800686c <HAL_TIM_PWM_Start>
}
 8001f90:	bf00      	nop
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	20000454 	.word	0x20000454

08001f98 <MotorL_SetPWM>:
void MotorR_DisablePWM(void)
{
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
}
void MotorL_SetPWM(int32_t PWMVal)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
	if(PWMVal >= 7200)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 8001fa6:	db03      	blt.n	8001fb0 <MotorL_SetPWM+0x18>
	{
		PWMVal = 7200;
 8001fa8:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 8001fac:	607b      	str	r3, [r7, #4]
 8001fae:	e005      	b.n	8001fbc <MotorL_SetPWM+0x24>
	}
	else if(PWMVal <= -7200)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f513 5fe1 	cmn.w	r3, #7200	; 0x1c20
 8001fb6:	dc01      	bgt.n	8001fbc <MotorL_SetPWM+0x24>
	{
		PWMVal = -7200;
 8001fb8:	4b0f      	ldr	r3, [pc, #60]	; (8001ff8 <MotorL_SetPWM+0x60>)
 8001fba:	607b      	str	r3, [r7, #4]
	}
	if(PWMVal >= 0)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	db0a      	blt.n	8001fd8 <MotorL_SetPWM+0x40>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fc8:	480c      	ldr	r0, [pc, #48]	; (8001ffc <MotorL_SetPWM+0x64>)
 8001fca:	f003 fad5 	bl	8005578 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,PWMVal);
 8001fce:	4b0c      	ldr	r3, [pc, #48]	; (8002000 <MotorL_SetPWM+0x68>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	63da      	str	r2, [r3, #60]	; 0x3c
	else
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,7200+PWMVal);
	}
}
 8001fd6:	e00b      	b.n	8001ff0 <MotorL_SetPWM+0x58>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001fd8:	2201      	movs	r2, #1
 8001fda:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fde:	4807      	ldr	r0, [pc, #28]	; (8001ffc <MotorL_SetPWM+0x64>)
 8001fe0:	f003 faca 	bl	8005578 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,7200+PWMVal);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f503 52e1 	add.w	r2, r3, #7200	; 0x1c20
 8001fea:	4b05      	ldr	r3, [pc, #20]	; (8002000 <MotorL_SetPWM+0x68>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001ff0:	bf00      	nop
 8001ff2:	3708      	adds	r7, #8
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	ffffe3e0 	.word	0xffffe3e0
 8001ffc:	40020400 	.word	0x40020400
 8002000:	20000454 	.word	0x20000454

08002004 <MotorR_SetPWM>:
void MotorR_SetPWM(int32_t PWMVal)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
	if(PWMVal >= 7200)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 8002012:	db03      	blt.n	800201c <MotorR_SetPWM+0x18>
	{
		PWMVal = 7200;
 8002014:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 8002018:	607b      	str	r3, [r7, #4]
 800201a:	e005      	b.n	8002028 <MotorR_SetPWM+0x24>
	}
	else if(PWMVal <= -7200)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f513 5fe1 	cmn.w	r3, #7200	; 0x1c20
 8002022:	dc01      	bgt.n	8002028 <MotorR_SetPWM+0x24>
	{
		PWMVal = -7200;
 8002024:	4b0e      	ldr	r3, [pc, #56]	; (8002060 <MotorR_SetPWM+0x5c>)
 8002026:	607b      	str	r3, [r7, #4]
	}
	if(PWMVal >= 0)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2b00      	cmp	r3, #0
 800202c:	db09      	blt.n	8002042 <MotorR_SetPWM+0x3e>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 800202e:	2200      	movs	r2, #0
 8002030:	2104      	movs	r1, #4
 8002032:	480c      	ldr	r0, [pc, #48]	; (8002064 <MotorR_SetPWM+0x60>)
 8002034:	f003 faa0 	bl	8005578 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,PWMVal);
 8002038:	4b0b      	ldr	r3, [pc, #44]	; (8002068 <MotorR_SetPWM+0x64>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	641a      	str	r2, [r3, #64]	; 0x40
	else
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,7200+PWMVal);
	}
}
 8002040:	e00a      	b.n	8002058 <MotorR_SetPWM+0x54>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8002042:	2201      	movs	r2, #1
 8002044:	2104      	movs	r1, #4
 8002046:	4807      	ldr	r0, [pc, #28]	; (8002064 <MotorR_SetPWM+0x60>)
 8002048:	f003 fa96 	bl	8005578 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,7200+PWMVal);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f503 52e1 	add.w	r2, r3, #7200	; 0x1c20
 8002052:	4b05      	ldr	r3, [pc, #20]	; (8002068 <MotorR_SetPWM+0x64>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002058:	bf00      	nop
 800205a:	3708      	adds	r7, #8
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	ffffe3e0 	.word	0xffffe3e0
 8002064:	40020400 	.word	0x40020400
 8002068:	20000454 	.word	0x20000454

0800206c <Line_Follower_PID>:
	pid_R->previous_error = Error_R;
	PWM_Output_R = RPM_R*7200/388 + adder_R;
	return PWM_Output_R;
}
int16_t Line_Follower_PID (int Setpoint , int Error,PIDController *Car)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
	Car->propotional = Setpoint - Error;
 8002078:	68fa      	ldr	r2, [r7, #12]
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	ee07 3a90 	vmov	s15, r3
 8002082:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	edc3 7a08 	vstr	s15, [r3, #32]
	Car->integral = Car->integral + Error;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	ee07 3a90 	vmov	s15, r3
 8002098:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800209c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	Car->derivative = Error - Car->previous_error;
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	ee07 3a90 	vmov	s15, r3
 80020ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	edd3 7a07 	vldr	s15, [r3, #28]
 80020b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	PID_val = (Car->Kp * Car->propotional) + (Car->Ki * Car->integral) + (Car->Kd * Car->derivative);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	ed93 7a01 	vldr	s14, [r3, #4]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	edd3 7a08 	vldr	s15, [r3, #32]
 80020cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	edd3 6a02 	vldr	s13, [r3, #8]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80020dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	edd3 6a03 	vldr	s13, [r3, #12]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80020f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020fc:	ee17 3a90 	vmov	r3, s15
 8002100:	b21a      	sxth	r2, r3
 8002102:	4b09      	ldr	r3, [pc, #36]	; (8002128 <Line_Follower_PID+0xbc>)
 8002104:	801a      	strh	r2, [r3, #0]
	Car->previous_error = Error;
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	ee07 3a90 	vmov	s15, r3
 800210c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	edc3 7a07 	vstr	s15, [r3, #28]
	return PID_val;
 8002116:	4b04      	ldr	r3, [pc, #16]	; (8002128 <Line_Follower_PID+0xbc>)
 8002118:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 800211c:	4618      	mov	r0, r3
 800211e:	3714      	adds	r7, #20
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr
 8002128:	20000304 	.word	0x20000304

0800212c <PIDController_Car_Init>:
void PIDController_Car_Init (PIDController *Car){
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
	Car->derivative = 0.0f;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f04f 0200 	mov.w	r2, #0
 800213a:	629a      	str	r2, [r3, #40]	; 0x28
	Car->integral = 0.0f;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f04f 0200 	mov.w	r2, #0
 8002142:	625a      	str	r2, [r3, #36]	; 0x24
	Car->previous_error = 0.0f;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f04f 0200 	mov.w	r2, #0
 800214a:	61da      	str	r2, [r3, #28]
	Car->adder_out = 0.0f;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002152:	bf00      	nop
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
	...

08002160 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002164:	f001 fb04 	bl	8003770 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002168:	f000 f84e 	bl	8002208 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800216c:	f000 fb20 	bl	80027b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002170:	f000 fafe 	bl	8002770 <MX_DMA_Init>
  MX_USART6_UART_Init();
 8002174:	f000 fad2 	bl	800271c <MX_USART6_UART_Init>
  MX_TIM2_Init();
 8002178:	f000 f976 	bl	8002468 <MX_TIM2_Init>
  MX_TIM3_Init();
 800217c:	f000 f9c8 	bl	8002510 <MX_TIM3_Init>
  MX_ADC1_Init();
 8002180:	f000 f8ac 	bl	80022dc <MX_ADC1_Init>
  MX_TIM4_Init();
 8002184:	f000 fa28 	bl	80025d8 <MX_TIM4_Init>
  MX_I2C3_Init();
 8002188:	f000 f940 	bl	800240c <MX_I2C3_Init>
  MX_TIM5_Init();
 800218c:	f000 fa78 	bl	8002680 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8002190:	f7ff fea0 	bl	8001ed4 <lcd_init>
  MotorL_EnablePWM();
 8002194:	f7ff feec 	bl	8001f70 <MotorL_EnablePWM>
  MotorR_EnablePWM();
 8002198:	f7ff fef4 	bl	8001f84 <MotorR_EnablePWM>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &Sensor_ADC_Value, 6);
 800219c:	2206      	movs	r2, #6
 800219e:	4912      	ldr	r1, [pc, #72]	; (80021e8 <main+0x88>)
 80021a0:	4812      	ldr	r0, [pc, #72]	; (80021ec <main+0x8c>)
 80021a2:	f001 fcfd 	bl	8003ba0 <HAL_ADC_Start_DMA>
  PIDController_Car_Init(&Car);
 80021a6:	4812      	ldr	r0, [pc, #72]	; (80021f0 <main+0x90>)
 80021a8:	f7ff ffc0 	bl	800212c <PIDController_Car_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
//		Sensor_PrintValue();
//		HAL_Delay(200);
		ReadFlash();
 80021ac:	f000 ff3a 	bl	8003024 <ReadFlash>
		lcd_clear();
 80021b0:	f7ff fe7a 	bl	8001ea8 <lcd_clear>
		while (menu_display) {
 80021b4:	e013      	b.n	80021de <main+0x7e>
			Car.Kp = Kp;
 80021b6:	4b0f      	ldr	r3, [pc, #60]	; (80021f4 <main+0x94>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a0d      	ldr	r2, [pc, #52]	; (80021f0 <main+0x90>)
 80021bc:	6053      	str	r3, [r2, #4]
			Car.Kd = Kd;
 80021be:	4b0e      	ldr	r3, [pc, #56]	; (80021f8 <main+0x98>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a0b      	ldr	r2, [pc, #44]	; (80021f0 <main+0x90>)
 80021c4:	60d3      	str	r3, [r2, #12]
			Menu_system_control(Menu_type, line);
 80021c6:	4b0d      	ldr	r3, [pc, #52]	; (80021fc <main+0x9c>)
 80021c8:	781a      	ldrb	r2, [r3, #0]
 80021ca:	4b0d      	ldr	r3, [pc, #52]	; (8002200 <main+0xa0>)
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	4619      	mov	r1, r3
 80021d0:	4610      	mov	r0, r2
 80021d2:	f7fe fee1 	bl	8000f98 <Menu_system_control>
			ScrollUp();
 80021d6:	f000 fca1 	bl	8002b1c <ScrollUp>
			SelectItem();
 80021da:	f000 fd79 	bl	8002cd0 <SelectItem>
		while (menu_display) {
 80021de:	4b09      	ldr	r3, [pc, #36]	; (8002204 <main+0xa4>)
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d1e7      	bne.n	80021b6 <main+0x56>
		ReadFlash();
 80021e6:	e7e1      	b.n	80021ac <main+0x4c>
 80021e8:	200003fc 	.word	0x200003fc
 80021ec:	20000494 	.word	0x20000494
 80021f0:	20000018 	.word	0x20000018
 80021f4:	2000025c 	.word	0x2000025c
 80021f8:	20000264 	.word	0x20000264
 80021fc:	20000001 	.word	0x20000001
 8002200:	20000004 	.word	0x20000004
 8002204:	20000000 	.word	0x20000000

08002208 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b094      	sub	sp, #80	; 0x50
 800220c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800220e:	f107 0320 	add.w	r3, r7, #32
 8002212:	2230      	movs	r2, #48	; 0x30
 8002214:	2100      	movs	r1, #0
 8002216:	4618      	mov	r0, r3
 8002218:	f006 f90c 	bl	8008434 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800221c:	f107 030c 	add.w	r3, r7, #12
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	605a      	str	r2, [r3, #4]
 8002226:	609a      	str	r2, [r3, #8]
 8002228:	60da      	str	r2, [r3, #12]
 800222a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800222c:	2300      	movs	r3, #0
 800222e:	60bb      	str	r3, [r7, #8]
 8002230:	4b28      	ldr	r3, [pc, #160]	; (80022d4 <SystemClock_Config+0xcc>)
 8002232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002234:	4a27      	ldr	r2, [pc, #156]	; (80022d4 <SystemClock_Config+0xcc>)
 8002236:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800223a:	6413      	str	r3, [r2, #64]	; 0x40
 800223c:	4b25      	ldr	r3, [pc, #148]	; (80022d4 <SystemClock_Config+0xcc>)
 800223e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002240:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002244:	60bb      	str	r3, [r7, #8]
 8002246:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002248:	2300      	movs	r3, #0
 800224a:	607b      	str	r3, [r7, #4]
 800224c:	4b22      	ldr	r3, [pc, #136]	; (80022d8 <SystemClock_Config+0xd0>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002254:	4a20      	ldr	r2, [pc, #128]	; (80022d8 <SystemClock_Config+0xd0>)
 8002256:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800225a:	6013      	str	r3, [r2, #0]
 800225c:	4b1e      	ldr	r3, [pc, #120]	; (80022d8 <SystemClock_Config+0xd0>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002264:	607b      	str	r3, [r7, #4]
 8002266:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002268:	2302      	movs	r3, #2
 800226a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800226c:	2301      	movs	r3, #1
 800226e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002270:	2310      	movs	r3, #16
 8002272:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002274:	2302      	movs	r3, #2
 8002276:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002278:	2300      	movs	r3, #0
 800227a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800227c:	2308      	movs	r3, #8
 800227e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8002280:	2348      	movs	r3, #72	; 0x48
 8002282:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002284:	2302      	movs	r3, #2
 8002286:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002288:	2304      	movs	r3, #4
 800228a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800228c:	f107 0320 	add.w	r3, r7, #32
 8002290:	4618      	mov	r0, r3
 8002292:	f003 fde3 	bl	8005e5c <HAL_RCC_OscConfig>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800229c:	f000 ff16 	bl	80030cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022a0:	230f      	movs	r3, #15
 80022a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022a4:	2302      	movs	r3, #2
 80022a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022a8:	2300      	movs	r3, #0
 80022aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80022ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022b2:	2300      	movs	r3, #0
 80022b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80022b6:	f107 030c 	add.w	r3, r7, #12
 80022ba:	2102      	movs	r1, #2
 80022bc:	4618      	mov	r0, r3
 80022be:	f004 f83d 	bl	800633c <HAL_RCC_ClockConfig>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d001      	beq.n	80022cc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80022c8:	f000 ff00 	bl	80030cc <Error_Handler>
  }
}
 80022cc:	bf00      	nop
 80022ce:	3750      	adds	r7, #80	; 0x50
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	40023800 	.word	0x40023800
 80022d8:	40007000 	.word	0x40007000

080022dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80022e2:	463b      	mov	r3, r7
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]
 80022e8:	605a      	str	r2, [r3, #4]
 80022ea:	609a      	str	r2, [r3, #8]
 80022ec:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80022ee:	4b44      	ldr	r3, [pc, #272]	; (8002400 <MX_ADC1_Init+0x124>)
 80022f0:	4a44      	ldr	r2, [pc, #272]	; (8002404 <MX_ADC1_Init+0x128>)
 80022f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80022f4:	4b42      	ldr	r3, [pc, #264]	; (8002400 <MX_ADC1_Init+0x124>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80022fa:	4b41      	ldr	r3, [pc, #260]	; (8002400 <MX_ADC1_Init+0x124>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002300:	4b3f      	ldr	r3, [pc, #252]	; (8002400 <MX_ADC1_Init+0x124>)
 8002302:	2201      	movs	r2, #1
 8002304:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002306:	4b3e      	ldr	r3, [pc, #248]	; (8002400 <MX_ADC1_Init+0x124>)
 8002308:	2201      	movs	r2, #1
 800230a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800230c:	4b3c      	ldr	r3, [pc, #240]	; (8002400 <MX_ADC1_Init+0x124>)
 800230e:	2200      	movs	r2, #0
 8002310:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002314:	4b3a      	ldr	r3, [pc, #232]	; (8002400 <MX_ADC1_Init+0x124>)
 8002316:	2200      	movs	r2, #0
 8002318:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800231a:	4b39      	ldr	r3, [pc, #228]	; (8002400 <MX_ADC1_Init+0x124>)
 800231c:	4a3a      	ldr	r2, [pc, #232]	; (8002408 <MX_ADC1_Init+0x12c>)
 800231e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002320:	4b37      	ldr	r3, [pc, #220]	; (8002400 <MX_ADC1_Init+0x124>)
 8002322:	2200      	movs	r2, #0
 8002324:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 8002326:	4b36      	ldr	r3, [pc, #216]	; (8002400 <MX_ADC1_Init+0x124>)
 8002328:	2206      	movs	r2, #6
 800232a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800232c:	4b34      	ldr	r3, [pc, #208]	; (8002400 <MX_ADC1_Init+0x124>)
 800232e:	2201      	movs	r2, #1
 8002330:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002334:	4b32      	ldr	r3, [pc, #200]	; (8002400 <MX_ADC1_Init+0x124>)
 8002336:	2201      	movs	r2, #1
 8002338:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800233a:	4831      	ldr	r0, [pc, #196]	; (8002400 <MX_ADC1_Init+0x124>)
 800233c:	f001 faac 	bl	8003898 <HAL_ADC_Init>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8002346:	f000 fec1 	bl	80030cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800234a:	2302      	movs	r3, #2
 800234c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800234e:	2301      	movs	r3, #1
 8002350:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8002352:	2303      	movs	r3, #3
 8002354:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002356:	463b      	mov	r3, r7
 8002358:	4619      	mov	r1, r3
 800235a:	4829      	ldr	r0, [pc, #164]	; (8002400 <MX_ADC1_Init+0x124>)
 800235c:	f001 fd1c 	bl	8003d98 <HAL_ADC_ConfigChannel>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8002366:	f000 feb1 	bl	80030cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800236a:	2303      	movs	r3, #3
 800236c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800236e:	2302      	movs	r3, #2
 8002370:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002372:	463b      	mov	r3, r7
 8002374:	4619      	mov	r1, r3
 8002376:	4822      	ldr	r0, [pc, #136]	; (8002400 <MX_ADC1_Init+0x124>)
 8002378:	f001 fd0e 	bl	8003d98 <HAL_ADC_ConfigChannel>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8002382:	f000 fea3 	bl	80030cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002386:	2304      	movs	r3, #4
 8002388:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800238a:	2303      	movs	r3, #3
 800238c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800238e:	463b      	mov	r3, r7
 8002390:	4619      	mov	r1, r3
 8002392:	481b      	ldr	r0, [pc, #108]	; (8002400 <MX_ADC1_Init+0x124>)
 8002394:	f001 fd00 	bl	8003d98 <HAL_ADC_ConfigChannel>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 800239e:	f000 fe95 	bl	80030cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80023a2:	2305      	movs	r3, #5
 80023a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80023a6:	2304      	movs	r3, #4
 80023a8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023aa:	463b      	mov	r3, r7
 80023ac:	4619      	mov	r1, r3
 80023ae:	4814      	ldr	r0, [pc, #80]	; (8002400 <MX_ADC1_Init+0x124>)
 80023b0:	f001 fcf2 	bl	8003d98 <HAL_ADC_ConfigChannel>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80023ba:	f000 fe87 	bl	80030cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80023be:	2306      	movs	r3, #6
 80023c0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80023c2:	2305      	movs	r3, #5
 80023c4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023c6:	463b      	mov	r3, r7
 80023c8:	4619      	mov	r1, r3
 80023ca:	480d      	ldr	r0, [pc, #52]	; (8002400 <MX_ADC1_Init+0x124>)
 80023cc:	f001 fce4 	bl	8003d98 <HAL_ADC_ConfigChannel>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 80023d6:	f000 fe79 	bl	80030cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80023da:	2307      	movs	r3, #7
 80023dc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80023de:	2306      	movs	r3, #6
 80023e0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023e2:	463b      	mov	r3, r7
 80023e4:	4619      	mov	r1, r3
 80023e6:	4806      	ldr	r0, [pc, #24]	; (8002400 <MX_ADC1_Init+0x124>)
 80023e8:	f001 fcd6 	bl	8003d98 <HAL_ADC_ConfigChannel>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 80023f2:	f000 fe6b 	bl	80030cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80023f6:	bf00      	nop
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	20000494 	.word	0x20000494
 8002404:	40012000 	.word	0x40012000
 8002408:	0f000001 	.word	0x0f000001

0800240c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002410:	4b12      	ldr	r3, [pc, #72]	; (800245c <MX_I2C3_Init+0x50>)
 8002412:	4a13      	ldr	r2, [pc, #76]	; (8002460 <MX_I2C3_Init+0x54>)
 8002414:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8002416:	4b11      	ldr	r3, [pc, #68]	; (800245c <MX_I2C3_Init+0x50>)
 8002418:	4a12      	ldr	r2, [pc, #72]	; (8002464 <MX_I2C3_Init+0x58>)
 800241a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800241c:	4b0f      	ldr	r3, [pc, #60]	; (800245c <MX_I2C3_Init+0x50>)
 800241e:	2200      	movs	r2, #0
 8002420:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8002422:	4b0e      	ldr	r3, [pc, #56]	; (800245c <MX_I2C3_Init+0x50>)
 8002424:	2200      	movs	r2, #0
 8002426:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002428:	4b0c      	ldr	r3, [pc, #48]	; (800245c <MX_I2C3_Init+0x50>)
 800242a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800242e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002430:	4b0a      	ldr	r3, [pc, #40]	; (800245c <MX_I2C3_Init+0x50>)
 8002432:	2200      	movs	r2, #0
 8002434:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002436:	4b09      	ldr	r3, [pc, #36]	; (800245c <MX_I2C3_Init+0x50>)
 8002438:	2200      	movs	r2, #0
 800243a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800243c:	4b07      	ldr	r3, [pc, #28]	; (800245c <MX_I2C3_Init+0x50>)
 800243e:	2200      	movs	r2, #0
 8002440:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002442:	4b06      	ldr	r3, [pc, #24]	; (800245c <MX_I2C3_Init+0x50>)
 8002444:	2200      	movs	r2, #0
 8002446:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002448:	4804      	ldr	r0, [pc, #16]	; (800245c <MX_I2C3_Init+0x50>)
 800244a:	f003 f8c7 	bl	80055dc <HAL_I2C_Init>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002454:	f000 fe3a 	bl	80030cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002458:	bf00      	nop
 800245a:	bd80      	pop	{r7, pc}
 800245c:	2000035c 	.word	0x2000035c
 8002460:	40005c00 	.word	0x40005c00
 8002464:	000186a0 	.word	0x000186a0

08002468 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b08c      	sub	sp, #48	; 0x30
 800246c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800246e:	f107 030c 	add.w	r3, r7, #12
 8002472:	2224      	movs	r2, #36	; 0x24
 8002474:	2100      	movs	r1, #0
 8002476:	4618      	mov	r0, r3
 8002478:	f005 ffdc 	bl	8008434 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800247c:	1d3b      	adds	r3, r7, #4
 800247e:	2200      	movs	r2, #0
 8002480:	601a      	str	r2, [r3, #0]
 8002482:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002484:	4b21      	ldr	r3, [pc, #132]	; (800250c <MX_TIM2_Init+0xa4>)
 8002486:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800248a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800248c:	4b1f      	ldr	r3, [pc, #124]	; (800250c <MX_TIM2_Init+0xa4>)
 800248e:	2200      	movs	r2, #0
 8002490:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002492:	4b1e      	ldr	r3, [pc, #120]	; (800250c <MX_TIM2_Init+0xa4>)
 8002494:	2200      	movs	r2, #0
 8002496:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002498:	4b1c      	ldr	r3, [pc, #112]	; (800250c <MX_TIM2_Init+0xa4>)
 800249a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800249e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024a0:	4b1a      	ldr	r3, [pc, #104]	; (800250c <MX_TIM2_Init+0xa4>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024a6:	4b19      	ldr	r3, [pc, #100]	; (800250c <MX_TIM2_Init+0xa4>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80024ac:	2303      	movs	r3, #3
 80024ae:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80024b0:	2300      	movs	r3, #0
 80024b2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80024b4:	2301      	movs	r3, #1
 80024b6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80024b8:	2300      	movs	r3, #0
 80024ba:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80024bc:	2300      	movs	r3, #0
 80024be:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80024c0:	2300      	movs	r3, #0
 80024c2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80024c4:	2301      	movs	r3, #1
 80024c6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80024c8:	2300      	movs	r3, #0
 80024ca:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80024cc:	2300      	movs	r3, #0
 80024ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80024d0:	f107 030c 	add.w	r3, r7, #12
 80024d4:	4619      	mov	r1, r3
 80024d6:	480d      	ldr	r0, [pc, #52]	; (800250c <MX_TIM2_Init+0xa4>)
 80024d8:	f004 f9fa 	bl	80068d0 <HAL_TIM_Encoder_Init>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80024e2:	f000 fdf3 	bl	80030cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024e6:	2300      	movs	r3, #0
 80024e8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024ea:	2300      	movs	r3, #0
 80024ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80024ee:	1d3b      	adds	r3, r7, #4
 80024f0:	4619      	mov	r1, r3
 80024f2:	4806      	ldr	r0, [pc, #24]	; (800250c <MX_TIM2_Init+0xa4>)
 80024f4:	f004 fff8 	bl	80074e8 <HAL_TIMEx_MasterConfigSynchronization>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80024fe:	f000 fde5 	bl	80030cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002502:	bf00      	nop
 8002504:	3730      	adds	r7, #48	; 0x30
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	20000554 	.word	0x20000554

08002510 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b08a      	sub	sp, #40	; 0x28
 8002514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002516:	f107 0320 	add.w	r3, r7, #32
 800251a:	2200      	movs	r2, #0
 800251c:	601a      	str	r2, [r3, #0]
 800251e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002520:	1d3b      	adds	r3, r7, #4
 8002522:	2200      	movs	r2, #0
 8002524:	601a      	str	r2, [r3, #0]
 8002526:	605a      	str	r2, [r3, #4]
 8002528:	609a      	str	r2, [r3, #8]
 800252a:	60da      	str	r2, [r3, #12]
 800252c:	611a      	str	r2, [r3, #16]
 800252e:	615a      	str	r2, [r3, #20]
 8002530:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002532:	4b27      	ldr	r3, [pc, #156]	; (80025d0 <MX_TIM3_Init+0xc0>)
 8002534:	4a27      	ldr	r2, [pc, #156]	; (80025d4 <MX_TIM3_Init+0xc4>)
 8002536:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002538:	4b25      	ldr	r3, [pc, #148]	; (80025d0 <MX_TIM3_Init+0xc0>)
 800253a:	2200      	movs	r2, #0
 800253c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800253e:	4b24      	ldr	r3, [pc, #144]	; (80025d0 <MX_TIM3_Init+0xc0>)
 8002540:	2200      	movs	r2, #0
 8002542:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7199;
 8002544:	4b22      	ldr	r3, [pc, #136]	; (80025d0 <MX_TIM3_Init+0xc0>)
 8002546:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800254a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800254c:	4b20      	ldr	r3, [pc, #128]	; (80025d0 <MX_TIM3_Init+0xc0>)
 800254e:	2200      	movs	r2, #0
 8002550:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002552:	4b1f      	ldr	r3, [pc, #124]	; (80025d0 <MX_TIM3_Init+0xc0>)
 8002554:	2200      	movs	r2, #0
 8002556:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002558:	481d      	ldr	r0, [pc, #116]	; (80025d0 <MX_TIM3_Init+0xc0>)
 800255a:	f004 f95b 	bl	8006814 <HAL_TIM_PWM_Init>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002564:	f000 fdb2 	bl	80030cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002568:	2300      	movs	r3, #0
 800256a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800256c:	2300      	movs	r3, #0
 800256e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002570:	f107 0320 	add.w	r3, r7, #32
 8002574:	4619      	mov	r1, r3
 8002576:	4816      	ldr	r0, [pc, #88]	; (80025d0 <MX_TIM3_Init+0xc0>)
 8002578:	f004 ffb6 	bl	80074e8 <HAL_TIMEx_MasterConfigSynchronization>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002582:	f000 fda3 	bl	80030cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002586:	2360      	movs	r3, #96	; 0x60
 8002588:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800258a:	2300      	movs	r3, #0
 800258c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800258e:	2300      	movs	r3, #0
 8002590:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002592:	2300      	movs	r3, #0
 8002594:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002596:	1d3b      	adds	r3, r7, #4
 8002598:	2208      	movs	r2, #8
 800259a:	4619      	mov	r1, r3
 800259c:	480c      	ldr	r0, [pc, #48]	; (80025d0 <MX_TIM3_Init+0xc0>)
 800259e:	f004 fb31 	bl	8006c04 <HAL_TIM_PWM_ConfigChannel>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80025a8:	f000 fd90 	bl	80030cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80025ac:	1d3b      	adds	r3, r7, #4
 80025ae:	220c      	movs	r2, #12
 80025b0:	4619      	mov	r1, r3
 80025b2:	4807      	ldr	r0, [pc, #28]	; (80025d0 <MX_TIM3_Init+0xc0>)
 80025b4:	f004 fb26 	bl	8006c04 <HAL_TIM_PWM_ConfigChannel>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80025be:	f000 fd85 	bl	80030cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80025c2:	4803      	ldr	r0, [pc, #12]	; (80025d0 <MX_TIM3_Init+0xc0>)
 80025c4:	f000 ff7a 	bl	80034bc <HAL_TIM_MspPostInit>

}
 80025c8:	bf00      	nop
 80025ca:	3728      	adds	r7, #40	; 0x28
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	20000454 	.word	0x20000454
 80025d4:	40000400 	.word	0x40000400

080025d8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b08c      	sub	sp, #48	; 0x30
 80025dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80025de:	f107 030c 	add.w	r3, r7, #12
 80025e2:	2224      	movs	r2, #36	; 0x24
 80025e4:	2100      	movs	r1, #0
 80025e6:	4618      	mov	r0, r3
 80025e8:	f005 ff24 	bl	8008434 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025ec:	1d3b      	adds	r3, r7, #4
 80025ee:	2200      	movs	r2, #0
 80025f0:	601a      	str	r2, [r3, #0]
 80025f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80025f4:	4b20      	ldr	r3, [pc, #128]	; (8002678 <MX_TIM4_Init+0xa0>)
 80025f6:	4a21      	ldr	r2, [pc, #132]	; (800267c <MX_TIM4_Init+0xa4>)
 80025f8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80025fa:	4b1f      	ldr	r3, [pc, #124]	; (8002678 <MX_TIM4_Init+0xa0>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002600:	4b1d      	ldr	r3, [pc, #116]	; (8002678 <MX_TIM4_Init+0xa0>)
 8002602:	2200      	movs	r2, #0
 8002604:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002606:	4b1c      	ldr	r3, [pc, #112]	; (8002678 <MX_TIM4_Init+0xa0>)
 8002608:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800260c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800260e:	4b1a      	ldr	r3, [pc, #104]	; (8002678 <MX_TIM4_Init+0xa0>)
 8002610:	2200      	movs	r2, #0
 8002612:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002614:	4b18      	ldr	r3, [pc, #96]	; (8002678 <MX_TIM4_Init+0xa0>)
 8002616:	2200      	movs	r2, #0
 8002618:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800261a:	2303      	movs	r3, #3
 800261c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800261e:	2300      	movs	r3, #0
 8002620:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002622:	2301      	movs	r3, #1
 8002624:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002626:	2300      	movs	r3, #0
 8002628:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800262a:	2300      	movs	r3, #0
 800262c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800262e:	2300      	movs	r3, #0
 8002630:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002632:	2301      	movs	r3, #1
 8002634:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002636:	2300      	movs	r3, #0
 8002638:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800263a:	2300      	movs	r3, #0
 800263c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800263e:	f107 030c 	add.w	r3, r7, #12
 8002642:	4619      	mov	r1, r3
 8002644:	480c      	ldr	r0, [pc, #48]	; (8002678 <MX_TIM4_Init+0xa0>)
 8002646:	f004 f943 	bl	80068d0 <HAL_TIM_Encoder_Init>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d001      	beq.n	8002654 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002650:	f000 fd3c 	bl	80030cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002654:	2300      	movs	r3, #0
 8002656:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002658:	2300      	movs	r3, #0
 800265a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800265c:	1d3b      	adds	r3, r7, #4
 800265e:	4619      	mov	r1, r3
 8002660:	4805      	ldr	r0, [pc, #20]	; (8002678 <MX_TIM4_Init+0xa0>)
 8002662:	f004 ff41 	bl	80074e8 <HAL_TIMEx_MasterConfigSynchronization>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d001      	beq.n	8002670 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800266c:	f000 fd2e 	bl	80030cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002670:	bf00      	nop
 8002672:	3730      	adds	r7, #48	; 0x30
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	200003b0 	.word	0x200003b0
 800267c:	40000800 	.word	0x40000800

08002680 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002686:	f107 0308 	add.w	r3, r7, #8
 800268a:	2200      	movs	r2, #0
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	605a      	str	r2, [r3, #4]
 8002690:	609a      	str	r2, [r3, #8]
 8002692:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002694:	463b      	mov	r3, r7
 8002696:	2200      	movs	r2, #0
 8002698:	601a      	str	r2, [r3, #0]
 800269a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800269c:	4b1d      	ldr	r3, [pc, #116]	; (8002714 <MX_TIM5_Init+0x94>)
 800269e:	4a1e      	ldr	r2, [pc, #120]	; (8002718 <MX_TIM5_Init+0x98>)
 80026a0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 60;
 80026a2:	4b1c      	ldr	r3, [pc, #112]	; (8002714 <MX_TIM5_Init+0x94>)
 80026a4:	223c      	movs	r2, #60	; 0x3c
 80026a6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026a8:	4b1a      	ldr	r3, [pc, #104]	; (8002714 <MX_TIM5_Init+0x94>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 59999;
 80026ae:	4b19      	ldr	r3, [pc, #100]	; (8002714 <MX_TIM5_Init+0x94>)
 80026b0:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80026b4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026b6:	4b17      	ldr	r3, [pc, #92]	; (8002714 <MX_TIM5_Init+0x94>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026bc:	4b15      	ldr	r3, [pc, #84]	; (8002714 <MX_TIM5_Init+0x94>)
 80026be:	2200      	movs	r2, #0
 80026c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80026c2:	4814      	ldr	r0, [pc, #80]	; (8002714 <MX_TIM5_Init+0x94>)
 80026c4:	f004 f82c 	bl	8006720 <HAL_TIM_Base_Init>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80026ce:	f000 fcfd 	bl	80030cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026d6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80026d8:	f107 0308 	add.w	r3, r7, #8
 80026dc:	4619      	mov	r1, r3
 80026de:	480d      	ldr	r0, [pc, #52]	; (8002714 <MX_TIM5_Init+0x94>)
 80026e0:	f004 fb56 	bl	8006d90 <HAL_TIM_ConfigClockSource>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80026ea:	f000 fcef 	bl	80030cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026ee:	2300      	movs	r3, #0
 80026f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026f2:	2300      	movs	r3, #0
 80026f4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80026f6:	463b      	mov	r3, r7
 80026f8:	4619      	mov	r1, r3
 80026fa:	4806      	ldr	r0, [pc, #24]	; (8002714 <MX_TIM5_Init+0x94>)
 80026fc:	f004 fef4 	bl	80074e8 <HAL_TIMEx_MasterConfigSynchronization>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8002706:	f000 fce1 	bl	80030cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800270a:	bf00      	nop
 800270c:	3718      	adds	r7, #24
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	20000414 	.word	0x20000414
 8002718:	40000c00 	.word	0x40000c00

0800271c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002720:	4b11      	ldr	r3, [pc, #68]	; (8002768 <MX_USART6_UART_Init+0x4c>)
 8002722:	4a12      	ldr	r2, [pc, #72]	; (800276c <MX_USART6_UART_Init+0x50>)
 8002724:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002726:	4b10      	ldr	r3, [pc, #64]	; (8002768 <MX_USART6_UART_Init+0x4c>)
 8002728:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800272c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800272e:	4b0e      	ldr	r3, [pc, #56]	; (8002768 <MX_USART6_UART_Init+0x4c>)
 8002730:	2200      	movs	r2, #0
 8002732:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002734:	4b0c      	ldr	r3, [pc, #48]	; (8002768 <MX_USART6_UART_Init+0x4c>)
 8002736:	2200      	movs	r2, #0
 8002738:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800273a:	4b0b      	ldr	r3, [pc, #44]	; (8002768 <MX_USART6_UART_Init+0x4c>)
 800273c:	2200      	movs	r2, #0
 800273e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002740:	4b09      	ldr	r3, [pc, #36]	; (8002768 <MX_USART6_UART_Init+0x4c>)
 8002742:	220c      	movs	r2, #12
 8002744:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002746:	4b08      	ldr	r3, [pc, #32]	; (8002768 <MX_USART6_UART_Init+0x4c>)
 8002748:	2200      	movs	r2, #0
 800274a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800274c:	4b06      	ldr	r3, [pc, #24]	; (8002768 <MX_USART6_UART_Init+0x4c>)
 800274e:	2200      	movs	r2, #0
 8002750:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002752:	4805      	ldr	r0, [pc, #20]	; (8002768 <MX_USART6_UART_Init+0x4c>)
 8002754:	f004 ff4a 	bl	80075ec <HAL_UART_Init>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800275e:	f000 fcb5 	bl	80030cc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002762:	bf00      	nop
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	2000031c 	.word	0x2000031c
 800276c:	40011400 	.word	0x40011400

08002770 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002776:	2300      	movs	r3, #0
 8002778:	607b      	str	r3, [r7, #4]
 800277a:	4b0c      	ldr	r3, [pc, #48]	; (80027ac <MX_DMA_Init+0x3c>)
 800277c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277e:	4a0b      	ldr	r2, [pc, #44]	; (80027ac <MX_DMA_Init+0x3c>)
 8002780:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002784:	6313      	str	r3, [r2, #48]	; 0x30
 8002786:	4b09      	ldr	r3, [pc, #36]	; (80027ac <MX_DMA_Init+0x3c>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800278e:	607b      	str	r3, [r7, #4]
 8002790:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002792:	2200      	movs	r2, #0
 8002794:	2100      	movs	r1, #0
 8002796:	2038      	movs	r0, #56	; 0x38
 8002798:	f001 fe97 	bl	80044ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800279c:	2038      	movs	r0, #56	; 0x38
 800279e:	f001 feb0 	bl	8004502 <HAL_NVIC_EnableIRQ>

}
 80027a2:	bf00      	nop
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	40023800 	.word	0x40023800

080027b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b08a      	sub	sp, #40	; 0x28
 80027b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b6:	f107 0314 	add.w	r3, r7, #20
 80027ba:	2200      	movs	r2, #0
 80027bc:	601a      	str	r2, [r3, #0]
 80027be:	605a      	str	r2, [r3, #4]
 80027c0:	609a      	str	r2, [r3, #8]
 80027c2:	60da      	str	r2, [r3, #12]
 80027c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027c6:	2300      	movs	r3, #0
 80027c8:	613b      	str	r3, [r7, #16]
 80027ca:	4b43      	ldr	r3, [pc, #268]	; (80028d8 <MX_GPIO_Init+0x128>)
 80027cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ce:	4a42      	ldr	r2, [pc, #264]	; (80028d8 <MX_GPIO_Init+0x128>)
 80027d0:	f043 0304 	orr.w	r3, r3, #4
 80027d4:	6313      	str	r3, [r2, #48]	; 0x30
 80027d6:	4b40      	ldr	r3, [pc, #256]	; (80028d8 <MX_GPIO_Init+0x128>)
 80027d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027da:	f003 0304 	and.w	r3, r3, #4
 80027de:	613b      	str	r3, [r7, #16]
 80027e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80027e2:	2300      	movs	r3, #0
 80027e4:	60fb      	str	r3, [r7, #12]
 80027e6:	4b3c      	ldr	r3, [pc, #240]	; (80028d8 <MX_GPIO_Init+0x128>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ea:	4a3b      	ldr	r2, [pc, #236]	; (80028d8 <MX_GPIO_Init+0x128>)
 80027ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027f0:	6313      	str	r3, [r2, #48]	; 0x30
 80027f2:	4b39      	ldr	r3, [pc, #228]	; (80028d8 <MX_GPIO_Init+0x128>)
 80027f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027fa:	60fb      	str	r3, [r7, #12]
 80027fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027fe:	2300      	movs	r3, #0
 8002800:	60bb      	str	r3, [r7, #8]
 8002802:	4b35      	ldr	r3, [pc, #212]	; (80028d8 <MX_GPIO_Init+0x128>)
 8002804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002806:	4a34      	ldr	r2, [pc, #208]	; (80028d8 <MX_GPIO_Init+0x128>)
 8002808:	f043 0301 	orr.w	r3, r3, #1
 800280c:	6313      	str	r3, [r2, #48]	; 0x30
 800280e:	4b32      	ldr	r3, [pc, #200]	; (80028d8 <MX_GPIO_Init+0x128>)
 8002810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	60bb      	str	r3, [r7, #8]
 8002818:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800281a:	2300      	movs	r3, #0
 800281c:	607b      	str	r3, [r7, #4]
 800281e:	4b2e      	ldr	r3, [pc, #184]	; (80028d8 <MX_GPIO_Init+0x128>)
 8002820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002822:	4a2d      	ldr	r2, [pc, #180]	; (80028d8 <MX_GPIO_Init+0x128>)
 8002824:	f043 0302 	orr.w	r3, r3, #2
 8002828:	6313      	str	r3, [r2, #48]	; 0x30
 800282a:	4b2b      	ldr	r3, [pc, #172]	; (80028d8 <MX_GPIO_Init+0x128>)
 800282c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	607b      	str	r3, [r7, #4]
 8002834:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13
 8002836:	2200      	movs	r2, #0
 8002838:	f24f 7124 	movw	r1, #63268	; 0xf724
 800283c:	4827      	ldr	r0, [pc, #156]	; (80028dc <MX_GPIO_Init+0x12c>)
 800283e:	f002 fe9b 	bl	8005578 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_5|GPIO_PIN_8
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8002842:	2200      	movs	r2, #0
 8002844:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002848:	4825      	ldr	r0, [pc, #148]	; (80028e0 <MX_GPIO_Init+0x130>)
 800284a:	f002 fe95 	bl	8005578 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ButtonC_Pin */
  GPIO_InitStruct.Pin = ButtonC_Pin;
 800284e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002852:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002854:	4b23      	ldr	r3, [pc, #140]	; (80028e4 <MX_GPIO_Init+0x134>)
 8002856:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002858:	2300      	movs	r3, #0
 800285a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ButtonC_GPIO_Port, &GPIO_InitStruct);
 800285c:	f107 0314 	add.w	r3, r7, #20
 8002860:	4619      	mov	r1, r3
 8002862:	4821      	ldr	r0, [pc, #132]	; (80028e8 <MX_GPIO_Init+0x138>)
 8002864:	f002 fcee 	bl	8005244 <HAL_GPIO_Init>

  /*Configure GPIO pins : ButtonB_Pin ButtonA_Pin */
  GPIO_InitStruct.Pin = ButtonB_Pin|ButtonA_Pin;
 8002868:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800286c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800286e:	2300      	movs	r3, #0
 8002870:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002872:	2300      	movs	r3, #0
 8002874:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002876:	f107 0314 	add.w	r3, r7, #20
 800287a:	4619      	mov	r1, r3
 800287c:	481a      	ldr	r0, [pc, #104]	; (80028e8 <MX_GPIO_Init+0x138>)
 800287e:	f002 fce1 	bl	8005244 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB12 PB13
                           PB14 PB15 PB5 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13
 8002882:	f24f 7324 	movw	r3, #63268	; 0xf724
 8002886:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_5|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002888:	2301      	movs	r3, #1
 800288a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288c:	2300      	movs	r3, #0
 800288e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002890:	2300      	movs	r3, #0
 8002892:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002894:	f107 0314 	add.w	r3, r7, #20
 8002898:	4619      	mov	r1, r3
 800289a:	4810      	ldr	r0, [pc, #64]	; (80028dc <MX_GPIO_Init+0x12c>)
 800289c:	f002 fcd2 	bl	8005244 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80028a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028a6:	2301      	movs	r3, #1
 80028a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028aa:	2300      	movs	r3, #0
 80028ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ae:	2300      	movs	r3, #0
 80028b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028b2:	f107 0314 	add.w	r3, r7, #20
 80028b6:	4619      	mov	r1, r3
 80028b8:	4809      	ldr	r0, [pc, #36]	; (80028e0 <MX_GPIO_Init+0x130>)
 80028ba:	f002 fcc3 	bl	8005244 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80028be:	2200      	movs	r2, #0
 80028c0:	2100      	movs	r1, #0
 80028c2:	2028      	movs	r0, #40	; 0x28
 80028c4:	f001 fe01 	bl	80044ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80028c8:	2028      	movs	r0, #40	; 0x28
 80028ca:	f001 fe1a 	bl	8004502 <HAL_NVIC_EnableIRQ>

}
 80028ce:	bf00      	nop
 80028d0:	3728      	adds	r7, #40	; 0x28
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	40023800 	.word	0x40023800
 80028dc:	40020400 	.word	0x40020400
 80028e0:	40020000 	.word	0x40020000
 80028e4:	10210000 	.word	0x10210000
 80028e8:	40020800 	.word	0x40020800

080028ec <Running>:

/* USER CODE BEGIN 4 */
void Running(void) // Activate the car for running
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x80 | 0x00);
 80028f2:	2080      	movs	r0, #128	; 0x80
 80028f4:	f7ff fa78 	bl	8001de8 <lcd_send_cmd>
	lcd_send_string("Car is Running!        ");
 80028f8:	482d      	ldr	r0, [pc, #180]	; (80029b0 <Running+0xc4>)
 80028fa:	f7ff fb25 	bl	8001f48 <lcd_send_string>
	lcd_send_cmd(0x80 | 0x40);
 80028fe:	20c0      	movs	r0, #192	; 0xc0
 8002900:	f7ff fa72 	bl	8001de8 <lcd_send_cmd>
	lcd_send_string("Press C for cancer     ");
 8002904:	482b      	ldr	r0, [pc, #172]	; (80029b4 <Running+0xc8>)
 8002906:	f7ff fb1f 	bl	8001f48 <lcd_send_string>
	while (cancer_running) {
 800290a:	e041      	b.n	8002990 <Running+0xa4>
	Sensor_Convert_A2D();
 800290c:	f000 f8d2 	bl	8002ab4 <Sensor_Convert_A2D>
	int16_t PID_val = Line_Follower_PID(3500,Error_Return(LineDetect), &Car);
 8002910:	4b29      	ldr	r3, [pc, #164]	; (80029b8 <Running+0xcc>)
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	4618      	mov	r0, r3
 8002916:	f000 f85f 	bl	80029d8 <Error_Return>
 800291a:	4603      	mov	r3, r0
 800291c:	4a27      	ldr	r2, [pc, #156]	; (80029bc <Running+0xd0>)
 800291e:	4619      	mov	r1, r3
 8002920:	f640 50ac 	movw	r0, #3500	; 0xdac
 8002924:	f7ff fba2 	bl	800206c <Line_Follower_PID>
 8002928:	4603      	mov	r3, r0
 800292a:	80fb      	strh	r3, [r7, #6]
	Motor_Speed_R = Right + PID_val;
 800292c:	4b24      	ldr	r3, [pc, #144]	; (80029c0 <Running+0xd4>)
 800292e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002932:	461a      	mov	r2, r3
 8002934:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002938:	4413      	add	r3, r2
 800293a:	4a22      	ldr	r2, [pc, #136]	; (80029c4 <Running+0xd8>)
 800293c:	6013      	str	r3, [r2, #0]
	Motor_Speed_L = Left - PID_val;
 800293e:	4b22      	ldr	r3, [pc, #136]	; (80029c8 <Running+0xdc>)
 8002940:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002944:	461a      	mov	r2, r3
 8002946:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	4a1f      	ldr	r2, [pc, #124]	; (80029cc <Running+0xe0>)
 800294e:	6013      	str	r3, [r2, #0]
	Motor_Speed_R = Contants(Motor_Speed_R, -7200,7200);
 8002950:	4b1c      	ldr	r3, [pc, #112]	; (80029c4 <Running+0xd8>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8002958:	491d      	ldr	r1, [pc, #116]	; (80029d0 <Running+0xe4>)
 800295a:	4618      	mov	r0, r3
 800295c:	f000 f88c 	bl	8002a78 <Contants>
 8002960:	4602      	mov	r2, r0
 8002962:	4b18      	ldr	r3, [pc, #96]	; (80029c4 <Running+0xd8>)
 8002964:	601a      	str	r2, [r3, #0]
	Motor_Speed_L = Contants(Motor_Speed_L, -7200,7200);
 8002966:	4b19      	ldr	r3, [pc, #100]	; (80029cc <Running+0xe0>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 800296e:	4918      	ldr	r1, [pc, #96]	; (80029d0 <Running+0xe4>)
 8002970:	4618      	mov	r0, r3
 8002972:	f000 f881 	bl	8002a78 <Contants>
 8002976:	4602      	mov	r2, r0
 8002978:	4b14      	ldr	r3, [pc, #80]	; (80029cc <Running+0xe0>)
 800297a:	601a      	str	r2, [r3, #0]
	MotorR_SetPWM(Motor_Speed_R);
 800297c:	4b11      	ldr	r3, [pc, #68]	; (80029c4 <Running+0xd8>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff fb3f 	bl	8002004 <MotorR_SetPWM>
	MotorL_SetPWM(Motor_Speed_L);
 8002986:	4b11      	ldr	r3, [pc, #68]	; (80029cc <Running+0xe0>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4618      	mov	r0, r3
 800298c:	f7ff fb04 	bl	8001f98 <MotorL_SetPWM>
	while (cancer_running) {
 8002990:	4b10      	ldr	r3, [pc, #64]	; (80029d4 <Running+0xe8>)
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d1b9      	bne.n	800290c <Running+0x20>
//	Sensor_Print_LineDetect();
//	HAL_Delay(300);
	}
	MotorL_SetPWM(0);
 8002998:	2000      	movs	r0, #0
 800299a:	f7ff fafd 	bl	8001f98 <MotorL_SetPWM>
	MotorR_SetPWM(0);
 800299e:	2000      	movs	r0, #0
 80029a0:	f7ff fb30 	bl	8002004 <MotorR_SetPWM>
	lcd_clear();
 80029a4:	f7ff fa80 	bl	8001ea8 <lcd_clear>
}
 80029a8:	bf00      	nop
 80029aa:	3708      	adds	r7, #8
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	0800bd6c 	.word	0x0800bd6c
 80029b4:	0800bd84 	.word	0x0800bd84
 80029b8:	20000254 	.word	0x20000254
 80029bc:	20000018 	.word	0x20000018
 80029c0:	2000000a 	.word	0x2000000a
 80029c4:	2000059c 	.word	0x2000059c
 80029c8:	20000008 	.word	0x20000008
 80029cc:	20000598 	.word	0x20000598
 80029d0:	ffffe3e0 	.word	0xffffe3e0
 80029d4:	20000007 	.word	0x20000007

080029d8 <Error_Return>:
int Error_Return (uint8_t Sensor_Array){
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	4603      	mov	r3, r0
 80029e0:	71fb      	strb	r3, [r7, #7]
	switch(Sensor_Array){
 80029e2:	79fb      	ldrb	r3, [r7, #7]
 80029e4:	2b38      	cmp	r3, #56	; 0x38
 80029e6:	d029      	beq.n	8002a3c <Error_Return+0x64>
 80029e8:	2b38      	cmp	r3, #56	; 0x38
 80029ea:	dc0d      	bgt.n	8002a08 <Error_Return+0x30>
 80029ec:	2b18      	cmp	r3, #24
 80029ee:	d022      	beq.n	8002a36 <Error_Return+0x5e>
 80029f0:	2b18      	cmp	r3, #24
 80029f2:	dc04      	bgt.n	80029fe <Error_Return+0x26>
 80029f4:	2b04      	cmp	r3, #4
 80029f6:	d015      	beq.n	8002a24 <Error_Return+0x4c>
 80029f8:	2b0c      	cmp	r3, #12
 80029fa:	d016      	beq.n	8002a2a <Error_Return+0x52>

	case 0b10000000:
		return -4500;
		break;
	default:
		break;
 80029fc:	e031      	b.n	8002a62 <Error_Return+0x8a>
	switch(Sensor_Array){
 80029fe:	2b1c      	cmp	r3, #28
 8002a00:	d016      	beq.n	8002a30 <Error_Return+0x58>
 8002a02:	2b30      	cmp	r3, #48	; 0x30
 8002a04:	d01d      	beq.n	8002a42 <Error_Return+0x6a>
		break;
 8002a06:	e02c      	b.n	8002a62 <Error_Return+0x8a>
	switch(Sensor_Array){
 8002a08:	2b80      	cmp	r3, #128	; 0x80
 8002a0a:	d028      	beq.n	8002a5e <Error_Return+0x86>
 8002a0c:	2b80      	cmp	r3, #128	; 0x80
 8002a0e:	dc04      	bgt.n	8002a1a <Error_Return+0x42>
 8002a10:	2b60      	cmp	r3, #96	; 0x60
 8002a12:	d01c      	beq.n	8002a4e <Error_Return+0x76>
 8002a14:	2b70      	cmp	r3, #112	; 0x70
 8002a16:	d017      	beq.n	8002a48 <Error_Return+0x70>
		break;
 8002a18:	e023      	b.n	8002a62 <Error_Return+0x8a>
	switch(Sensor_Array){
 8002a1a:	2bc0      	cmp	r3, #192	; 0xc0
 8002a1c:	d01d      	beq.n	8002a5a <Error_Return+0x82>
 8002a1e:	2be0      	cmp	r3, #224	; 0xe0
 8002a20:	d018      	beq.n	8002a54 <Error_Return+0x7c>
		break;
 8002a22:	e01e      	b.n	8002a62 <Error_Return+0x8a>
		return 8500;
 8002a24:	f242 1334 	movw	r3, #8500	; 0x2134
 8002a28:	e01b      	b.n	8002a62 <Error_Return+0x8a>
		return 7500;
 8002a2a:	f641 534c 	movw	r3, #7500	; 0x1d4c
 8002a2e:	e018      	b.n	8002a62 <Error_Return+0x8a>
		return 6500;
 8002a30:	f641 1364 	movw	r3, #6500	; 0x1964
 8002a34:	e015      	b.n	8002a62 <Error_Return+0x8a>
		return 5500;
 8002a36:	f241 537c 	movw	r3, #5500	; 0x157c
 8002a3a:	e012      	b.n	8002a62 <Error_Return+0x8a>
		return 4500;
 8002a3c:	f241 1394 	movw	r3, #4500	; 0x1194
 8002a40:	e00f      	b.n	8002a62 <Error_Return+0x8a>
		return 3500;
 8002a42:	f640 53ac 	movw	r3, #3500	; 0xdac
 8002a46:	e00c      	b.n	8002a62 <Error_Return+0x8a>
		return 2500;
 8002a48:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8002a4c:	e009      	b.n	8002a62 <Error_Return+0x8a>
		return 1500;
 8002a4e:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8002a52:	e006      	b.n	8002a62 <Error_Return+0x8a>
		return 500;
 8002a54:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002a58:	e003      	b.n	8002a62 <Error_Return+0x8a>
		return -1500;
 8002a5a:	4b05      	ldr	r3, [pc, #20]	; (8002a70 <Error_Return+0x98>)
 8002a5c:	e001      	b.n	8002a62 <Error_Return+0x8a>
		return -4500;
 8002a5e:	4b05      	ldr	r3, [pc, #20]	; (8002a74 <Error_Return+0x9c>)
 8002a60:	e7ff      	b.n	8002a62 <Error_Return+0x8a>
	}
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	370c      	adds	r7, #12
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	fffffa24 	.word	0xfffffa24
 8002a74:	ffffee6c 	.word	0xffffee6c

08002a78 <Contants>:
int Contants (int Present_Value,int Min,int Max){
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	607a      	str	r2, [r7, #4]
	if(Present_Value > Max){
 8002a84:	68fa      	ldr	r2, [r7, #12]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	dd03      	ble.n	8002a94 <Contants+0x1c>
		return Present_Value = Max;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	60fb      	str	r3, [r7, #12]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	e008      	b.n	8002aa6 <Contants+0x2e>
	}
	else if (Present_Value < Min ){
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	da03      	bge.n	8002aa4 <Contants+0x2c>
		return Present_Value = Min;
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	60fb      	str	r3, [r7, #12]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	e000      	b.n	8002aa6 <Contants+0x2e>
	}
	else
		return Present_Value;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3714      	adds	r7, #20
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
	...

08002ab4 <Sensor_Convert_A2D>:
void Sensor_Convert_A2D()
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
	LineDetect = 0;
 8002aba:	4b15      	ldr	r3, [pc, #84]	; (8002b10 <Sensor_Convert_A2D+0x5c>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 6; ++i)
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	607b      	str	r3, [r7, #4]
 8002ac4:	e01b      	b.n	8002afe <Sensor_Convert_A2D+0x4a>
	{
		if (Sensor_ADC_Value[i] < Sensor_Threshold[i])
 8002ac6:	4a13      	ldr	r2, [pc, #76]	; (8002b14 <Sensor_Convert_A2D+0x60>)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002ace:	4912      	ldr	r1, [pc, #72]	; (8002b18 <Sensor_Convert_A2D+0x64>)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d20e      	bcs.n	8002af8 <Sensor_Convert_A2D+0x44>
		{
			sbi(LineDetect, (7 - i));
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f1c3 0307 	rsb	r3, r3, #7
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae6:	b25a      	sxtb	r2, r3
 8002ae8:	4b09      	ldr	r3, [pc, #36]	; (8002b10 <Sensor_Convert_A2D+0x5c>)
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	b25b      	sxtb	r3, r3
 8002aee:	4313      	orrs	r3, r2
 8002af0:	b25b      	sxtb	r3, r3
 8002af2:	b2da      	uxtb	r2, r3
 8002af4:	4b06      	ldr	r3, [pc, #24]	; (8002b10 <Sensor_Convert_A2D+0x5c>)
 8002af6:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 6; ++i)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	3301      	adds	r3, #1
 8002afc:	607b      	str	r3, [r7, #4]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2b05      	cmp	r3, #5
 8002b02:	dde0      	ble.n	8002ac6 <Sensor_Convert_A2D+0x12>
//			printf("0 ");
		}
	}
//	printf("\n");
//	HAL_Delay(100);
}
 8002b04:	bf00      	nop
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr
 8002b10:	20000254 	.word	0x20000254
 8002b14:	200003fc 	.word	0x200003fc
 8002b18:	2000000c 	.word	0x2000000c

08002b1c <ScrollUp>:
		printf ("binary: %s\n",buffer);


}
void ScrollUp(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(ButtonA_GPIO_Port, ButtonA_Pin) == 0)
 8002b20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b24:	485c      	ldr	r0, [pc, #368]	; (8002c98 <ScrollUp+0x17c>)
 8002b26:	f002 fd0f 	bl	8005548 <HAL_GPIO_ReadPin>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	f040 80b0 	bne.w	8002c92 <ScrollUp+0x176>
	{
		while (HAL_GPIO_ReadPin(ButtonA_GPIO_Port, ButtonA_Pin) == 0)
 8002b32:	e002      	b.n	8002b3a <ScrollUp+0x1e>
		{
			HAL_Delay(50);
 8002b34:	2032      	movs	r0, #50	; 0x32
 8002b36:	f000 fe8d 	bl	8003854 <HAL_Delay>
		while (HAL_GPIO_ReadPin(ButtonA_GPIO_Port, ButtonA_Pin) == 0)
 8002b3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b3e:	4856      	ldr	r0, [pc, #344]	; (8002c98 <ScrollUp+0x17c>)
 8002b40:	f002 fd02 	bl	8005548 <HAL_GPIO_ReadPin>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d0f4      	beq.n	8002b34 <ScrollUp+0x18>
		}
		switch (Menu_type)
 8002b4a:	4b54      	ldr	r3, [pc, #336]	; (8002c9c <ScrollUp+0x180>)
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	2b03      	cmp	r3, #3
 8002b50:	d013      	beq.n	8002b7a <ScrollUp+0x5e>
 8002b52:	2b04      	cmp	r3, #4
 8002b54:	d058      	beq.n	8002c08 <ScrollUp+0xec>
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d000      	beq.n	8002b5c <ScrollUp+0x40>
				}
			}
			break;
		}
	}
}
 8002b5a:	e09a      	b.n	8002c92 <ScrollUp+0x176>
			line--;
 8002b5c:	4b50      	ldr	r3, [pc, #320]	; (8002ca0 <ScrollUp+0x184>)
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	3b01      	subs	r3, #1
 8002b62:	b2da      	uxtb	r2, r3
 8002b64:	4b4e      	ldr	r3, [pc, #312]	; (8002ca0 <ScrollUp+0x184>)
 8002b66:	701a      	strb	r2, [r3, #0]
			if (line < Number_of_Menu_firstline)
 8002b68:	4b4d      	ldr	r3, [pc, #308]	; (8002ca0 <ScrollUp+0x184>)
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f040 808d 	bne.w	8002c8c <ScrollUp+0x170>
				line = Maximum_Menu_line;
 8002b72:	4b4b      	ldr	r3, [pc, #300]	; (8002ca0 <ScrollUp+0x184>)
 8002b74:	2207      	movs	r2, #7
 8002b76:	701a      	strb	r2, [r3, #0]
			break;
 8002b78:	e088      	b.n	8002c8c <ScrollUp+0x170>
			line--;
 8002b7a:	4b49      	ldr	r3, [pc, #292]	; (8002ca0 <ScrollUp+0x184>)
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	b2da      	uxtb	r2, r3
 8002b82:	4b47      	ldr	r3, [pc, #284]	; (8002ca0 <ScrollUp+0x184>)
 8002b84:	701a      	strb	r2, [r3, #0]
			if (line < Number_of_Menu_firstline)
 8002b86:	4b46      	ldr	r3, [pc, #280]	; (8002ca0 <ScrollUp+0x184>)
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d102      	bne.n	8002b94 <ScrollUp+0x78>
				line = Maximum_PID_line;
 8002b8e:	4b44      	ldr	r3, [pc, #272]	; (8002ca0 <ScrollUp+0x184>)
 8002b90:	2204      	movs	r2, #4
 8002b92:	701a      	strb	r2, [r3, #0]
			if (Kp_modify_flag == 1)
 8002b94:	4b43      	ldr	r3, [pc, #268]	; (8002ca4 <ScrollUp+0x188>)
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d10c      	bne.n	8002bb6 <ScrollUp+0x9a>
				Kp += Kp_amount;
 8002b9c:	4b42      	ldr	r3, [pc, #264]	; (8002ca8 <ScrollUp+0x18c>)
 8002b9e:	edd3 7a00 	vldr	s15, [r3]
 8002ba2:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8002cac <ScrollUp+0x190>
 8002ba6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002baa:	4b3f      	ldr	r3, [pc, #252]	; (8002ca8 <ScrollUp+0x18c>)
 8002bac:	edc3 7a00 	vstr	s15, [r3]
				line = 1;
 8002bb0:	4b3b      	ldr	r3, [pc, #236]	; (8002ca0 <ScrollUp+0x184>)
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	701a      	strb	r2, [r3, #0]
			if (Ki_modify_flag == 1)
 8002bb6:	4b3e      	ldr	r3, [pc, #248]	; (8002cb0 <ScrollUp+0x194>)
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d10c      	bne.n	8002bd8 <ScrollUp+0xbc>
				Ki += Ki_amount;
 8002bbe:	4b3d      	ldr	r3, [pc, #244]	; (8002cb4 <ScrollUp+0x198>)
 8002bc0:	edd3 7a00 	vldr	s15, [r3]
 8002bc4:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8002cac <ScrollUp+0x190>
 8002bc8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002bcc:	4b39      	ldr	r3, [pc, #228]	; (8002cb4 <ScrollUp+0x198>)
 8002bce:	edc3 7a00 	vstr	s15, [r3]
				line = 2;
 8002bd2:	4b33      	ldr	r3, [pc, #204]	; (8002ca0 <ScrollUp+0x184>)
 8002bd4:	2202      	movs	r2, #2
 8002bd6:	701a      	strb	r2, [r3, #0]
			if (Kd_modify_flag == 1)
 8002bd8:	4b37      	ldr	r3, [pc, #220]	; (8002cb8 <ScrollUp+0x19c>)
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d10c      	bne.n	8002bfa <ScrollUp+0xde>
				Kd += Kd_amount;
 8002be0:	4b36      	ldr	r3, [pc, #216]	; (8002cbc <ScrollUp+0x1a0>)
 8002be2:	edd3 7a00 	vldr	s15, [r3]
 8002be6:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8002cac <ScrollUp+0x190>
 8002bea:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002bee:	4b33      	ldr	r3, [pc, #204]	; (8002cbc <ScrollUp+0x1a0>)
 8002bf0:	edc3 7a00 	vstr	s15, [r3]
				line = 3;
 8002bf4:	4b2a      	ldr	r3, [pc, #168]	; (8002ca0 <ScrollUp+0x184>)
 8002bf6:	2203      	movs	r2, #3
 8002bf8:	701a      	strb	r2, [r3, #0]
			Menu_system_control(PID_Menu, line);
 8002bfa:	4b29      	ldr	r3, [pc, #164]	; (8002ca0 <ScrollUp+0x184>)
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	4619      	mov	r1, r3
 8002c00:	2003      	movs	r0, #3
 8002c02:	f7fe f9c9 	bl	8000f98 <Menu_system_control>
			break;
 8002c06:	e044      	b.n	8002c92 <ScrollUp+0x176>
			line--;
 8002c08:	4b25      	ldr	r3, [pc, #148]	; (8002ca0 <ScrollUp+0x184>)
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	b2da      	uxtb	r2, r3
 8002c10:	4b23      	ldr	r3, [pc, #140]	; (8002ca0 <ScrollUp+0x184>)
 8002c12:	701a      	strb	r2, [r3, #0]
			if (line < Number_of_Menu_firstline)
 8002c14:	4b22      	ldr	r3, [pc, #136]	; (8002ca0 <ScrollUp+0x184>)
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d102      	bne.n	8002c22 <ScrollUp+0x106>
				line = Maximum_Engine_line;
 8002c1c:	4b20      	ldr	r3, [pc, #128]	; (8002ca0 <ScrollUp+0x184>)
 8002c1e:	2203      	movs	r2, #3
 8002c20:	701a      	strb	r2, [r3, #0]
			if (Left_modify_flag == 1)
 8002c22:	4b27      	ldr	r3, [pc, #156]	; (8002cc0 <ScrollUp+0x1a4>)
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d115      	bne.n	8002c56 <ScrollUp+0x13a>
				Left += 100;
 8002c2a:	4b26      	ldr	r3, [pc, #152]	; (8002cc4 <ScrollUp+0x1a8>)
 8002c2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	3364      	adds	r3, #100	; 0x64
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	b21a      	sxth	r2, r3
 8002c38:	4b22      	ldr	r3, [pc, #136]	; (8002cc4 <ScrollUp+0x1a8>)
 8002c3a:	801a      	strh	r2, [r3, #0]
				line = 1;
 8002c3c:	4b18      	ldr	r3, [pc, #96]	; (8002ca0 <ScrollUp+0x184>)
 8002c3e:	2201      	movs	r2, #1
 8002c40:	701a      	strb	r2, [r3, #0]
				if (Left >= 7200)
 8002c42:	4b20      	ldr	r3, [pc, #128]	; (8002cc4 <ScrollUp+0x1a8>)
 8002c44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c48:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 8002c4c:	db03      	blt.n	8002c56 <ScrollUp+0x13a>
					Left = 7200;
 8002c4e:	4b1d      	ldr	r3, [pc, #116]	; (8002cc4 <ScrollUp+0x1a8>)
 8002c50:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8002c54:	801a      	strh	r2, [r3, #0]
			if (Right_modify_flag == 1)
 8002c56:	4b1c      	ldr	r3, [pc, #112]	; (8002cc8 <ScrollUp+0x1ac>)
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d118      	bne.n	8002c90 <ScrollUp+0x174>
				Right += 100;
 8002c5e:	4b1b      	ldr	r3, [pc, #108]	; (8002ccc <ScrollUp+0x1b0>)
 8002c60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	3364      	adds	r3, #100	; 0x64
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	b21a      	sxth	r2, r3
 8002c6c:	4b17      	ldr	r3, [pc, #92]	; (8002ccc <ScrollUp+0x1b0>)
 8002c6e:	801a      	strh	r2, [r3, #0]
				line = 2;
 8002c70:	4b0b      	ldr	r3, [pc, #44]	; (8002ca0 <ScrollUp+0x184>)
 8002c72:	2202      	movs	r2, #2
 8002c74:	701a      	strb	r2, [r3, #0]
				if (Right >= 7200)
 8002c76:	4b15      	ldr	r3, [pc, #84]	; (8002ccc <ScrollUp+0x1b0>)
 8002c78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c7c:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 8002c80:	db06      	blt.n	8002c90 <ScrollUp+0x174>
					Right = 7200;
 8002c82:	4b12      	ldr	r3, [pc, #72]	; (8002ccc <ScrollUp+0x1b0>)
 8002c84:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8002c88:	801a      	strh	r2, [r3, #0]
			break;
 8002c8a:	e001      	b.n	8002c90 <ScrollUp+0x174>
			break;
 8002c8c:	bf00      	nop
 8002c8e:	e000      	b.n	8002c92 <ScrollUp+0x176>
			break;
 8002c90:	bf00      	nop
}
 8002c92:	bf00      	nop
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	40020800 	.word	0x40020800
 8002c9c:	20000001 	.word	0x20000001
 8002ca0:	20000004 	.word	0x20000004
 8002ca4:	20000255 	.word	0x20000255
 8002ca8:	2000025c 	.word	0x2000025c
 8002cac:	3c23d70a 	.word	0x3c23d70a
 8002cb0:	20000256 	.word	0x20000256
 8002cb4:	20000260 	.word	0x20000260
 8002cb8:	20000257 	.word	0x20000257
 8002cbc:	20000264 	.word	0x20000264
 8002cc0:	20000258 	.word	0x20000258
 8002cc4:	20000008 	.word	0x20000008
 8002cc8:	20000259 	.word	0x20000259
 8002ccc:	2000000a 	.word	0x2000000a

08002cd0 <SelectItem>:
void SelectItem(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(ButtonB_GPIO_Port, ButtonB_Pin) == 0) //Select button
 8002cd4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002cd8:	4818      	ldr	r0, [pc, #96]	; (8002d3c <SelectItem+0x6c>)
 8002cda:	f002 fc35 	bl	8005548 <HAL_GPIO_ReadPin>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d129      	bne.n	8002d38 <SelectItem+0x68>
	{
		while (HAL_GPIO_ReadPin(ButtonB_GPIO_Port, ButtonB_Pin) == 0)
 8002ce4:	e002      	b.n	8002cec <SelectItem+0x1c>
		{
			HAL_Delay(50);
 8002ce6:	2032      	movs	r0, #50	; 0x32
 8002ce8:	f000 fdb4 	bl	8003854 <HAL_Delay>
		while (HAL_GPIO_ReadPin(ButtonB_GPIO_Port, ButtonB_Pin) == 0)
 8002cec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002cf0:	4812      	ldr	r0, [pc, #72]	; (8002d3c <SelectItem+0x6c>)
 8002cf2:	f002 fc29 	bl	8005548 <HAL_GPIO_ReadPin>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d0f4      	beq.n	8002ce6 <SelectItem+0x16>
		}
		executeAction(line);
 8002cfc:	4b10      	ldr	r3, [pc, #64]	; (8002d40 <SelectItem+0x70>)
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7fe fe6b 	bl	80019dc <executeAction>
		if (Kp_modify_flag == 1 || Ki_modify_flag == 1 || Kd_modify_flag == 1
 8002d06:	4b0f      	ldr	r3, [pc, #60]	; (8002d44 <SelectItem+0x74>)
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d00f      	beq.n	8002d2e <SelectItem+0x5e>
 8002d0e:	4b0e      	ldr	r3, [pc, #56]	; (8002d48 <SelectItem+0x78>)
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d00b      	beq.n	8002d2e <SelectItem+0x5e>
 8002d16:	4b0d      	ldr	r3, [pc, #52]	; (8002d4c <SelectItem+0x7c>)
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d007      	beq.n	8002d2e <SelectItem+0x5e>
				|| Right_modify_flag == 1 || Left_modify_flag == 1)
 8002d1e:	4b0c      	ldr	r3, [pc, #48]	; (8002d50 <SelectItem+0x80>)
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d003      	beq.n	8002d2e <SelectItem+0x5e>
 8002d26:	4b0b      	ldr	r3, [pc, #44]	; (8002d54 <SelectItem+0x84>)
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d101      	bne.n	8002d32 <SelectItem+0x62>
		{
			__NOP();
 8002d2e:	bf00      	nop
		else
		{
			line = 1;
		}
	}
}
 8002d30:	e002      	b.n	8002d38 <SelectItem+0x68>
			line = 1;
 8002d32:	4b03      	ldr	r3, [pc, #12]	; (8002d40 <SelectItem+0x70>)
 8002d34:	2201      	movs	r2, #1
 8002d36:	701a      	strb	r2, [r3, #0]
}
 8002d38:	bf00      	nop
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	40020800 	.word	0x40020800
 8002d40:	20000004 	.word	0x20000004
 8002d44:	20000255 	.word	0x20000255
 8002d48:	20000256 	.word	0x20000256
 8002d4c:	20000257 	.word	0x20000257
 8002d50:	20000259 	.word	0x20000259
 8002d54:	20000258 	.word	0x20000258

08002d58 <MultifunctionButton>:
void MultifunctionButton(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0
	switch (Menu_type)
 8002d5c:	4b7d      	ldr	r3, [pc, #500]	; (8002f54 <MultifunctionButton+0x1fc>)
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	2b05      	cmp	r3, #5
 8002d62:	f200 80f4 	bhi.w	8002f4e <MultifunctionButton+0x1f6>
 8002d66:	a201      	add	r2, pc, #4	; (adr r2, 8002d6c <MultifunctionButton+0x14>)
 8002d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d6c:	08002d85 	.word	0x08002d85
 8002d70:	08002d99 	.word	0x08002d99
 8002d74:	08002f47 	.word	0x08002f47
 8002d78:	08002dc5 	.word	0x08002dc5
 8002d7c:	08002e9f 	.word	0x08002e9f
 8002d80:	08002f33 	.word	0x08002f33
	{
	case Running_menu:
		Menu_type = Main_menu;
 8002d84:	4b73      	ldr	r3, [pc, #460]	; (8002f54 <MultifunctionButton+0x1fc>)
 8002d86:	2201      	movs	r2, #1
 8002d88:	701a      	strb	r2, [r3, #0]
		line = 1;
 8002d8a:	4b73      	ldr	r3, [pc, #460]	; (8002f58 <MultifunctionButton+0x200>)
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	701a      	strb	r2, [r3, #0]
		cancer_running = 0;
 8002d90:	4b72      	ldr	r3, [pc, #456]	; (8002f5c <MultifunctionButton+0x204>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	701a      	strb	r2, [r3, #0]
		break;
 8002d96:	e0da      	b.n	8002f4e <MultifunctionButton+0x1f6>
	case Main_menu:
		line++;
 8002d98:	4b6f      	ldr	r3, [pc, #444]	; (8002f58 <MultifunctionButton+0x200>)
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	b2da      	uxtb	r2, r3
 8002da0:	4b6d      	ldr	r3, [pc, #436]	; (8002f58 <MultifunctionButton+0x200>)
 8002da2:	701a      	strb	r2, [r3, #0]
		if (line > Maximum_Menu_line)
 8002da4:	4b6c      	ldr	r3, [pc, #432]	; (8002f58 <MultifunctionButton+0x200>)
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	2b07      	cmp	r3, #7
 8002daa:	d902      	bls.n	8002db2 <MultifunctionButton+0x5a>
		{
			line = Number_of_Menu_firstline;
 8002dac:	4b6a      	ldr	r3, [pc, #424]	; (8002f58 <MultifunctionButton+0x200>)
 8002dae:	2201      	movs	r2, #1
 8002db0:	701a      	strb	r2, [r3, #0]
		}
		Menu_system_control(Menu_type, line);
 8002db2:	4b68      	ldr	r3, [pc, #416]	; (8002f54 <MultifunctionButton+0x1fc>)
 8002db4:	781a      	ldrb	r2, [r3, #0]
 8002db6:	4b68      	ldr	r3, [pc, #416]	; (8002f58 <MultifunctionButton+0x200>)
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	4619      	mov	r1, r3
 8002dbc:	4610      	mov	r0, r2
 8002dbe:	f7fe f8eb 	bl	8000f98 <Menu_system_control>
		break;
 8002dc2:	e0c4      	b.n	8002f4e <MultifunctionButton+0x1f6>
	case PID_Menu:
		line++;
 8002dc4:	4b64      	ldr	r3, [pc, #400]	; (8002f58 <MultifunctionButton+0x200>)
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	3301      	adds	r3, #1
 8002dca:	b2da      	uxtb	r2, r3
 8002dcc:	4b62      	ldr	r3, [pc, #392]	; (8002f58 <MultifunctionButton+0x200>)
 8002dce:	701a      	strb	r2, [r3, #0]
		if (line > Maximum_PID_line)
 8002dd0:	4b61      	ldr	r3, [pc, #388]	; (8002f58 <MultifunctionButton+0x200>)
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	2b04      	cmp	r3, #4
 8002dd6:	d902      	bls.n	8002dde <MultifunctionButton+0x86>
		{
			line = Number_of_Menu_firstline;
 8002dd8:	4b5f      	ldr	r3, [pc, #380]	; (8002f58 <MultifunctionButton+0x200>)
 8002dda:	2201      	movs	r2, #1
 8002ddc:	701a      	strb	r2, [r3, #0]
		}
		if (Kp_modify_flag == 1)
 8002dde:	4b60      	ldr	r3, [pc, #384]	; (8002f60 <MultifunctionButton+0x208>)
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d118      	bne.n	8002e18 <MultifunctionButton+0xc0>
		{
			Kp -= Kp_amount;
 8002de6:	4b5f      	ldr	r3, [pc, #380]	; (8002f64 <MultifunctionButton+0x20c>)
 8002de8:	edd3 7a00 	vldr	s15, [r3]
 8002dec:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8002f68 <MultifunctionButton+0x210>
 8002df0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002df4:	4b5b      	ldr	r3, [pc, #364]	; (8002f64 <MultifunctionButton+0x20c>)
 8002df6:	edc3 7a00 	vstr	s15, [r3]
			line = 1;
 8002dfa:	4b57      	ldr	r3, [pc, #348]	; (8002f58 <MultifunctionButton+0x200>)
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	701a      	strb	r2, [r3, #0]
			if (Kp <= 0)
 8002e00:	4b58      	ldr	r3, [pc, #352]	; (8002f64 <MultifunctionButton+0x20c>)
 8002e02:	edd3 7a00 	vldr	s15, [r3]
 8002e06:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e0e:	d803      	bhi.n	8002e18 <MultifunctionButton+0xc0>
				{Kp = 0;}
 8002e10:	4b54      	ldr	r3, [pc, #336]	; (8002f64 <MultifunctionButton+0x20c>)
 8002e12:	f04f 0200 	mov.w	r2, #0
 8002e16:	601a      	str	r2, [r3, #0]
		}
		if (Ki_modify_flag == 1)
 8002e18:	4b54      	ldr	r3, [pc, #336]	; (8002f6c <MultifunctionButton+0x214>)
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d118      	bne.n	8002e52 <MultifunctionButton+0xfa>
		{
			Ki -= Ki_amount;
 8002e20:	4b53      	ldr	r3, [pc, #332]	; (8002f70 <MultifunctionButton+0x218>)
 8002e22:	edd3 7a00 	vldr	s15, [r3]
 8002e26:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8002f68 <MultifunctionButton+0x210>
 8002e2a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002e2e:	4b50      	ldr	r3, [pc, #320]	; (8002f70 <MultifunctionButton+0x218>)
 8002e30:	edc3 7a00 	vstr	s15, [r3]
			line = 2;
 8002e34:	4b48      	ldr	r3, [pc, #288]	; (8002f58 <MultifunctionButton+0x200>)
 8002e36:	2202      	movs	r2, #2
 8002e38:	701a      	strb	r2, [r3, #0]
			if (Ki <= 0)
 8002e3a:	4b4d      	ldr	r3, [pc, #308]	; (8002f70 <MultifunctionButton+0x218>)
 8002e3c:	edd3 7a00 	vldr	s15, [r3]
 8002e40:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e48:	d803      	bhi.n	8002e52 <MultifunctionButton+0xfa>
				{Ki = 0;}
 8002e4a:	4b49      	ldr	r3, [pc, #292]	; (8002f70 <MultifunctionButton+0x218>)
 8002e4c:	f04f 0200 	mov.w	r2, #0
 8002e50:	601a      	str	r2, [r3, #0]
		}
		if (Kd_modify_flag == 1)
 8002e52:	4b48      	ldr	r3, [pc, #288]	; (8002f74 <MultifunctionButton+0x21c>)
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d118      	bne.n	8002e8c <MultifunctionButton+0x134>
		{
			Kd -= Kd_amount;
 8002e5a:	4b47      	ldr	r3, [pc, #284]	; (8002f78 <MultifunctionButton+0x220>)
 8002e5c:	edd3 7a00 	vldr	s15, [r3]
 8002e60:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8002f68 <MultifunctionButton+0x210>
 8002e64:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002e68:	4b43      	ldr	r3, [pc, #268]	; (8002f78 <MultifunctionButton+0x220>)
 8002e6a:	edc3 7a00 	vstr	s15, [r3]
			line = 3;
 8002e6e:	4b3a      	ldr	r3, [pc, #232]	; (8002f58 <MultifunctionButton+0x200>)
 8002e70:	2203      	movs	r2, #3
 8002e72:	701a      	strb	r2, [r3, #0]
			if (Kd <= 0)
 8002e74:	4b40      	ldr	r3, [pc, #256]	; (8002f78 <MultifunctionButton+0x220>)
 8002e76:	edd3 7a00 	vldr	s15, [r3]
 8002e7a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e82:	d803      	bhi.n	8002e8c <MultifunctionButton+0x134>
				{Kd = 0;}
 8002e84:	4b3c      	ldr	r3, [pc, #240]	; (8002f78 <MultifunctionButton+0x220>)
 8002e86:	f04f 0200 	mov.w	r2, #0
 8002e8a:	601a      	str	r2, [r3, #0]
		}
		Menu_system_control(Menu_type, line);
 8002e8c:	4b31      	ldr	r3, [pc, #196]	; (8002f54 <MultifunctionButton+0x1fc>)
 8002e8e:	781a      	ldrb	r2, [r3, #0]
 8002e90:	4b31      	ldr	r3, [pc, #196]	; (8002f58 <MultifunctionButton+0x200>)
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	4619      	mov	r1, r3
 8002e96:	4610      	mov	r0, r2
 8002e98:	f7fe f87e 	bl	8000f98 <Menu_system_control>
		break;
 8002e9c:	e057      	b.n	8002f4e <MultifunctionButton+0x1f6>
	case Engine_menu:
		line++;
 8002e9e:	4b2e      	ldr	r3, [pc, #184]	; (8002f58 <MultifunctionButton+0x200>)
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	b2da      	uxtb	r2, r3
 8002ea6:	4b2c      	ldr	r3, [pc, #176]	; (8002f58 <MultifunctionButton+0x200>)
 8002ea8:	701a      	strb	r2, [r3, #0]
		if (line > Maximum_Engine_line)
 8002eaa:	4b2b      	ldr	r3, [pc, #172]	; (8002f58 <MultifunctionButton+0x200>)
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	2b03      	cmp	r3, #3
 8002eb0:	d902      	bls.n	8002eb8 <MultifunctionButton+0x160>
		{
			line = Number_of_Menu_firstline;
 8002eb2:	4b29      	ldr	r3, [pc, #164]	; (8002f58 <MultifunctionButton+0x200>)
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	701a      	strb	r2, [r3, #0]
		}
		if (Left_modify_flag == 1)
 8002eb8:	4b30      	ldr	r3, [pc, #192]	; (8002f7c <MultifunctionButton+0x224>)
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d115      	bne.n	8002eec <MultifunctionButton+0x194>
		{
			Left -= 100;
 8002ec0:	4b2f      	ldr	r3, [pc, #188]	; (8002f80 <MultifunctionButton+0x228>)
 8002ec2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	3b64      	subs	r3, #100	; 0x64
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	b21a      	sxth	r2, r3
 8002ece:	4b2c      	ldr	r3, [pc, #176]	; (8002f80 <MultifunctionButton+0x228>)
 8002ed0:	801a      	strh	r2, [r3, #0]
			line = 1;
 8002ed2:	4b21      	ldr	r3, [pc, #132]	; (8002f58 <MultifunctionButton+0x200>)
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	701a      	strb	r2, [r3, #0]
			if (Left <= -7200)
 8002ed8:	4b29      	ldr	r3, [pc, #164]	; (8002f80 <MultifunctionButton+0x228>)
 8002eda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ede:	f513 5fe1 	cmn.w	r3, #7200	; 0x1c20
 8002ee2:	dc03      	bgt.n	8002eec <MultifunctionButton+0x194>
				{Left = -7200;}
 8002ee4:	4b26      	ldr	r3, [pc, #152]	; (8002f80 <MultifunctionButton+0x228>)
 8002ee6:	f24e 32e0 	movw	r2, #58336	; 0xe3e0
 8002eea:	801a      	strh	r2, [r3, #0]
		}
		if (Right_modify_flag == 1)
 8002eec:	4b25      	ldr	r3, [pc, #148]	; (8002f84 <MultifunctionButton+0x22c>)
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d115      	bne.n	8002f20 <MultifunctionButton+0x1c8>
		{
			Right -= 100;
 8002ef4:	4b24      	ldr	r3, [pc, #144]	; (8002f88 <MultifunctionButton+0x230>)
 8002ef6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	3b64      	subs	r3, #100	; 0x64
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	b21a      	sxth	r2, r3
 8002f02:	4b21      	ldr	r3, [pc, #132]	; (8002f88 <MultifunctionButton+0x230>)
 8002f04:	801a      	strh	r2, [r3, #0]
			line = 2;
 8002f06:	4b14      	ldr	r3, [pc, #80]	; (8002f58 <MultifunctionButton+0x200>)
 8002f08:	2202      	movs	r2, #2
 8002f0a:	701a      	strb	r2, [r3, #0]
			if (Right <= -7200)
 8002f0c:	4b1e      	ldr	r3, [pc, #120]	; (8002f88 <MultifunctionButton+0x230>)
 8002f0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f12:	f513 5fe1 	cmn.w	r3, #7200	; 0x1c20
 8002f16:	dc03      	bgt.n	8002f20 <MultifunctionButton+0x1c8>
				{Right = -7200;}
 8002f18:	4b1b      	ldr	r3, [pc, #108]	; (8002f88 <MultifunctionButton+0x230>)
 8002f1a:	f24e 32e0 	movw	r2, #58336	; 0xe3e0
 8002f1e:	801a      	strh	r2, [r3, #0]
		}
		Menu_system_control(Menu_type, line);
 8002f20:	4b0c      	ldr	r3, [pc, #48]	; (8002f54 <MultifunctionButton+0x1fc>)
 8002f22:	781a      	ldrb	r2, [r3, #0]
 8002f24:	4b0c      	ldr	r3, [pc, #48]	; (8002f58 <MultifunctionButton+0x200>)
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	4619      	mov	r1, r3
 8002f2a:	4610      	mov	r0, r2
 8002f2c:	f7fe f834 	bl	8000f98 <Menu_system_control>
		break;
 8002f30:	e00d      	b.n	8002f4e <MultifunctionButton+0x1f6>
	case LineDetect_Show:
		Menu_type = Main_menu;
 8002f32:	4b08      	ldr	r3, [pc, #32]	; (8002f54 <MultifunctionButton+0x1fc>)
 8002f34:	2201      	movs	r2, #1
 8002f36:	701a      	strb	r2, [r3, #0]
		line = 1;
 8002f38:	4b07      	ldr	r3, [pc, #28]	; (8002f58 <MultifunctionButton+0x200>)
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	701a      	strb	r2, [r3, #0]
		cancer_menu = 0;
 8002f3e:	4b13      	ldr	r3, [pc, #76]	; (8002f8c <MultifunctionButton+0x234>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	701a      	strb	r2, [r3, #0]
		break;
 8002f44:	e003      	b.n	8002f4e <MultifunctionButton+0x1f6>

	case Color_Processing:
		Color_Read = 0;
 8002f46:	4b12      	ldr	r3, [pc, #72]	; (8002f90 <MultifunctionButton+0x238>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	701a      	strb	r2, [r3, #0]
		break;
 8002f4c:	bf00      	nop
	}

}
 8002f4e:	bf00      	nop
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	20000001 	.word	0x20000001
 8002f58:	20000004 	.word	0x20000004
 8002f5c:	20000007 	.word	0x20000007
 8002f60:	20000255 	.word	0x20000255
 8002f64:	2000025c 	.word	0x2000025c
 8002f68:	3c23d70a 	.word	0x3c23d70a
 8002f6c:	20000256 	.word	0x20000256
 8002f70:	20000260 	.word	0x20000260
 8002f74:	20000257 	.word	0x20000257
 8002f78:	20000264 	.word	0x20000264
 8002f7c:	20000258 	.word	0x20000258
 8002f80:	20000008 	.word	0x20000008
 8002f84:	20000259 	.word	0x20000259
 8002f88:	2000000a 	.word	0x2000000a
 8002f8c:	20000006 	.word	0x20000006
 8002f90:	20000002 	.word	0x20000002

08002f94 <HAL_GPIO_EXTI_Callback>:

//Deboucing button program
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == ButtonC_Pin && stateBTNC == 1)
 8002f9e:	88fb      	ldrh	r3, [r7, #6]
 8002fa0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fa4:	d10a      	bne.n	8002fbc <HAL_GPIO_EXTI_Callback+0x28>
 8002fa6:	4b08      	ldr	r3, [pc, #32]	; (8002fc8 <HAL_GPIO_EXTI_Callback+0x34>)
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d106      	bne.n	8002fbc <HAL_GPIO_EXTI_Callback+0x28>
	{
		HAL_TIM_Base_Start_IT(&htim5);
 8002fae:	4807      	ldr	r0, [pc, #28]	; (8002fcc <HAL_GPIO_EXTI_Callback+0x38>)
 8002fb0:	f003 fbe1 	bl	8006776 <HAL_TIM_Base_Start_IT>
		stateBTNC = 0;
 8002fb4:	4b04      	ldr	r3, [pc, #16]	; (8002fc8 <HAL_GPIO_EXTI_Callback+0x34>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	701a      	strb	r2, [r3, #0]
 8002fba:	e000      	b.n	8002fbe <HAL_GPIO_EXTI_Callback+0x2a>
	}

	else
	{
		__NOP();
 8002fbc:	bf00      	nop
	}
}
 8002fbe:	bf00      	nop
 8002fc0:	3708      	adds	r7, #8
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	20000005 	.word	0x20000005
 8002fcc:	20000414 	.word	0x20000414

08002fd0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim5.Instance)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	4b0d      	ldr	r3, [pc, #52]	; (8003014 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d112      	bne.n	800300a <HAL_TIM_PeriodElapsedCallback+0x3a>
	{
		if (HAL_GPIO_ReadPin(ButtonC_GPIO_Port, ButtonC_Pin)
 8002fe4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002fe8:	480b      	ldr	r0, [pc, #44]	; (8003018 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002fea:	f002 faad 	bl	8005548 <HAL_GPIO_ReadPin>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d10a      	bne.n	800300a <HAL_TIM_PeriodElapsedCallback+0x3a>
				== GPIO_PIN_RESET)
		{
			MultifunctionButton();
 8002ff4:	f7ff feb0 	bl	8002d58 <MultifunctionButton>
			menu_display = 1;
 8002ff8:	4b08      	ldr	r3, [pc, #32]	; (800301c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	701a      	strb	r2, [r3, #0]
			stateBTNC = 1;
 8002ffe:	4b08      	ldr	r3, [pc, #32]	; (8003020 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8003000:	2201      	movs	r2, #1
 8003002:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim5);
 8003004:	4803      	ldr	r0, [pc, #12]	; (8003014 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8003006:	f003 fbda 	bl	80067be <HAL_TIM_Base_Stop_IT>

		}
	}
}
 800300a:	bf00      	nop
 800300c:	3708      	adds	r7, #8
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	20000414 	.word	0x20000414
 8003018:	40020800 	.word	0x40020800
 800301c:	20000000 	.word	0x20000000
 8003020:	20000005 	.word	0x20000005

08003024 <ReadFlash>:
void ReadFlash(void)
{
 8003024:	b590      	push	{r4, r7, lr}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
	Flash_Read_Data(0x08020000, PID_Rx);
 800302a:	4921      	ldr	r1, [pc, #132]	; (80030b0 <ReadFlash+0x8c>)
 800302c:	4821      	ldr	r0, [pc, #132]	; (80030b4 <ReadFlash+0x90>)
 800302e:	f7fe fe7d 	bl	8001d2c <Flash_Read_Data>
	Convert_To_Str(PID_Rx, string_2);
 8003032:	4921      	ldr	r1, [pc, #132]	; (80030b8 <ReadFlash+0x94>)
 8003034:	481e      	ldr	r0, [pc, #120]	; (80030b0 <ReadFlash+0x8c>)
 8003036:	f7fe fe98 	bl	8001d6a <Convert_To_Str>
	char *KpinString = strtok(string_2," ");
 800303a:	4920      	ldr	r1, [pc, #128]	; (80030bc <ReadFlash+0x98>)
 800303c:	481e      	ldr	r0, [pc, #120]	; (80030b8 <ReadFlash+0x94>)
 800303e:	f006 fcb3 	bl	80099a8 <strtok>
 8003042:	60f8      	str	r0, [r7, #12]
	char *KiinString = strtok(NULL," ");
 8003044:	491d      	ldr	r1, [pc, #116]	; (80030bc <ReadFlash+0x98>)
 8003046:	2000      	movs	r0, #0
 8003048:	f006 fcae 	bl	80099a8 <strtok>
 800304c:	60b8      	str	r0, [r7, #8]
	char *KdinString = strtok(NULL," ");
 800304e:	491b      	ldr	r1, [pc, #108]	; (80030bc <ReadFlash+0x98>)
 8003050:	2000      	movs	r0, #0
 8003052:	f006 fca9 	bl	80099a8 <strtok>
 8003056:	6078      	str	r0, [r7, #4]
	Kp = strtod(KpinString, NULL);
 8003058:	2100      	movs	r1, #0
 800305a:	68f8      	ldr	r0, [r7, #12]
 800305c:	f006 fc90 	bl	8009980 <strtod>
 8003060:	ec54 3b10 	vmov	r3, r4, d0
 8003064:	4618      	mov	r0, r3
 8003066:	4621      	mov	r1, r4
 8003068:	f7fd fdc6 	bl	8000bf8 <__aeabi_d2f>
 800306c:	4602      	mov	r2, r0
 800306e:	4b14      	ldr	r3, [pc, #80]	; (80030c0 <ReadFlash+0x9c>)
 8003070:	601a      	str	r2, [r3, #0]
	Ki = strtod(KiinString, NULL);
 8003072:	2100      	movs	r1, #0
 8003074:	68b8      	ldr	r0, [r7, #8]
 8003076:	f006 fc83 	bl	8009980 <strtod>
 800307a:	ec54 3b10 	vmov	r3, r4, d0
 800307e:	4618      	mov	r0, r3
 8003080:	4621      	mov	r1, r4
 8003082:	f7fd fdb9 	bl	8000bf8 <__aeabi_d2f>
 8003086:	4602      	mov	r2, r0
 8003088:	4b0e      	ldr	r3, [pc, #56]	; (80030c4 <ReadFlash+0xa0>)
 800308a:	601a      	str	r2, [r3, #0]
	Kd = strtod(KdinString, NULL);
 800308c:	2100      	movs	r1, #0
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f006 fc76 	bl	8009980 <strtod>
 8003094:	ec54 3b10 	vmov	r3, r4, d0
 8003098:	4618      	mov	r0, r3
 800309a:	4621      	mov	r1, r4
 800309c:	f7fd fdac 	bl	8000bf8 <__aeabi_d2f>
 80030a0:	4602      	mov	r2, r0
 80030a2:	4b09      	ldr	r3, [pc, #36]	; (80030c8 <ReadFlash+0xa4>)
 80030a4:	601a      	str	r2, [r3, #0]

}
 80030a6:	bf00      	nop
 80030a8:	3714      	adds	r7, #20
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd90      	pop	{r4, r7, pc}
 80030ae:	bf00      	nop
 80030b0:	200004dc 	.word	0x200004dc
 80030b4:	08020000 	.word	0x08020000
 80030b8:	20000594 	.word	0x20000594
 80030bc:	0800bdbc 	.word	0x0800bdbc
 80030c0:	2000025c 	.word	0x2000025c
 80030c4:	20000260 	.word	0x20000260
 80030c8:	20000264 	.word	0x20000264

080030cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80030d0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80030d2:	e7fe      	b.n	80030d2 <Error_Handler+0x6>

080030d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030da:	2300      	movs	r3, #0
 80030dc:	607b      	str	r3, [r7, #4]
 80030de:	4b10      	ldr	r3, [pc, #64]	; (8003120 <HAL_MspInit+0x4c>)
 80030e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e2:	4a0f      	ldr	r2, [pc, #60]	; (8003120 <HAL_MspInit+0x4c>)
 80030e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030e8:	6453      	str	r3, [r2, #68]	; 0x44
 80030ea:	4b0d      	ldr	r3, [pc, #52]	; (8003120 <HAL_MspInit+0x4c>)
 80030ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030f2:	607b      	str	r3, [r7, #4]
 80030f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030f6:	2300      	movs	r3, #0
 80030f8:	603b      	str	r3, [r7, #0]
 80030fa:	4b09      	ldr	r3, [pc, #36]	; (8003120 <HAL_MspInit+0x4c>)
 80030fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fe:	4a08      	ldr	r2, [pc, #32]	; (8003120 <HAL_MspInit+0x4c>)
 8003100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003104:	6413      	str	r3, [r2, #64]	; 0x40
 8003106:	4b06      	ldr	r3, [pc, #24]	; (8003120 <HAL_MspInit+0x4c>)
 8003108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800310e:	603b      	str	r3, [r7, #0]
 8003110:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003112:	bf00      	nop
 8003114:	370c      	adds	r7, #12
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	40023800 	.word	0x40023800

08003124 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b08a      	sub	sp, #40	; 0x28
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800312c:	f107 0314 	add.w	r3, r7, #20
 8003130:	2200      	movs	r2, #0
 8003132:	601a      	str	r2, [r3, #0]
 8003134:	605a      	str	r2, [r3, #4]
 8003136:	609a      	str	r2, [r3, #8]
 8003138:	60da      	str	r2, [r3, #12]
 800313a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a33      	ldr	r2, [pc, #204]	; (8003210 <HAL_ADC_MspInit+0xec>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d15f      	bne.n	8003206 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003146:	2300      	movs	r3, #0
 8003148:	613b      	str	r3, [r7, #16]
 800314a:	4b32      	ldr	r3, [pc, #200]	; (8003214 <HAL_ADC_MspInit+0xf0>)
 800314c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800314e:	4a31      	ldr	r2, [pc, #196]	; (8003214 <HAL_ADC_MspInit+0xf0>)
 8003150:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003154:	6453      	str	r3, [r2, #68]	; 0x44
 8003156:	4b2f      	ldr	r3, [pc, #188]	; (8003214 <HAL_ADC_MspInit+0xf0>)
 8003158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800315a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800315e:	613b      	str	r3, [r7, #16]
 8003160:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003162:	2300      	movs	r3, #0
 8003164:	60fb      	str	r3, [r7, #12]
 8003166:	4b2b      	ldr	r3, [pc, #172]	; (8003214 <HAL_ADC_MspInit+0xf0>)
 8003168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316a:	4a2a      	ldr	r2, [pc, #168]	; (8003214 <HAL_ADC_MspInit+0xf0>)
 800316c:	f043 0301 	orr.w	r3, r3, #1
 8003170:	6313      	str	r3, [r2, #48]	; 0x30
 8003172:	4b28      	ldr	r3, [pc, #160]	; (8003214 <HAL_ADC_MspInit+0xf0>)
 8003174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003176:	f003 0301 	and.w	r3, r3, #1
 800317a:	60fb      	str	r3, [r7, #12]
 800317c:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800317e:	23fc      	movs	r3, #252	; 0xfc
 8003180:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003182:	2303      	movs	r3, #3
 8003184:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003186:	2300      	movs	r3, #0
 8003188:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800318a:	f107 0314 	add.w	r3, r7, #20
 800318e:	4619      	mov	r1, r3
 8003190:	4821      	ldr	r0, [pc, #132]	; (8003218 <HAL_ADC_MspInit+0xf4>)
 8003192:	f002 f857 	bl	8005244 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003196:	4b21      	ldr	r3, [pc, #132]	; (800321c <HAL_ADC_MspInit+0xf8>)
 8003198:	4a21      	ldr	r2, [pc, #132]	; (8003220 <HAL_ADC_MspInit+0xfc>)
 800319a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800319c:	4b1f      	ldr	r3, [pc, #124]	; (800321c <HAL_ADC_MspInit+0xf8>)
 800319e:	2200      	movs	r2, #0
 80031a0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031a2:	4b1e      	ldr	r3, [pc, #120]	; (800321c <HAL_ADC_MspInit+0xf8>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80031a8:	4b1c      	ldr	r3, [pc, #112]	; (800321c <HAL_ADC_MspInit+0xf8>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80031ae:	4b1b      	ldr	r3, [pc, #108]	; (800321c <HAL_ADC_MspInit+0xf8>)
 80031b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031b4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80031b6:	4b19      	ldr	r3, [pc, #100]	; (800321c <HAL_ADC_MspInit+0xf8>)
 80031b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031bc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80031be:	4b17      	ldr	r3, [pc, #92]	; (800321c <HAL_ADC_MspInit+0xf8>)
 80031c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80031c4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80031c6:	4b15      	ldr	r3, [pc, #84]	; (800321c <HAL_ADC_MspInit+0xf8>)
 80031c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80031cc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80031ce:	4b13      	ldr	r3, [pc, #76]	; (800321c <HAL_ADC_MspInit+0xf8>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80031d4:	4b11      	ldr	r3, [pc, #68]	; (800321c <HAL_ADC_MspInit+0xf8>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80031da:	4810      	ldr	r0, [pc, #64]	; (800321c <HAL_ADC_MspInit+0xf8>)
 80031dc:	f001 f9b0 	bl	8004540 <HAL_DMA_Init>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80031e6:	f7ff ff71 	bl	80030cc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a0b      	ldr	r2, [pc, #44]	; (800321c <HAL_ADC_MspInit+0xf8>)
 80031ee:	639a      	str	r2, [r3, #56]	; 0x38
 80031f0:	4a0a      	ldr	r2, [pc, #40]	; (800321c <HAL_ADC_MspInit+0xf8>)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80031f6:	2200      	movs	r2, #0
 80031f8:	2100      	movs	r1, #0
 80031fa:	2012      	movs	r0, #18
 80031fc:	f001 f965 	bl	80044ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003200:	2012      	movs	r0, #18
 8003202:	f001 f97e 	bl	8004502 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003206:	bf00      	nop
 8003208:	3728      	adds	r7, #40	; 0x28
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	40012000 	.word	0x40012000
 8003214:	40023800 	.word	0x40023800
 8003218:	40020000 	.word	0x40020000
 800321c:	200004f4 	.word	0x200004f4
 8003220:	40026410 	.word	0x40026410

08003224 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b08a      	sub	sp, #40	; 0x28
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800322c:	f107 0314 	add.w	r3, r7, #20
 8003230:	2200      	movs	r2, #0
 8003232:	601a      	str	r2, [r3, #0]
 8003234:	605a      	str	r2, [r3, #4]
 8003236:	609a      	str	r2, [r3, #8]
 8003238:	60da      	str	r2, [r3, #12]
 800323a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a28      	ldr	r2, [pc, #160]	; (80032e4 <HAL_I2C_MspInit+0xc0>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d14a      	bne.n	80032dc <HAL_I2C_MspInit+0xb8>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003246:	2300      	movs	r3, #0
 8003248:	613b      	str	r3, [r7, #16]
 800324a:	4b27      	ldr	r3, [pc, #156]	; (80032e8 <HAL_I2C_MspInit+0xc4>)
 800324c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324e:	4a26      	ldr	r2, [pc, #152]	; (80032e8 <HAL_I2C_MspInit+0xc4>)
 8003250:	f043 0301 	orr.w	r3, r3, #1
 8003254:	6313      	str	r3, [r2, #48]	; 0x30
 8003256:	4b24      	ldr	r3, [pc, #144]	; (80032e8 <HAL_I2C_MspInit+0xc4>)
 8003258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	613b      	str	r3, [r7, #16]
 8003260:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003262:	2300      	movs	r3, #0
 8003264:	60fb      	str	r3, [r7, #12]
 8003266:	4b20      	ldr	r3, [pc, #128]	; (80032e8 <HAL_I2C_MspInit+0xc4>)
 8003268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326a:	4a1f      	ldr	r2, [pc, #124]	; (80032e8 <HAL_I2C_MspInit+0xc4>)
 800326c:	f043 0302 	orr.w	r3, r3, #2
 8003270:	6313      	str	r3, [r2, #48]	; 0x30
 8003272:	4b1d      	ldr	r3, [pc, #116]	; (80032e8 <HAL_I2C_MspInit+0xc4>)
 8003274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	60fb      	str	r3, [r7, #12]
 800327c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB4     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800327e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003282:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003284:	2312      	movs	r3, #18
 8003286:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003288:	2301      	movs	r3, #1
 800328a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800328c:	2303      	movs	r3, #3
 800328e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003290:	2304      	movs	r3, #4
 8003292:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003294:	f107 0314 	add.w	r3, r7, #20
 8003298:	4619      	mov	r1, r3
 800329a:	4814      	ldr	r0, [pc, #80]	; (80032ec <HAL_I2C_MspInit+0xc8>)
 800329c:	f001 ffd2 	bl	8005244 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80032a0:	2310      	movs	r3, #16
 80032a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80032a4:	2312      	movs	r3, #18
 80032a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80032a8:	2301      	movs	r3, #1
 80032aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032ac:	2303      	movs	r3, #3
 80032ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 80032b0:	2309      	movs	r3, #9
 80032b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032b4:	f107 0314 	add.w	r3, r7, #20
 80032b8:	4619      	mov	r1, r3
 80032ba:	480d      	ldr	r0, [pc, #52]	; (80032f0 <HAL_I2C_MspInit+0xcc>)
 80032bc:	f001 ffc2 	bl	8005244 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80032c0:	2300      	movs	r3, #0
 80032c2:	60bb      	str	r3, [r7, #8]
 80032c4:	4b08      	ldr	r3, [pc, #32]	; (80032e8 <HAL_I2C_MspInit+0xc4>)
 80032c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c8:	4a07      	ldr	r2, [pc, #28]	; (80032e8 <HAL_I2C_MspInit+0xc4>)
 80032ca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80032ce:	6413      	str	r3, [r2, #64]	; 0x40
 80032d0:	4b05      	ldr	r3, [pc, #20]	; (80032e8 <HAL_I2C_MspInit+0xc4>)
 80032d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032d8:	60bb      	str	r3, [r7, #8]
 80032da:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80032dc:	bf00      	nop
 80032de:	3728      	adds	r7, #40	; 0x28
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	40005c00 	.word	0x40005c00
 80032e8:	40023800 	.word	0x40023800
 80032ec:	40020000 	.word	0x40020000
 80032f0:	40020400 	.word	0x40020400

080032f4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b08c      	sub	sp, #48	; 0x30
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032fc:	f107 031c 	add.w	r3, r7, #28
 8003300:	2200      	movs	r2, #0
 8003302:	601a      	str	r2, [r3, #0]
 8003304:	605a      	str	r2, [r3, #4]
 8003306:	609a      	str	r2, [r3, #8]
 8003308:	60da      	str	r2, [r3, #12]
 800330a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003314:	d14b      	bne.n	80033ae <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003316:	2300      	movs	r3, #0
 8003318:	61bb      	str	r3, [r7, #24]
 800331a:	4b3f      	ldr	r3, [pc, #252]	; (8003418 <HAL_TIM_Encoder_MspInit+0x124>)
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	4a3e      	ldr	r2, [pc, #248]	; (8003418 <HAL_TIM_Encoder_MspInit+0x124>)
 8003320:	f043 0301 	orr.w	r3, r3, #1
 8003324:	6413      	str	r3, [r2, #64]	; 0x40
 8003326:	4b3c      	ldr	r3, [pc, #240]	; (8003418 <HAL_TIM_Encoder_MspInit+0x124>)
 8003328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	61bb      	str	r3, [r7, #24]
 8003330:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003332:	2300      	movs	r3, #0
 8003334:	617b      	str	r3, [r7, #20]
 8003336:	4b38      	ldr	r3, [pc, #224]	; (8003418 <HAL_TIM_Encoder_MspInit+0x124>)
 8003338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333a:	4a37      	ldr	r2, [pc, #220]	; (8003418 <HAL_TIM_Encoder_MspInit+0x124>)
 800333c:	f043 0301 	orr.w	r3, r3, #1
 8003340:	6313      	str	r3, [r2, #48]	; 0x30
 8003342:	4b35      	ldr	r3, [pc, #212]	; (8003418 <HAL_TIM_Encoder_MspInit+0x124>)
 8003344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003346:	f003 0301 	and.w	r3, r3, #1
 800334a:	617b      	str	r3, [r7, #20]
 800334c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800334e:	2300      	movs	r3, #0
 8003350:	613b      	str	r3, [r7, #16]
 8003352:	4b31      	ldr	r3, [pc, #196]	; (8003418 <HAL_TIM_Encoder_MspInit+0x124>)
 8003354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003356:	4a30      	ldr	r2, [pc, #192]	; (8003418 <HAL_TIM_Encoder_MspInit+0x124>)
 8003358:	f043 0302 	orr.w	r3, r3, #2
 800335c:	6313      	str	r3, [r2, #48]	; 0x30
 800335e:	4b2e      	ldr	r3, [pc, #184]	; (8003418 <HAL_TIM_Encoder_MspInit+0x124>)
 8003360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	613b      	str	r3, [r7, #16]
 8003368:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800336a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800336e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003370:	2302      	movs	r3, #2
 8003372:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003374:	2300      	movs	r3, #0
 8003376:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003378:	2300      	movs	r3, #0
 800337a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800337c:	2301      	movs	r3, #1
 800337e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003380:	f107 031c 	add.w	r3, r7, #28
 8003384:	4619      	mov	r1, r3
 8003386:	4825      	ldr	r0, [pc, #148]	; (800341c <HAL_TIM_Encoder_MspInit+0x128>)
 8003388:	f001 ff5c 	bl	8005244 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800338c:	2308      	movs	r3, #8
 800338e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003390:	2302      	movs	r3, #2
 8003392:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003394:	2300      	movs	r3, #0
 8003396:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003398:	2300      	movs	r3, #0
 800339a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800339c:	2301      	movs	r3, #1
 800339e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033a0:	f107 031c 	add.w	r3, r7, #28
 80033a4:	4619      	mov	r1, r3
 80033a6:	481e      	ldr	r0, [pc, #120]	; (8003420 <HAL_TIM_Encoder_MspInit+0x12c>)
 80033a8:	f001 ff4c 	bl	8005244 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80033ac:	e030      	b.n	8003410 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM4)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a1c      	ldr	r2, [pc, #112]	; (8003424 <HAL_TIM_Encoder_MspInit+0x130>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d12b      	bne.n	8003410 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80033b8:	2300      	movs	r3, #0
 80033ba:	60fb      	str	r3, [r7, #12]
 80033bc:	4b16      	ldr	r3, [pc, #88]	; (8003418 <HAL_TIM_Encoder_MspInit+0x124>)
 80033be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c0:	4a15      	ldr	r2, [pc, #84]	; (8003418 <HAL_TIM_Encoder_MspInit+0x124>)
 80033c2:	f043 0304 	orr.w	r3, r3, #4
 80033c6:	6413      	str	r3, [r2, #64]	; 0x40
 80033c8:	4b13      	ldr	r3, [pc, #76]	; (8003418 <HAL_TIM_Encoder_MspInit+0x124>)
 80033ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033cc:	f003 0304 	and.w	r3, r3, #4
 80033d0:	60fb      	str	r3, [r7, #12]
 80033d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033d4:	2300      	movs	r3, #0
 80033d6:	60bb      	str	r3, [r7, #8]
 80033d8:	4b0f      	ldr	r3, [pc, #60]	; (8003418 <HAL_TIM_Encoder_MspInit+0x124>)
 80033da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033dc:	4a0e      	ldr	r2, [pc, #56]	; (8003418 <HAL_TIM_Encoder_MspInit+0x124>)
 80033de:	f043 0302 	orr.w	r3, r3, #2
 80033e2:	6313      	str	r3, [r2, #48]	; 0x30
 80033e4:	4b0c      	ldr	r3, [pc, #48]	; (8003418 <HAL_TIM_Encoder_MspInit+0x124>)
 80033e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e8:	f003 0302 	and.w	r3, r3, #2
 80033ec:	60bb      	str	r3, [r7, #8]
 80033ee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80033f0:	23c0      	movs	r3, #192	; 0xc0
 80033f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033f4:	2302      	movs	r3, #2
 80033f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f8:	2300      	movs	r3, #0
 80033fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033fc:	2300      	movs	r3, #0
 80033fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003400:	2302      	movs	r3, #2
 8003402:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003404:	f107 031c 	add.w	r3, r7, #28
 8003408:	4619      	mov	r1, r3
 800340a:	4805      	ldr	r0, [pc, #20]	; (8003420 <HAL_TIM_Encoder_MspInit+0x12c>)
 800340c:	f001 ff1a 	bl	8005244 <HAL_GPIO_Init>
}
 8003410:	bf00      	nop
 8003412:	3730      	adds	r7, #48	; 0x30
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	40023800 	.word	0x40023800
 800341c:	40020000 	.word	0x40020000
 8003420:	40020400 	.word	0x40020400
 8003424:	40000800 	.word	0x40000800

08003428 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003428:	b480      	push	{r7}
 800342a:	b085      	sub	sp, #20
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a0b      	ldr	r2, [pc, #44]	; (8003464 <HAL_TIM_PWM_MspInit+0x3c>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d10d      	bne.n	8003456 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800343a:	2300      	movs	r3, #0
 800343c:	60fb      	str	r3, [r7, #12]
 800343e:	4b0a      	ldr	r3, [pc, #40]	; (8003468 <HAL_TIM_PWM_MspInit+0x40>)
 8003440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003442:	4a09      	ldr	r2, [pc, #36]	; (8003468 <HAL_TIM_PWM_MspInit+0x40>)
 8003444:	f043 0302 	orr.w	r3, r3, #2
 8003448:	6413      	str	r3, [r2, #64]	; 0x40
 800344a:	4b07      	ldr	r3, [pc, #28]	; (8003468 <HAL_TIM_PWM_MspInit+0x40>)
 800344c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	60fb      	str	r3, [r7, #12]
 8003454:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003456:	bf00      	nop
 8003458:	3714      	adds	r7, #20
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	40000400 	.word	0x40000400
 8003468:	40023800 	.word	0x40023800

0800346c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a0e      	ldr	r2, [pc, #56]	; (80034b4 <HAL_TIM_Base_MspInit+0x48>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d115      	bne.n	80034aa <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800347e:	2300      	movs	r3, #0
 8003480:	60fb      	str	r3, [r7, #12]
 8003482:	4b0d      	ldr	r3, [pc, #52]	; (80034b8 <HAL_TIM_Base_MspInit+0x4c>)
 8003484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003486:	4a0c      	ldr	r2, [pc, #48]	; (80034b8 <HAL_TIM_Base_MspInit+0x4c>)
 8003488:	f043 0308 	orr.w	r3, r3, #8
 800348c:	6413      	str	r3, [r2, #64]	; 0x40
 800348e:	4b0a      	ldr	r3, [pc, #40]	; (80034b8 <HAL_TIM_Base_MspInit+0x4c>)
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	f003 0308 	and.w	r3, r3, #8
 8003496:	60fb      	str	r3, [r7, #12]
 8003498:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800349a:	2200      	movs	r2, #0
 800349c:	2100      	movs	r1, #0
 800349e:	2032      	movs	r0, #50	; 0x32
 80034a0:	f001 f813 	bl	80044ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80034a4:	2032      	movs	r0, #50	; 0x32
 80034a6:	f001 f82c 	bl	8004502 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80034aa:	bf00      	nop
 80034ac:	3710      	adds	r7, #16
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	40000c00 	.word	0x40000c00
 80034b8:	40023800 	.word	0x40023800

080034bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b088      	sub	sp, #32
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034c4:	f107 030c 	add.w	r3, r7, #12
 80034c8:	2200      	movs	r2, #0
 80034ca:	601a      	str	r2, [r3, #0]
 80034cc:	605a      	str	r2, [r3, #4]
 80034ce:	609a      	str	r2, [r3, #8]
 80034d0:	60da      	str	r2, [r3, #12]
 80034d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a12      	ldr	r2, [pc, #72]	; (8003524 <HAL_TIM_MspPostInit+0x68>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d11d      	bne.n	800351a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034de:	2300      	movs	r3, #0
 80034e0:	60bb      	str	r3, [r7, #8]
 80034e2:	4b11      	ldr	r3, [pc, #68]	; (8003528 <HAL_TIM_MspPostInit+0x6c>)
 80034e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e6:	4a10      	ldr	r2, [pc, #64]	; (8003528 <HAL_TIM_MspPostInit+0x6c>)
 80034e8:	f043 0302 	orr.w	r3, r3, #2
 80034ec:	6313      	str	r3, [r2, #48]	; 0x30
 80034ee:	4b0e      	ldr	r3, [pc, #56]	; (8003528 <HAL_TIM_MspPostInit+0x6c>)
 80034f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	60bb      	str	r3, [r7, #8]
 80034f8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80034fa:	2303      	movs	r3, #3
 80034fc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034fe:	2302      	movs	r3, #2
 8003500:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003502:	2300      	movs	r3, #0
 8003504:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003506:	2300      	movs	r3, #0
 8003508:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800350a:	2302      	movs	r3, #2
 800350c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800350e:	f107 030c 	add.w	r3, r7, #12
 8003512:	4619      	mov	r1, r3
 8003514:	4805      	ldr	r0, [pc, #20]	; (800352c <HAL_TIM_MspPostInit+0x70>)
 8003516:	f001 fe95 	bl	8005244 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800351a:	bf00      	nop
 800351c:	3720      	adds	r7, #32
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	40000400 	.word	0x40000400
 8003528:	40023800 	.word	0x40023800
 800352c:	40020400 	.word	0x40020400

08003530 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b08a      	sub	sp, #40	; 0x28
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003538:	f107 0314 	add.w	r3, r7, #20
 800353c:	2200      	movs	r2, #0
 800353e:	601a      	str	r2, [r3, #0]
 8003540:	605a      	str	r2, [r3, #4]
 8003542:	609a      	str	r2, [r3, #8]
 8003544:	60da      	str	r2, [r3, #12]
 8003546:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a1d      	ldr	r2, [pc, #116]	; (80035c4 <HAL_UART_MspInit+0x94>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d134      	bne.n	80035bc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8003552:	2300      	movs	r3, #0
 8003554:	613b      	str	r3, [r7, #16]
 8003556:	4b1c      	ldr	r3, [pc, #112]	; (80035c8 <HAL_UART_MspInit+0x98>)
 8003558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355a:	4a1b      	ldr	r2, [pc, #108]	; (80035c8 <HAL_UART_MspInit+0x98>)
 800355c:	f043 0320 	orr.w	r3, r3, #32
 8003560:	6453      	str	r3, [r2, #68]	; 0x44
 8003562:	4b19      	ldr	r3, [pc, #100]	; (80035c8 <HAL_UART_MspInit+0x98>)
 8003564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003566:	f003 0320 	and.w	r3, r3, #32
 800356a:	613b      	str	r3, [r7, #16]
 800356c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800356e:	2300      	movs	r3, #0
 8003570:	60fb      	str	r3, [r7, #12]
 8003572:	4b15      	ldr	r3, [pc, #84]	; (80035c8 <HAL_UART_MspInit+0x98>)
 8003574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003576:	4a14      	ldr	r2, [pc, #80]	; (80035c8 <HAL_UART_MspInit+0x98>)
 8003578:	f043 0301 	orr.w	r3, r3, #1
 800357c:	6313      	str	r3, [r2, #48]	; 0x30
 800357e:	4b12      	ldr	r3, [pc, #72]	; (80035c8 <HAL_UART_MspInit+0x98>)
 8003580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	60fb      	str	r3, [r7, #12]
 8003588:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PA11     ------> USART6_TX
    PA12     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800358a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800358e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003590:	2302      	movs	r3, #2
 8003592:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003594:	2300      	movs	r3, #0
 8003596:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003598:	2303      	movs	r3, #3
 800359a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800359c:	2308      	movs	r3, #8
 800359e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035a0:	f107 0314 	add.w	r3, r7, #20
 80035a4:	4619      	mov	r1, r3
 80035a6:	4809      	ldr	r0, [pc, #36]	; (80035cc <HAL_UART_MspInit+0x9c>)
 80035a8:	f001 fe4c 	bl	8005244 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80035ac:	2200      	movs	r2, #0
 80035ae:	2100      	movs	r1, #0
 80035b0:	2047      	movs	r0, #71	; 0x47
 80035b2:	f000 ff8a 	bl	80044ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80035b6:	2047      	movs	r0, #71	; 0x47
 80035b8:	f000 ffa3 	bl	8004502 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80035bc:	bf00      	nop
 80035be:	3728      	adds	r7, #40	; 0x28
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	40011400 	.word	0x40011400
 80035c8:	40023800 	.word	0x40023800
 80035cc:	40020000 	.word	0x40020000

080035d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80035d0:	b480      	push	{r7}
 80035d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80035d4:	e7fe      	b.n	80035d4 <NMI_Handler+0x4>

080035d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035d6:	b480      	push	{r7}
 80035d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035da:	e7fe      	b.n	80035da <HardFault_Handler+0x4>

080035dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80035dc:	b480      	push	{r7}
 80035de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80035e0:	e7fe      	b.n	80035e0 <MemManage_Handler+0x4>

080035e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80035e2:	b480      	push	{r7}
 80035e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80035e6:	e7fe      	b.n	80035e6 <BusFault_Handler+0x4>

080035e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80035e8:	b480      	push	{r7}
 80035ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80035ec:	e7fe      	b.n	80035ec <UsageFault_Handler+0x4>

080035ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80035ee:	b480      	push	{r7}
 80035f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80035f2:	bf00      	nop
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80035fc:	b480      	push	{r7}
 80035fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003600:	bf00      	nop
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr

0800360a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800360a:	b480      	push	{r7}
 800360c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800360e:	bf00      	nop
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800361c:	f000 f8fa 	bl	8003814 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003620:	bf00      	nop
 8003622:	bd80      	pop	{r7, pc}

08003624 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003628:	4802      	ldr	r0, [pc, #8]	; (8003634 <ADC_IRQHandler+0x10>)
 800362a:	f000 f978 	bl	800391e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800362e:	bf00      	nop
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	20000494 	.word	0x20000494

08003638 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800363c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003640:	f001 ffb4 	bl	80055ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003644:	bf00      	nop
 8003646:	bd80      	pop	{r7, pc}

08003648 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800364c:	4802      	ldr	r0, [pc, #8]	; (8003658 <TIM5_IRQHandler+0x10>)
 800364e:	f003 f9d1 	bl	80069f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003652:	bf00      	nop
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	20000414 	.word	0x20000414

0800365c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003660:	4802      	ldr	r0, [pc, #8]	; (800366c <DMA2_Stream0_IRQHandler+0x10>)
 8003662:	f001 f895 	bl	8004790 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003666:	bf00      	nop
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	200004f4 	.word	0x200004f4

08003670 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

//	Uart_isr (&huart6);

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003674:	4802      	ldr	r0, [pc, #8]	; (8003680 <USART6_IRQHandler+0x10>)
 8003676:	f004 f8ad 	bl	80077d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800367a:	bf00      	nop
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	2000031c 	.word	0x2000031c

08003684 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b086      	sub	sp, #24
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800368c:	4a14      	ldr	r2, [pc, #80]	; (80036e0 <_sbrk+0x5c>)
 800368e:	4b15      	ldr	r3, [pc, #84]	; (80036e4 <_sbrk+0x60>)
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003698:	4b13      	ldr	r3, [pc, #76]	; (80036e8 <_sbrk+0x64>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d102      	bne.n	80036a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80036a0:	4b11      	ldr	r3, [pc, #68]	; (80036e8 <_sbrk+0x64>)
 80036a2:	4a12      	ldr	r2, [pc, #72]	; (80036ec <_sbrk+0x68>)
 80036a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80036a6:	4b10      	ldr	r3, [pc, #64]	; (80036e8 <_sbrk+0x64>)
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4413      	add	r3, r2
 80036ae:	693a      	ldr	r2, [r7, #16]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d207      	bcs.n	80036c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80036b4:	f004 fe94 	bl	80083e0 <__errno>
 80036b8:	4602      	mov	r2, r0
 80036ba:	230c      	movs	r3, #12
 80036bc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80036be:	f04f 33ff 	mov.w	r3, #4294967295
 80036c2:	e009      	b.n	80036d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80036c4:	4b08      	ldr	r3, [pc, #32]	; (80036e8 <_sbrk+0x64>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80036ca:	4b07      	ldr	r3, [pc, #28]	; (80036e8 <_sbrk+0x64>)
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4413      	add	r3, r2
 80036d2:	4a05      	ldr	r2, [pc, #20]	; (80036e8 <_sbrk+0x64>)
 80036d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80036d6:	68fb      	ldr	r3, [r7, #12]
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3718      	adds	r7, #24
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	20010000 	.word	0x20010000
 80036e4:	00000400 	.word	0x00000400
 80036e8:	20000268 	.word	0x20000268
 80036ec:	200005c8 	.word	0x200005c8

080036f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80036f0:	b480      	push	{r7}
 80036f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80036f4:	4b08      	ldr	r3, [pc, #32]	; (8003718 <SystemInit+0x28>)
 80036f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036fa:	4a07      	ldr	r2, [pc, #28]	; (8003718 <SystemInit+0x28>)
 80036fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003700:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003704:	4b04      	ldr	r3, [pc, #16]	; (8003718 <SystemInit+0x28>)
 8003706:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800370a:	609a      	str	r2, [r3, #8]
#endif
}
 800370c:	bf00      	nop
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	e000ed00 	.word	0xe000ed00

0800371c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800371c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003754 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003720:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003722:	e003      	b.n	800372c <LoopCopyDataInit>

08003724 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003724:	4b0c      	ldr	r3, [pc, #48]	; (8003758 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003726:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003728:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800372a:	3104      	adds	r1, #4

0800372c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800372c:	480b      	ldr	r0, [pc, #44]	; (800375c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800372e:	4b0c      	ldr	r3, [pc, #48]	; (8003760 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003730:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003732:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003734:	d3f6      	bcc.n	8003724 <CopyDataInit>
  ldr  r2, =_sbss
 8003736:	4a0b      	ldr	r2, [pc, #44]	; (8003764 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003738:	e002      	b.n	8003740 <LoopFillZerobss>

0800373a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800373a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800373c:	f842 3b04 	str.w	r3, [r2], #4

08003740 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003740:	4b09      	ldr	r3, [pc, #36]	; (8003768 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003742:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003744:	d3f9      	bcc.n	800373a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003746:	f7ff ffd3 	bl	80036f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800374a:	f004 fe4f 	bl	80083ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800374e:	f7fe fd07 	bl	8002160 <main>
  bx  lr    
 8003752:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003754:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 8003758:	0800c108 	.word	0x0800c108
  ldr  r0, =_sdata
 800375c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003760:	20000224 	.word	0x20000224
  ldr  r2, =_sbss
 8003764:	20000224 	.word	0x20000224
  ldr  r3, = _ebss
 8003768:	200005c8 	.word	0x200005c8

0800376c <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800376c:	e7fe      	b.n	800376c <DMA1_Stream0_IRQHandler>
	...

08003770 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003774:	4b0e      	ldr	r3, [pc, #56]	; (80037b0 <HAL_Init+0x40>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a0d      	ldr	r2, [pc, #52]	; (80037b0 <HAL_Init+0x40>)
 800377a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800377e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003780:	4b0b      	ldr	r3, [pc, #44]	; (80037b0 <HAL_Init+0x40>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a0a      	ldr	r2, [pc, #40]	; (80037b0 <HAL_Init+0x40>)
 8003786:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800378a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800378c:	4b08      	ldr	r3, [pc, #32]	; (80037b0 <HAL_Init+0x40>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a07      	ldr	r2, [pc, #28]	; (80037b0 <HAL_Init+0x40>)
 8003792:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003796:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003798:	2003      	movs	r0, #3
 800379a:	f000 fe8b 	bl	80044b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800379e:	2000      	movs	r0, #0
 80037a0:	f000 f808 	bl	80037b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80037a4:	f7ff fc96 	bl	80030d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	40023c00 	.word	0x40023c00

080037b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80037bc:	4b12      	ldr	r3, [pc, #72]	; (8003808 <HAL_InitTick+0x54>)
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	4b12      	ldr	r3, [pc, #72]	; (800380c <HAL_InitTick+0x58>)
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	4619      	mov	r1, r3
 80037c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80037ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d2:	4618      	mov	r0, r3
 80037d4:	f000 fea7 	bl	8004526 <HAL_SYSTICK_Config>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d001      	beq.n	80037e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e00e      	b.n	8003800 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2b0f      	cmp	r3, #15
 80037e6:	d80a      	bhi.n	80037fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037e8:	2200      	movs	r2, #0
 80037ea:	6879      	ldr	r1, [r7, #4]
 80037ec:	f04f 30ff 	mov.w	r0, #4294967295
 80037f0:	f000 fe6b 	bl	80044ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80037f4:	4a06      	ldr	r2, [pc, #24]	; (8003810 <HAL_InitTick+0x5c>)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80037fa:	2300      	movs	r3, #0
 80037fc:	e000      	b.n	8003800 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
}
 8003800:	4618      	mov	r0, r3
 8003802:	3708      	adds	r7, #8
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	20000048 	.word	0x20000048
 800380c:	20000050 	.word	0x20000050
 8003810:	2000004c 	.word	0x2000004c

08003814 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003814:	b480      	push	{r7}
 8003816:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003818:	4b06      	ldr	r3, [pc, #24]	; (8003834 <HAL_IncTick+0x20>)
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	461a      	mov	r2, r3
 800381e:	4b06      	ldr	r3, [pc, #24]	; (8003838 <HAL_IncTick+0x24>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4413      	add	r3, r2
 8003824:	4a04      	ldr	r2, [pc, #16]	; (8003838 <HAL_IncTick+0x24>)
 8003826:	6013      	str	r3, [r2, #0]
}
 8003828:	bf00      	nop
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	20000050 	.word	0x20000050
 8003838:	200005a0 	.word	0x200005a0

0800383c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800383c:	b480      	push	{r7}
 800383e:	af00      	add	r7, sp, #0
  return uwTick;
 8003840:	4b03      	ldr	r3, [pc, #12]	; (8003850 <HAL_GetTick+0x14>)
 8003842:	681b      	ldr	r3, [r3, #0]
}
 8003844:	4618      	mov	r0, r3
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	200005a0 	.word	0x200005a0

08003854 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800385c:	f7ff ffee 	bl	800383c <HAL_GetTick>
 8003860:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800386c:	d005      	beq.n	800387a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800386e:	4b09      	ldr	r3, [pc, #36]	; (8003894 <HAL_Delay+0x40>)
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	461a      	mov	r2, r3
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	4413      	add	r3, r2
 8003878:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800387a:	bf00      	nop
 800387c:	f7ff ffde 	bl	800383c <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	429a      	cmp	r2, r3
 800388a:	d8f7      	bhi.n	800387c <HAL_Delay+0x28>
  {
  }
}
 800388c:	bf00      	nop
 800388e:	3710      	adds	r7, #16
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	20000050 	.word	0x20000050

08003898 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038a0:	2300      	movs	r3, #0
 80038a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d101      	bne.n	80038ae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e033      	b.n	8003916 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d109      	bne.n	80038ca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f7ff fc34 	bl	8003124 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ce:	f003 0310 	and.w	r3, r3, #16
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d118      	bne.n	8003908 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038da:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80038de:	f023 0302 	bic.w	r3, r3, #2
 80038e2:	f043 0202 	orr.w	r2, r3, #2
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 fb76 	bl	8003fdc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fa:	f023 0303 	bic.w	r3, r3, #3
 80038fe:	f043 0201 	orr.w	r2, r3, #1
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	641a      	str	r2, [r3, #64]	; 0x40
 8003906:	e001      	b.n	800390c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003914:	7bfb      	ldrb	r3, [r7, #15]
}
 8003916:	4618      	mov	r0, r3
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b084      	sub	sp, #16
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003926:	2300      	movs	r3, #0
 8003928:	60fb      	str	r3, [r7, #12]
 800392a:	2300      	movs	r3, #0
 800392c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0302 	and.w	r3, r3, #2
 8003938:	2b02      	cmp	r3, #2
 800393a:	bf0c      	ite	eq
 800393c:	2301      	moveq	r3, #1
 800393e:	2300      	movne	r3, #0
 8003940:	b2db      	uxtb	r3, r3
 8003942:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f003 0320 	and.w	r3, r3, #32
 800394e:	2b20      	cmp	r3, #32
 8003950:	bf0c      	ite	eq
 8003952:	2301      	moveq	r3, #1
 8003954:	2300      	movne	r3, #0
 8003956:	b2db      	uxtb	r3, r3
 8003958:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d049      	beq.n	80039f4 <HAL_ADC_IRQHandler+0xd6>
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d046      	beq.n	80039f4 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396a:	f003 0310 	and.w	r3, r3, #16
 800396e:	2b00      	cmp	r3, #0
 8003970:	d105      	bne.n	800397e <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003976:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d12b      	bne.n	80039e4 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003990:	2b00      	cmp	r3, #0
 8003992:	d127      	bne.n	80039e4 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800399a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d006      	beq.n	80039b0 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d119      	bne.n	80039e4 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	685a      	ldr	r2, [r3, #4]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f022 0220 	bic.w	r2, r2, #32
 80039be:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d105      	bne.n	80039e4 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039dc:	f043 0201 	orr.w	r2, r3, #1
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f000 f9af 	bl	8003d48 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f06f 0212 	mvn.w	r2, #18
 80039f2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0304 	and.w	r3, r3, #4
 80039fe:	2b04      	cmp	r3, #4
 8003a00:	bf0c      	ite	eq
 8003a02:	2301      	moveq	r3, #1
 8003a04:	2300      	movne	r3, #0
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a14:	2b80      	cmp	r3, #128	; 0x80
 8003a16:	bf0c      	ite	eq
 8003a18:	2301      	moveq	r3, #1
 8003a1a:	2300      	movne	r3, #0
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d057      	beq.n	8003ad6 <HAL_ADC_IRQHandler+0x1b8>
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d054      	beq.n	8003ad6 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a30:	f003 0310 	and.w	r3, r3, #16
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d105      	bne.n	8003a44 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d139      	bne.n	8003ac6 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a58:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d006      	beq.n	8003a6e <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d12b      	bne.n	8003ac6 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d124      	bne.n	8003ac6 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d11d      	bne.n	8003ac6 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d119      	bne.n	8003ac6 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	685a      	ldr	r2, [r3, #4]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003aa0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d105      	bne.n	8003ac6 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abe:	f043 0201 	orr.w	r2, r3, #1
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 fc06 	bl	80042d8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f06f 020c 	mvn.w	r2, #12
 8003ad4:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0301 	and.w	r3, r3, #1
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	bf0c      	ite	eq
 8003ae4:	2301      	moveq	r3, #1
 8003ae6:	2300      	movne	r3, #0
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af6:	2b40      	cmp	r3, #64	; 0x40
 8003af8:	bf0c      	ite	eq
 8003afa:	2301      	moveq	r3, #1
 8003afc:	2300      	movne	r3, #0
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d017      	beq.n	8003b38 <HAL_ADC_IRQHandler+0x21a>
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d014      	beq.n	8003b38 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0301 	and.w	r3, r3, #1
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d10d      	bne.n	8003b38 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b20:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f000 f921 	bl	8003d70 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f06f 0201 	mvn.w	r2, #1
 8003b36:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0320 	and.w	r3, r3, #32
 8003b42:	2b20      	cmp	r3, #32
 8003b44:	bf0c      	ite	eq
 8003b46:	2301      	moveq	r3, #1
 8003b48:	2300      	movne	r3, #0
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b5c:	bf0c      	ite	eq
 8003b5e:	2301      	moveq	r3, #1
 8003b60:	2300      	movne	r3, #0
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d015      	beq.n	8003b98 <HAL_ADC_IRQHandler+0x27a>
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d012      	beq.n	8003b98 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b76:	f043 0202 	orr.w	r2, r3, #2
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f06f 0220 	mvn.w	r2, #32
 8003b86:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f000 f8fb 	bl	8003d84 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f06f 0220 	mvn.w	r2, #32
 8003b96:	601a      	str	r2, [r3, #0]
  }
}
 8003b98:	bf00      	nop
 8003b9a:	3710      	adds	r7, #16
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b086      	sub	sp, #24
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	60b9      	str	r1, [r7, #8]
 8003baa:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003bac:	2300      	movs	r3, #0
 8003bae:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d101      	bne.n	8003bbe <HAL_ADC_Start_DMA+0x1e>
 8003bba:	2302      	movs	r3, #2
 8003bbc:	e0b1      	b.n	8003d22 <HAL_ADC_Start_DMA+0x182>
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f003 0301 	and.w	r3, r3, #1
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d018      	beq.n	8003c06 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	689a      	ldr	r2, [r3, #8]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f042 0201 	orr.w	r2, r2, #1
 8003be2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003be4:	4b51      	ldr	r3, [pc, #324]	; (8003d2c <HAL_ADC_Start_DMA+0x18c>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a51      	ldr	r2, [pc, #324]	; (8003d30 <HAL_ADC_Start_DMA+0x190>)
 8003bea:	fba2 2303 	umull	r2, r3, r2, r3
 8003bee:	0c9a      	lsrs	r2, r3, #18
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	005b      	lsls	r3, r3, #1
 8003bf4:	4413      	add	r3, r2
 8003bf6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003bf8:	e002      	b.n	8003c00 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	3b01      	subs	r3, #1
 8003bfe:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1f9      	bne.n	8003bfa <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	f003 0301 	and.w	r3, r3, #1
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	f040 8085 	bne.w	8003d20 <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003c1e:	f023 0301 	bic.w	r3, r3, #1
 8003c22:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d007      	beq.n	8003c48 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003c40:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c54:	d106      	bne.n	8003c64 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c5a:	f023 0206 	bic.w	r2, r3, #6
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	645a      	str	r2, [r3, #68]	; 0x44
 8003c62:	e002      	b.n	8003c6a <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2200      	movs	r2, #0
 8003c68:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003c72:	4b30      	ldr	r3, [pc, #192]	; (8003d34 <HAL_ADC_Start_DMA+0x194>)
 8003c74:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7a:	4a2f      	ldr	r2, [pc, #188]	; (8003d38 <HAL_ADC_Start_DMA+0x198>)
 8003c7c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c82:	4a2e      	ldr	r2, [pc, #184]	; (8003d3c <HAL_ADC_Start_DMA+0x19c>)
 8003c84:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8a:	4a2d      	ldr	r2, [pc, #180]	; (8003d40 <HAL_ADC_Start_DMA+0x1a0>)
 8003c8c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003c96:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	685a      	ldr	r2, [r3, #4]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003ca6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	689a      	ldr	r2, [r3, #8]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cb6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	334c      	adds	r3, #76	; 0x4c
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	68ba      	ldr	r2, [r7, #8]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f000 fce8 	bl	800469c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f003 031f 	and.w	r3, r3, #31
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d10f      	bne.n	8003cf8 <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d11c      	bne.n	8003d20 <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	689a      	ldr	r2, [r3, #8]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003cf4:	609a      	str	r2, [r3, #8]
 8003cf6:	e013      	b.n	8003d20 <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a11      	ldr	r2, [pc, #68]	; (8003d44 <HAL_ADC_Start_DMA+0x1a4>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d10e      	bne.n	8003d20 <HAL_ADC_Start_DMA+0x180>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d107      	bne.n	8003d20 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	689a      	ldr	r2, [r3, #8]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003d1e:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3718      	adds	r7, #24
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	20000048 	.word	0x20000048
 8003d30:	431bde83 	.word	0x431bde83
 8003d34:	40012300 	.word	0x40012300
 8003d38:	080041d5 	.word	0x080041d5
 8003d3c:	0800428f 	.word	0x0800428f
 8003d40:	080042ab 	.word	0x080042ab
 8003d44:	40012000 	.word	0x40012000

08003d48 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003d50:	bf00      	nop
 8003d52:	370c      	adds	r7, #12
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr

08003d5c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003d64:	bf00      	nop
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003d78:	bf00      	nop
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003d8c:	bf00      	nop
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b085      	sub	sp, #20
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003da2:	2300      	movs	r3, #0
 8003da4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d101      	bne.n	8003db4 <HAL_ADC_ConfigChannel+0x1c>
 8003db0:	2302      	movs	r3, #2
 8003db2:	e105      	b.n	8003fc0 <HAL_ADC_ConfigChannel+0x228>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2b09      	cmp	r3, #9
 8003dc2:	d925      	bls.n	8003e10 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68d9      	ldr	r1, [r3, #12]
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	005b      	lsls	r3, r3, #1
 8003dd6:	4413      	add	r3, r2
 8003dd8:	3b1e      	subs	r3, #30
 8003dda:	2207      	movs	r2, #7
 8003ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8003de0:	43da      	mvns	r2, r3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	400a      	ands	r2, r1
 8003de8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	68d9      	ldr	r1, [r3, #12]
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	689a      	ldr	r2, [r3, #8]
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	005b      	lsls	r3, r3, #1
 8003e00:	4403      	add	r3, r0
 8003e02:	3b1e      	subs	r3, #30
 8003e04:	409a      	lsls	r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	60da      	str	r2, [r3, #12]
 8003e0e:	e022      	b.n	8003e56 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	6919      	ldr	r1, [r3, #16]
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	4613      	mov	r3, r2
 8003e20:	005b      	lsls	r3, r3, #1
 8003e22:	4413      	add	r3, r2
 8003e24:	2207      	movs	r2, #7
 8003e26:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2a:	43da      	mvns	r2, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	400a      	ands	r2, r1
 8003e32:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	6919      	ldr	r1, [r3, #16]
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	689a      	ldr	r2, [r3, #8]
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	4618      	mov	r0, r3
 8003e46:	4603      	mov	r3, r0
 8003e48:	005b      	lsls	r3, r3, #1
 8003e4a:	4403      	add	r3, r0
 8003e4c:	409a      	lsls	r2, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	430a      	orrs	r2, r1
 8003e54:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	2b06      	cmp	r3, #6
 8003e5c:	d824      	bhi.n	8003ea8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	685a      	ldr	r2, [r3, #4]
 8003e68:	4613      	mov	r3, r2
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	4413      	add	r3, r2
 8003e6e:	3b05      	subs	r3, #5
 8003e70:	221f      	movs	r2, #31
 8003e72:	fa02 f303 	lsl.w	r3, r2, r3
 8003e76:	43da      	mvns	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	400a      	ands	r2, r1
 8003e7e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	685a      	ldr	r2, [r3, #4]
 8003e92:	4613      	mov	r3, r2
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	4413      	add	r3, r2
 8003e98:	3b05      	subs	r3, #5
 8003e9a:	fa00 f203 	lsl.w	r2, r0, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	635a      	str	r2, [r3, #52]	; 0x34
 8003ea6:	e04c      	b.n	8003f42 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	2b0c      	cmp	r3, #12
 8003eae:	d824      	bhi.n	8003efa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	685a      	ldr	r2, [r3, #4]
 8003eba:	4613      	mov	r3, r2
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	4413      	add	r3, r2
 8003ec0:	3b23      	subs	r3, #35	; 0x23
 8003ec2:	221f      	movs	r2, #31
 8003ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec8:	43da      	mvns	r2, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	400a      	ands	r2, r1
 8003ed0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	4618      	mov	r0, r3
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	685a      	ldr	r2, [r3, #4]
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	4413      	add	r3, r2
 8003eea:	3b23      	subs	r3, #35	; 0x23
 8003eec:	fa00 f203 	lsl.w	r2, r0, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	430a      	orrs	r2, r1
 8003ef6:	631a      	str	r2, [r3, #48]	; 0x30
 8003ef8:	e023      	b.n	8003f42 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	685a      	ldr	r2, [r3, #4]
 8003f04:	4613      	mov	r3, r2
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	4413      	add	r3, r2
 8003f0a:	3b41      	subs	r3, #65	; 0x41
 8003f0c:	221f      	movs	r2, #31
 8003f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f12:	43da      	mvns	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	400a      	ands	r2, r1
 8003f1a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	4618      	mov	r0, r3
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	685a      	ldr	r2, [r3, #4]
 8003f2e:	4613      	mov	r3, r2
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	4413      	add	r3, r2
 8003f34:	3b41      	subs	r3, #65	; 0x41
 8003f36:	fa00 f203 	lsl.w	r2, r0, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	430a      	orrs	r2, r1
 8003f40:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003f42:	4b22      	ldr	r3, [pc, #136]	; (8003fcc <HAL_ADC_ConfigChannel+0x234>)
 8003f44:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a21      	ldr	r2, [pc, #132]	; (8003fd0 <HAL_ADC_ConfigChannel+0x238>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d109      	bne.n	8003f64 <HAL_ADC_ConfigChannel+0x1cc>
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2b12      	cmp	r3, #18
 8003f56:	d105      	bne.n	8003f64 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a19      	ldr	r2, [pc, #100]	; (8003fd0 <HAL_ADC_ConfigChannel+0x238>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d123      	bne.n	8003fb6 <HAL_ADC_ConfigChannel+0x21e>
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2b10      	cmp	r3, #16
 8003f74:	d003      	beq.n	8003f7e <HAL_ADC_ConfigChannel+0x1e6>
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2b11      	cmp	r3, #17
 8003f7c:	d11b      	bne.n	8003fb6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	2b10      	cmp	r3, #16
 8003f90:	d111      	bne.n	8003fb6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003f92:	4b10      	ldr	r3, [pc, #64]	; (8003fd4 <HAL_ADC_ConfigChannel+0x23c>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a10      	ldr	r2, [pc, #64]	; (8003fd8 <HAL_ADC_ConfigChannel+0x240>)
 8003f98:	fba2 2303 	umull	r2, r3, r2, r3
 8003f9c:	0c9a      	lsrs	r2, r3, #18
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	4413      	add	r3, r2
 8003fa4:	005b      	lsls	r3, r3, #1
 8003fa6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003fa8:	e002      	b.n	8003fb0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	3b01      	subs	r3, #1
 8003fae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d1f9      	bne.n	8003faa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003fbe:	2300      	movs	r3, #0
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3714      	adds	r7, #20
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr
 8003fcc:	40012300 	.word	0x40012300
 8003fd0:	40012000 	.word	0x40012000
 8003fd4:	20000048 	.word	0x20000048
 8003fd8:	431bde83 	.word	0x431bde83

08003fdc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003fe4:	4b79      	ldr	r3, [pc, #484]	; (80041cc <ADC_Init+0x1f0>)
 8003fe6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	685a      	ldr	r2, [r3, #4]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	431a      	orrs	r2, r3
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	685a      	ldr	r2, [r3, #4]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004010:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	6859      	ldr	r1, [r3, #4]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	021a      	lsls	r2, r3, #8
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	430a      	orrs	r2, r1
 8004024:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	685a      	ldr	r2, [r3, #4]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004034:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	6859      	ldr	r1, [r3, #4]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	689a      	ldr	r2, [r3, #8]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	430a      	orrs	r2, r1
 8004046:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	689a      	ldr	r2, [r3, #8]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004056:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	6899      	ldr	r1, [r3, #8]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	68da      	ldr	r2, [r3, #12]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	430a      	orrs	r2, r1
 8004068:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800406e:	4a58      	ldr	r2, [pc, #352]	; (80041d0 <ADC_Init+0x1f4>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d022      	beq.n	80040ba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	689a      	ldr	r2, [r3, #8]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004082:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	6899      	ldr	r1, [r3, #8]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	430a      	orrs	r2, r1
 8004094:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	689a      	ldr	r2, [r3, #8]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80040a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	6899      	ldr	r1, [r3, #8]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	430a      	orrs	r2, r1
 80040b6:	609a      	str	r2, [r3, #8]
 80040b8:	e00f      	b.n	80040da <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	689a      	ldr	r2, [r3, #8]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80040c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	689a      	ldr	r2, [r3, #8]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80040d8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	689a      	ldr	r2, [r3, #8]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f022 0202 	bic.w	r2, r2, #2
 80040e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	6899      	ldr	r1, [r3, #8]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	7e1b      	ldrb	r3, [r3, #24]
 80040f4:	005a      	lsls	r2, r3, #1
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	430a      	orrs	r2, r1
 80040fc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d01b      	beq.n	8004140 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	685a      	ldr	r2, [r3, #4]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004116:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	685a      	ldr	r2, [r3, #4]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004126:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	6859      	ldr	r1, [r3, #4]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004132:	3b01      	subs	r3, #1
 8004134:	035a      	lsls	r2, r3, #13
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	430a      	orrs	r2, r1
 800413c:	605a      	str	r2, [r3, #4]
 800413e:	e007      	b.n	8004150 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	685a      	ldr	r2, [r3, #4]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800414e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800415e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	69db      	ldr	r3, [r3, #28]
 800416a:	3b01      	subs	r3, #1
 800416c:	051a      	lsls	r2, r3, #20
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	430a      	orrs	r2, r1
 8004174:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	689a      	ldr	r2, [r3, #8]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004184:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	6899      	ldr	r1, [r3, #8]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004192:	025a      	lsls	r2, r3, #9
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	430a      	orrs	r2, r1
 800419a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	689a      	ldr	r2, [r3, #8]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	6899      	ldr	r1, [r3, #8]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	695b      	ldr	r3, [r3, #20]
 80041b6:	029a      	lsls	r2, r3, #10
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	430a      	orrs	r2, r1
 80041be:	609a      	str	r2, [r3, #8]
}
 80041c0:	bf00      	nop
 80041c2:	3714      	adds	r7, #20
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr
 80041cc:	40012300 	.word	0x40012300
 80041d0:	0f000001 	.word	0x0f000001

080041d4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d13c      	bne.n	8004268 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d12b      	bne.n	8004260 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800420c:	2b00      	cmp	r3, #0
 800420e:	d127      	bne.n	8004260 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004216:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800421a:	2b00      	cmp	r3, #0
 800421c:	d006      	beq.n	800422c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004228:	2b00      	cmp	r3, #0
 800422a:	d119      	bne.n	8004260 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	685a      	ldr	r2, [r3, #4]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f022 0220 	bic.w	r2, r2, #32
 800423a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004240:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004250:	2b00      	cmp	r3, #0
 8004252:	d105      	bne.n	8004260 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004258:	f043 0201 	orr.w	r2, r3, #1
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004260:	68f8      	ldr	r0, [r7, #12]
 8004262:	f7ff fd71 	bl	8003d48 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004266:	e00e      	b.n	8004286 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426c:	f003 0310 	and.w	r3, r3, #16
 8004270:	2b00      	cmp	r3, #0
 8004272:	d003      	beq.n	800427c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004274:	68f8      	ldr	r0, [r7, #12]
 8004276:	f7ff fd85 	bl	8003d84 <HAL_ADC_ErrorCallback>
}
 800427a:	e004      	b.n	8004286 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	4798      	blx	r3
}
 8004286:	bf00      	nop
 8004288:	3710      	adds	r7, #16
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}

0800428e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800428e:	b580      	push	{r7, lr}
 8004290:	b084      	sub	sp, #16
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800429a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800429c:	68f8      	ldr	r0, [r7, #12]
 800429e:	f7ff fd5d 	bl	8003d5c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80042a2:	bf00      	nop
 80042a4:	3710      	adds	r7, #16
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}

080042aa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80042aa:	b580      	push	{r7, lr}
 80042ac:	b084      	sub	sp, #16
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2240      	movs	r2, #64	; 0x40
 80042bc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042c2:	f043 0204 	orr.w	r2, r3, #4
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80042ca:	68f8      	ldr	r0, [r7, #12]
 80042cc:	f7ff fd5a 	bl	8003d84 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80042d0:	bf00      	nop
 80042d2:	3710      	adds	r7, #16
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80042e0:	bf00      	nop
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b085      	sub	sp, #20
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f003 0307 	and.w	r3, r3, #7
 80042fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042fc:	4b0c      	ldr	r3, [pc, #48]	; (8004330 <__NVIC_SetPriorityGrouping+0x44>)
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004302:	68ba      	ldr	r2, [r7, #8]
 8004304:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004308:	4013      	ands	r3, r2
 800430a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004314:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004318:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800431c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800431e:	4a04      	ldr	r2, [pc, #16]	; (8004330 <__NVIC_SetPriorityGrouping+0x44>)
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	60d3      	str	r3, [r2, #12]
}
 8004324:	bf00      	nop
 8004326:	3714      	adds	r7, #20
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr
 8004330:	e000ed00 	.word	0xe000ed00

08004334 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004334:	b480      	push	{r7}
 8004336:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004338:	4b04      	ldr	r3, [pc, #16]	; (800434c <__NVIC_GetPriorityGrouping+0x18>)
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	0a1b      	lsrs	r3, r3, #8
 800433e:	f003 0307 	and.w	r3, r3, #7
}
 8004342:	4618      	mov	r0, r3
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr
 800434c:	e000ed00 	.word	0xe000ed00

08004350 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	4603      	mov	r3, r0
 8004358:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800435a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800435e:	2b00      	cmp	r3, #0
 8004360:	db0b      	blt.n	800437a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004362:	79fb      	ldrb	r3, [r7, #7]
 8004364:	f003 021f 	and.w	r2, r3, #31
 8004368:	4907      	ldr	r1, [pc, #28]	; (8004388 <__NVIC_EnableIRQ+0x38>)
 800436a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800436e:	095b      	lsrs	r3, r3, #5
 8004370:	2001      	movs	r0, #1
 8004372:	fa00 f202 	lsl.w	r2, r0, r2
 8004376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800437a:	bf00      	nop
 800437c:	370c      	adds	r7, #12
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr
 8004386:	bf00      	nop
 8004388:	e000e100 	.word	0xe000e100

0800438c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	4603      	mov	r3, r0
 8004394:	6039      	str	r1, [r7, #0]
 8004396:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800439c:	2b00      	cmp	r3, #0
 800439e:	db0a      	blt.n	80043b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	b2da      	uxtb	r2, r3
 80043a4:	490c      	ldr	r1, [pc, #48]	; (80043d8 <__NVIC_SetPriority+0x4c>)
 80043a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043aa:	0112      	lsls	r2, r2, #4
 80043ac:	b2d2      	uxtb	r2, r2
 80043ae:	440b      	add	r3, r1
 80043b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80043b4:	e00a      	b.n	80043cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	b2da      	uxtb	r2, r3
 80043ba:	4908      	ldr	r1, [pc, #32]	; (80043dc <__NVIC_SetPriority+0x50>)
 80043bc:	79fb      	ldrb	r3, [r7, #7]
 80043be:	f003 030f 	and.w	r3, r3, #15
 80043c2:	3b04      	subs	r3, #4
 80043c4:	0112      	lsls	r2, r2, #4
 80043c6:	b2d2      	uxtb	r2, r2
 80043c8:	440b      	add	r3, r1
 80043ca:	761a      	strb	r2, [r3, #24]
}
 80043cc:	bf00      	nop
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr
 80043d8:	e000e100 	.word	0xe000e100
 80043dc:	e000ed00 	.word	0xe000ed00

080043e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b089      	sub	sp, #36	; 0x24
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	60b9      	str	r1, [r7, #8]
 80043ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f003 0307 	and.w	r3, r3, #7
 80043f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	f1c3 0307 	rsb	r3, r3, #7
 80043fa:	2b04      	cmp	r3, #4
 80043fc:	bf28      	it	cs
 80043fe:	2304      	movcs	r3, #4
 8004400:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	3304      	adds	r3, #4
 8004406:	2b06      	cmp	r3, #6
 8004408:	d902      	bls.n	8004410 <NVIC_EncodePriority+0x30>
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	3b03      	subs	r3, #3
 800440e:	e000      	b.n	8004412 <NVIC_EncodePriority+0x32>
 8004410:	2300      	movs	r3, #0
 8004412:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004414:	f04f 32ff 	mov.w	r2, #4294967295
 8004418:	69bb      	ldr	r3, [r7, #24]
 800441a:	fa02 f303 	lsl.w	r3, r2, r3
 800441e:	43da      	mvns	r2, r3
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	401a      	ands	r2, r3
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004428:	f04f 31ff 	mov.w	r1, #4294967295
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	fa01 f303 	lsl.w	r3, r1, r3
 8004432:	43d9      	mvns	r1, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004438:	4313      	orrs	r3, r2
         );
}
 800443a:	4618      	mov	r0, r3
 800443c:	3724      	adds	r7, #36	; 0x24
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
	...

08004448 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004448:	b480      	push	{r7}
 800444a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800444c:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004450:	4b05      	ldr	r3, [pc, #20]	; (8004468 <__NVIC_SystemReset+0x20>)
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004458:	4903      	ldr	r1, [pc, #12]	; (8004468 <__NVIC_SystemReset+0x20>)
 800445a:	4b04      	ldr	r3, [pc, #16]	; (800446c <__NVIC_SystemReset+0x24>)
 800445c:	4313      	orrs	r3, r2
 800445e:	60cb      	str	r3, [r1, #12]
 8004460:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004464:	bf00      	nop
 8004466:	e7fd      	b.n	8004464 <__NVIC_SystemReset+0x1c>
 8004468:	e000ed00 	.word	0xe000ed00
 800446c:	05fa0004 	.word	0x05fa0004

08004470 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	3b01      	subs	r3, #1
 800447c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004480:	d301      	bcc.n	8004486 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004482:	2301      	movs	r3, #1
 8004484:	e00f      	b.n	80044a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004486:	4a0a      	ldr	r2, [pc, #40]	; (80044b0 <SysTick_Config+0x40>)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	3b01      	subs	r3, #1
 800448c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800448e:	210f      	movs	r1, #15
 8004490:	f04f 30ff 	mov.w	r0, #4294967295
 8004494:	f7ff ff7a 	bl	800438c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004498:	4b05      	ldr	r3, [pc, #20]	; (80044b0 <SysTick_Config+0x40>)
 800449a:	2200      	movs	r2, #0
 800449c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800449e:	4b04      	ldr	r3, [pc, #16]	; (80044b0 <SysTick_Config+0x40>)
 80044a0:	2207      	movs	r2, #7
 80044a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3708      	adds	r7, #8
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	e000e010 	.word	0xe000e010

080044b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b082      	sub	sp, #8
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f7ff ff15 	bl	80042ec <__NVIC_SetPriorityGrouping>
}
 80044c2:	bf00      	nop
 80044c4:	3708      	adds	r7, #8
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b086      	sub	sp, #24
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	4603      	mov	r3, r0
 80044d2:	60b9      	str	r1, [r7, #8]
 80044d4:	607a      	str	r2, [r7, #4]
 80044d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80044d8:	2300      	movs	r3, #0
 80044da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80044dc:	f7ff ff2a 	bl	8004334 <__NVIC_GetPriorityGrouping>
 80044e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	68b9      	ldr	r1, [r7, #8]
 80044e6:	6978      	ldr	r0, [r7, #20]
 80044e8:	f7ff ff7a 	bl	80043e0 <NVIC_EncodePriority>
 80044ec:	4602      	mov	r2, r0
 80044ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044f2:	4611      	mov	r1, r2
 80044f4:	4618      	mov	r0, r3
 80044f6:	f7ff ff49 	bl	800438c <__NVIC_SetPriority>
}
 80044fa:	bf00      	nop
 80044fc:	3718      	adds	r7, #24
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}

08004502 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004502:	b580      	push	{r7, lr}
 8004504:	b082      	sub	sp, #8
 8004506:	af00      	add	r7, sp, #0
 8004508:	4603      	mov	r3, r0
 800450a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800450c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004510:	4618      	mov	r0, r3
 8004512:	f7ff ff1d 	bl	8004350 <__NVIC_EnableIRQ>
}
 8004516:	bf00      	nop
 8004518:	3708      	adds	r7, #8
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}

0800451e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800451e:	b580      	push	{r7, lr}
 8004520:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8004522:	f7ff ff91 	bl	8004448 <__NVIC_SystemReset>

08004526 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004526:	b580      	push	{r7, lr}
 8004528:	b082      	sub	sp, #8
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f7ff ff9e 	bl	8004470 <SysTick_Config>
 8004534:	4603      	mov	r3, r0
}
 8004536:	4618      	mov	r0, r3
 8004538:	3708      	adds	r7, #8
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
	...

08004540 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b086      	sub	sp, #24
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004548:	2300      	movs	r3, #0
 800454a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800454c:	f7ff f976 	bl	800383c <HAL_GetTick>
 8004550:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d101      	bne.n	800455c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e099      	b.n	8004690 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2202      	movs	r2, #2
 8004568:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f022 0201 	bic.w	r2, r2, #1
 800457a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800457c:	e00f      	b.n	800459e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800457e:	f7ff f95d 	bl	800383c <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	2b05      	cmp	r3, #5
 800458a:	d908      	bls.n	800459e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2220      	movs	r2, #32
 8004590:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2203      	movs	r2, #3
 8004596:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e078      	b.n	8004690 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0301 	and.w	r3, r3, #1
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d1e8      	bne.n	800457e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80045b4:	697a      	ldr	r2, [r7, #20]
 80045b6:	4b38      	ldr	r3, [pc, #224]	; (8004698 <HAL_DMA_Init+0x158>)
 80045b8:	4013      	ands	r3, r2
 80045ba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685a      	ldr	r2, [r3, #4]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80045ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	691b      	ldr	r3, [r3, #16]
 80045d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a1b      	ldr	r3, [r3, #32]
 80045e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80045ea:	697a      	ldr	r2, [r7, #20]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f4:	2b04      	cmp	r3, #4
 80045f6:	d107      	bne.n	8004608 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004600:	4313      	orrs	r3, r2
 8004602:	697a      	ldr	r2, [r7, #20]
 8004604:	4313      	orrs	r3, r2
 8004606:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	697a      	ldr	r2, [r7, #20]
 800460e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	695b      	ldr	r3, [r3, #20]
 8004616:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	f023 0307 	bic.w	r3, r3, #7
 800461e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004624:	697a      	ldr	r2, [r7, #20]
 8004626:	4313      	orrs	r3, r2
 8004628:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462e:	2b04      	cmp	r3, #4
 8004630:	d117      	bne.n	8004662 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004636:	697a      	ldr	r2, [r7, #20]
 8004638:	4313      	orrs	r3, r2
 800463a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004640:	2b00      	cmp	r3, #0
 8004642:	d00e      	beq.n	8004662 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f000 fa91 	bl	8004b6c <DMA_CheckFifoParam>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d008      	beq.n	8004662 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2240      	movs	r2, #64	; 0x40
 8004654:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2201      	movs	r2, #1
 800465a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800465e:	2301      	movs	r3, #1
 8004660:	e016      	b.n	8004690 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	697a      	ldr	r2, [r7, #20]
 8004668:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 fa48 	bl	8004b00 <DMA_CalcBaseAndBitshift>
 8004670:	4603      	mov	r3, r0
 8004672:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004678:	223f      	movs	r2, #63	; 0x3f
 800467a:	409a      	lsls	r2, r3
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2201      	movs	r2, #1
 800468a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800468e:	2300      	movs	r3, #0
}
 8004690:	4618      	mov	r0, r3
 8004692:	3718      	adds	r7, #24
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}
 8004698:	f010803f 	.word	0xf010803f

0800469c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b086      	sub	sp, #24
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	607a      	str	r2, [r7, #4]
 80046a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046aa:	2300      	movs	r3, #0
 80046ac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046b2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d101      	bne.n	80046c2 <HAL_DMA_Start_IT+0x26>
 80046be:	2302      	movs	r3, #2
 80046c0:	e040      	b.n	8004744 <HAL_DMA_Start_IT+0xa8>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d12f      	bne.n	8004736 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2202      	movs	r2, #2
 80046da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2200      	movs	r2, #0
 80046e2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	68b9      	ldr	r1, [r7, #8]
 80046ea:	68f8      	ldr	r0, [r7, #12]
 80046ec:	f000 f9da 	bl	8004aa4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046f4:	223f      	movs	r2, #63	; 0x3f
 80046f6:	409a      	lsls	r2, r3
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f042 0216 	orr.w	r2, r2, #22
 800470a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004710:	2b00      	cmp	r3, #0
 8004712:	d007      	beq.n	8004724 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f042 0208 	orr.w	r2, r2, #8
 8004722:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f042 0201 	orr.w	r2, r2, #1
 8004732:	601a      	str	r2, [r3, #0]
 8004734:	e005      	b.n	8004742 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2200      	movs	r2, #0
 800473a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800473e:	2302      	movs	r3, #2
 8004740:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004742:	7dfb      	ldrb	r3, [r7, #23]
}
 8004744:	4618      	mov	r0, r3
 8004746:	3718      	adds	r7, #24
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800475a:	b2db      	uxtb	r3, r3
 800475c:	2b02      	cmp	r3, #2
 800475e:	d004      	beq.n	800476a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2280      	movs	r2, #128	; 0x80
 8004764:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e00c      	b.n	8004784 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2205      	movs	r2, #5
 800476e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f022 0201 	bic.w	r2, r2, #1
 8004780:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004782:	2300      	movs	r3, #0
}
 8004784:	4618      	mov	r0, r3
 8004786:	370c      	adds	r7, #12
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b086      	sub	sp, #24
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004798:	2300      	movs	r3, #0
 800479a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800479c:	4b92      	ldr	r3, [pc, #584]	; (80049e8 <HAL_DMA_IRQHandler+0x258>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a92      	ldr	r2, [pc, #584]	; (80049ec <HAL_DMA_IRQHandler+0x25c>)
 80047a2:	fba2 2303 	umull	r2, r3, r2, r3
 80047a6:	0a9b      	lsrs	r3, r3, #10
 80047a8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ba:	2208      	movs	r2, #8
 80047bc:	409a      	lsls	r2, r3
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	4013      	ands	r3, r2
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d01a      	beq.n	80047fc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0304 	and.w	r3, r3, #4
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d013      	beq.n	80047fc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f022 0204 	bic.w	r2, r2, #4
 80047e2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047e8:	2208      	movs	r2, #8
 80047ea:	409a      	lsls	r2, r3
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047f4:	f043 0201 	orr.w	r2, r3, #1
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004800:	2201      	movs	r2, #1
 8004802:	409a      	lsls	r2, r3
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	4013      	ands	r3, r2
 8004808:	2b00      	cmp	r3, #0
 800480a:	d012      	beq.n	8004832 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	695b      	ldr	r3, [r3, #20]
 8004812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00b      	beq.n	8004832 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800481e:	2201      	movs	r2, #1
 8004820:	409a      	lsls	r2, r3
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800482a:	f043 0202 	orr.w	r2, r3, #2
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004836:	2204      	movs	r2, #4
 8004838:	409a      	lsls	r2, r3
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	4013      	ands	r3, r2
 800483e:	2b00      	cmp	r3, #0
 8004840:	d012      	beq.n	8004868 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0302 	and.w	r3, r3, #2
 800484c:	2b00      	cmp	r3, #0
 800484e:	d00b      	beq.n	8004868 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004854:	2204      	movs	r2, #4
 8004856:	409a      	lsls	r2, r3
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004860:	f043 0204 	orr.w	r2, r3, #4
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800486c:	2210      	movs	r2, #16
 800486e:	409a      	lsls	r2, r3
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	4013      	ands	r3, r2
 8004874:	2b00      	cmp	r3, #0
 8004876:	d043      	beq.n	8004900 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0308 	and.w	r3, r3, #8
 8004882:	2b00      	cmp	r3, #0
 8004884:	d03c      	beq.n	8004900 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800488a:	2210      	movs	r2, #16
 800488c:	409a      	lsls	r2, r3
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d018      	beq.n	80048d2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d108      	bne.n	80048c0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d024      	beq.n	8004900 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	4798      	blx	r3
 80048be:	e01f      	b.n	8004900 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d01b      	beq.n	8004900 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	4798      	blx	r3
 80048d0:	e016      	b.n	8004900 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d107      	bne.n	80048f0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f022 0208 	bic.w	r2, r2, #8
 80048ee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d003      	beq.n	8004900 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004904:	2220      	movs	r2, #32
 8004906:	409a      	lsls	r2, r3
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	4013      	ands	r3, r2
 800490c:	2b00      	cmp	r3, #0
 800490e:	f000 808e 	beq.w	8004a2e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0310 	and.w	r3, r3, #16
 800491c:	2b00      	cmp	r3, #0
 800491e:	f000 8086 	beq.w	8004a2e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004926:	2220      	movs	r2, #32
 8004928:	409a      	lsls	r2, r3
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004934:	b2db      	uxtb	r3, r3
 8004936:	2b05      	cmp	r3, #5
 8004938:	d136      	bne.n	80049a8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f022 0216 	bic.w	r2, r2, #22
 8004948:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	695a      	ldr	r2, [r3, #20]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004958:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495e:	2b00      	cmp	r3, #0
 8004960:	d103      	bne.n	800496a <HAL_DMA_IRQHandler+0x1da>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004966:	2b00      	cmp	r3, #0
 8004968:	d007      	beq.n	800497a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f022 0208 	bic.w	r2, r2, #8
 8004978:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800497e:	223f      	movs	r2, #63	; 0x3f
 8004980:	409a      	lsls	r2, r3
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2201      	movs	r2, #1
 8004992:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800499a:	2b00      	cmp	r3, #0
 800499c:	d07d      	beq.n	8004a9a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	4798      	blx	r3
        }
        return;
 80049a6:	e078      	b.n	8004a9a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d01c      	beq.n	80049f0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d108      	bne.n	80049d6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d030      	beq.n	8004a2e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	4798      	blx	r3
 80049d4:	e02b      	b.n	8004a2e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d027      	beq.n	8004a2e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	4798      	blx	r3
 80049e6:	e022      	b.n	8004a2e <HAL_DMA_IRQHandler+0x29e>
 80049e8:	20000048 	.word	0x20000048
 80049ec:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d10f      	bne.n	8004a1e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f022 0210 	bic.w	r2, r2, #16
 8004a0c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2201      	movs	r2, #1
 8004a1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d003      	beq.n	8004a2e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d032      	beq.n	8004a9c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a3a:	f003 0301 	and.w	r3, r3, #1
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d022      	beq.n	8004a88 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2205      	movs	r2, #5
 8004a46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f022 0201 	bic.w	r2, r2, #1
 8004a58:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	3301      	adds	r3, #1
 8004a5e:	60bb      	str	r3, [r7, #8]
 8004a60:	697a      	ldr	r2, [r7, #20]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d307      	bcc.n	8004a76 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 0301 	and.w	r3, r3, #1
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d1f2      	bne.n	8004a5a <HAL_DMA_IRQHandler+0x2ca>
 8004a74:	e000      	b.n	8004a78 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004a76:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d005      	beq.n	8004a9c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	4798      	blx	r3
 8004a98:	e000      	b.n	8004a9c <HAL_DMA_IRQHandler+0x30c>
        return;
 8004a9a:	bf00      	nop
    }
  }
}
 8004a9c:	3718      	adds	r7, #24
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop

08004aa4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b085      	sub	sp, #20
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	607a      	str	r2, [r7, #4]
 8004ab0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004ac0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	683a      	ldr	r2, [r7, #0]
 8004ac8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	2b40      	cmp	r3, #64	; 0x40
 8004ad0:	d108      	bne.n	8004ae4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68ba      	ldr	r2, [r7, #8]
 8004ae0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004ae2:	e007      	b.n	8004af4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	68ba      	ldr	r2, [r7, #8]
 8004aea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	60da      	str	r2, [r3, #12]
}
 8004af4:	bf00      	nop
 8004af6:	3714      	adds	r7, #20
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b085      	sub	sp, #20
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	3b10      	subs	r3, #16
 8004b10:	4a14      	ldr	r2, [pc, #80]	; (8004b64 <DMA_CalcBaseAndBitshift+0x64>)
 8004b12:	fba2 2303 	umull	r2, r3, r2, r3
 8004b16:	091b      	lsrs	r3, r3, #4
 8004b18:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004b1a:	4a13      	ldr	r2, [pc, #76]	; (8004b68 <DMA_CalcBaseAndBitshift+0x68>)
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	4413      	add	r3, r2
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	461a      	mov	r2, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2b03      	cmp	r3, #3
 8004b2c:	d909      	bls.n	8004b42 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004b36:	f023 0303 	bic.w	r3, r3, #3
 8004b3a:	1d1a      	adds	r2, r3, #4
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	659a      	str	r2, [r3, #88]	; 0x58
 8004b40:	e007      	b.n	8004b52 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004b4a:	f023 0303 	bic.w	r3, r3, #3
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3714      	adds	r7, #20
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
 8004b62:	bf00      	nop
 8004b64:	aaaaaaab 	.word	0xaaaaaaab
 8004b68:	0800bdd8 	.word	0x0800bdd8

08004b6c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b085      	sub	sp, #20
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b74:	2300      	movs	r3, #0
 8004b76:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b7c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	699b      	ldr	r3, [r3, #24]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d11f      	bne.n	8004bc6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	2b03      	cmp	r3, #3
 8004b8a:	d855      	bhi.n	8004c38 <DMA_CheckFifoParam+0xcc>
 8004b8c:	a201      	add	r2, pc, #4	; (adr r2, 8004b94 <DMA_CheckFifoParam+0x28>)
 8004b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b92:	bf00      	nop
 8004b94:	08004ba5 	.word	0x08004ba5
 8004b98:	08004bb7 	.word	0x08004bb7
 8004b9c:	08004ba5 	.word	0x08004ba5
 8004ba0:	08004c39 	.word	0x08004c39
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d045      	beq.n	8004c3c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bb4:	e042      	b.n	8004c3c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004bbe:	d13f      	bne.n	8004c40 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bc4:	e03c      	b.n	8004c40 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	699b      	ldr	r3, [r3, #24]
 8004bca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bce:	d121      	bne.n	8004c14 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	2b03      	cmp	r3, #3
 8004bd4:	d836      	bhi.n	8004c44 <DMA_CheckFifoParam+0xd8>
 8004bd6:	a201      	add	r2, pc, #4	; (adr r2, 8004bdc <DMA_CheckFifoParam+0x70>)
 8004bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bdc:	08004bed 	.word	0x08004bed
 8004be0:	08004bf3 	.word	0x08004bf3
 8004be4:	08004bed 	.word	0x08004bed
 8004be8:	08004c05 	.word	0x08004c05
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	73fb      	strb	r3, [r7, #15]
      break;
 8004bf0:	e02f      	b.n	8004c52 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d024      	beq.n	8004c48 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c02:	e021      	b.n	8004c48 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c08:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c0c:	d11e      	bne.n	8004c4c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004c12:	e01b      	b.n	8004c4c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	d902      	bls.n	8004c20 <DMA_CheckFifoParam+0xb4>
 8004c1a:	2b03      	cmp	r3, #3
 8004c1c:	d003      	beq.n	8004c26 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004c1e:	e018      	b.n	8004c52 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	73fb      	strb	r3, [r7, #15]
      break;
 8004c24:	e015      	b.n	8004c52 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00e      	beq.n	8004c50 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	73fb      	strb	r3, [r7, #15]
      break;
 8004c36:	e00b      	b.n	8004c50 <DMA_CheckFifoParam+0xe4>
      break;
 8004c38:	bf00      	nop
 8004c3a:	e00a      	b.n	8004c52 <DMA_CheckFifoParam+0xe6>
      break;
 8004c3c:	bf00      	nop
 8004c3e:	e008      	b.n	8004c52 <DMA_CheckFifoParam+0xe6>
      break;
 8004c40:	bf00      	nop
 8004c42:	e006      	b.n	8004c52 <DMA_CheckFifoParam+0xe6>
      break;
 8004c44:	bf00      	nop
 8004c46:	e004      	b.n	8004c52 <DMA_CheckFifoParam+0xe6>
      break;
 8004c48:	bf00      	nop
 8004c4a:	e002      	b.n	8004c52 <DMA_CheckFifoParam+0xe6>
      break;   
 8004c4c:	bf00      	nop
 8004c4e:	e000      	b.n	8004c52 <DMA_CheckFifoParam+0xe6>
      break;
 8004c50:	bf00      	nop
    }
  } 
  
  return status; 
 8004c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3714      	adds	r7, #20
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr

08004c60 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b086      	sub	sp, #24
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004c72:	4b23      	ldr	r3, [pc, #140]	; (8004d00 <HAL_FLASH_Program+0xa0>)
 8004c74:	7e1b      	ldrb	r3, [r3, #24]
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d101      	bne.n	8004c7e <HAL_FLASH_Program+0x1e>
 8004c7a:	2302      	movs	r3, #2
 8004c7c:	e03b      	b.n	8004cf6 <HAL_FLASH_Program+0x96>
 8004c7e:	4b20      	ldr	r3, [pc, #128]	; (8004d00 <HAL_FLASH_Program+0xa0>)
 8004c80:	2201      	movs	r2, #1
 8004c82:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004c84:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004c88:	f000 f87c 	bl	8004d84 <FLASH_WaitForLastOperation>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8004c90:	7dfb      	ldrb	r3, [r7, #23]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d12b      	bne.n	8004cee <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d105      	bne.n	8004ca8 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8004c9c:	783b      	ldrb	r3, [r7, #0]
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	68b8      	ldr	r0, [r7, #8]
 8004ca2:	f000 f925 	bl	8004ef0 <FLASH_Program_Byte>
 8004ca6:	e016      	b.n	8004cd6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d105      	bne.n	8004cba <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8004cae:	883b      	ldrh	r3, [r7, #0]
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	68b8      	ldr	r0, [r7, #8]
 8004cb4:	f000 f8f8 	bl	8004ea8 <FLASH_Program_HalfWord>
 8004cb8:	e00d      	b.n	8004cd6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2b02      	cmp	r3, #2
 8004cbe:	d105      	bne.n	8004ccc <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	4619      	mov	r1, r3
 8004cc4:	68b8      	ldr	r0, [r7, #8]
 8004cc6:	f000 f8cd 	bl	8004e64 <FLASH_Program_Word>
 8004cca:	e004      	b.n	8004cd6 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8004ccc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004cd0:	68b8      	ldr	r0, [r7, #8]
 8004cd2:	f000 f897 	bl	8004e04 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004cd6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004cda:	f000 f853 	bl	8004d84 <FLASH_WaitForLastOperation>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8004ce2:	4b08      	ldr	r3, [pc, #32]	; (8004d04 <HAL_FLASH_Program+0xa4>)
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	4a07      	ldr	r2, [pc, #28]	; (8004d04 <HAL_FLASH_Program+0xa4>)
 8004ce8:	f023 0301 	bic.w	r3, r3, #1
 8004cec:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004cee:	4b04      	ldr	r3, [pc, #16]	; (8004d00 <HAL_FLASH_Program+0xa0>)
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	761a      	strb	r2, [r3, #24]
  
  return status;
 8004cf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3718      	adds	r7, #24
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	200005a4 	.word	0x200005a4
 8004d04:	40023c00 	.word	0x40023c00

08004d08 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004d12:	4b0b      	ldr	r3, [pc, #44]	; (8004d40 <HAL_FLASH_Unlock+0x38>)
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	da0b      	bge.n	8004d32 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004d1a:	4b09      	ldr	r3, [pc, #36]	; (8004d40 <HAL_FLASH_Unlock+0x38>)
 8004d1c:	4a09      	ldr	r2, [pc, #36]	; (8004d44 <HAL_FLASH_Unlock+0x3c>)
 8004d1e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004d20:	4b07      	ldr	r3, [pc, #28]	; (8004d40 <HAL_FLASH_Unlock+0x38>)
 8004d22:	4a09      	ldr	r2, [pc, #36]	; (8004d48 <HAL_FLASH_Unlock+0x40>)
 8004d24:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004d26:	4b06      	ldr	r3, [pc, #24]	; (8004d40 <HAL_FLASH_Unlock+0x38>)
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	da01      	bge.n	8004d32 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004d32:	79fb      	ldrb	r3, [r7, #7]
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	370c      	adds	r7, #12
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr
 8004d40:	40023c00 	.word	0x40023c00
 8004d44:	45670123 	.word	0x45670123
 8004d48:	cdef89ab 	.word	0xcdef89ab

08004d4c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8004d50:	4b05      	ldr	r3, [pc, #20]	; (8004d68 <HAL_FLASH_Lock+0x1c>)
 8004d52:	691b      	ldr	r3, [r3, #16]
 8004d54:	4a04      	ldr	r2, [pc, #16]	; (8004d68 <HAL_FLASH_Lock+0x1c>)
 8004d56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004d5a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr
 8004d68:	40023c00 	.word	0x40023c00

08004d6c <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 8004d6c:	b480      	push	{r7}
 8004d6e:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8004d70:	4b03      	ldr	r3, [pc, #12]	; (8004d80 <HAL_FLASH_GetError+0x14>)
 8004d72:	69db      	ldr	r3, [r3, #28]
}  
 8004d74:	4618      	mov	r0, r3
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr
 8004d7e:	bf00      	nop
 8004d80:	200005a4 	.word	0x200005a4

08004d84 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004d90:	4b1a      	ldr	r3, [pc, #104]	; (8004dfc <FLASH_WaitForLastOperation+0x78>)
 8004d92:	2200      	movs	r2, #0
 8004d94:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8004d96:	f7fe fd51 	bl	800383c <HAL_GetTick>
 8004d9a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004d9c:	e010      	b.n	8004dc0 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004da4:	d00c      	beq.n	8004dc0 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d007      	beq.n	8004dbc <FLASH_WaitForLastOperation+0x38>
 8004dac:	f7fe fd46 	bl	800383c <HAL_GetTick>
 8004db0:	4602      	mov	r2, r0
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d201      	bcs.n	8004dc0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	e019      	b.n	8004df4 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004dc0:	4b0f      	ldr	r3, [pc, #60]	; (8004e00 <FLASH_WaitForLastOperation+0x7c>)
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d1e8      	bne.n	8004d9e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8004dcc:	4b0c      	ldr	r3, [pc, #48]	; (8004e00 <FLASH_WaitForLastOperation+0x7c>)
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	f003 0301 	and.w	r3, r3, #1
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d002      	beq.n	8004dde <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004dd8:	4b09      	ldr	r3, [pc, #36]	; (8004e00 <FLASH_WaitForLastOperation+0x7c>)
 8004dda:	2201      	movs	r2, #1
 8004ddc:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8004dde:	4b08      	ldr	r3, [pc, #32]	; (8004e00 <FLASH_WaitForLastOperation+0x7c>)
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d003      	beq.n	8004df2 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004dea:	f000 f8a3 	bl	8004f34 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e000      	b.n	8004df4 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8004df2:	2300      	movs	r3, #0
  
}  
 8004df4:	4618      	mov	r0, r3
 8004df6:	3710      	adds	r7, #16
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	200005a4 	.word	0x200005a4
 8004e00:	40023c00 	.word	0x40023c00

08004e04 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004e04:	b490      	push	{r4, r7}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004e10:	4b13      	ldr	r3, [pc, #76]	; (8004e60 <FLASH_Program_DoubleWord+0x5c>)
 8004e12:	691b      	ldr	r3, [r3, #16]
 8004e14:	4a12      	ldr	r2, [pc, #72]	; (8004e60 <FLASH_Program_DoubleWord+0x5c>)
 8004e16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e1a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8004e1c:	4b10      	ldr	r3, [pc, #64]	; (8004e60 <FLASH_Program_DoubleWord+0x5c>)
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	4a0f      	ldr	r2, [pc, #60]	; (8004e60 <FLASH_Program_DoubleWord+0x5c>)
 8004e22:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004e26:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004e28:	4b0d      	ldr	r3, [pc, #52]	; (8004e60 <FLASH_Program_DoubleWord+0x5c>)
 8004e2a:	691b      	ldr	r3, [r3, #16]
 8004e2c:	4a0c      	ldr	r2, [pc, #48]	; (8004e60 <FLASH_Program_DoubleWord+0x5c>)
 8004e2e:	f043 0301 	orr.w	r3, r3, #1
 8004e32:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	683a      	ldr	r2, [r7, #0]
 8004e38:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8004e3a:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8004e3e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004e42:	f04f 0300 	mov.w	r3, #0
 8004e46:	f04f 0400 	mov.w	r4, #0
 8004e4a:	0013      	movs	r3, r2
 8004e4c:	2400      	movs	r4, #0
 8004e4e:	68fa      	ldr	r2, [r7, #12]
 8004e50:	3204      	adds	r2, #4
 8004e52:	6013      	str	r3, [r2, #0]
}
 8004e54:	bf00      	nop
 8004e56:	3710      	adds	r7, #16
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bc90      	pop	{r4, r7}
 8004e5c:	4770      	bx	lr
 8004e5e:	bf00      	nop
 8004e60:	40023c00 	.word	0x40023c00

08004e64 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004e6e:	4b0d      	ldr	r3, [pc, #52]	; (8004ea4 <FLASH_Program_Word+0x40>)
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	4a0c      	ldr	r2, [pc, #48]	; (8004ea4 <FLASH_Program_Word+0x40>)
 8004e74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e78:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8004e7a:	4b0a      	ldr	r3, [pc, #40]	; (8004ea4 <FLASH_Program_Word+0x40>)
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	4a09      	ldr	r2, [pc, #36]	; (8004ea4 <FLASH_Program_Word+0x40>)
 8004e80:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e84:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004e86:	4b07      	ldr	r3, [pc, #28]	; (8004ea4 <FLASH_Program_Word+0x40>)
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	4a06      	ldr	r2, [pc, #24]	; (8004ea4 <FLASH_Program_Word+0x40>)
 8004e8c:	f043 0301 	orr.w	r3, r3, #1
 8004e90:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	683a      	ldr	r2, [r7, #0]
 8004e96:	601a      	str	r2, [r3, #0]
}
 8004e98:	bf00      	nop
 8004e9a:	370c      	adds	r7, #12
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr
 8004ea4:	40023c00 	.word	0x40023c00

08004ea8 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	460b      	mov	r3, r1
 8004eb2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004eb4:	4b0d      	ldr	r3, [pc, #52]	; (8004eec <FLASH_Program_HalfWord+0x44>)
 8004eb6:	691b      	ldr	r3, [r3, #16]
 8004eb8:	4a0c      	ldr	r2, [pc, #48]	; (8004eec <FLASH_Program_HalfWord+0x44>)
 8004eba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ebe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8004ec0:	4b0a      	ldr	r3, [pc, #40]	; (8004eec <FLASH_Program_HalfWord+0x44>)
 8004ec2:	691b      	ldr	r3, [r3, #16]
 8004ec4:	4a09      	ldr	r2, [pc, #36]	; (8004eec <FLASH_Program_HalfWord+0x44>)
 8004ec6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004eca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004ecc:	4b07      	ldr	r3, [pc, #28]	; (8004eec <FLASH_Program_HalfWord+0x44>)
 8004ece:	691b      	ldr	r3, [r3, #16]
 8004ed0:	4a06      	ldr	r2, [pc, #24]	; (8004eec <FLASH_Program_HalfWord+0x44>)
 8004ed2:	f043 0301 	orr.w	r3, r3, #1
 8004ed6:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	887a      	ldrh	r2, [r7, #2]
 8004edc:	801a      	strh	r2, [r3, #0]
}
 8004ede:	bf00      	nop
 8004ee0:	370c      	adds	r7, #12
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	40023c00 	.word	0x40023c00

08004ef0 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	460b      	mov	r3, r1
 8004efa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004efc:	4b0c      	ldr	r3, [pc, #48]	; (8004f30 <FLASH_Program_Byte+0x40>)
 8004efe:	691b      	ldr	r3, [r3, #16]
 8004f00:	4a0b      	ldr	r2, [pc, #44]	; (8004f30 <FLASH_Program_Byte+0x40>)
 8004f02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f06:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8004f08:	4b09      	ldr	r3, [pc, #36]	; (8004f30 <FLASH_Program_Byte+0x40>)
 8004f0a:	4a09      	ldr	r2, [pc, #36]	; (8004f30 <FLASH_Program_Byte+0x40>)
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004f10:	4b07      	ldr	r3, [pc, #28]	; (8004f30 <FLASH_Program_Byte+0x40>)
 8004f12:	691b      	ldr	r3, [r3, #16]
 8004f14:	4a06      	ldr	r2, [pc, #24]	; (8004f30 <FLASH_Program_Byte+0x40>)
 8004f16:	f043 0301 	orr.w	r3, r3, #1
 8004f1a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	78fa      	ldrb	r2, [r7, #3]
 8004f20:	701a      	strb	r2, [r3, #0]
}
 8004f22:	bf00      	nop
 8004f24:	370c      	adds	r7, #12
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr
 8004f2e:	bf00      	nop
 8004f30:	40023c00 	.word	0x40023c00

08004f34 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8004f34:	b480      	push	{r7}
 8004f36:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8004f38:	4b2f      	ldr	r3, [pc, #188]	; (8004ff8 <FLASH_SetErrorCode+0xc4>)
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	f003 0310 	and.w	r3, r3, #16
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d008      	beq.n	8004f56 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004f44:	4b2d      	ldr	r3, [pc, #180]	; (8004ffc <FLASH_SetErrorCode+0xc8>)
 8004f46:	69db      	ldr	r3, [r3, #28]
 8004f48:	f043 0310 	orr.w	r3, r3, #16
 8004f4c:	4a2b      	ldr	r2, [pc, #172]	; (8004ffc <FLASH_SetErrorCode+0xc8>)
 8004f4e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8004f50:	4b29      	ldr	r3, [pc, #164]	; (8004ff8 <FLASH_SetErrorCode+0xc4>)
 8004f52:	2210      	movs	r2, #16
 8004f54:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8004f56:	4b28      	ldr	r3, [pc, #160]	; (8004ff8 <FLASH_SetErrorCode+0xc4>)
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	f003 0320 	and.w	r3, r3, #32
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d008      	beq.n	8004f74 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8004f62:	4b26      	ldr	r3, [pc, #152]	; (8004ffc <FLASH_SetErrorCode+0xc8>)
 8004f64:	69db      	ldr	r3, [r3, #28]
 8004f66:	f043 0308 	orr.w	r3, r3, #8
 8004f6a:	4a24      	ldr	r2, [pc, #144]	; (8004ffc <FLASH_SetErrorCode+0xc8>)
 8004f6c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8004f6e:	4b22      	ldr	r3, [pc, #136]	; (8004ff8 <FLASH_SetErrorCode+0xc4>)
 8004f70:	2220      	movs	r2, #32
 8004f72:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8004f74:	4b20      	ldr	r3, [pc, #128]	; (8004ff8 <FLASH_SetErrorCode+0xc4>)
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d008      	beq.n	8004f92 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8004f80:	4b1e      	ldr	r3, [pc, #120]	; (8004ffc <FLASH_SetErrorCode+0xc8>)
 8004f82:	69db      	ldr	r3, [r3, #28]
 8004f84:	f043 0304 	orr.w	r3, r3, #4
 8004f88:	4a1c      	ldr	r2, [pc, #112]	; (8004ffc <FLASH_SetErrorCode+0xc8>)
 8004f8a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8004f8c:	4b1a      	ldr	r3, [pc, #104]	; (8004ff8 <FLASH_SetErrorCode+0xc4>)
 8004f8e:	2240      	movs	r2, #64	; 0x40
 8004f90:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8004f92:	4b19      	ldr	r3, [pc, #100]	; (8004ff8 <FLASH_SetErrorCode+0xc4>)
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d008      	beq.n	8004fb0 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8004f9e:	4b17      	ldr	r3, [pc, #92]	; (8004ffc <FLASH_SetErrorCode+0xc8>)
 8004fa0:	69db      	ldr	r3, [r3, #28]
 8004fa2:	f043 0302 	orr.w	r3, r3, #2
 8004fa6:	4a15      	ldr	r2, [pc, #84]	; (8004ffc <FLASH_SetErrorCode+0xc8>)
 8004fa8:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8004faa:	4b13      	ldr	r3, [pc, #76]	; (8004ff8 <FLASH_SetErrorCode+0xc4>)
 8004fac:	2280      	movs	r2, #128	; 0x80
 8004fae:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8004fb0:	4b11      	ldr	r3, [pc, #68]	; (8004ff8 <FLASH_SetErrorCode+0xc4>)
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d009      	beq.n	8004fd0 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8004fbc:	4b0f      	ldr	r3, [pc, #60]	; (8004ffc <FLASH_SetErrorCode+0xc8>)
 8004fbe:	69db      	ldr	r3, [r3, #28]
 8004fc0:	f043 0301 	orr.w	r3, r3, #1
 8004fc4:	4a0d      	ldr	r2, [pc, #52]	; (8004ffc <FLASH_SetErrorCode+0xc8>)
 8004fc6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8004fc8:	4b0b      	ldr	r3, [pc, #44]	; (8004ff8 <FLASH_SetErrorCode+0xc4>)
 8004fca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004fce:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8004fd0:	4b09      	ldr	r3, [pc, #36]	; (8004ff8 <FLASH_SetErrorCode+0xc4>)
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	f003 0302 	and.w	r3, r3, #2
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d008      	beq.n	8004fee <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8004fdc:	4b07      	ldr	r3, [pc, #28]	; (8004ffc <FLASH_SetErrorCode+0xc8>)
 8004fde:	69db      	ldr	r3, [r3, #28]
 8004fe0:	f043 0320 	orr.w	r3, r3, #32
 8004fe4:	4a05      	ldr	r2, [pc, #20]	; (8004ffc <FLASH_SetErrorCode+0xc8>)
 8004fe6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8004fe8:	4b03      	ldr	r3, [pc, #12]	; (8004ff8 <FLASH_SetErrorCode+0xc4>)
 8004fea:	2202      	movs	r2, #2
 8004fec:	60da      	str	r2, [r3, #12]
  }
}
 8004fee:	bf00      	nop
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr
 8004ff8:	40023c00 	.word	0x40023c00
 8004ffc:	200005a4 	.word	0x200005a4

08005000 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b084      	sub	sp, #16
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800500e:	2300      	movs	r3, #0
 8005010:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005012:	4b31      	ldr	r3, [pc, #196]	; (80050d8 <HAL_FLASHEx_Erase+0xd8>)
 8005014:	7e1b      	ldrb	r3, [r3, #24]
 8005016:	2b01      	cmp	r3, #1
 8005018:	d101      	bne.n	800501e <HAL_FLASHEx_Erase+0x1e>
 800501a:	2302      	movs	r3, #2
 800501c:	e058      	b.n	80050d0 <HAL_FLASHEx_Erase+0xd0>
 800501e:	4b2e      	ldr	r3, [pc, #184]	; (80050d8 <HAL_FLASHEx_Erase+0xd8>)
 8005020:	2201      	movs	r2, #1
 8005022:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005024:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005028:	f7ff feac 	bl	8004d84 <FLASH_WaitForLastOperation>
 800502c:	4603      	mov	r3, r0
 800502e:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8005030:	7bfb      	ldrb	r3, [r7, #15]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d148      	bne.n	80050c8 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	f04f 32ff 	mov.w	r2, #4294967295
 800503c:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	2b01      	cmp	r3, #1
 8005044:	d115      	bne.n	8005072 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	b2da      	uxtb	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	4619      	mov	r1, r3
 8005052:	4610      	mov	r0, r2
 8005054:	f000 f844 	bl	80050e0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005058:	f24c 3050 	movw	r0, #50000	; 0xc350
 800505c:	f7ff fe92 	bl	8004d84 <FLASH_WaitForLastOperation>
 8005060:	4603      	mov	r3, r0
 8005062:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8005064:	4b1d      	ldr	r3, [pc, #116]	; (80050dc <HAL_FLASHEx_Erase+0xdc>)
 8005066:	691b      	ldr	r3, [r3, #16]
 8005068:	4a1c      	ldr	r2, [pc, #112]	; (80050dc <HAL_FLASHEx_Erase+0xdc>)
 800506a:	f023 0304 	bic.w	r3, r3, #4
 800506e:	6113      	str	r3, [r2, #16]
 8005070:	e028      	b.n	80050c4 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	60bb      	str	r3, [r7, #8]
 8005078:	e01c      	b.n	80050b4 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	b2db      	uxtb	r3, r3
 8005080:	4619      	mov	r1, r3
 8005082:	68b8      	ldr	r0, [r7, #8]
 8005084:	f000 f850 	bl	8005128 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005088:	f24c 3050 	movw	r0, #50000	; 0xc350
 800508c:	f7ff fe7a 	bl	8004d84 <FLASH_WaitForLastOperation>
 8005090:	4603      	mov	r3, r0
 8005092:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8005094:	4b11      	ldr	r3, [pc, #68]	; (80050dc <HAL_FLASHEx_Erase+0xdc>)
 8005096:	691b      	ldr	r3, [r3, #16]
 8005098:	4a10      	ldr	r2, [pc, #64]	; (80050dc <HAL_FLASHEx_Erase+0xdc>)
 800509a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800509e:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 80050a0:	7bfb      	ldrb	r3, [r7, #15]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d003      	beq.n	80050ae <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	68ba      	ldr	r2, [r7, #8]
 80050aa:	601a      	str	r2, [r3, #0]
          break;
 80050ac:	e00a      	b.n	80050c4 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	3301      	adds	r3, #1
 80050b2:	60bb      	str	r3, [r7, #8]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	68da      	ldr	r2, [r3, #12]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	4413      	add	r3, r2
 80050be:	68ba      	ldr	r2, [r7, #8]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d3da      	bcc.n	800507a <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 80050c4:	f000 f878 	bl	80051b8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80050c8:	4b03      	ldr	r3, [pc, #12]	; (80050d8 <HAL_FLASHEx_Erase+0xd8>)
 80050ca:	2200      	movs	r2, #0
 80050cc:	761a      	strb	r2, [r3, #24]

  return status;
 80050ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3710      	adds	r7, #16
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	200005a4 	.word	0x200005a4
 80050dc:	40023c00 	.word	0x40023c00

080050e0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	4603      	mov	r3, r0
 80050e8:	6039      	str	r1, [r7, #0]
 80050ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80050ec:	4b0d      	ldr	r3, [pc, #52]	; (8005124 <FLASH_MassErase+0x44>)
 80050ee:	691b      	ldr	r3, [r3, #16]
 80050f0:	4a0c      	ldr	r2, [pc, #48]	; (8005124 <FLASH_MassErase+0x44>)
 80050f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050f6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80050f8:	4b0a      	ldr	r3, [pc, #40]	; (8005124 <FLASH_MassErase+0x44>)
 80050fa:	691b      	ldr	r3, [r3, #16]
 80050fc:	4a09      	ldr	r2, [pc, #36]	; (8005124 <FLASH_MassErase+0x44>)
 80050fe:	f043 0304 	orr.w	r3, r3, #4
 8005102:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8005104:	4b07      	ldr	r3, [pc, #28]	; (8005124 <FLASH_MassErase+0x44>)
 8005106:	691a      	ldr	r2, [r3, #16]
 8005108:	79fb      	ldrb	r3, [r7, #7]
 800510a:	021b      	lsls	r3, r3, #8
 800510c:	4313      	orrs	r3, r2
 800510e:	4a05      	ldr	r2, [pc, #20]	; (8005124 <FLASH_MassErase+0x44>)
 8005110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005114:	6113      	str	r3, [r2, #16]
}
 8005116:	bf00      	nop
 8005118:	370c      	adds	r7, #12
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	40023c00 	.word	0x40023c00

08005128 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8005128:	b480      	push	{r7}
 800512a:	b085      	sub	sp, #20
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	460b      	mov	r3, r1
 8005132:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8005134:	2300      	movs	r3, #0
 8005136:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8005138:	78fb      	ldrb	r3, [r7, #3]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d102      	bne.n	8005144 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800513e:	2300      	movs	r3, #0
 8005140:	60fb      	str	r3, [r7, #12]
 8005142:	e010      	b.n	8005166 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8005144:	78fb      	ldrb	r3, [r7, #3]
 8005146:	2b01      	cmp	r3, #1
 8005148:	d103      	bne.n	8005152 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800514a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800514e:	60fb      	str	r3, [r7, #12]
 8005150:	e009      	b.n	8005166 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8005152:	78fb      	ldrb	r3, [r7, #3]
 8005154:	2b02      	cmp	r3, #2
 8005156:	d103      	bne.n	8005160 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8005158:	f44f 7300 	mov.w	r3, #512	; 0x200
 800515c:	60fb      	str	r3, [r7, #12]
 800515e:	e002      	b.n	8005166 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8005160:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005164:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005166:	4b13      	ldr	r3, [pc, #76]	; (80051b4 <FLASH_Erase_Sector+0x8c>)
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	4a12      	ldr	r2, [pc, #72]	; (80051b4 <FLASH_Erase_Sector+0x8c>)
 800516c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005170:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8005172:	4b10      	ldr	r3, [pc, #64]	; (80051b4 <FLASH_Erase_Sector+0x8c>)
 8005174:	691a      	ldr	r2, [r3, #16]
 8005176:	490f      	ldr	r1, [pc, #60]	; (80051b4 <FLASH_Erase_Sector+0x8c>)
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	4313      	orrs	r3, r2
 800517c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800517e:	4b0d      	ldr	r3, [pc, #52]	; (80051b4 <FLASH_Erase_Sector+0x8c>)
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	4a0c      	ldr	r2, [pc, #48]	; (80051b4 <FLASH_Erase_Sector+0x8c>)
 8005184:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005188:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800518a:	4b0a      	ldr	r3, [pc, #40]	; (80051b4 <FLASH_Erase_Sector+0x8c>)
 800518c:	691a      	ldr	r2, [r3, #16]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	00db      	lsls	r3, r3, #3
 8005192:	4313      	orrs	r3, r2
 8005194:	4a07      	ldr	r2, [pc, #28]	; (80051b4 <FLASH_Erase_Sector+0x8c>)
 8005196:	f043 0302 	orr.w	r3, r3, #2
 800519a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800519c:	4b05      	ldr	r3, [pc, #20]	; (80051b4 <FLASH_Erase_Sector+0x8c>)
 800519e:	691b      	ldr	r3, [r3, #16]
 80051a0:	4a04      	ldr	r2, [pc, #16]	; (80051b4 <FLASH_Erase_Sector+0x8c>)
 80051a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051a6:	6113      	str	r3, [r2, #16]
}
 80051a8:	bf00      	nop
 80051aa:	3714      	adds	r7, #20
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr
 80051b4:	40023c00 	.word	0x40023c00

080051b8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80051b8:	b480      	push	{r7}
 80051ba:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 80051bc:	4b20      	ldr	r3, [pc, #128]	; (8005240 <FLASH_FlushCaches+0x88>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d017      	beq.n	80051f8 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80051c8:	4b1d      	ldr	r3, [pc, #116]	; (8005240 <FLASH_FlushCaches+0x88>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a1c      	ldr	r2, [pc, #112]	; (8005240 <FLASH_FlushCaches+0x88>)
 80051ce:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051d2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80051d4:	4b1a      	ldr	r3, [pc, #104]	; (8005240 <FLASH_FlushCaches+0x88>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a19      	ldr	r2, [pc, #100]	; (8005240 <FLASH_FlushCaches+0x88>)
 80051da:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80051de:	6013      	str	r3, [r2, #0]
 80051e0:	4b17      	ldr	r3, [pc, #92]	; (8005240 <FLASH_FlushCaches+0x88>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a16      	ldr	r2, [pc, #88]	; (8005240 <FLASH_FlushCaches+0x88>)
 80051e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051ea:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80051ec:	4b14      	ldr	r3, [pc, #80]	; (8005240 <FLASH_FlushCaches+0x88>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a13      	ldr	r2, [pc, #76]	; (8005240 <FLASH_FlushCaches+0x88>)
 80051f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80051f6:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80051f8:	4b11      	ldr	r3, [pc, #68]	; (8005240 <FLASH_FlushCaches+0x88>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005200:	2b00      	cmp	r3, #0
 8005202:	d017      	beq.n	8005234 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8005204:	4b0e      	ldr	r3, [pc, #56]	; (8005240 <FLASH_FlushCaches+0x88>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a0d      	ldr	r2, [pc, #52]	; (8005240 <FLASH_FlushCaches+0x88>)
 800520a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800520e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005210:	4b0b      	ldr	r3, [pc, #44]	; (8005240 <FLASH_FlushCaches+0x88>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a0a      	ldr	r2, [pc, #40]	; (8005240 <FLASH_FlushCaches+0x88>)
 8005216:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800521a:	6013      	str	r3, [r2, #0]
 800521c:	4b08      	ldr	r3, [pc, #32]	; (8005240 <FLASH_FlushCaches+0x88>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a07      	ldr	r2, [pc, #28]	; (8005240 <FLASH_FlushCaches+0x88>)
 8005222:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005226:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005228:	4b05      	ldr	r3, [pc, #20]	; (8005240 <FLASH_FlushCaches+0x88>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a04      	ldr	r2, [pc, #16]	; (8005240 <FLASH_FlushCaches+0x88>)
 800522e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005232:	6013      	str	r3, [r2, #0]
  }
}
 8005234:	bf00      	nop
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr
 800523e:	bf00      	nop
 8005240:	40023c00 	.word	0x40023c00

08005244 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005244:	b480      	push	{r7}
 8005246:	b089      	sub	sp, #36	; 0x24
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800524e:	2300      	movs	r3, #0
 8005250:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005252:	2300      	movs	r3, #0
 8005254:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005256:	2300      	movs	r3, #0
 8005258:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800525a:	2300      	movs	r3, #0
 800525c:	61fb      	str	r3, [r7, #28]
 800525e:	e159      	b.n	8005514 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005260:	2201      	movs	r2, #1
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	fa02 f303 	lsl.w	r3, r2, r3
 8005268:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	697a      	ldr	r2, [r7, #20]
 8005270:	4013      	ands	r3, r2
 8005272:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005274:	693a      	ldr	r2, [r7, #16]
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	429a      	cmp	r2, r3
 800527a:	f040 8148 	bne.w	800550e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	2b01      	cmp	r3, #1
 8005284:	d00b      	beq.n	800529e <HAL_GPIO_Init+0x5a>
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	2b02      	cmp	r3, #2
 800528c:	d007      	beq.n	800529e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005292:	2b11      	cmp	r3, #17
 8005294:	d003      	beq.n	800529e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	2b12      	cmp	r3, #18
 800529c:	d130      	bne.n	8005300 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	005b      	lsls	r3, r3, #1
 80052a8:	2203      	movs	r2, #3
 80052aa:	fa02 f303 	lsl.w	r3, r2, r3
 80052ae:	43db      	mvns	r3, r3
 80052b0:	69ba      	ldr	r2, [r7, #24]
 80052b2:	4013      	ands	r3, r2
 80052b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	68da      	ldr	r2, [r3, #12]
 80052ba:	69fb      	ldr	r3, [r7, #28]
 80052bc:	005b      	lsls	r3, r3, #1
 80052be:	fa02 f303 	lsl.w	r3, r2, r3
 80052c2:	69ba      	ldr	r2, [r7, #24]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	69ba      	ldr	r2, [r7, #24]
 80052cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80052d4:	2201      	movs	r2, #1
 80052d6:	69fb      	ldr	r3, [r7, #28]
 80052d8:	fa02 f303 	lsl.w	r3, r2, r3
 80052dc:	43db      	mvns	r3, r3
 80052de:	69ba      	ldr	r2, [r7, #24]
 80052e0:	4013      	ands	r3, r2
 80052e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	091b      	lsrs	r3, r3, #4
 80052ea:	f003 0201 	and.w	r2, r3, #1
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	fa02 f303 	lsl.w	r3, r2, r3
 80052f4:	69ba      	ldr	r2, [r7, #24]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	69ba      	ldr	r2, [r7, #24]
 80052fe:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	005b      	lsls	r3, r3, #1
 800530a:	2203      	movs	r2, #3
 800530c:	fa02 f303 	lsl.w	r3, r2, r3
 8005310:	43db      	mvns	r3, r3
 8005312:	69ba      	ldr	r2, [r7, #24]
 8005314:	4013      	ands	r3, r2
 8005316:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	689a      	ldr	r2, [r3, #8]
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	005b      	lsls	r3, r3, #1
 8005320:	fa02 f303 	lsl.w	r3, r2, r3
 8005324:	69ba      	ldr	r2, [r7, #24]
 8005326:	4313      	orrs	r3, r2
 8005328:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	69ba      	ldr	r2, [r7, #24]
 800532e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	2b02      	cmp	r3, #2
 8005336:	d003      	beq.n	8005340 <HAL_GPIO_Init+0xfc>
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	2b12      	cmp	r3, #18
 800533e:	d123      	bne.n	8005388 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	08da      	lsrs	r2, r3, #3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	3208      	adds	r2, #8
 8005348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800534c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	f003 0307 	and.w	r3, r3, #7
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	220f      	movs	r2, #15
 8005358:	fa02 f303 	lsl.w	r3, r2, r3
 800535c:	43db      	mvns	r3, r3
 800535e:	69ba      	ldr	r2, [r7, #24]
 8005360:	4013      	ands	r3, r2
 8005362:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	691a      	ldr	r2, [r3, #16]
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	f003 0307 	and.w	r3, r3, #7
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	fa02 f303 	lsl.w	r3, r2, r3
 8005374:	69ba      	ldr	r2, [r7, #24]
 8005376:	4313      	orrs	r3, r2
 8005378:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	08da      	lsrs	r2, r3, #3
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	3208      	adds	r2, #8
 8005382:	69b9      	ldr	r1, [r7, #24]
 8005384:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	005b      	lsls	r3, r3, #1
 8005392:	2203      	movs	r2, #3
 8005394:	fa02 f303 	lsl.w	r3, r2, r3
 8005398:	43db      	mvns	r3, r3
 800539a:	69ba      	ldr	r2, [r7, #24]
 800539c:	4013      	ands	r3, r2
 800539e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	f003 0203 	and.w	r2, r3, #3
 80053a8:	69fb      	ldr	r3, [r7, #28]
 80053aa:	005b      	lsls	r3, r3, #1
 80053ac:	fa02 f303 	lsl.w	r3, r2, r3
 80053b0:	69ba      	ldr	r2, [r7, #24]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	69ba      	ldr	r2, [r7, #24]
 80053ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	f000 80a2 	beq.w	800550e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053ca:	2300      	movs	r3, #0
 80053cc:	60fb      	str	r3, [r7, #12]
 80053ce:	4b56      	ldr	r3, [pc, #344]	; (8005528 <HAL_GPIO_Init+0x2e4>)
 80053d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053d2:	4a55      	ldr	r2, [pc, #340]	; (8005528 <HAL_GPIO_Init+0x2e4>)
 80053d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80053d8:	6453      	str	r3, [r2, #68]	; 0x44
 80053da:	4b53      	ldr	r3, [pc, #332]	; (8005528 <HAL_GPIO_Init+0x2e4>)
 80053dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053e2:	60fb      	str	r3, [r7, #12]
 80053e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80053e6:	4a51      	ldr	r2, [pc, #324]	; (800552c <HAL_GPIO_Init+0x2e8>)
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	089b      	lsrs	r3, r3, #2
 80053ec:	3302      	adds	r3, #2
 80053ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80053f4:	69fb      	ldr	r3, [r7, #28]
 80053f6:	f003 0303 	and.w	r3, r3, #3
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	220f      	movs	r2, #15
 80053fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005402:	43db      	mvns	r3, r3
 8005404:	69ba      	ldr	r2, [r7, #24]
 8005406:	4013      	ands	r3, r2
 8005408:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4a48      	ldr	r2, [pc, #288]	; (8005530 <HAL_GPIO_Init+0x2ec>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d019      	beq.n	8005446 <HAL_GPIO_Init+0x202>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4a47      	ldr	r2, [pc, #284]	; (8005534 <HAL_GPIO_Init+0x2f0>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d013      	beq.n	8005442 <HAL_GPIO_Init+0x1fe>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4a46      	ldr	r2, [pc, #280]	; (8005538 <HAL_GPIO_Init+0x2f4>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d00d      	beq.n	800543e <HAL_GPIO_Init+0x1fa>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4a45      	ldr	r2, [pc, #276]	; (800553c <HAL_GPIO_Init+0x2f8>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d007      	beq.n	800543a <HAL_GPIO_Init+0x1f6>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4a44      	ldr	r2, [pc, #272]	; (8005540 <HAL_GPIO_Init+0x2fc>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d101      	bne.n	8005436 <HAL_GPIO_Init+0x1f2>
 8005432:	2304      	movs	r3, #4
 8005434:	e008      	b.n	8005448 <HAL_GPIO_Init+0x204>
 8005436:	2307      	movs	r3, #7
 8005438:	e006      	b.n	8005448 <HAL_GPIO_Init+0x204>
 800543a:	2303      	movs	r3, #3
 800543c:	e004      	b.n	8005448 <HAL_GPIO_Init+0x204>
 800543e:	2302      	movs	r3, #2
 8005440:	e002      	b.n	8005448 <HAL_GPIO_Init+0x204>
 8005442:	2301      	movs	r3, #1
 8005444:	e000      	b.n	8005448 <HAL_GPIO_Init+0x204>
 8005446:	2300      	movs	r3, #0
 8005448:	69fa      	ldr	r2, [r7, #28]
 800544a:	f002 0203 	and.w	r2, r2, #3
 800544e:	0092      	lsls	r2, r2, #2
 8005450:	4093      	lsls	r3, r2
 8005452:	69ba      	ldr	r2, [r7, #24]
 8005454:	4313      	orrs	r3, r2
 8005456:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005458:	4934      	ldr	r1, [pc, #208]	; (800552c <HAL_GPIO_Init+0x2e8>)
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	089b      	lsrs	r3, r3, #2
 800545e:	3302      	adds	r3, #2
 8005460:	69ba      	ldr	r2, [r7, #24]
 8005462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005466:	4b37      	ldr	r3, [pc, #220]	; (8005544 <HAL_GPIO_Init+0x300>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	43db      	mvns	r3, r3
 8005470:	69ba      	ldr	r2, [r7, #24]
 8005472:	4013      	ands	r3, r2
 8005474:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800547e:	2b00      	cmp	r3, #0
 8005480:	d003      	beq.n	800548a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005482:	69ba      	ldr	r2, [r7, #24]
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	4313      	orrs	r3, r2
 8005488:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800548a:	4a2e      	ldr	r2, [pc, #184]	; (8005544 <HAL_GPIO_Init+0x300>)
 800548c:	69bb      	ldr	r3, [r7, #24]
 800548e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005490:	4b2c      	ldr	r3, [pc, #176]	; (8005544 <HAL_GPIO_Init+0x300>)
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	43db      	mvns	r3, r3
 800549a:	69ba      	ldr	r2, [r7, #24]
 800549c:	4013      	ands	r3, r2
 800549e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d003      	beq.n	80054b4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80054ac:	69ba      	ldr	r2, [r7, #24]
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80054b4:	4a23      	ldr	r2, [pc, #140]	; (8005544 <HAL_GPIO_Init+0x300>)
 80054b6:	69bb      	ldr	r3, [r7, #24]
 80054b8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80054ba:	4b22      	ldr	r3, [pc, #136]	; (8005544 <HAL_GPIO_Init+0x300>)
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	43db      	mvns	r3, r3
 80054c4:	69ba      	ldr	r2, [r7, #24]
 80054c6:	4013      	ands	r3, r2
 80054c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d003      	beq.n	80054de <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80054d6:	69ba      	ldr	r2, [r7, #24]
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	4313      	orrs	r3, r2
 80054dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80054de:	4a19      	ldr	r2, [pc, #100]	; (8005544 <HAL_GPIO_Init+0x300>)
 80054e0:	69bb      	ldr	r3, [r7, #24]
 80054e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80054e4:	4b17      	ldr	r3, [pc, #92]	; (8005544 <HAL_GPIO_Init+0x300>)
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	43db      	mvns	r3, r3
 80054ee:	69ba      	ldr	r2, [r7, #24]
 80054f0:	4013      	ands	r3, r2
 80054f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d003      	beq.n	8005508 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005500:	69ba      	ldr	r2, [r7, #24]
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	4313      	orrs	r3, r2
 8005506:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005508:	4a0e      	ldr	r2, [pc, #56]	; (8005544 <HAL_GPIO_Init+0x300>)
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	3301      	adds	r3, #1
 8005512:	61fb      	str	r3, [r7, #28]
 8005514:	69fb      	ldr	r3, [r7, #28]
 8005516:	2b0f      	cmp	r3, #15
 8005518:	f67f aea2 	bls.w	8005260 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800551c:	bf00      	nop
 800551e:	3724      	adds	r7, #36	; 0x24
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr
 8005528:	40023800 	.word	0x40023800
 800552c:	40013800 	.word	0x40013800
 8005530:	40020000 	.word	0x40020000
 8005534:	40020400 	.word	0x40020400
 8005538:	40020800 	.word	0x40020800
 800553c:	40020c00 	.word	0x40020c00
 8005540:	40021000 	.word	0x40021000
 8005544:	40013c00 	.word	0x40013c00

08005548 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005548:	b480      	push	{r7}
 800554a:	b085      	sub	sp, #20
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	460b      	mov	r3, r1
 8005552:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	691a      	ldr	r2, [r3, #16]
 8005558:	887b      	ldrh	r3, [r7, #2]
 800555a:	4013      	ands	r3, r2
 800555c:	2b00      	cmp	r3, #0
 800555e:	d002      	beq.n	8005566 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005560:	2301      	movs	r3, #1
 8005562:	73fb      	strb	r3, [r7, #15]
 8005564:	e001      	b.n	800556a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005566:	2300      	movs	r3, #0
 8005568:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800556a:	7bfb      	ldrb	r3, [r7, #15]
}
 800556c:	4618      	mov	r0, r3
 800556e:	3714      	adds	r7, #20
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	460b      	mov	r3, r1
 8005582:	807b      	strh	r3, [r7, #2]
 8005584:	4613      	mov	r3, r2
 8005586:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005588:	787b      	ldrb	r3, [r7, #1]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d003      	beq.n	8005596 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800558e:	887a      	ldrh	r2, [r7, #2]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005594:	e003      	b.n	800559e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005596:	887b      	ldrh	r3, [r7, #2]
 8005598:	041a      	lsls	r2, r3, #16
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	619a      	str	r2, [r3, #24]
}
 800559e:	bf00      	nop
 80055a0:	370c      	adds	r7, #12
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr
	...

080055ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b082      	sub	sp, #8
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	4603      	mov	r3, r0
 80055b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80055b6:	4b08      	ldr	r3, [pc, #32]	; (80055d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80055b8:	695a      	ldr	r2, [r3, #20]
 80055ba:	88fb      	ldrh	r3, [r7, #6]
 80055bc:	4013      	ands	r3, r2
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d006      	beq.n	80055d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80055c2:	4a05      	ldr	r2, [pc, #20]	; (80055d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80055c4:	88fb      	ldrh	r3, [r7, #6]
 80055c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80055c8:	88fb      	ldrh	r3, [r7, #6]
 80055ca:	4618      	mov	r0, r3
 80055cc:	f7fd fce2 	bl	8002f94 <HAL_GPIO_EXTI_Callback>
  }
}
 80055d0:	bf00      	nop
 80055d2:	3708      	adds	r7, #8
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	40013c00 	.word	0x40013c00

080055dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d101      	bne.n	80055ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e11f      	b.n	800582e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d106      	bne.n	8005608 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f7fd fe0e 	bl	8003224 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2224      	movs	r2, #36	; 0x24
 800560c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f022 0201 	bic.w	r2, r2, #1
 800561e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800562e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800563e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005640:	f001 f846 	bl	80066d0 <HAL_RCC_GetPCLK1Freq>
 8005644:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	4a7b      	ldr	r2, [pc, #492]	; (8005838 <HAL_I2C_Init+0x25c>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d807      	bhi.n	8005660 <HAL_I2C_Init+0x84>
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	4a7a      	ldr	r2, [pc, #488]	; (800583c <HAL_I2C_Init+0x260>)
 8005654:	4293      	cmp	r3, r2
 8005656:	bf94      	ite	ls
 8005658:	2301      	movls	r3, #1
 800565a:	2300      	movhi	r3, #0
 800565c:	b2db      	uxtb	r3, r3
 800565e:	e006      	b.n	800566e <HAL_I2C_Init+0x92>
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	4a77      	ldr	r2, [pc, #476]	; (8005840 <HAL_I2C_Init+0x264>)
 8005664:	4293      	cmp	r3, r2
 8005666:	bf94      	ite	ls
 8005668:	2301      	movls	r3, #1
 800566a:	2300      	movhi	r3, #0
 800566c:	b2db      	uxtb	r3, r3
 800566e:	2b00      	cmp	r3, #0
 8005670:	d001      	beq.n	8005676 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e0db      	b.n	800582e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	4a72      	ldr	r2, [pc, #456]	; (8005844 <HAL_I2C_Init+0x268>)
 800567a:	fba2 2303 	umull	r2, r3, r2, r3
 800567e:	0c9b      	lsrs	r3, r3, #18
 8005680:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	68ba      	ldr	r2, [r7, #8]
 8005692:	430a      	orrs	r2, r1
 8005694:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	6a1b      	ldr	r3, [r3, #32]
 800569c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	4a64      	ldr	r2, [pc, #400]	; (8005838 <HAL_I2C_Init+0x25c>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d802      	bhi.n	80056b0 <HAL_I2C_Init+0xd4>
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	3301      	adds	r3, #1
 80056ae:	e009      	b.n	80056c4 <HAL_I2C_Init+0xe8>
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80056b6:	fb02 f303 	mul.w	r3, r2, r3
 80056ba:	4a63      	ldr	r2, [pc, #396]	; (8005848 <HAL_I2C_Init+0x26c>)
 80056bc:	fba2 2303 	umull	r2, r3, r2, r3
 80056c0:	099b      	lsrs	r3, r3, #6
 80056c2:	3301      	adds	r3, #1
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	6812      	ldr	r2, [r2, #0]
 80056c8:	430b      	orrs	r3, r1
 80056ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	69db      	ldr	r3, [r3, #28]
 80056d2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80056d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	4956      	ldr	r1, [pc, #344]	; (8005838 <HAL_I2C_Init+0x25c>)
 80056e0:	428b      	cmp	r3, r1
 80056e2:	d80d      	bhi.n	8005700 <HAL_I2C_Init+0x124>
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	1e59      	subs	r1, r3, #1
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	005b      	lsls	r3, r3, #1
 80056ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80056f2:	3301      	adds	r3, #1
 80056f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056f8:	2b04      	cmp	r3, #4
 80056fa:	bf38      	it	cc
 80056fc:	2304      	movcc	r3, #4
 80056fe:	e04f      	b.n	80057a0 <HAL_I2C_Init+0x1c4>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d111      	bne.n	800572c <HAL_I2C_Init+0x150>
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	1e58      	subs	r0, r3, #1
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6859      	ldr	r1, [r3, #4]
 8005710:	460b      	mov	r3, r1
 8005712:	005b      	lsls	r3, r3, #1
 8005714:	440b      	add	r3, r1
 8005716:	fbb0 f3f3 	udiv	r3, r0, r3
 800571a:	3301      	adds	r3, #1
 800571c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005720:	2b00      	cmp	r3, #0
 8005722:	bf0c      	ite	eq
 8005724:	2301      	moveq	r3, #1
 8005726:	2300      	movne	r3, #0
 8005728:	b2db      	uxtb	r3, r3
 800572a:	e012      	b.n	8005752 <HAL_I2C_Init+0x176>
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	1e58      	subs	r0, r3, #1
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6859      	ldr	r1, [r3, #4]
 8005734:	460b      	mov	r3, r1
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	440b      	add	r3, r1
 800573a:	0099      	lsls	r1, r3, #2
 800573c:	440b      	add	r3, r1
 800573e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005742:	3301      	adds	r3, #1
 8005744:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005748:	2b00      	cmp	r3, #0
 800574a:	bf0c      	ite	eq
 800574c:	2301      	moveq	r3, #1
 800574e:	2300      	movne	r3, #0
 8005750:	b2db      	uxtb	r3, r3
 8005752:	2b00      	cmp	r3, #0
 8005754:	d001      	beq.n	800575a <HAL_I2C_Init+0x17e>
 8005756:	2301      	movs	r3, #1
 8005758:	e022      	b.n	80057a0 <HAL_I2C_Init+0x1c4>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d10e      	bne.n	8005780 <HAL_I2C_Init+0x1a4>
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	1e58      	subs	r0, r3, #1
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6859      	ldr	r1, [r3, #4]
 800576a:	460b      	mov	r3, r1
 800576c:	005b      	lsls	r3, r3, #1
 800576e:	440b      	add	r3, r1
 8005770:	fbb0 f3f3 	udiv	r3, r0, r3
 8005774:	3301      	adds	r3, #1
 8005776:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800577a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800577e:	e00f      	b.n	80057a0 <HAL_I2C_Init+0x1c4>
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	1e58      	subs	r0, r3, #1
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6859      	ldr	r1, [r3, #4]
 8005788:	460b      	mov	r3, r1
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	440b      	add	r3, r1
 800578e:	0099      	lsls	r1, r3, #2
 8005790:	440b      	add	r3, r1
 8005792:	fbb0 f3f3 	udiv	r3, r0, r3
 8005796:	3301      	adds	r3, #1
 8005798:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800579c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80057a0:	6879      	ldr	r1, [r7, #4]
 80057a2:	6809      	ldr	r1, [r1, #0]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	69da      	ldr	r2, [r3, #28]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a1b      	ldr	r3, [r3, #32]
 80057ba:	431a      	orrs	r2, r3
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	430a      	orrs	r2, r1
 80057c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80057ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	6911      	ldr	r1, [r2, #16]
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	68d2      	ldr	r2, [r2, #12]
 80057da:	4311      	orrs	r1, r2
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	6812      	ldr	r2, [r2, #0]
 80057e0:	430b      	orrs	r3, r1
 80057e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	695a      	ldr	r2, [r3, #20]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	699b      	ldr	r3, [r3, #24]
 80057f6:	431a      	orrs	r2, r3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	430a      	orrs	r2, r1
 80057fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f042 0201 	orr.w	r2, r2, #1
 800580e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2220      	movs	r2, #32
 800581a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800582c:	2300      	movs	r3, #0
}
 800582e:	4618      	mov	r0, r3
 8005830:	3710      	adds	r7, #16
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}
 8005836:	bf00      	nop
 8005838:	000186a0 	.word	0x000186a0
 800583c:	001e847f 	.word	0x001e847f
 8005840:	003d08ff 	.word	0x003d08ff
 8005844:	431bde83 	.word	0x431bde83
 8005848:	10624dd3 	.word	0x10624dd3

0800584c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b088      	sub	sp, #32
 8005850:	af02      	add	r7, sp, #8
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	607a      	str	r2, [r7, #4]
 8005856:	461a      	mov	r2, r3
 8005858:	460b      	mov	r3, r1
 800585a:	817b      	strh	r3, [r7, #10]
 800585c:	4613      	mov	r3, r2
 800585e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005860:	f7fd ffec 	bl	800383c <HAL_GetTick>
 8005864:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800586c:	b2db      	uxtb	r3, r3
 800586e:	2b20      	cmp	r3, #32
 8005870:	f040 80e0 	bne.w	8005a34 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	9300      	str	r3, [sp, #0]
 8005878:	2319      	movs	r3, #25
 800587a:	2201      	movs	r2, #1
 800587c:	4970      	ldr	r1, [pc, #448]	; (8005a40 <HAL_I2C_Master_Transmit+0x1f4>)
 800587e:	68f8      	ldr	r0, [r7, #12]
 8005880:	f000 f964 	bl	8005b4c <I2C_WaitOnFlagUntilTimeout>
 8005884:	4603      	mov	r3, r0
 8005886:	2b00      	cmp	r3, #0
 8005888:	d001      	beq.n	800588e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800588a:	2302      	movs	r3, #2
 800588c:	e0d3      	b.n	8005a36 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005894:	2b01      	cmp	r3, #1
 8005896:	d101      	bne.n	800589c <HAL_I2C_Master_Transmit+0x50>
 8005898:	2302      	movs	r3, #2
 800589a:	e0cc      	b.n	8005a36 <HAL_I2C_Master_Transmit+0x1ea>
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 0301 	and.w	r3, r3, #1
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d007      	beq.n	80058c2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f042 0201 	orr.w	r2, r2, #1
 80058c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058d0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2221      	movs	r2, #33	; 0x21
 80058d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2210      	movs	r2, #16
 80058de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2200      	movs	r2, #0
 80058e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	893a      	ldrh	r2, [r7, #8]
 80058f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058f8:	b29a      	uxth	r2, r3
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	4a50      	ldr	r2, [pc, #320]	; (8005a44 <HAL_I2C_Master_Transmit+0x1f8>)
 8005902:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005904:	8979      	ldrh	r1, [r7, #10]
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	6a3a      	ldr	r2, [r7, #32]
 800590a:	68f8      	ldr	r0, [r7, #12]
 800590c:	f000 f89c 	bl	8005a48 <I2C_MasterRequestWrite>
 8005910:	4603      	mov	r3, r0
 8005912:	2b00      	cmp	r3, #0
 8005914:	d001      	beq.n	800591a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e08d      	b.n	8005a36 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800591a:	2300      	movs	r3, #0
 800591c:	613b      	str	r3, [r7, #16]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	695b      	ldr	r3, [r3, #20]
 8005924:	613b      	str	r3, [r7, #16]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	699b      	ldr	r3, [r3, #24]
 800592c:	613b      	str	r3, [r7, #16]
 800592e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005930:	e066      	b.n	8005a00 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005932:	697a      	ldr	r2, [r7, #20]
 8005934:	6a39      	ldr	r1, [r7, #32]
 8005936:	68f8      	ldr	r0, [r7, #12]
 8005938:	f000 f9de 	bl	8005cf8 <I2C_WaitOnTXEFlagUntilTimeout>
 800593c:	4603      	mov	r3, r0
 800593e:	2b00      	cmp	r3, #0
 8005940:	d00d      	beq.n	800595e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005946:	2b04      	cmp	r3, #4
 8005948:	d107      	bne.n	800595a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005958:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e06b      	b.n	8005a36 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005962:	781a      	ldrb	r2, [r3, #0]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596e:	1c5a      	adds	r2, r3, #1
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005978:	b29b      	uxth	r3, r3
 800597a:	3b01      	subs	r3, #1
 800597c:	b29a      	uxth	r2, r3
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005986:	3b01      	subs	r3, #1
 8005988:	b29a      	uxth	r2, r3
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	695b      	ldr	r3, [r3, #20]
 8005994:	f003 0304 	and.w	r3, r3, #4
 8005998:	2b04      	cmp	r3, #4
 800599a:	d11b      	bne.n	80059d4 <HAL_I2C_Master_Transmit+0x188>
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d017      	beq.n	80059d4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a8:	781a      	ldrb	r2, [r3, #0]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b4:	1c5a      	adds	r2, r3, #1
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059be:	b29b      	uxth	r3, r3
 80059c0:	3b01      	subs	r3, #1
 80059c2:	b29a      	uxth	r2, r3
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059cc:	3b01      	subs	r3, #1
 80059ce:	b29a      	uxth	r2, r3
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059d4:	697a      	ldr	r2, [r7, #20]
 80059d6:	6a39      	ldr	r1, [r7, #32]
 80059d8:	68f8      	ldr	r0, [r7, #12]
 80059da:	f000 f9ce 	bl	8005d7a <I2C_WaitOnBTFFlagUntilTimeout>
 80059de:	4603      	mov	r3, r0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d00d      	beq.n	8005a00 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e8:	2b04      	cmp	r3, #4
 80059ea:	d107      	bne.n	80059fc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059fa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	e01a      	b.n	8005a36 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d194      	bne.n	8005932 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2220      	movs	r2, #32
 8005a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005a30:	2300      	movs	r3, #0
 8005a32:	e000      	b.n	8005a36 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005a34:	2302      	movs	r3, #2
  }
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3718      	adds	r7, #24
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	00100002 	.word	0x00100002
 8005a44:	ffff0000 	.word	0xffff0000

08005a48 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b088      	sub	sp, #32
 8005a4c:	af02      	add	r7, sp, #8
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	607a      	str	r2, [r7, #4]
 8005a52:	603b      	str	r3, [r7, #0]
 8005a54:	460b      	mov	r3, r1
 8005a56:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a5c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	2b08      	cmp	r3, #8
 8005a62:	d006      	beq.n	8005a72 <I2C_MasterRequestWrite+0x2a>
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d003      	beq.n	8005a72 <I2C_MasterRequestWrite+0x2a>
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005a70:	d108      	bne.n	8005a84 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a80:	601a      	str	r2, [r3, #0]
 8005a82:	e00b      	b.n	8005a9c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a88:	2b12      	cmp	r3, #18
 8005a8a:	d107      	bne.n	8005a9c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a9a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	9300      	str	r3, [sp, #0]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005aa8:	68f8      	ldr	r0, [r7, #12]
 8005aaa:	f000 f84f 	bl	8005b4c <I2C_WaitOnFlagUntilTimeout>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d00d      	beq.n	8005ad0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005abe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ac2:	d103      	bne.n	8005acc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005aca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005acc:	2303      	movs	r3, #3
 8005ace:	e035      	b.n	8005b3c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	691b      	ldr	r3, [r3, #16]
 8005ad4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ad8:	d108      	bne.n	8005aec <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005ada:	897b      	ldrh	r3, [r7, #10]
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	461a      	mov	r2, r3
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005ae8:	611a      	str	r2, [r3, #16]
 8005aea:	e01b      	b.n	8005b24 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005aec:	897b      	ldrh	r3, [r7, #10]
 8005aee:	11db      	asrs	r3, r3, #7
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	f003 0306 	and.w	r3, r3, #6
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	f063 030f 	orn	r3, r3, #15
 8005afc:	b2da      	uxtb	r2, r3
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	490e      	ldr	r1, [pc, #56]	; (8005b44 <I2C_MasterRequestWrite+0xfc>)
 8005b0a:	68f8      	ldr	r0, [r7, #12]
 8005b0c:	f000 f875 	bl	8005bfa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d001      	beq.n	8005b1a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	e010      	b.n	8005b3c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005b1a:	897b      	ldrh	r3, [r7, #10]
 8005b1c:	b2da      	uxtb	r2, r3
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	4907      	ldr	r1, [pc, #28]	; (8005b48 <I2C_MasterRequestWrite+0x100>)
 8005b2a:	68f8      	ldr	r0, [r7, #12]
 8005b2c:	f000 f865 	bl	8005bfa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b30:	4603      	mov	r3, r0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d001      	beq.n	8005b3a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e000      	b.n	8005b3c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005b3a:	2300      	movs	r3, #0
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3718      	adds	r7, #24
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	00010008 	.word	0x00010008
 8005b48:	00010002 	.word	0x00010002

08005b4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	60f8      	str	r0, [r7, #12]
 8005b54:	60b9      	str	r1, [r7, #8]
 8005b56:	603b      	str	r3, [r7, #0]
 8005b58:	4613      	mov	r3, r2
 8005b5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b5c:	e025      	b.n	8005baa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b64:	d021      	beq.n	8005baa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b66:	f7fd fe69 	bl	800383c <HAL_GetTick>
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	69bb      	ldr	r3, [r7, #24]
 8005b6e:	1ad3      	subs	r3, r2, r3
 8005b70:	683a      	ldr	r2, [r7, #0]
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d302      	bcc.n	8005b7c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d116      	bne.n	8005baa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2220      	movs	r2, #32
 8005b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b96:	f043 0220 	orr.w	r2, r3, #32
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e023      	b.n	8005bf2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	0c1b      	lsrs	r3, r3, #16
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d10d      	bne.n	8005bd0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	695b      	ldr	r3, [r3, #20]
 8005bba:	43da      	mvns	r2, r3
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	bf0c      	ite	eq
 8005bc6:	2301      	moveq	r3, #1
 8005bc8:	2300      	movne	r3, #0
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	461a      	mov	r2, r3
 8005bce:	e00c      	b.n	8005bea <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	699b      	ldr	r3, [r3, #24]
 8005bd6:	43da      	mvns	r2, r3
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	4013      	ands	r3, r2
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	bf0c      	ite	eq
 8005be2:	2301      	moveq	r3, #1
 8005be4:	2300      	movne	r3, #0
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	461a      	mov	r2, r3
 8005bea:	79fb      	ldrb	r3, [r7, #7]
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d0b6      	beq.n	8005b5e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005bf0:	2300      	movs	r3, #0
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3710      	adds	r7, #16
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}

08005bfa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005bfa:	b580      	push	{r7, lr}
 8005bfc:	b084      	sub	sp, #16
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	60f8      	str	r0, [r7, #12]
 8005c02:	60b9      	str	r1, [r7, #8]
 8005c04:	607a      	str	r2, [r7, #4]
 8005c06:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005c08:	e051      	b.n	8005cae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	695b      	ldr	r3, [r3, #20]
 8005c10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c18:	d123      	bne.n	8005c62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c28:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c32:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2200      	movs	r2, #0
 8005c38:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2220      	movs	r2, #32
 8005c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2200      	movs	r2, #0
 8005c46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4e:	f043 0204 	orr.w	r2, r3, #4
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e046      	b.n	8005cf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c68:	d021      	beq.n	8005cae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c6a:	f7fd fde7 	bl	800383c <HAL_GetTick>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	1ad3      	subs	r3, r2, r3
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d302      	bcc.n	8005c80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d116      	bne.n	8005cae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2200      	movs	r2, #0
 8005c84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2220      	movs	r2, #32
 8005c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9a:	f043 0220 	orr.w	r2, r3, #32
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	e020      	b.n	8005cf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	0c1b      	lsrs	r3, r3, #16
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d10c      	bne.n	8005cd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	695b      	ldr	r3, [r3, #20]
 8005cbe:	43da      	mvns	r2, r3
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	4013      	ands	r3, r2
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	bf14      	ite	ne
 8005cca:	2301      	movne	r3, #1
 8005ccc:	2300      	moveq	r3, #0
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	e00b      	b.n	8005cea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	699b      	ldr	r3, [r3, #24]
 8005cd8:	43da      	mvns	r2, r3
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	4013      	ands	r3, r2
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	bf14      	ite	ne
 8005ce4:	2301      	movne	r3, #1
 8005ce6:	2300      	moveq	r3, #0
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d18d      	bne.n	8005c0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005cee:	2300      	movs	r3, #0
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3710      	adds	r7, #16
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	60f8      	str	r0, [r7, #12]
 8005d00:	60b9      	str	r1, [r7, #8]
 8005d02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d04:	e02d      	b.n	8005d62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005d06:	68f8      	ldr	r0, [r7, #12]
 8005d08:	f000 f878 	bl	8005dfc <I2C_IsAcknowledgeFailed>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d001      	beq.n	8005d16 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e02d      	b.n	8005d72 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d1c:	d021      	beq.n	8005d62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d1e:	f7fd fd8d 	bl	800383c <HAL_GetTick>
 8005d22:	4602      	mov	r2, r0
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	1ad3      	subs	r3, r2, r3
 8005d28:	68ba      	ldr	r2, [r7, #8]
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d302      	bcc.n	8005d34 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d116      	bne.n	8005d62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2200      	movs	r2, #0
 8005d38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2220      	movs	r2, #32
 8005d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2200      	movs	r2, #0
 8005d46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d4e:	f043 0220 	orr.w	r2, r3, #32
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e007      	b.n	8005d72 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	695b      	ldr	r3, [r3, #20]
 8005d68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d6c:	2b80      	cmp	r3, #128	; 0x80
 8005d6e:	d1ca      	bne.n	8005d06 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005d70:	2300      	movs	r3, #0
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3710      	adds	r7, #16
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}

08005d7a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d7a:	b580      	push	{r7, lr}
 8005d7c:	b084      	sub	sp, #16
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	60f8      	str	r0, [r7, #12]
 8005d82:	60b9      	str	r1, [r7, #8]
 8005d84:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005d86:	e02d      	b.n	8005de4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005d88:	68f8      	ldr	r0, [r7, #12]
 8005d8a:	f000 f837 	bl	8005dfc <I2C_IsAcknowledgeFailed>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d001      	beq.n	8005d98 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	e02d      	b.n	8005df4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d9e:	d021      	beq.n	8005de4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005da0:	f7fd fd4c 	bl	800383c <HAL_GetTick>
 8005da4:	4602      	mov	r2, r0
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	1ad3      	subs	r3, r2, r3
 8005daa:	68ba      	ldr	r2, [r7, #8]
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d302      	bcc.n	8005db6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d116      	bne.n	8005de4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2200      	movs	r2, #0
 8005dba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2220      	movs	r2, #32
 8005dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd0:	f043 0220 	orr.w	r2, r3, #32
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	e007      	b.n	8005df4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	695b      	ldr	r3, [r3, #20]
 8005dea:	f003 0304 	and.w	r3, r3, #4
 8005dee:	2b04      	cmp	r3, #4
 8005df0:	d1ca      	bne.n	8005d88 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005df2:	2300      	movs	r3, #0
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3710      	adds	r7, #16
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	695b      	ldr	r3, [r3, #20]
 8005e0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e12:	d11b      	bne.n	8005e4c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005e1c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2220      	movs	r2, #32
 8005e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e38:	f043 0204 	orr.w	r2, r3, #4
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e000      	b.n	8005e4e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005e4c:	2300      	movs	r3, #0
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	370c      	adds	r7, #12
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr
	...

08005e5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b086      	sub	sp, #24
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d101      	bne.n	8005e6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e25b      	b.n	8006326 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 0301 	and.w	r3, r3, #1
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d075      	beq.n	8005f66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e7a:	4ba3      	ldr	r3, [pc, #652]	; (8006108 <HAL_RCC_OscConfig+0x2ac>)
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	f003 030c 	and.w	r3, r3, #12
 8005e82:	2b04      	cmp	r3, #4
 8005e84:	d00c      	beq.n	8005ea0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e86:	4ba0      	ldr	r3, [pc, #640]	; (8006108 <HAL_RCC_OscConfig+0x2ac>)
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e8e:	2b08      	cmp	r3, #8
 8005e90:	d112      	bne.n	8005eb8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e92:	4b9d      	ldr	r3, [pc, #628]	; (8006108 <HAL_RCC_OscConfig+0x2ac>)
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e9e:	d10b      	bne.n	8005eb8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ea0:	4b99      	ldr	r3, [pc, #612]	; (8006108 <HAL_RCC_OscConfig+0x2ac>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d05b      	beq.n	8005f64 <HAL_RCC_OscConfig+0x108>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d157      	bne.n	8005f64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	e236      	b.n	8006326 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ec0:	d106      	bne.n	8005ed0 <HAL_RCC_OscConfig+0x74>
 8005ec2:	4b91      	ldr	r3, [pc, #580]	; (8006108 <HAL_RCC_OscConfig+0x2ac>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a90      	ldr	r2, [pc, #576]	; (8006108 <HAL_RCC_OscConfig+0x2ac>)
 8005ec8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ecc:	6013      	str	r3, [r2, #0]
 8005ece:	e01d      	b.n	8005f0c <HAL_RCC_OscConfig+0xb0>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ed8:	d10c      	bne.n	8005ef4 <HAL_RCC_OscConfig+0x98>
 8005eda:	4b8b      	ldr	r3, [pc, #556]	; (8006108 <HAL_RCC_OscConfig+0x2ac>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a8a      	ldr	r2, [pc, #552]	; (8006108 <HAL_RCC_OscConfig+0x2ac>)
 8005ee0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ee4:	6013      	str	r3, [r2, #0]
 8005ee6:	4b88      	ldr	r3, [pc, #544]	; (8006108 <HAL_RCC_OscConfig+0x2ac>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a87      	ldr	r2, [pc, #540]	; (8006108 <HAL_RCC_OscConfig+0x2ac>)
 8005eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ef0:	6013      	str	r3, [r2, #0]
 8005ef2:	e00b      	b.n	8005f0c <HAL_RCC_OscConfig+0xb0>
 8005ef4:	4b84      	ldr	r3, [pc, #528]	; (8006108 <HAL_RCC_OscConfig+0x2ac>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a83      	ldr	r2, [pc, #524]	; (8006108 <HAL_RCC_OscConfig+0x2ac>)
 8005efa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005efe:	6013      	str	r3, [r2, #0]
 8005f00:	4b81      	ldr	r3, [pc, #516]	; (8006108 <HAL_RCC_OscConfig+0x2ac>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a80      	ldr	r2, [pc, #512]	; (8006108 <HAL_RCC_OscConfig+0x2ac>)
 8005f06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d013      	beq.n	8005f3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f14:	f7fd fc92 	bl	800383c <HAL_GetTick>
 8005f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f1a:	e008      	b.n	8005f2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f1c:	f7fd fc8e 	bl	800383c <HAL_GetTick>
 8005f20:	4602      	mov	r2, r0
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	1ad3      	subs	r3, r2, r3
 8005f26:	2b64      	cmp	r3, #100	; 0x64
 8005f28:	d901      	bls.n	8005f2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005f2a:	2303      	movs	r3, #3
 8005f2c:	e1fb      	b.n	8006326 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f2e:	4b76      	ldr	r3, [pc, #472]	; (8006108 <HAL_RCC_OscConfig+0x2ac>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d0f0      	beq.n	8005f1c <HAL_RCC_OscConfig+0xc0>
 8005f3a:	e014      	b.n	8005f66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f3c:	f7fd fc7e 	bl	800383c <HAL_GetTick>
 8005f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f42:	e008      	b.n	8005f56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f44:	f7fd fc7a 	bl	800383c <HAL_GetTick>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	1ad3      	subs	r3, r2, r3
 8005f4e:	2b64      	cmp	r3, #100	; 0x64
 8005f50:	d901      	bls.n	8005f56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f52:	2303      	movs	r3, #3
 8005f54:	e1e7      	b.n	8006326 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f56:	4b6c      	ldr	r3, [pc, #432]	; (8006108 <HAL_RCC_OscConfig+0x2ac>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d1f0      	bne.n	8005f44 <HAL_RCC_OscConfig+0xe8>
 8005f62:	e000      	b.n	8005f66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f003 0302 	and.w	r3, r3, #2
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d063      	beq.n	800603a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f72:	4b65      	ldr	r3, [pc, #404]	; (8006108 <HAL_RCC_OscConfig+0x2ac>)
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	f003 030c 	and.w	r3, r3, #12
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d00b      	beq.n	8005f96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f7e:	4b62      	ldr	r3, [pc, #392]	; (8006108 <HAL_RCC_OscConfig+0x2ac>)
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f86:	2b08      	cmp	r3, #8
 8005f88:	d11c      	bne.n	8005fc4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f8a:	4b5f      	ldr	r3, [pc, #380]	; (8006108 <HAL_RCC_OscConfig+0x2ac>)
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d116      	bne.n	8005fc4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f96:	4b5c      	ldr	r3, [pc, #368]	; (8006108 <HAL_RCC_OscConfig+0x2ac>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 0302 	and.w	r3, r3, #2
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d005      	beq.n	8005fae <HAL_RCC_OscConfig+0x152>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	68db      	ldr	r3, [r3, #12]
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d001      	beq.n	8005fae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	e1bb      	b.n	8006326 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fae:	4b56      	ldr	r3, [pc, #344]	; (8006108 <HAL_RCC_OscConfig+0x2ac>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	691b      	ldr	r3, [r3, #16]
 8005fba:	00db      	lsls	r3, r3, #3
 8005fbc:	4952      	ldr	r1, [pc, #328]	; (8006108 <HAL_RCC_OscConfig+0x2ac>)
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005fc2:	e03a      	b.n	800603a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d020      	beq.n	800600e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005fcc:	4b4f      	ldr	r3, [pc, #316]	; (800610c <HAL_RCC_OscConfig+0x2b0>)
 8005fce:	2201      	movs	r2, #1
 8005fd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fd2:	f7fd fc33 	bl	800383c <HAL_GetTick>
 8005fd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fd8:	e008      	b.n	8005fec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005fda:	f7fd fc2f 	bl	800383c <HAL_GetTick>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	1ad3      	subs	r3, r2, r3
 8005fe4:	2b02      	cmp	r3, #2
 8005fe6:	d901      	bls.n	8005fec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005fe8:	2303      	movs	r3, #3
 8005fea:	e19c      	b.n	8006326 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fec:	4b46      	ldr	r3, [pc, #280]	; (8006108 <HAL_RCC_OscConfig+0x2ac>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f003 0302 	and.w	r3, r3, #2
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d0f0      	beq.n	8005fda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ff8:	4b43      	ldr	r3, [pc, #268]	; (8006108 <HAL_RCC_OscConfig+0x2ac>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	691b      	ldr	r3, [r3, #16]
 8006004:	00db      	lsls	r3, r3, #3
 8006006:	4940      	ldr	r1, [pc, #256]	; (8006108 <HAL_RCC_OscConfig+0x2ac>)
 8006008:	4313      	orrs	r3, r2
 800600a:	600b      	str	r3, [r1, #0]
 800600c:	e015      	b.n	800603a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800600e:	4b3f      	ldr	r3, [pc, #252]	; (800610c <HAL_RCC_OscConfig+0x2b0>)
 8006010:	2200      	movs	r2, #0
 8006012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006014:	f7fd fc12 	bl	800383c <HAL_GetTick>
 8006018:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800601a:	e008      	b.n	800602e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800601c:	f7fd fc0e 	bl	800383c <HAL_GetTick>
 8006020:	4602      	mov	r2, r0
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	1ad3      	subs	r3, r2, r3
 8006026:	2b02      	cmp	r3, #2
 8006028:	d901      	bls.n	800602e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800602a:	2303      	movs	r3, #3
 800602c:	e17b      	b.n	8006326 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800602e:	4b36      	ldr	r3, [pc, #216]	; (8006108 <HAL_RCC_OscConfig+0x2ac>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f003 0302 	and.w	r3, r3, #2
 8006036:	2b00      	cmp	r3, #0
 8006038:	d1f0      	bne.n	800601c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f003 0308 	and.w	r3, r3, #8
 8006042:	2b00      	cmp	r3, #0
 8006044:	d030      	beq.n	80060a8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	695b      	ldr	r3, [r3, #20]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d016      	beq.n	800607c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800604e:	4b30      	ldr	r3, [pc, #192]	; (8006110 <HAL_RCC_OscConfig+0x2b4>)
 8006050:	2201      	movs	r2, #1
 8006052:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006054:	f7fd fbf2 	bl	800383c <HAL_GetTick>
 8006058:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800605a:	e008      	b.n	800606e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800605c:	f7fd fbee 	bl	800383c <HAL_GetTick>
 8006060:	4602      	mov	r2, r0
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	1ad3      	subs	r3, r2, r3
 8006066:	2b02      	cmp	r3, #2
 8006068:	d901      	bls.n	800606e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800606a:	2303      	movs	r3, #3
 800606c:	e15b      	b.n	8006326 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800606e:	4b26      	ldr	r3, [pc, #152]	; (8006108 <HAL_RCC_OscConfig+0x2ac>)
 8006070:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006072:	f003 0302 	and.w	r3, r3, #2
 8006076:	2b00      	cmp	r3, #0
 8006078:	d0f0      	beq.n	800605c <HAL_RCC_OscConfig+0x200>
 800607a:	e015      	b.n	80060a8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800607c:	4b24      	ldr	r3, [pc, #144]	; (8006110 <HAL_RCC_OscConfig+0x2b4>)
 800607e:	2200      	movs	r2, #0
 8006080:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006082:	f7fd fbdb 	bl	800383c <HAL_GetTick>
 8006086:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006088:	e008      	b.n	800609c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800608a:	f7fd fbd7 	bl	800383c <HAL_GetTick>
 800608e:	4602      	mov	r2, r0
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	1ad3      	subs	r3, r2, r3
 8006094:	2b02      	cmp	r3, #2
 8006096:	d901      	bls.n	800609c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006098:	2303      	movs	r3, #3
 800609a:	e144      	b.n	8006326 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800609c:	4b1a      	ldr	r3, [pc, #104]	; (8006108 <HAL_RCC_OscConfig+0x2ac>)
 800609e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060a0:	f003 0302 	and.w	r3, r3, #2
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d1f0      	bne.n	800608a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f003 0304 	and.w	r3, r3, #4
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	f000 80a0 	beq.w	80061f6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80060b6:	2300      	movs	r3, #0
 80060b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80060ba:	4b13      	ldr	r3, [pc, #76]	; (8006108 <HAL_RCC_OscConfig+0x2ac>)
 80060bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d10f      	bne.n	80060e6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80060c6:	2300      	movs	r3, #0
 80060c8:	60bb      	str	r3, [r7, #8]
 80060ca:	4b0f      	ldr	r3, [pc, #60]	; (8006108 <HAL_RCC_OscConfig+0x2ac>)
 80060cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ce:	4a0e      	ldr	r2, [pc, #56]	; (8006108 <HAL_RCC_OscConfig+0x2ac>)
 80060d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060d4:	6413      	str	r3, [r2, #64]	; 0x40
 80060d6:	4b0c      	ldr	r3, [pc, #48]	; (8006108 <HAL_RCC_OscConfig+0x2ac>)
 80060d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060de:	60bb      	str	r3, [r7, #8]
 80060e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80060e2:	2301      	movs	r3, #1
 80060e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060e6:	4b0b      	ldr	r3, [pc, #44]	; (8006114 <HAL_RCC_OscConfig+0x2b8>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d121      	bne.n	8006136 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80060f2:	4b08      	ldr	r3, [pc, #32]	; (8006114 <HAL_RCC_OscConfig+0x2b8>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a07      	ldr	r2, [pc, #28]	; (8006114 <HAL_RCC_OscConfig+0x2b8>)
 80060f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060fe:	f7fd fb9d 	bl	800383c <HAL_GetTick>
 8006102:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006104:	e011      	b.n	800612a <HAL_RCC_OscConfig+0x2ce>
 8006106:	bf00      	nop
 8006108:	40023800 	.word	0x40023800
 800610c:	42470000 	.word	0x42470000
 8006110:	42470e80 	.word	0x42470e80
 8006114:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006118:	f7fd fb90 	bl	800383c <HAL_GetTick>
 800611c:	4602      	mov	r2, r0
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	1ad3      	subs	r3, r2, r3
 8006122:	2b02      	cmp	r3, #2
 8006124:	d901      	bls.n	800612a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006126:	2303      	movs	r3, #3
 8006128:	e0fd      	b.n	8006326 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800612a:	4b81      	ldr	r3, [pc, #516]	; (8006330 <HAL_RCC_OscConfig+0x4d4>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006132:	2b00      	cmp	r3, #0
 8006134:	d0f0      	beq.n	8006118 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	2b01      	cmp	r3, #1
 800613c:	d106      	bne.n	800614c <HAL_RCC_OscConfig+0x2f0>
 800613e:	4b7d      	ldr	r3, [pc, #500]	; (8006334 <HAL_RCC_OscConfig+0x4d8>)
 8006140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006142:	4a7c      	ldr	r2, [pc, #496]	; (8006334 <HAL_RCC_OscConfig+0x4d8>)
 8006144:	f043 0301 	orr.w	r3, r3, #1
 8006148:	6713      	str	r3, [r2, #112]	; 0x70
 800614a:	e01c      	b.n	8006186 <HAL_RCC_OscConfig+0x32a>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	2b05      	cmp	r3, #5
 8006152:	d10c      	bne.n	800616e <HAL_RCC_OscConfig+0x312>
 8006154:	4b77      	ldr	r3, [pc, #476]	; (8006334 <HAL_RCC_OscConfig+0x4d8>)
 8006156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006158:	4a76      	ldr	r2, [pc, #472]	; (8006334 <HAL_RCC_OscConfig+0x4d8>)
 800615a:	f043 0304 	orr.w	r3, r3, #4
 800615e:	6713      	str	r3, [r2, #112]	; 0x70
 8006160:	4b74      	ldr	r3, [pc, #464]	; (8006334 <HAL_RCC_OscConfig+0x4d8>)
 8006162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006164:	4a73      	ldr	r2, [pc, #460]	; (8006334 <HAL_RCC_OscConfig+0x4d8>)
 8006166:	f043 0301 	orr.w	r3, r3, #1
 800616a:	6713      	str	r3, [r2, #112]	; 0x70
 800616c:	e00b      	b.n	8006186 <HAL_RCC_OscConfig+0x32a>
 800616e:	4b71      	ldr	r3, [pc, #452]	; (8006334 <HAL_RCC_OscConfig+0x4d8>)
 8006170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006172:	4a70      	ldr	r2, [pc, #448]	; (8006334 <HAL_RCC_OscConfig+0x4d8>)
 8006174:	f023 0301 	bic.w	r3, r3, #1
 8006178:	6713      	str	r3, [r2, #112]	; 0x70
 800617a:	4b6e      	ldr	r3, [pc, #440]	; (8006334 <HAL_RCC_OscConfig+0x4d8>)
 800617c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800617e:	4a6d      	ldr	r2, [pc, #436]	; (8006334 <HAL_RCC_OscConfig+0x4d8>)
 8006180:	f023 0304 	bic.w	r3, r3, #4
 8006184:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d015      	beq.n	80061ba <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800618e:	f7fd fb55 	bl	800383c <HAL_GetTick>
 8006192:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006194:	e00a      	b.n	80061ac <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006196:	f7fd fb51 	bl	800383c <HAL_GetTick>
 800619a:	4602      	mov	r2, r0
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	1ad3      	subs	r3, r2, r3
 80061a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d901      	bls.n	80061ac <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80061a8:	2303      	movs	r3, #3
 80061aa:	e0bc      	b.n	8006326 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061ac:	4b61      	ldr	r3, [pc, #388]	; (8006334 <HAL_RCC_OscConfig+0x4d8>)
 80061ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061b0:	f003 0302 	and.w	r3, r3, #2
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d0ee      	beq.n	8006196 <HAL_RCC_OscConfig+0x33a>
 80061b8:	e014      	b.n	80061e4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061ba:	f7fd fb3f 	bl	800383c <HAL_GetTick>
 80061be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061c0:	e00a      	b.n	80061d8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061c2:	f7fd fb3b 	bl	800383c <HAL_GetTick>
 80061c6:	4602      	mov	r2, r0
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	1ad3      	subs	r3, r2, r3
 80061cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d901      	bls.n	80061d8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80061d4:	2303      	movs	r3, #3
 80061d6:	e0a6      	b.n	8006326 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061d8:	4b56      	ldr	r3, [pc, #344]	; (8006334 <HAL_RCC_OscConfig+0x4d8>)
 80061da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061dc:	f003 0302 	and.w	r3, r3, #2
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d1ee      	bne.n	80061c2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80061e4:	7dfb      	ldrb	r3, [r7, #23]
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d105      	bne.n	80061f6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061ea:	4b52      	ldr	r3, [pc, #328]	; (8006334 <HAL_RCC_OscConfig+0x4d8>)
 80061ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ee:	4a51      	ldr	r2, [pc, #324]	; (8006334 <HAL_RCC_OscConfig+0x4d8>)
 80061f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061f4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	699b      	ldr	r3, [r3, #24]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	f000 8092 	beq.w	8006324 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006200:	4b4c      	ldr	r3, [pc, #304]	; (8006334 <HAL_RCC_OscConfig+0x4d8>)
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	f003 030c 	and.w	r3, r3, #12
 8006208:	2b08      	cmp	r3, #8
 800620a:	d05c      	beq.n	80062c6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	699b      	ldr	r3, [r3, #24]
 8006210:	2b02      	cmp	r3, #2
 8006212:	d141      	bne.n	8006298 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006214:	4b48      	ldr	r3, [pc, #288]	; (8006338 <HAL_RCC_OscConfig+0x4dc>)
 8006216:	2200      	movs	r2, #0
 8006218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800621a:	f7fd fb0f 	bl	800383c <HAL_GetTick>
 800621e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006220:	e008      	b.n	8006234 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006222:	f7fd fb0b 	bl	800383c <HAL_GetTick>
 8006226:	4602      	mov	r2, r0
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	1ad3      	subs	r3, r2, r3
 800622c:	2b02      	cmp	r3, #2
 800622e:	d901      	bls.n	8006234 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006230:	2303      	movs	r3, #3
 8006232:	e078      	b.n	8006326 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006234:	4b3f      	ldr	r3, [pc, #252]	; (8006334 <HAL_RCC_OscConfig+0x4d8>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800623c:	2b00      	cmp	r3, #0
 800623e:	d1f0      	bne.n	8006222 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	69da      	ldr	r2, [r3, #28]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6a1b      	ldr	r3, [r3, #32]
 8006248:	431a      	orrs	r2, r3
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800624e:	019b      	lsls	r3, r3, #6
 8006250:	431a      	orrs	r2, r3
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006256:	085b      	lsrs	r3, r3, #1
 8006258:	3b01      	subs	r3, #1
 800625a:	041b      	lsls	r3, r3, #16
 800625c:	431a      	orrs	r2, r3
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006262:	061b      	lsls	r3, r3, #24
 8006264:	4933      	ldr	r1, [pc, #204]	; (8006334 <HAL_RCC_OscConfig+0x4d8>)
 8006266:	4313      	orrs	r3, r2
 8006268:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800626a:	4b33      	ldr	r3, [pc, #204]	; (8006338 <HAL_RCC_OscConfig+0x4dc>)
 800626c:	2201      	movs	r2, #1
 800626e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006270:	f7fd fae4 	bl	800383c <HAL_GetTick>
 8006274:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006276:	e008      	b.n	800628a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006278:	f7fd fae0 	bl	800383c <HAL_GetTick>
 800627c:	4602      	mov	r2, r0
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	2b02      	cmp	r3, #2
 8006284:	d901      	bls.n	800628a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006286:	2303      	movs	r3, #3
 8006288:	e04d      	b.n	8006326 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800628a:	4b2a      	ldr	r3, [pc, #168]	; (8006334 <HAL_RCC_OscConfig+0x4d8>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006292:	2b00      	cmp	r3, #0
 8006294:	d0f0      	beq.n	8006278 <HAL_RCC_OscConfig+0x41c>
 8006296:	e045      	b.n	8006324 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006298:	4b27      	ldr	r3, [pc, #156]	; (8006338 <HAL_RCC_OscConfig+0x4dc>)
 800629a:	2200      	movs	r2, #0
 800629c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800629e:	f7fd facd 	bl	800383c <HAL_GetTick>
 80062a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062a4:	e008      	b.n	80062b8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062a6:	f7fd fac9 	bl	800383c <HAL_GetTick>
 80062aa:	4602      	mov	r2, r0
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	1ad3      	subs	r3, r2, r3
 80062b0:	2b02      	cmp	r3, #2
 80062b2:	d901      	bls.n	80062b8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80062b4:	2303      	movs	r3, #3
 80062b6:	e036      	b.n	8006326 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062b8:	4b1e      	ldr	r3, [pc, #120]	; (8006334 <HAL_RCC_OscConfig+0x4d8>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d1f0      	bne.n	80062a6 <HAL_RCC_OscConfig+0x44a>
 80062c4:	e02e      	b.n	8006324 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	699b      	ldr	r3, [r3, #24]
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d101      	bne.n	80062d2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e029      	b.n	8006326 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80062d2:	4b18      	ldr	r3, [pc, #96]	; (8006334 <HAL_RCC_OscConfig+0x4d8>)
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	69db      	ldr	r3, [r3, #28]
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d11c      	bne.n	8006320 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d115      	bne.n	8006320 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80062f4:	68fa      	ldr	r2, [r7, #12]
 80062f6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80062fa:	4013      	ands	r3, r2
 80062fc:	687a      	ldr	r2, [r7, #4]
 80062fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006300:	4293      	cmp	r3, r2
 8006302:	d10d      	bne.n	8006320 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800630e:	429a      	cmp	r2, r3
 8006310:	d106      	bne.n	8006320 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800631c:	429a      	cmp	r2, r3
 800631e:	d001      	beq.n	8006324 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8006320:	2301      	movs	r3, #1
 8006322:	e000      	b.n	8006326 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006324:	2300      	movs	r3, #0
}
 8006326:	4618      	mov	r0, r3
 8006328:	3718      	adds	r7, #24
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
 800632e:	bf00      	nop
 8006330:	40007000 	.word	0x40007000
 8006334:	40023800 	.word	0x40023800
 8006338:	42470060 	.word	0x42470060

0800633c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b084      	sub	sp, #16
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d101      	bne.n	8006350 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	e0cc      	b.n	80064ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006350:	4b68      	ldr	r3, [pc, #416]	; (80064f4 <HAL_RCC_ClockConfig+0x1b8>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 030f 	and.w	r3, r3, #15
 8006358:	683a      	ldr	r2, [r7, #0]
 800635a:	429a      	cmp	r2, r3
 800635c:	d90c      	bls.n	8006378 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800635e:	4b65      	ldr	r3, [pc, #404]	; (80064f4 <HAL_RCC_ClockConfig+0x1b8>)
 8006360:	683a      	ldr	r2, [r7, #0]
 8006362:	b2d2      	uxtb	r2, r2
 8006364:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006366:	4b63      	ldr	r3, [pc, #396]	; (80064f4 <HAL_RCC_ClockConfig+0x1b8>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f003 030f 	and.w	r3, r3, #15
 800636e:	683a      	ldr	r2, [r7, #0]
 8006370:	429a      	cmp	r2, r3
 8006372:	d001      	beq.n	8006378 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	e0b8      	b.n	80064ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f003 0302 	and.w	r3, r3, #2
 8006380:	2b00      	cmp	r3, #0
 8006382:	d020      	beq.n	80063c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f003 0304 	and.w	r3, r3, #4
 800638c:	2b00      	cmp	r3, #0
 800638e:	d005      	beq.n	800639c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006390:	4b59      	ldr	r3, [pc, #356]	; (80064f8 <HAL_RCC_ClockConfig+0x1bc>)
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	4a58      	ldr	r2, [pc, #352]	; (80064f8 <HAL_RCC_ClockConfig+0x1bc>)
 8006396:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800639a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f003 0308 	and.w	r3, r3, #8
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d005      	beq.n	80063b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80063a8:	4b53      	ldr	r3, [pc, #332]	; (80064f8 <HAL_RCC_ClockConfig+0x1bc>)
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	4a52      	ldr	r2, [pc, #328]	; (80064f8 <HAL_RCC_ClockConfig+0x1bc>)
 80063ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80063b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063b4:	4b50      	ldr	r3, [pc, #320]	; (80064f8 <HAL_RCC_ClockConfig+0x1bc>)
 80063b6:	689b      	ldr	r3, [r3, #8]
 80063b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	494d      	ldr	r1, [pc, #308]	; (80064f8 <HAL_RCC_ClockConfig+0x1bc>)
 80063c2:	4313      	orrs	r3, r2
 80063c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f003 0301 	and.w	r3, r3, #1
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d044      	beq.n	800645c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d107      	bne.n	80063ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063da:	4b47      	ldr	r3, [pc, #284]	; (80064f8 <HAL_RCC_ClockConfig+0x1bc>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d119      	bne.n	800641a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	e07f      	b.n	80064ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	2b02      	cmp	r3, #2
 80063f0:	d003      	beq.n	80063fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80063f6:	2b03      	cmp	r3, #3
 80063f8:	d107      	bne.n	800640a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063fa:	4b3f      	ldr	r3, [pc, #252]	; (80064f8 <HAL_RCC_ClockConfig+0x1bc>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006402:	2b00      	cmp	r3, #0
 8006404:	d109      	bne.n	800641a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	e06f      	b.n	80064ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800640a:	4b3b      	ldr	r3, [pc, #236]	; (80064f8 <HAL_RCC_ClockConfig+0x1bc>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f003 0302 	and.w	r3, r3, #2
 8006412:	2b00      	cmp	r3, #0
 8006414:	d101      	bne.n	800641a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	e067      	b.n	80064ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800641a:	4b37      	ldr	r3, [pc, #220]	; (80064f8 <HAL_RCC_ClockConfig+0x1bc>)
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	f023 0203 	bic.w	r2, r3, #3
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	4934      	ldr	r1, [pc, #208]	; (80064f8 <HAL_RCC_ClockConfig+0x1bc>)
 8006428:	4313      	orrs	r3, r2
 800642a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800642c:	f7fd fa06 	bl	800383c <HAL_GetTick>
 8006430:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006432:	e00a      	b.n	800644a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006434:	f7fd fa02 	bl	800383c <HAL_GetTick>
 8006438:	4602      	mov	r2, r0
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	1ad3      	subs	r3, r2, r3
 800643e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006442:	4293      	cmp	r3, r2
 8006444:	d901      	bls.n	800644a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006446:	2303      	movs	r3, #3
 8006448:	e04f      	b.n	80064ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800644a:	4b2b      	ldr	r3, [pc, #172]	; (80064f8 <HAL_RCC_ClockConfig+0x1bc>)
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	f003 020c 	and.w	r2, r3, #12
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	429a      	cmp	r2, r3
 800645a:	d1eb      	bne.n	8006434 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800645c:	4b25      	ldr	r3, [pc, #148]	; (80064f4 <HAL_RCC_ClockConfig+0x1b8>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f003 030f 	and.w	r3, r3, #15
 8006464:	683a      	ldr	r2, [r7, #0]
 8006466:	429a      	cmp	r2, r3
 8006468:	d20c      	bcs.n	8006484 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800646a:	4b22      	ldr	r3, [pc, #136]	; (80064f4 <HAL_RCC_ClockConfig+0x1b8>)
 800646c:	683a      	ldr	r2, [r7, #0]
 800646e:	b2d2      	uxtb	r2, r2
 8006470:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006472:	4b20      	ldr	r3, [pc, #128]	; (80064f4 <HAL_RCC_ClockConfig+0x1b8>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f003 030f 	and.w	r3, r3, #15
 800647a:	683a      	ldr	r2, [r7, #0]
 800647c:	429a      	cmp	r2, r3
 800647e:	d001      	beq.n	8006484 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006480:	2301      	movs	r3, #1
 8006482:	e032      	b.n	80064ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f003 0304 	and.w	r3, r3, #4
 800648c:	2b00      	cmp	r3, #0
 800648e:	d008      	beq.n	80064a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006490:	4b19      	ldr	r3, [pc, #100]	; (80064f8 <HAL_RCC_ClockConfig+0x1bc>)
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	4916      	ldr	r1, [pc, #88]	; (80064f8 <HAL_RCC_ClockConfig+0x1bc>)
 800649e:	4313      	orrs	r3, r2
 80064a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f003 0308 	and.w	r3, r3, #8
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d009      	beq.n	80064c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80064ae:	4b12      	ldr	r3, [pc, #72]	; (80064f8 <HAL_RCC_ClockConfig+0x1bc>)
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	691b      	ldr	r3, [r3, #16]
 80064ba:	00db      	lsls	r3, r3, #3
 80064bc:	490e      	ldr	r1, [pc, #56]	; (80064f8 <HAL_RCC_ClockConfig+0x1bc>)
 80064be:	4313      	orrs	r3, r2
 80064c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80064c2:	f000 f821 	bl	8006508 <HAL_RCC_GetSysClockFreq>
 80064c6:	4601      	mov	r1, r0
 80064c8:	4b0b      	ldr	r3, [pc, #44]	; (80064f8 <HAL_RCC_ClockConfig+0x1bc>)
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	091b      	lsrs	r3, r3, #4
 80064ce:	f003 030f 	and.w	r3, r3, #15
 80064d2:	4a0a      	ldr	r2, [pc, #40]	; (80064fc <HAL_RCC_ClockConfig+0x1c0>)
 80064d4:	5cd3      	ldrb	r3, [r2, r3]
 80064d6:	fa21 f303 	lsr.w	r3, r1, r3
 80064da:	4a09      	ldr	r2, [pc, #36]	; (8006500 <HAL_RCC_ClockConfig+0x1c4>)
 80064dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80064de:	4b09      	ldr	r3, [pc, #36]	; (8006504 <HAL_RCC_ClockConfig+0x1c8>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4618      	mov	r0, r3
 80064e4:	f7fd f966 	bl	80037b4 <HAL_InitTick>

  return HAL_OK;
 80064e8:	2300      	movs	r3, #0
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3710      	adds	r7, #16
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
 80064f2:	bf00      	nop
 80064f4:	40023c00 	.word	0x40023c00
 80064f8:	40023800 	.word	0x40023800
 80064fc:	0800bdc0 	.word	0x0800bdc0
 8006500:	20000048 	.word	0x20000048
 8006504:	2000004c 	.word	0x2000004c

08006508 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800650a:	b085      	sub	sp, #20
 800650c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800650e:	2300      	movs	r3, #0
 8006510:	607b      	str	r3, [r7, #4]
 8006512:	2300      	movs	r3, #0
 8006514:	60fb      	str	r3, [r7, #12]
 8006516:	2300      	movs	r3, #0
 8006518:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800651a:	2300      	movs	r3, #0
 800651c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800651e:	4b63      	ldr	r3, [pc, #396]	; (80066ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	f003 030c 	and.w	r3, r3, #12
 8006526:	2b04      	cmp	r3, #4
 8006528:	d007      	beq.n	800653a <HAL_RCC_GetSysClockFreq+0x32>
 800652a:	2b08      	cmp	r3, #8
 800652c:	d008      	beq.n	8006540 <HAL_RCC_GetSysClockFreq+0x38>
 800652e:	2b00      	cmp	r3, #0
 8006530:	f040 80b4 	bne.w	800669c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006534:	4b5e      	ldr	r3, [pc, #376]	; (80066b0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006536:	60bb      	str	r3, [r7, #8]
       break;
 8006538:	e0b3      	b.n	80066a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800653a:	4b5e      	ldr	r3, [pc, #376]	; (80066b4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800653c:	60bb      	str	r3, [r7, #8]
      break;
 800653e:	e0b0      	b.n	80066a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006540:	4b5a      	ldr	r3, [pc, #360]	; (80066ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006548:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800654a:	4b58      	ldr	r3, [pc, #352]	; (80066ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006552:	2b00      	cmp	r3, #0
 8006554:	d04a      	beq.n	80065ec <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006556:	4b55      	ldr	r3, [pc, #340]	; (80066ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	099b      	lsrs	r3, r3, #6
 800655c:	f04f 0400 	mov.w	r4, #0
 8006560:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006564:	f04f 0200 	mov.w	r2, #0
 8006568:	ea03 0501 	and.w	r5, r3, r1
 800656c:	ea04 0602 	and.w	r6, r4, r2
 8006570:	4629      	mov	r1, r5
 8006572:	4632      	mov	r2, r6
 8006574:	f04f 0300 	mov.w	r3, #0
 8006578:	f04f 0400 	mov.w	r4, #0
 800657c:	0154      	lsls	r4, r2, #5
 800657e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006582:	014b      	lsls	r3, r1, #5
 8006584:	4619      	mov	r1, r3
 8006586:	4622      	mov	r2, r4
 8006588:	1b49      	subs	r1, r1, r5
 800658a:	eb62 0206 	sbc.w	r2, r2, r6
 800658e:	f04f 0300 	mov.w	r3, #0
 8006592:	f04f 0400 	mov.w	r4, #0
 8006596:	0194      	lsls	r4, r2, #6
 8006598:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800659c:	018b      	lsls	r3, r1, #6
 800659e:	1a5b      	subs	r3, r3, r1
 80065a0:	eb64 0402 	sbc.w	r4, r4, r2
 80065a4:	f04f 0100 	mov.w	r1, #0
 80065a8:	f04f 0200 	mov.w	r2, #0
 80065ac:	00e2      	lsls	r2, r4, #3
 80065ae:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80065b2:	00d9      	lsls	r1, r3, #3
 80065b4:	460b      	mov	r3, r1
 80065b6:	4614      	mov	r4, r2
 80065b8:	195b      	adds	r3, r3, r5
 80065ba:	eb44 0406 	adc.w	r4, r4, r6
 80065be:	f04f 0100 	mov.w	r1, #0
 80065c2:	f04f 0200 	mov.w	r2, #0
 80065c6:	0262      	lsls	r2, r4, #9
 80065c8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80065cc:	0259      	lsls	r1, r3, #9
 80065ce:	460b      	mov	r3, r1
 80065d0:	4614      	mov	r4, r2
 80065d2:	4618      	mov	r0, r3
 80065d4:	4621      	mov	r1, r4
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f04f 0400 	mov.w	r4, #0
 80065dc:	461a      	mov	r2, r3
 80065de:	4623      	mov	r3, r4
 80065e0:	f7fa fb5a 	bl	8000c98 <__aeabi_uldivmod>
 80065e4:	4603      	mov	r3, r0
 80065e6:	460c      	mov	r4, r1
 80065e8:	60fb      	str	r3, [r7, #12]
 80065ea:	e049      	b.n	8006680 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065ec:	4b2f      	ldr	r3, [pc, #188]	; (80066ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	099b      	lsrs	r3, r3, #6
 80065f2:	f04f 0400 	mov.w	r4, #0
 80065f6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80065fa:	f04f 0200 	mov.w	r2, #0
 80065fe:	ea03 0501 	and.w	r5, r3, r1
 8006602:	ea04 0602 	and.w	r6, r4, r2
 8006606:	4629      	mov	r1, r5
 8006608:	4632      	mov	r2, r6
 800660a:	f04f 0300 	mov.w	r3, #0
 800660e:	f04f 0400 	mov.w	r4, #0
 8006612:	0154      	lsls	r4, r2, #5
 8006614:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006618:	014b      	lsls	r3, r1, #5
 800661a:	4619      	mov	r1, r3
 800661c:	4622      	mov	r2, r4
 800661e:	1b49      	subs	r1, r1, r5
 8006620:	eb62 0206 	sbc.w	r2, r2, r6
 8006624:	f04f 0300 	mov.w	r3, #0
 8006628:	f04f 0400 	mov.w	r4, #0
 800662c:	0194      	lsls	r4, r2, #6
 800662e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006632:	018b      	lsls	r3, r1, #6
 8006634:	1a5b      	subs	r3, r3, r1
 8006636:	eb64 0402 	sbc.w	r4, r4, r2
 800663a:	f04f 0100 	mov.w	r1, #0
 800663e:	f04f 0200 	mov.w	r2, #0
 8006642:	00e2      	lsls	r2, r4, #3
 8006644:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006648:	00d9      	lsls	r1, r3, #3
 800664a:	460b      	mov	r3, r1
 800664c:	4614      	mov	r4, r2
 800664e:	195b      	adds	r3, r3, r5
 8006650:	eb44 0406 	adc.w	r4, r4, r6
 8006654:	f04f 0100 	mov.w	r1, #0
 8006658:	f04f 0200 	mov.w	r2, #0
 800665c:	02a2      	lsls	r2, r4, #10
 800665e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006662:	0299      	lsls	r1, r3, #10
 8006664:	460b      	mov	r3, r1
 8006666:	4614      	mov	r4, r2
 8006668:	4618      	mov	r0, r3
 800666a:	4621      	mov	r1, r4
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f04f 0400 	mov.w	r4, #0
 8006672:	461a      	mov	r2, r3
 8006674:	4623      	mov	r3, r4
 8006676:	f7fa fb0f 	bl	8000c98 <__aeabi_uldivmod>
 800667a:	4603      	mov	r3, r0
 800667c:	460c      	mov	r4, r1
 800667e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006680:	4b0a      	ldr	r3, [pc, #40]	; (80066ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	0c1b      	lsrs	r3, r3, #16
 8006686:	f003 0303 	and.w	r3, r3, #3
 800668a:	3301      	adds	r3, #1
 800668c:	005b      	lsls	r3, r3, #1
 800668e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006690:	68fa      	ldr	r2, [r7, #12]
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	fbb2 f3f3 	udiv	r3, r2, r3
 8006698:	60bb      	str	r3, [r7, #8]
      break;
 800669a:	e002      	b.n	80066a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800669c:	4b04      	ldr	r3, [pc, #16]	; (80066b0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800669e:	60bb      	str	r3, [r7, #8]
      break;
 80066a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80066a2:	68bb      	ldr	r3, [r7, #8]
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3714      	adds	r7, #20
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066ac:	40023800 	.word	0x40023800
 80066b0:	00f42400 	.word	0x00f42400
 80066b4:	007a1200 	.word	0x007a1200

080066b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80066b8:	b480      	push	{r7}
 80066ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80066bc:	4b03      	ldr	r3, [pc, #12]	; (80066cc <HAL_RCC_GetHCLKFreq+0x14>)
 80066be:	681b      	ldr	r3, [r3, #0]
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr
 80066ca:	bf00      	nop
 80066cc:	20000048 	.word	0x20000048

080066d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80066d4:	f7ff fff0 	bl	80066b8 <HAL_RCC_GetHCLKFreq>
 80066d8:	4601      	mov	r1, r0
 80066da:	4b05      	ldr	r3, [pc, #20]	; (80066f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	0a9b      	lsrs	r3, r3, #10
 80066e0:	f003 0307 	and.w	r3, r3, #7
 80066e4:	4a03      	ldr	r2, [pc, #12]	; (80066f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80066e6:	5cd3      	ldrb	r3, [r2, r3]
 80066e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	bd80      	pop	{r7, pc}
 80066f0:	40023800 	.word	0x40023800
 80066f4:	0800bdd0 	.word	0x0800bdd0

080066f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80066fc:	f7ff ffdc 	bl	80066b8 <HAL_RCC_GetHCLKFreq>
 8006700:	4601      	mov	r1, r0
 8006702:	4b05      	ldr	r3, [pc, #20]	; (8006718 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	0b5b      	lsrs	r3, r3, #13
 8006708:	f003 0307 	and.w	r3, r3, #7
 800670c:	4a03      	ldr	r2, [pc, #12]	; (800671c <HAL_RCC_GetPCLK2Freq+0x24>)
 800670e:	5cd3      	ldrb	r3, [r2, r3]
 8006710:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006714:	4618      	mov	r0, r3
 8006716:	bd80      	pop	{r7, pc}
 8006718:	40023800 	.word	0x40023800
 800671c:	0800bdd0 	.word	0x0800bdd0

08006720 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b082      	sub	sp, #8
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d101      	bne.n	8006732 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	e01d      	b.n	800676e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006738:	b2db      	uxtb	r3, r3
 800673a:	2b00      	cmp	r3, #0
 800673c:	d106      	bne.n	800674c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2200      	movs	r2, #0
 8006742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f7fc fe90 	bl	800346c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2202      	movs	r2, #2
 8006750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	3304      	adds	r3, #4
 800675c:	4619      	mov	r1, r3
 800675e:	4610      	mov	r0, r2
 8006760:	f000 fbf6 	bl	8006f50 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2201      	movs	r2, #1
 8006768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800676c:	2300      	movs	r3, #0
}
 800676e:	4618      	mov	r0, r3
 8006770:	3708      	adds	r7, #8
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}

08006776 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006776:	b480      	push	{r7}
 8006778:	b085      	sub	sp, #20
 800677a:	af00      	add	r7, sp, #0
 800677c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	68da      	ldr	r2, [r3, #12]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f042 0201 	orr.w	r2, r2, #1
 800678c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	f003 0307 	and.w	r3, r3, #7
 8006798:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2b06      	cmp	r3, #6
 800679e:	d007      	beq.n	80067b0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f042 0201 	orr.w	r2, r2, #1
 80067ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80067b0:	2300      	movs	r3, #0
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3714      	adds	r7, #20
 80067b6:	46bd      	mov	sp, r7
 80067b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067bc:	4770      	bx	lr

080067be <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80067be:	b480      	push	{r7}
 80067c0:	b083      	sub	sp, #12
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	68da      	ldr	r2, [r3, #12]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f022 0201 	bic.w	r2, r2, #1
 80067d4:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	6a1a      	ldr	r2, [r3, #32]
 80067dc:	f241 1311 	movw	r3, #4369	; 0x1111
 80067e0:	4013      	ands	r3, r2
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d10f      	bne.n	8006806 <HAL_TIM_Base_Stop_IT+0x48>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	6a1a      	ldr	r2, [r3, #32]
 80067ec:	f240 4344 	movw	r3, #1092	; 0x444
 80067f0:	4013      	ands	r3, r2
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d107      	bne.n	8006806 <HAL_TIM_Base_Stop_IT+0x48>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f022 0201 	bic.w	r2, r2, #1
 8006804:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006806:	2300      	movs	r3, #0
}
 8006808:	4618      	mov	r0, r3
 800680a:	370c      	adds	r7, #12
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr

08006814 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b082      	sub	sp, #8
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d101      	bne.n	8006826 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	e01d      	b.n	8006862 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800682c:	b2db      	uxtb	r3, r3
 800682e:	2b00      	cmp	r3, #0
 8006830:	d106      	bne.n	8006840 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2200      	movs	r2, #0
 8006836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f7fc fdf4 	bl	8003428 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2202      	movs	r2, #2
 8006844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	3304      	adds	r3, #4
 8006850:	4619      	mov	r1, r3
 8006852:	4610      	mov	r0, r2
 8006854:	f000 fb7c 	bl	8006f50 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2201      	movs	r2, #1
 800685c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006860:	2300      	movs	r3, #0
}
 8006862:	4618      	mov	r0, r3
 8006864:	3708      	adds	r7, #8
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
	...

0800686c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b084      	sub	sp, #16
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	2201      	movs	r2, #1
 800687c:	6839      	ldr	r1, [r7, #0]
 800687e:	4618      	mov	r0, r3
 8006880:	f000 fe0c 	bl	800749c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a10      	ldr	r2, [pc, #64]	; (80068cc <HAL_TIM_PWM_Start+0x60>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d107      	bne.n	800689e <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800689c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	f003 0307 	and.w	r3, r3, #7
 80068a8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2b06      	cmp	r3, #6
 80068ae:	d007      	beq.n	80068c0 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	681a      	ldr	r2, [r3, #0]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f042 0201 	orr.w	r2, r2, #1
 80068be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3710      	adds	r7, #16
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	bf00      	nop
 80068cc:	40010000 	.word	0x40010000

080068d0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b086      	sub	sp, #24
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d101      	bne.n	80068e4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80068e0:	2301      	movs	r3, #1
 80068e2:	e083      	b.n	80069ec <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d106      	bne.n	80068fe <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f7fc fcfb 	bl	80032f4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2202      	movs	r2, #2
 8006902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	6812      	ldr	r2, [r2, #0]
 8006910:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006914:	f023 0307 	bic.w	r3, r3, #7
 8006918:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681a      	ldr	r2, [r3, #0]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	3304      	adds	r3, #4
 8006922:	4619      	mov	r1, r3
 8006924:	4610      	mov	r0, r2
 8006926:	f000 fb13 	bl	8006f50 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	699b      	ldr	r3, [r3, #24]
 8006938:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	6a1b      	ldr	r3, [r3, #32]
 8006940:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	697a      	ldr	r2, [r7, #20]
 8006948:	4313      	orrs	r3, r2
 800694a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006952:	f023 0303 	bic.w	r3, r3, #3
 8006956:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	689a      	ldr	r2, [r3, #8]
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	699b      	ldr	r3, [r3, #24]
 8006960:	021b      	lsls	r3, r3, #8
 8006962:	4313      	orrs	r3, r2
 8006964:	693a      	ldr	r2, [r7, #16]
 8006966:	4313      	orrs	r3, r2
 8006968:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006970:	f023 030c 	bic.w	r3, r3, #12
 8006974:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800697c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006980:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	68da      	ldr	r2, [r3, #12]
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	69db      	ldr	r3, [r3, #28]
 800698a:	021b      	lsls	r3, r3, #8
 800698c:	4313      	orrs	r3, r2
 800698e:	693a      	ldr	r2, [r7, #16]
 8006990:	4313      	orrs	r3, r2
 8006992:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	691b      	ldr	r3, [r3, #16]
 8006998:	011a      	lsls	r2, r3, #4
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	6a1b      	ldr	r3, [r3, #32]
 800699e:	031b      	lsls	r3, r3, #12
 80069a0:	4313      	orrs	r3, r2
 80069a2:	693a      	ldr	r2, [r7, #16]
 80069a4:	4313      	orrs	r3, r2
 80069a6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80069ae:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80069b6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	685a      	ldr	r2, [r3, #4]
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	695b      	ldr	r3, [r3, #20]
 80069c0:	011b      	lsls	r3, r3, #4
 80069c2:	4313      	orrs	r3, r2
 80069c4:	68fa      	ldr	r2, [r7, #12]
 80069c6:	4313      	orrs	r3, r2
 80069c8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	697a      	ldr	r2, [r7, #20]
 80069d0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	693a      	ldr	r2, [r7, #16]
 80069d8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	68fa      	ldr	r2, [r7, #12]
 80069e0:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2201      	movs	r2, #1
 80069e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069ea:	2300      	movs	r3, #0
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3718      	adds	r7, #24
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b082      	sub	sp, #8
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	f003 0302 	and.w	r3, r3, #2
 8006a06:	2b02      	cmp	r3, #2
 8006a08:	d122      	bne.n	8006a50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	f003 0302 	and.w	r3, r3, #2
 8006a14:	2b02      	cmp	r3, #2
 8006a16:	d11b      	bne.n	8006a50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f06f 0202 	mvn.w	r2, #2
 8006a20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2201      	movs	r2, #1
 8006a26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	699b      	ldr	r3, [r3, #24]
 8006a2e:	f003 0303 	and.w	r3, r3, #3
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d003      	beq.n	8006a3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f000 fa6b 	bl	8006f12 <HAL_TIM_IC_CaptureCallback>
 8006a3c:	e005      	b.n	8006a4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 fa5d 	bl	8006efe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f000 fa6e 	bl	8006f26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	691b      	ldr	r3, [r3, #16]
 8006a56:	f003 0304 	and.w	r3, r3, #4
 8006a5a:	2b04      	cmp	r3, #4
 8006a5c:	d122      	bne.n	8006aa4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	68db      	ldr	r3, [r3, #12]
 8006a64:	f003 0304 	and.w	r3, r3, #4
 8006a68:	2b04      	cmp	r3, #4
 8006a6a:	d11b      	bne.n	8006aa4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f06f 0204 	mvn.w	r2, #4
 8006a74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2202      	movs	r2, #2
 8006a7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	699b      	ldr	r3, [r3, #24]
 8006a82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d003      	beq.n	8006a92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 fa41 	bl	8006f12 <HAL_TIM_IC_CaptureCallback>
 8006a90:	e005      	b.n	8006a9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 fa33 	bl	8006efe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f000 fa44 	bl	8006f26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	691b      	ldr	r3, [r3, #16]
 8006aaa:	f003 0308 	and.w	r3, r3, #8
 8006aae:	2b08      	cmp	r3, #8
 8006ab0:	d122      	bne.n	8006af8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	68db      	ldr	r3, [r3, #12]
 8006ab8:	f003 0308 	and.w	r3, r3, #8
 8006abc:	2b08      	cmp	r3, #8
 8006abe:	d11b      	bne.n	8006af8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f06f 0208 	mvn.w	r2, #8
 8006ac8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2204      	movs	r2, #4
 8006ace:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	69db      	ldr	r3, [r3, #28]
 8006ad6:	f003 0303 	and.w	r3, r3, #3
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d003      	beq.n	8006ae6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 fa17 	bl	8006f12 <HAL_TIM_IC_CaptureCallback>
 8006ae4:	e005      	b.n	8006af2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 fa09 	bl	8006efe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f000 fa1a 	bl	8006f26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2200      	movs	r2, #0
 8006af6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	691b      	ldr	r3, [r3, #16]
 8006afe:	f003 0310 	and.w	r3, r3, #16
 8006b02:	2b10      	cmp	r3, #16
 8006b04:	d122      	bne.n	8006b4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	68db      	ldr	r3, [r3, #12]
 8006b0c:	f003 0310 	and.w	r3, r3, #16
 8006b10:	2b10      	cmp	r3, #16
 8006b12:	d11b      	bne.n	8006b4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f06f 0210 	mvn.w	r2, #16
 8006b1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2208      	movs	r2, #8
 8006b22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	69db      	ldr	r3, [r3, #28]
 8006b2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d003      	beq.n	8006b3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 f9ed 	bl	8006f12 <HAL_TIM_IC_CaptureCallback>
 8006b38:	e005      	b.n	8006b46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 f9df 	bl	8006efe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f000 f9f0 	bl	8006f26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	691b      	ldr	r3, [r3, #16]
 8006b52:	f003 0301 	and.w	r3, r3, #1
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d10e      	bne.n	8006b78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	68db      	ldr	r3, [r3, #12]
 8006b60:	f003 0301 	and.w	r3, r3, #1
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d107      	bne.n	8006b78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f06f 0201 	mvn.w	r2, #1
 8006b70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f7fc fa2c 	bl	8002fd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	691b      	ldr	r3, [r3, #16]
 8006b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b82:	2b80      	cmp	r3, #128	; 0x80
 8006b84:	d10e      	bne.n	8006ba4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	68db      	ldr	r3, [r3, #12]
 8006b8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b90:	2b80      	cmp	r3, #128	; 0x80
 8006b92:	d107      	bne.n	8006ba4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006b9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 fd1a 	bl	80075d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	691b      	ldr	r3, [r3, #16]
 8006baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bae:	2b40      	cmp	r3, #64	; 0x40
 8006bb0:	d10e      	bne.n	8006bd0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bbc:	2b40      	cmp	r3, #64	; 0x40
 8006bbe:	d107      	bne.n	8006bd0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006bc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 f9b5 	bl	8006f3a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	691b      	ldr	r3, [r3, #16]
 8006bd6:	f003 0320 	and.w	r3, r3, #32
 8006bda:	2b20      	cmp	r3, #32
 8006bdc:	d10e      	bne.n	8006bfc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	68db      	ldr	r3, [r3, #12]
 8006be4:	f003 0320 	and.w	r3, r3, #32
 8006be8:	2b20      	cmp	r3, #32
 8006bea:	d107      	bne.n	8006bfc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f06f 0220 	mvn.w	r2, #32
 8006bf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f000 fce4 	bl	80075c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006bfc:	bf00      	nop
 8006bfe:	3708      	adds	r7, #8
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b084      	sub	sp, #16
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	60f8      	str	r0, [r7, #12]
 8006c0c:	60b9      	str	r1, [r7, #8]
 8006c0e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d101      	bne.n	8006c1e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006c1a:	2302      	movs	r3, #2
 8006c1c:	e0b4      	b.n	8006d88 <HAL_TIM_PWM_ConfigChannel+0x184>
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2201      	movs	r2, #1
 8006c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2202      	movs	r2, #2
 8006c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2b0c      	cmp	r3, #12
 8006c32:	f200 809f 	bhi.w	8006d74 <HAL_TIM_PWM_ConfigChannel+0x170>
 8006c36:	a201      	add	r2, pc, #4	; (adr r2, 8006c3c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c3c:	08006c71 	.word	0x08006c71
 8006c40:	08006d75 	.word	0x08006d75
 8006c44:	08006d75 	.word	0x08006d75
 8006c48:	08006d75 	.word	0x08006d75
 8006c4c:	08006cb1 	.word	0x08006cb1
 8006c50:	08006d75 	.word	0x08006d75
 8006c54:	08006d75 	.word	0x08006d75
 8006c58:	08006d75 	.word	0x08006d75
 8006c5c:	08006cf3 	.word	0x08006cf3
 8006c60:	08006d75 	.word	0x08006d75
 8006c64:	08006d75 	.word	0x08006d75
 8006c68:	08006d75 	.word	0x08006d75
 8006c6c:	08006d33 	.word	0x08006d33
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	68b9      	ldr	r1, [r7, #8]
 8006c76:	4618      	mov	r0, r3
 8006c78:	f000 f9ea 	bl	8007050 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	699a      	ldr	r2, [r3, #24]
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f042 0208 	orr.w	r2, r2, #8
 8006c8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	699a      	ldr	r2, [r3, #24]
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f022 0204 	bic.w	r2, r2, #4
 8006c9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	6999      	ldr	r1, [r3, #24]
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	691a      	ldr	r2, [r3, #16]
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	430a      	orrs	r2, r1
 8006cac:	619a      	str	r2, [r3, #24]
      break;
 8006cae:	e062      	b.n	8006d76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	68b9      	ldr	r1, [r7, #8]
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f000 fa30 	bl	800711c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	699a      	ldr	r2, [r3, #24]
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006cca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	699a      	ldr	r2, [r3, #24]
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	6999      	ldr	r1, [r3, #24]
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	691b      	ldr	r3, [r3, #16]
 8006ce6:	021a      	lsls	r2, r3, #8
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	430a      	orrs	r2, r1
 8006cee:	619a      	str	r2, [r3, #24]
      break;
 8006cf0:	e041      	b.n	8006d76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	68b9      	ldr	r1, [r7, #8]
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f000 fa7b 	bl	80071f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	69da      	ldr	r2, [r3, #28]
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f042 0208 	orr.w	r2, r2, #8
 8006d0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	69da      	ldr	r2, [r3, #28]
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f022 0204 	bic.w	r2, r2, #4
 8006d1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	69d9      	ldr	r1, [r3, #28]
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	691a      	ldr	r2, [r3, #16]
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	430a      	orrs	r2, r1
 8006d2e:	61da      	str	r2, [r3, #28]
      break;
 8006d30:	e021      	b.n	8006d76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	68b9      	ldr	r1, [r7, #8]
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f000 fac5 	bl	80072c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	69da      	ldr	r2, [r3, #28]
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	69da      	ldr	r2, [r3, #28]
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	69d9      	ldr	r1, [r3, #28]
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	691b      	ldr	r3, [r3, #16]
 8006d68:	021a      	lsls	r2, r3, #8
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	430a      	orrs	r2, r1
 8006d70:	61da      	str	r2, [r3, #28]
      break;
 8006d72:	e000      	b.n	8006d76 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8006d74:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2201      	movs	r2, #1
 8006d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2200      	movs	r2, #0
 8006d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d86:	2300      	movs	r3, #0
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3710      	adds	r7, #16
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b084      	sub	sp, #16
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d101      	bne.n	8006da8 <HAL_TIM_ConfigClockSource+0x18>
 8006da4:	2302      	movs	r3, #2
 8006da6:	e0a6      	b.n	8006ef6 <HAL_TIM_ConfigClockSource+0x166>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2201      	movs	r2, #1
 8006dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2202      	movs	r2, #2
 8006db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	689b      	ldr	r3, [r3, #8]
 8006dbe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006dc6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006dce:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	68fa      	ldr	r2, [r7, #12]
 8006dd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	2b40      	cmp	r3, #64	; 0x40
 8006dde:	d067      	beq.n	8006eb0 <HAL_TIM_ConfigClockSource+0x120>
 8006de0:	2b40      	cmp	r3, #64	; 0x40
 8006de2:	d80b      	bhi.n	8006dfc <HAL_TIM_ConfigClockSource+0x6c>
 8006de4:	2b10      	cmp	r3, #16
 8006de6:	d073      	beq.n	8006ed0 <HAL_TIM_ConfigClockSource+0x140>
 8006de8:	2b10      	cmp	r3, #16
 8006dea:	d802      	bhi.n	8006df2 <HAL_TIM_ConfigClockSource+0x62>
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d06f      	beq.n	8006ed0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006df0:	e078      	b.n	8006ee4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006df2:	2b20      	cmp	r3, #32
 8006df4:	d06c      	beq.n	8006ed0 <HAL_TIM_ConfigClockSource+0x140>
 8006df6:	2b30      	cmp	r3, #48	; 0x30
 8006df8:	d06a      	beq.n	8006ed0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006dfa:	e073      	b.n	8006ee4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006dfc:	2b70      	cmp	r3, #112	; 0x70
 8006dfe:	d00d      	beq.n	8006e1c <HAL_TIM_ConfigClockSource+0x8c>
 8006e00:	2b70      	cmp	r3, #112	; 0x70
 8006e02:	d804      	bhi.n	8006e0e <HAL_TIM_ConfigClockSource+0x7e>
 8006e04:	2b50      	cmp	r3, #80	; 0x50
 8006e06:	d033      	beq.n	8006e70 <HAL_TIM_ConfigClockSource+0xe0>
 8006e08:	2b60      	cmp	r3, #96	; 0x60
 8006e0a:	d041      	beq.n	8006e90 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006e0c:	e06a      	b.n	8006ee4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006e0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e12:	d066      	beq.n	8006ee2 <HAL_TIM_ConfigClockSource+0x152>
 8006e14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e18:	d017      	beq.n	8006e4a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006e1a:	e063      	b.n	8006ee4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6818      	ldr	r0, [r3, #0]
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	6899      	ldr	r1, [r3, #8]
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	685a      	ldr	r2, [r3, #4]
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	68db      	ldr	r3, [r3, #12]
 8006e2c:	f000 fb16 	bl	800745c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006e3e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	68fa      	ldr	r2, [r7, #12]
 8006e46:	609a      	str	r2, [r3, #8]
      break;
 8006e48:	e04c      	b.n	8006ee4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6818      	ldr	r0, [r3, #0]
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	6899      	ldr	r1, [r3, #8]
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	685a      	ldr	r2, [r3, #4]
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	68db      	ldr	r3, [r3, #12]
 8006e5a:	f000 faff 	bl	800745c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	689a      	ldr	r2, [r3, #8]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e6c:	609a      	str	r2, [r3, #8]
      break;
 8006e6e:	e039      	b.n	8006ee4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6818      	ldr	r0, [r3, #0]
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	6859      	ldr	r1, [r3, #4]
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	68db      	ldr	r3, [r3, #12]
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	f000 fa73 	bl	8007368 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	2150      	movs	r1, #80	; 0x50
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f000 facc 	bl	8007426 <TIM_ITRx_SetConfig>
      break;
 8006e8e:	e029      	b.n	8006ee4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6818      	ldr	r0, [r3, #0]
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	6859      	ldr	r1, [r3, #4]
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	68db      	ldr	r3, [r3, #12]
 8006e9c:	461a      	mov	r2, r3
 8006e9e:	f000 fa92 	bl	80073c6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	2160      	movs	r1, #96	; 0x60
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f000 fabc 	bl	8007426 <TIM_ITRx_SetConfig>
      break;
 8006eae:	e019      	b.n	8006ee4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6818      	ldr	r0, [r3, #0]
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	6859      	ldr	r1, [r3, #4]
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	68db      	ldr	r3, [r3, #12]
 8006ebc:	461a      	mov	r2, r3
 8006ebe:	f000 fa53 	bl	8007368 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	2140      	movs	r1, #64	; 0x40
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f000 faac 	bl	8007426 <TIM_ITRx_SetConfig>
      break;
 8006ece:	e009      	b.n	8006ee4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4619      	mov	r1, r3
 8006eda:	4610      	mov	r0, r2
 8006edc:	f000 faa3 	bl	8007426 <TIM_ITRx_SetConfig>
      break;
 8006ee0:	e000      	b.n	8006ee4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006ee2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ef4:	2300      	movs	r3, #0
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3710      	adds	r7, #16
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}

08006efe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006efe:	b480      	push	{r7}
 8006f00:	b083      	sub	sp, #12
 8006f02:	af00      	add	r7, sp, #0
 8006f04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f06:	bf00      	nop
 8006f08:	370c      	adds	r7, #12
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr

08006f12 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006f12:	b480      	push	{r7}
 8006f14:	b083      	sub	sp, #12
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f1a:	bf00      	nop
 8006f1c:	370c      	adds	r7, #12
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr

08006f26 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f26:	b480      	push	{r7}
 8006f28:	b083      	sub	sp, #12
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f2e:	bf00      	nop
 8006f30:	370c      	adds	r7, #12
 8006f32:	46bd      	mov	sp, r7
 8006f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f38:	4770      	bx	lr

08006f3a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f3a:	b480      	push	{r7}
 8006f3c:	b083      	sub	sp, #12
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f42:	bf00      	nop
 8006f44:	370c      	adds	r7, #12
 8006f46:	46bd      	mov	sp, r7
 8006f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4c:	4770      	bx	lr
	...

08006f50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b085      	sub	sp, #20
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	4a34      	ldr	r2, [pc, #208]	; (8007034 <TIM_Base_SetConfig+0xe4>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d00f      	beq.n	8006f88 <TIM_Base_SetConfig+0x38>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f6e:	d00b      	beq.n	8006f88 <TIM_Base_SetConfig+0x38>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	4a31      	ldr	r2, [pc, #196]	; (8007038 <TIM_Base_SetConfig+0xe8>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d007      	beq.n	8006f88 <TIM_Base_SetConfig+0x38>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	4a30      	ldr	r2, [pc, #192]	; (800703c <TIM_Base_SetConfig+0xec>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d003      	beq.n	8006f88 <TIM_Base_SetConfig+0x38>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	4a2f      	ldr	r2, [pc, #188]	; (8007040 <TIM_Base_SetConfig+0xf0>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d108      	bne.n	8006f9a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	68fa      	ldr	r2, [r7, #12]
 8006f96:	4313      	orrs	r3, r2
 8006f98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	4a25      	ldr	r2, [pc, #148]	; (8007034 <TIM_Base_SetConfig+0xe4>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d01b      	beq.n	8006fda <TIM_Base_SetConfig+0x8a>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fa8:	d017      	beq.n	8006fda <TIM_Base_SetConfig+0x8a>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	4a22      	ldr	r2, [pc, #136]	; (8007038 <TIM_Base_SetConfig+0xe8>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d013      	beq.n	8006fda <TIM_Base_SetConfig+0x8a>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	4a21      	ldr	r2, [pc, #132]	; (800703c <TIM_Base_SetConfig+0xec>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d00f      	beq.n	8006fda <TIM_Base_SetConfig+0x8a>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	4a20      	ldr	r2, [pc, #128]	; (8007040 <TIM_Base_SetConfig+0xf0>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d00b      	beq.n	8006fda <TIM_Base_SetConfig+0x8a>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	4a1f      	ldr	r2, [pc, #124]	; (8007044 <TIM_Base_SetConfig+0xf4>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d007      	beq.n	8006fda <TIM_Base_SetConfig+0x8a>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	4a1e      	ldr	r2, [pc, #120]	; (8007048 <TIM_Base_SetConfig+0xf8>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d003      	beq.n	8006fda <TIM_Base_SetConfig+0x8a>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	4a1d      	ldr	r2, [pc, #116]	; (800704c <TIM_Base_SetConfig+0xfc>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d108      	bne.n	8006fec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fe0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	68db      	ldr	r3, [r3, #12]
 8006fe6:	68fa      	ldr	r2, [r7, #12]
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	695b      	ldr	r3, [r3, #20]
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	68fa      	ldr	r2, [r7, #12]
 8006ffe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	689a      	ldr	r2, [r3, #8]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	681a      	ldr	r2, [r3, #0]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	4a08      	ldr	r2, [pc, #32]	; (8007034 <TIM_Base_SetConfig+0xe4>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d103      	bne.n	8007020 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	691a      	ldr	r2, [r3, #16]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2201      	movs	r2, #1
 8007024:	615a      	str	r2, [r3, #20]
}
 8007026:	bf00      	nop
 8007028:	3714      	adds	r7, #20
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr
 8007032:	bf00      	nop
 8007034:	40010000 	.word	0x40010000
 8007038:	40000400 	.word	0x40000400
 800703c:	40000800 	.word	0x40000800
 8007040:	40000c00 	.word	0x40000c00
 8007044:	40014000 	.word	0x40014000
 8007048:	40014400 	.word	0x40014400
 800704c:	40014800 	.word	0x40014800

08007050 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007050:	b480      	push	{r7}
 8007052:	b087      	sub	sp, #28
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6a1b      	ldr	r3, [r3, #32]
 800705e:	f023 0201 	bic.w	r2, r3, #1
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6a1b      	ldr	r3, [r3, #32]
 800706a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	699b      	ldr	r3, [r3, #24]
 8007076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800707e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f023 0303 	bic.w	r3, r3, #3
 8007086:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	68fa      	ldr	r2, [r7, #12]
 800708e:	4313      	orrs	r3, r2
 8007090:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	f023 0302 	bic.w	r3, r3, #2
 8007098:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	697a      	ldr	r2, [r7, #20]
 80070a0:	4313      	orrs	r3, r2
 80070a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	4a1c      	ldr	r2, [pc, #112]	; (8007118 <TIM_OC1_SetConfig+0xc8>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d10c      	bne.n	80070c6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	f023 0308 	bic.w	r3, r3, #8
 80070b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	68db      	ldr	r3, [r3, #12]
 80070b8:	697a      	ldr	r2, [r7, #20]
 80070ba:	4313      	orrs	r3, r2
 80070bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	f023 0304 	bic.w	r3, r3, #4
 80070c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	4a13      	ldr	r2, [pc, #76]	; (8007118 <TIM_OC1_SetConfig+0xc8>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d111      	bne.n	80070f2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80070dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	695b      	ldr	r3, [r3, #20]
 80070e2:	693a      	ldr	r2, [r7, #16]
 80070e4:	4313      	orrs	r3, r2
 80070e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	699b      	ldr	r3, [r3, #24]
 80070ec:	693a      	ldr	r2, [r7, #16]
 80070ee:	4313      	orrs	r3, r2
 80070f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	693a      	ldr	r2, [r7, #16]
 80070f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	68fa      	ldr	r2, [r7, #12]
 80070fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	685a      	ldr	r2, [r3, #4]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	697a      	ldr	r2, [r7, #20]
 800710a:	621a      	str	r2, [r3, #32]
}
 800710c:	bf00      	nop
 800710e:	371c      	adds	r7, #28
 8007110:	46bd      	mov	sp, r7
 8007112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007116:	4770      	bx	lr
 8007118:	40010000 	.word	0x40010000

0800711c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800711c:	b480      	push	{r7}
 800711e:	b087      	sub	sp, #28
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
 8007124:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6a1b      	ldr	r3, [r3, #32]
 800712a:	f023 0210 	bic.w	r2, r3, #16
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6a1b      	ldr	r3, [r3, #32]
 8007136:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	699b      	ldr	r3, [r3, #24]
 8007142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800714a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007152:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	021b      	lsls	r3, r3, #8
 800715a:	68fa      	ldr	r2, [r7, #12]
 800715c:	4313      	orrs	r3, r2
 800715e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	f023 0320 	bic.w	r3, r3, #32
 8007166:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	011b      	lsls	r3, r3, #4
 800716e:	697a      	ldr	r2, [r7, #20]
 8007170:	4313      	orrs	r3, r2
 8007172:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	4a1e      	ldr	r2, [pc, #120]	; (80071f0 <TIM_OC2_SetConfig+0xd4>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d10d      	bne.n	8007198 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007182:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	68db      	ldr	r3, [r3, #12]
 8007188:	011b      	lsls	r3, r3, #4
 800718a:	697a      	ldr	r2, [r7, #20]
 800718c:	4313      	orrs	r3, r2
 800718e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007196:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	4a15      	ldr	r2, [pc, #84]	; (80071f0 <TIM_OC2_SetConfig+0xd4>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d113      	bne.n	80071c8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80071a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80071ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	695b      	ldr	r3, [r3, #20]
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	693a      	ldr	r2, [r7, #16]
 80071b8:	4313      	orrs	r3, r2
 80071ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	699b      	ldr	r3, [r3, #24]
 80071c0:	009b      	lsls	r3, r3, #2
 80071c2:	693a      	ldr	r2, [r7, #16]
 80071c4:	4313      	orrs	r3, r2
 80071c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	693a      	ldr	r2, [r7, #16]
 80071cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	68fa      	ldr	r2, [r7, #12]
 80071d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	685a      	ldr	r2, [r3, #4]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	697a      	ldr	r2, [r7, #20]
 80071e0:	621a      	str	r2, [r3, #32]
}
 80071e2:	bf00      	nop
 80071e4:	371c      	adds	r7, #28
 80071e6:	46bd      	mov	sp, r7
 80071e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ec:	4770      	bx	lr
 80071ee:	bf00      	nop
 80071f0:	40010000 	.word	0x40010000

080071f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b087      	sub	sp, #28
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6a1b      	ldr	r3, [r3, #32]
 8007202:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6a1b      	ldr	r3, [r3, #32]
 800720e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	69db      	ldr	r3, [r3, #28]
 800721a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007222:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f023 0303 	bic.w	r3, r3, #3
 800722a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	68fa      	ldr	r2, [r7, #12]
 8007232:	4313      	orrs	r3, r2
 8007234:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800723c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	021b      	lsls	r3, r3, #8
 8007244:	697a      	ldr	r2, [r7, #20]
 8007246:	4313      	orrs	r3, r2
 8007248:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	4a1d      	ldr	r2, [pc, #116]	; (80072c4 <TIM_OC3_SetConfig+0xd0>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d10d      	bne.n	800726e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007258:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	68db      	ldr	r3, [r3, #12]
 800725e:	021b      	lsls	r3, r3, #8
 8007260:	697a      	ldr	r2, [r7, #20]
 8007262:	4313      	orrs	r3, r2
 8007264:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800726c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	4a14      	ldr	r2, [pc, #80]	; (80072c4 <TIM_OC3_SetConfig+0xd0>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d113      	bne.n	800729e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800727c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007284:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	695b      	ldr	r3, [r3, #20]
 800728a:	011b      	lsls	r3, r3, #4
 800728c:	693a      	ldr	r2, [r7, #16]
 800728e:	4313      	orrs	r3, r2
 8007290:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	699b      	ldr	r3, [r3, #24]
 8007296:	011b      	lsls	r3, r3, #4
 8007298:	693a      	ldr	r2, [r7, #16]
 800729a:	4313      	orrs	r3, r2
 800729c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	693a      	ldr	r2, [r7, #16]
 80072a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	68fa      	ldr	r2, [r7, #12]
 80072a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	685a      	ldr	r2, [r3, #4]
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	697a      	ldr	r2, [r7, #20]
 80072b6:	621a      	str	r2, [r3, #32]
}
 80072b8:	bf00      	nop
 80072ba:	371c      	adds	r7, #28
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	4770      	bx	lr
 80072c4:	40010000 	.word	0x40010000

080072c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b087      	sub	sp, #28
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6a1b      	ldr	r3, [r3, #32]
 80072d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6a1b      	ldr	r3, [r3, #32]
 80072e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	69db      	ldr	r3, [r3, #28]
 80072ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	021b      	lsls	r3, r3, #8
 8007306:	68fa      	ldr	r2, [r7, #12]
 8007308:	4313      	orrs	r3, r2
 800730a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007312:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	031b      	lsls	r3, r3, #12
 800731a:	693a      	ldr	r2, [r7, #16]
 800731c:	4313      	orrs	r3, r2
 800731e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	4a10      	ldr	r2, [pc, #64]	; (8007364 <TIM_OC4_SetConfig+0x9c>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d109      	bne.n	800733c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800732e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	695b      	ldr	r3, [r3, #20]
 8007334:	019b      	lsls	r3, r3, #6
 8007336:	697a      	ldr	r2, [r7, #20]
 8007338:	4313      	orrs	r3, r2
 800733a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	697a      	ldr	r2, [r7, #20]
 8007340:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	68fa      	ldr	r2, [r7, #12]
 8007346:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	685a      	ldr	r2, [r3, #4]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	693a      	ldr	r2, [r7, #16]
 8007354:	621a      	str	r2, [r3, #32]
}
 8007356:	bf00      	nop
 8007358:	371c      	adds	r7, #28
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr
 8007362:	bf00      	nop
 8007364:	40010000 	.word	0x40010000

08007368 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007368:	b480      	push	{r7}
 800736a:	b087      	sub	sp, #28
 800736c:	af00      	add	r7, sp, #0
 800736e:	60f8      	str	r0, [r7, #12]
 8007370:	60b9      	str	r1, [r7, #8]
 8007372:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	6a1b      	ldr	r3, [r3, #32]
 8007378:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	6a1b      	ldr	r3, [r3, #32]
 800737e:	f023 0201 	bic.w	r2, r3, #1
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	699b      	ldr	r3, [r3, #24]
 800738a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007392:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	011b      	lsls	r3, r3, #4
 8007398:	693a      	ldr	r2, [r7, #16]
 800739a:	4313      	orrs	r3, r2
 800739c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	f023 030a 	bic.w	r3, r3, #10
 80073a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80073a6:	697a      	ldr	r2, [r7, #20]
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	4313      	orrs	r3, r2
 80073ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	693a      	ldr	r2, [r7, #16]
 80073b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	697a      	ldr	r2, [r7, #20]
 80073b8:	621a      	str	r2, [r3, #32]
}
 80073ba:	bf00      	nop
 80073bc:	371c      	adds	r7, #28
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr

080073c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073c6:	b480      	push	{r7}
 80073c8:	b087      	sub	sp, #28
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	60f8      	str	r0, [r7, #12]
 80073ce:	60b9      	str	r1, [r7, #8]
 80073d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	6a1b      	ldr	r3, [r3, #32]
 80073d6:	f023 0210 	bic.w	r2, r3, #16
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	699b      	ldr	r3, [r3, #24]
 80073e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	6a1b      	ldr	r3, [r3, #32]
 80073e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80073f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	031b      	lsls	r3, r3, #12
 80073f6:	697a      	ldr	r2, [r7, #20]
 80073f8:	4313      	orrs	r3, r2
 80073fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007402:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	011b      	lsls	r3, r3, #4
 8007408:	693a      	ldr	r2, [r7, #16]
 800740a:	4313      	orrs	r3, r2
 800740c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	697a      	ldr	r2, [r7, #20]
 8007412:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	693a      	ldr	r2, [r7, #16]
 8007418:	621a      	str	r2, [r3, #32]
}
 800741a:	bf00      	nop
 800741c:	371c      	adds	r7, #28
 800741e:	46bd      	mov	sp, r7
 8007420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007424:	4770      	bx	lr

08007426 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007426:	b480      	push	{r7}
 8007428:	b085      	sub	sp, #20
 800742a:	af00      	add	r7, sp, #0
 800742c:	6078      	str	r0, [r7, #4]
 800742e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	689b      	ldr	r3, [r3, #8]
 8007434:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800743c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800743e:	683a      	ldr	r2, [r7, #0]
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	4313      	orrs	r3, r2
 8007444:	f043 0307 	orr.w	r3, r3, #7
 8007448:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	68fa      	ldr	r2, [r7, #12]
 800744e:	609a      	str	r2, [r3, #8]
}
 8007450:	bf00      	nop
 8007452:	3714      	adds	r7, #20
 8007454:	46bd      	mov	sp, r7
 8007456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745a:	4770      	bx	lr

0800745c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800745c:	b480      	push	{r7}
 800745e:	b087      	sub	sp, #28
 8007460:	af00      	add	r7, sp, #0
 8007462:	60f8      	str	r0, [r7, #12]
 8007464:	60b9      	str	r1, [r7, #8]
 8007466:	607a      	str	r2, [r7, #4]
 8007468:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007476:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	021a      	lsls	r2, r3, #8
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	431a      	orrs	r2, r3
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	4313      	orrs	r3, r2
 8007484:	697a      	ldr	r2, [r7, #20]
 8007486:	4313      	orrs	r3, r2
 8007488:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	697a      	ldr	r2, [r7, #20]
 800748e:	609a      	str	r2, [r3, #8]
}
 8007490:	bf00      	nop
 8007492:	371c      	adds	r7, #28
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr

0800749c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800749c:	b480      	push	{r7}
 800749e:	b087      	sub	sp, #28
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	60f8      	str	r0, [r7, #12]
 80074a4:	60b9      	str	r1, [r7, #8]
 80074a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	f003 031f 	and.w	r3, r3, #31
 80074ae:	2201      	movs	r2, #1
 80074b0:	fa02 f303 	lsl.w	r3, r2, r3
 80074b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	6a1a      	ldr	r2, [r3, #32]
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	43db      	mvns	r3, r3
 80074be:	401a      	ands	r2, r3
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	6a1a      	ldr	r2, [r3, #32]
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	f003 031f 	and.w	r3, r3, #31
 80074ce:	6879      	ldr	r1, [r7, #4]
 80074d0:	fa01 f303 	lsl.w	r3, r1, r3
 80074d4:	431a      	orrs	r2, r3
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	621a      	str	r2, [r3, #32]
}
 80074da:	bf00      	nop
 80074dc:	371c      	adds	r7, #28
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr
	...

080074e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b085      	sub	sp, #20
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	d101      	bne.n	8007500 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80074fc:	2302      	movs	r3, #2
 80074fe:	e050      	b.n	80075a2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2201      	movs	r2, #1
 8007504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2202      	movs	r2, #2
 800750c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	689b      	ldr	r3, [r3, #8]
 800751e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007526:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	68fa      	ldr	r2, [r7, #12]
 800752e:	4313      	orrs	r3, r2
 8007530:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	68fa      	ldr	r2, [r7, #12]
 8007538:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a1c      	ldr	r2, [pc, #112]	; (80075b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d018      	beq.n	8007576 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800754c:	d013      	beq.n	8007576 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a18      	ldr	r2, [pc, #96]	; (80075b4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d00e      	beq.n	8007576 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a16      	ldr	r2, [pc, #88]	; (80075b8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d009      	beq.n	8007576 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a15      	ldr	r2, [pc, #84]	; (80075bc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d004      	beq.n	8007576 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a13      	ldr	r2, [pc, #76]	; (80075c0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d10c      	bne.n	8007590 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800757c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	68ba      	ldr	r2, [r7, #8]
 8007584:	4313      	orrs	r3, r2
 8007586:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	68ba      	ldr	r2, [r7, #8]
 800758e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2201      	movs	r2, #1
 8007594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2200      	movs	r2, #0
 800759c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075a0:	2300      	movs	r3, #0
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3714      	adds	r7, #20
 80075a6:	46bd      	mov	sp, r7
 80075a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ac:	4770      	bx	lr
 80075ae:	bf00      	nop
 80075b0:	40010000 	.word	0x40010000
 80075b4:	40000400 	.word	0x40000400
 80075b8:	40000800 	.word	0x40000800
 80075bc:	40000c00 	.word	0x40000c00
 80075c0:	40014000 	.word	0x40014000

080075c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80075cc:	bf00      	nop
 80075ce:	370c      	adds	r7, #12
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr

080075d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80075d8:	b480      	push	{r7}
 80075da:	b083      	sub	sp, #12
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80075e0:	bf00      	nop
 80075e2:	370c      	adds	r7, #12
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr

080075ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b082      	sub	sp, #8
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d101      	bne.n	80075fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80075fa:	2301      	movs	r3, #1
 80075fc:	e03f      	b.n	800767e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007604:	b2db      	uxtb	r3, r3
 8007606:	2b00      	cmp	r3, #0
 8007608:	d106      	bne.n	8007618 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2200      	movs	r2, #0
 800760e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f7fb ff8c 	bl	8003530 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2224      	movs	r2, #36	; 0x24
 800761c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	68da      	ldr	r2, [r3, #12]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800762e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f000 fb59 	bl	8007ce8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	691a      	ldr	r2, [r3, #16]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007644:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	695a      	ldr	r2, [r3, #20]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007654:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	68da      	ldr	r2, [r3, #12]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007664:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2200      	movs	r2, #0
 800766a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2220      	movs	r2, #32
 8007670:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2220      	movs	r2, #32
 8007678:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800767c:	2300      	movs	r3, #0
}
 800767e:	4618      	mov	r0, r3
 8007680:	3708      	adds	r7, #8
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}

08007686 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007686:	b580      	push	{r7, lr}
 8007688:	b088      	sub	sp, #32
 800768a:	af02      	add	r7, sp, #8
 800768c:	60f8      	str	r0, [r7, #12]
 800768e:	60b9      	str	r1, [r7, #8]
 8007690:	603b      	str	r3, [r7, #0]
 8007692:	4613      	mov	r3, r2
 8007694:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8007696:	2300      	movs	r3, #0
 8007698:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80076a0:	b2db      	uxtb	r3, r3
 80076a2:	2b20      	cmp	r3, #32
 80076a4:	f040 8090 	bne.w	80077c8 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d002      	beq.n	80076b4 <HAL_UART_Receive+0x2e>
 80076ae:	88fb      	ldrh	r3, [r7, #6]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d101      	bne.n	80076b8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80076b4:	2301      	movs	r3, #1
 80076b6:	e088      	b.n	80077ca <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80076be:	2b01      	cmp	r3, #1
 80076c0:	d101      	bne.n	80076c6 <HAL_UART_Receive+0x40>
 80076c2:	2302      	movs	r3, #2
 80076c4:	e081      	b.n	80077ca <HAL_UART_Receive+0x144>
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2201      	movs	r2, #1
 80076ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2200      	movs	r2, #0
 80076d2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2222      	movs	r2, #34	; 0x22
 80076d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80076dc:	f7fc f8ae 	bl	800383c <HAL_GetTick>
 80076e0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	88fa      	ldrh	r2, [r7, #6]
 80076e6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	88fa      	ldrh	r2, [r7, #6]
 80076ec:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2200      	movs	r2, #0
 80076f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80076f6:	e05c      	b.n	80077b2 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	3b01      	subs	r3, #1
 8007700:	b29a      	uxth	r2, r3
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800770e:	d12b      	bne.n	8007768 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	9300      	str	r3, [sp, #0]
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	2200      	movs	r2, #0
 8007718:	2120      	movs	r1, #32
 800771a:	68f8      	ldr	r0, [r7, #12]
 800771c:	f000 f978 	bl	8007a10 <UART_WaitOnFlagUntilTimeout>
 8007720:	4603      	mov	r3, r0
 8007722:	2b00      	cmp	r3, #0
 8007724:	d001      	beq.n	800772a <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8007726:	2303      	movs	r3, #3
 8007728:	e04f      	b.n	80077ca <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	691b      	ldr	r3, [r3, #16]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d10c      	bne.n	8007750 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	b29b      	uxth	r3, r3
 800773e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007742:	b29a      	uxth	r2, r3
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	3302      	adds	r3, #2
 800774c:	60bb      	str	r3, [r7, #8]
 800774e:	e030      	b.n	80077b2 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	b29b      	uxth	r3, r3
 8007758:	b2db      	uxtb	r3, r3
 800775a:	b29a      	uxth	r2, r3
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	3301      	adds	r3, #1
 8007764:	60bb      	str	r3, [r7, #8]
 8007766:	e024      	b.n	80077b2 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	9300      	str	r3, [sp, #0]
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	2200      	movs	r2, #0
 8007770:	2120      	movs	r1, #32
 8007772:	68f8      	ldr	r0, [r7, #12]
 8007774:	f000 f94c 	bl	8007a10 <UART_WaitOnFlagUntilTimeout>
 8007778:	4603      	mov	r3, r0
 800777a:	2b00      	cmp	r3, #0
 800777c:	d001      	beq.n	8007782 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 800777e:	2303      	movs	r3, #3
 8007780:	e023      	b.n	80077ca <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	691b      	ldr	r3, [r3, #16]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d108      	bne.n	800779c <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	6859      	ldr	r1, [r3, #4]
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	1c5a      	adds	r2, r3, #1
 8007794:	60ba      	str	r2, [r7, #8]
 8007796:	b2ca      	uxtb	r2, r1
 8007798:	701a      	strb	r2, [r3, #0]
 800779a:	e00a      	b.n	80077b2 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	b2da      	uxtb	r2, r3
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	1c59      	adds	r1, r3, #1
 80077a8:	60b9      	str	r1, [r7, #8]
 80077aa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80077ae:	b2d2      	uxtb	r2, r2
 80077b0:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d19d      	bne.n	80076f8 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	2220      	movs	r2, #32
 80077c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80077c4:	2300      	movs	r3, #0
 80077c6:	e000      	b.n	80077ca <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80077c8:	2302      	movs	r3, #2
  }
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3718      	adds	r7, #24
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}
	...

080077d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b088      	sub	sp, #32
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	68db      	ldr	r3, [r3, #12]
 80077ea:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	695b      	ldr	r3, [r3, #20]
 80077f2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80077f4:	2300      	movs	r3, #0
 80077f6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80077f8:	2300      	movs	r3, #0
 80077fa:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80077fc:	69fb      	ldr	r3, [r7, #28]
 80077fe:	f003 030f 	and.w	r3, r3, #15
 8007802:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d10d      	bne.n	8007826 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800780a:	69fb      	ldr	r3, [r7, #28]
 800780c:	f003 0320 	and.w	r3, r3, #32
 8007810:	2b00      	cmp	r3, #0
 8007812:	d008      	beq.n	8007826 <HAL_UART_IRQHandler+0x52>
 8007814:	69bb      	ldr	r3, [r7, #24]
 8007816:	f003 0320 	and.w	r3, r3, #32
 800781a:	2b00      	cmp	r3, #0
 800781c:	d003      	beq.n	8007826 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f000 f9e0 	bl	8007be4 <UART_Receive_IT>
      return;
 8007824:	e0d1      	b.n	80079ca <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	2b00      	cmp	r3, #0
 800782a:	f000 80b0 	beq.w	800798e <HAL_UART_IRQHandler+0x1ba>
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	f003 0301 	and.w	r3, r3, #1
 8007834:	2b00      	cmp	r3, #0
 8007836:	d105      	bne.n	8007844 <HAL_UART_IRQHandler+0x70>
 8007838:	69bb      	ldr	r3, [r7, #24]
 800783a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800783e:	2b00      	cmp	r3, #0
 8007840:	f000 80a5 	beq.w	800798e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007844:	69fb      	ldr	r3, [r7, #28]
 8007846:	f003 0301 	and.w	r3, r3, #1
 800784a:	2b00      	cmp	r3, #0
 800784c:	d00a      	beq.n	8007864 <HAL_UART_IRQHandler+0x90>
 800784e:	69bb      	ldr	r3, [r7, #24]
 8007850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007854:	2b00      	cmp	r3, #0
 8007856:	d005      	beq.n	8007864 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800785c:	f043 0201 	orr.w	r2, r3, #1
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007864:	69fb      	ldr	r3, [r7, #28]
 8007866:	f003 0304 	and.w	r3, r3, #4
 800786a:	2b00      	cmp	r3, #0
 800786c:	d00a      	beq.n	8007884 <HAL_UART_IRQHandler+0xb0>
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	f003 0301 	and.w	r3, r3, #1
 8007874:	2b00      	cmp	r3, #0
 8007876:	d005      	beq.n	8007884 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800787c:	f043 0202 	orr.w	r2, r3, #2
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007884:	69fb      	ldr	r3, [r7, #28]
 8007886:	f003 0302 	and.w	r3, r3, #2
 800788a:	2b00      	cmp	r3, #0
 800788c:	d00a      	beq.n	80078a4 <HAL_UART_IRQHandler+0xd0>
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	f003 0301 	and.w	r3, r3, #1
 8007894:	2b00      	cmp	r3, #0
 8007896:	d005      	beq.n	80078a4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800789c:	f043 0204 	orr.w	r2, r3, #4
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80078a4:	69fb      	ldr	r3, [r7, #28]
 80078a6:	f003 0308 	and.w	r3, r3, #8
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d00f      	beq.n	80078ce <HAL_UART_IRQHandler+0xfa>
 80078ae:	69bb      	ldr	r3, [r7, #24]
 80078b0:	f003 0320 	and.w	r3, r3, #32
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d104      	bne.n	80078c2 <HAL_UART_IRQHandler+0xee>
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	f003 0301 	and.w	r3, r3, #1
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d005      	beq.n	80078ce <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078c6:	f043 0208 	orr.w	r2, r3, #8
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d078      	beq.n	80079c8 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80078d6:	69fb      	ldr	r3, [r7, #28]
 80078d8:	f003 0320 	and.w	r3, r3, #32
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d007      	beq.n	80078f0 <HAL_UART_IRQHandler+0x11c>
 80078e0:	69bb      	ldr	r3, [r7, #24]
 80078e2:	f003 0320 	and.w	r3, r3, #32
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d002      	beq.n	80078f0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 f97a 	bl	8007be4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	695b      	ldr	r3, [r3, #20]
 80078f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078fa:	2b40      	cmp	r3, #64	; 0x40
 80078fc:	bf0c      	ite	eq
 80078fe:	2301      	moveq	r3, #1
 8007900:	2300      	movne	r3, #0
 8007902:	b2db      	uxtb	r3, r3
 8007904:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800790a:	f003 0308 	and.w	r3, r3, #8
 800790e:	2b00      	cmp	r3, #0
 8007910:	d102      	bne.n	8007918 <HAL_UART_IRQHandler+0x144>
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d031      	beq.n	800797c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f000 f8c3 	bl	8007aa4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	695b      	ldr	r3, [r3, #20]
 8007924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007928:	2b40      	cmp	r3, #64	; 0x40
 800792a:	d123      	bne.n	8007974 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	695a      	ldr	r2, [r3, #20]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800793a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007940:	2b00      	cmp	r3, #0
 8007942:	d013      	beq.n	800796c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007948:	4a21      	ldr	r2, [pc, #132]	; (80079d0 <HAL_UART_IRQHandler+0x1fc>)
 800794a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007950:	4618      	mov	r0, r3
 8007952:	f7fc fefb 	bl	800474c <HAL_DMA_Abort_IT>
 8007956:	4603      	mov	r3, r0
 8007958:	2b00      	cmp	r3, #0
 800795a:	d016      	beq.n	800798a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007960:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007962:	687a      	ldr	r2, [r7, #4]
 8007964:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007966:	4610      	mov	r0, r2
 8007968:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800796a:	e00e      	b.n	800798a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f000 f845 	bl	80079fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007972:	e00a      	b.n	800798a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f000 f841 	bl	80079fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800797a:	e006      	b.n	800798a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f000 f83d 	bl	80079fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2200      	movs	r2, #0
 8007986:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8007988:	e01e      	b.n	80079c8 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800798a:	bf00      	nop
    return;
 800798c:	e01c      	b.n	80079c8 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800798e:	69fb      	ldr	r3, [r7, #28]
 8007990:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007994:	2b00      	cmp	r3, #0
 8007996:	d008      	beq.n	80079aa <HAL_UART_IRQHandler+0x1d6>
 8007998:	69bb      	ldr	r3, [r7, #24]
 800799a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d003      	beq.n	80079aa <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 f8b0 	bl	8007b08 <UART_Transmit_IT>
    return;
 80079a8:	e00f      	b.n	80079ca <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80079aa:	69fb      	ldr	r3, [r7, #28]
 80079ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d00a      	beq.n	80079ca <HAL_UART_IRQHandler+0x1f6>
 80079b4:	69bb      	ldr	r3, [r7, #24]
 80079b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d005      	beq.n	80079ca <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f000 f8f8 	bl	8007bb4 <UART_EndTransmit_IT>
    return;
 80079c4:	bf00      	nop
 80079c6:	e000      	b.n	80079ca <HAL_UART_IRQHandler+0x1f6>
    return;
 80079c8:	bf00      	nop
  }
}
 80079ca:	3720      	adds	r7, #32
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}
 80079d0:	08007ae1 	.word	0x08007ae1

080079d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b083      	sub	sp, #12
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80079dc:	bf00      	nop
 80079de:	370c      	adds	r7, #12
 80079e0:	46bd      	mov	sp, r7
 80079e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e6:	4770      	bx	lr

080079e8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b083      	sub	sp, #12
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80079f0:	bf00      	nop
 80079f2:	370c      	adds	r7, #12
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr

080079fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b083      	sub	sp, #12
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007a04:	bf00      	nop
 8007a06:	370c      	adds	r7, #12
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0e:	4770      	bx	lr

08007a10 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b084      	sub	sp, #16
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	60f8      	str	r0, [r7, #12]
 8007a18:	60b9      	str	r1, [r7, #8]
 8007a1a:	603b      	str	r3, [r7, #0]
 8007a1c:	4613      	mov	r3, r2
 8007a1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a20:	e02c      	b.n	8007a7c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a22:	69bb      	ldr	r3, [r7, #24]
 8007a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a28:	d028      	beq.n	8007a7c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007a2a:	69bb      	ldr	r3, [r7, #24]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d007      	beq.n	8007a40 <UART_WaitOnFlagUntilTimeout+0x30>
 8007a30:	f7fb ff04 	bl	800383c <HAL_GetTick>
 8007a34:	4602      	mov	r2, r0
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	1ad3      	subs	r3, r2, r3
 8007a3a:	69ba      	ldr	r2, [r7, #24]
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d21d      	bcs.n	8007a7c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	68da      	ldr	r2, [r3, #12]
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007a4e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	695a      	ldr	r2, [r3, #20]
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f022 0201 	bic.w	r2, r2, #1
 8007a5e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	2220      	movs	r2, #32
 8007a64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	2220      	movs	r2, #32
 8007a6c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2200      	movs	r2, #0
 8007a74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8007a78:	2303      	movs	r3, #3
 8007a7a:	e00f      	b.n	8007a9c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	681a      	ldr	r2, [r3, #0]
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	4013      	ands	r3, r2
 8007a86:	68ba      	ldr	r2, [r7, #8]
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	bf0c      	ite	eq
 8007a8c:	2301      	moveq	r3, #1
 8007a8e:	2300      	movne	r3, #0
 8007a90:	b2db      	uxtb	r3, r3
 8007a92:	461a      	mov	r2, r3
 8007a94:	79fb      	ldrb	r3, [r7, #7]
 8007a96:	429a      	cmp	r2, r3
 8007a98:	d0c3      	beq.n	8007a22 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007a9a:	2300      	movs	r3, #0
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3710      	adds	r7, #16
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}

08007aa4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b083      	sub	sp, #12
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	68da      	ldr	r2, [r3, #12]
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007aba:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	695a      	ldr	r2, [r3, #20]
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f022 0201 	bic.w	r2, r2, #1
 8007aca:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2220      	movs	r2, #32
 8007ad0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8007ad4:	bf00      	nop
 8007ad6:	370c      	adds	r7, #12
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr

08007ae0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b084      	sub	sp, #16
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2200      	movs	r2, #0
 8007af2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2200      	movs	r2, #0
 8007af8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007afa:	68f8      	ldr	r0, [r7, #12]
 8007afc:	f7ff ff7e 	bl	80079fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b00:	bf00      	nop
 8007b02:	3710      	adds	r7, #16
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b085      	sub	sp, #20
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007b16:	b2db      	uxtb	r3, r3
 8007b18:	2b21      	cmp	r3, #33	; 0x21
 8007b1a:	d144      	bne.n	8007ba6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	689b      	ldr	r3, [r3, #8]
 8007b20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b24:	d11a      	bne.n	8007b5c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6a1b      	ldr	r3, [r3, #32]
 8007b2a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	881b      	ldrh	r3, [r3, #0]
 8007b30:	461a      	mov	r2, r3
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b3a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	691b      	ldr	r3, [r3, #16]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d105      	bne.n	8007b50 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6a1b      	ldr	r3, [r3, #32]
 8007b48:	1c9a      	adds	r2, r3, #2
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	621a      	str	r2, [r3, #32]
 8007b4e:	e00e      	b.n	8007b6e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6a1b      	ldr	r3, [r3, #32]
 8007b54:	1c5a      	adds	r2, r3, #1
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	621a      	str	r2, [r3, #32]
 8007b5a:	e008      	b.n	8007b6e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6a1b      	ldr	r3, [r3, #32]
 8007b60:	1c59      	adds	r1, r3, #1
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	6211      	str	r1, [r2, #32]
 8007b66:	781a      	ldrb	r2, [r3, #0]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007b72:	b29b      	uxth	r3, r3
 8007b74:	3b01      	subs	r3, #1
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	687a      	ldr	r2, [r7, #4]
 8007b7a:	4619      	mov	r1, r3
 8007b7c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d10f      	bne.n	8007ba2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	68da      	ldr	r2, [r3, #12]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007b90:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	68da      	ldr	r2, [r3, #12]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ba0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	e000      	b.n	8007ba8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007ba6:	2302      	movs	r3, #2
  }
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	3714      	adds	r7, #20
 8007bac:	46bd      	mov	sp, r7
 8007bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb2:	4770      	bx	lr

08007bb4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b082      	sub	sp, #8
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	68da      	ldr	r2, [r3, #12]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bca:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2220      	movs	r2, #32
 8007bd0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f7ff fefd 	bl	80079d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007bda:	2300      	movs	r3, #0
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3708      	adds	r7, #8
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b084      	sub	sp, #16
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007bf2:	b2db      	uxtb	r3, r3
 8007bf4:	2b22      	cmp	r3, #34	; 0x22
 8007bf6:	d171      	bne.n	8007cdc <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	689b      	ldr	r3, [r3, #8]
 8007bfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c00:	d123      	bne.n	8007c4a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c06:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	691b      	ldr	r3, [r3, #16]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d10e      	bne.n	8007c2e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	b29b      	uxth	r3, r3
 8007c18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c1c:	b29a      	uxth	r2, r3
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c26:	1c9a      	adds	r2, r3, #2
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	629a      	str	r2, [r3, #40]	; 0x28
 8007c2c:	e029      	b.n	8007c82 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	b29b      	uxth	r3, r3
 8007c36:	b2db      	uxtb	r3, r3
 8007c38:	b29a      	uxth	r2, r3
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c42:	1c5a      	adds	r2, r3, #1
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	629a      	str	r2, [r3, #40]	; 0x28
 8007c48:	e01b      	b.n	8007c82 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	691b      	ldr	r3, [r3, #16]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d10a      	bne.n	8007c68 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	6858      	ldr	r0, [r3, #4]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c5c:	1c59      	adds	r1, r3, #1
 8007c5e:	687a      	ldr	r2, [r7, #4]
 8007c60:	6291      	str	r1, [r2, #40]	; 0x28
 8007c62:	b2c2      	uxtb	r2, r0
 8007c64:	701a      	strb	r2, [r3, #0]
 8007c66:	e00c      	b.n	8007c82 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	b2da      	uxtb	r2, r3
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c74:	1c58      	adds	r0, r3, #1
 8007c76:	6879      	ldr	r1, [r7, #4]
 8007c78:	6288      	str	r0, [r1, #40]	; 0x28
 8007c7a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007c7e:	b2d2      	uxtb	r2, r2
 8007c80:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c86:	b29b      	uxth	r3, r3
 8007c88:	3b01      	subs	r3, #1
 8007c8a:	b29b      	uxth	r3, r3
 8007c8c:	687a      	ldr	r2, [r7, #4]
 8007c8e:	4619      	mov	r1, r3
 8007c90:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d120      	bne.n	8007cd8 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	68da      	ldr	r2, [r3, #12]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f022 0220 	bic.w	r2, r2, #32
 8007ca4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	68da      	ldr	r2, [r3, #12]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007cb4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	695a      	ldr	r2, [r3, #20]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f022 0201 	bic.w	r2, r2, #1
 8007cc4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2220      	movs	r2, #32
 8007cca:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f7ff fe8a 	bl	80079e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	e002      	b.n	8007cde <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	e000      	b.n	8007cde <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8007cdc:	2302      	movs	r3, #2
  }
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3710      	adds	r7, #16
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
	...

08007ce8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cec:	b085      	sub	sp, #20
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	691b      	ldr	r3, [r3, #16]
 8007cf8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	68da      	ldr	r2, [r3, #12]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	430a      	orrs	r2, r1
 8007d06:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	689a      	ldr	r2, [r3, #8]
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	691b      	ldr	r3, [r3, #16]
 8007d10:	431a      	orrs	r2, r3
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	695b      	ldr	r3, [r3, #20]
 8007d16:	431a      	orrs	r2, r3
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	69db      	ldr	r3, [r3, #28]
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	68db      	ldr	r3, [r3, #12]
 8007d26:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007d2a:	f023 030c 	bic.w	r3, r3, #12
 8007d2e:	687a      	ldr	r2, [r7, #4]
 8007d30:	6812      	ldr	r2, [r2, #0]
 8007d32:	68f9      	ldr	r1, [r7, #12]
 8007d34:	430b      	orrs	r3, r1
 8007d36:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	695b      	ldr	r3, [r3, #20]
 8007d3e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	699a      	ldr	r2, [r3, #24]
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	430a      	orrs	r2, r1
 8007d4c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	69db      	ldr	r3, [r3, #28]
 8007d52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d56:	f040 818b 	bne.w	8008070 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4ac1      	ldr	r2, [pc, #772]	; (8008064 <UART_SetConfig+0x37c>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d005      	beq.n	8007d70 <UART_SetConfig+0x88>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4abf      	ldr	r2, [pc, #764]	; (8008068 <UART_SetConfig+0x380>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	f040 80bd 	bne.w	8007eea <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007d70:	f7fe fcc2 	bl	80066f8 <HAL_RCC_GetPCLK2Freq>
 8007d74:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	461d      	mov	r5, r3
 8007d7a:	f04f 0600 	mov.w	r6, #0
 8007d7e:	46a8      	mov	r8, r5
 8007d80:	46b1      	mov	r9, r6
 8007d82:	eb18 0308 	adds.w	r3, r8, r8
 8007d86:	eb49 0409 	adc.w	r4, r9, r9
 8007d8a:	4698      	mov	r8, r3
 8007d8c:	46a1      	mov	r9, r4
 8007d8e:	eb18 0805 	adds.w	r8, r8, r5
 8007d92:	eb49 0906 	adc.w	r9, r9, r6
 8007d96:	f04f 0100 	mov.w	r1, #0
 8007d9a:	f04f 0200 	mov.w	r2, #0
 8007d9e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007da2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007da6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007daa:	4688      	mov	r8, r1
 8007dac:	4691      	mov	r9, r2
 8007dae:	eb18 0005 	adds.w	r0, r8, r5
 8007db2:	eb49 0106 	adc.w	r1, r9, r6
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	461d      	mov	r5, r3
 8007dbc:	f04f 0600 	mov.w	r6, #0
 8007dc0:	196b      	adds	r3, r5, r5
 8007dc2:	eb46 0406 	adc.w	r4, r6, r6
 8007dc6:	461a      	mov	r2, r3
 8007dc8:	4623      	mov	r3, r4
 8007dca:	f7f8 ff65 	bl	8000c98 <__aeabi_uldivmod>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	460c      	mov	r4, r1
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	4ba5      	ldr	r3, [pc, #660]	; (800806c <UART_SetConfig+0x384>)
 8007dd6:	fba3 2302 	umull	r2, r3, r3, r2
 8007dda:	095b      	lsrs	r3, r3, #5
 8007ddc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	461d      	mov	r5, r3
 8007de4:	f04f 0600 	mov.w	r6, #0
 8007de8:	46a9      	mov	r9, r5
 8007dea:	46b2      	mov	sl, r6
 8007dec:	eb19 0309 	adds.w	r3, r9, r9
 8007df0:	eb4a 040a 	adc.w	r4, sl, sl
 8007df4:	4699      	mov	r9, r3
 8007df6:	46a2      	mov	sl, r4
 8007df8:	eb19 0905 	adds.w	r9, r9, r5
 8007dfc:	eb4a 0a06 	adc.w	sl, sl, r6
 8007e00:	f04f 0100 	mov.w	r1, #0
 8007e04:	f04f 0200 	mov.w	r2, #0
 8007e08:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007e0c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007e10:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007e14:	4689      	mov	r9, r1
 8007e16:	4692      	mov	sl, r2
 8007e18:	eb19 0005 	adds.w	r0, r9, r5
 8007e1c:	eb4a 0106 	adc.w	r1, sl, r6
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	461d      	mov	r5, r3
 8007e26:	f04f 0600 	mov.w	r6, #0
 8007e2a:	196b      	adds	r3, r5, r5
 8007e2c:	eb46 0406 	adc.w	r4, r6, r6
 8007e30:	461a      	mov	r2, r3
 8007e32:	4623      	mov	r3, r4
 8007e34:	f7f8 ff30 	bl	8000c98 <__aeabi_uldivmod>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	460c      	mov	r4, r1
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	4b8b      	ldr	r3, [pc, #556]	; (800806c <UART_SetConfig+0x384>)
 8007e40:	fba3 1302 	umull	r1, r3, r3, r2
 8007e44:	095b      	lsrs	r3, r3, #5
 8007e46:	2164      	movs	r1, #100	; 0x64
 8007e48:	fb01 f303 	mul.w	r3, r1, r3
 8007e4c:	1ad3      	subs	r3, r2, r3
 8007e4e:	00db      	lsls	r3, r3, #3
 8007e50:	3332      	adds	r3, #50	; 0x32
 8007e52:	4a86      	ldr	r2, [pc, #536]	; (800806c <UART_SetConfig+0x384>)
 8007e54:	fba2 2303 	umull	r2, r3, r2, r3
 8007e58:	095b      	lsrs	r3, r3, #5
 8007e5a:	005b      	lsls	r3, r3, #1
 8007e5c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007e60:	4498      	add	r8, r3
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	461d      	mov	r5, r3
 8007e66:	f04f 0600 	mov.w	r6, #0
 8007e6a:	46a9      	mov	r9, r5
 8007e6c:	46b2      	mov	sl, r6
 8007e6e:	eb19 0309 	adds.w	r3, r9, r9
 8007e72:	eb4a 040a 	adc.w	r4, sl, sl
 8007e76:	4699      	mov	r9, r3
 8007e78:	46a2      	mov	sl, r4
 8007e7a:	eb19 0905 	adds.w	r9, r9, r5
 8007e7e:	eb4a 0a06 	adc.w	sl, sl, r6
 8007e82:	f04f 0100 	mov.w	r1, #0
 8007e86:	f04f 0200 	mov.w	r2, #0
 8007e8a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007e8e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007e92:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007e96:	4689      	mov	r9, r1
 8007e98:	4692      	mov	sl, r2
 8007e9a:	eb19 0005 	adds.w	r0, r9, r5
 8007e9e:	eb4a 0106 	adc.w	r1, sl, r6
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	461d      	mov	r5, r3
 8007ea8:	f04f 0600 	mov.w	r6, #0
 8007eac:	196b      	adds	r3, r5, r5
 8007eae:	eb46 0406 	adc.w	r4, r6, r6
 8007eb2:	461a      	mov	r2, r3
 8007eb4:	4623      	mov	r3, r4
 8007eb6:	f7f8 feef 	bl	8000c98 <__aeabi_uldivmod>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	460c      	mov	r4, r1
 8007ebe:	461a      	mov	r2, r3
 8007ec0:	4b6a      	ldr	r3, [pc, #424]	; (800806c <UART_SetConfig+0x384>)
 8007ec2:	fba3 1302 	umull	r1, r3, r3, r2
 8007ec6:	095b      	lsrs	r3, r3, #5
 8007ec8:	2164      	movs	r1, #100	; 0x64
 8007eca:	fb01 f303 	mul.w	r3, r1, r3
 8007ece:	1ad3      	subs	r3, r2, r3
 8007ed0:	00db      	lsls	r3, r3, #3
 8007ed2:	3332      	adds	r3, #50	; 0x32
 8007ed4:	4a65      	ldr	r2, [pc, #404]	; (800806c <UART_SetConfig+0x384>)
 8007ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8007eda:	095b      	lsrs	r3, r3, #5
 8007edc:	f003 0207 	and.w	r2, r3, #7
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4442      	add	r2, r8
 8007ee6:	609a      	str	r2, [r3, #8]
 8007ee8:	e26f      	b.n	80083ca <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007eea:	f7fe fbf1 	bl	80066d0 <HAL_RCC_GetPCLK1Freq>
 8007eee:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	461d      	mov	r5, r3
 8007ef4:	f04f 0600 	mov.w	r6, #0
 8007ef8:	46a8      	mov	r8, r5
 8007efa:	46b1      	mov	r9, r6
 8007efc:	eb18 0308 	adds.w	r3, r8, r8
 8007f00:	eb49 0409 	adc.w	r4, r9, r9
 8007f04:	4698      	mov	r8, r3
 8007f06:	46a1      	mov	r9, r4
 8007f08:	eb18 0805 	adds.w	r8, r8, r5
 8007f0c:	eb49 0906 	adc.w	r9, r9, r6
 8007f10:	f04f 0100 	mov.w	r1, #0
 8007f14:	f04f 0200 	mov.w	r2, #0
 8007f18:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007f1c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007f20:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007f24:	4688      	mov	r8, r1
 8007f26:	4691      	mov	r9, r2
 8007f28:	eb18 0005 	adds.w	r0, r8, r5
 8007f2c:	eb49 0106 	adc.w	r1, r9, r6
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	461d      	mov	r5, r3
 8007f36:	f04f 0600 	mov.w	r6, #0
 8007f3a:	196b      	adds	r3, r5, r5
 8007f3c:	eb46 0406 	adc.w	r4, r6, r6
 8007f40:	461a      	mov	r2, r3
 8007f42:	4623      	mov	r3, r4
 8007f44:	f7f8 fea8 	bl	8000c98 <__aeabi_uldivmod>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	460c      	mov	r4, r1
 8007f4c:	461a      	mov	r2, r3
 8007f4e:	4b47      	ldr	r3, [pc, #284]	; (800806c <UART_SetConfig+0x384>)
 8007f50:	fba3 2302 	umull	r2, r3, r3, r2
 8007f54:	095b      	lsrs	r3, r3, #5
 8007f56:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	461d      	mov	r5, r3
 8007f5e:	f04f 0600 	mov.w	r6, #0
 8007f62:	46a9      	mov	r9, r5
 8007f64:	46b2      	mov	sl, r6
 8007f66:	eb19 0309 	adds.w	r3, r9, r9
 8007f6a:	eb4a 040a 	adc.w	r4, sl, sl
 8007f6e:	4699      	mov	r9, r3
 8007f70:	46a2      	mov	sl, r4
 8007f72:	eb19 0905 	adds.w	r9, r9, r5
 8007f76:	eb4a 0a06 	adc.w	sl, sl, r6
 8007f7a:	f04f 0100 	mov.w	r1, #0
 8007f7e:	f04f 0200 	mov.w	r2, #0
 8007f82:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007f86:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007f8a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007f8e:	4689      	mov	r9, r1
 8007f90:	4692      	mov	sl, r2
 8007f92:	eb19 0005 	adds.w	r0, r9, r5
 8007f96:	eb4a 0106 	adc.w	r1, sl, r6
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	461d      	mov	r5, r3
 8007fa0:	f04f 0600 	mov.w	r6, #0
 8007fa4:	196b      	adds	r3, r5, r5
 8007fa6:	eb46 0406 	adc.w	r4, r6, r6
 8007faa:	461a      	mov	r2, r3
 8007fac:	4623      	mov	r3, r4
 8007fae:	f7f8 fe73 	bl	8000c98 <__aeabi_uldivmod>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	460c      	mov	r4, r1
 8007fb6:	461a      	mov	r2, r3
 8007fb8:	4b2c      	ldr	r3, [pc, #176]	; (800806c <UART_SetConfig+0x384>)
 8007fba:	fba3 1302 	umull	r1, r3, r3, r2
 8007fbe:	095b      	lsrs	r3, r3, #5
 8007fc0:	2164      	movs	r1, #100	; 0x64
 8007fc2:	fb01 f303 	mul.w	r3, r1, r3
 8007fc6:	1ad3      	subs	r3, r2, r3
 8007fc8:	00db      	lsls	r3, r3, #3
 8007fca:	3332      	adds	r3, #50	; 0x32
 8007fcc:	4a27      	ldr	r2, [pc, #156]	; (800806c <UART_SetConfig+0x384>)
 8007fce:	fba2 2303 	umull	r2, r3, r2, r3
 8007fd2:	095b      	lsrs	r3, r3, #5
 8007fd4:	005b      	lsls	r3, r3, #1
 8007fd6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007fda:	4498      	add	r8, r3
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	461d      	mov	r5, r3
 8007fe0:	f04f 0600 	mov.w	r6, #0
 8007fe4:	46a9      	mov	r9, r5
 8007fe6:	46b2      	mov	sl, r6
 8007fe8:	eb19 0309 	adds.w	r3, r9, r9
 8007fec:	eb4a 040a 	adc.w	r4, sl, sl
 8007ff0:	4699      	mov	r9, r3
 8007ff2:	46a2      	mov	sl, r4
 8007ff4:	eb19 0905 	adds.w	r9, r9, r5
 8007ff8:	eb4a 0a06 	adc.w	sl, sl, r6
 8007ffc:	f04f 0100 	mov.w	r1, #0
 8008000:	f04f 0200 	mov.w	r2, #0
 8008004:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008008:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800800c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008010:	4689      	mov	r9, r1
 8008012:	4692      	mov	sl, r2
 8008014:	eb19 0005 	adds.w	r0, r9, r5
 8008018:	eb4a 0106 	adc.w	r1, sl, r6
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	461d      	mov	r5, r3
 8008022:	f04f 0600 	mov.w	r6, #0
 8008026:	196b      	adds	r3, r5, r5
 8008028:	eb46 0406 	adc.w	r4, r6, r6
 800802c:	461a      	mov	r2, r3
 800802e:	4623      	mov	r3, r4
 8008030:	f7f8 fe32 	bl	8000c98 <__aeabi_uldivmod>
 8008034:	4603      	mov	r3, r0
 8008036:	460c      	mov	r4, r1
 8008038:	461a      	mov	r2, r3
 800803a:	4b0c      	ldr	r3, [pc, #48]	; (800806c <UART_SetConfig+0x384>)
 800803c:	fba3 1302 	umull	r1, r3, r3, r2
 8008040:	095b      	lsrs	r3, r3, #5
 8008042:	2164      	movs	r1, #100	; 0x64
 8008044:	fb01 f303 	mul.w	r3, r1, r3
 8008048:	1ad3      	subs	r3, r2, r3
 800804a:	00db      	lsls	r3, r3, #3
 800804c:	3332      	adds	r3, #50	; 0x32
 800804e:	4a07      	ldr	r2, [pc, #28]	; (800806c <UART_SetConfig+0x384>)
 8008050:	fba2 2303 	umull	r2, r3, r2, r3
 8008054:	095b      	lsrs	r3, r3, #5
 8008056:	f003 0207 	and.w	r2, r3, #7
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4442      	add	r2, r8
 8008060:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8008062:	e1b2      	b.n	80083ca <UART_SetConfig+0x6e2>
 8008064:	40011000 	.word	0x40011000
 8008068:	40011400 	.word	0x40011400
 800806c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4ad7      	ldr	r2, [pc, #860]	; (80083d4 <UART_SetConfig+0x6ec>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d005      	beq.n	8008086 <UART_SetConfig+0x39e>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	4ad6      	ldr	r2, [pc, #856]	; (80083d8 <UART_SetConfig+0x6f0>)
 8008080:	4293      	cmp	r3, r2
 8008082:	f040 80d1 	bne.w	8008228 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8008086:	f7fe fb37 	bl	80066f8 <HAL_RCC_GetPCLK2Freq>
 800808a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	469a      	mov	sl, r3
 8008090:	f04f 0b00 	mov.w	fp, #0
 8008094:	46d0      	mov	r8, sl
 8008096:	46d9      	mov	r9, fp
 8008098:	eb18 0308 	adds.w	r3, r8, r8
 800809c:	eb49 0409 	adc.w	r4, r9, r9
 80080a0:	4698      	mov	r8, r3
 80080a2:	46a1      	mov	r9, r4
 80080a4:	eb18 080a 	adds.w	r8, r8, sl
 80080a8:	eb49 090b 	adc.w	r9, r9, fp
 80080ac:	f04f 0100 	mov.w	r1, #0
 80080b0:	f04f 0200 	mov.w	r2, #0
 80080b4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80080b8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80080bc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80080c0:	4688      	mov	r8, r1
 80080c2:	4691      	mov	r9, r2
 80080c4:	eb1a 0508 	adds.w	r5, sl, r8
 80080c8:	eb4b 0609 	adc.w	r6, fp, r9
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	4619      	mov	r1, r3
 80080d2:	f04f 0200 	mov.w	r2, #0
 80080d6:	f04f 0300 	mov.w	r3, #0
 80080da:	f04f 0400 	mov.w	r4, #0
 80080de:	0094      	lsls	r4, r2, #2
 80080e0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80080e4:	008b      	lsls	r3, r1, #2
 80080e6:	461a      	mov	r2, r3
 80080e8:	4623      	mov	r3, r4
 80080ea:	4628      	mov	r0, r5
 80080ec:	4631      	mov	r1, r6
 80080ee:	f7f8 fdd3 	bl	8000c98 <__aeabi_uldivmod>
 80080f2:	4603      	mov	r3, r0
 80080f4:	460c      	mov	r4, r1
 80080f6:	461a      	mov	r2, r3
 80080f8:	4bb8      	ldr	r3, [pc, #736]	; (80083dc <UART_SetConfig+0x6f4>)
 80080fa:	fba3 2302 	umull	r2, r3, r3, r2
 80080fe:	095b      	lsrs	r3, r3, #5
 8008100:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	469b      	mov	fp, r3
 8008108:	f04f 0c00 	mov.w	ip, #0
 800810c:	46d9      	mov	r9, fp
 800810e:	46e2      	mov	sl, ip
 8008110:	eb19 0309 	adds.w	r3, r9, r9
 8008114:	eb4a 040a 	adc.w	r4, sl, sl
 8008118:	4699      	mov	r9, r3
 800811a:	46a2      	mov	sl, r4
 800811c:	eb19 090b 	adds.w	r9, r9, fp
 8008120:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008124:	f04f 0100 	mov.w	r1, #0
 8008128:	f04f 0200 	mov.w	r2, #0
 800812c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008130:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008134:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008138:	4689      	mov	r9, r1
 800813a:	4692      	mov	sl, r2
 800813c:	eb1b 0509 	adds.w	r5, fp, r9
 8008140:	eb4c 060a 	adc.w	r6, ip, sl
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	685b      	ldr	r3, [r3, #4]
 8008148:	4619      	mov	r1, r3
 800814a:	f04f 0200 	mov.w	r2, #0
 800814e:	f04f 0300 	mov.w	r3, #0
 8008152:	f04f 0400 	mov.w	r4, #0
 8008156:	0094      	lsls	r4, r2, #2
 8008158:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800815c:	008b      	lsls	r3, r1, #2
 800815e:	461a      	mov	r2, r3
 8008160:	4623      	mov	r3, r4
 8008162:	4628      	mov	r0, r5
 8008164:	4631      	mov	r1, r6
 8008166:	f7f8 fd97 	bl	8000c98 <__aeabi_uldivmod>
 800816a:	4603      	mov	r3, r0
 800816c:	460c      	mov	r4, r1
 800816e:	461a      	mov	r2, r3
 8008170:	4b9a      	ldr	r3, [pc, #616]	; (80083dc <UART_SetConfig+0x6f4>)
 8008172:	fba3 1302 	umull	r1, r3, r3, r2
 8008176:	095b      	lsrs	r3, r3, #5
 8008178:	2164      	movs	r1, #100	; 0x64
 800817a:	fb01 f303 	mul.w	r3, r1, r3
 800817e:	1ad3      	subs	r3, r2, r3
 8008180:	011b      	lsls	r3, r3, #4
 8008182:	3332      	adds	r3, #50	; 0x32
 8008184:	4a95      	ldr	r2, [pc, #596]	; (80083dc <UART_SetConfig+0x6f4>)
 8008186:	fba2 2303 	umull	r2, r3, r2, r3
 800818a:	095b      	lsrs	r3, r3, #5
 800818c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008190:	4498      	add	r8, r3
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	469b      	mov	fp, r3
 8008196:	f04f 0c00 	mov.w	ip, #0
 800819a:	46d9      	mov	r9, fp
 800819c:	46e2      	mov	sl, ip
 800819e:	eb19 0309 	adds.w	r3, r9, r9
 80081a2:	eb4a 040a 	adc.w	r4, sl, sl
 80081a6:	4699      	mov	r9, r3
 80081a8:	46a2      	mov	sl, r4
 80081aa:	eb19 090b 	adds.w	r9, r9, fp
 80081ae:	eb4a 0a0c 	adc.w	sl, sl, ip
 80081b2:	f04f 0100 	mov.w	r1, #0
 80081b6:	f04f 0200 	mov.w	r2, #0
 80081ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80081be:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80081c2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80081c6:	4689      	mov	r9, r1
 80081c8:	4692      	mov	sl, r2
 80081ca:	eb1b 0509 	adds.w	r5, fp, r9
 80081ce:	eb4c 060a 	adc.w	r6, ip, sl
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	4619      	mov	r1, r3
 80081d8:	f04f 0200 	mov.w	r2, #0
 80081dc:	f04f 0300 	mov.w	r3, #0
 80081e0:	f04f 0400 	mov.w	r4, #0
 80081e4:	0094      	lsls	r4, r2, #2
 80081e6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80081ea:	008b      	lsls	r3, r1, #2
 80081ec:	461a      	mov	r2, r3
 80081ee:	4623      	mov	r3, r4
 80081f0:	4628      	mov	r0, r5
 80081f2:	4631      	mov	r1, r6
 80081f4:	f7f8 fd50 	bl	8000c98 <__aeabi_uldivmod>
 80081f8:	4603      	mov	r3, r0
 80081fa:	460c      	mov	r4, r1
 80081fc:	461a      	mov	r2, r3
 80081fe:	4b77      	ldr	r3, [pc, #476]	; (80083dc <UART_SetConfig+0x6f4>)
 8008200:	fba3 1302 	umull	r1, r3, r3, r2
 8008204:	095b      	lsrs	r3, r3, #5
 8008206:	2164      	movs	r1, #100	; 0x64
 8008208:	fb01 f303 	mul.w	r3, r1, r3
 800820c:	1ad3      	subs	r3, r2, r3
 800820e:	011b      	lsls	r3, r3, #4
 8008210:	3332      	adds	r3, #50	; 0x32
 8008212:	4a72      	ldr	r2, [pc, #456]	; (80083dc <UART_SetConfig+0x6f4>)
 8008214:	fba2 2303 	umull	r2, r3, r2, r3
 8008218:	095b      	lsrs	r3, r3, #5
 800821a:	f003 020f 	and.w	r2, r3, #15
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4442      	add	r2, r8
 8008224:	609a      	str	r2, [r3, #8]
 8008226:	e0d0      	b.n	80083ca <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8008228:	f7fe fa52 	bl	80066d0 <HAL_RCC_GetPCLK1Freq>
 800822c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	469a      	mov	sl, r3
 8008232:	f04f 0b00 	mov.w	fp, #0
 8008236:	46d0      	mov	r8, sl
 8008238:	46d9      	mov	r9, fp
 800823a:	eb18 0308 	adds.w	r3, r8, r8
 800823e:	eb49 0409 	adc.w	r4, r9, r9
 8008242:	4698      	mov	r8, r3
 8008244:	46a1      	mov	r9, r4
 8008246:	eb18 080a 	adds.w	r8, r8, sl
 800824a:	eb49 090b 	adc.w	r9, r9, fp
 800824e:	f04f 0100 	mov.w	r1, #0
 8008252:	f04f 0200 	mov.w	r2, #0
 8008256:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800825a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800825e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008262:	4688      	mov	r8, r1
 8008264:	4691      	mov	r9, r2
 8008266:	eb1a 0508 	adds.w	r5, sl, r8
 800826a:	eb4b 0609 	adc.w	r6, fp, r9
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	685b      	ldr	r3, [r3, #4]
 8008272:	4619      	mov	r1, r3
 8008274:	f04f 0200 	mov.w	r2, #0
 8008278:	f04f 0300 	mov.w	r3, #0
 800827c:	f04f 0400 	mov.w	r4, #0
 8008280:	0094      	lsls	r4, r2, #2
 8008282:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008286:	008b      	lsls	r3, r1, #2
 8008288:	461a      	mov	r2, r3
 800828a:	4623      	mov	r3, r4
 800828c:	4628      	mov	r0, r5
 800828e:	4631      	mov	r1, r6
 8008290:	f7f8 fd02 	bl	8000c98 <__aeabi_uldivmod>
 8008294:	4603      	mov	r3, r0
 8008296:	460c      	mov	r4, r1
 8008298:	461a      	mov	r2, r3
 800829a:	4b50      	ldr	r3, [pc, #320]	; (80083dc <UART_SetConfig+0x6f4>)
 800829c:	fba3 2302 	umull	r2, r3, r3, r2
 80082a0:	095b      	lsrs	r3, r3, #5
 80082a2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	469b      	mov	fp, r3
 80082aa:	f04f 0c00 	mov.w	ip, #0
 80082ae:	46d9      	mov	r9, fp
 80082b0:	46e2      	mov	sl, ip
 80082b2:	eb19 0309 	adds.w	r3, r9, r9
 80082b6:	eb4a 040a 	adc.w	r4, sl, sl
 80082ba:	4699      	mov	r9, r3
 80082bc:	46a2      	mov	sl, r4
 80082be:	eb19 090b 	adds.w	r9, r9, fp
 80082c2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80082c6:	f04f 0100 	mov.w	r1, #0
 80082ca:	f04f 0200 	mov.w	r2, #0
 80082ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80082d2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80082d6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80082da:	4689      	mov	r9, r1
 80082dc:	4692      	mov	sl, r2
 80082de:	eb1b 0509 	adds.w	r5, fp, r9
 80082e2:	eb4c 060a 	adc.w	r6, ip, sl
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	685b      	ldr	r3, [r3, #4]
 80082ea:	4619      	mov	r1, r3
 80082ec:	f04f 0200 	mov.w	r2, #0
 80082f0:	f04f 0300 	mov.w	r3, #0
 80082f4:	f04f 0400 	mov.w	r4, #0
 80082f8:	0094      	lsls	r4, r2, #2
 80082fa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80082fe:	008b      	lsls	r3, r1, #2
 8008300:	461a      	mov	r2, r3
 8008302:	4623      	mov	r3, r4
 8008304:	4628      	mov	r0, r5
 8008306:	4631      	mov	r1, r6
 8008308:	f7f8 fcc6 	bl	8000c98 <__aeabi_uldivmod>
 800830c:	4603      	mov	r3, r0
 800830e:	460c      	mov	r4, r1
 8008310:	461a      	mov	r2, r3
 8008312:	4b32      	ldr	r3, [pc, #200]	; (80083dc <UART_SetConfig+0x6f4>)
 8008314:	fba3 1302 	umull	r1, r3, r3, r2
 8008318:	095b      	lsrs	r3, r3, #5
 800831a:	2164      	movs	r1, #100	; 0x64
 800831c:	fb01 f303 	mul.w	r3, r1, r3
 8008320:	1ad3      	subs	r3, r2, r3
 8008322:	011b      	lsls	r3, r3, #4
 8008324:	3332      	adds	r3, #50	; 0x32
 8008326:	4a2d      	ldr	r2, [pc, #180]	; (80083dc <UART_SetConfig+0x6f4>)
 8008328:	fba2 2303 	umull	r2, r3, r2, r3
 800832c:	095b      	lsrs	r3, r3, #5
 800832e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008332:	4498      	add	r8, r3
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	469b      	mov	fp, r3
 8008338:	f04f 0c00 	mov.w	ip, #0
 800833c:	46d9      	mov	r9, fp
 800833e:	46e2      	mov	sl, ip
 8008340:	eb19 0309 	adds.w	r3, r9, r9
 8008344:	eb4a 040a 	adc.w	r4, sl, sl
 8008348:	4699      	mov	r9, r3
 800834a:	46a2      	mov	sl, r4
 800834c:	eb19 090b 	adds.w	r9, r9, fp
 8008350:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008354:	f04f 0100 	mov.w	r1, #0
 8008358:	f04f 0200 	mov.w	r2, #0
 800835c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008360:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008364:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008368:	4689      	mov	r9, r1
 800836a:	4692      	mov	sl, r2
 800836c:	eb1b 0509 	adds.w	r5, fp, r9
 8008370:	eb4c 060a 	adc.w	r6, ip, sl
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	4619      	mov	r1, r3
 800837a:	f04f 0200 	mov.w	r2, #0
 800837e:	f04f 0300 	mov.w	r3, #0
 8008382:	f04f 0400 	mov.w	r4, #0
 8008386:	0094      	lsls	r4, r2, #2
 8008388:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800838c:	008b      	lsls	r3, r1, #2
 800838e:	461a      	mov	r2, r3
 8008390:	4623      	mov	r3, r4
 8008392:	4628      	mov	r0, r5
 8008394:	4631      	mov	r1, r6
 8008396:	f7f8 fc7f 	bl	8000c98 <__aeabi_uldivmod>
 800839a:	4603      	mov	r3, r0
 800839c:	460c      	mov	r4, r1
 800839e:	461a      	mov	r2, r3
 80083a0:	4b0e      	ldr	r3, [pc, #56]	; (80083dc <UART_SetConfig+0x6f4>)
 80083a2:	fba3 1302 	umull	r1, r3, r3, r2
 80083a6:	095b      	lsrs	r3, r3, #5
 80083a8:	2164      	movs	r1, #100	; 0x64
 80083aa:	fb01 f303 	mul.w	r3, r1, r3
 80083ae:	1ad3      	subs	r3, r2, r3
 80083b0:	011b      	lsls	r3, r3, #4
 80083b2:	3332      	adds	r3, #50	; 0x32
 80083b4:	4a09      	ldr	r2, [pc, #36]	; (80083dc <UART_SetConfig+0x6f4>)
 80083b6:	fba2 2303 	umull	r2, r3, r2, r3
 80083ba:	095b      	lsrs	r3, r3, #5
 80083bc:	f003 020f 	and.w	r2, r3, #15
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4442      	add	r2, r8
 80083c6:	609a      	str	r2, [r3, #8]
}
 80083c8:	e7ff      	b.n	80083ca <UART_SetConfig+0x6e2>
 80083ca:	bf00      	nop
 80083cc:	3714      	adds	r7, #20
 80083ce:	46bd      	mov	sp, r7
 80083d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083d4:	40011000 	.word	0x40011000
 80083d8:	40011400 	.word	0x40011400
 80083dc:	51eb851f 	.word	0x51eb851f

080083e0 <__errno>:
 80083e0:	4b01      	ldr	r3, [pc, #4]	; (80083e8 <__errno+0x8>)
 80083e2:	6818      	ldr	r0, [r3, #0]
 80083e4:	4770      	bx	lr
 80083e6:	bf00      	nop
 80083e8:	20000054 	.word	0x20000054

080083ec <__libc_init_array>:
 80083ec:	b570      	push	{r4, r5, r6, lr}
 80083ee:	4e0d      	ldr	r6, [pc, #52]	; (8008424 <__libc_init_array+0x38>)
 80083f0:	4c0d      	ldr	r4, [pc, #52]	; (8008428 <__libc_init_array+0x3c>)
 80083f2:	1ba4      	subs	r4, r4, r6
 80083f4:	10a4      	asrs	r4, r4, #2
 80083f6:	2500      	movs	r5, #0
 80083f8:	42a5      	cmp	r5, r4
 80083fa:	d109      	bne.n	8008410 <__libc_init_array+0x24>
 80083fc:	4e0b      	ldr	r6, [pc, #44]	; (800842c <__libc_init_array+0x40>)
 80083fe:	4c0c      	ldr	r4, [pc, #48]	; (8008430 <__libc_init_array+0x44>)
 8008400:	f003 fb44 	bl	800ba8c <_init>
 8008404:	1ba4      	subs	r4, r4, r6
 8008406:	10a4      	asrs	r4, r4, #2
 8008408:	2500      	movs	r5, #0
 800840a:	42a5      	cmp	r5, r4
 800840c:	d105      	bne.n	800841a <__libc_init_array+0x2e>
 800840e:	bd70      	pop	{r4, r5, r6, pc}
 8008410:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008414:	4798      	blx	r3
 8008416:	3501      	adds	r5, #1
 8008418:	e7ee      	b.n	80083f8 <__libc_init_array+0xc>
 800841a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800841e:	4798      	blx	r3
 8008420:	3501      	adds	r5, #1
 8008422:	e7f2      	b.n	800840a <__libc_init_array+0x1e>
 8008424:	0800c100 	.word	0x0800c100
 8008428:	0800c100 	.word	0x0800c100
 800842c:	0800c100 	.word	0x0800c100
 8008430:	0800c104 	.word	0x0800c104

08008434 <memset>:
 8008434:	4402      	add	r2, r0
 8008436:	4603      	mov	r3, r0
 8008438:	4293      	cmp	r3, r2
 800843a:	d100      	bne.n	800843e <memset+0xa>
 800843c:	4770      	bx	lr
 800843e:	f803 1b01 	strb.w	r1, [r3], #1
 8008442:	e7f9      	b.n	8008438 <memset+0x4>

08008444 <__cvt>:
 8008444:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008448:	ec55 4b10 	vmov	r4, r5, d0
 800844c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800844e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008452:	2d00      	cmp	r5, #0
 8008454:	460e      	mov	r6, r1
 8008456:	4691      	mov	r9, r2
 8008458:	4619      	mov	r1, r3
 800845a:	bfb8      	it	lt
 800845c:	4622      	movlt	r2, r4
 800845e:	462b      	mov	r3, r5
 8008460:	f027 0720 	bic.w	r7, r7, #32
 8008464:	bfbb      	ittet	lt
 8008466:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800846a:	461d      	movlt	r5, r3
 800846c:	2300      	movge	r3, #0
 800846e:	232d      	movlt	r3, #45	; 0x2d
 8008470:	bfb8      	it	lt
 8008472:	4614      	movlt	r4, r2
 8008474:	2f46      	cmp	r7, #70	; 0x46
 8008476:	700b      	strb	r3, [r1, #0]
 8008478:	d004      	beq.n	8008484 <__cvt+0x40>
 800847a:	2f45      	cmp	r7, #69	; 0x45
 800847c:	d100      	bne.n	8008480 <__cvt+0x3c>
 800847e:	3601      	adds	r6, #1
 8008480:	2102      	movs	r1, #2
 8008482:	e000      	b.n	8008486 <__cvt+0x42>
 8008484:	2103      	movs	r1, #3
 8008486:	ab03      	add	r3, sp, #12
 8008488:	9301      	str	r3, [sp, #4]
 800848a:	ab02      	add	r3, sp, #8
 800848c:	9300      	str	r3, [sp, #0]
 800848e:	4632      	mov	r2, r6
 8008490:	4653      	mov	r3, sl
 8008492:	ec45 4b10 	vmov	d0, r4, r5
 8008496:	f001 fb67 	bl	8009b68 <_dtoa_r>
 800849a:	2f47      	cmp	r7, #71	; 0x47
 800849c:	4680      	mov	r8, r0
 800849e:	d102      	bne.n	80084a6 <__cvt+0x62>
 80084a0:	f019 0f01 	tst.w	r9, #1
 80084a4:	d026      	beq.n	80084f4 <__cvt+0xb0>
 80084a6:	2f46      	cmp	r7, #70	; 0x46
 80084a8:	eb08 0906 	add.w	r9, r8, r6
 80084ac:	d111      	bne.n	80084d2 <__cvt+0x8e>
 80084ae:	f898 3000 	ldrb.w	r3, [r8]
 80084b2:	2b30      	cmp	r3, #48	; 0x30
 80084b4:	d10a      	bne.n	80084cc <__cvt+0x88>
 80084b6:	2200      	movs	r2, #0
 80084b8:	2300      	movs	r3, #0
 80084ba:	4620      	mov	r0, r4
 80084bc:	4629      	mov	r1, r5
 80084be:	f7f8 fb0b 	bl	8000ad8 <__aeabi_dcmpeq>
 80084c2:	b918      	cbnz	r0, 80084cc <__cvt+0x88>
 80084c4:	f1c6 0601 	rsb	r6, r6, #1
 80084c8:	f8ca 6000 	str.w	r6, [sl]
 80084cc:	f8da 3000 	ldr.w	r3, [sl]
 80084d0:	4499      	add	r9, r3
 80084d2:	2200      	movs	r2, #0
 80084d4:	2300      	movs	r3, #0
 80084d6:	4620      	mov	r0, r4
 80084d8:	4629      	mov	r1, r5
 80084da:	f7f8 fafd 	bl	8000ad8 <__aeabi_dcmpeq>
 80084de:	b938      	cbnz	r0, 80084f0 <__cvt+0xac>
 80084e0:	2230      	movs	r2, #48	; 0x30
 80084e2:	9b03      	ldr	r3, [sp, #12]
 80084e4:	454b      	cmp	r3, r9
 80084e6:	d205      	bcs.n	80084f4 <__cvt+0xb0>
 80084e8:	1c59      	adds	r1, r3, #1
 80084ea:	9103      	str	r1, [sp, #12]
 80084ec:	701a      	strb	r2, [r3, #0]
 80084ee:	e7f8      	b.n	80084e2 <__cvt+0x9e>
 80084f0:	f8cd 900c 	str.w	r9, [sp, #12]
 80084f4:	9b03      	ldr	r3, [sp, #12]
 80084f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80084f8:	eba3 0308 	sub.w	r3, r3, r8
 80084fc:	4640      	mov	r0, r8
 80084fe:	6013      	str	r3, [r2, #0]
 8008500:	b004      	add	sp, #16
 8008502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008506 <__exponent>:
 8008506:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008508:	2900      	cmp	r1, #0
 800850a:	4604      	mov	r4, r0
 800850c:	bfba      	itte	lt
 800850e:	4249      	neglt	r1, r1
 8008510:	232d      	movlt	r3, #45	; 0x2d
 8008512:	232b      	movge	r3, #43	; 0x2b
 8008514:	2909      	cmp	r1, #9
 8008516:	f804 2b02 	strb.w	r2, [r4], #2
 800851a:	7043      	strb	r3, [r0, #1]
 800851c:	dd20      	ble.n	8008560 <__exponent+0x5a>
 800851e:	f10d 0307 	add.w	r3, sp, #7
 8008522:	461f      	mov	r7, r3
 8008524:	260a      	movs	r6, #10
 8008526:	fb91 f5f6 	sdiv	r5, r1, r6
 800852a:	fb06 1115 	mls	r1, r6, r5, r1
 800852e:	3130      	adds	r1, #48	; 0x30
 8008530:	2d09      	cmp	r5, #9
 8008532:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008536:	f103 32ff 	add.w	r2, r3, #4294967295
 800853a:	4629      	mov	r1, r5
 800853c:	dc09      	bgt.n	8008552 <__exponent+0x4c>
 800853e:	3130      	adds	r1, #48	; 0x30
 8008540:	3b02      	subs	r3, #2
 8008542:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008546:	42bb      	cmp	r3, r7
 8008548:	4622      	mov	r2, r4
 800854a:	d304      	bcc.n	8008556 <__exponent+0x50>
 800854c:	1a10      	subs	r0, r2, r0
 800854e:	b003      	add	sp, #12
 8008550:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008552:	4613      	mov	r3, r2
 8008554:	e7e7      	b.n	8008526 <__exponent+0x20>
 8008556:	f813 2b01 	ldrb.w	r2, [r3], #1
 800855a:	f804 2b01 	strb.w	r2, [r4], #1
 800855e:	e7f2      	b.n	8008546 <__exponent+0x40>
 8008560:	2330      	movs	r3, #48	; 0x30
 8008562:	4419      	add	r1, r3
 8008564:	7083      	strb	r3, [r0, #2]
 8008566:	1d02      	adds	r2, r0, #4
 8008568:	70c1      	strb	r1, [r0, #3]
 800856a:	e7ef      	b.n	800854c <__exponent+0x46>

0800856c <_printf_float>:
 800856c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008570:	b08d      	sub	sp, #52	; 0x34
 8008572:	460c      	mov	r4, r1
 8008574:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8008578:	4616      	mov	r6, r2
 800857a:	461f      	mov	r7, r3
 800857c:	4605      	mov	r5, r0
 800857e:	f002 fbd3 	bl	800ad28 <_localeconv_r>
 8008582:	6803      	ldr	r3, [r0, #0]
 8008584:	9304      	str	r3, [sp, #16]
 8008586:	4618      	mov	r0, r3
 8008588:	f7f7 fe2a 	bl	80001e0 <strlen>
 800858c:	2300      	movs	r3, #0
 800858e:	930a      	str	r3, [sp, #40]	; 0x28
 8008590:	f8d8 3000 	ldr.w	r3, [r8]
 8008594:	9005      	str	r0, [sp, #20]
 8008596:	3307      	adds	r3, #7
 8008598:	f023 0307 	bic.w	r3, r3, #7
 800859c:	f103 0208 	add.w	r2, r3, #8
 80085a0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80085a4:	f8d4 b000 	ldr.w	fp, [r4]
 80085a8:	f8c8 2000 	str.w	r2, [r8]
 80085ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80085b4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80085b8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80085bc:	9307      	str	r3, [sp, #28]
 80085be:	f8cd 8018 	str.w	r8, [sp, #24]
 80085c2:	f04f 32ff 	mov.w	r2, #4294967295
 80085c6:	4ba7      	ldr	r3, [pc, #668]	; (8008864 <_printf_float+0x2f8>)
 80085c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80085cc:	f7f8 fab6 	bl	8000b3c <__aeabi_dcmpun>
 80085d0:	bb70      	cbnz	r0, 8008630 <_printf_float+0xc4>
 80085d2:	f04f 32ff 	mov.w	r2, #4294967295
 80085d6:	4ba3      	ldr	r3, [pc, #652]	; (8008864 <_printf_float+0x2f8>)
 80085d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80085dc:	f7f8 fa90 	bl	8000b00 <__aeabi_dcmple>
 80085e0:	bb30      	cbnz	r0, 8008630 <_printf_float+0xc4>
 80085e2:	2200      	movs	r2, #0
 80085e4:	2300      	movs	r3, #0
 80085e6:	4640      	mov	r0, r8
 80085e8:	4649      	mov	r1, r9
 80085ea:	f7f8 fa7f 	bl	8000aec <__aeabi_dcmplt>
 80085ee:	b110      	cbz	r0, 80085f6 <_printf_float+0x8a>
 80085f0:	232d      	movs	r3, #45	; 0x2d
 80085f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085f6:	4a9c      	ldr	r2, [pc, #624]	; (8008868 <_printf_float+0x2fc>)
 80085f8:	4b9c      	ldr	r3, [pc, #624]	; (800886c <_printf_float+0x300>)
 80085fa:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80085fe:	bf8c      	ite	hi
 8008600:	4690      	movhi	r8, r2
 8008602:	4698      	movls	r8, r3
 8008604:	2303      	movs	r3, #3
 8008606:	f02b 0204 	bic.w	r2, fp, #4
 800860a:	6123      	str	r3, [r4, #16]
 800860c:	6022      	str	r2, [r4, #0]
 800860e:	f04f 0900 	mov.w	r9, #0
 8008612:	9700      	str	r7, [sp, #0]
 8008614:	4633      	mov	r3, r6
 8008616:	aa0b      	add	r2, sp, #44	; 0x2c
 8008618:	4621      	mov	r1, r4
 800861a:	4628      	mov	r0, r5
 800861c:	f000 f9e6 	bl	80089ec <_printf_common>
 8008620:	3001      	adds	r0, #1
 8008622:	f040 808d 	bne.w	8008740 <_printf_float+0x1d4>
 8008626:	f04f 30ff 	mov.w	r0, #4294967295
 800862a:	b00d      	add	sp, #52	; 0x34
 800862c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008630:	4642      	mov	r2, r8
 8008632:	464b      	mov	r3, r9
 8008634:	4640      	mov	r0, r8
 8008636:	4649      	mov	r1, r9
 8008638:	f7f8 fa80 	bl	8000b3c <__aeabi_dcmpun>
 800863c:	b110      	cbz	r0, 8008644 <_printf_float+0xd8>
 800863e:	4a8c      	ldr	r2, [pc, #560]	; (8008870 <_printf_float+0x304>)
 8008640:	4b8c      	ldr	r3, [pc, #560]	; (8008874 <_printf_float+0x308>)
 8008642:	e7da      	b.n	80085fa <_printf_float+0x8e>
 8008644:	6861      	ldr	r1, [r4, #4]
 8008646:	1c4b      	adds	r3, r1, #1
 8008648:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800864c:	a80a      	add	r0, sp, #40	; 0x28
 800864e:	d13e      	bne.n	80086ce <_printf_float+0x162>
 8008650:	2306      	movs	r3, #6
 8008652:	6063      	str	r3, [r4, #4]
 8008654:	2300      	movs	r3, #0
 8008656:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800865a:	ab09      	add	r3, sp, #36	; 0x24
 800865c:	9300      	str	r3, [sp, #0]
 800865e:	ec49 8b10 	vmov	d0, r8, r9
 8008662:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008666:	6022      	str	r2, [r4, #0]
 8008668:	f8cd a004 	str.w	sl, [sp, #4]
 800866c:	6861      	ldr	r1, [r4, #4]
 800866e:	4628      	mov	r0, r5
 8008670:	f7ff fee8 	bl	8008444 <__cvt>
 8008674:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8008678:	2b47      	cmp	r3, #71	; 0x47
 800867a:	4680      	mov	r8, r0
 800867c:	d109      	bne.n	8008692 <_printf_float+0x126>
 800867e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008680:	1cd8      	adds	r0, r3, #3
 8008682:	db02      	blt.n	800868a <_printf_float+0x11e>
 8008684:	6862      	ldr	r2, [r4, #4]
 8008686:	4293      	cmp	r3, r2
 8008688:	dd47      	ble.n	800871a <_printf_float+0x1ae>
 800868a:	f1aa 0a02 	sub.w	sl, sl, #2
 800868e:	fa5f fa8a 	uxtb.w	sl, sl
 8008692:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008696:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008698:	d824      	bhi.n	80086e4 <_printf_float+0x178>
 800869a:	3901      	subs	r1, #1
 800869c:	4652      	mov	r2, sl
 800869e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80086a2:	9109      	str	r1, [sp, #36]	; 0x24
 80086a4:	f7ff ff2f 	bl	8008506 <__exponent>
 80086a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086aa:	1813      	adds	r3, r2, r0
 80086ac:	2a01      	cmp	r2, #1
 80086ae:	4681      	mov	r9, r0
 80086b0:	6123      	str	r3, [r4, #16]
 80086b2:	dc02      	bgt.n	80086ba <_printf_float+0x14e>
 80086b4:	6822      	ldr	r2, [r4, #0]
 80086b6:	07d1      	lsls	r1, r2, #31
 80086b8:	d501      	bpl.n	80086be <_printf_float+0x152>
 80086ba:	3301      	adds	r3, #1
 80086bc:	6123      	str	r3, [r4, #16]
 80086be:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d0a5      	beq.n	8008612 <_printf_float+0xa6>
 80086c6:	232d      	movs	r3, #45	; 0x2d
 80086c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086cc:	e7a1      	b.n	8008612 <_printf_float+0xa6>
 80086ce:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80086d2:	f000 8177 	beq.w	80089c4 <_printf_float+0x458>
 80086d6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80086da:	d1bb      	bne.n	8008654 <_printf_float+0xe8>
 80086dc:	2900      	cmp	r1, #0
 80086de:	d1b9      	bne.n	8008654 <_printf_float+0xe8>
 80086e0:	2301      	movs	r3, #1
 80086e2:	e7b6      	b.n	8008652 <_printf_float+0xe6>
 80086e4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80086e8:	d119      	bne.n	800871e <_printf_float+0x1b2>
 80086ea:	2900      	cmp	r1, #0
 80086ec:	6863      	ldr	r3, [r4, #4]
 80086ee:	dd0c      	ble.n	800870a <_printf_float+0x19e>
 80086f0:	6121      	str	r1, [r4, #16]
 80086f2:	b913      	cbnz	r3, 80086fa <_printf_float+0x18e>
 80086f4:	6822      	ldr	r2, [r4, #0]
 80086f6:	07d2      	lsls	r2, r2, #31
 80086f8:	d502      	bpl.n	8008700 <_printf_float+0x194>
 80086fa:	3301      	adds	r3, #1
 80086fc:	440b      	add	r3, r1
 80086fe:	6123      	str	r3, [r4, #16]
 8008700:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008702:	65a3      	str	r3, [r4, #88]	; 0x58
 8008704:	f04f 0900 	mov.w	r9, #0
 8008708:	e7d9      	b.n	80086be <_printf_float+0x152>
 800870a:	b913      	cbnz	r3, 8008712 <_printf_float+0x1a6>
 800870c:	6822      	ldr	r2, [r4, #0]
 800870e:	07d0      	lsls	r0, r2, #31
 8008710:	d501      	bpl.n	8008716 <_printf_float+0x1aa>
 8008712:	3302      	adds	r3, #2
 8008714:	e7f3      	b.n	80086fe <_printf_float+0x192>
 8008716:	2301      	movs	r3, #1
 8008718:	e7f1      	b.n	80086fe <_printf_float+0x192>
 800871a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800871e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008722:	4293      	cmp	r3, r2
 8008724:	db05      	blt.n	8008732 <_printf_float+0x1c6>
 8008726:	6822      	ldr	r2, [r4, #0]
 8008728:	6123      	str	r3, [r4, #16]
 800872a:	07d1      	lsls	r1, r2, #31
 800872c:	d5e8      	bpl.n	8008700 <_printf_float+0x194>
 800872e:	3301      	adds	r3, #1
 8008730:	e7e5      	b.n	80086fe <_printf_float+0x192>
 8008732:	2b00      	cmp	r3, #0
 8008734:	bfd4      	ite	le
 8008736:	f1c3 0302 	rsble	r3, r3, #2
 800873a:	2301      	movgt	r3, #1
 800873c:	4413      	add	r3, r2
 800873e:	e7de      	b.n	80086fe <_printf_float+0x192>
 8008740:	6823      	ldr	r3, [r4, #0]
 8008742:	055a      	lsls	r2, r3, #21
 8008744:	d407      	bmi.n	8008756 <_printf_float+0x1ea>
 8008746:	6923      	ldr	r3, [r4, #16]
 8008748:	4642      	mov	r2, r8
 800874a:	4631      	mov	r1, r6
 800874c:	4628      	mov	r0, r5
 800874e:	47b8      	blx	r7
 8008750:	3001      	adds	r0, #1
 8008752:	d12b      	bne.n	80087ac <_printf_float+0x240>
 8008754:	e767      	b.n	8008626 <_printf_float+0xba>
 8008756:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800875a:	f240 80dc 	bls.w	8008916 <_printf_float+0x3aa>
 800875e:	2200      	movs	r2, #0
 8008760:	2300      	movs	r3, #0
 8008762:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008766:	f7f8 f9b7 	bl	8000ad8 <__aeabi_dcmpeq>
 800876a:	2800      	cmp	r0, #0
 800876c:	d033      	beq.n	80087d6 <_printf_float+0x26a>
 800876e:	2301      	movs	r3, #1
 8008770:	4a41      	ldr	r2, [pc, #260]	; (8008878 <_printf_float+0x30c>)
 8008772:	4631      	mov	r1, r6
 8008774:	4628      	mov	r0, r5
 8008776:	47b8      	blx	r7
 8008778:	3001      	adds	r0, #1
 800877a:	f43f af54 	beq.w	8008626 <_printf_float+0xba>
 800877e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008782:	429a      	cmp	r2, r3
 8008784:	db02      	blt.n	800878c <_printf_float+0x220>
 8008786:	6823      	ldr	r3, [r4, #0]
 8008788:	07d8      	lsls	r0, r3, #31
 800878a:	d50f      	bpl.n	80087ac <_printf_float+0x240>
 800878c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008790:	4631      	mov	r1, r6
 8008792:	4628      	mov	r0, r5
 8008794:	47b8      	blx	r7
 8008796:	3001      	adds	r0, #1
 8008798:	f43f af45 	beq.w	8008626 <_printf_float+0xba>
 800879c:	f04f 0800 	mov.w	r8, #0
 80087a0:	f104 091a 	add.w	r9, r4, #26
 80087a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087a6:	3b01      	subs	r3, #1
 80087a8:	4543      	cmp	r3, r8
 80087aa:	dc09      	bgt.n	80087c0 <_printf_float+0x254>
 80087ac:	6823      	ldr	r3, [r4, #0]
 80087ae:	079b      	lsls	r3, r3, #30
 80087b0:	f100 8103 	bmi.w	80089ba <_printf_float+0x44e>
 80087b4:	68e0      	ldr	r0, [r4, #12]
 80087b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087b8:	4298      	cmp	r0, r3
 80087ba:	bfb8      	it	lt
 80087bc:	4618      	movlt	r0, r3
 80087be:	e734      	b.n	800862a <_printf_float+0xbe>
 80087c0:	2301      	movs	r3, #1
 80087c2:	464a      	mov	r2, r9
 80087c4:	4631      	mov	r1, r6
 80087c6:	4628      	mov	r0, r5
 80087c8:	47b8      	blx	r7
 80087ca:	3001      	adds	r0, #1
 80087cc:	f43f af2b 	beq.w	8008626 <_printf_float+0xba>
 80087d0:	f108 0801 	add.w	r8, r8, #1
 80087d4:	e7e6      	b.n	80087a4 <_printf_float+0x238>
 80087d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087d8:	2b00      	cmp	r3, #0
 80087da:	dc2b      	bgt.n	8008834 <_printf_float+0x2c8>
 80087dc:	2301      	movs	r3, #1
 80087de:	4a26      	ldr	r2, [pc, #152]	; (8008878 <_printf_float+0x30c>)
 80087e0:	4631      	mov	r1, r6
 80087e2:	4628      	mov	r0, r5
 80087e4:	47b8      	blx	r7
 80087e6:	3001      	adds	r0, #1
 80087e8:	f43f af1d 	beq.w	8008626 <_printf_float+0xba>
 80087ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087ee:	b923      	cbnz	r3, 80087fa <_printf_float+0x28e>
 80087f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087f2:	b913      	cbnz	r3, 80087fa <_printf_float+0x28e>
 80087f4:	6823      	ldr	r3, [r4, #0]
 80087f6:	07d9      	lsls	r1, r3, #31
 80087f8:	d5d8      	bpl.n	80087ac <_printf_float+0x240>
 80087fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80087fe:	4631      	mov	r1, r6
 8008800:	4628      	mov	r0, r5
 8008802:	47b8      	blx	r7
 8008804:	3001      	adds	r0, #1
 8008806:	f43f af0e 	beq.w	8008626 <_printf_float+0xba>
 800880a:	f04f 0900 	mov.w	r9, #0
 800880e:	f104 0a1a 	add.w	sl, r4, #26
 8008812:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008814:	425b      	negs	r3, r3
 8008816:	454b      	cmp	r3, r9
 8008818:	dc01      	bgt.n	800881e <_printf_float+0x2b2>
 800881a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800881c:	e794      	b.n	8008748 <_printf_float+0x1dc>
 800881e:	2301      	movs	r3, #1
 8008820:	4652      	mov	r2, sl
 8008822:	4631      	mov	r1, r6
 8008824:	4628      	mov	r0, r5
 8008826:	47b8      	blx	r7
 8008828:	3001      	adds	r0, #1
 800882a:	f43f aefc 	beq.w	8008626 <_printf_float+0xba>
 800882e:	f109 0901 	add.w	r9, r9, #1
 8008832:	e7ee      	b.n	8008812 <_printf_float+0x2a6>
 8008834:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008836:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008838:	429a      	cmp	r2, r3
 800883a:	bfa8      	it	ge
 800883c:	461a      	movge	r2, r3
 800883e:	2a00      	cmp	r2, #0
 8008840:	4691      	mov	r9, r2
 8008842:	dd07      	ble.n	8008854 <_printf_float+0x2e8>
 8008844:	4613      	mov	r3, r2
 8008846:	4631      	mov	r1, r6
 8008848:	4642      	mov	r2, r8
 800884a:	4628      	mov	r0, r5
 800884c:	47b8      	blx	r7
 800884e:	3001      	adds	r0, #1
 8008850:	f43f aee9 	beq.w	8008626 <_printf_float+0xba>
 8008854:	f104 031a 	add.w	r3, r4, #26
 8008858:	f04f 0b00 	mov.w	fp, #0
 800885c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008860:	9306      	str	r3, [sp, #24]
 8008862:	e015      	b.n	8008890 <_printf_float+0x324>
 8008864:	7fefffff 	.word	0x7fefffff
 8008868:	0800bde4 	.word	0x0800bde4
 800886c:	0800bde0 	.word	0x0800bde0
 8008870:	0800bdec 	.word	0x0800bdec
 8008874:	0800bde8 	.word	0x0800bde8
 8008878:	0800bdf0 	.word	0x0800bdf0
 800887c:	2301      	movs	r3, #1
 800887e:	9a06      	ldr	r2, [sp, #24]
 8008880:	4631      	mov	r1, r6
 8008882:	4628      	mov	r0, r5
 8008884:	47b8      	blx	r7
 8008886:	3001      	adds	r0, #1
 8008888:	f43f aecd 	beq.w	8008626 <_printf_float+0xba>
 800888c:	f10b 0b01 	add.w	fp, fp, #1
 8008890:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008894:	ebaa 0309 	sub.w	r3, sl, r9
 8008898:	455b      	cmp	r3, fp
 800889a:	dcef      	bgt.n	800887c <_printf_float+0x310>
 800889c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80088a0:	429a      	cmp	r2, r3
 80088a2:	44d0      	add	r8, sl
 80088a4:	db15      	blt.n	80088d2 <_printf_float+0x366>
 80088a6:	6823      	ldr	r3, [r4, #0]
 80088a8:	07da      	lsls	r2, r3, #31
 80088aa:	d412      	bmi.n	80088d2 <_printf_float+0x366>
 80088ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 80088b0:	eba3 020a 	sub.w	r2, r3, sl
 80088b4:	eba3 0a01 	sub.w	sl, r3, r1
 80088b8:	4592      	cmp	sl, r2
 80088ba:	bfa8      	it	ge
 80088bc:	4692      	movge	sl, r2
 80088be:	f1ba 0f00 	cmp.w	sl, #0
 80088c2:	dc0e      	bgt.n	80088e2 <_printf_float+0x376>
 80088c4:	f04f 0800 	mov.w	r8, #0
 80088c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80088cc:	f104 091a 	add.w	r9, r4, #26
 80088d0:	e019      	b.n	8008906 <_printf_float+0x39a>
 80088d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088d6:	4631      	mov	r1, r6
 80088d8:	4628      	mov	r0, r5
 80088da:	47b8      	blx	r7
 80088dc:	3001      	adds	r0, #1
 80088de:	d1e5      	bne.n	80088ac <_printf_float+0x340>
 80088e0:	e6a1      	b.n	8008626 <_printf_float+0xba>
 80088e2:	4653      	mov	r3, sl
 80088e4:	4642      	mov	r2, r8
 80088e6:	4631      	mov	r1, r6
 80088e8:	4628      	mov	r0, r5
 80088ea:	47b8      	blx	r7
 80088ec:	3001      	adds	r0, #1
 80088ee:	d1e9      	bne.n	80088c4 <_printf_float+0x358>
 80088f0:	e699      	b.n	8008626 <_printf_float+0xba>
 80088f2:	2301      	movs	r3, #1
 80088f4:	464a      	mov	r2, r9
 80088f6:	4631      	mov	r1, r6
 80088f8:	4628      	mov	r0, r5
 80088fa:	47b8      	blx	r7
 80088fc:	3001      	adds	r0, #1
 80088fe:	f43f ae92 	beq.w	8008626 <_printf_float+0xba>
 8008902:	f108 0801 	add.w	r8, r8, #1
 8008906:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800890a:	1a9b      	subs	r3, r3, r2
 800890c:	eba3 030a 	sub.w	r3, r3, sl
 8008910:	4543      	cmp	r3, r8
 8008912:	dcee      	bgt.n	80088f2 <_printf_float+0x386>
 8008914:	e74a      	b.n	80087ac <_printf_float+0x240>
 8008916:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008918:	2a01      	cmp	r2, #1
 800891a:	dc01      	bgt.n	8008920 <_printf_float+0x3b4>
 800891c:	07db      	lsls	r3, r3, #31
 800891e:	d53a      	bpl.n	8008996 <_printf_float+0x42a>
 8008920:	2301      	movs	r3, #1
 8008922:	4642      	mov	r2, r8
 8008924:	4631      	mov	r1, r6
 8008926:	4628      	mov	r0, r5
 8008928:	47b8      	blx	r7
 800892a:	3001      	adds	r0, #1
 800892c:	f43f ae7b 	beq.w	8008626 <_printf_float+0xba>
 8008930:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008934:	4631      	mov	r1, r6
 8008936:	4628      	mov	r0, r5
 8008938:	47b8      	blx	r7
 800893a:	3001      	adds	r0, #1
 800893c:	f108 0801 	add.w	r8, r8, #1
 8008940:	f43f ae71 	beq.w	8008626 <_printf_float+0xba>
 8008944:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008946:	2200      	movs	r2, #0
 8008948:	f103 3aff 	add.w	sl, r3, #4294967295
 800894c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008950:	2300      	movs	r3, #0
 8008952:	f7f8 f8c1 	bl	8000ad8 <__aeabi_dcmpeq>
 8008956:	b9c8      	cbnz	r0, 800898c <_printf_float+0x420>
 8008958:	4653      	mov	r3, sl
 800895a:	4642      	mov	r2, r8
 800895c:	4631      	mov	r1, r6
 800895e:	4628      	mov	r0, r5
 8008960:	47b8      	blx	r7
 8008962:	3001      	adds	r0, #1
 8008964:	d10e      	bne.n	8008984 <_printf_float+0x418>
 8008966:	e65e      	b.n	8008626 <_printf_float+0xba>
 8008968:	2301      	movs	r3, #1
 800896a:	4652      	mov	r2, sl
 800896c:	4631      	mov	r1, r6
 800896e:	4628      	mov	r0, r5
 8008970:	47b8      	blx	r7
 8008972:	3001      	adds	r0, #1
 8008974:	f43f ae57 	beq.w	8008626 <_printf_float+0xba>
 8008978:	f108 0801 	add.w	r8, r8, #1
 800897c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800897e:	3b01      	subs	r3, #1
 8008980:	4543      	cmp	r3, r8
 8008982:	dcf1      	bgt.n	8008968 <_printf_float+0x3fc>
 8008984:	464b      	mov	r3, r9
 8008986:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800898a:	e6de      	b.n	800874a <_printf_float+0x1de>
 800898c:	f04f 0800 	mov.w	r8, #0
 8008990:	f104 0a1a 	add.w	sl, r4, #26
 8008994:	e7f2      	b.n	800897c <_printf_float+0x410>
 8008996:	2301      	movs	r3, #1
 8008998:	e7df      	b.n	800895a <_printf_float+0x3ee>
 800899a:	2301      	movs	r3, #1
 800899c:	464a      	mov	r2, r9
 800899e:	4631      	mov	r1, r6
 80089a0:	4628      	mov	r0, r5
 80089a2:	47b8      	blx	r7
 80089a4:	3001      	adds	r0, #1
 80089a6:	f43f ae3e 	beq.w	8008626 <_printf_float+0xba>
 80089aa:	f108 0801 	add.w	r8, r8, #1
 80089ae:	68e3      	ldr	r3, [r4, #12]
 80089b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80089b2:	1a9b      	subs	r3, r3, r2
 80089b4:	4543      	cmp	r3, r8
 80089b6:	dcf0      	bgt.n	800899a <_printf_float+0x42e>
 80089b8:	e6fc      	b.n	80087b4 <_printf_float+0x248>
 80089ba:	f04f 0800 	mov.w	r8, #0
 80089be:	f104 0919 	add.w	r9, r4, #25
 80089c2:	e7f4      	b.n	80089ae <_printf_float+0x442>
 80089c4:	2900      	cmp	r1, #0
 80089c6:	f43f ae8b 	beq.w	80086e0 <_printf_float+0x174>
 80089ca:	2300      	movs	r3, #0
 80089cc:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80089d0:	ab09      	add	r3, sp, #36	; 0x24
 80089d2:	9300      	str	r3, [sp, #0]
 80089d4:	ec49 8b10 	vmov	d0, r8, r9
 80089d8:	6022      	str	r2, [r4, #0]
 80089da:	f8cd a004 	str.w	sl, [sp, #4]
 80089de:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80089e2:	4628      	mov	r0, r5
 80089e4:	f7ff fd2e 	bl	8008444 <__cvt>
 80089e8:	4680      	mov	r8, r0
 80089ea:	e648      	b.n	800867e <_printf_float+0x112>

080089ec <_printf_common>:
 80089ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089f0:	4691      	mov	r9, r2
 80089f2:	461f      	mov	r7, r3
 80089f4:	688a      	ldr	r2, [r1, #8]
 80089f6:	690b      	ldr	r3, [r1, #16]
 80089f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80089fc:	4293      	cmp	r3, r2
 80089fe:	bfb8      	it	lt
 8008a00:	4613      	movlt	r3, r2
 8008a02:	f8c9 3000 	str.w	r3, [r9]
 8008a06:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008a0a:	4606      	mov	r6, r0
 8008a0c:	460c      	mov	r4, r1
 8008a0e:	b112      	cbz	r2, 8008a16 <_printf_common+0x2a>
 8008a10:	3301      	adds	r3, #1
 8008a12:	f8c9 3000 	str.w	r3, [r9]
 8008a16:	6823      	ldr	r3, [r4, #0]
 8008a18:	0699      	lsls	r1, r3, #26
 8008a1a:	bf42      	ittt	mi
 8008a1c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008a20:	3302      	addmi	r3, #2
 8008a22:	f8c9 3000 	strmi.w	r3, [r9]
 8008a26:	6825      	ldr	r5, [r4, #0]
 8008a28:	f015 0506 	ands.w	r5, r5, #6
 8008a2c:	d107      	bne.n	8008a3e <_printf_common+0x52>
 8008a2e:	f104 0a19 	add.w	sl, r4, #25
 8008a32:	68e3      	ldr	r3, [r4, #12]
 8008a34:	f8d9 2000 	ldr.w	r2, [r9]
 8008a38:	1a9b      	subs	r3, r3, r2
 8008a3a:	42ab      	cmp	r3, r5
 8008a3c:	dc28      	bgt.n	8008a90 <_printf_common+0xa4>
 8008a3e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008a42:	6822      	ldr	r2, [r4, #0]
 8008a44:	3300      	adds	r3, #0
 8008a46:	bf18      	it	ne
 8008a48:	2301      	movne	r3, #1
 8008a4a:	0692      	lsls	r2, r2, #26
 8008a4c:	d42d      	bmi.n	8008aaa <_printf_common+0xbe>
 8008a4e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008a52:	4639      	mov	r1, r7
 8008a54:	4630      	mov	r0, r6
 8008a56:	47c0      	blx	r8
 8008a58:	3001      	adds	r0, #1
 8008a5a:	d020      	beq.n	8008a9e <_printf_common+0xb2>
 8008a5c:	6823      	ldr	r3, [r4, #0]
 8008a5e:	68e5      	ldr	r5, [r4, #12]
 8008a60:	f8d9 2000 	ldr.w	r2, [r9]
 8008a64:	f003 0306 	and.w	r3, r3, #6
 8008a68:	2b04      	cmp	r3, #4
 8008a6a:	bf08      	it	eq
 8008a6c:	1aad      	subeq	r5, r5, r2
 8008a6e:	68a3      	ldr	r3, [r4, #8]
 8008a70:	6922      	ldr	r2, [r4, #16]
 8008a72:	bf0c      	ite	eq
 8008a74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a78:	2500      	movne	r5, #0
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	bfc4      	itt	gt
 8008a7e:	1a9b      	subgt	r3, r3, r2
 8008a80:	18ed      	addgt	r5, r5, r3
 8008a82:	f04f 0900 	mov.w	r9, #0
 8008a86:	341a      	adds	r4, #26
 8008a88:	454d      	cmp	r5, r9
 8008a8a:	d11a      	bne.n	8008ac2 <_printf_common+0xd6>
 8008a8c:	2000      	movs	r0, #0
 8008a8e:	e008      	b.n	8008aa2 <_printf_common+0xb6>
 8008a90:	2301      	movs	r3, #1
 8008a92:	4652      	mov	r2, sl
 8008a94:	4639      	mov	r1, r7
 8008a96:	4630      	mov	r0, r6
 8008a98:	47c0      	blx	r8
 8008a9a:	3001      	adds	r0, #1
 8008a9c:	d103      	bne.n	8008aa6 <_printf_common+0xba>
 8008a9e:	f04f 30ff 	mov.w	r0, #4294967295
 8008aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008aa6:	3501      	adds	r5, #1
 8008aa8:	e7c3      	b.n	8008a32 <_printf_common+0x46>
 8008aaa:	18e1      	adds	r1, r4, r3
 8008aac:	1c5a      	adds	r2, r3, #1
 8008aae:	2030      	movs	r0, #48	; 0x30
 8008ab0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008ab4:	4422      	add	r2, r4
 8008ab6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008aba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008abe:	3302      	adds	r3, #2
 8008ac0:	e7c5      	b.n	8008a4e <_printf_common+0x62>
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	4622      	mov	r2, r4
 8008ac6:	4639      	mov	r1, r7
 8008ac8:	4630      	mov	r0, r6
 8008aca:	47c0      	blx	r8
 8008acc:	3001      	adds	r0, #1
 8008ace:	d0e6      	beq.n	8008a9e <_printf_common+0xb2>
 8008ad0:	f109 0901 	add.w	r9, r9, #1
 8008ad4:	e7d8      	b.n	8008a88 <_printf_common+0x9c>
	...

08008ad8 <_printf_i>:
 8008ad8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008adc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008ae0:	460c      	mov	r4, r1
 8008ae2:	7e09      	ldrb	r1, [r1, #24]
 8008ae4:	b085      	sub	sp, #20
 8008ae6:	296e      	cmp	r1, #110	; 0x6e
 8008ae8:	4617      	mov	r7, r2
 8008aea:	4606      	mov	r6, r0
 8008aec:	4698      	mov	r8, r3
 8008aee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008af0:	f000 80b3 	beq.w	8008c5a <_printf_i+0x182>
 8008af4:	d822      	bhi.n	8008b3c <_printf_i+0x64>
 8008af6:	2963      	cmp	r1, #99	; 0x63
 8008af8:	d036      	beq.n	8008b68 <_printf_i+0x90>
 8008afa:	d80a      	bhi.n	8008b12 <_printf_i+0x3a>
 8008afc:	2900      	cmp	r1, #0
 8008afe:	f000 80b9 	beq.w	8008c74 <_printf_i+0x19c>
 8008b02:	2958      	cmp	r1, #88	; 0x58
 8008b04:	f000 8083 	beq.w	8008c0e <_printf_i+0x136>
 8008b08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b0c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008b10:	e032      	b.n	8008b78 <_printf_i+0xa0>
 8008b12:	2964      	cmp	r1, #100	; 0x64
 8008b14:	d001      	beq.n	8008b1a <_printf_i+0x42>
 8008b16:	2969      	cmp	r1, #105	; 0x69
 8008b18:	d1f6      	bne.n	8008b08 <_printf_i+0x30>
 8008b1a:	6820      	ldr	r0, [r4, #0]
 8008b1c:	6813      	ldr	r3, [r2, #0]
 8008b1e:	0605      	lsls	r5, r0, #24
 8008b20:	f103 0104 	add.w	r1, r3, #4
 8008b24:	d52a      	bpl.n	8008b7c <_printf_i+0xa4>
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	6011      	str	r1, [r2, #0]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	da03      	bge.n	8008b36 <_printf_i+0x5e>
 8008b2e:	222d      	movs	r2, #45	; 0x2d
 8008b30:	425b      	negs	r3, r3
 8008b32:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008b36:	486f      	ldr	r0, [pc, #444]	; (8008cf4 <_printf_i+0x21c>)
 8008b38:	220a      	movs	r2, #10
 8008b3a:	e039      	b.n	8008bb0 <_printf_i+0xd8>
 8008b3c:	2973      	cmp	r1, #115	; 0x73
 8008b3e:	f000 809d 	beq.w	8008c7c <_printf_i+0x1a4>
 8008b42:	d808      	bhi.n	8008b56 <_printf_i+0x7e>
 8008b44:	296f      	cmp	r1, #111	; 0x6f
 8008b46:	d020      	beq.n	8008b8a <_printf_i+0xb2>
 8008b48:	2970      	cmp	r1, #112	; 0x70
 8008b4a:	d1dd      	bne.n	8008b08 <_printf_i+0x30>
 8008b4c:	6823      	ldr	r3, [r4, #0]
 8008b4e:	f043 0320 	orr.w	r3, r3, #32
 8008b52:	6023      	str	r3, [r4, #0]
 8008b54:	e003      	b.n	8008b5e <_printf_i+0x86>
 8008b56:	2975      	cmp	r1, #117	; 0x75
 8008b58:	d017      	beq.n	8008b8a <_printf_i+0xb2>
 8008b5a:	2978      	cmp	r1, #120	; 0x78
 8008b5c:	d1d4      	bne.n	8008b08 <_printf_i+0x30>
 8008b5e:	2378      	movs	r3, #120	; 0x78
 8008b60:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008b64:	4864      	ldr	r0, [pc, #400]	; (8008cf8 <_printf_i+0x220>)
 8008b66:	e055      	b.n	8008c14 <_printf_i+0x13c>
 8008b68:	6813      	ldr	r3, [r2, #0]
 8008b6a:	1d19      	adds	r1, r3, #4
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	6011      	str	r1, [r2, #0]
 8008b70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008b78:	2301      	movs	r3, #1
 8008b7a:	e08c      	b.n	8008c96 <_printf_i+0x1be>
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	6011      	str	r1, [r2, #0]
 8008b80:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008b84:	bf18      	it	ne
 8008b86:	b21b      	sxthne	r3, r3
 8008b88:	e7cf      	b.n	8008b2a <_printf_i+0x52>
 8008b8a:	6813      	ldr	r3, [r2, #0]
 8008b8c:	6825      	ldr	r5, [r4, #0]
 8008b8e:	1d18      	adds	r0, r3, #4
 8008b90:	6010      	str	r0, [r2, #0]
 8008b92:	0628      	lsls	r0, r5, #24
 8008b94:	d501      	bpl.n	8008b9a <_printf_i+0xc2>
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	e002      	b.n	8008ba0 <_printf_i+0xc8>
 8008b9a:	0668      	lsls	r0, r5, #25
 8008b9c:	d5fb      	bpl.n	8008b96 <_printf_i+0xbe>
 8008b9e:	881b      	ldrh	r3, [r3, #0]
 8008ba0:	4854      	ldr	r0, [pc, #336]	; (8008cf4 <_printf_i+0x21c>)
 8008ba2:	296f      	cmp	r1, #111	; 0x6f
 8008ba4:	bf14      	ite	ne
 8008ba6:	220a      	movne	r2, #10
 8008ba8:	2208      	moveq	r2, #8
 8008baa:	2100      	movs	r1, #0
 8008bac:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008bb0:	6865      	ldr	r5, [r4, #4]
 8008bb2:	60a5      	str	r5, [r4, #8]
 8008bb4:	2d00      	cmp	r5, #0
 8008bb6:	f2c0 8095 	blt.w	8008ce4 <_printf_i+0x20c>
 8008bba:	6821      	ldr	r1, [r4, #0]
 8008bbc:	f021 0104 	bic.w	r1, r1, #4
 8008bc0:	6021      	str	r1, [r4, #0]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d13d      	bne.n	8008c42 <_printf_i+0x16a>
 8008bc6:	2d00      	cmp	r5, #0
 8008bc8:	f040 808e 	bne.w	8008ce8 <_printf_i+0x210>
 8008bcc:	4665      	mov	r5, ip
 8008bce:	2a08      	cmp	r2, #8
 8008bd0:	d10b      	bne.n	8008bea <_printf_i+0x112>
 8008bd2:	6823      	ldr	r3, [r4, #0]
 8008bd4:	07db      	lsls	r3, r3, #31
 8008bd6:	d508      	bpl.n	8008bea <_printf_i+0x112>
 8008bd8:	6923      	ldr	r3, [r4, #16]
 8008bda:	6862      	ldr	r2, [r4, #4]
 8008bdc:	429a      	cmp	r2, r3
 8008bde:	bfde      	ittt	le
 8008be0:	2330      	movle	r3, #48	; 0x30
 8008be2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008be6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008bea:	ebac 0305 	sub.w	r3, ip, r5
 8008bee:	6123      	str	r3, [r4, #16]
 8008bf0:	f8cd 8000 	str.w	r8, [sp]
 8008bf4:	463b      	mov	r3, r7
 8008bf6:	aa03      	add	r2, sp, #12
 8008bf8:	4621      	mov	r1, r4
 8008bfa:	4630      	mov	r0, r6
 8008bfc:	f7ff fef6 	bl	80089ec <_printf_common>
 8008c00:	3001      	adds	r0, #1
 8008c02:	d14d      	bne.n	8008ca0 <_printf_i+0x1c8>
 8008c04:	f04f 30ff 	mov.w	r0, #4294967295
 8008c08:	b005      	add	sp, #20
 8008c0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c0e:	4839      	ldr	r0, [pc, #228]	; (8008cf4 <_printf_i+0x21c>)
 8008c10:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008c14:	6813      	ldr	r3, [r2, #0]
 8008c16:	6821      	ldr	r1, [r4, #0]
 8008c18:	1d1d      	adds	r5, r3, #4
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	6015      	str	r5, [r2, #0]
 8008c1e:	060a      	lsls	r2, r1, #24
 8008c20:	d50b      	bpl.n	8008c3a <_printf_i+0x162>
 8008c22:	07ca      	lsls	r2, r1, #31
 8008c24:	bf44      	itt	mi
 8008c26:	f041 0120 	orrmi.w	r1, r1, #32
 8008c2a:	6021      	strmi	r1, [r4, #0]
 8008c2c:	b91b      	cbnz	r3, 8008c36 <_printf_i+0x15e>
 8008c2e:	6822      	ldr	r2, [r4, #0]
 8008c30:	f022 0220 	bic.w	r2, r2, #32
 8008c34:	6022      	str	r2, [r4, #0]
 8008c36:	2210      	movs	r2, #16
 8008c38:	e7b7      	b.n	8008baa <_printf_i+0xd2>
 8008c3a:	064d      	lsls	r5, r1, #25
 8008c3c:	bf48      	it	mi
 8008c3e:	b29b      	uxthmi	r3, r3
 8008c40:	e7ef      	b.n	8008c22 <_printf_i+0x14a>
 8008c42:	4665      	mov	r5, ip
 8008c44:	fbb3 f1f2 	udiv	r1, r3, r2
 8008c48:	fb02 3311 	mls	r3, r2, r1, r3
 8008c4c:	5cc3      	ldrb	r3, [r0, r3]
 8008c4e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008c52:	460b      	mov	r3, r1
 8008c54:	2900      	cmp	r1, #0
 8008c56:	d1f5      	bne.n	8008c44 <_printf_i+0x16c>
 8008c58:	e7b9      	b.n	8008bce <_printf_i+0xf6>
 8008c5a:	6813      	ldr	r3, [r2, #0]
 8008c5c:	6825      	ldr	r5, [r4, #0]
 8008c5e:	6961      	ldr	r1, [r4, #20]
 8008c60:	1d18      	adds	r0, r3, #4
 8008c62:	6010      	str	r0, [r2, #0]
 8008c64:	0628      	lsls	r0, r5, #24
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	d501      	bpl.n	8008c6e <_printf_i+0x196>
 8008c6a:	6019      	str	r1, [r3, #0]
 8008c6c:	e002      	b.n	8008c74 <_printf_i+0x19c>
 8008c6e:	066a      	lsls	r2, r5, #25
 8008c70:	d5fb      	bpl.n	8008c6a <_printf_i+0x192>
 8008c72:	8019      	strh	r1, [r3, #0]
 8008c74:	2300      	movs	r3, #0
 8008c76:	6123      	str	r3, [r4, #16]
 8008c78:	4665      	mov	r5, ip
 8008c7a:	e7b9      	b.n	8008bf0 <_printf_i+0x118>
 8008c7c:	6813      	ldr	r3, [r2, #0]
 8008c7e:	1d19      	adds	r1, r3, #4
 8008c80:	6011      	str	r1, [r2, #0]
 8008c82:	681d      	ldr	r5, [r3, #0]
 8008c84:	6862      	ldr	r2, [r4, #4]
 8008c86:	2100      	movs	r1, #0
 8008c88:	4628      	mov	r0, r5
 8008c8a:	f7f7 fab1 	bl	80001f0 <memchr>
 8008c8e:	b108      	cbz	r0, 8008c94 <_printf_i+0x1bc>
 8008c90:	1b40      	subs	r0, r0, r5
 8008c92:	6060      	str	r0, [r4, #4]
 8008c94:	6863      	ldr	r3, [r4, #4]
 8008c96:	6123      	str	r3, [r4, #16]
 8008c98:	2300      	movs	r3, #0
 8008c9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c9e:	e7a7      	b.n	8008bf0 <_printf_i+0x118>
 8008ca0:	6923      	ldr	r3, [r4, #16]
 8008ca2:	462a      	mov	r2, r5
 8008ca4:	4639      	mov	r1, r7
 8008ca6:	4630      	mov	r0, r6
 8008ca8:	47c0      	blx	r8
 8008caa:	3001      	adds	r0, #1
 8008cac:	d0aa      	beq.n	8008c04 <_printf_i+0x12c>
 8008cae:	6823      	ldr	r3, [r4, #0]
 8008cb0:	079b      	lsls	r3, r3, #30
 8008cb2:	d413      	bmi.n	8008cdc <_printf_i+0x204>
 8008cb4:	68e0      	ldr	r0, [r4, #12]
 8008cb6:	9b03      	ldr	r3, [sp, #12]
 8008cb8:	4298      	cmp	r0, r3
 8008cba:	bfb8      	it	lt
 8008cbc:	4618      	movlt	r0, r3
 8008cbe:	e7a3      	b.n	8008c08 <_printf_i+0x130>
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	464a      	mov	r2, r9
 8008cc4:	4639      	mov	r1, r7
 8008cc6:	4630      	mov	r0, r6
 8008cc8:	47c0      	blx	r8
 8008cca:	3001      	adds	r0, #1
 8008ccc:	d09a      	beq.n	8008c04 <_printf_i+0x12c>
 8008cce:	3501      	adds	r5, #1
 8008cd0:	68e3      	ldr	r3, [r4, #12]
 8008cd2:	9a03      	ldr	r2, [sp, #12]
 8008cd4:	1a9b      	subs	r3, r3, r2
 8008cd6:	42ab      	cmp	r3, r5
 8008cd8:	dcf2      	bgt.n	8008cc0 <_printf_i+0x1e8>
 8008cda:	e7eb      	b.n	8008cb4 <_printf_i+0x1dc>
 8008cdc:	2500      	movs	r5, #0
 8008cde:	f104 0919 	add.w	r9, r4, #25
 8008ce2:	e7f5      	b.n	8008cd0 <_printf_i+0x1f8>
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d1ac      	bne.n	8008c42 <_printf_i+0x16a>
 8008ce8:	7803      	ldrb	r3, [r0, #0]
 8008cea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008cee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008cf2:	e76c      	b.n	8008bce <_printf_i+0xf6>
 8008cf4:	0800bdf2 	.word	0x0800bdf2
 8008cf8:	0800be03 	.word	0x0800be03

08008cfc <siprintf>:
 8008cfc:	b40e      	push	{r1, r2, r3}
 8008cfe:	b500      	push	{lr}
 8008d00:	b09c      	sub	sp, #112	; 0x70
 8008d02:	ab1d      	add	r3, sp, #116	; 0x74
 8008d04:	9002      	str	r0, [sp, #8]
 8008d06:	9006      	str	r0, [sp, #24]
 8008d08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008d0c:	4809      	ldr	r0, [pc, #36]	; (8008d34 <siprintf+0x38>)
 8008d0e:	9107      	str	r1, [sp, #28]
 8008d10:	9104      	str	r1, [sp, #16]
 8008d12:	4909      	ldr	r1, [pc, #36]	; (8008d38 <siprintf+0x3c>)
 8008d14:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d18:	9105      	str	r1, [sp, #20]
 8008d1a:	6800      	ldr	r0, [r0, #0]
 8008d1c:	9301      	str	r3, [sp, #4]
 8008d1e:	a902      	add	r1, sp, #8
 8008d20:	f002 fd44 	bl	800b7ac <_svfiprintf_r>
 8008d24:	9b02      	ldr	r3, [sp, #8]
 8008d26:	2200      	movs	r2, #0
 8008d28:	701a      	strb	r2, [r3, #0]
 8008d2a:	b01c      	add	sp, #112	; 0x70
 8008d2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d30:	b003      	add	sp, #12
 8008d32:	4770      	bx	lr
 8008d34:	20000054 	.word	0x20000054
 8008d38:	ffff0208 	.word	0xffff0208

08008d3c <strcat>:
 8008d3c:	b510      	push	{r4, lr}
 8008d3e:	4603      	mov	r3, r0
 8008d40:	781a      	ldrb	r2, [r3, #0]
 8008d42:	1c5c      	adds	r4, r3, #1
 8008d44:	b93a      	cbnz	r2, 8008d56 <strcat+0x1a>
 8008d46:	3b01      	subs	r3, #1
 8008d48:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d4c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008d50:	2a00      	cmp	r2, #0
 8008d52:	d1f9      	bne.n	8008d48 <strcat+0xc>
 8008d54:	bd10      	pop	{r4, pc}
 8008d56:	4623      	mov	r3, r4
 8008d58:	e7f2      	b.n	8008d40 <strcat+0x4>

08008d5a <sulp>:
 8008d5a:	b570      	push	{r4, r5, r6, lr}
 8008d5c:	4604      	mov	r4, r0
 8008d5e:	460d      	mov	r5, r1
 8008d60:	ec45 4b10 	vmov	d0, r4, r5
 8008d64:	4616      	mov	r6, r2
 8008d66:	f002 fadd 	bl	800b324 <__ulp>
 8008d6a:	ec51 0b10 	vmov	r0, r1, d0
 8008d6e:	b17e      	cbz	r6, 8008d90 <sulp+0x36>
 8008d70:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008d74:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	dd09      	ble.n	8008d90 <sulp+0x36>
 8008d7c:	051b      	lsls	r3, r3, #20
 8008d7e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008d82:	2400      	movs	r4, #0
 8008d84:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008d88:	4622      	mov	r2, r4
 8008d8a:	462b      	mov	r3, r5
 8008d8c:	f7f7 fc3c 	bl	8000608 <__aeabi_dmul>
 8008d90:	bd70      	pop	{r4, r5, r6, pc}
 8008d92:	0000      	movs	r0, r0
 8008d94:	0000      	movs	r0, r0
	...

08008d98 <_strtod_l>:
 8008d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d9c:	461f      	mov	r7, r3
 8008d9e:	b0a1      	sub	sp, #132	; 0x84
 8008da0:	2300      	movs	r3, #0
 8008da2:	4681      	mov	r9, r0
 8008da4:	4638      	mov	r0, r7
 8008da6:	460e      	mov	r6, r1
 8008da8:	9217      	str	r2, [sp, #92]	; 0x5c
 8008daa:	931c      	str	r3, [sp, #112]	; 0x70
 8008dac:	f001 ffba 	bl	800ad24 <__localeconv_l>
 8008db0:	4680      	mov	r8, r0
 8008db2:	6800      	ldr	r0, [r0, #0]
 8008db4:	f7f7 fa14 	bl	80001e0 <strlen>
 8008db8:	f04f 0a00 	mov.w	sl, #0
 8008dbc:	4604      	mov	r4, r0
 8008dbe:	f04f 0b00 	mov.w	fp, #0
 8008dc2:	961b      	str	r6, [sp, #108]	; 0x6c
 8008dc4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008dc6:	781a      	ldrb	r2, [r3, #0]
 8008dc8:	2a0d      	cmp	r2, #13
 8008dca:	d832      	bhi.n	8008e32 <_strtod_l+0x9a>
 8008dcc:	2a09      	cmp	r2, #9
 8008dce:	d236      	bcs.n	8008e3e <_strtod_l+0xa6>
 8008dd0:	2a00      	cmp	r2, #0
 8008dd2:	d03e      	beq.n	8008e52 <_strtod_l+0xba>
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	930d      	str	r3, [sp, #52]	; 0x34
 8008dd8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8008dda:	782b      	ldrb	r3, [r5, #0]
 8008ddc:	2b30      	cmp	r3, #48	; 0x30
 8008dde:	f040 80ac 	bne.w	8008f3a <_strtod_l+0x1a2>
 8008de2:	786b      	ldrb	r3, [r5, #1]
 8008de4:	2b58      	cmp	r3, #88	; 0x58
 8008de6:	d001      	beq.n	8008dec <_strtod_l+0x54>
 8008de8:	2b78      	cmp	r3, #120	; 0x78
 8008dea:	d167      	bne.n	8008ebc <_strtod_l+0x124>
 8008dec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008dee:	9301      	str	r3, [sp, #4]
 8008df0:	ab1c      	add	r3, sp, #112	; 0x70
 8008df2:	9300      	str	r3, [sp, #0]
 8008df4:	9702      	str	r7, [sp, #8]
 8008df6:	ab1d      	add	r3, sp, #116	; 0x74
 8008df8:	4a88      	ldr	r2, [pc, #544]	; (800901c <_strtod_l+0x284>)
 8008dfa:	a91b      	add	r1, sp, #108	; 0x6c
 8008dfc:	4648      	mov	r0, r9
 8008dfe:	f001 fcba 	bl	800a776 <__gethex>
 8008e02:	f010 0407 	ands.w	r4, r0, #7
 8008e06:	4606      	mov	r6, r0
 8008e08:	d005      	beq.n	8008e16 <_strtod_l+0x7e>
 8008e0a:	2c06      	cmp	r4, #6
 8008e0c:	d12b      	bne.n	8008e66 <_strtod_l+0xce>
 8008e0e:	3501      	adds	r5, #1
 8008e10:	2300      	movs	r3, #0
 8008e12:	951b      	str	r5, [sp, #108]	; 0x6c
 8008e14:	930d      	str	r3, [sp, #52]	; 0x34
 8008e16:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	f040 859a 	bne.w	8009952 <_strtod_l+0xbba>
 8008e1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e20:	b1e3      	cbz	r3, 8008e5c <_strtod_l+0xc4>
 8008e22:	4652      	mov	r2, sl
 8008e24:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008e28:	ec43 2b10 	vmov	d0, r2, r3
 8008e2c:	b021      	add	sp, #132	; 0x84
 8008e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e32:	2a2b      	cmp	r2, #43	; 0x2b
 8008e34:	d015      	beq.n	8008e62 <_strtod_l+0xca>
 8008e36:	2a2d      	cmp	r2, #45	; 0x2d
 8008e38:	d004      	beq.n	8008e44 <_strtod_l+0xac>
 8008e3a:	2a20      	cmp	r2, #32
 8008e3c:	d1ca      	bne.n	8008dd4 <_strtod_l+0x3c>
 8008e3e:	3301      	adds	r3, #1
 8008e40:	931b      	str	r3, [sp, #108]	; 0x6c
 8008e42:	e7bf      	b.n	8008dc4 <_strtod_l+0x2c>
 8008e44:	2201      	movs	r2, #1
 8008e46:	920d      	str	r2, [sp, #52]	; 0x34
 8008e48:	1c5a      	adds	r2, r3, #1
 8008e4a:	921b      	str	r2, [sp, #108]	; 0x6c
 8008e4c:	785b      	ldrb	r3, [r3, #1]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d1c2      	bne.n	8008dd8 <_strtod_l+0x40>
 8008e52:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008e54:	961b      	str	r6, [sp, #108]	; 0x6c
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	f040 8579 	bne.w	800994e <_strtod_l+0xbb6>
 8008e5c:	4652      	mov	r2, sl
 8008e5e:	465b      	mov	r3, fp
 8008e60:	e7e2      	b.n	8008e28 <_strtod_l+0x90>
 8008e62:	2200      	movs	r2, #0
 8008e64:	e7ef      	b.n	8008e46 <_strtod_l+0xae>
 8008e66:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008e68:	b13a      	cbz	r2, 8008e7a <_strtod_l+0xe2>
 8008e6a:	2135      	movs	r1, #53	; 0x35
 8008e6c:	a81e      	add	r0, sp, #120	; 0x78
 8008e6e:	f002 fb51 	bl	800b514 <__copybits>
 8008e72:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008e74:	4648      	mov	r0, r9
 8008e76:	f001 ffbe 	bl	800adf6 <_Bfree>
 8008e7a:	3c01      	subs	r4, #1
 8008e7c:	2c04      	cmp	r4, #4
 8008e7e:	d806      	bhi.n	8008e8e <_strtod_l+0xf6>
 8008e80:	e8df f004 	tbb	[pc, r4]
 8008e84:	1714030a 	.word	0x1714030a
 8008e88:	0a          	.byte	0x0a
 8008e89:	00          	.byte	0x00
 8008e8a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8008e8e:	0730      	lsls	r0, r6, #28
 8008e90:	d5c1      	bpl.n	8008e16 <_strtod_l+0x7e>
 8008e92:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008e96:	e7be      	b.n	8008e16 <_strtod_l+0x7e>
 8008e98:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8008e9c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008e9e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008ea2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008ea6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008eaa:	e7f0      	b.n	8008e8e <_strtod_l+0xf6>
 8008eac:	f8df b170 	ldr.w	fp, [pc, #368]	; 8009020 <_strtod_l+0x288>
 8008eb0:	e7ed      	b.n	8008e8e <_strtod_l+0xf6>
 8008eb2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008eb6:	f04f 3aff 	mov.w	sl, #4294967295
 8008eba:	e7e8      	b.n	8008e8e <_strtod_l+0xf6>
 8008ebc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008ebe:	1c5a      	adds	r2, r3, #1
 8008ec0:	921b      	str	r2, [sp, #108]	; 0x6c
 8008ec2:	785b      	ldrb	r3, [r3, #1]
 8008ec4:	2b30      	cmp	r3, #48	; 0x30
 8008ec6:	d0f9      	beq.n	8008ebc <_strtod_l+0x124>
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d0a4      	beq.n	8008e16 <_strtod_l+0x7e>
 8008ecc:	2301      	movs	r3, #1
 8008ece:	2500      	movs	r5, #0
 8008ed0:	9306      	str	r3, [sp, #24]
 8008ed2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008ed4:	9308      	str	r3, [sp, #32]
 8008ed6:	9507      	str	r5, [sp, #28]
 8008ed8:	9505      	str	r5, [sp, #20]
 8008eda:	220a      	movs	r2, #10
 8008edc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8008ede:	7807      	ldrb	r7, [r0, #0]
 8008ee0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8008ee4:	b2d9      	uxtb	r1, r3
 8008ee6:	2909      	cmp	r1, #9
 8008ee8:	d929      	bls.n	8008f3e <_strtod_l+0x1a6>
 8008eea:	4622      	mov	r2, r4
 8008eec:	f8d8 1000 	ldr.w	r1, [r8]
 8008ef0:	f002 fd64 	bl	800b9bc <strncmp>
 8008ef4:	2800      	cmp	r0, #0
 8008ef6:	d031      	beq.n	8008f5c <_strtod_l+0x1c4>
 8008ef8:	2000      	movs	r0, #0
 8008efa:	9c05      	ldr	r4, [sp, #20]
 8008efc:	9004      	str	r0, [sp, #16]
 8008efe:	463b      	mov	r3, r7
 8008f00:	4602      	mov	r2, r0
 8008f02:	2b65      	cmp	r3, #101	; 0x65
 8008f04:	d001      	beq.n	8008f0a <_strtod_l+0x172>
 8008f06:	2b45      	cmp	r3, #69	; 0x45
 8008f08:	d114      	bne.n	8008f34 <_strtod_l+0x19c>
 8008f0a:	b924      	cbnz	r4, 8008f16 <_strtod_l+0x17e>
 8008f0c:	b910      	cbnz	r0, 8008f14 <_strtod_l+0x17c>
 8008f0e:	9b06      	ldr	r3, [sp, #24]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d09e      	beq.n	8008e52 <_strtod_l+0xba>
 8008f14:	2400      	movs	r4, #0
 8008f16:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8008f18:	1c73      	adds	r3, r6, #1
 8008f1a:	931b      	str	r3, [sp, #108]	; 0x6c
 8008f1c:	7873      	ldrb	r3, [r6, #1]
 8008f1e:	2b2b      	cmp	r3, #43	; 0x2b
 8008f20:	d078      	beq.n	8009014 <_strtod_l+0x27c>
 8008f22:	2b2d      	cmp	r3, #45	; 0x2d
 8008f24:	d070      	beq.n	8009008 <_strtod_l+0x270>
 8008f26:	f04f 0c00 	mov.w	ip, #0
 8008f2a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8008f2e:	2f09      	cmp	r7, #9
 8008f30:	d97c      	bls.n	800902c <_strtod_l+0x294>
 8008f32:	961b      	str	r6, [sp, #108]	; 0x6c
 8008f34:	f04f 0e00 	mov.w	lr, #0
 8008f38:	e09a      	b.n	8009070 <_strtod_l+0x2d8>
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	e7c7      	b.n	8008ece <_strtod_l+0x136>
 8008f3e:	9905      	ldr	r1, [sp, #20]
 8008f40:	2908      	cmp	r1, #8
 8008f42:	bfdd      	ittte	le
 8008f44:	9907      	ldrle	r1, [sp, #28]
 8008f46:	fb02 3301 	mlale	r3, r2, r1, r3
 8008f4a:	9307      	strle	r3, [sp, #28]
 8008f4c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8008f50:	9b05      	ldr	r3, [sp, #20]
 8008f52:	3001      	adds	r0, #1
 8008f54:	3301      	adds	r3, #1
 8008f56:	9305      	str	r3, [sp, #20]
 8008f58:	901b      	str	r0, [sp, #108]	; 0x6c
 8008f5a:	e7bf      	b.n	8008edc <_strtod_l+0x144>
 8008f5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008f5e:	191a      	adds	r2, r3, r4
 8008f60:	921b      	str	r2, [sp, #108]	; 0x6c
 8008f62:	9a05      	ldr	r2, [sp, #20]
 8008f64:	5d1b      	ldrb	r3, [r3, r4]
 8008f66:	2a00      	cmp	r2, #0
 8008f68:	d037      	beq.n	8008fda <_strtod_l+0x242>
 8008f6a:	9c05      	ldr	r4, [sp, #20]
 8008f6c:	4602      	mov	r2, r0
 8008f6e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8008f72:	2909      	cmp	r1, #9
 8008f74:	d913      	bls.n	8008f9e <_strtod_l+0x206>
 8008f76:	2101      	movs	r1, #1
 8008f78:	9104      	str	r1, [sp, #16]
 8008f7a:	e7c2      	b.n	8008f02 <_strtod_l+0x16a>
 8008f7c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008f7e:	1c5a      	adds	r2, r3, #1
 8008f80:	921b      	str	r2, [sp, #108]	; 0x6c
 8008f82:	785b      	ldrb	r3, [r3, #1]
 8008f84:	3001      	adds	r0, #1
 8008f86:	2b30      	cmp	r3, #48	; 0x30
 8008f88:	d0f8      	beq.n	8008f7c <_strtod_l+0x1e4>
 8008f8a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8008f8e:	2a08      	cmp	r2, #8
 8008f90:	f200 84e4 	bhi.w	800995c <_strtod_l+0xbc4>
 8008f94:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008f96:	9208      	str	r2, [sp, #32]
 8008f98:	4602      	mov	r2, r0
 8008f9a:	2000      	movs	r0, #0
 8008f9c:	4604      	mov	r4, r0
 8008f9e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8008fa2:	f100 0101 	add.w	r1, r0, #1
 8008fa6:	d012      	beq.n	8008fce <_strtod_l+0x236>
 8008fa8:	440a      	add	r2, r1
 8008faa:	eb00 0c04 	add.w	ip, r0, r4
 8008fae:	4621      	mov	r1, r4
 8008fb0:	270a      	movs	r7, #10
 8008fb2:	458c      	cmp	ip, r1
 8008fb4:	d113      	bne.n	8008fde <_strtod_l+0x246>
 8008fb6:	1821      	adds	r1, r4, r0
 8008fb8:	2908      	cmp	r1, #8
 8008fba:	f104 0401 	add.w	r4, r4, #1
 8008fbe:	4404      	add	r4, r0
 8008fc0:	dc19      	bgt.n	8008ff6 <_strtod_l+0x25e>
 8008fc2:	9b07      	ldr	r3, [sp, #28]
 8008fc4:	210a      	movs	r1, #10
 8008fc6:	fb01 e303 	mla	r3, r1, r3, lr
 8008fca:	9307      	str	r3, [sp, #28]
 8008fcc:	2100      	movs	r1, #0
 8008fce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008fd0:	1c58      	adds	r0, r3, #1
 8008fd2:	901b      	str	r0, [sp, #108]	; 0x6c
 8008fd4:	785b      	ldrb	r3, [r3, #1]
 8008fd6:	4608      	mov	r0, r1
 8008fd8:	e7c9      	b.n	8008f6e <_strtod_l+0x1d6>
 8008fda:	9805      	ldr	r0, [sp, #20]
 8008fdc:	e7d3      	b.n	8008f86 <_strtod_l+0x1ee>
 8008fde:	2908      	cmp	r1, #8
 8008fe0:	f101 0101 	add.w	r1, r1, #1
 8008fe4:	dc03      	bgt.n	8008fee <_strtod_l+0x256>
 8008fe6:	9b07      	ldr	r3, [sp, #28]
 8008fe8:	437b      	muls	r3, r7
 8008fea:	9307      	str	r3, [sp, #28]
 8008fec:	e7e1      	b.n	8008fb2 <_strtod_l+0x21a>
 8008fee:	2910      	cmp	r1, #16
 8008ff0:	bfd8      	it	le
 8008ff2:	437d      	mulle	r5, r7
 8008ff4:	e7dd      	b.n	8008fb2 <_strtod_l+0x21a>
 8008ff6:	2c10      	cmp	r4, #16
 8008ff8:	bfdc      	itt	le
 8008ffa:	210a      	movle	r1, #10
 8008ffc:	fb01 e505 	mlale	r5, r1, r5, lr
 8009000:	e7e4      	b.n	8008fcc <_strtod_l+0x234>
 8009002:	2301      	movs	r3, #1
 8009004:	9304      	str	r3, [sp, #16]
 8009006:	e781      	b.n	8008f0c <_strtod_l+0x174>
 8009008:	f04f 0c01 	mov.w	ip, #1
 800900c:	1cb3      	adds	r3, r6, #2
 800900e:	931b      	str	r3, [sp, #108]	; 0x6c
 8009010:	78b3      	ldrb	r3, [r6, #2]
 8009012:	e78a      	b.n	8008f2a <_strtod_l+0x192>
 8009014:	f04f 0c00 	mov.w	ip, #0
 8009018:	e7f8      	b.n	800900c <_strtod_l+0x274>
 800901a:	bf00      	nop
 800901c:	0800be14 	.word	0x0800be14
 8009020:	7ff00000 	.word	0x7ff00000
 8009024:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009026:	1c5f      	adds	r7, r3, #1
 8009028:	971b      	str	r7, [sp, #108]	; 0x6c
 800902a:	785b      	ldrb	r3, [r3, #1]
 800902c:	2b30      	cmp	r3, #48	; 0x30
 800902e:	d0f9      	beq.n	8009024 <_strtod_l+0x28c>
 8009030:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8009034:	2f08      	cmp	r7, #8
 8009036:	f63f af7d 	bhi.w	8008f34 <_strtod_l+0x19c>
 800903a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800903e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009040:	930a      	str	r3, [sp, #40]	; 0x28
 8009042:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009044:	1c5f      	adds	r7, r3, #1
 8009046:	971b      	str	r7, [sp, #108]	; 0x6c
 8009048:	785b      	ldrb	r3, [r3, #1]
 800904a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800904e:	f1b8 0f09 	cmp.w	r8, #9
 8009052:	d937      	bls.n	80090c4 <_strtod_l+0x32c>
 8009054:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009056:	1a7f      	subs	r7, r7, r1
 8009058:	2f08      	cmp	r7, #8
 800905a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800905e:	dc37      	bgt.n	80090d0 <_strtod_l+0x338>
 8009060:	45be      	cmp	lr, r7
 8009062:	bfa8      	it	ge
 8009064:	46be      	movge	lr, r7
 8009066:	f1bc 0f00 	cmp.w	ip, #0
 800906a:	d001      	beq.n	8009070 <_strtod_l+0x2d8>
 800906c:	f1ce 0e00 	rsb	lr, lr, #0
 8009070:	2c00      	cmp	r4, #0
 8009072:	d151      	bne.n	8009118 <_strtod_l+0x380>
 8009074:	2800      	cmp	r0, #0
 8009076:	f47f aece 	bne.w	8008e16 <_strtod_l+0x7e>
 800907a:	9a06      	ldr	r2, [sp, #24]
 800907c:	2a00      	cmp	r2, #0
 800907e:	f47f aeca 	bne.w	8008e16 <_strtod_l+0x7e>
 8009082:	9a04      	ldr	r2, [sp, #16]
 8009084:	2a00      	cmp	r2, #0
 8009086:	f47f aee4 	bne.w	8008e52 <_strtod_l+0xba>
 800908a:	2b4e      	cmp	r3, #78	; 0x4e
 800908c:	d027      	beq.n	80090de <_strtod_l+0x346>
 800908e:	dc21      	bgt.n	80090d4 <_strtod_l+0x33c>
 8009090:	2b49      	cmp	r3, #73	; 0x49
 8009092:	f47f aede 	bne.w	8008e52 <_strtod_l+0xba>
 8009096:	49a0      	ldr	r1, [pc, #640]	; (8009318 <_strtod_l+0x580>)
 8009098:	a81b      	add	r0, sp, #108	; 0x6c
 800909a:	f001 fd9f 	bl	800abdc <__match>
 800909e:	2800      	cmp	r0, #0
 80090a0:	f43f aed7 	beq.w	8008e52 <_strtod_l+0xba>
 80090a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80090a6:	499d      	ldr	r1, [pc, #628]	; (800931c <_strtod_l+0x584>)
 80090a8:	3b01      	subs	r3, #1
 80090aa:	a81b      	add	r0, sp, #108	; 0x6c
 80090ac:	931b      	str	r3, [sp, #108]	; 0x6c
 80090ae:	f001 fd95 	bl	800abdc <__match>
 80090b2:	b910      	cbnz	r0, 80090ba <_strtod_l+0x322>
 80090b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80090b6:	3301      	adds	r3, #1
 80090b8:	931b      	str	r3, [sp, #108]	; 0x6c
 80090ba:	f8df b274 	ldr.w	fp, [pc, #628]	; 8009330 <_strtod_l+0x598>
 80090be:	f04f 0a00 	mov.w	sl, #0
 80090c2:	e6a8      	b.n	8008e16 <_strtod_l+0x7e>
 80090c4:	210a      	movs	r1, #10
 80090c6:	fb01 3e0e 	mla	lr, r1, lr, r3
 80090ca:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80090ce:	e7b8      	b.n	8009042 <_strtod_l+0x2aa>
 80090d0:	46be      	mov	lr, r7
 80090d2:	e7c8      	b.n	8009066 <_strtod_l+0x2ce>
 80090d4:	2b69      	cmp	r3, #105	; 0x69
 80090d6:	d0de      	beq.n	8009096 <_strtod_l+0x2fe>
 80090d8:	2b6e      	cmp	r3, #110	; 0x6e
 80090da:	f47f aeba 	bne.w	8008e52 <_strtod_l+0xba>
 80090de:	4990      	ldr	r1, [pc, #576]	; (8009320 <_strtod_l+0x588>)
 80090e0:	a81b      	add	r0, sp, #108	; 0x6c
 80090e2:	f001 fd7b 	bl	800abdc <__match>
 80090e6:	2800      	cmp	r0, #0
 80090e8:	f43f aeb3 	beq.w	8008e52 <_strtod_l+0xba>
 80090ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80090ee:	781b      	ldrb	r3, [r3, #0]
 80090f0:	2b28      	cmp	r3, #40	; 0x28
 80090f2:	d10e      	bne.n	8009112 <_strtod_l+0x37a>
 80090f4:	aa1e      	add	r2, sp, #120	; 0x78
 80090f6:	498b      	ldr	r1, [pc, #556]	; (8009324 <_strtod_l+0x58c>)
 80090f8:	a81b      	add	r0, sp, #108	; 0x6c
 80090fa:	f001 fd83 	bl	800ac04 <__hexnan>
 80090fe:	2805      	cmp	r0, #5
 8009100:	d107      	bne.n	8009112 <_strtod_l+0x37a>
 8009102:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009104:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8009108:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800910c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009110:	e681      	b.n	8008e16 <_strtod_l+0x7e>
 8009112:	f8df b224 	ldr.w	fp, [pc, #548]	; 8009338 <_strtod_l+0x5a0>
 8009116:	e7d2      	b.n	80090be <_strtod_l+0x326>
 8009118:	ebae 0302 	sub.w	r3, lr, r2
 800911c:	9306      	str	r3, [sp, #24]
 800911e:	9b05      	ldr	r3, [sp, #20]
 8009120:	9807      	ldr	r0, [sp, #28]
 8009122:	2b00      	cmp	r3, #0
 8009124:	bf08      	it	eq
 8009126:	4623      	moveq	r3, r4
 8009128:	2c10      	cmp	r4, #16
 800912a:	9305      	str	r3, [sp, #20]
 800912c:	46a0      	mov	r8, r4
 800912e:	bfa8      	it	ge
 8009130:	f04f 0810 	movge.w	r8, #16
 8009134:	f7f7 f9ee 	bl	8000514 <__aeabi_ui2d>
 8009138:	2c09      	cmp	r4, #9
 800913a:	4682      	mov	sl, r0
 800913c:	468b      	mov	fp, r1
 800913e:	dc13      	bgt.n	8009168 <_strtod_l+0x3d0>
 8009140:	9b06      	ldr	r3, [sp, #24]
 8009142:	2b00      	cmp	r3, #0
 8009144:	f43f ae67 	beq.w	8008e16 <_strtod_l+0x7e>
 8009148:	9b06      	ldr	r3, [sp, #24]
 800914a:	dd7a      	ble.n	8009242 <_strtod_l+0x4aa>
 800914c:	2b16      	cmp	r3, #22
 800914e:	dc61      	bgt.n	8009214 <_strtod_l+0x47c>
 8009150:	4a75      	ldr	r2, [pc, #468]	; (8009328 <_strtod_l+0x590>)
 8009152:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8009156:	e9de 0100 	ldrd	r0, r1, [lr]
 800915a:	4652      	mov	r2, sl
 800915c:	465b      	mov	r3, fp
 800915e:	f7f7 fa53 	bl	8000608 <__aeabi_dmul>
 8009162:	4682      	mov	sl, r0
 8009164:	468b      	mov	fp, r1
 8009166:	e656      	b.n	8008e16 <_strtod_l+0x7e>
 8009168:	4b6f      	ldr	r3, [pc, #444]	; (8009328 <_strtod_l+0x590>)
 800916a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800916e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009172:	f7f7 fa49 	bl	8000608 <__aeabi_dmul>
 8009176:	4606      	mov	r6, r0
 8009178:	4628      	mov	r0, r5
 800917a:	460f      	mov	r7, r1
 800917c:	f7f7 f9ca 	bl	8000514 <__aeabi_ui2d>
 8009180:	4602      	mov	r2, r0
 8009182:	460b      	mov	r3, r1
 8009184:	4630      	mov	r0, r6
 8009186:	4639      	mov	r1, r7
 8009188:	f7f7 f888 	bl	800029c <__adddf3>
 800918c:	2c0f      	cmp	r4, #15
 800918e:	4682      	mov	sl, r0
 8009190:	468b      	mov	fp, r1
 8009192:	ddd5      	ble.n	8009140 <_strtod_l+0x3a8>
 8009194:	9b06      	ldr	r3, [sp, #24]
 8009196:	eba4 0808 	sub.w	r8, r4, r8
 800919a:	4498      	add	r8, r3
 800919c:	f1b8 0f00 	cmp.w	r8, #0
 80091a0:	f340 8096 	ble.w	80092d0 <_strtod_l+0x538>
 80091a4:	f018 030f 	ands.w	r3, r8, #15
 80091a8:	d00a      	beq.n	80091c0 <_strtod_l+0x428>
 80091aa:	495f      	ldr	r1, [pc, #380]	; (8009328 <_strtod_l+0x590>)
 80091ac:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80091b0:	4652      	mov	r2, sl
 80091b2:	465b      	mov	r3, fp
 80091b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80091b8:	f7f7 fa26 	bl	8000608 <__aeabi_dmul>
 80091bc:	4682      	mov	sl, r0
 80091be:	468b      	mov	fp, r1
 80091c0:	f038 080f 	bics.w	r8, r8, #15
 80091c4:	d073      	beq.n	80092ae <_strtod_l+0x516>
 80091c6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80091ca:	dd47      	ble.n	800925c <_strtod_l+0x4c4>
 80091cc:	2400      	movs	r4, #0
 80091ce:	46a0      	mov	r8, r4
 80091d0:	9407      	str	r4, [sp, #28]
 80091d2:	9405      	str	r4, [sp, #20]
 80091d4:	2322      	movs	r3, #34	; 0x22
 80091d6:	f8df b158 	ldr.w	fp, [pc, #344]	; 8009330 <_strtod_l+0x598>
 80091da:	f8c9 3000 	str.w	r3, [r9]
 80091de:	f04f 0a00 	mov.w	sl, #0
 80091e2:	9b07      	ldr	r3, [sp, #28]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	f43f ae16 	beq.w	8008e16 <_strtod_l+0x7e>
 80091ea:	991c      	ldr	r1, [sp, #112]	; 0x70
 80091ec:	4648      	mov	r0, r9
 80091ee:	f001 fe02 	bl	800adf6 <_Bfree>
 80091f2:	9905      	ldr	r1, [sp, #20]
 80091f4:	4648      	mov	r0, r9
 80091f6:	f001 fdfe 	bl	800adf6 <_Bfree>
 80091fa:	4641      	mov	r1, r8
 80091fc:	4648      	mov	r0, r9
 80091fe:	f001 fdfa 	bl	800adf6 <_Bfree>
 8009202:	9907      	ldr	r1, [sp, #28]
 8009204:	4648      	mov	r0, r9
 8009206:	f001 fdf6 	bl	800adf6 <_Bfree>
 800920a:	4621      	mov	r1, r4
 800920c:	4648      	mov	r0, r9
 800920e:	f001 fdf2 	bl	800adf6 <_Bfree>
 8009212:	e600      	b.n	8008e16 <_strtod_l+0x7e>
 8009214:	9a06      	ldr	r2, [sp, #24]
 8009216:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800921a:	4293      	cmp	r3, r2
 800921c:	dbba      	blt.n	8009194 <_strtod_l+0x3fc>
 800921e:	4d42      	ldr	r5, [pc, #264]	; (8009328 <_strtod_l+0x590>)
 8009220:	f1c4 040f 	rsb	r4, r4, #15
 8009224:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8009228:	4652      	mov	r2, sl
 800922a:	465b      	mov	r3, fp
 800922c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009230:	f7f7 f9ea 	bl	8000608 <__aeabi_dmul>
 8009234:	9b06      	ldr	r3, [sp, #24]
 8009236:	1b1c      	subs	r4, r3, r4
 8009238:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800923c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009240:	e78d      	b.n	800915e <_strtod_l+0x3c6>
 8009242:	f113 0f16 	cmn.w	r3, #22
 8009246:	dba5      	blt.n	8009194 <_strtod_l+0x3fc>
 8009248:	4a37      	ldr	r2, [pc, #220]	; (8009328 <_strtod_l+0x590>)
 800924a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800924e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8009252:	4650      	mov	r0, sl
 8009254:	4659      	mov	r1, fp
 8009256:	f7f7 fb01 	bl	800085c <__aeabi_ddiv>
 800925a:	e782      	b.n	8009162 <_strtod_l+0x3ca>
 800925c:	2300      	movs	r3, #0
 800925e:	4e33      	ldr	r6, [pc, #204]	; (800932c <_strtod_l+0x594>)
 8009260:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009264:	4650      	mov	r0, sl
 8009266:	4659      	mov	r1, fp
 8009268:	461d      	mov	r5, r3
 800926a:	f1b8 0f01 	cmp.w	r8, #1
 800926e:	dc21      	bgt.n	80092b4 <_strtod_l+0x51c>
 8009270:	b10b      	cbz	r3, 8009276 <_strtod_l+0x4de>
 8009272:	4682      	mov	sl, r0
 8009274:	468b      	mov	fp, r1
 8009276:	4b2d      	ldr	r3, [pc, #180]	; (800932c <_strtod_l+0x594>)
 8009278:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800927c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009280:	4652      	mov	r2, sl
 8009282:	465b      	mov	r3, fp
 8009284:	e9d5 0100 	ldrd	r0, r1, [r5]
 8009288:	f7f7 f9be 	bl	8000608 <__aeabi_dmul>
 800928c:	4b28      	ldr	r3, [pc, #160]	; (8009330 <_strtod_l+0x598>)
 800928e:	460a      	mov	r2, r1
 8009290:	400b      	ands	r3, r1
 8009292:	4928      	ldr	r1, [pc, #160]	; (8009334 <_strtod_l+0x59c>)
 8009294:	428b      	cmp	r3, r1
 8009296:	4682      	mov	sl, r0
 8009298:	d898      	bhi.n	80091cc <_strtod_l+0x434>
 800929a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800929e:	428b      	cmp	r3, r1
 80092a0:	bf86      	itte	hi
 80092a2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800933c <_strtod_l+0x5a4>
 80092a6:	f04f 3aff 	movhi.w	sl, #4294967295
 80092aa:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80092ae:	2300      	movs	r3, #0
 80092b0:	9304      	str	r3, [sp, #16]
 80092b2:	e077      	b.n	80093a4 <_strtod_l+0x60c>
 80092b4:	f018 0f01 	tst.w	r8, #1
 80092b8:	d006      	beq.n	80092c8 <_strtod_l+0x530>
 80092ba:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80092be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092c2:	f7f7 f9a1 	bl	8000608 <__aeabi_dmul>
 80092c6:	2301      	movs	r3, #1
 80092c8:	3501      	adds	r5, #1
 80092ca:	ea4f 0868 	mov.w	r8, r8, asr #1
 80092ce:	e7cc      	b.n	800926a <_strtod_l+0x4d2>
 80092d0:	d0ed      	beq.n	80092ae <_strtod_l+0x516>
 80092d2:	f1c8 0800 	rsb	r8, r8, #0
 80092d6:	f018 020f 	ands.w	r2, r8, #15
 80092da:	d00a      	beq.n	80092f2 <_strtod_l+0x55a>
 80092dc:	4b12      	ldr	r3, [pc, #72]	; (8009328 <_strtod_l+0x590>)
 80092de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80092e2:	4650      	mov	r0, sl
 80092e4:	4659      	mov	r1, fp
 80092e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ea:	f7f7 fab7 	bl	800085c <__aeabi_ddiv>
 80092ee:	4682      	mov	sl, r0
 80092f0:	468b      	mov	fp, r1
 80092f2:	ea5f 1828 	movs.w	r8, r8, asr #4
 80092f6:	d0da      	beq.n	80092ae <_strtod_l+0x516>
 80092f8:	f1b8 0f1f 	cmp.w	r8, #31
 80092fc:	dd20      	ble.n	8009340 <_strtod_l+0x5a8>
 80092fe:	2400      	movs	r4, #0
 8009300:	46a0      	mov	r8, r4
 8009302:	9407      	str	r4, [sp, #28]
 8009304:	9405      	str	r4, [sp, #20]
 8009306:	2322      	movs	r3, #34	; 0x22
 8009308:	f04f 0a00 	mov.w	sl, #0
 800930c:	f04f 0b00 	mov.w	fp, #0
 8009310:	f8c9 3000 	str.w	r3, [r9]
 8009314:	e765      	b.n	80091e2 <_strtod_l+0x44a>
 8009316:	bf00      	nop
 8009318:	0800bde5 	.word	0x0800bde5
 800931c:	0800be6b 	.word	0x0800be6b
 8009320:	0800bded 	.word	0x0800bded
 8009324:	0800be28 	.word	0x0800be28
 8009328:	0800bf10 	.word	0x0800bf10
 800932c:	0800bee8 	.word	0x0800bee8
 8009330:	7ff00000 	.word	0x7ff00000
 8009334:	7ca00000 	.word	0x7ca00000
 8009338:	fff80000 	.word	0xfff80000
 800933c:	7fefffff 	.word	0x7fefffff
 8009340:	f018 0310 	ands.w	r3, r8, #16
 8009344:	bf18      	it	ne
 8009346:	236a      	movne	r3, #106	; 0x6a
 8009348:	4da0      	ldr	r5, [pc, #640]	; (80095cc <_strtod_l+0x834>)
 800934a:	9304      	str	r3, [sp, #16]
 800934c:	4650      	mov	r0, sl
 800934e:	4659      	mov	r1, fp
 8009350:	2300      	movs	r3, #0
 8009352:	f1b8 0f00 	cmp.w	r8, #0
 8009356:	f300 810a 	bgt.w	800956e <_strtod_l+0x7d6>
 800935a:	b10b      	cbz	r3, 8009360 <_strtod_l+0x5c8>
 800935c:	4682      	mov	sl, r0
 800935e:	468b      	mov	fp, r1
 8009360:	9b04      	ldr	r3, [sp, #16]
 8009362:	b1bb      	cbz	r3, 8009394 <_strtod_l+0x5fc>
 8009364:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8009368:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800936c:	2b00      	cmp	r3, #0
 800936e:	4659      	mov	r1, fp
 8009370:	dd10      	ble.n	8009394 <_strtod_l+0x5fc>
 8009372:	2b1f      	cmp	r3, #31
 8009374:	f340 8107 	ble.w	8009586 <_strtod_l+0x7ee>
 8009378:	2b34      	cmp	r3, #52	; 0x34
 800937a:	bfde      	ittt	le
 800937c:	3b20      	suble	r3, #32
 800937e:	f04f 32ff 	movle.w	r2, #4294967295
 8009382:	fa02 f303 	lslle.w	r3, r2, r3
 8009386:	f04f 0a00 	mov.w	sl, #0
 800938a:	bfcc      	ite	gt
 800938c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009390:	ea03 0b01 	andle.w	fp, r3, r1
 8009394:	2200      	movs	r2, #0
 8009396:	2300      	movs	r3, #0
 8009398:	4650      	mov	r0, sl
 800939a:	4659      	mov	r1, fp
 800939c:	f7f7 fb9c 	bl	8000ad8 <__aeabi_dcmpeq>
 80093a0:	2800      	cmp	r0, #0
 80093a2:	d1ac      	bne.n	80092fe <_strtod_l+0x566>
 80093a4:	9b07      	ldr	r3, [sp, #28]
 80093a6:	9300      	str	r3, [sp, #0]
 80093a8:	9a05      	ldr	r2, [sp, #20]
 80093aa:	9908      	ldr	r1, [sp, #32]
 80093ac:	4623      	mov	r3, r4
 80093ae:	4648      	mov	r0, r9
 80093b0:	f001 fd73 	bl	800ae9a <__s2b>
 80093b4:	9007      	str	r0, [sp, #28]
 80093b6:	2800      	cmp	r0, #0
 80093b8:	f43f af08 	beq.w	80091cc <_strtod_l+0x434>
 80093bc:	9a06      	ldr	r2, [sp, #24]
 80093be:	9b06      	ldr	r3, [sp, #24]
 80093c0:	2a00      	cmp	r2, #0
 80093c2:	f1c3 0300 	rsb	r3, r3, #0
 80093c6:	bfa8      	it	ge
 80093c8:	2300      	movge	r3, #0
 80093ca:	930e      	str	r3, [sp, #56]	; 0x38
 80093cc:	2400      	movs	r4, #0
 80093ce:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80093d2:	9316      	str	r3, [sp, #88]	; 0x58
 80093d4:	46a0      	mov	r8, r4
 80093d6:	9b07      	ldr	r3, [sp, #28]
 80093d8:	4648      	mov	r0, r9
 80093da:	6859      	ldr	r1, [r3, #4]
 80093dc:	f001 fcd7 	bl	800ad8e <_Balloc>
 80093e0:	9005      	str	r0, [sp, #20]
 80093e2:	2800      	cmp	r0, #0
 80093e4:	f43f aef6 	beq.w	80091d4 <_strtod_l+0x43c>
 80093e8:	9b07      	ldr	r3, [sp, #28]
 80093ea:	691a      	ldr	r2, [r3, #16]
 80093ec:	3202      	adds	r2, #2
 80093ee:	f103 010c 	add.w	r1, r3, #12
 80093f2:	0092      	lsls	r2, r2, #2
 80093f4:	300c      	adds	r0, #12
 80093f6:	f001 fcbf 	bl	800ad78 <memcpy>
 80093fa:	aa1e      	add	r2, sp, #120	; 0x78
 80093fc:	a91d      	add	r1, sp, #116	; 0x74
 80093fe:	ec4b ab10 	vmov	d0, sl, fp
 8009402:	4648      	mov	r0, r9
 8009404:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8009408:	f002 f802 	bl	800b410 <__d2b>
 800940c:	901c      	str	r0, [sp, #112]	; 0x70
 800940e:	2800      	cmp	r0, #0
 8009410:	f43f aee0 	beq.w	80091d4 <_strtod_l+0x43c>
 8009414:	2101      	movs	r1, #1
 8009416:	4648      	mov	r0, r9
 8009418:	f001 fdcb 	bl	800afb2 <__i2b>
 800941c:	4680      	mov	r8, r0
 800941e:	2800      	cmp	r0, #0
 8009420:	f43f aed8 	beq.w	80091d4 <_strtod_l+0x43c>
 8009424:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8009426:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009428:	2e00      	cmp	r6, #0
 800942a:	bfab      	itete	ge
 800942c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800942e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8009430:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8009432:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8009434:	bfac      	ite	ge
 8009436:	18f7      	addge	r7, r6, r3
 8009438:	1b9d      	sublt	r5, r3, r6
 800943a:	9b04      	ldr	r3, [sp, #16]
 800943c:	1af6      	subs	r6, r6, r3
 800943e:	4416      	add	r6, r2
 8009440:	4b63      	ldr	r3, [pc, #396]	; (80095d0 <_strtod_l+0x838>)
 8009442:	3e01      	subs	r6, #1
 8009444:	429e      	cmp	r6, r3
 8009446:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800944a:	f280 80af 	bge.w	80095ac <_strtod_l+0x814>
 800944e:	1b9b      	subs	r3, r3, r6
 8009450:	2b1f      	cmp	r3, #31
 8009452:	eba2 0203 	sub.w	r2, r2, r3
 8009456:	f04f 0101 	mov.w	r1, #1
 800945a:	f300 809b 	bgt.w	8009594 <_strtod_l+0x7fc>
 800945e:	fa01 f303 	lsl.w	r3, r1, r3
 8009462:	930f      	str	r3, [sp, #60]	; 0x3c
 8009464:	2300      	movs	r3, #0
 8009466:	930a      	str	r3, [sp, #40]	; 0x28
 8009468:	18be      	adds	r6, r7, r2
 800946a:	9b04      	ldr	r3, [sp, #16]
 800946c:	42b7      	cmp	r7, r6
 800946e:	4415      	add	r5, r2
 8009470:	441d      	add	r5, r3
 8009472:	463b      	mov	r3, r7
 8009474:	bfa8      	it	ge
 8009476:	4633      	movge	r3, r6
 8009478:	42ab      	cmp	r3, r5
 800947a:	bfa8      	it	ge
 800947c:	462b      	movge	r3, r5
 800947e:	2b00      	cmp	r3, #0
 8009480:	bfc2      	ittt	gt
 8009482:	1af6      	subgt	r6, r6, r3
 8009484:	1aed      	subgt	r5, r5, r3
 8009486:	1aff      	subgt	r7, r7, r3
 8009488:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800948a:	b1bb      	cbz	r3, 80094bc <_strtod_l+0x724>
 800948c:	4641      	mov	r1, r8
 800948e:	461a      	mov	r2, r3
 8009490:	4648      	mov	r0, r9
 8009492:	f001 fe2d 	bl	800b0f0 <__pow5mult>
 8009496:	4680      	mov	r8, r0
 8009498:	2800      	cmp	r0, #0
 800949a:	f43f ae9b 	beq.w	80091d4 <_strtod_l+0x43c>
 800949e:	4601      	mov	r1, r0
 80094a0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80094a2:	4648      	mov	r0, r9
 80094a4:	f001 fd8e 	bl	800afc4 <__multiply>
 80094a8:	900c      	str	r0, [sp, #48]	; 0x30
 80094aa:	2800      	cmp	r0, #0
 80094ac:	f43f ae92 	beq.w	80091d4 <_strtod_l+0x43c>
 80094b0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80094b2:	4648      	mov	r0, r9
 80094b4:	f001 fc9f 	bl	800adf6 <_Bfree>
 80094b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80094ba:	931c      	str	r3, [sp, #112]	; 0x70
 80094bc:	2e00      	cmp	r6, #0
 80094be:	dc7a      	bgt.n	80095b6 <_strtod_l+0x81e>
 80094c0:	9b06      	ldr	r3, [sp, #24]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	dd08      	ble.n	80094d8 <_strtod_l+0x740>
 80094c6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80094c8:	9905      	ldr	r1, [sp, #20]
 80094ca:	4648      	mov	r0, r9
 80094cc:	f001 fe10 	bl	800b0f0 <__pow5mult>
 80094d0:	9005      	str	r0, [sp, #20]
 80094d2:	2800      	cmp	r0, #0
 80094d4:	f43f ae7e 	beq.w	80091d4 <_strtod_l+0x43c>
 80094d8:	2d00      	cmp	r5, #0
 80094da:	dd08      	ble.n	80094ee <_strtod_l+0x756>
 80094dc:	462a      	mov	r2, r5
 80094de:	9905      	ldr	r1, [sp, #20]
 80094e0:	4648      	mov	r0, r9
 80094e2:	f001 fe53 	bl	800b18c <__lshift>
 80094e6:	9005      	str	r0, [sp, #20]
 80094e8:	2800      	cmp	r0, #0
 80094ea:	f43f ae73 	beq.w	80091d4 <_strtod_l+0x43c>
 80094ee:	2f00      	cmp	r7, #0
 80094f0:	dd08      	ble.n	8009504 <_strtod_l+0x76c>
 80094f2:	4641      	mov	r1, r8
 80094f4:	463a      	mov	r2, r7
 80094f6:	4648      	mov	r0, r9
 80094f8:	f001 fe48 	bl	800b18c <__lshift>
 80094fc:	4680      	mov	r8, r0
 80094fe:	2800      	cmp	r0, #0
 8009500:	f43f ae68 	beq.w	80091d4 <_strtod_l+0x43c>
 8009504:	9a05      	ldr	r2, [sp, #20]
 8009506:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009508:	4648      	mov	r0, r9
 800950a:	f001 fead 	bl	800b268 <__mdiff>
 800950e:	4604      	mov	r4, r0
 8009510:	2800      	cmp	r0, #0
 8009512:	f43f ae5f 	beq.w	80091d4 <_strtod_l+0x43c>
 8009516:	68c3      	ldr	r3, [r0, #12]
 8009518:	930c      	str	r3, [sp, #48]	; 0x30
 800951a:	2300      	movs	r3, #0
 800951c:	60c3      	str	r3, [r0, #12]
 800951e:	4641      	mov	r1, r8
 8009520:	f001 fe88 	bl	800b234 <__mcmp>
 8009524:	2800      	cmp	r0, #0
 8009526:	da55      	bge.n	80095d4 <_strtod_l+0x83c>
 8009528:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800952a:	b9e3      	cbnz	r3, 8009566 <_strtod_l+0x7ce>
 800952c:	f1ba 0f00 	cmp.w	sl, #0
 8009530:	d119      	bne.n	8009566 <_strtod_l+0x7ce>
 8009532:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009536:	b9b3      	cbnz	r3, 8009566 <_strtod_l+0x7ce>
 8009538:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800953c:	0d1b      	lsrs	r3, r3, #20
 800953e:	051b      	lsls	r3, r3, #20
 8009540:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009544:	d90f      	bls.n	8009566 <_strtod_l+0x7ce>
 8009546:	6963      	ldr	r3, [r4, #20]
 8009548:	b913      	cbnz	r3, 8009550 <_strtod_l+0x7b8>
 800954a:	6923      	ldr	r3, [r4, #16]
 800954c:	2b01      	cmp	r3, #1
 800954e:	dd0a      	ble.n	8009566 <_strtod_l+0x7ce>
 8009550:	4621      	mov	r1, r4
 8009552:	2201      	movs	r2, #1
 8009554:	4648      	mov	r0, r9
 8009556:	f001 fe19 	bl	800b18c <__lshift>
 800955a:	4641      	mov	r1, r8
 800955c:	4604      	mov	r4, r0
 800955e:	f001 fe69 	bl	800b234 <__mcmp>
 8009562:	2800      	cmp	r0, #0
 8009564:	dc67      	bgt.n	8009636 <_strtod_l+0x89e>
 8009566:	9b04      	ldr	r3, [sp, #16]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d171      	bne.n	8009650 <_strtod_l+0x8b8>
 800956c:	e63d      	b.n	80091ea <_strtod_l+0x452>
 800956e:	f018 0f01 	tst.w	r8, #1
 8009572:	d004      	beq.n	800957e <_strtod_l+0x7e6>
 8009574:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009578:	f7f7 f846 	bl	8000608 <__aeabi_dmul>
 800957c:	2301      	movs	r3, #1
 800957e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009582:	3508      	adds	r5, #8
 8009584:	e6e5      	b.n	8009352 <_strtod_l+0x5ba>
 8009586:	f04f 32ff 	mov.w	r2, #4294967295
 800958a:	fa02 f303 	lsl.w	r3, r2, r3
 800958e:	ea03 0a0a 	and.w	sl, r3, sl
 8009592:	e6ff      	b.n	8009394 <_strtod_l+0x5fc>
 8009594:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8009598:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800959c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80095a0:	36e2      	adds	r6, #226	; 0xe2
 80095a2:	fa01 f306 	lsl.w	r3, r1, r6
 80095a6:	930a      	str	r3, [sp, #40]	; 0x28
 80095a8:	910f      	str	r1, [sp, #60]	; 0x3c
 80095aa:	e75d      	b.n	8009468 <_strtod_l+0x6d0>
 80095ac:	2300      	movs	r3, #0
 80095ae:	930a      	str	r3, [sp, #40]	; 0x28
 80095b0:	2301      	movs	r3, #1
 80095b2:	930f      	str	r3, [sp, #60]	; 0x3c
 80095b4:	e758      	b.n	8009468 <_strtod_l+0x6d0>
 80095b6:	4632      	mov	r2, r6
 80095b8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80095ba:	4648      	mov	r0, r9
 80095bc:	f001 fde6 	bl	800b18c <__lshift>
 80095c0:	901c      	str	r0, [sp, #112]	; 0x70
 80095c2:	2800      	cmp	r0, #0
 80095c4:	f47f af7c 	bne.w	80094c0 <_strtod_l+0x728>
 80095c8:	e604      	b.n	80091d4 <_strtod_l+0x43c>
 80095ca:	bf00      	nop
 80095cc:	0800be40 	.word	0x0800be40
 80095d0:	fffffc02 	.word	0xfffffc02
 80095d4:	465d      	mov	r5, fp
 80095d6:	f040 8086 	bne.w	80096e6 <_strtod_l+0x94e>
 80095da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80095dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80095e0:	b32a      	cbz	r2, 800962e <_strtod_l+0x896>
 80095e2:	4aaf      	ldr	r2, [pc, #700]	; (80098a0 <_strtod_l+0xb08>)
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d153      	bne.n	8009690 <_strtod_l+0x8f8>
 80095e8:	9b04      	ldr	r3, [sp, #16]
 80095ea:	4650      	mov	r0, sl
 80095ec:	b1d3      	cbz	r3, 8009624 <_strtod_l+0x88c>
 80095ee:	4aad      	ldr	r2, [pc, #692]	; (80098a4 <_strtod_l+0xb0c>)
 80095f0:	402a      	ands	r2, r5
 80095f2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80095f6:	f04f 31ff 	mov.w	r1, #4294967295
 80095fa:	d816      	bhi.n	800962a <_strtod_l+0x892>
 80095fc:	0d12      	lsrs	r2, r2, #20
 80095fe:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009602:	fa01 f303 	lsl.w	r3, r1, r3
 8009606:	4298      	cmp	r0, r3
 8009608:	d142      	bne.n	8009690 <_strtod_l+0x8f8>
 800960a:	4ba7      	ldr	r3, [pc, #668]	; (80098a8 <_strtod_l+0xb10>)
 800960c:	429d      	cmp	r5, r3
 800960e:	d102      	bne.n	8009616 <_strtod_l+0x87e>
 8009610:	3001      	adds	r0, #1
 8009612:	f43f addf 	beq.w	80091d4 <_strtod_l+0x43c>
 8009616:	4ba3      	ldr	r3, [pc, #652]	; (80098a4 <_strtod_l+0xb0c>)
 8009618:	402b      	ands	r3, r5
 800961a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800961e:	f04f 0a00 	mov.w	sl, #0
 8009622:	e7a0      	b.n	8009566 <_strtod_l+0x7ce>
 8009624:	f04f 33ff 	mov.w	r3, #4294967295
 8009628:	e7ed      	b.n	8009606 <_strtod_l+0x86e>
 800962a:	460b      	mov	r3, r1
 800962c:	e7eb      	b.n	8009606 <_strtod_l+0x86e>
 800962e:	bb7b      	cbnz	r3, 8009690 <_strtod_l+0x8f8>
 8009630:	f1ba 0f00 	cmp.w	sl, #0
 8009634:	d12c      	bne.n	8009690 <_strtod_l+0x8f8>
 8009636:	9904      	ldr	r1, [sp, #16]
 8009638:	4a9a      	ldr	r2, [pc, #616]	; (80098a4 <_strtod_l+0xb0c>)
 800963a:	465b      	mov	r3, fp
 800963c:	b1f1      	cbz	r1, 800967c <_strtod_l+0x8e4>
 800963e:	ea02 010b 	and.w	r1, r2, fp
 8009642:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009646:	dc19      	bgt.n	800967c <_strtod_l+0x8e4>
 8009648:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800964c:	f77f ae5b 	ble.w	8009306 <_strtod_l+0x56e>
 8009650:	4a96      	ldr	r2, [pc, #600]	; (80098ac <_strtod_l+0xb14>)
 8009652:	2300      	movs	r3, #0
 8009654:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8009658:	4650      	mov	r0, sl
 800965a:	4659      	mov	r1, fp
 800965c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009660:	f7f6 ffd2 	bl	8000608 <__aeabi_dmul>
 8009664:	4682      	mov	sl, r0
 8009666:	468b      	mov	fp, r1
 8009668:	2900      	cmp	r1, #0
 800966a:	f47f adbe 	bne.w	80091ea <_strtod_l+0x452>
 800966e:	2800      	cmp	r0, #0
 8009670:	f47f adbb 	bne.w	80091ea <_strtod_l+0x452>
 8009674:	2322      	movs	r3, #34	; 0x22
 8009676:	f8c9 3000 	str.w	r3, [r9]
 800967a:	e5b6      	b.n	80091ea <_strtod_l+0x452>
 800967c:	4013      	ands	r3, r2
 800967e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009682:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009686:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800968a:	f04f 3aff 	mov.w	sl, #4294967295
 800968e:	e76a      	b.n	8009566 <_strtod_l+0x7ce>
 8009690:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009692:	b193      	cbz	r3, 80096ba <_strtod_l+0x922>
 8009694:	422b      	tst	r3, r5
 8009696:	f43f af66 	beq.w	8009566 <_strtod_l+0x7ce>
 800969a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800969c:	9a04      	ldr	r2, [sp, #16]
 800969e:	4650      	mov	r0, sl
 80096a0:	4659      	mov	r1, fp
 80096a2:	b173      	cbz	r3, 80096c2 <_strtod_l+0x92a>
 80096a4:	f7ff fb59 	bl	8008d5a <sulp>
 80096a8:	4602      	mov	r2, r0
 80096aa:	460b      	mov	r3, r1
 80096ac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80096b0:	f7f6 fdf4 	bl	800029c <__adddf3>
 80096b4:	4682      	mov	sl, r0
 80096b6:	468b      	mov	fp, r1
 80096b8:	e755      	b.n	8009566 <_strtod_l+0x7ce>
 80096ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80096bc:	ea13 0f0a 	tst.w	r3, sl
 80096c0:	e7e9      	b.n	8009696 <_strtod_l+0x8fe>
 80096c2:	f7ff fb4a 	bl	8008d5a <sulp>
 80096c6:	4602      	mov	r2, r0
 80096c8:	460b      	mov	r3, r1
 80096ca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80096ce:	f7f6 fde3 	bl	8000298 <__aeabi_dsub>
 80096d2:	2200      	movs	r2, #0
 80096d4:	2300      	movs	r3, #0
 80096d6:	4682      	mov	sl, r0
 80096d8:	468b      	mov	fp, r1
 80096da:	f7f7 f9fd 	bl	8000ad8 <__aeabi_dcmpeq>
 80096de:	2800      	cmp	r0, #0
 80096e0:	f47f ae11 	bne.w	8009306 <_strtod_l+0x56e>
 80096e4:	e73f      	b.n	8009566 <_strtod_l+0x7ce>
 80096e6:	4641      	mov	r1, r8
 80096e8:	4620      	mov	r0, r4
 80096ea:	f001 fee0 	bl	800b4ae <__ratio>
 80096ee:	ec57 6b10 	vmov	r6, r7, d0
 80096f2:	2200      	movs	r2, #0
 80096f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80096f8:	ee10 0a10 	vmov	r0, s0
 80096fc:	4639      	mov	r1, r7
 80096fe:	f7f7 f9ff 	bl	8000b00 <__aeabi_dcmple>
 8009702:	2800      	cmp	r0, #0
 8009704:	d077      	beq.n	80097f6 <_strtod_l+0xa5e>
 8009706:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009708:	2b00      	cmp	r3, #0
 800970a:	d04a      	beq.n	80097a2 <_strtod_l+0xa0a>
 800970c:	4b68      	ldr	r3, [pc, #416]	; (80098b0 <_strtod_l+0xb18>)
 800970e:	2200      	movs	r2, #0
 8009710:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009714:	4f66      	ldr	r7, [pc, #408]	; (80098b0 <_strtod_l+0xb18>)
 8009716:	2600      	movs	r6, #0
 8009718:	4b62      	ldr	r3, [pc, #392]	; (80098a4 <_strtod_l+0xb0c>)
 800971a:	402b      	ands	r3, r5
 800971c:	930f      	str	r3, [sp, #60]	; 0x3c
 800971e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009720:	4b64      	ldr	r3, [pc, #400]	; (80098b4 <_strtod_l+0xb1c>)
 8009722:	429a      	cmp	r2, r3
 8009724:	f040 80ce 	bne.w	80098c4 <_strtod_l+0xb2c>
 8009728:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800972c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009730:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8009734:	ec4b ab10 	vmov	d0, sl, fp
 8009738:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800973c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009740:	f001 fdf0 	bl	800b324 <__ulp>
 8009744:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009748:	ec53 2b10 	vmov	r2, r3, d0
 800974c:	f7f6 ff5c 	bl	8000608 <__aeabi_dmul>
 8009750:	4652      	mov	r2, sl
 8009752:	465b      	mov	r3, fp
 8009754:	f7f6 fda2 	bl	800029c <__adddf3>
 8009758:	460b      	mov	r3, r1
 800975a:	4952      	ldr	r1, [pc, #328]	; (80098a4 <_strtod_l+0xb0c>)
 800975c:	4a56      	ldr	r2, [pc, #344]	; (80098b8 <_strtod_l+0xb20>)
 800975e:	4019      	ands	r1, r3
 8009760:	4291      	cmp	r1, r2
 8009762:	4682      	mov	sl, r0
 8009764:	d95b      	bls.n	800981e <_strtod_l+0xa86>
 8009766:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009768:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800976c:	4293      	cmp	r3, r2
 800976e:	d103      	bne.n	8009778 <_strtod_l+0x9e0>
 8009770:	9b08      	ldr	r3, [sp, #32]
 8009772:	3301      	adds	r3, #1
 8009774:	f43f ad2e 	beq.w	80091d4 <_strtod_l+0x43c>
 8009778:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80098a8 <_strtod_l+0xb10>
 800977c:	f04f 3aff 	mov.w	sl, #4294967295
 8009780:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009782:	4648      	mov	r0, r9
 8009784:	f001 fb37 	bl	800adf6 <_Bfree>
 8009788:	9905      	ldr	r1, [sp, #20]
 800978a:	4648      	mov	r0, r9
 800978c:	f001 fb33 	bl	800adf6 <_Bfree>
 8009790:	4641      	mov	r1, r8
 8009792:	4648      	mov	r0, r9
 8009794:	f001 fb2f 	bl	800adf6 <_Bfree>
 8009798:	4621      	mov	r1, r4
 800979a:	4648      	mov	r0, r9
 800979c:	f001 fb2b 	bl	800adf6 <_Bfree>
 80097a0:	e619      	b.n	80093d6 <_strtod_l+0x63e>
 80097a2:	f1ba 0f00 	cmp.w	sl, #0
 80097a6:	d11a      	bne.n	80097de <_strtod_l+0xa46>
 80097a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80097ac:	b9eb      	cbnz	r3, 80097ea <_strtod_l+0xa52>
 80097ae:	2200      	movs	r2, #0
 80097b0:	4b3f      	ldr	r3, [pc, #252]	; (80098b0 <_strtod_l+0xb18>)
 80097b2:	4630      	mov	r0, r6
 80097b4:	4639      	mov	r1, r7
 80097b6:	f7f7 f999 	bl	8000aec <__aeabi_dcmplt>
 80097ba:	b9c8      	cbnz	r0, 80097f0 <_strtod_l+0xa58>
 80097bc:	4630      	mov	r0, r6
 80097be:	4639      	mov	r1, r7
 80097c0:	2200      	movs	r2, #0
 80097c2:	4b3e      	ldr	r3, [pc, #248]	; (80098bc <_strtod_l+0xb24>)
 80097c4:	f7f6 ff20 	bl	8000608 <__aeabi_dmul>
 80097c8:	4606      	mov	r6, r0
 80097ca:	460f      	mov	r7, r1
 80097cc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80097d0:	9618      	str	r6, [sp, #96]	; 0x60
 80097d2:	9319      	str	r3, [sp, #100]	; 0x64
 80097d4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80097d8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80097dc:	e79c      	b.n	8009718 <_strtod_l+0x980>
 80097de:	f1ba 0f01 	cmp.w	sl, #1
 80097e2:	d102      	bne.n	80097ea <_strtod_l+0xa52>
 80097e4:	2d00      	cmp	r5, #0
 80097e6:	f43f ad8e 	beq.w	8009306 <_strtod_l+0x56e>
 80097ea:	2200      	movs	r2, #0
 80097ec:	4b34      	ldr	r3, [pc, #208]	; (80098c0 <_strtod_l+0xb28>)
 80097ee:	e78f      	b.n	8009710 <_strtod_l+0x978>
 80097f0:	2600      	movs	r6, #0
 80097f2:	4f32      	ldr	r7, [pc, #200]	; (80098bc <_strtod_l+0xb24>)
 80097f4:	e7ea      	b.n	80097cc <_strtod_l+0xa34>
 80097f6:	4b31      	ldr	r3, [pc, #196]	; (80098bc <_strtod_l+0xb24>)
 80097f8:	4630      	mov	r0, r6
 80097fa:	4639      	mov	r1, r7
 80097fc:	2200      	movs	r2, #0
 80097fe:	f7f6 ff03 	bl	8000608 <__aeabi_dmul>
 8009802:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009804:	4606      	mov	r6, r0
 8009806:	460f      	mov	r7, r1
 8009808:	b933      	cbnz	r3, 8009818 <_strtod_l+0xa80>
 800980a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800980e:	9010      	str	r0, [sp, #64]	; 0x40
 8009810:	9311      	str	r3, [sp, #68]	; 0x44
 8009812:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009816:	e7df      	b.n	80097d8 <_strtod_l+0xa40>
 8009818:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800981c:	e7f9      	b.n	8009812 <_strtod_l+0xa7a>
 800981e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009822:	9b04      	ldr	r3, [sp, #16]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d1ab      	bne.n	8009780 <_strtod_l+0x9e8>
 8009828:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800982c:	0d1b      	lsrs	r3, r3, #20
 800982e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009830:	051b      	lsls	r3, r3, #20
 8009832:	429a      	cmp	r2, r3
 8009834:	465d      	mov	r5, fp
 8009836:	d1a3      	bne.n	8009780 <_strtod_l+0x9e8>
 8009838:	4639      	mov	r1, r7
 800983a:	4630      	mov	r0, r6
 800983c:	f7f7 f994 	bl	8000b68 <__aeabi_d2iz>
 8009840:	f7f6 fe78 	bl	8000534 <__aeabi_i2d>
 8009844:	460b      	mov	r3, r1
 8009846:	4602      	mov	r2, r0
 8009848:	4639      	mov	r1, r7
 800984a:	4630      	mov	r0, r6
 800984c:	f7f6 fd24 	bl	8000298 <__aeabi_dsub>
 8009850:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009852:	4606      	mov	r6, r0
 8009854:	460f      	mov	r7, r1
 8009856:	b933      	cbnz	r3, 8009866 <_strtod_l+0xace>
 8009858:	f1ba 0f00 	cmp.w	sl, #0
 800985c:	d103      	bne.n	8009866 <_strtod_l+0xace>
 800985e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8009862:	2d00      	cmp	r5, #0
 8009864:	d06d      	beq.n	8009942 <_strtod_l+0xbaa>
 8009866:	a30a      	add	r3, pc, #40	; (adr r3, 8009890 <_strtod_l+0xaf8>)
 8009868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800986c:	4630      	mov	r0, r6
 800986e:	4639      	mov	r1, r7
 8009870:	f7f7 f93c 	bl	8000aec <__aeabi_dcmplt>
 8009874:	2800      	cmp	r0, #0
 8009876:	f47f acb8 	bne.w	80091ea <_strtod_l+0x452>
 800987a:	a307      	add	r3, pc, #28	; (adr r3, 8009898 <_strtod_l+0xb00>)
 800987c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009880:	4630      	mov	r0, r6
 8009882:	4639      	mov	r1, r7
 8009884:	f7f7 f950 	bl	8000b28 <__aeabi_dcmpgt>
 8009888:	2800      	cmp	r0, #0
 800988a:	f43f af79 	beq.w	8009780 <_strtod_l+0x9e8>
 800988e:	e4ac      	b.n	80091ea <_strtod_l+0x452>
 8009890:	94a03595 	.word	0x94a03595
 8009894:	3fdfffff 	.word	0x3fdfffff
 8009898:	35afe535 	.word	0x35afe535
 800989c:	3fe00000 	.word	0x3fe00000
 80098a0:	000fffff 	.word	0x000fffff
 80098a4:	7ff00000 	.word	0x7ff00000
 80098a8:	7fefffff 	.word	0x7fefffff
 80098ac:	39500000 	.word	0x39500000
 80098b0:	3ff00000 	.word	0x3ff00000
 80098b4:	7fe00000 	.word	0x7fe00000
 80098b8:	7c9fffff 	.word	0x7c9fffff
 80098bc:	3fe00000 	.word	0x3fe00000
 80098c0:	bff00000 	.word	0xbff00000
 80098c4:	9b04      	ldr	r3, [sp, #16]
 80098c6:	b333      	cbz	r3, 8009916 <_strtod_l+0xb7e>
 80098c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80098ca:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80098ce:	d822      	bhi.n	8009916 <_strtod_l+0xb7e>
 80098d0:	a327      	add	r3, pc, #156	; (adr r3, 8009970 <_strtod_l+0xbd8>)
 80098d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d6:	4630      	mov	r0, r6
 80098d8:	4639      	mov	r1, r7
 80098da:	f7f7 f911 	bl	8000b00 <__aeabi_dcmple>
 80098de:	b1a0      	cbz	r0, 800990a <_strtod_l+0xb72>
 80098e0:	4639      	mov	r1, r7
 80098e2:	4630      	mov	r0, r6
 80098e4:	f7f7 f968 	bl	8000bb8 <__aeabi_d2uiz>
 80098e8:	2800      	cmp	r0, #0
 80098ea:	bf08      	it	eq
 80098ec:	2001      	moveq	r0, #1
 80098ee:	f7f6 fe11 	bl	8000514 <__aeabi_ui2d>
 80098f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80098f4:	4606      	mov	r6, r0
 80098f6:	460f      	mov	r7, r1
 80098f8:	bb03      	cbnz	r3, 800993c <_strtod_l+0xba4>
 80098fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80098fe:	9012      	str	r0, [sp, #72]	; 0x48
 8009900:	9313      	str	r3, [sp, #76]	; 0x4c
 8009902:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8009906:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800990a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800990c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800990e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009912:	1a9b      	subs	r3, r3, r2
 8009914:	930b      	str	r3, [sp, #44]	; 0x2c
 8009916:	ed9d 0b08 	vldr	d0, [sp, #32]
 800991a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800991e:	f001 fd01 	bl	800b324 <__ulp>
 8009922:	4650      	mov	r0, sl
 8009924:	ec53 2b10 	vmov	r2, r3, d0
 8009928:	4659      	mov	r1, fp
 800992a:	f7f6 fe6d 	bl	8000608 <__aeabi_dmul>
 800992e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009932:	f7f6 fcb3 	bl	800029c <__adddf3>
 8009936:	4682      	mov	sl, r0
 8009938:	468b      	mov	fp, r1
 800993a:	e772      	b.n	8009822 <_strtod_l+0xa8a>
 800993c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8009940:	e7df      	b.n	8009902 <_strtod_l+0xb6a>
 8009942:	a30d      	add	r3, pc, #52	; (adr r3, 8009978 <_strtod_l+0xbe0>)
 8009944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009948:	f7f7 f8d0 	bl	8000aec <__aeabi_dcmplt>
 800994c:	e79c      	b.n	8009888 <_strtod_l+0xaf0>
 800994e:	2300      	movs	r3, #0
 8009950:	930d      	str	r3, [sp, #52]	; 0x34
 8009952:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009954:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009956:	6013      	str	r3, [r2, #0]
 8009958:	f7ff ba61 	b.w	8008e1e <_strtod_l+0x86>
 800995c:	2b65      	cmp	r3, #101	; 0x65
 800995e:	f04f 0200 	mov.w	r2, #0
 8009962:	f43f ab4e 	beq.w	8009002 <_strtod_l+0x26a>
 8009966:	2101      	movs	r1, #1
 8009968:	4614      	mov	r4, r2
 800996a:	9104      	str	r1, [sp, #16]
 800996c:	f7ff bacb 	b.w	8008f06 <_strtod_l+0x16e>
 8009970:	ffc00000 	.word	0xffc00000
 8009974:	41dfffff 	.word	0x41dfffff
 8009978:	94a03595 	.word	0x94a03595
 800997c:	3fcfffff 	.word	0x3fcfffff

08009980 <strtod>:
 8009980:	4b07      	ldr	r3, [pc, #28]	; (80099a0 <strtod+0x20>)
 8009982:	4a08      	ldr	r2, [pc, #32]	; (80099a4 <strtod+0x24>)
 8009984:	b410      	push	{r4}
 8009986:	681c      	ldr	r4, [r3, #0]
 8009988:	6a23      	ldr	r3, [r4, #32]
 800998a:	2b00      	cmp	r3, #0
 800998c:	bf08      	it	eq
 800998e:	4613      	moveq	r3, r2
 8009990:	460a      	mov	r2, r1
 8009992:	4601      	mov	r1, r0
 8009994:	4620      	mov	r0, r4
 8009996:	f85d 4b04 	ldr.w	r4, [sp], #4
 800999a:	f7ff b9fd 	b.w	8008d98 <_strtod_l>
 800999e:	bf00      	nop
 80099a0:	20000054 	.word	0x20000054
 80099a4:	200000b8 	.word	0x200000b8

080099a8 <strtok>:
 80099a8:	4b13      	ldr	r3, [pc, #76]	; (80099f8 <strtok+0x50>)
 80099aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099ae:	681d      	ldr	r5, [r3, #0]
 80099b0:	6dac      	ldr	r4, [r5, #88]	; 0x58
 80099b2:	4606      	mov	r6, r0
 80099b4:	460f      	mov	r7, r1
 80099b6:	b9b4      	cbnz	r4, 80099e6 <strtok+0x3e>
 80099b8:	2050      	movs	r0, #80	; 0x50
 80099ba:	f001 f9c3 	bl	800ad44 <malloc>
 80099be:	65a8      	str	r0, [r5, #88]	; 0x58
 80099c0:	e9c0 4400 	strd	r4, r4, [r0]
 80099c4:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80099c8:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80099cc:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80099d0:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80099d4:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80099d8:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80099dc:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80099e0:	6184      	str	r4, [r0, #24]
 80099e2:	7704      	strb	r4, [r0, #28]
 80099e4:	6244      	str	r4, [r0, #36]	; 0x24
 80099e6:	6daa      	ldr	r2, [r5, #88]	; 0x58
 80099e8:	4639      	mov	r1, r7
 80099ea:	4630      	mov	r0, r6
 80099ec:	2301      	movs	r3, #1
 80099ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80099f2:	f000 b803 	b.w	80099fc <__strtok_r>
 80099f6:	bf00      	nop
 80099f8:	20000054 	.word	0x20000054

080099fc <__strtok_r>:
 80099fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099fe:	b918      	cbnz	r0, 8009a08 <__strtok_r+0xc>
 8009a00:	6810      	ldr	r0, [r2, #0]
 8009a02:	b908      	cbnz	r0, 8009a08 <__strtok_r+0xc>
 8009a04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a06:	4620      	mov	r0, r4
 8009a08:	4604      	mov	r4, r0
 8009a0a:	460f      	mov	r7, r1
 8009a0c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009a10:	f817 6b01 	ldrb.w	r6, [r7], #1
 8009a14:	b91e      	cbnz	r6, 8009a1e <__strtok_r+0x22>
 8009a16:	b96d      	cbnz	r5, 8009a34 <__strtok_r+0x38>
 8009a18:	6015      	str	r5, [r2, #0]
 8009a1a:	4628      	mov	r0, r5
 8009a1c:	e7f2      	b.n	8009a04 <__strtok_r+0x8>
 8009a1e:	42b5      	cmp	r5, r6
 8009a20:	d1f6      	bne.n	8009a10 <__strtok_r+0x14>
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d1ef      	bne.n	8009a06 <__strtok_r+0xa>
 8009a26:	6014      	str	r4, [r2, #0]
 8009a28:	7003      	strb	r3, [r0, #0]
 8009a2a:	e7eb      	b.n	8009a04 <__strtok_r+0x8>
 8009a2c:	462b      	mov	r3, r5
 8009a2e:	e00d      	b.n	8009a4c <__strtok_r+0x50>
 8009a30:	b926      	cbnz	r6, 8009a3c <__strtok_r+0x40>
 8009a32:	461c      	mov	r4, r3
 8009a34:	4623      	mov	r3, r4
 8009a36:	460f      	mov	r7, r1
 8009a38:	f813 5b01 	ldrb.w	r5, [r3], #1
 8009a3c:	f817 6b01 	ldrb.w	r6, [r7], #1
 8009a40:	42b5      	cmp	r5, r6
 8009a42:	d1f5      	bne.n	8009a30 <__strtok_r+0x34>
 8009a44:	2d00      	cmp	r5, #0
 8009a46:	d0f1      	beq.n	8009a2c <__strtok_r+0x30>
 8009a48:	2100      	movs	r1, #0
 8009a4a:	7021      	strb	r1, [r4, #0]
 8009a4c:	6013      	str	r3, [r2, #0]
 8009a4e:	e7d9      	b.n	8009a04 <__strtok_r+0x8>

08009a50 <quorem>:
 8009a50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a54:	6903      	ldr	r3, [r0, #16]
 8009a56:	690c      	ldr	r4, [r1, #16]
 8009a58:	42a3      	cmp	r3, r4
 8009a5a:	4680      	mov	r8, r0
 8009a5c:	f2c0 8082 	blt.w	8009b64 <quorem+0x114>
 8009a60:	3c01      	subs	r4, #1
 8009a62:	f101 0714 	add.w	r7, r1, #20
 8009a66:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8009a6a:	f100 0614 	add.w	r6, r0, #20
 8009a6e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8009a72:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8009a76:	eb06 030c 	add.w	r3, r6, ip
 8009a7a:	3501      	adds	r5, #1
 8009a7c:	eb07 090c 	add.w	r9, r7, ip
 8009a80:	9301      	str	r3, [sp, #4]
 8009a82:	fbb0 f5f5 	udiv	r5, r0, r5
 8009a86:	b395      	cbz	r5, 8009aee <quorem+0x9e>
 8009a88:	f04f 0a00 	mov.w	sl, #0
 8009a8c:	4638      	mov	r0, r7
 8009a8e:	46b6      	mov	lr, r6
 8009a90:	46d3      	mov	fp, sl
 8009a92:	f850 2b04 	ldr.w	r2, [r0], #4
 8009a96:	b293      	uxth	r3, r2
 8009a98:	fb05 a303 	mla	r3, r5, r3, sl
 8009a9c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009aa0:	b29b      	uxth	r3, r3
 8009aa2:	ebab 0303 	sub.w	r3, fp, r3
 8009aa6:	0c12      	lsrs	r2, r2, #16
 8009aa8:	f8de b000 	ldr.w	fp, [lr]
 8009aac:	fb05 a202 	mla	r2, r5, r2, sl
 8009ab0:	fa13 f38b 	uxtah	r3, r3, fp
 8009ab4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8009ab8:	fa1f fb82 	uxth.w	fp, r2
 8009abc:	f8de 2000 	ldr.w	r2, [lr]
 8009ac0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8009ac4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009ac8:	b29b      	uxth	r3, r3
 8009aca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009ace:	4581      	cmp	r9, r0
 8009ad0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8009ad4:	f84e 3b04 	str.w	r3, [lr], #4
 8009ad8:	d2db      	bcs.n	8009a92 <quorem+0x42>
 8009ada:	f856 300c 	ldr.w	r3, [r6, ip]
 8009ade:	b933      	cbnz	r3, 8009aee <quorem+0x9e>
 8009ae0:	9b01      	ldr	r3, [sp, #4]
 8009ae2:	3b04      	subs	r3, #4
 8009ae4:	429e      	cmp	r6, r3
 8009ae6:	461a      	mov	r2, r3
 8009ae8:	d330      	bcc.n	8009b4c <quorem+0xfc>
 8009aea:	f8c8 4010 	str.w	r4, [r8, #16]
 8009aee:	4640      	mov	r0, r8
 8009af0:	f001 fba0 	bl	800b234 <__mcmp>
 8009af4:	2800      	cmp	r0, #0
 8009af6:	db25      	blt.n	8009b44 <quorem+0xf4>
 8009af8:	3501      	adds	r5, #1
 8009afa:	4630      	mov	r0, r6
 8009afc:	f04f 0c00 	mov.w	ip, #0
 8009b00:	f857 2b04 	ldr.w	r2, [r7], #4
 8009b04:	f8d0 e000 	ldr.w	lr, [r0]
 8009b08:	b293      	uxth	r3, r2
 8009b0a:	ebac 0303 	sub.w	r3, ip, r3
 8009b0e:	0c12      	lsrs	r2, r2, #16
 8009b10:	fa13 f38e 	uxtah	r3, r3, lr
 8009b14:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009b18:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009b1c:	b29b      	uxth	r3, r3
 8009b1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009b22:	45b9      	cmp	r9, r7
 8009b24:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009b28:	f840 3b04 	str.w	r3, [r0], #4
 8009b2c:	d2e8      	bcs.n	8009b00 <quorem+0xb0>
 8009b2e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8009b32:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8009b36:	b92a      	cbnz	r2, 8009b44 <quorem+0xf4>
 8009b38:	3b04      	subs	r3, #4
 8009b3a:	429e      	cmp	r6, r3
 8009b3c:	461a      	mov	r2, r3
 8009b3e:	d30b      	bcc.n	8009b58 <quorem+0x108>
 8009b40:	f8c8 4010 	str.w	r4, [r8, #16]
 8009b44:	4628      	mov	r0, r5
 8009b46:	b003      	add	sp, #12
 8009b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b4c:	6812      	ldr	r2, [r2, #0]
 8009b4e:	3b04      	subs	r3, #4
 8009b50:	2a00      	cmp	r2, #0
 8009b52:	d1ca      	bne.n	8009aea <quorem+0x9a>
 8009b54:	3c01      	subs	r4, #1
 8009b56:	e7c5      	b.n	8009ae4 <quorem+0x94>
 8009b58:	6812      	ldr	r2, [r2, #0]
 8009b5a:	3b04      	subs	r3, #4
 8009b5c:	2a00      	cmp	r2, #0
 8009b5e:	d1ef      	bne.n	8009b40 <quorem+0xf0>
 8009b60:	3c01      	subs	r4, #1
 8009b62:	e7ea      	b.n	8009b3a <quorem+0xea>
 8009b64:	2000      	movs	r0, #0
 8009b66:	e7ee      	b.n	8009b46 <quorem+0xf6>

08009b68 <_dtoa_r>:
 8009b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b6c:	ec57 6b10 	vmov	r6, r7, d0
 8009b70:	b097      	sub	sp, #92	; 0x5c
 8009b72:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009b74:	9106      	str	r1, [sp, #24]
 8009b76:	4604      	mov	r4, r0
 8009b78:	920b      	str	r2, [sp, #44]	; 0x2c
 8009b7a:	9312      	str	r3, [sp, #72]	; 0x48
 8009b7c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009b80:	e9cd 6700 	strd	r6, r7, [sp]
 8009b84:	b93d      	cbnz	r5, 8009b96 <_dtoa_r+0x2e>
 8009b86:	2010      	movs	r0, #16
 8009b88:	f001 f8dc 	bl	800ad44 <malloc>
 8009b8c:	6260      	str	r0, [r4, #36]	; 0x24
 8009b8e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009b92:	6005      	str	r5, [r0, #0]
 8009b94:	60c5      	str	r5, [r0, #12]
 8009b96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b98:	6819      	ldr	r1, [r3, #0]
 8009b9a:	b151      	cbz	r1, 8009bb2 <_dtoa_r+0x4a>
 8009b9c:	685a      	ldr	r2, [r3, #4]
 8009b9e:	604a      	str	r2, [r1, #4]
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	4093      	lsls	r3, r2
 8009ba4:	608b      	str	r3, [r1, #8]
 8009ba6:	4620      	mov	r0, r4
 8009ba8:	f001 f925 	bl	800adf6 <_Bfree>
 8009bac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009bae:	2200      	movs	r2, #0
 8009bb0:	601a      	str	r2, [r3, #0]
 8009bb2:	1e3b      	subs	r3, r7, #0
 8009bb4:	bfbb      	ittet	lt
 8009bb6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009bba:	9301      	strlt	r3, [sp, #4]
 8009bbc:	2300      	movge	r3, #0
 8009bbe:	2201      	movlt	r2, #1
 8009bc0:	bfac      	ite	ge
 8009bc2:	f8c8 3000 	strge.w	r3, [r8]
 8009bc6:	f8c8 2000 	strlt.w	r2, [r8]
 8009bca:	4baf      	ldr	r3, [pc, #700]	; (8009e88 <_dtoa_r+0x320>)
 8009bcc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009bd0:	ea33 0308 	bics.w	r3, r3, r8
 8009bd4:	d114      	bne.n	8009c00 <_dtoa_r+0x98>
 8009bd6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009bd8:	f242 730f 	movw	r3, #9999	; 0x270f
 8009bdc:	6013      	str	r3, [r2, #0]
 8009bde:	9b00      	ldr	r3, [sp, #0]
 8009be0:	b923      	cbnz	r3, 8009bec <_dtoa_r+0x84>
 8009be2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8009be6:	2800      	cmp	r0, #0
 8009be8:	f000 8542 	beq.w	800a670 <_dtoa_r+0xb08>
 8009bec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009bee:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8009e9c <_dtoa_r+0x334>
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	f000 8544 	beq.w	800a680 <_dtoa_r+0xb18>
 8009bf8:	f10b 0303 	add.w	r3, fp, #3
 8009bfc:	f000 bd3e 	b.w	800a67c <_dtoa_r+0xb14>
 8009c00:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009c04:	2200      	movs	r2, #0
 8009c06:	2300      	movs	r3, #0
 8009c08:	4630      	mov	r0, r6
 8009c0a:	4639      	mov	r1, r7
 8009c0c:	f7f6 ff64 	bl	8000ad8 <__aeabi_dcmpeq>
 8009c10:	4681      	mov	r9, r0
 8009c12:	b168      	cbz	r0, 8009c30 <_dtoa_r+0xc8>
 8009c14:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009c16:	2301      	movs	r3, #1
 8009c18:	6013      	str	r3, [r2, #0]
 8009c1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	f000 8524 	beq.w	800a66a <_dtoa_r+0xb02>
 8009c22:	4b9a      	ldr	r3, [pc, #616]	; (8009e8c <_dtoa_r+0x324>)
 8009c24:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009c26:	f103 3bff 	add.w	fp, r3, #4294967295
 8009c2a:	6013      	str	r3, [r2, #0]
 8009c2c:	f000 bd28 	b.w	800a680 <_dtoa_r+0xb18>
 8009c30:	aa14      	add	r2, sp, #80	; 0x50
 8009c32:	a915      	add	r1, sp, #84	; 0x54
 8009c34:	ec47 6b10 	vmov	d0, r6, r7
 8009c38:	4620      	mov	r0, r4
 8009c3a:	f001 fbe9 	bl	800b410 <__d2b>
 8009c3e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009c42:	9004      	str	r0, [sp, #16]
 8009c44:	2d00      	cmp	r5, #0
 8009c46:	d07c      	beq.n	8009d42 <_dtoa_r+0x1da>
 8009c48:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009c4c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8009c50:	46b2      	mov	sl, r6
 8009c52:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8009c56:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009c5a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8009c5e:	2200      	movs	r2, #0
 8009c60:	4b8b      	ldr	r3, [pc, #556]	; (8009e90 <_dtoa_r+0x328>)
 8009c62:	4650      	mov	r0, sl
 8009c64:	4659      	mov	r1, fp
 8009c66:	f7f6 fb17 	bl	8000298 <__aeabi_dsub>
 8009c6a:	a381      	add	r3, pc, #516	; (adr r3, 8009e70 <_dtoa_r+0x308>)
 8009c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c70:	f7f6 fcca 	bl	8000608 <__aeabi_dmul>
 8009c74:	a380      	add	r3, pc, #512	; (adr r3, 8009e78 <_dtoa_r+0x310>)
 8009c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c7a:	f7f6 fb0f 	bl	800029c <__adddf3>
 8009c7e:	4606      	mov	r6, r0
 8009c80:	4628      	mov	r0, r5
 8009c82:	460f      	mov	r7, r1
 8009c84:	f7f6 fc56 	bl	8000534 <__aeabi_i2d>
 8009c88:	a37d      	add	r3, pc, #500	; (adr r3, 8009e80 <_dtoa_r+0x318>)
 8009c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c8e:	f7f6 fcbb 	bl	8000608 <__aeabi_dmul>
 8009c92:	4602      	mov	r2, r0
 8009c94:	460b      	mov	r3, r1
 8009c96:	4630      	mov	r0, r6
 8009c98:	4639      	mov	r1, r7
 8009c9a:	f7f6 faff 	bl	800029c <__adddf3>
 8009c9e:	4606      	mov	r6, r0
 8009ca0:	460f      	mov	r7, r1
 8009ca2:	f7f6 ff61 	bl	8000b68 <__aeabi_d2iz>
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	4682      	mov	sl, r0
 8009caa:	2300      	movs	r3, #0
 8009cac:	4630      	mov	r0, r6
 8009cae:	4639      	mov	r1, r7
 8009cb0:	f7f6 ff1c 	bl	8000aec <__aeabi_dcmplt>
 8009cb4:	b148      	cbz	r0, 8009cca <_dtoa_r+0x162>
 8009cb6:	4650      	mov	r0, sl
 8009cb8:	f7f6 fc3c 	bl	8000534 <__aeabi_i2d>
 8009cbc:	4632      	mov	r2, r6
 8009cbe:	463b      	mov	r3, r7
 8009cc0:	f7f6 ff0a 	bl	8000ad8 <__aeabi_dcmpeq>
 8009cc4:	b908      	cbnz	r0, 8009cca <_dtoa_r+0x162>
 8009cc6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009cca:	f1ba 0f16 	cmp.w	sl, #22
 8009cce:	d859      	bhi.n	8009d84 <_dtoa_r+0x21c>
 8009cd0:	4970      	ldr	r1, [pc, #448]	; (8009e94 <_dtoa_r+0x32c>)
 8009cd2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009cd6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009cda:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009cde:	f7f6 ff23 	bl	8000b28 <__aeabi_dcmpgt>
 8009ce2:	2800      	cmp	r0, #0
 8009ce4:	d050      	beq.n	8009d88 <_dtoa_r+0x220>
 8009ce6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009cea:	2300      	movs	r3, #0
 8009cec:	930f      	str	r3, [sp, #60]	; 0x3c
 8009cee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009cf0:	1b5d      	subs	r5, r3, r5
 8009cf2:	f1b5 0801 	subs.w	r8, r5, #1
 8009cf6:	bf49      	itett	mi
 8009cf8:	f1c5 0301 	rsbmi	r3, r5, #1
 8009cfc:	2300      	movpl	r3, #0
 8009cfe:	9305      	strmi	r3, [sp, #20]
 8009d00:	f04f 0800 	movmi.w	r8, #0
 8009d04:	bf58      	it	pl
 8009d06:	9305      	strpl	r3, [sp, #20]
 8009d08:	f1ba 0f00 	cmp.w	sl, #0
 8009d0c:	db3e      	blt.n	8009d8c <_dtoa_r+0x224>
 8009d0e:	2300      	movs	r3, #0
 8009d10:	44d0      	add	r8, sl
 8009d12:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8009d16:	9307      	str	r3, [sp, #28]
 8009d18:	9b06      	ldr	r3, [sp, #24]
 8009d1a:	2b09      	cmp	r3, #9
 8009d1c:	f200 8090 	bhi.w	8009e40 <_dtoa_r+0x2d8>
 8009d20:	2b05      	cmp	r3, #5
 8009d22:	bfc4      	itt	gt
 8009d24:	3b04      	subgt	r3, #4
 8009d26:	9306      	strgt	r3, [sp, #24]
 8009d28:	9b06      	ldr	r3, [sp, #24]
 8009d2a:	f1a3 0302 	sub.w	r3, r3, #2
 8009d2e:	bfcc      	ite	gt
 8009d30:	2500      	movgt	r5, #0
 8009d32:	2501      	movle	r5, #1
 8009d34:	2b03      	cmp	r3, #3
 8009d36:	f200 808f 	bhi.w	8009e58 <_dtoa_r+0x2f0>
 8009d3a:	e8df f003 	tbb	[pc, r3]
 8009d3e:	7f7d      	.short	0x7f7d
 8009d40:	7131      	.short	0x7131
 8009d42:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8009d46:	441d      	add	r5, r3
 8009d48:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8009d4c:	2820      	cmp	r0, #32
 8009d4e:	dd13      	ble.n	8009d78 <_dtoa_r+0x210>
 8009d50:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8009d54:	9b00      	ldr	r3, [sp, #0]
 8009d56:	fa08 f800 	lsl.w	r8, r8, r0
 8009d5a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8009d5e:	fa23 f000 	lsr.w	r0, r3, r0
 8009d62:	ea48 0000 	orr.w	r0, r8, r0
 8009d66:	f7f6 fbd5 	bl	8000514 <__aeabi_ui2d>
 8009d6a:	2301      	movs	r3, #1
 8009d6c:	4682      	mov	sl, r0
 8009d6e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8009d72:	3d01      	subs	r5, #1
 8009d74:	9313      	str	r3, [sp, #76]	; 0x4c
 8009d76:	e772      	b.n	8009c5e <_dtoa_r+0xf6>
 8009d78:	9b00      	ldr	r3, [sp, #0]
 8009d7a:	f1c0 0020 	rsb	r0, r0, #32
 8009d7e:	fa03 f000 	lsl.w	r0, r3, r0
 8009d82:	e7f0      	b.n	8009d66 <_dtoa_r+0x1fe>
 8009d84:	2301      	movs	r3, #1
 8009d86:	e7b1      	b.n	8009cec <_dtoa_r+0x184>
 8009d88:	900f      	str	r0, [sp, #60]	; 0x3c
 8009d8a:	e7b0      	b.n	8009cee <_dtoa_r+0x186>
 8009d8c:	9b05      	ldr	r3, [sp, #20]
 8009d8e:	eba3 030a 	sub.w	r3, r3, sl
 8009d92:	9305      	str	r3, [sp, #20]
 8009d94:	f1ca 0300 	rsb	r3, sl, #0
 8009d98:	9307      	str	r3, [sp, #28]
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	930e      	str	r3, [sp, #56]	; 0x38
 8009d9e:	e7bb      	b.n	8009d18 <_dtoa_r+0x1b0>
 8009da0:	2301      	movs	r3, #1
 8009da2:	930a      	str	r3, [sp, #40]	; 0x28
 8009da4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	dd59      	ble.n	8009e5e <_dtoa_r+0x2f6>
 8009daa:	9302      	str	r3, [sp, #8]
 8009dac:	4699      	mov	r9, r3
 8009dae:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009db0:	2200      	movs	r2, #0
 8009db2:	6072      	str	r2, [r6, #4]
 8009db4:	2204      	movs	r2, #4
 8009db6:	f102 0014 	add.w	r0, r2, #20
 8009dba:	4298      	cmp	r0, r3
 8009dbc:	6871      	ldr	r1, [r6, #4]
 8009dbe:	d953      	bls.n	8009e68 <_dtoa_r+0x300>
 8009dc0:	4620      	mov	r0, r4
 8009dc2:	f000 ffe4 	bl	800ad8e <_Balloc>
 8009dc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009dc8:	6030      	str	r0, [r6, #0]
 8009dca:	f1b9 0f0e 	cmp.w	r9, #14
 8009dce:	f8d3 b000 	ldr.w	fp, [r3]
 8009dd2:	f200 80e6 	bhi.w	8009fa2 <_dtoa_r+0x43a>
 8009dd6:	2d00      	cmp	r5, #0
 8009dd8:	f000 80e3 	beq.w	8009fa2 <_dtoa_r+0x43a>
 8009ddc:	ed9d 7b00 	vldr	d7, [sp]
 8009de0:	f1ba 0f00 	cmp.w	sl, #0
 8009de4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8009de8:	dd74      	ble.n	8009ed4 <_dtoa_r+0x36c>
 8009dea:	4a2a      	ldr	r2, [pc, #168]	; (8009e94 <_dtoa_r+0x32c>)
 8009dec:	f00a 030f 	and.w	r3, sl, #15
 8009df0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009df4:	ed93 7b00 	vldr	d7, [r3]
 8009df8:	ea4f 162a 	mov.w	r6, sl, asr #4
 8009dfc:	06f0      	lsls	r0, r6, #27
 8009dfe:	ed8d 7b08 	vstr	d7, [sp, #32]
 8009e02:	d565      	bpl.n	8009ed0 <_dtoa_r+0x368>
 8009e04:	4b24      	ldr	r3, [pc, #144]	; (8009e98 <_dtoa_r+0x330>)
 8009e06:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009e0a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009e0e:	f7f6 fd25 	bl	800085c <__aeabi_ddiv>
 8009e12:	e9cd 0100 	strd	r0, r1, [sp]
 8009e16:	f006 060f 	and.w	r6, r6, #15
 8009e1a:	2503      	movs	r5, #3
 8009e1c:	4f1e      	ldr	r7, [pc, #120]	; (8009e98 <_dtoa_r+0x330>)
 8009e1e:	e04c      	b.n	8009eba <_dtoa_r+0x352>
 8009e20:	2301      	movs	r3, #1
 8009e22:	930a      	str	r3, [sp, #40]	; 0x28
 8009e24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e26:	4453      	add	r3, sl
 8009e28:	f103 0901 	add.w	r9, r3, #1
 8009e2c:	9302      	str	r3, [sp, #8]
 8009e2e:	464b      	mov	r3, r9
 8009e30:	2b01      	cmp	r3, #1
 8009e32:	bfb8      	it	lt
 8009e34:	2301      	movlt	r3, #1
 8009e36:	e7ba      	b.n	8009dae <_dtoa_r+0x246>
 8009e38:	2300      	movs	r3, #0
 8009e3a:	e7b2      	b.n	8009da2 <_dtoa_r+0x23a>
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	e7f0      	b.n	8009e22 <_dtoa_r+0x2ba>
 8009e40:	2501      	movs	r5, #1
 8009e42:	2300      	movs	r3, #0
 8009e44:	9306      	str	r3, [sp, #24]
 8009e46:	950a      	str	r5, [sp, #40]	; 0x28
 8009e48:	f04f 33ff 	mov.w	r3, #4294967295
 8009e4c:	9302      	str	r3, [sp, #8]
 8009e4e:	4699      	mov	r9, r3
 8009e50:	2200      	movs	r2, #0
 8009e52:	2312      	movs	r3, #18
 8009e54:	920b      	str	r2, [sp, #44]	; 0x2c
 8009e56:	e7aa      	b.n	8009dae <_dtoa_r+0x246>
 8009e58:	2301      	movs	r3, #1
 8009e5a:	930a      	str	r3, [sp, #40]	; 0x28
 8009e5c:	e7f4      	b.n	8009e48 <_dtoa_r+0x2e0>
 8009e5e:	2301      	movs	r3, #1
 8009e60:	9302      	str	r3, [sp, #8]
 8009e62:	4699      	mov	r9, r3
 8009e64:	461a      	mov	r2, r3
 8009e66:	e7f5      	b.n	8009e54 <_dtoa_r+0x2ec>
 8009e68:	3101      	adds	r1, #1
 8009e6a:	6071      	str	r1, [r6, #4]
 8009e6c:	0052      	lsls	r2, r2, #1
 8009e6e:	e7a2      	b.n	8009db6 <_dtoa_r+0x24e>
 8009e70:	636f4361 	.word	0x636f4361
 8009e74:	3fd287a7 	.word	0x3fd287a7
 8009e78:	8b60c8b3 	.word	0x8b60c8b3
 8009e7c:	3fc68a28 	.word	0x3fc68a28
 8009e80:	509f79fb 	.word	0x509f79fb
 8009e84:	3fd34413 	.word	0x3fd34413
 8009e88:	7ff00000 	.word	0x7ff00000
 8009e8c:	0800bdf1 	.word	0x0800bdf1
 8009e90:	3ff80000 	.word	0x3ff80000
 8009e94:	0800bf10 	.word	0x0800bf10
 8009e98:	0800bee8 	.word	0x0800bee8
 8009e9c:	0800be71 	.word	0x0800be71
 8009ea0:	07f1      	lsls	r1, r6, #31
 8009ea2:	d508      	bpl.n	8009eb6 <_dtoa_r+0x34e>
 8009ea4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009ea8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009eac:	f7f6 fbac 	bl	8000608 <__aeabi_dmul>
 8009eb0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009eb4:	3501      	adds	r5, #1
 8009eb6:	1076      	asrs	r6, r6, #1
 8009eb8:	3708      	adds	r7, #8
 8009eba:	2e00      	cmp	r6, #0
 8009ebc:	d1f0      	bne.n	8009ea0 <_dtoa_r+0x338>
 8009ebe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009ec2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009ec6:	f7f6 fcc9 	bl	800085c <__aeabi_ddiv>
 8009eca:	e9cd 0100 	strd	r0, r1, [sp]
 8009ece:	e01a      	b.n	8009f06 <_dtoa_r+0x39e>
 8009ed0:	2502      	movs	r5, #2
 8009ed2:	e7a3      	b.n	8009e1c <_dtoa_r+0x2b4>
 8009ed4:	f000 80a0 	beq.w	800a018 <_dtoa_r+0x4b0>
 8009ed8:	f1ca 0600 	rsb	r6, sl, #0
 8009edc:	4b9f      	ldr	r3, [pc, #636]	; (800a15c <_dtoa_r+0x5f4>)
 8009ede:	4fa0      	ldr	r7, [pc, #640]	; (800a160 <_dtoa_r+0x5f8>)
 8009ee0:	f006 020f 	and.w	r2, r6, #15
 8009ee4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009ef0:	f7f6 fb8a 	bl	8000608 <__aeabi_dmul>
 8009ef4:	e9cd 0100 	strd	r0, r1, [sp]
 8009ef8:	1136      	asrs	r6, r6, #4
 8009efa:	2300      	movs	r3, #0
 8009efc:	2502      	movs	r5, #2
 8009efe:	2e00      	cmp	r6, #0
 8009f00:	d17f      	bne.n	800a002 <_dtoa_r+0x49a>
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d1e1      	bne.n	8009eca <_dtoa_r+0x362>
 8009f06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	f000 8087 	beq.w	800a01c <_dtoa_r+0x4b4>
 8009f0e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009f12:	2200      	movs	r2, #0
 8009f14:	4b93      	ldr	r3, [pc, #588]	; (800a164 <_dtoa_r+0x5fc>)
 8009f16:	4630      	mov	r0, r6
 8009f18:	4639      	mov	r1, r7
 8009f1a:	f7f6 fde7 	bl	8000aec <__aeabi_dcmplt>
 8009f1e:	2800      	cmp	r0, #0
 8009f20:	d07c      	beq.n	800a01c <_dtoa_r+0x4b4>
 8009f22:	f1b9 0f00 	cmp.w	r9, #0
 8009f26:	d079      	beq.n	800a01c <_dtoa_r+0x4b4>
 8009f28:	9b02      	ldr	r3, [sp, #8]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	dd35      	ble.n	8009f9a <_dtoa_r+0x432>
 8009f2e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009f32:	9308      	str	r3, [sp, #32]
 8009f34:	4639      	mov	r1, r7
 8009f36:	2200      	movs	r2, #0
 8009f38:	4b8b      	ldr	r3, [pc, #556]	; (800a168 <_dtoa_r+0x600>)
 8009f3a:	4630      	mov	r0, r6
 8009f3c:	f7f6 fb64 	bl	8000608 <__aeabi_dmul>
 8009f40:	e9cd 0100 	strd	r0, r1, [sp]
 8009f44:	9f02      	ldr	r7, [sp, #8]
 8009f46:	3501      	adds	r5, #1
 8009f48:	4628      	mov	r0, r5
 8009f4a:	f7f6 faf3 	bl	8000534 <__aeabi_i2d>
 8009f4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f52:	f7f6 fb59 	bl	8000608 <__aeabi_dmul>
 8009f56:	2200      	movs	r2, #0
 8009f58:	4b84      	ldr	r3, [pc, #528]	; (800a16c <_dtoa_r+0x604>)
 8009f5a:	f7f6 f99f 	bl	800029c <__adddf3>
 8009f5e:	4605      	mov	r5, r0
 8009f60:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009f64:	2f00      	cmp	r7, #0
 8009f66:	d15d      	bne.n	800a024 <_dtoa_r+0x4bc>
 8009f68:	2200      	movs	r2, #0
 8009f6a:	4b81      	ldr	r3, [pc, #516]	; (800a170 <_dtoa_r+0x608>)
 8009f6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009f70:	f7f6 f992 	bl	8000298 <__aeabi_dsub>
 8009f74:	462a      	mov	r2, r5
 8009f76:	4633      	mov	r3, r6
 8009f78:	e9cd 0100 	strd	r0, r1, [sp]
 8009f7c:	f7f6 fdd4 	bl	8000b28 <__aeabi_dcmpgt>
 8009f80:	2800      	cmp	r0, #0
 8009f82:	f040 8288 	bne.w	800a496 <_dtoa_r+0x92e>
 8009f86:	462a      	mov	r2, r5
 8009f88:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009f8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009f90:	f7f6 fdac 	bl	8000aec <__aeabi_dcmplt>
 8009f94:	2800      	cmp	r0, #0
 8009f96:	f040 827c 	bne.w	800a492 <_dtoa_r+0x92a>
 8009f9a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009f9e:	e9cd 2300 	strd	r2, r3, [sp]
 8009fa2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	f2c0 8150 	blt.w	800a24a <_dtoa_r+0x6e2>
 8009faa:	f1ba 0f0e 	cmp.w	sl, #14
 8009fae:	f300 814c 	bgt.w	800a24a <_dtoa_r+0x6e2>
 8009fb2:	4b6a      	ldr	r3, [pc, #424]	; (800a15c <_dtoa_r+0x5f4>)
 8009fb4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009fb8:	ed93 7b00 	vldr	d7, [r3]
 8009fbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009fc4:	f280 80d8 	bge.w	800a178 <_dtoa_r+0x610>
 8009fc8:	f1b9 0f00 	cmp.w	r9, #0
 8009fcc:	f300 80d4 	bgt.w	800a178 <_dtoa_r+0x610>
 8009fd0:	f040 825e 	bne.w	800a490 <_dtoa_r+0x928>
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	4b66      	ldr	r3, [pc, #408]	; (800a170 <_dtoa_r+0x608>)
 8009fd8:	ec51 0b17 	vmov	r0, r1, d7
 8009fdc:	f7f6 fb14 	bl	8000608 <__aeabi_dmul>
 8009fe0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009fe4:	f7f6 fd96 	bl	8000b14 <__aeabi_dcmpge>
 8009fe8:	464f      	mov	r7, r9
 8009fea:	464e      	mov	r6, r9
 8009fec:	2800      	cmp	r0, #0
 8009fee:	f040 8234 	bne.w	800a45a <_dtoa_r+0x8f2>
 8009ff2:	2331      	movs	r3, #49	; 0x31
 8009ff4:	f10b 0501 	add.w	r5, fp, #1
 8009ff8:	f88b 3000 	strb.w	r3, [fp]
 8009ffc:	f10a 0a01 	add.w	sl, sl, #1
 800a000:	e22f      	b.n	800a462 <_dtoa_r+0x8fa>
 800a002:	07f2      	lsls	r2, r6, #31
 800a004:	d505      	bpl.n	800a012 <_dtoa_r+0x4aa>
 800a006:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a00a:	f7f6 fafd 	bl	8000608 <__aeabi_dmul>
 800a00e:	3501      	adds	r5, #1
 800a010:	2301      	movs	r3, #1
 800a012:	1076      	asrs	r6, r6, #1
 800a014:	3708      	adds	r7, #8
 800a016:	e772      	b.n	8009efe <_dtoa_r+0x396>
 800a018:	2502      	movs	r5, #2
 800a01a:	e774      	b.n	8009f06 <_dtoa_r+0x39e>
 800a01c:	f8cd a020 	str.w	sl, [sp, #32]
 800a020:	464f      	mov	r7, r9
 800a022:	e791      	b.n	8009f48 <_dtoa_r+0x3e0>
 800a024:	4b4d      	ldr	r3, [pc, #308]	; (800a15c <_dtoa_r+0x5f4>)
 800a026:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a02a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800a02e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a030:	2b00      	cmp	r3, #0
 800a032:	d047      	beq.n	800a0c4 <_dtoa_r+0x55c>
 800a034:	4602      	mov	r2, r0
 800a036:	460b      	mov	r3, r1
 800a038:	2000      	movs	r0, #0
 800a03a:	494e      	ldr	r1, [pc, #312]	; (800a174 <_dtoa_r+0x60c>)
 800a03c:	f7f6 fc0e 	bl	800085c <__aeabi_ddiv>
 800a040:	462a      	mov	r2, r5
 800a042:	4633      	mov	r3, r6
 800a044:	f7f6 f928 	bl	8000298 <__aeabi_dsub>
 800a048:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a04c:	465d      	mov	r5, fp
 800a04e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a052:	f7f6 fd89 	bl	8000b68 <__aeabi_d2iz>
 800a056:	4606      	mov	r6, r0
 800a058:	f7f6 fa6c 	bl	8000534 <__aeabi_i2d>
 800a05c:	4602      	mov	r2, r0
 800a05e:	460b      	mov	r3, r1
 800a060:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a064:	f7f6 f918 	bl	8000298 <__aeabi_dsub>
 800a068:	3630      	adds	r6, #48	; 0x30
 800a06a:	f805 6b01 	strb.w	r6, [r5], #1
 800a06e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a072:	e9cd 0100 	strd	r0, r1, [sp]
 800a076:	f7f6 fd39 	bl	8000aec <__aeabi_dcmplt>
 800a07a:	2800      	cmp	r0, #0
 800a07c:	d163      	bne.n	800a146 <_dtoa_r+0x5de>
 800a07e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a082:	2000      	movs	r0, #0
 800a084:	4937      	ldr	r1, [pc, #220]	; (800a164 <_dtoa_r+0x5fc>)
 800a086:	f7f6 f907 	bl	8000298 <__aeabi_dsub>
 800a08a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a08e:	f7f6 fd2d 	bl	8000aec <__aeabi_dcmplt>
 800a092:	2800      	cmp	r0, #0
 800a094:	f040 80b7 	bne.w	800a206 <_dtoa_r+0x69e>
 800a098:	eba5 030b 	sub.w	r3, r5, fp
 800a09c:	429f      	cmp	r7, r3
 800a09e:	f77f af7c 	ble.w	8009f9a <_dtoa_r+0x432>
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	4b30      	ldr	r3, [pc, #192]	; (800a168 <_dtoa_r+0x600>)
 800a0a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a0aa:	f7f6 faad 	bl	8000608 <__aeabi_dmul>
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a0b4:	4b2c      	ldr	r3, [pc, #176]	; (800a168 <_dtoa_r+0x600>)
 800a0b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a0ba:	f7f6 faa5 	bl	8000608 <__aeabi_dmul>
 800a0be:	e9cd 0100 	strd	r0, r1, [sp]
 800a0c2:	e7c4      	b.n	800a04e <_dtoa_r+0x4e6>
 800a0c4:	462a      	mov	r2, r5
 800a0c6:	4633      	mov	r3, r6
 800a0c8:	f7f6 fa9e 	bl	8000608 <__aeabi_dmul>
 800a0cc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a0d0:	eb0b 0507 	add.w	r5, fp, r7
 800a0d4:	465e      	mov	r6, fp
 800a0d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a0da:	f7f6 fd45 	bl	8000b68 <__aeabi_d2iz>
 800a0de:	4607      	mov	r7, r0
 800a0e0:	f7f6 fa28 	bl	8000534 <__aeabi_i2d>
 800a0e4:	3730      	adds	r7, #48	; 0x30
 800a0e6:	4602      	mov	r2, r0
 800a0e8:	460b      	mov	r3, r1
 800a0ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a0ee:	f7f6 f8d3 	bl	8000298 <__aeabi_dsub>
 800a0f2:	f806 7b01 	strb.w	r7, [r6], #1
 800a0f6:	42ae      	cmp	r6, r5
 800a0f8:	e9cd 0100 	strd	r0, r1, [sp]
 800a0fc:	f04f 0200 	mov.w	r2, #0
 800a100:	d126      	bne.n	800a150 <_dtoa_r+0x5e8>
 800a102:	4b1c      	ldr	r3, [pc, #112]	; (800a174 <_dtoa_r+0x60c>)
 800a104:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a108:	f7f6 f8c8 	bl	800029c <__adddf3>
 800a10c:	4602      	mov	r2, r0
 800a10e:	460b      	mov	r3, r1
 800a110:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a114:	f7f6 fd08 	bl	8000b28 <__aeabi_dcmpgt>
 800a118:	2800      	cmp	r0, #0
 800a11a:	d174      	bne.n	800a206 <_dtoa_r+0x69e>
 800a11c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a120:	2000      	movs	r0, #0
 800a122:	4914      	ldr	r1, [pc, #80]	; (800a174 <_dtoa_r+0x60c>)
 800a124:	f7f6 f8b8 	bl	8000298 <__aeabi_dsub>
 800a128:	4602      	mov	r2, r0
 800a12a:	460b      	mov	r3, r1
 800a12c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a130:	f7f6 fcdc 	bl	8000aec <__aeabi_dcmplt>
 800a134:	2800      	cmp	r0, #0
 800a136:	f43f af30 	beq.w	8009f9a <_dtoa_r+0x432>
 800a13a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a13e:	2b30      	cmp	r3, #48	; 0x30
 800a140:	f105 32ff 	add.w	r2, r5, #4294967295
 800a144:	d002      	beq.n	800a14c <_dtoa_r+0x5e4>
 800a146:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a14a:	e04a      	b.n	800a1e2 <_dtoa_r+0x67a>
 800a14c:	4615      	mov	r5, r2
 800a14e:	e7f4      	b.n	800a13a <_dtoa_r+0x5d2>
 800a150:	4b05      	ldr	r3, [pc, #20]	; (800a168 <_dtoa_r+0x600>)
 800a152:	f7f6 fa59 	bl	8000608 <__aeabi_dmul>
 800a156:	e9cd 0100 	strd	r0, r1, [sp]
 800a15a:	e7bc      	b.n	800a0d6 <_dtoa_r+0x56e>
 800a15c:	0800bf10 	.word	0x0800bf10
 800a160:	0800bee8 	.word	0x0800bee8
 800a164:	3ff00000 	.word	0x3ff00000
 800a168:	40240000 	.word	0x40240000
 800a16c:	401c0000 	.word	0x401c0000
 800a170:	40140000 	.word	0x40140000
 800a174:	3fe00000 	.word	0x3fe00000
 800a178:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a17c:	465d      	mov	r5, fp
 800a17e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a182:	4630      	mov	r0, r6
 800a184:	4639      	mov	r1, r7
 800a186:	f7f6 fb69 	bl	800085c <__aeabi_ddiv>
 800a18a:	f7f6 fced 	bl	8000b68 <__aeabi_d2iz>
 800a18e:	4680      	mov	r8, r0
 800a190:	f7f6 f9d0 	bl	8000534 <__aeabi_i2d>
 800a194:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a198:	f7f6 fa36 	bl	8000608 <__aeabi_dmul>
 800a19c:	4602      	mov	r2, r0
 800a19e:	460b      	mov	r3, r1
 800a1a0:	4630      	mov	r0, r6
 800a1a2:	4639      	mov	r1, r7
 800a1a4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800a1a8:	f7f6 f876 	bl	8000298 <__aeabi_dsub>
 800a1ac:	f805 6b01 	strb.w	r6, [r5], #1
 800a1b0:	eba5 060b 	sub.w	r6, r5, fp
 800a1b4:	45b1      	cmp	r9, r6
 800a1b6:	4602      	mov	r2, r0
 800a1b8:	460b      	mov	r3, r1
 800a1ba:	d139      	bne.n	800a230 <_dtoa_r+0x6c8>
 800a1bc:	f7f6 f86e 	bl	800029c <__adddf3>
 800a1c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a1c4:	4606      	mov	r6, r0
 800a1c6:	460f      	mov	r7, r1
 800a1c8:	f7f6 fcae 	bl	8000b28 <__aeabi_dcmpgt>
 800a1cc:	b9c8      	cbnz	r0, 800a202 <_dtoa_r+0x69a>
 800a1ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a1d2:	4630      	mov	r0, r6
 800a1d4:	4639      	mov	r1, r7
 800a1d6:	f7f6 fc7f 	bl	8000ad8 <__aeabi_dcmpeq>
 800a1da:	b110      	cbz	r0, 800a1e2 <_dtoa_r+0x67a>
 800a1dc:	f018 0f01 	tst.w	r8, #1
 800a1e0:	d10f      	bne.n	800a202 <_dtoa_r+0x69a>
 800a1e2:	9904      	ldr	r1, [sp, #16]
 800a1e4:	4620      	mov	r0, r4
 800a1e6:	f000 fe06 	bl	800adf6 <_Bfree>
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a1ee:	702b      	strb	r3, [r5, #0]
 800a1f0:	f10a 0301 	add.w	r3, sl, #1
 800a1f4:	6013      	str	r3, [r2, #0]
 800a1f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	f000 8241 	beq.w	800a680 <_dtoa_r+0xb18>
 800a1fe:	601d      	str	r5, [r3, #0]
 800a200:	e23e      	b.n	800a680 <_dtoa_r+0xb18>
 800a202:	f8cd a020 	str.w	sl, [sp, #32]
 800a206:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a20a:	2a39      	cmp	r2, #57	; 0x39
 800a20c:	f105 33ff 	add.w	r3, r5, #4294967295
 800a210:	d108      	bne.n	800a224 <_dtoa_r+0x6bc>
 800a212:	459b      	cmp	fp, r3
 800a214:	d10a      	bne.n	800a22c <_dtoa_r+0x6c4>
 800a216:	9b08      	ldr	r3, [sp, #32]
 800a218:	3301      	adds	r3, #1
 800a21a:	9308      	str	r3, [sp, #32]
 800a21c:	2330      	movs	r3, #48	; 0x30
 800a21e:	f88b 3000 	strb.w	r3, [fp]
 800a222:	465b      	mov	r3, fp
 800a224:	781a      	ldrb	r2, [r3, #0]
 800a226:	3201      	adds	r2, #1
 800a228:	701a      	strb	r2, [r3, #0]
 800a22a:	e78c      	b.n	800a146 <_dtoa_r+0x5de>
 800a22c:	461d      	mov	r5, r3
 800a22e:	e7ea      	b.n	800a206 <_dtoa_r+0x69e>
 800a230:	2200      	movs	r2, #0
 800a232:	4b9b      	ldr	r3, [pc, #620]	; (800a4a0 <_dtoa_r+0x938>)
 800a234:	f7f6 f9e8 	bl	8000608 <__aeabi_dmul>
 800a238:	2200      	movs	r2, #0
 800a23a:	2300      	movs	r3, #0
 800a23c:	4606      	mov	r6, r0
 800a23e:	460f      	mov	r7, r1
 800a240:	f7f6 fc4a 	bl	8000ad8 <__aeabi_dcmpeq>
 800a244:	2800      	cmp	r0, #0
 800a246:	d09a      	beq.n	800a17e <_dtoa_r+0x616>
 800a248:	e7cb      	b.n	800a1e2 <_dtoa_r+0x67a>
 800a24a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a24c:	2a00      	cmp	r2, #0
 800a24e:	f000 808b 	beq.w	800a368 <_dtoa_r+0x800>
 800a252:	9a06      	ldr	r2, [sp, #24]
 800a254:	2a01      	cmp	r2, #1
 800a256:	dc6e      	bgt.n	800a336 <_dtoa_r+0x7ce>
 800a258:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a25a:	2a00      	cmp	r2, #0
 800a25c:	d067      	beq.n	800a32e <_dtoa_r+0x7c6>
 800a25e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a262:	9f07      	ldr	r7, [sp, #28]
 800a264:	9d05      	ldr	r5, [sp, #20]
 800a266:	9a05      	ldr	r2, [sp, #20]
 800a268:	2101      	movs	r1, #1
 800a26a:	441a      	add	r2, r3
 800a26c:	4620      	mov	r0, r4
 800a26e:	9205      	str	r2, [sp, #20]
 800a270:	4498      	add	r8, r3
 800a272:	f000 fe9e 	bl	800afb2 <__i2b>
 800a276:	4606      	mov	r6, r0
 800a278:	2d00      	cmp	r5, #0
 800a27a:	dd0c      	ble.n	800a296 <_dtoa_r+0x72e>
 800a27c:	f1b8 0f00 	cmp.w	r8, #0
 800a280:	dd09      	ble.n	800a296 <_dtoa_r+0x72e>
 800a282:	4545      	cmp	r5, r8
 800a284:	9a05      	ldr	r2, [sp, #20]
 800a286:	462b      	mov	r3, r5
 800a288:	bfa8      	it	ge
 800a28a:	4643      	movge	r3, r8
 800a28c:	1ad2      	subs	r2, r2, r3
 800a28e:	9205      	str	r2, [sp, #20]
 800a290:	1aed      	subs	r5, r5, r3
 800a292:	eba8 0803 	sub.w	r8, r8, r3
 800a296:	9b07      	ldr	r3, [sp, #28]
 800a298:	b1eb      	cbz	r3, 800a2d6 <_dtoa_r+0x76e>
 800a29a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d067      	beq.n	800a370 <_dtoa_r+0x808>
 800a2a0:	b18f      	cbz	r7, 800a2c6 <_dtoa_r+0x75e>
 800a2a2:	4631      	mov	r1, r6
 800a2a4:	463a      	mov	r2, r7
 800a2a6:	4620      	mov	r0, r4
 800a2a8:	f000 ff22 	bl	800b0f0 <__pow5mult>
 800a2ac:	9a04      	ldr	r2, [sp, #16]
 800a2ae:	4601      	mov	r1, r0
 800a2b0:	4606      	mov	r6, r0
 800a2b2:	4620      	mov	r0, r4
 800a2b4:	f000 fe86 	bl	800afc4 <__multiply>
 800a2b8:	9904      	ldr	r1, [sp, #16]
 800a2ba:	9008      	str	r0, [sp, #32]
 800a2bc:	4620      	mov	r0, r4
 800a2be:	f000 fd9a 	bl	800adf6 <_Bfree>
 800a2c2:	9b08      	ldr	r3, [sp, #32]
 800a2c4:	9304      	str	r3, [sp, #16]
 800a2c6:	9b07      	ldr	r3, [sp, #28]
 800a2c8:	1bda      	subs	r2, r3, r7
 800a2ca:	d004      	beq.n	800a2d6 <_dtoa_r+0x76e>
 800a2cc:	9904      	ldr	r1, [sp, #16]
 800a2ce:	4620      	mov	r0, r4
 800a2d0:	f000 ff0e 	bl	800b0f0 <__pow5mult>
 800a2d4:	9004      	str	r0, [sp, #16]
 800a2d6:	2101      	movs	r1, #1
 800a2d8:	4620      	mov	r0, r4
 800a2da:	f000 fe6a 	bl	800afb2 <__i2b>
 800a2de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a2e0:	4607      	mov	r7, r0
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	f000 81d0 	beq.w	800a688 <_dtoa_r+0xb20>
 800a2e8:	461a      	mov	r2, r3
 800a2ea:	4601      	mov	r1, r0
 800a2ec:	4620      	mov	r0, r4
 800a2ee:	f000 feff 	bl	800b0f0 <__pow5mult>
 800a2f2:	9b06      	ldr	r3, [sp, #24]
 800a2f4:	2b01      	cmp	r3, #1
 800a2f6:	4607      	mov	r7, r0
 800a2f8:	dc40      	bgt.n	800a37c <_dtoa_r+0x814>
 800a2fa:	9b00      	ldr	r3, [sp, #0]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d139      	bne.n	800a374 <_dtoa_r+0x80c>
 800a300:	9b01      	ldr	r3, [sp, #4]
 800a302:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a306:	2b00      	cmp	r3, #0
 800a308:	d136      	bne.n	800a378 <_dtoa_r+0x810>
 800a30a:	9b01      	ldr	r3, [sp, #4]
 800a30c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a310:	0d1b      	lsrs	r3, r3, #20
 800a312:	051b      	lsls	r3, r3, #20
 800a314:	b12b      	cbz	r3, 800a322 <_dtoa_r+0x7ba>
 800a316:	9b05      	ldr	r3, [sp, #20]
 800a318:	3301      	adds	r3, #1
 800a31a:	9305      	str	r3, [sp, #20]
 800a31c:	f108 0801 	add.w	r8, r8, #1
 800a320:	2301      	movs	r3, #1
 800a322:	9307      	str	r3, [sp, #28]
 800a324:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a326:	2b00      	cmp	r3, #0
 800a328:	d12a      	bne.n	800a380 <_dtoa_r+0x818>
 800a32a:	2001      	movs	r0, #1
 800a32c:	e030      	b.n	800a390 <_dtoa_r+0x828>
 800a32e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a330:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a334:	e795      	b.n	800a262 <_dtoa_r+0x6fa>
 800a336:	9b07      	ldr	r3, [sp, #28]
 800a338:	f109 37ff 	add.w	r7, r9, #4294967295
 800a33c:	42bb      	cmp	r3, r7
 800a33e:	bfbf      	itttt	lt
 800a340:	9b07      	ldrlt	r3, [sp, #28]
 800a342:	9707      	strlt	r7, [sp, #28]
 800a344:	1afa      	sublt	r2, r7, r3
 800a346:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a348:	bfbb      	ittet	lt
 800a34a:	189b      	addlt	r3, r3, r2
 800a34c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a34e:	1bdf      	subge	r7, r3, r7
 800a350:	2700      	movlt	r7, #0
 800a352:	f1b9 0f00 	cmp.w	r9, #0
 800a356:	bfb5      	itete	lt
 800a358:	9b05      	ldrlt	r3, [sp, #20]
 800a35a:	9d05      	ldrge	r5, [sp, #20]
 800a35c:	eba3 0509 	sublt.w	r5, r3, r9
 800a360:	464b      	movge	r3, r9
 800a362:	bfb8      	it	lt
 800a364:	2300      	movlt	r3, #0
 800a366:	e77e      	b.n	800a266 <_dtoa_r+0x6fe>
 800a368:	9f07      	ldr	r7, [sp, #28]
 800a36a:	9d05      	ldr	r5, [sp, #20]
 800a36c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800a36e:	e783      	b.n	800a278 <_dtoa_r+0x710>
 800a370:	9a07      	ldr	r2, [sp, #28]
 800a372:	e7ab      	b.n	800a2cc <_dtoa_r+0x764>
 800a374:	2300      	movs	r3, #0
 800a376:	e7d4      	b.n	800a322 <_dtoa_r+0x7ba>
 800a378:	9b00      	ldr	r3, [sp, #0]
 800a37a:	e7d2      	b.n	800a322 <_dtoa_r+0x7ba>
 800a37c:	2300      	movs	r3, #0
 800a37e:	9307      	str	r3, [sp, #28]
 800a380:	693b      	ldr	r3, [r7, #16]
 800a382:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800a386:	6918      	ldr	r0, [r3, #16]
 800a388:	f000 fdc5 	bl	800af16 <__hi0bits>
 800a38c:	f1c0 0020 	rsb	r0, r0, #32
 800a390:	4440      	add	r0, r8
 800a392:	f010 001f 	ands.w	r0, r0, #31
 800a396:	d047      	beq.n	800a428 <_dtoa_r+0x8c0>
 800a398:	f1c0 0320 	rsb	r3, r0, #32
 800a39c:	2b04      	cmp	r3, #4
 800a39e:	dd3b      	ble.n	800a418 <_dtoa_r+0x8b0>
 800a3a0:	9b05      	ldr	r3, [sp, #20]
 800a3a2:	f1c0 001c 	rsb	r0, r0, #28
 800a3a6:	4403      	add	r3, r0
 800a3a8:	9305      	str	r3, [sp, #20]
 800a3aa:	4405      	add	r5, r0
 800a3ac:	4480      	add	r8, r0
 800a3ae:	9b05      	ldr	r3, [sp, #20]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	dd05      	ble.n	800a3c0 <_dtoa_r+0x858>
 800a3b4:	461a      	mov	r2, r3
 800a3b6:	9904      	ldr	r1, [sp, #16]
 800a3b8:	4620      	mov	r0, r4
 800a3ba:	f000 fee7 	bl	800b18c <__lshift>
 800a3be:	9004      	str	r0, [sp, #16]
 800a3c0:	f1b8 0f00 	cmp.w	r8, #0
 800a3c4:	dd05      	ble.n	800a3d2 <_dtoa_r+0x86a>
 800a3c6:	4639      	mov	r1, r7
 800a3c8:	4642      	mov	r2, r8
 800a3ca:	4620      	mov	r0, r4
 800a3cc:	f000 fede 	bl	800b18c <__lshift>
 800a3d0:	4607      	mov	r7, r0
 800a3d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a3d4:	b353      	cbz	r3, 800a42c <_dtoa_r+0x8c4>
 800a3d6:	4639      	mov	r1, r7
 800a3d8:	9804      	ldr	r0, [sp, #16]
 800a3da:	f000 ff2b 	bl	800b234 <__mcmp>
 800a3de:	2800      	cmp	r0, #0
 800a3e0:	da24      	bge.n	800a42c <_dtoa_r+0x8c4>
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	220a      	movs	r2, #10
 800a3e6:	9904      	ldr	r1, [sp, #16]
 800a3e8:	4620      	mov	r0, r4
 800a3ea:	f000 fd1b 	bl	800ae24 <__multadd>
 800a3ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3f0:	9004      	str	r0, [sp, #16]
 800a3f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	f000 814d 	beq.w	800a696 <_dtoa_r+0xb2e>
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	4631      	mov	r1, r6
 800a400:	220a      	movs	r2, #10
 800a402:	4620      	mov	r0, r4
 800a404:	f000 fd0e 	bl	800ae24 <__multadd>
 800a408:	9b02      	ldr	r3, [sp, #8]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	4606      	mov	r6, r0
 800a40e:	dc4f      	bgt.n	800a4b0 <_dtoa_r+0x948>
 800a410:	9b06      	ldr	r3, [sp, #24]
 800a412:	2b02      	cmp	r3, #2
 800a414:	dd4c      	ble.n	800a4b0 <_dtoa_r+0x948>
 800a416:	e011      	b.n	800a43c <_dtoa_r+0x8d4>
 800a418:	d0c9      	beq.n	800a3ae <_dtoa_r+0x846>
 800a41a:	9a05      	ldr	r2, [sp, #20]
 800a41c:	331c      	adds	r3, #28
 800a41e:	441a      	add	r2, r3
 800a420:	9205      	str	r2, [sp, #20]
 800a422:	441d      	add	r5, r3
 800a424:	4498      	add	r8, r3
 800a426:	e7c2      	b.n	800a3ae <_dtoa_r+0x846>
 800a428:	4603      	mov	r3, r0
 800a42a:	e7f6      	b.n	800a41a <_dtoa_r+0x8b2>
 800a42c:	f1b9 0f00 	cmp.w	r9, #0
 800a430:	dc38      	bgt.n	800a4a4 <_dtoa_r+0x93c>
 800a432:	9b06      	ldr	r3, [sp, #24]
 800a434:	2b02      	cmp	r3, #2
 800a436:	dd35      	ble.n	800a4a4 <_dtoa_r+0x93c>
 800a438:	f8cd 9008 	str.w	r9, [sp, #8]
 800a43c:	9b02      	ldr	r3, [sp, #8]
 800a43e:	b963      	cbnz	r3, 800a45a <_dtoa_r+0x8f2>
 800a440:	4639      	mov	r1, r7
 800a442:	2205      	movs	r2, #5
 800a444:	4620      	mov	r0, r4
 800a446:	f000 fced 	bl	800ae24 <__multadd>
 800a44a:	4601      	mov	r1, r0
 800a44c:	4607      	mov	r7, r0
 800a44e:	9804      	ldr	r0, [sp, #16]
 800a450:	f000 fef0 	bl	800b234 <__mcmp>
 800a454:	2800      	cmp	r0, #0
 800a456:	f73f adcc 	bgt.w	8009ff2 <_dtoa_r+0x48a>
 800a45a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a45c:	465d      	mov	r5, fp
 800a45e:	ea6f 0a03 	mvn.w	sl, r3
 800a462:	f04f 0900 	mov.w	r9, #0
 800a466:	4639      	mov	r1, r7
 800a468:	4620      	mov	r0, r4
 800a46a:	f000 fcc4 	bl	800adf6 <_Bfree>
 800a46e:	2e00      	cmp	r6, #0
 800a470:	f43f aeb7 	beq.w	800a1e2 <_dtoa_r+0x67a>
 800a474:	f1b9 0f00 	cmp.w	r9, #0
 800a478:	d005      	beq.n	800a486 <_dtoa_r+0x91e>
 800a47a:	45b1      	cmp	r9, r6
 800a47c:	d003      	beq.n	800a486 <_dtoa_r+0x91e>
 800a47e:	4649      	mov	r1, r9
 800a480:	4620      	mov	r0, r4
 800a482:	f000 fcb8 	bl	800adf6 <_Bfree>
 800a486:	4631      	mov	r1, r6
 800a488:	4620      	mov	r0, r4
 800a48a:	f000 fcb4 	bl	800adf6 <_Bfree>
 800a48e:	e6a8      	b.n	800a1e2 <_dtoa_r+0x67a>
 800a490:	2700      	movs	r7, #0
 800a492:	463e      	mov	r6, r7
 800a494:	e7e1      	b.n	800a45a <_dtoa_r+0x8f2>
 800a496:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a49a:	463e      	mov	r6, r7
 800a49c:	e5a9      	b.n	8009ff2 <_dtoa_r+0x48a>
 800a49e:	bf00      	nop
 800a4a0:	40240000 	.word	0x40240000
 800a4a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4a6:	f8cd 9008 	str.w	r9, [sp, #8]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	f000 80fa 	beq.w	800a6a4 <_dtoa_r+0xb3c>
 800a4b0:	2d00      	cmp	r5, #0
 800a4b2:	dd05      	ble.n	800a4c0 <_dtoa_r+0x958>
 800a4b4:	4631      	mov	r1, r6
 800a4b6:	462a      	mov	r2, r5
 800a4b8:	4620      	mov	r0, r4
 800a4ba:	f000 fe67 	bl	800b18c <__lshift>
 800a4be:	4606      	mov	r6, r0
 800a4c0:	9b07      	ldr	r3, [sp, #28]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d04c      	beq.n	800a560 <_dtoa_r+0x9f8>
 800a4c6:	6871      	ldr	r1, [r6, #4]
 800a4c8:	4620      	mov	r0, r4
 800a4ca:	f000 fc60 	bl	800ad8e <_Balloc>
 800a4ce:	6932      	ldr	r2, [r6, #16]
 800a4d0:	3202      	adds	r2, #2
 800a4d2:	4605      	mov	r5, r0
 800a4d4:	0092      	lsls	r2, r2, #2
 800a4d6:	f106 010c 	add.w	r1, r6, #12
 800a4da:	300c      	adds	r0, #12
 800a4dc:	f000 fc4c 	bl	800ad78 <memcpy>
 800a4e0:	2201      	movs	r2, #1
 800a4e2:	4629      	mov	r1, r5
 800a4e4:	4620      	mov	r0, r4
 800a4e6:	f000 fe51 	bl	800b18c <__lshift>
 800a4ea:	9b00      	ldr	r3, [sp, #0]
 800a4ec:	f8cd b014 	str.w	fp, [sp, #20]
 800a4f0:	f003 0301 	and.w	r3, r3, #1
 800a4f4:	46b1      	mov	r9, r6
 800a4f6:	9307      	str	r3, [sp, #28]
 800a4f8:	4606      	mov	r6, r0
 800a4fa:	4639      	mov	r1, r7
 800a4fc:	9804      	ldr	r0, [sp, #16]
 800a4fe:	f7ff faa7 	bl	8009a50 <quorem>
 800a502:	4649      	mov	r1, r9
 800a504:	4605      	mov	r5, r0
 800a506:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a50a:	9804      	ldr	r0, [sp, #16]
 800a50c:	f000 fe92 	bl	800b234 <__mcmp>
 800a510:	4632      	mov	r2, r6
 800a512:	9000      	str	r0, [sp, #0]
 800a514:	4639      	mov	r1, r7
 800a516:	4620      	mov	r0, r4
 800a518:	f000 fea6 	bl	800b268 <__mdiff>
 800a51c:	68c3      	ldr	r3, [r0, #12]
 800a51e:	4602      	mov	r2, r0
 800a520:	bb03      	cbnz	r3, 800a564 <_dtoa_r+0x9fc>
 800a522:	4601      	mov	r1, r0
 800a524:	9008      	str	r0, [sp, #32]
 800a526:	9804      	ldr	r0, [sp, #16]
 800a528:	f000 fe84 	bl	800b234 <__mcmp>
 800a52c:	9a08      	ldr	r2, [sp, #32]
 800a52e:	4603      	mov	r3, r0
 800a530:	4611      	mov	r1, r2
 800a532:	4620      	mov	r0, r4
 800a534:	9308      	str	r3, [sp, #32]
 800a536:	f000 fc5e 	bl	800adf6 <_Bfree>
 800a53a:	9b08      	ldr	r3, [sp, #32]
 800a53c:	b9a3      	cbnz	r3, 800a568 <_dtoa_r+0xa00>
 800a53e:	9a06      	ldr	r2, [sp, #24]
 800a540:	b992      	cbnz	r2, 800a568 <_dtoa_r+0xa00>
 800a542:	9a07      	ldr	r2, [sp, #28]
 800a544:	b982      	cbnz	r2, 800a568 <_dtoa_r+0xa00>
 800a546:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a54a:	d029      	beq.n	800a5a0 <_dtoa_r+0xa38>
 800a54c:	9b00      	ldr	r3, [sp, #0]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	dd01      	ble.n	800a556 <_dtoa_r+0x9ee>
 800a552:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800a556:	9b05      	ldr	r3, [sp, #20]
 800a558:	1c5d      	adds	r5, r3, #1
 800a55a:	f883 8000 	strb.w	r8, [r3]
 800a55e:	e782      	b.n	800a466 <_dtoa_r+0x8fe>
 800a560:	4630      	mov	r0, r6
 800a562:	e7c2      	b.n	800a4ea <_dtoa_r+0x982>
 800a564:	2301      	movs	r3, #1
 800a566:	e7e3      	b.n	800a530 <_dtoa_r+0x9c8>
 800a568:	9a00      	ldr	r2, [sp, #0]
 800a56a:	2a00      	cmp	r2, #0
 800a56c:	db04      	blt.n	800a578 <_dtoa_r+0xa10>
 800a56e:	d125      	bne.n	800a5bc <_dtoa_r+0xa54>
 800a570:	9a06      	ldr	r2, [sp, #24]
 800a572:	bb1a      	cbnz	r2, 800a5bc <_dtoa_r+0xa54>
 800a574:	9a07      	ldr	r2, [sp, #28]
 800a576:	bb0a      	cbnz	r2, 800a5bc <_dtoa_r+0xa54>
 800a578:	2b00      	cmp	r3, #0
 800a57a:	ddec      	ble.n	800a556 <_dtoa_r+0x9ee>
 800a57c:	2201      	movs	r2, #1
 800a57e:	9904      	ldr	r1, [sp, #16]
 800a580:	4620      	mov	r0, r4
 800a582:	f000 fe03 	bl	800b18c <__lshift>
 800a586:	4639      	mov	r1, r7
 800a588:	9004      	str	r0, [sp, #16]
 800a58a:	f000 fe53 	bl	800b234 <__mcmp>
 800a58e:	2800      	cmp	r0, #0
 800a590:	dc03      	bgt.n	800a59a <_dtoa_r+0xa32>
 800a592:	d1e0      	bne.n	800a556 <_dtoa_r+0x9ee>
 800a594:	f018 0f01 	tst.w	r8, #1
 800a598:	d0dd      	beq.n	800a556 <_dtoa_r+0x9ee>
 800a59a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a59e:	d1d8      	bne.n	800a552 <_dtoa_r+0x9ea>
 800a5a0:	9b05      	ldr	r3, [sp, #20]
 800a5a2:	9a05      	ldr	r2, [sp, #20]
 800a5a4:	1c5d      	adds	r5, r3, #1
 800a5a6:	2339      	movs	r3, #57	; 0x39
 800a5a8:	7013      	strb	r3, [r2, #0]
 800a5aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a5ae:	2b39      	cmp	r3, #57	; 0x39
 800a5b0:	f105 32ff 	add.w	r2, r5, #4294967295
 800a5b4:	d04f      	beq.n	800a656 <_dtoa_r+0xaee>
 800a5b6:	3301      	adds	r3, #1
 800a5b8:	7013      	strb	r3, [r2, #0]
 800a5ba:	e754      	b.n	800a466 <_dtoa_r+0x8fe>
 800a5bc:	9a05      	ldr	r2, [sp, #20]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	f102 0501 	add.w	r5, r2, #1
 800a5c4:	dd06      	ble.n	800a5d4 <_dtoa_r+0xa6c>
 800a5c6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a5ca:	d0e9      	beq.n	800a5a0 <_dtoa_r+0xa38>
 800a5cc:	f108 0801 	add.w	r8, r8, #1
 800a5d0:	9b05      	ldr	r3, [sp, #20]
 800a5d2:	e7c2      	b.n	800a55a <_dtoa_r+0x9f2>
 800a5d4:	9a02      	ldr	r2, [sp, #8]
 800a5d6:	f805 8c01 	strb.w	r8, [r5, #-1]
 800a5da:	eba5 030b 	sub.w	r3, r5, fp
 800a5de:	4293      	cmp	r3, r2
 800a5e0:	d021      	beq.n	800a626 <_dtoa_r+0xabe>
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	220a      	movs	r2, #10
 800a5e6:	9904      	ldr	r1, [sp, #16]
 800a5e8:	4620      	mov	r0, r4
 800a5ea:	f000 fc1b 	bl	800ae24 <__multadd>
 800a5ee:	45b1      	cmp	r9, r6
 800a5f0:	9004      	str	r0, [sp, #16]
 800a5f2:	f04f 0300 	mov.w	r3, #0
 800a5f6:	f04f 020a 	mov.w	r2, #10
 800a5fa:	4649      	mov	r1, r9
 800a5fc:	4620      	mov	r0, r4
 800a5fe:	d105      	bne.n	800a60c <_dtoa_r+0xaa4>
 800a600:	f000 fc10 	bl	800ae24 <__multadd>
 800a604:	4681      	mov	r9, r0
 800a606:	4606      	mov	r6, r0
 800a608:	9505      	str	r5, [sp, #20]
 800a60a:	e776      	b.n	800a4fa <_dtoa_r+0x992>
 800a60c:	f000 fc0a 	bl	800ae24 <__multadd>
 800a610:	4631      	mov	r1, r6
 800a612:	4681      	mov	r9, r0
 800a614:	2300      	movs	r3, #0
 800a616:	220a      	movs	r2, #10
 800a618:	4620      	mov	r0, r4
 800a61a:	f000 fc03 	bl	800ae24 <__multadd>
 800a61e:	4606      	mov	r6, r0
 800a620:	e7f2      	b.n	800a608 <_dtoa_r+0xaa0>
 800a622:	f04f 0900 	mov.w	r9, #0
 800a626:	2201      	movs	r2, #1
 800a628:	9904      	ldr	r1, [sp, #16]
 800a62a:	4620      	mov	r0, r4
 800a62c:	f000 fdae 	bl	800b18c <__lshift>
 800a630:	4639      	mov	r1, r7
 800a632:	9004      	str	r0, [sp, #16]
 800a634:	f000 fdfe 	bl	800b234 <__mcmp>
 800a638:	2800      	cmp	r0, #0
 800a63a:	dcb6      	bgt.n	800a5aa <_dtoa_r+0xa42>
 800a63c:	d102      	bne.n	800a644 <_dtoa_r+0xadc>
 800a63e:	f018 0f01 	tst.w	r8, #1
 800a642:	d1b2      	bne.n	800a5aa <_dtoa_r+0xa42>
 800a644:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a648:	2b30      	cmp	r3, #48	; 0x30
 800a64a:	f105 32ff 	add.w	r2, r5, #4294967295
 800a64e:	f47f af0a 	bne.w	800a466 <_dtoa_r+0x8fe>
 800a652:	4615      	mov	r5, r2
 800a654:	e7f6      	b.n	800a644 <_dtoa_r+0xadc>
 800a656:	4593      	cmp	fp, r2
 800a658:	d105      	bne.n	800a666 <_dtoa_r+0xafe>
 800a65a:	2331      	movs	r3, #49	; 0x31
 800a65c:	f10a 0a01 	add.w	sl, sl, #1
 800a660:	f88b 3000 	strb.w	r3, [fp]
 800a664:	e6ff      	b.n	800a466 <_dtoa_r+0x8fe>
 800a666:	4615      	mov	r5, r2
 800a668:	e79f      	b.n	800a5aa <_dtoa_r+0xa42>
 800a66a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800a6d0 <_dtoa_r+0xb68>
 800a66e:	e007      	b.n	800a680 <_dtoa_r+0xb18>
 800a670:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a672:	f8df b060 	ldr.w	fp, [pc, #96]	; 800a6d4 <_dtoa_r+0xb6c>
 800a676:	b11b      	cbz	r3, 800a680 <_dtoa_r+0xb18>
 800a678:	f10b 0308 	add.w	r3, fp, #8
 800a67c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a67e:	6013      	str	r3, [r2, #0]
 800a680:	4658      	mov	r0, fp
 800a682:	b017      	add	sp, #92	; 0x5c
 800a684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a688:	9b06      	ldr	r3, [sp, #24]
 800a68a:	2b01      	cmp	r3, #1
 800a68c:	f77f ae35 	ble.w	800a2fa <_dtoa_r+0x792>
 800a690:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a692:	9307      	str	r3, [sp, #28]
 800a694:	e649      	b.n	800a32a <_dtoa_r+0x7c2>
 800a696:	9b02      	ldr	r3, [sp, #8]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	dc03      	bgt.n	800a6a4 <_dtoa_r+0xb3c>
 800a69c:	9b06      	ldr	r3, [sp, #24]
 800a69e:	2b02      	cmp	r3, #2
 800a6a0:	f73f aecc 	bgt.w	800a43c <_dtoa_r+0x8d4>
 800a6a4:	465d      	mov	r5, fp
 800a6a6:	4639      	mov	r1, r7
 800a6a8:	9804      	ldr	r0, [sp, #16]
 800a6aa:	f7ff f9d1 	bl	8009a50 <quorem>
 800a6ae:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a6b2:	f805 8b01 	strb.w	r8, [r5], #1
 800a6b6:	9a02      	ldr	r2, [sp, #8]
 800a6b8:	eba5 030b 	sub.w	r3, r5, fp
 800a6bc:	429a      	cmp	r2, r3
 800a6be:	ddb0      	ble.n	800a622 <_dtoa_r+0xaba>
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	220a      	movs	r2, #10
 800a6c4:	9904      	ldr	r1, [sp, #16]
 800a6c6:	4620      	mov	r0, r4
 800a6c8:	f000 fbac 	bl	800ae24 <__multadd>
 800a6cc:	9004      	str	r0, [sp, #16]
 800a6ce:	e7ea      	b.n	800a6a6 <_dtoa_r+0xb3e>
 800a6d0:	0800bdf0 	.word	0x0800bdf0
 800a6d4:	0800be68 	.word	0x0800be68

0800a6d8 <rshift>:
 800a6d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a6da:	6906      	ldr	r6, [r0, #16]
 800a6dc:	114b      	asrs	r3, r1, #5
 800a6de:	429e      	cmp	r6, r3
 800a6e0:	f100 0414 	add.w	r4, r0, #20
 800a6e4:	dd30      	ble.n	800a748 <rshift+0x70>
 800a6e6:	f011 011f 	ands.w	r1, r1, #31
 800a6ea:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800a6ee:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800a6f2:	d108      	bne.n	800a706 <rshift+0x2e>
 800a6f4:	4621      	mov	r1, r4
 800a6f6:	42b2      	cmp	r2, r6
 800a6f8:	460b      	mov	r3, r1
 800a6fa:	d211      	bcs.n	800a720 <rshift+0x48>
 800a6fc:	f852 3b04 	ldr.w	r3, [r2], #4
 800a700:	f841 3b04 	str.w	r3, [r1], #4
 800a704:	e7f7      	b.n	800a6f6 <rshift+0x1e>
 800a706:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800a70a:	f1c1 0c20 	rsb	ip, r1, #32
 800a70e:	40cd      	lsrs	r5, r1
 800a710:	3204      	adds	r2, #4
 800a712:	4623      	mov	r3, r4
 800a714:	42b2      	cmp	r2, r6
 800a716:	4617      	mov	r7, r2
 800a718:	d30c      	bcc.n	800a734 <rshift+0x5c>
 800a71a:	601d      	str	r5, [r3, #0]
 800a71c:	b105      	cbz	r5, 800a720 <rshift+0x48>
 800a71e:	3304      	adds	r3, #4
 800a720:	1b1a      	subs	r2, r3, r4
 800a722:	42a3      	cmp	r3, r4
 800a724:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a728:	bf08      	it	eq
 800a72a:	2300      	moveq	r3, #0
 800a72c:	6102      	str	r2, [r0, #16]
 800a72e:	bf08      	it	eq
 800a730:	6143      	streq	r3, [r0, #20]
 800a732:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a734:	683f      	ldr	r7, [r7, #0]
 800a736:	fa07 f70c 	lsl.w	r7, r7, ip
 800a73a:	433d      	orrs	r5, r7
 800a73c:	f843 5b04 	str.w	r5, [r3], #4
 800a740:	f852 5b04 	ldr.w	r5, [r2], #4
 800a744:	40cd      	lsrs	r5, r1
 800a746:	e7e5      	b.n	800a714 <rshift+0x3c>
 800a748:	4623      	mov	r3, r4
 800a74a:	e7e9      	b.n	800a720 <rshift+0x48>

0800a74c <__hexdig_fun>:
 800a74c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a750:	2b09      	cmp	r3, #9
 800a752:	d802      	bhi.n	800a75a <__hexdig_fun+0xe>
 800a754:	3820      	subs	r0, #32
 800a756:	b2c0      	uxtb	r0, r0
 800a758:	4770      	bx	lr
 800a75a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a75e:	2b05      	cmp	r3, #5
 800a760:	d801      	bhi.n	800a766 <__hexdig_fun+0x1a>
 800a762:	3847      	subs	r0, #71	; 0x47
 800a764:	e7f7      	b.n	800a756 <__hexdig_fun+0xa>
 800a766:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a76a:	2b05      	cmp	r3, #5
 800a76c:	d801      	bhi.n	800a772 <__hexdig_fun+0x26>
 800a76e:	3827      	subs	r0, #39	; 0x27
 800a770:	e7f1      	b.n	800a756 <__hexdig_fun+0xa>
 800a772:	2000      	movs	r0, #0
 800a774:	4770      	bx	lr

0800a776 <__gethex>:
 800a776:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a77a:	b08b      	sub	sp, #44	; 0x2c
 800a77c:	468a      	mov	sl, r1
 800a77e:	9002      	str	r0, [sp, #8]
 800a780:	9816      	ldr	r0, [sp, #88]	; 0x58
 800a782:	9306      	str	r3, [sp, #24]
 800a784:	4690      	mov	r8, r2
 800a786:	f000 facd 	bl	800ad24 <__localeconv_l>
 800a78a:	6803      	ldr	r3, [r0, #0]
 800a78c:	9303      	str	r3, [sp, #12]
 800a78e:	4618      	mov	r0, r3
 800a790:	f7f5 fd26 	bl	80001e0 <strlen>
 800a794:	9b03      	ldr	r3, [sp, #12]
 800a796:	9001      	str	r0, [sp, #4]
 800a798:	4403      	add	r3, r0
 800a79a:	f04f 0b00 	mov.w	fp, #0
 800a79e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a7a2:	9307      	str	r3, [sp, #28]
 800a7a4:	f8da 3000 	ldr.w	r3, [sl]
 800a7a8:	3302      	adds	r3, #2
 800a7aa:	461f      	mov	r7, r3
 800a7ac:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a7b0:	2830      	cmp	r0, #48	; 0x30
 800a7b2:	d06c      	beq.n	800a88e <__gethex+0x118>
 800a7b4:	f7ff ffca 	bl	800a74c <__hexdig_fun>
 800a7b8:	4604      	mov	r4, r0
 800a7ba:	2800      	cmp	r0, #0
 800a7bc:	d16a      	bne.n	800a894 <__gethex+0x11e>
 800a7be:	9a01      	ldr	r2, [sp, #4]
 800a7c0:	9903      	ldr	r1, [sp, #12]
 800a7c2:	4638      	mov	r0, r7
 800a7c4:	f001 f8fa 	bl	800b9bc <strncmp>
 800a7c8:	2800      	cmp	r0, #0
 800a7ca:	d166      	bne.n	800a89a <__gethex+0x124>
 800a7cc:	9b01      	ldr	r3, [sp, #4]
 800a7ce:	5cf8      	ldrb	r0, [r7, r3]
 800a7d0:	18fe      	adds	r6, r7, r3
 800a7d2:	f7ff ffbb 	bl	800a74c <__hexdig_fun>
 800a7d6:	2800      	cmp	r0, #0
 800a7d8:	d062      	beq.n	800a8a0 <__gethex+0x12a>
 800a7da:	4633      	mov	r3, r6
 800a7dc:	7818      	ldrb	r0, [r3, #0]
 800a7de:	2830      	cmp	r0, #48	; 0x30
 800a7e0:	461f      	mov	r7, r3
 800a7e2:	f103 0301 	add.w	r3, r3, #1
 800a7e6:	d0f9      	beq.n	800a7dc <__gethex+0x66>
 800a7e8:	f7ff ffb0 	bl	800a74c <__hexdig_fun>
 800a7ec:	fab0 f580 	clz	r5, r0
 800a7f0:	096d      	lsrs	r5, r5, #5
 800a7f2:	4634      	mov	r4, r6
 800a7f4:	f04f 0b01 	mov.w	fp, #1
 800a7f8:	463a      	mov	r2, r7
 800a7fa:	4616      	mov	r6, r2
 800a7fc:	3201      	adds	r2, #1
 800a7fe:	7830      	ldrb	r0, [r6, #0]
 800a800:	f7ff ffa4 	bl	800a74c <__hexdig_fun>
 800a804:	2800      	cmp	r0, #0
 800a806:	d1f8      	bne.n	800a7fa <__gethex+0x84>
 800a808:	9a01      	ldr	r2, [sp, #4]
 800a80a:	9903      	ldr	r1, [sp, #12]
 800a80c:	4630      	mov	r0, r6
 800a80e:	f001 f8d5 	bl	800b9bc <strncmp>
 800a812:	b950      	cbnz	r0, 800a82a <__gethex+0xb4>
 800a814:	b954      	cbnz	r4, 800a82c <__gethex+0xb6>
 800a816:	9b01      	ldr	r3, [sp, #4]
 800a818:	18f4      	adds	r4, r6, r3
 800a81a:	4622      	mov	r2, r4
 800a81c:	4616      	mov	r6, r2
 800a81e:	3201      	adds	r2, #1
 800a820:	7830      	ldrb	r0, [r6, #0]
 800a822:	f7ff ff93 	bl	800a74c <__hexdig_fun>
 800a826:	2800      	cmp	r0, #0
 800a828:	d1f8      	bne.n	800a81c <__gethex+0xa6>
 800a82a:	b10c      	cbz	r4, 800a830 <__gethex+0xba>
 800a82c:	1ba4      	subs	r4, r4, r6
 800a82e:	00a4      	lsls	r4, r4, #2
 800a830:	7833      	ldrb	r3, [r6, #0]
 800a832:	2b50      	cmp	r3, #80	; 0x50
 800a834:	d001      	beq.n	800a83a <__gethex+0xc4>
 800a836:	2b70      	cmp	r3, #112	; 0x70
 800a838:	d140      	bne.n	800a8bc <__gethex+0x146>
 800a83a:	7873      	ldrb	r3, [r6, #1]
 800a83c:	2b2b      	cmp	r3, #43	; 0x2b
 800a83e:	d031      	beq.n	800a8a4 <__gethex+0x12e>
 800a840:	2b2d      	cmp	r3, #45	; 0x2d
 800a842:	d033      	beq.n	800a8ac <__gethex+0x136>
 800a844:	1c71      	adds	r1, r6, #1
 800a846:	f04f 0900 	mov.w	r9, #0
 800a84a:	7808      	ldrb	r0, [r1, #0]
 800a84c:	f7ff ff7e 	bl	800a74c <__hexdig_fun>
 800a850:	1e43      	subs	r3, r0, #1
 800a852:	b2db      	uxtb	r3, r3
 800a854:	2b18      	cmp	r3, #24
 800a856:	d831      	bhi.n	800a8bc <__gethex+0x146>
 800a858:	f1a0 0210 	sub.w	r2, r0, #16
 800a85c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a860:	f7ff ff74 	bl	800a74c <__hexdig_fun>
 800a864:	1e43      	subs	r3, r0, #1
 800a866:	b2db      	uxtb	r3, r3
 800a868:	2b18      	cmp	r3, #24
 800a86a:	d922      	bls.n	800a8b2 <__gethex+0x13c>
 800a86c:	f1b9 0f00 	cmp.w	r9, #0
 800a870:	d000      	beq.n	800a874 <__gethex+0xfe>
 800a872:	4252      	negs	r2, r2
 800a874:	4414      	add	r4, r2
 800a876:	f8ca 1000 	str.w	r1, [sl]
 800a87a:	b30d      	cbz	r5, 800a8c0 <__gethex+0x14a>
 800a87c:	f1bb 0f00 	cmp.w	fp, #0
 800a880:	bf0c      	ite	eq
 800a882:	2706      	moveq	r7, #6
 800a884:	2700      	movne	r7, #0
 800a886:	4638      	mov	r0, r7
 800a888:	b00b      	add	sp, #44	; 0x2c
 800a88a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a88e:	f10b 0b01 	add.w	fp, fp, #1
 800a892:	e78a      	b.n	800a7aa <__gethex+0x34>
 800a894:	2500      	movs	r5, #0
 800a896:	462c      	mov	r4, r5
 800a898:	e7ae      	b.n	800a7f8 <__gethex+0x82>
 800a89a:	463e      	mov	r6, r7
 800a89c:	2501      	movs	r5, #1
 800a89e:	e7c7      	b.n	800a830 <__gethex+0xba>
 800a8a0:	4604      	mov	r4, r0
 800a8a2:	e7fb      	b.n	800a89c <__gethex+0x126>
 800a8a4:	f04f 0900 	mov.w	r9, #0
 800a8a8:	1cb1      	adds	r1, r6, #2
 800a8aa:	e7ce      	b.n	800a84a <__gethex+0xd4>
 800a8ac:	f04f 0901 	mov.w	r9, #1
 800a8b0:	e7fa      	b.n	800a8a8 <__gethex+0x132>
 800a8b2:	230a      	movs	r3, #10
 800a8b4:	fb03 0202 	mla	r2, r3, r2, r0
 800a8b8:	3a10      	subs	r2, #16
 800a8ba:	e7cf      	b.n	800a85c <__gethex+0xe6>
 800a8bc:	4631      	mov	r1, r6
 800a8be:	e7da      	b.n	800a876 <__gethex+0x100>
 800a8c0:	1bf3      	subs	r3, r6, r7
 800a8c2:	3b01      	subs	r3, #1
 800a8c4:	4629      	mov	r1, r5
 800a8c6:	2b07      	cmp	r3, #7
 800a8c8:	dc49      	bgt.n	800a95e <__gethex+0x1e8>
 800a8ca:	9802      	ldr	r0, [sp, #8]
 800a8cc:	f000 fa5f 	bl	800ad8e <_Balloc>
 800a8d0:	9b01      	ldr	r3, [sp, #4]
 800a8d2:	f100 0914 	add.w	r9, r0, #20
 800a8d6:	f04f 0b00 	mov.w	fp, #0
 800a8da:	f1c3 0301 	rsb	r3, r3, #1
 800a8de:	4605      	mov	r5, r0
 800a8e0:	f8cd 9010 	str.w	r9, [sp, #16]
 800a8e4:	46da      	mov	sl, fp
 800a8e6:	9308      	str	r3, [sp, #32]
 800a8e8:	42b7      	cmp	r7, r6
 800a8ea:	d33b      	bcc.n	800a964 <__gethex+0x1ee>
 800a8ec:	9804      	ldr	r0, [sp, #16]
 800a8ee:	f840 ab04 	str.w	sl, [r0], #4
 800a8f2:	eba0 0009 	sub.w	r0, r0, r9
 800a8f6:	1080      	asrs	r0, r0, #2
 800a8f8:	6128      	str	r0, [r5, #16]
 800a8fa:	0147      	lsls	r7, r0, #5
 800a8fc:	4650      	mov	r0, sl
 800a8fe:	f000 fb0a 	bl	800af16 <__hi0bits>
 800a902:	f8d8 6000 	ldr.w	r6, [r8]
 800a906:	1a3f      	subs	r7, r7, r0
 800a908:	42b7      	cmp	r7, r6
 800a90a:	dd64      	ble.n	800a9d6 <__gethex+0x260>
 800a90c:	1bbf      	subs	r7, r7, r6
 800a90e:	4639      	mov	r1, r7
 800a910:	4628      	mov	r0, r5
 800a912:	f000 fe19 	bl	800b548 <__any_on>
 800a916:	4682      	mov	sl, r0
 800a918:	b178      	cbz	r0, 800a93a <__gethex+0x1c4>
 800a91a:	1e7b      	subs	r3, r7, #1
 800a91c:	1159      	asrs	r1, r3, #5
 800a91e:	f003 021f 	and.w	r2, r3, #31
 800a922:	f04f 0a01 	mov.w	sl, #1
 800a926:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a92a:	fa0a f202 	lsl.w	r2, sl, r2
 800a92e:	420a      	tst	r2, r1
 800a930:	d003      	beq.n	800a93a <__gethex+0x1c4>
 800a932:	4553      	cmp	r3, sl
 800a934:	dc46      	bgt.n	800a9c4 <__gethex+0x24e>
 800a936:	f04f 0a02 	mov.w	sl, #2
 800a93a:	4639      	mov	r1, r7
 800a93c:	4628      	mov	r0, r5
 800a93e:	f7ff fecb 	bl	800a6d8 <rshift>
 800a942:	443c      	add	r4, r7
 800a944:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a948:	42a3      	cmp	r3, r4
 800a94a:	da52      	bge.n	800a9f2 <__gethex+0x27c>
 800a94c:	4629      	mov	r1, r5
 800a94e:	9802      	ldr	r0, [sp, #8]
 800a950:	f000 fa51 	bl	800adf6 <_Bfree>
 800a954:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a956:	2300      	movs	r3, #0
 800a958:	6013      	str	r3, [r2, #0]
 800a95a:	27a3      	movs	r7, #163	; 0xa3
 800a95c:	e793      	b.n	800a886 <__gethex+0x110>
 800a95e:	3101      	adds	r1, #1
 800a960:	105b      	asrs	r3, r3, #1
 800a962:	e7b0      	b.n	800a8c6 <__gethex+0x150>
 800a964:	1e73      	subs	r3, r6, #1
 800a966:	9305      	str	r3, [sp, #20]
 800a968:	9a07      	ldr	r2, [sp, #28]
 800a96a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a96e:	4293      	cmp	r3, r2
 800a970:	d018      	beq.n	800a9a4 <__gethex+0x22e>
 800a972:	f1bb 0f20 	cmp.w	fp, #32
 800a976:	d107      	bne.n	800a988 <__gethex+0x212>
 800a978:	9b04      	ldr	r3, [sp, #16]
 800a97a:	f8c3 a000 	str.w	sl, [r3]
 800a97e:	3304      	adds	r3, #4
 800a980:	f04f 0a00 	mov.w	sl, #0
 800a984:	9304      	str	r3, [sp, #16]
 800a986:	46d3      	mov	fp, sl
 800a988:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a98c:	f7ff fede 	bl	800a74c <__hexdig_fun>
 800a990:	f000 000f 	and.w	r0, r0, #15
 800a994:	fa00 f00b 	lsl.w	r0, r0, fp
 800a998:	ea4a 0a00 	orr.w	sl, sl, r0
 800a99c:	f10b 0b04 	add.w	fp, fp, #4
 800a9a0:	9b05      	ldr	r3, [sp, #20]
 800a9a2:	e00d      	b.n	800a9c0 <__gethex+0x24a>
 800a9a4:	9b05      	ldr	r3, [sp, #20]
 800a9a6:	9a08      	ldr	r2, [sp, #32]
 800a9a8:	4413      	add	r3, r2
 800a9aa:	42bb      	cmp	r3, r7
 800a9ac:	d3e1      	bcc.n	800a972 <__gethex+0x1fc>
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	9a01      	ldr	r2, [sp, #4]
 800a9b2:	9903      	ldr	r1, [sp, #12]
 800a9b4:	9309      	str	r3, [sp, #36]	; 0x24
 800a9b6:	f001 f801 	bl	800b9bc <strncmp>
 800a9ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9bc:	2800      	cmp	r0, #0
 800a9be:	d1d8      	bne.n	800a972 <__gethex+0x1fc>
 800a9c0:	461e      	mov	r6, r3
 800a9c2:	e791      	b.n	800a8e8 <__gethex+0x172>
 800a9c4:	1eb9      	subs	r1, r7, #2
 800a9c6:	4628      	mov	r0, r5
 800a9c8:	f000 fdbe 	bl	800b548 <__any_on>
 800a9cc:	2800      	cmp	r0, #0
 800a9ce:	d0b2      	beq.n	800a936 <__gethex+0x1c0>
 800a9d0:	f04f 0a03 	mov.w	sl, #3
 800a9d4:	e7b1      	b.n	800a93a <__gethex+0x1c4>
 800a9d6:	da09      	bge.n	800a9ec <__gethex+0x276>
 800a9d8:	1bf7      	subs	r7, r6, r7
 800a9da:	4629      	mov	r1, r5
 800a9dc:	463a      	mov	r2, r7
 800a9de:	9802      	ldr	r0, [sp, #8]
 800a9e0:	f000 fbd4 	bl	800b18c <__lshift>
 800a9e4:	1be4      	subs	r4, r4, r7
 800a9e6:	4605      	mov	r5, r0
 800a9e8:	f100 0914 	add.w	r9, r0, #20
 800a9ec:	f04f 0a00 	mov.w	sl, #0
 800a9f0:	e7a8      	b.n	800a944 <__gethex+0x1ce>
 800a9f2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a9f6:	42a0      	cmp	r0, r4
 800a9f8:	dd6a      	ble.n	800aad0 <__gethex+0x35a>
 800a9fa:	1b04      	subs	r4, r0, r4
 800a9fc:	42a6      	cmp	r6, r4
 800a9fe:	dc2e      	bgt.n	800aa5e <__gethex+0x2e8>
 800aa00:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aa04:	2b02      	cmp	r3, #2
 800aa06:	d022      	beq.n	800aa4e <__gethex+0x2d8>
 800aa08:	2b03      	cmp	r3, #3
 800aa0a:	d024      	beq.n	800aa56 <__gethex+0x2e0>
 800aa0c:	2b01      	cmp	r3, #1
 800aa0e:	d115      	bne.n	800aa3c <__gethex+0x2c6>
 800aa10:	42a6      	cmp	r6, r4
 800aa12:	d113      	bne.n	800aa3c <__gethex+0x2c6>
 800aa14:	2e01      	cmp	r6, #1
 800aa16:	dc0b      	bgt.n	800aa30 <__gethex+0x2ba>
 800aa18:	9a06      	ldr	r2, [sp, #24]
 800aa1a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800aa1e:	6013      	str	r3, [r2, #0]
 800aa20:	2301      	movs	r3, #1
 800aa22:	612b      	str	r3, [r5, #16]
 800aa24:	f8c9 3000 	str.w	r3, [r9]
 800aa28:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aa2a:	2762      	movs	r7, #98	; 0x62
 800aa2c:	601d      	str	r5, [r3, #0]
 800aa2e:	e72a      	b.n	800a886 <__gethex+0x110>
 800aa30:	1e71      	subs	r1, r6, #1
 800aa32:	4628      	mov	r0, r5
 800aa34:	f000 fd88 	bl	800b548 <__any_on>
 800aa38:	2800      	cmp	r0, #0
 800aa3a:	d1ed      	bne.n	800aa18 <__gethex+0x2a2>
 800aa3c:	4629      	mov	r1, r5
 800aa3e:	9802      	ldr	r0, [sp, #8]
 800aa40:	f000 f9d9 	bl	800adf6 <_Bfree>
 800aa44:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800aa46:	2300      	movs	r3, #0
 800aa48:	6013      	str	r3, [r2, #0]
 800aa4a:	2750      	movs	r7, #80	; 0x50
 800aa4c:	e71b      	b.n	800a886 <__gethex+0x110>
 800aa4e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d0e1      	beq.n	800aa18 <__gethex+0x2a2>
 800aa54:	e7f2      	b.n	800aa3c <__gethex+0x2c6>
 800aa56:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d1dd      	bne.n	800aa18 <__gethex+0x2a2>
 800aa5c:	e7ee      	b.n	800aa3c <__gethex+0x2c6>
 800aa5e:	1e67      	subs	r7, r4, #1
 800aa60:	f1ba 0f00 	cmp.w	sl, #0
 800aa64:	d131      	bne.n	800aaca <__gethex+0x354>
 800aa66:	b127      	cbz	r7, 800aa72 <__gethex+0x2fc>
 800aa68:	4639      	mov	r1, r7
 800aa6a:	4628      	mov	r0, r5
 800aa6c:	f000 fd6c 	bl	800b548 <__any_on>
 800aa70:	4682      	mov	sl, r0
 800aa72:	117a      	asrs	r2, r7, #5
 800aa74:	2301      	movs	r3, #1
 800aa76:	f007 071f 	and.w	r7, r7, #31
 800aa7a:	fa03 f707 	lsl.w	r7, r3, r7
 800aa7e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800aa82:	4621      	mov	r1, r4
 800aa84:	421f      	tst	r7, r3
 800aa86:	4628      	mov	r0, r5
 800aa88:	bf18      	it	ne
 800aa8a:	f04a 0a02 	orrne.w	sl, sl, #2
 800aa8e:	1b36      	subs	r6, r6, r4
 800aa90:	f7ff fe22 	bl	800a6d8 <rshift>
 800aa94:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800aa98:	2702      	movs	r7, #2
 800aa9a:	f1ba 0f00 	cmp.w	sl, #0
 800aa9e:	d048      	beq.n	800ab32 <__gethex+0x3bc>
 800aaa0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aaa4:	2b02      	cmp	r3, #2
 800aaa6:	d015      	beq.n	800aad4 <__gethex+0x35e>
 800aaa8:	2b03      	cmp	r3, #3
 800aaaa:	d017      	beq.n	800aadc <__gethex+0x366>
 800aaac:	2b01      	cmp	r3, #1
 800aaae:	d109      	bne.n	800aac4 <__gethex+0x34e>
 800aab0:	f01a 0f02 	tst.w	sl, #2
 800aab4:	d006      	beq.n	800aac4 <__gethex+0x34e>
 800aab6:	f8d9 3000 	ldr.w	r3, [r9]
 800aaba:	ea4a 0a03 	orr.w	sl, sl, r3
 800aabe:	f01a 0f01 	tst.w	sl, #1
 800aac2:	d10e      	bne.n	800aae2 <__gethex+0x36c>
 800aac4:	f047 0710 	orr.w	r7, r7, #16
 800aac8:	e033      	b.n	800ab32 <__gethex+0x3bc>
 800aaca:	f04f 0a01 	mov.w	sl, #1
 800aace:	e7d0      	b.n	800aa72 <__gethex+0x2fc>
 800aad0:	2701      	movs	r7, #1
 800aad2:	e7e2      	b.n	800aa9a <__gethex+0x324>
 800aad4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aad6:	f1c3 0301 	rsb	r3, r3, #1
 800aada:	9315      	str	r3, [sp, #84]	; 0x54
 800aadc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d0f0      	beq.n	800aac4 <__gethex+0x34e>
 800aae2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800aae6:	f105 0314 	add.w	r3, r5, #20
 800aaea:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800aaee:	eb03 010a 	add.w	r1, r3, sl
 800aaf2:	f04f 0c00 	mov.w	ip, #0
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	f853 2b04 	ldr.w	r2, [r3], #4
 800aafc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ab00:	d01c      	beq.n	800ab3c <__gethex+0x3c6>
 800ab02:	3201      	adds	r2, #1
 800ab04:	6002      	str	r2, [r0, #0]
 800ab06:	2f02      	cmp	r7, #2
 800ab08:	f105 0314 	add.w	r3, r5, #20
 800ab0c:	d138      	bne.n	800ab80 <__gethex+0x40a>
 800ab0e:	f8d8 2000 	ldr.w	r2, [r8]
 800ab12:	3a01      	subs	r2, #1
 800ab14:	42b2      	cmp	r2, r6
 800ab16:	d10a      	bne.n	800ab2e <__gethex+0x3b8>
 800ab18:	1171      	asrs	r1, r6, #5
 800ab1a:	2201      	movs	r2, #1
 800ab1c:	f006 061f 	and.w	r6, r6, #31
 800ab20:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ab24:	fa02 f606 	lsl.w	r6, r2, r6
 800ab28:	421e      	tst	r6, r3
 800ab2a:	bf18      	it	ne
 800ab2c:	4617      	movne	r7, r2
 800ab2e:	f047 0720 	orr.w	r7, r7, #32
 800ab32:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ab34:	601d      	str	r5, [r3, #0]
 800ab36:	9b06      	ldr	r3, [sp, #24]
 800ab38:	601c      	str	r4, [r3, #0]
 800ab3a:	e6a4      	b.n	800a886 <__gethex+0x110>
 800ab3c:	4299      	cmp	r1, r3
 800ab3e:	f843 cc04 	str.w	ip, [r3, #-4]
 800ab42:	d8d8      	bhi.n	800aaf6 <__gethex+0x380>
 800ab44:	68ab      	ldr	r3, [r5, #8]
 800ab46:	4599      	cmp	r9, r3
 800ab48:	db12      	blt.n	800ab70 <__gethex+0x3fa>
 800ab4a:	6869      	ldr	r1, [r5, #4]
 800ab4c:	9802      	ldr	r0, [sp, #8]
 800ab4e:	3101      	adds	r1, #1
 800ab50:	f000 f91d 	bl	800ad8e <_Balloc>
 800ab54:	692a      	ldr	r2, [r5, #16]
 800ab56:	3202      	adds	r2, #2
 800ab58:	f105 010c 	add.w	r1, r5, #12
 800ab5c:	4683      	mov	fp, r0
 800ab5e:	0092      	lsls	r2, r2, #2
 800ab60:	300c      	adds	r0, #12
 800ab62:	f000 f909 	bl	800ad78 <memcpy>
 800ab66:	4629      	mov	r1, r5
 800ab68:	9802      	ldr	r0, [sp, #8]
 800ab6a:	f000 f944 	bl	800adf6 <_Bfree>
 800ab6e:	465d      	mov	r5, fp
 800ab70:	692b      	ldr	r3, [r5, #16]
 800ab72:	1c5a      	adds	r2, r3, #1
 800ab74:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800ab78:	612a      	str	r2, [r5, #16]
 800ab7a:	2201      	movs	r2, #1
 800ab7c:	615a      	str	r2, [r3, #20]
 800ab7e:	e7c2      	b.n	800ab06 <__gethex+0x390>
 800ab80:	692a      	ldr	r2, [r5, #16]
 800ab82:	454a      	cmp	r2, r9
 800ab84:	dd0b      	ble.n	800ab9e <__gethex+0x428>
 800ab86:	2101      	movs	r1, #1
 800ab88:	4628      	mov	r0, r5
 800ab8a:	f7ff fda5 	bl	800a6d8 <rshift>
 800ab8e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ab92:	3401      	adds	r4, #1
 800ab94:	42a3      	cmp	r3, r4
 800ab96:	f6ff aed9 	blt.w	800a94c <__gethex+0x1d6>
 800ab9a:	2701      	movs	r7, #1
 800ab9c:	e7c7      	b.n	800ab2e <__gethex+0x3b8>
 800ab9e:	f016 061f 	ands.w	r6, r6, #31
 800aba2:	d0fa      	beq.n	800ab9a <__gethex+0x424>
 800aba4:	449a      	add	sl, r3
 800aba6:	f1c6 0620 	rsb	r6, r6, #32
 800abaa:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800abae:	f000 f9b2 	bl	800af16 <__hi0bits>
 800abb2:	42b0      	cmp	r0, r6
 800abb4:	dbe7      	blt.n	800ab86 <__gethex+0x410>
 800abb6:	e7f0      	b.n	800ab9a <__gethex+0x424>

0800abb8 <L_shift>:
 800abb8:	f1c2 0208 	rsb	r2, r2, #8
 800abbc:	0092      	lsls	r2, r2, #2
 800abbe:	b570      	push	{r4, r5, r6, lr}
 800abc0:	f1c2 0620 	rsb	r6, r2, #32
 800abc4:	6843      	ldr	r3, [r0, #4]
 800abc6:	6804      	ldr	r4, [r0, #0]
 800abc8:	fa03 f506 	lsl.w	r5, r3, r6
 800abcc:	432c      	orrs	r4, r5
 800abce:	40d3      	lsrs	r3, r2
 800abd0:	6004      	str	r4, [r0, #0]
 800abd2:	f840 3f04 	str.w	r3, [r0, #4]!
 800abd6:	4288      	cmp	r0, r1
 800abd8:	d3f4      	bcc.n	800abc4 <L_shift+0xc>
 800abda:	bd70      	pop	{r4, r5, r6, pc}

0800abdc <__match>:
 800abdc:	b530      	push	{r4, r5, lr}
 800abde:	6803      	ldr	r3, [r0, #0]
 800abe0:	3301      	adds	r3, #1
 800abe2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800abe6:	b914      	cbnz	r4, 800abee <__match+0x12>
 800abe8:	6003      	str	r3, [r0, #0]
 800abea:	2001      	movs	r0, #1
 800abec:	bd30      	pop	{r4, r5, pc}
 800abee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800abf2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800abf6:	2d19      	cmp	r5, #25
 800abf8:	bf98      	it	ls
 800abfa:	3220      	addls	r2, #32
 800abfc:	42a2      	cmp	r2, r4
 800abfe:	d0f0      	beq.n	800abe2 <__match+0x6>
 800ac00:	2000      	movs	r0, #0
 800ac02:	e7f3      	b.n	800abec <__match+0x10>

0800ac04 <__hexnan>:
 800ac04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac08:	680b      	ldr	r3, [r1, #0]
 800ac0a:	6801      	ldr	r1, [r0, #0]
 800ac0c:	115f      	asrs	r7, r3, #5
 800ac0e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800ac12:	f013 031f 	ands.w	r3, r3, #31
 800ac16:	b087      	sub	sp, #28
 800ac18:	bf18      	it	ne
 800ac1a:	3704      	addne	r7, #4
 800ac1c:	2500      	movs	r5, #0
 800ac1e:	1f3e      	subs	r6, r7, #4
 800ac20:	4682      	mov	sl, r0
 800ac22:	4690      	mov	r8, r2
 800ac24:	9301      	str	r3, [sp, #4]
 800ac26:	f847 5c04 	str.w	r5, [r7, #-4]
 800ac2a:	46b1      	mov	r9, r6
 800ac2c:	4634      	mov	r4, r6
 800ac2e:	9502      	str	r5, [sp, #8]
 800ac30:	46ab      	mov	fp, r5
 800ac32:	784a      	ldrb	r2, [r1, #1]
 800ac34:	1c4b      	adds	r3, r1, #1
 800ac36:	9303      	str	r3, [sp, #12]
 800ac38:	b342      	cbz	r2, 800ac8c <__hexnan+0x88>
 800ac3a:	4610      	mov	r0, r2
 800ac3c:	9105      	str	r1, [sp, #20]
 800ac3e:	9204      	str	r2, [sp, #16]
 800ac40:	f7ff fd84 	bl	800a74c <__hexdig_fun>
 800ac44:	2800      	cmp	r0, #0
 800ac46:	d143      	bne.n	800acd0 <__hexnan+0xcc>
 800ac48:	9a04      	ldr	r2, [sp, #16]
 800ac4a:	9905      	ldr	r1, [sp, #20]
 800ac4c:	2a20      	cmp	r2, #32
 800ac4e:	d818      	bhi.n	800ac82 <__hexnan+0x7e>
 800ac50:	9b02      	ldr	r3, [sp, #8]
 800ac52:	459b      	cmp	fp, r3
 800ac54:	dd13      	ble.n	800ac7e <__hexnan+0x7a>
 800ac56:	454c      	cmp	r4, r9
 800ac58:	d206      	bcs.n	800ac68 <__hexnan+0x64>
 800ac5a:	2d07      	cmp	r5, #7
 800ac5c:	dc04      	bgt.n	800ac68 <__hexnan+0x64>
 800ac5e:	462a      	mov	r2, r5
 800ac60:	4649      	mov	r1, r9
 800ac62:	4620      	mov	r0, r4
 800ac64:	f7ff ffa8 	bl	800abb8 <L_shift>
 800ac68:	4544      	cmp	r4, r8
 800ac6a:	d944      	bls.n	800acf6 <__hexnan+0xf2>
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	f1a4 0904 	sub.w	r9, r4, #4
 800ac72:	f844 3c04 	str.w	r3, [r4, #-4]
 800ac76:	f8cd b008 	str.w	fp, [sp, #8]
 800ac7a:	464c      	mov	r4, r9
 800ac7c:	461d      	mov	r5, r3
 800ac7e:	9903      	ldr	r1, [sp, #12]
 800ac80:	e7d7      	b.n	800ac32 <__hexnan+0x2e>
 800ac82:	2a29      	cmp	r2, #41	; 0x29
 800ac84:	d14a      	bne.n	800ad1c <__hexnan+0x118>
 800ac86:	3102      	adds	r1, #2
 800ac88:	f8ca 1000 	str.w	r1, [sl]
 800ac8c:	f1bb 0f00 	cmp.w	fp, #0
 800ac90:	d044      	beq.n	800ad1c <__hexnan+0x118>
 800ac92:	454c      	cmp	r4, r9
 800ac94:	d206      	bcs.n	800aca4 <__hexnan+0xa0>
 800ac96:	2d07      	cmp	r5, #7
 800ac98:	dc04      	bgt.n	800aca4 <__hexnan+0xa0>
 800ac9a:	462a      	mov	r2, r5
 800ac9c:	4649      	mov	r1, r9
 800ac9e:	4620      	mov	r0, r4
 800aca0:	f7ff ff8a 	bl	800abb8 <L_shift>
 800aca4:	4544      	cmp	r4, r8
 800aca6:	d928      	bls.n	800acfa <__hexnan+0xf6>
 800aca8:	4643      	mov	r3, r8
 800acaa:	f854 2b04 	ldr.w	r2, [r4], #4
 800acae:	f843 2b04 	str.w	r2, [r3], #4
 800acb2:	42a6      	cmp	r6, r4
 800acb4:	d2f9      	bcs.n	800acaa <__hexnan+0xa6>
 800acb6:	2200      	movs	r2, #0
 800acb8:	f843 2b04 	str.w	r2, [r3], #4
 800acbc:	429e      	cmp	r6, r3
 800acbe:	d2fb      	bcs.n	800acb8 <__hexnan+0xb4>
 800acc0:	6833      	ldr	r3, [r6, #0]
 800acc2:	b91b      	cbnz	r3, 800accc <__hexnan+0xc8>
 800acc4:	4546      	cmp	r6, r8
 800acc6:	d127      	bne.n	800ad18 <__hexnan+0x114>
 800acc8:	2301      	movs	r3, #1
 800acca:	6033      	str	r3, [r6, #0]
 800accc:	2005      	movs	r0, #5
 800acce:	e026      	b.n	800ad1e <__hexnan+0x11a>
 800acd0:	3501      	adds	r5, #1
 800acd2:	2d08      	cmp	r5, #8
 800acd4:	f10b 0b01 	add.w	fp, fp, #1
 800acd8:	dd06      	ble.n	800ace8 <__hexnan+0xe4>
 800acda:	4544      	cmp	r4, r8
 800acdc:	d9cf      	bls.n	800ac7e <__hexnan+0x7a>
 800acde:	2300      	movs	r3, #0
 800ace0:	f844 3c04 	str.w	r3, [r4, #-4]
 800ace4:	2501      	movs	r5, #1
 800ace6:	3c04      	subs	r4, #4
 800ace8:	6822      	ldr	r2, [r4, #0]
 800acea:	f000 000f 	and.w	r0, r0, #15
 800acee:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800acf2:	6020      	str	r0, [r4, #0]
 800acf4:	e7c3      	b.n	800ac7e <__hexnan+0x7a>
 800acf6:	2508      	movs	r5, #8
 800acf8:	e7c1      	b.n	800ac7e <__hexnan+0x7a>
 800acfa:	9b01      	ldr	r3, [sp, #4]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d0df      	beq.n	800acc0 <__hexnan+0xbc>
 800ad00:	f04f 32ff 	mov.w	r2, #4294967295
 800ad04:	f1c3 0320 	rsb	r3, r3, #32
 800ad08:	fa22 f303 	lsr.w	r3, r2, r3
 800ad0c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800ad10:	401a      	ands	r2, r3
 800ad12:	f847 2c04 	str.w	r2, [r7, #-4]
 800ad16:	e7d3      	b.n	800acc0 <__hexnan+0xbc>
 800ad18:	3e04      	subs	r6, #4
 800ad1a:	e7d1      	b.n	800acc0 <__hexnan+0xbc>
 800ad1c:	2004      	movs	r0, #4
 800ad1e:	b007      	add	sp, #28
 800ad20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ad24 <__localeconv_l>:
 800ad24:	30f0      	adds	r0, #240	; 0xf0
 800ad26:	4770      	bx	lr

0800ad28 <_localeconv_r>:
 800ad28:	4b04      	ldr	r3, [pc, #16]	; (800ad3c <_localeconv_r+0x14>)
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	6a18      	ldr	r0, [r3, #32]
 800ad2e:	4b04      	ldr	r3, [pc, #16]	; (800ad40 <_localeconv_r+0x18>)
 800ad30:	2800      	cmp	r0, #0
 800ad32:	bf08      	it	eq
 800ad34:	4618      	moveq	r0, r3
 800ad36:	30f0      	adds	r0, #240	; 0xf0
 800ad38:	4770      	bx	lr
 800ad3a:	bf00      	nop
 800ad3c:	20000054 	.word	0x20000054
 800ad40:	200000b8 	.word	0x200000b8

0800ad44 <malloc>:
 800ad44:	4b02      	ldr	r3, [pc, #8]	; (800ad50 <malloc+0xc>)
 800ad46:	4601      	mov	r1, r0
 800ad48:	6818      	ldr	r0, [r3, #0]
 800ad4a:	f000 bc7b 	b.w	800b644 <_malloc_r>
 800ad4e:	bf00      	nop
 800ad50:	20000054 	.word	0x20000054

0800ad54 <__ascii_mbtowc>:
 800ad54:	b082      	sub	sp, #8
 800ad56:	b901      	cbnz	r1, 800ad5a <__ascii_mbtowc+0x6>
 800ad58:	a901      	add	r1, sp, #4
 800ad5a:	b142      	cbz	r2, 800ad6e <__ascii_mbtowc+0x1a>
 800ad5c:	b14b      	cbz	r3, 800ad72 <__ascii_mbtowc+0x1e>
 800ad5e:	7813      	ldrb	r3, [r2, #0]
 800ad60:	600b      	str	r3, [r1, #0]
 800ad62:	7812      	ldrb	r2, [r2, #0]
 800ad64:	1c10      	adds	r0, r2, #0
 800ad66:	bf18      	it	ne
 800ad68:	2001      	movne	r0, #1
 800ad6a:	b002      	add	sp, #8
 800ad6c:	4770      	bx	lr
 800ad6e:	4610      	mov	r0, r2
 800ad70:	e7fb      	b.n	800ad6a <__ascii_mbtowc+0x16>
 800ad72:	f06f 0001 	mvn.w	r0, #1
 800ad76:	e7f8      	b.n	800ad6a <__ascii_mbtowc+0x16>

0800ad78 <memcpy>:
 800ad78:	b510      	push	{r4, lr}
 800ad7a:	1e43      	subs	r3, r0, #1
 800ad7c:	440a      	add	r2, r1
 800ad7e:	4291      	cmp	r1, r2
 800ad80:	d100      	bne.n	800ad84 <memcpy+0xc>
 800ad82:	bd10      	pop	{r4, pc}
 800ad84:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad88:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ad8c:	e7f7      	b.n	800ad7e <memcpy+0x6>

0800ad8e <_Balloc>:
 800ad8e:	b570      	push	{r4, r5, r6, lr}
 800ad90:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ad92:	4604      	mov	r4, r0
 800ad94:	460e      	mov	r6, r1
 800ad96:	b93d      	cbnz	r5, 800ada8 <_Balloc+0x1a>
 800ad98:	2010      	movs	r0, #16
 800ad9a:	f7ff ffd3 	bl	800ad44 <malloc>
 800ad9e:	6260      	str	r0, [r4, #36]	; 0x24
 800ada0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ada4:	6005      	str	r5, [r0, #0]
 800ada6:	60c5      	str	r5, [r0, #12]
 800ada8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800adaa:	68eb      	ldr	r3, [r5, #12]
 800adac:	b183      	cbz	r3, 800add0 <_Balloc+0x42>
 800adae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800adb0:	68db      	ldr	r3, [r3, #12]
 800adb2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800adb6:	b9b8      	cbnz	r0, 800ade8 <_Balloc+0x5a>
 800adb8:	2101      	movs	r1, #1
 800adba:	fa01 f506 	lsl.w	r5, r1, r6
 800adbe:	1d6a      	adds	r2, r5, #5
 800adc0:	0092      	lsls	r2, r2, #2
 800adc2:	4620      	mov	r0, r4
 800adc4:	f000 fbe1 	bl	800b58a <_calloc_r>
 800adc8:	b160      	cbz	r0, 800ade4 <_Balloc+0x56>
 800adca:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800adce:	e00e      	b.n	800adee <_Balloc+0x60>
 800add0:	2221      	movs	r2, #33	; 0x21
 800add2:	2104      	movs	r1, #4
 800add4:	4620      	mov	r0, r4
 800add6:	f000 fbd8 	bl	800b58a <_calloc_r>
 800adda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800addc:	60e8      	str	r0, [r5, #12]
 800adde:	68db      	ldr	r3, [r3, #12]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d1e4      	bne.n	800adae <_Balloc+0x20>
 800ade4:	2000      	movs	r0, #0
 800ade6:	bd70      	pop	{r4, r5, r6, pc}
 800ade8:	6802      	ldr	r2, [r0, #0]
 800adea:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800adee:	2300      	movs	r3, #0
 800adf0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800adf4:	e7f7      	b.n	800ade6 <_Balloc+0x58>

0800adf6 <_Bfree>:
 800adf6:	b570      	push	{r4, r5, r6, lr}
 800adf8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800adfa:	4606      	mov	r6, r0
 800adfc:	460d      	mov	r5, r1
 800adfe:	b93c      	cbnz	r4, 800ae10 <_Bfree+0x1a>
 800ae00:	2010      	movs	r0, #16
 800ae02:	f7ff ff9f 	bl	800ad44 <malloc>
 800ae06:	6270      	str	r0, [r6, #36]	; 0x24
 800ae08:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ae0c:	6004      	str	r4, [r0, #0]
 800ae0e:	60c4      	str	r4, [r0, #12]
 800ae10:	b13d      	cbz	r5, 800ae22 <_Bfree+0x2c>
 800ae12:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ae14:	686a      	ldr	r2, [r5, #4]
 800ae16:	68db      	ldr	r3, [r3, #12]
 800ae18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ae1c:	6029      	str	r1, [r5, #0]
 800ae1e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800ae22:	bd70      	pop	{r4, r5, r6, pc}

0800ae24 <__multadd>:
 800ae24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae28:	690d      	ldr	r5, [r1, #16]
 800ae2a:	461f      	mov	r7, r3
 800ae2c:	4606      	mov	r6, r0
 800ae2e:	460c      	mov	r4, r1
 800ae30:	f101 0c14 	add.w	ip, r1, #20
 800ae34:	2300      	movs	r3, #0
 800ae36:	f8dc 0000 	ldr.w	r0, [ip]
 800ae3a:	b281      	uxth	r1, r0
 800ae3c:	fb02 7101 	mla	r1, r2, r1, r7
 800ae40:	0c0f      	lsrs	r7, r1, #16
 800ae42:	0c00      	lsrs	r0, r0, #16
 800ae44:	fb02 7000 	mla	r0, r2, r0, r7
 800ae48:	b289      	uxth	r1, r1
 800ae4a:	3301      	adds	r3, #1
 800ae4c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800ae50:	429d      	cmp	r5, r3
 800ae52:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800ae56:	f84c 1b04 	str.w	r1, [ip], #4
 800ae5a:	dcec      	bgt.n	800ae36 <__multadd+0x12>
 800ae5c:	b1d7      	cbz	r7, 800ae94 <__multadd+0x70>
 800ae5e:	68a3      	ldr	r3, [r4, #8]
 800ae60:	42ab      	cmp	r3, r5
 800ae62:	dc12      	bgt.n	800ae8a <__multadd+0x66>
 800ae64:	6861      	ldr	r1, [r4, #4]
 800ae66:	4630      	mov	r0, r6
 800ae68:	3101      	adds	r1, #1
 800ae6a:	f7ff ff90 	bl	800ad8e <_Balloc>
 800ae6e:	6922      	ldr	r2, [r4, #16]
 800ae70:	3202      	adds	r2, #2
 800ae72:	f104 010c 	add.w	r1, r4, #12
 800ae76:	4680      	mov	r8, r0
 800ae78:	0092      	lsls	r2, r2, #2
 800ae7a:	300c      	adds	r0, #12
 800ae7c:	f7ff ff7c 	bl	800ad78 <memcpy>
 800ae80:	4621      	mov	r1, r4
 800ae82:	4630      	mov	r0, r6
 800ae84:	f7ff ffb7 	bl	800adf6 <_Bfree>
 800ae88:	4644      	mov	r4, r8
 800ae8a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ae8e:	3501      	adds	r5, #1
 800ae90:	615f      	str	r7, [r3, #20]
 800ae92:	6125      	str	r5, [r4, #16]
 800ae94:	4620      	mov	r0, r4
 800ae96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ae9a <__s2b>:
 800ae9a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae9e:	460c      	mov	r4, r1
 800aea0:	4615      	mov	r5, r2
 800aea2:	461f      	mov	r7, r3
 800aea4:	2209      	movs	r2, #9
 800aea6:	3308      	adds	r3, #8
 800aea8:	4606      	mov	r6, r0
 800aeaa:	fb93 f3f2 	sdiv	r3, r3, r2
 800aeae:	2100      	movs	r1, #0
 800aeb0:	2201      	movs	r2, #1
 800aeb2:	429a      	cmp	r2, r3
 800aeb4:	db20      	blt.n	800aef8 <__s2b+0x5e>
 800aeb6:	4630      	mov	r0, r6
 800aeb8:	f7ff ff69 	bl	800ad8e <_Balloc>
 800aebc:	9b08      	ldr	r3, [sp, #32]
 800aebe:	6143      	str	r3, [r0, #20]
 800aec0:	2d09      	cmp	r5, #9
 800aec2:	f04f 0301 	mov.w	r3, #1
 800aec6:	6103      	str	r3, [r0, #16]
 800aec8:	dd19      	ble.n	800aefe <__s2b+0x64>
 800aeca:	f104 0809 	add.w	r8, r4, #9
 800aece:	46c1      	mov	r9, r8
 800aed0:	442c      	add	r4, r5
 800aed2:	f819 3b01 	ldrb.w	r3, [r9], #1
 800aed6:	4601      	mov	r1, r0
 800aed8:	3b30      	subs	r3, #48	; 0x30
 800aeda:	220a      	movs	r2, #10
 800aedc:	4630      	mov	r0, r6
 800aede:	f7ff ffa1 	bl	800ae24 <__multadd>
 800aee2:	45a1      	cmp	r9, r4
 800aee4:	d1f5      	bne.n	800aed2 <__s2b+0x38>
 800aee6:	eb08 0405 	add.w	r4, r8, r5
 800aeea:	3c08      	subs	r4, #8
 800aeec:	1b2d      	subs	r5, r5, r4
 800aeee:	1963      	adds	r3, r4, r5
 800aef0:	42bb      	cmp	r3, r7
 800aef2:	db07      	blt.n	800af04 <__s2b+0x6a>
 800aef4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aef8:	0052      	lsls	r2, r2, #1
 800aefa:	3101      	adds	r1, #1
 800aefc:	e7d9      	b.n	800aeb2 <__s2b+0x18>
 800aefe:	340a      	adds	r4, #10
 800af00:	2509      	movs	r5, #9
 800af02:	e7f3      	b.n	800aeec <__s2b+0x52>
 800af04:	f814 3b01 	ldrb.w	r3, [r4], #1
 800af08:	4601      	mov	r1, r0
 800af0a:	3b30      	subs	r3, #48	; 0x30
 800af0c:	220a      	movs	r2, #10
 800af0e:	4630      	mov	r0, r6
 800af10:	f7ff ff88 	bl	800ae24 <__multadd>
 800af14:	e7eb      	b.n	800aeee <__s2b+0x54>

0800af16 <__hi0bits>:
 800af16:	0c02      	lsrs	r2, r0, #16
 800af18:	0412      	lsls	r2, r2, #16
 800af1a:	4603      	mov	r3, r0
 800af1c:	b9b2      	cbnz	r2, 800af4c <__hi0bits+0x36>
 800af1e:	0403      	lsls	r3, r0, #16
 800af20:	2010      	movs	r0, #16
 800af22:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800af26:	bf04      	itt	eq
 800af28:	021b      	lsleq	r3, r3, #8
 800af2a:	3008      	addeq	r0, #8
 800af2c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800af30:	bf04      	itt	eq
 800af32:	011b      	lsleq	r3, r3, #4
 800af34:	3004      	addeq	r0, #4
 800af36:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800af3a:	bf04      	itt	eq
 800af3c:	009b      	lsleq	r3, r3, #2
 800af3e:	3002      	addeq	r0, #2
 800af40:	2b00      	cmp	r3, #0
 800af42:	db06      	blt.n	800af52 <__hi0bits+0x3c>
 800af44:	005b      	lsls	r3, r3, #1
 800af46:	d503      	bpl.n	800af50 <__hi0bits+0x3a>
 800af48:	3001      	adds	r0, #1
 800af4a:	4770      	bx	lr
 800af4c:	2000      	movs	r0, #0
 800af4e:	e7e8      	b.n	800af22 <__hi0bits+0xc>
 800af50:	2020      	movs	r0, #32
 800af52:	4770      	bx	lr

0800af54 <__lo0bits>:
 800af54:	6803      	ldr	r3, [r0, #0]
 800af56:	f013 0207 	ands.w	r2, r3, #7
 800af5a:	4601      	mov	r1, r0
 800af5c:	d00b      	beq.n	800af76 <__lo0bits+0x22>
 800af5e:	07da      	lsls	r2, r3, #31
 800af60:	d423      	bmi.n	800afaa <__lo0bits+0x56>
 800af62:	0798      	lsls	r0, r3, #30
 800af64:	bf49      	itett	mi
 800af66:	085b      	lsrmi	r3, r3, #1
 800af68:	089b      	lsrpl	r3, r3, #2
 800af6a:	2001      	movmi	r0, #1
 800af6c:	600b      	strmi	r3, [r1, #0]
 800af6e:	bf5c      	itt	pl
 800af70:	600b      	strpl	r3, [r1, #0]
 800af72:	2002      	movpl	r0, #2
 800af74:	4770      	bx	lr
 800af76:	b298      	uxth	r0, r3
 800af78:	b9a8      	cbnz	r0, 800afa6 <__lo0bits+0x52>
 800af7a:	0c1b      	lsrs	r3, r3, #16
 800af7c:	2010      	movs	r0, #16
 800af7e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800af82:	bf04      	itt	eq
 800af84:	0a1b      	lsreq	r3, r3, #8
 800af86:	3008      	addeq	r0, #8
 800af88:	071a      	lsls	r2, r3, #28
 800af8a:	bf04      	itt	eq
 800af8c:	091b      	lsreq	r3, r3, #4
 800af8e:	3004      	addeq	r0, #4
 800af90:	079a      	lsls	r2, r3, #30
 800af92:	bf04      	itt	eq
 800af94:	089b      	lsreq	r3, r3, #2
 800af96:	3002      	addeq	r0, #2
 800af98:	07da      	lsls	r2, r3, #31
 800af9a:	d402      	bmi.n	800afa2 <__lo0bits+0x4e>
 800af9c:	085b      	lsrs	r3, r3, #1
 800af9e:	d006      	beq.n	800afae <__lo0bits+0x5a>
 800afa0:	3001      	adds	r0, #1
 800afa2:	600b      	str	r3, [r1, #0]
 800afa4:	4770      	bx	lr
 800afa6:	4610      	mov	r0, r2
 800afa8:	e7e9      	b.n	800af7e <__lo0bits+0x2a>
 800afaa:	2000      	movs	r0, #0
 800afac:	4770      	bx	lr
 800afae:	2020      	movs	r0, #32
 800afb0:	4770      	bx	lr

0800afb2 <__i2b>:
 800afb2:	b510      	push	{r4, lr}
 800afb4:	460c      	mov	r4, r1
 800afb6:	2101      	movs	r1, #1
 800afb8:	f7ff fee9 	bl	800ad8e <_Balloc>
 800afbc:	2201      	movs	r2, #1
 800afbe:	6144      	str	r4, [r0, #20]
 800afc0:	6102      	str	r2, [r0, #16]
 800afc2:	bd10      	pop	{r4, pc}

0800afc4 <__multiply>:
 800afc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afc8:	4614      	mov	r4, r2
 800afca:	690a      	ldr	r2, [r1, #16]
 800afcc:	6923      	ldr	r3, [r4, #16]
 800afce:	429a      	cmp	r2, r3
 800afd0:	bfb8      	it	lt
 800afd2:	460b      	movlt	r3, r1
 800afd4:	4688      	mov	r8, r1
 800afd6:	bfbc      	itt	lt
 800afd8:	46a0      	movlt	r8, r4
 800afda:	461c      	movlt	r4, r3
 800afdc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800afe0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800afe4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800afe8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800afec:	eb07 0609 	add.w	r6, r7, r9
 800aff0:	42b3      	cmp	r3, r6
 800aff2:	bfb8      	it	lt
 800aff4:	3101      	addlt	r1, #1
 800aff6:	f7ff feca 	bl	800ad8e <_Balloc>
 800affa:	f100 0514 	add.w	r5, r0, #20
 800affe:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800b002:	462b      	mov	r3, r5
 800b004:	2200      	movs	r2, #0
 800b006:	4573      	cmp	r3, lr
 800b008:	d316      	bcc.n	800b038 <__multiply+0x74>
 800b00a:	f104 0214 	add.w	r2, r4, #20
 800b00e:	f108 0114 	add.w	r1, r8, #20
 800b012:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800b016:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800b01a:	9300      	str	r3, [sp, #0]
 800b01c:	9b00      	ldr	r3, [sp, #0]
 800b01e:	9201      	str	r2, [sp, #4]
 800b020:	4293      	cmp	r3, r2
 800b022:	d80c      	bhi.n	800b03e <__multiply+0x7a>
 800b024:	2e00      	cmp	r6, #0
 800b026:	dd03      	ble.n	800b030 <__multiply+0x6c>
 800b028:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d05d      	beq.n	800b0ec <__multiply+0x128>
 800b030:	6106      	str	r6, [r0, #16]
 800b032:	b003      	add	sp, #12
 800b034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b038:	f843 2b04 	str.w	r2, [r3], #4
 800b03c:	e7e3      	b.n	800b006 <__multiply+0x42>
 800b03e:	f8b2 b000 	ldrh.w	fp, [r2]
 800b042:	f1bb 0f00 	cmp.w	fp, #0
 800b046:	d023      	beq.n	800b090 <__multiply+0xcc>
 800b048:	4689      	mov	r9, r1
 800b04a:	46ac      	mov	ip, r5
 800b04c:	f04f 0800 	mov.w	r8, #0
 800b050:	f859 4b04 	ldr.w	r4, [r9], #4
 800b054:	f8dc a000 	ldr.w	sl, [ip]
 800b058:	b2a3      	uxth	r3, r4
 800b05a:	fa1f fa8a 	uxth.w	sl, sl
 800b05e:	fb0b a303 	mla	r3, fp, r3, sl
 800b062:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b066:	f8dc 4000 	ldr.w	r4, [ip]
 800b06a:	4443      	add	r3, r8
 800b06c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b070:	fb0b 840a 	mla	r4, fp, sl, r8
 800b074:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800b078:	46e2      	mov	sl, ip
 800b07a:	b29b      	uxth	r3, r3
 800b07c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b080:	454f      	cmp	r7, r9
 800b082:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b086:	f84a 3b04 	str.w	r3, [sl], #4
 800b08a:	d82b      	bhi.n	800b0e4 <__multiply+0x120>
 800b08c:	f8cc 8004 	str.w	r8, [ip, #4]
 800b090:	9b01      	ldr	r3, [sp, #4]
 800b092:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800b096:	3204      	adds	r2, #4
 800b098:	f1ba 0f00 	cmp.w	sl, #0
 800b09c:	d020      	beq.n	800b0e0 <__multiply+0x11c>
 800b09e:	682b      	ldr	r3, [r5, #0]
 800b0a0:	4689      	mov	r9, r1
 800b0a2:	46a8      	mov	r8, r5
 800b0a4:	f04f 0b00 	mov.w	fp, #0
 800b0a8:	f8b9 c000 	ldrh.w	ip, [r9]
 800b0ac:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800b0b0:	fb0a 440c 	mla	r4, sl, ip, r4
 800b0b4:	445c      	add	r4, fp
 800b0b6:	46c4      	mov	ip, r8
 800b0b8:	b29b      	uxth	r3, r3
 800b0ba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b0be:	f84c 3b04 	str.w	r3, [ip], #4
 800b0c2:	f859 3b04 	ldr.w	r3, [r9], #4
 800b0c6:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800b0ca:	0c1b      	lsrs	r3, r3, #16
 800b0cc:	fb0a b303 	mla	r3, sl, r3, fp
 800b0d0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b0d4:	454f      	cmp	r7, r9
 800b0d6:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800b0da:	d805      	bhi.n	800b0e8 <__multiply+0x124>
 800b0dc:	f8c8 3004 	str.w	r3, [r8, #4]
 800b0e0:	3504      	adds	r5, #4
 800b0e2:	e79b      	b.n	800b01c <__multiply+0x58>
 800b0e4:	46d4      	mov	ip, sl
 800b0e6:	e7b3      	b.n	800b050 <__multiply+0x8c>
 800b0e8:	46e0      	mov	r8, ip
 800b0ea:	e7dd      	b.n	800b0a8 <__multiply+0xe4>
 800b0ec:	3e01      	subs	r6, #1
 800b0ee:	e799      	b.n	800b024 <__multiply+0x60>

0800b0f0 <__pow5mult>:
 800b0f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0f4:	4615      	mov	r5, r2
 800b0f6:	f012 0203 	ands.w	r2, r2, #3
 800b0fa:	4606      	mov	r6, r0
 800b0fc:	460f      	mov	r7, r1
 800b0fe:	d007      	beq.n	800b110 <__pow5mult+0x20>
 800b100:	3a01      	subs	r2, #1
 800b102:	4c21      	ldr	r4, [pc, #132]	; (800b188 <__pow5mult+0x98>)
 800b104:	2300      	movs	r3, #0
 800b106:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b10a:	f7ff fe8b 	bl	800ae24 <__multadd>
 800b10e:	4607      	mov	r7, r0
 800b110:	10ad      	asrs	r5, r5, #2
 800b112:	d035      	beq.n	800b180 <__pow5mult+0x90>
 800b114:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b116:	b93c      	cbnz	r4, 800b128 <__pow5mult+0x38>
 800b118:	2010      	movs	r0, #16
 800b11a:	f7ff fe13 	bl	800ad44 <malloc>
 800b11e:	6270      	str	r0, [r6, #36]	; 0x24
 800b120:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b124:	6004      	str	r4, [r0, #0]
 800b126:	60c4      	str	r4, [r0, #12]
 800b128:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b12c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b130:	b94c      	cbnz	r4, 800b146 <__pow5mult+0x56>
 800b132:	f240 2171 	movw	r1, #625	; 0x271
 800b136:	4630      	mov	r0, r6
 800b138:	f7ff ff3b 	bl	800afb2 <__i2b>
 800b13c:	2300      	movs	r3, #0
 800b13e:	f8c8 0008 	str.w	r0, [r8, #8]
 800b142:	4604      	mov	r4, r0
 800b144:	6003      	str	r3, [r0, #0]
 800b146:	f04f 0800 	mov.w	r8, #0
 800b14a:	07eb      	lsls	r3, r5, #31
 800b14c:	d50a      	bpl.n	800b164 <__pow5mult+0x74>
 800b14e:	4639      	mov	r1, r7
 800b150:	4622      	mov	r2, r4
 800b152:	4630      	mov	r0, r6
 800b154:	f7ff ff36 	bl	800afc4 <__multiply>
 800b158:	4639      	mov	r1, r7
 800b15a:	4681      	mov	r9, r0
 800b15c:	4630      	mov	r0, r6
 800b15e:	f7ff fe4a 	bl	800adf6 <_Bfree>
 800b162:	464f      	mov	r7, r9
 800b164:	106d      	asrs	r5, r5, #1
 800b166:	d00b      	beq.n	800b180 <__pow5mult+0x90>
 800b168:	6820      	ldr	r0, [r4, #0]
 800b16a:	b938      	cbnz	r0, 800b17c <__pow5mult+0x8c>
 800b16c:	4622      	mov	r2, r4
 800b16e:	4621      	mov	r1, r4
 800b170:	4630      	mov	r0, r6
 800b172:	f7ff ff27 	bl	800afc4 <__multiply>
 800b176:	6020      	str	r0, [r4, #0]
 800b178:	f8c0 8000 	str.w	r8, [r0]
 800b17c:	4604      	mov	r4, r0
 800b17e:	e7e4      	b.n	800b14a <__pow5mult+0x5a>
 800b180:	4638      	mov	r0, r7
 800b182:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b186:	bf00      	nop
 800b188:	0800bfd8 	.word	0x0800bfd8

0800b18c <__lshift>:
 800b18c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b190:	460c      	mov	r4, r1
 800b192:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b196:	6923      	ldr	r3, [r4, #16]
 800b198:	6849      	ldr	r1, [r1, #4]
 800b19a:	eb0a 0903 	add.w	r9, sl, r3
 800b19e:	68a3      	ldr	r3, [r4, #8]
 800b1a0:	4607      	mov	r7, r0
 800b1a2:	4616      	mov	r6, r2
 800b1a4:	f109 0501 	add.w	r5, r9, #1
 800b1a8:	42ab      	cmp	r3, r5
 800b1aa:	db32      	blt.n	800b212 <__lshift+0x86>
 800b1ac:	4638      	mov	r0, r7
 800b1ae:	f7ff fdee 	bl	800ad8e <_Balloc>
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	4680      	mov	r8, r0
 800b1b6:	f100 0114 	add.w	r1, r0, #20
 800b1ba:	461a      	mov	r2, r3
 800b1bc:	4553      	cmp	r3, sl
 800b1be:	db2b      	blt.n	800b218 <__lshift+0x8c>
 800b1c0:	6920      	ldr	r0, [r4, #16]
 800b1c2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b1c6:	f104 0314 	add.w	r3, r4, #20
 800b1ca:	f016 021f 	ands.w	r2, r6, #31
 800b1ce:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b1d2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b1d6:	d025      	beq.n	800b224 <__lshift+0x98>
 800b1d8:	f1c2 0e20 	rsb	lr, r2, #32
 800b1dc:	2000      	movs	r0, #0
 800b1de:	681e      	ldr	r6, [r3, #0]
 800b1e0:	468a      	mov	sl, r1
 800b1e2:	4096      	lsls	r6, r2
 800b1e4:	4330      	orrs	r0, r6
 800b1e6:	f84a 0b04 	str.w	r0, [sl], #4
 800b1ea:	f853 0b04 	ldr.w	r0, [r3], #4
 800b1ee:	459c      	cmp	ip, r3
 800b1f0:	fa20 f00e 	lsr.w	r0, r0, lr
 800b1f4:	d814      	bhi.n	800b220 <__lshift+0x94>
 800b1f6:	6048      	str	r0, [r1, #4]
 800b1f8:	b108      	cbz	r0, 800b1fe <__lshift+0x72>
 800b1fa:	f109 0502 	add.w	r5, r9, #2
 800b1fe:	3d01      	subs	r5, #1
 800b200:	4638      	mov	r0, r7
 800b202:	f8c8 5010 	str.w	r5, [r8, #16]
 800b206:	4621      	mov	r1, r4
 800b208:	f7ff fdf5 	bl	800adf6 <_Bfree>
 800b20c:	4640      	mov	r0, r8
 800b20e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b212:	3101      	adds	r1, #1
 800b214:	005b      	lsls	r3, r3, #1
 800b216:	e7c7      	b.n	800b1a8 <__lshift+0x1c>
 800b218:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b21c:	3301      	adds	r3, #1
 800b21e:	e7cd      	b.n	800b1bc <__lshift+0x30>
 800b220:	4651      	mov	r1, sl
 800b222:	e7dc      	b.n	800b1de <__lshift+0x52>
 800b224:	3904      	subs	r1, #4
 800b226:	f853 2b04 	ldr.w	r2, [r3], #4
 800b22a:	f841 2f04 	str.w	r2, [r1, #4]!
 800b22e:	459c      	cmp	ip, r3
 800b230:	d8f9      	bhi.n	800b226 <__lshift+0x9a>
 800b232:	e7e4      	b.n	800b1fe <__lshift+0x72>

0800b234 <__mcmp>:
 800b234:	6903      	ldr	r3, [r0, #16]
 800b236:	690a      	ldr	r2, [r1, #16]
 800b238:	1a9b      	subs	r3, r3, r2
 800b23a:	b530      	push	{r4, r5, lr}
 800b23c:	d10c      	bne.n	800b258 <__mcmp+0x24>
 800b23e:	0092      	lsls	r2, r2, #2
 800b240:	3014      	adds	r0, #20
 800b242:	3114      	adds	r1, #20
 800b244:	1884      	adds	r4, r0, r2
 800b246:	4411      	add	r1, r2
 800b248:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b24c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b250:	4295      	cmp	r5, r2
 800b252:	d003      	beq.n	800b25c <__mcmp+0x28>
 800b254:	d305      	bcc.n	800b262 <__mcmp+0x2e>
 800b256:	2301      	movs	r3, #1
 800b258:	4618      	mov	r0, r3
 800b25a:	bd30      	pop	{r4, r5, pc}
 800b25c:	42a0      	cmp	r0, r4
 800b25e:	d3f3      	bcc.n	800b248 <__mcmp+0x14>
 800b260:	e7fa      	b.n	800b258 <__mcmp+0x24>
 800b262:	f04f 33ff 	mov.w	r3, #4294967295
 800b266:	e7f7      	b.n	800b258 <__mcmp+0x24>

0800b268 <__mdiff>:
 800b268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b26c:	460d      	mov	r5, r1
 800b26e:	4607      	mov	r7, r0
 800b270:	4611      	mov	r1, r2
 800b272:	4628      	mov	r0, r5
 800b274:	4614      	mov	r4, r2
 800b276:	f7ff ffdd 	bl	800b234 <__mcmp>
 800b27a:	1e06      	subs	r6, r0, #0
 800b27c:	d108      	bne.n	800b290 <__mdiff+0x28>
 800b27e:	4631      	mov	r1, r6
 800b280:	4638      	mov	r0, r7
 800b282:	f7ff fd84 	bl	800ad8e <_Balloc>
 800b286:	2301      	movs	r3, #1
 800b288:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b28c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b290:	bfa4      	itt	ge
 800b292:	4623      	movge	r3, r4
 800b294:	462c      	movge	r4, r5
 800b296:	4638      	mov	r0, r7
 800b298:	6861      	ldr	r1, [r4, #4]
 800b29a:	bfa6      	itte	ge
 800b29c:	461d      	movge	r5, r3
 800b29e:	2600      	movge	r6, #0
 800b2a0:	2601      	movlt	r6, #1
 800b2a2:	f7ff fd74 	bl	800ad8e <_Balloc>
 800b2a6:	692b      	ldr	r3, [r5, #16]
 800b2a8:	60c6      	str	r6, [r0, #12]
 800b2aa:	6926      	ldr	r6, [r4, #16]
 800b2ac:	f105 0914 	add.w	r9, r5, #20
 800b2b0:	f104 0214 	add.w	r2, r4, #20
 800b2b4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800b2b8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800b2bc:	f100 0514 	add.w	r5, r0, #20
 800b2c0:	f04f 0e00 	mov.w	lr, #0
 800b2c4:	f852 ab04 	ldr.w	sl, [r2], #4
 800b2c8:	f859 4b04 	ldr.w	r4, [r9], #4
 800b2cc:	fa1e f18a 	uxtah	r1, lr, sl
 800b2d0:	b2a3      	uxth	r3, r4
 800b2d2:	1ac9      	subs	r1, r1, r3
 800b2d4:	0c23      	lsrs	r3, r4, #16
 800b2d6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800b2da:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b2de:	b289      	uxth	r1, r1
 800b2e0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800b2e4:	45c8      	cmp	r8, r9
 800b2e6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b2ea:	4694      	mov	ip, r2
 800b2ec:	f845 3b04 	str.w	r3, [r5], #4
 800b2f0:	d8e8      	bhi.n	800b2c4 <__mdiff+0x5c>
 800b2f2:	45bc      	cmp	ip, r7
 800b2f4:	d304      	bcc.n	800b300 <__mdiff+0x98>
 800b2f6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800b2fa:	b183      	cbz	r3, 800b31e <__mdiff+0xb6>
 800b2fc:	6106      	str	r6, [r0, #16]
 800b2fe:	e7c5      	b.n	800b28c <__mdiff+0x24>
 800b300:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b304:	fa1e f381 	uxtah	r3, lr, r1
 800b308:	141a      	asrs	r2, r3, #16
 800b30a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b30e:	b29b      	uxth	r3, r3
 800b310:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b314:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800b318:	f845 3b04 	str.w	r3, [r5], #4
 800b31c:	e7e9      	b.n	800b2f2 <__mdiff+0x8a>
 800b31e:	3e01      	subs	r6, #1
 800b320:	e7e9      	b.n	800b2f6 <__mdiff+0x8e>
	...

0800b324 <__ulp>:
 800b324:	4b12      	ldr	r3, [pc, #72]	; (800b370 <__ulp+0x4c>)
 800b326:	ee10 2a90 	vmov	r2, s1
 800b32a:	401a      	ands	r2, r3
 800b32c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800b330:	2b00      	cmp	r3, #0
 800b332:	dd04      	ble.n	800b33e <__ulp+0x1a>
 800b334:	2000      	movs	r0, #0
 800b336:	4619      	mov	r1, r3
 800b338:	ec41 0b10 	vmov	d0, r0, r1
 800b33c:	4770      	bx	lr
 800b33e:	425b      	negs	r3, r3
 800b340:	151b      	asrs	r3, r3, #20
 800b342:	2b13      	cmp	r3, #19
 800b344:	f04f 0000 	mov.w	r0, #0
 800b348:	f04f 0100 	mov.w	r1, #0
 800b34c:	dc04      	bgt.n	800b358 <__ulp+0x34>
 800b34e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b352:	fa42 f103 	asr.w	r1, r2, r3
 800b356:	e7ef      	b.n	800b338 <__ulp+0x14>
 800b358:	3b14      	subs	r3, #20
 800b35a:	2b1e      	cmp	r3, #30
 800b35c:	f04f 0201 	mov.w	r2, #1
 800b360:	bfda      	itte	le
 800b362:	f1c3 031f 	rsble	r3, r3, #31
 800b366:	fa02 f303 	lslle.w	r3, r2, r3
 800b36a:	4613      	movgt	r3, r2
 800b36c:	4618      	mov	r0, r3
 800b36e:	e7e3      	b.n	800b338 <__ulp+0x14>
 800b370:	7ff00000 	.word	0x7ff00000

0800b374 <__b2d>:
 800b374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b376:	6905      	ldr	r5, [r0, #16]
 800b378:	f100 0714 	add.w	r7, r0, #20
 800b37c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b380:	1f2e      	subs	r6, r5, #4
 800b382:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b386:	4620      	mov	r0, r4
 800b388:	f7ff fdc5 	bl	800af16 <__hi0bits>
 800b38c:	f1c0 0320 	rsb	r3, r0, #32
 800b390:	280a      	cmp	r0, #10
 800b392:	600b      	str	r3, [r1, #0]
 800b394:	f8df c074 	ldr.w	ip, [pc, #116]	; 800b40c <__b2d+0x98>
 800b398:	dc14      	bgt.n	800b3c4 <__b2d+0x50>
 800b39a:	f1c0 0e0b 	rsb	lr, r0, #11
 800b39e:	fa24 f10e 	lsr.w	r1, r4, lr
 800b3a2:	42b7      	cmp	r7, r6
 800b3a4:	ea41 030c 	orr.w	r3, r1, ip
 800b3a8:	bf34      	ite	cc
 800b3aa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b3ae:	2100      	movcs	r1, #0
 800b3b0:	3015      	adds	r0, #21
 800b3b2:	fa04 f000 	lsl.w	r0, r4, r0
 800b3b6:	fa21 f10e 	lsr.w	r1, r1, lr
 800b3ba:	ea40 0201 	orr.w	r2, r0, r1
 800b3be:	ec43 2b10 	vmov	d0, r2, r3
 800b3c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3c4:	42b7      	cmp	r7, r6
 800b3c6:	bf3a      	itte	cc
 800b3c8:	f1a5 0608 	subcc.w	r6, r5, #8
 800b3cc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b3d0:	2100      	movcs	r1, #0
 800b3d2:	380b      	subs	r0, #11
 800b3d4:	d015      	beq.n	800b402 <__b2d+0x8e>
 800b3d6:	4084      	lsls	r4, r0
 800b3d8:	f1c0 0520 	rsb	r5, r0, #32
 800b3dc:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800b3e0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800b3e4:	42be      	cmp	r6, r7
 800b3e6:	fa21 fc05 	lsr.w	ip, r1, r5
 800b3ea:	ea44 030c 	orr.w	r3, r4, ip
 800b3ee:	bf8c      	ite	hi
 800b3f0:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b3f4:	2400      	movls	r4, #0
 800b3f6:	fa01 f000 	lsl.w	r0, r1, r0
 800b3fa:	40ec      	lsrs	r4, r5
 800b3fc:	ea40 0204 	orr.w	r2, r0, r4
 800b400:	e7dd      	b.n	800b3be <__b2d+0x4a>
 800b402:	ea44 030c 	orr.w	r3, r4, ip
 800b406:	460a      	mov	r2, r1
 800b408:	e7d9      	b.n	800b3be <__b2d+0x4a>
 800b40a:	bf00      	nop
 800b40c:	3ff00000 	.word	0x3ff00000

0800b410 <__d2b>:
 800b410:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b414:	460e      	mov	r6, r1
 800b416:	2101      	movs	r1, #1
 800b418:	ec59 8b10 	vmov	r8, r9, d0
 800b41c:	4615      	mov	r5, r2
 800b41e:	f7ff fcb6 	bl	800ad8e <_Balloc>
 800b422:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b426:	4607      	mov	r7, r0
 800b428:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b42c:	bb34      	cbnz	r4, 800b47c <__d2b+0x6c>
 800b42e:	9301      	str	r3, [sp, #4]
 800b430:	f1b8 0300 	subs.w	r3, r8, #0
 800b434:	d027      	beq.n	800b486 <__d2b+0x76>
 800b436:	a802      	add	r0, sp, #8
 800b438:	f840 3d08 	str.w	r3, [r0, #-8]!
 800b43c:	f7ff fd8a 	bl	800af54 <__lo0bits>
 800b440:	9900      	ldr	r1, [sp, #0]
 800b442:	b1f0      	cbz	r0, 800b482 <__d2b+0x72>
 800b444:	9a01      	ldr	r2, [sp, #4]
 800b446:	f1c0 0320 	rsb	r3, r0, #32
 800b44a:	fa02 f303 	lsl.w	r3, r2, r3
 800b44e:	430b      	orrs	r3, r1
 800b450:	40c2      	lsrs	r2, r0
 800b452:	617b      	str	r3, [r7, #20]
 800b454:	9201      	str	r2, [sp, #4]
 800b456:	9b01      	ldr	r3, [sp, #4]
 800b458:	61bb      	str	r3, [r7, #24]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	bf14      	ite	ne
 800b45e:	2102      	movne	r1, #2
 800b460:	2101      	moveq	r1, #1
 800b462:	6139      	str	r1, [r7, #16]
 800b464:	b1c4      	cbz	r4, 800b498 <__d2b+0x88>
 800b466:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b46a:	4404      	add	r4, r0
 800b46c:	6034      	str	r4, [r6, #0]
 800b46e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b472:	6028      	str	r0, [r5, #0]
 800b474:	4638      	mov	r0, r7
 800b476:	b003      	add	sp, #12
 800b478:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b47c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b480:	e7d5      	b.n	800b42e <__d2b+0x1e>
 800b482:	6179      	str	r1, [r7, #20]
 800b484:	e7e7      	b.n	800b456 <__d2b+0x46>
 800b486:	a801      	add	r0, sp, #4
 800b488:	f7ff fd64 	bl	800af54 <__lo0bits>
 800b48c:	9b01      	ldr	r3, [sp, #4]
 800b48e:	617b      	str	r3, [r7, #20]
 800b490:	2101      	movs	r1, #1
 800b492:	6139      	str	r1, [r7, #16]
 800b494:	3020      	adds	r0, #32
 800b496:	e7e5      	b.n	800b464 <__d2b+0x54>
 800b498:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800b49c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b4a0:	6030      	str	r0, [r6, #0]
 800b4a2:	6918      	ldr	r0, [r3, #16]
 800b4a4:	f7ff fd37 	bl	800af16 <__hi0bits>
 800b4a8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b4ac:	e7e1      	b.n	800b472 <__d2b+0x62>

0800b4ae <__ratio>:
 800b4ae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4b2:	4688      	mov	r8, r1
 800b4b4:	4669      	mov	r1, sp
 800b4b6:	4681      	mov	r9, r0
 800b4b8:	f7ff ff5c 	bl	800b374 <__b2d>
 800b4bc:	a901      	add	r1, sp, #4
 800b4be:	4640      	mov	r0, r8
 800b4c0:	ec57 6b10 	vmov	r6, r7, d0
 800b4c4:	f7ff ff56 	bl	800b374 <__b2d>
 800b4c8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b4cc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b4d0:	eba3 0c02 	sub.w	ip, r3, r2
 800b4d4:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b4d8:	1a9b      	subs	r3, r3, r2
 800b4da:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b4de:	ec5b ab10 	vmov	sl, fp, d0
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	bfce      	itee	gt
 800b4e6:	463a      	movgt	r2, r7
 800b4e8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b4ec:	465a      	movle	r2, fp
 800b4ee:	4659      	mov	r1, fp
 800b4f0:	463d      	mov	r5, r7
 800b4f2:	bfd4      	ite	le
 800b4f4:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800b4f8:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800b4fc:	4630      	mov	r0, r6
 800b4fe:	ee10 2a10 	vmov	r2, s0
 800b502:	460b      	mov	r3, r1
 800b504:	4629      	mov	r1, r5
 800b506:	f7f5 f9a9 	bl	800085c <__aeabi_ddiv>
 800b50a:	ec41 0b10 	vmov	d0, r0, r1
 800b50e:	b003      	add	sp, #12
 800b510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b514 <__copybits>:
 800b514:	3901      	subs	r1, #1
 800b516:	b510      	push	{r4, lr}
 800b518:	1149      	asrs	r1, r1, #5
 800b51a:	6914      	ldr	r4, [r2, #16]
 800b51c:	3101      	adds	r1, #1
 800b51e:	f102 0314 	add.w	r3, r2, #20
 800b522:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b526:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b52a:	42a3      	cmp	r3, r4
 800b52c:	4602      	mov	r2, r0
 800b52e:	d303      	bcc.n	800b538 <__copybits+0x24>
 800b530:	2300      	movs	r3, #0
 800b532:	428a      	cmp	r2, r1
 800b534:	d305      	bcc.n	800b542 <__copybits+0x2e>
 800b536:	bd10      	pop	{r4, pc}
 800b538:	f853 2b04 	ldr.w	r2, [r3], #4
 800b53c:	f840 2b04 	str.w	r2, [r0], #4
 800b540:	e7f3      	b.n	800b52a <__copybits+0x16>
 800b542:	f842 3b04 	str.w	r3, [r2], #4
 800b546:	e7f4      	b.n	800b532 <__copybits+0x1e>

0800b548 <__any_on>:
 800b548:	f100 0214 	add.w	r2, r0, #20
 800b54c:	6900      	ldr	r0, [r0, #16]
 800b54e:	114b      	asrs	r3, r1, #5
 800b550:	4298      	cmp	r0, r3
 800b552:	b510      	push	{r4, lr}
 800b554:	db11      	blt.n	800b57a <__any_on+0x32>
 800b556:	dd0a      	ble.n	800b56e <__any_on+0x26>
 800b558:	f011 011f 	ands.w	r1, r1, #31
 800b55c:	d007      	beq.n	800b56e <__any_on+0x26>
 800b55e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b562:	fa24 f001 	lsr.w	r0, r4, r1
 800b566:	fa00 f101 	lsl.w	r1, r0, r1
 800b56a:	428c      	cmp	r4, r1
 800b56c:	d10b      	bne.n	800b586 <__any_on+0x3e>
 800b56e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b572:	4293      	cmp	r3, r2
 800b574:	d803      	bhi.n	800b57e <__any_on+0x36>
 800b576:	2000      	movs	r0, #0
 800b578:	bd10      	pop	{r4, pc}
 800b57a:	4603      	mov	r3, r0
 800b57c:	e7f7      	b.n	800b56e <__any_on+0x26>
 800b57e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b582:	2900      	cmp	r1, #0
 800b584:	d0f5      	beq.n	800b572 <__any_on+0x2a>
 800b586:	2001      	movs	r0, #1
 800b588:	e7f6      	b.n	800b578 <__any_on+0x30>

0800b58a <_calloc_r>:
 800b58a:	b538      	push	{r3, r4, r5, lr}
 800b58c:	fb02 f401 	mul.w	r4, r2, r1
 800b590:	4621      	mov	r1, r4
 800b592:	f000 f857 	bl	800b644 <_malloc_r>
 800b596:	4605      	mov	r5, r0
 800b598:	b118      	cbz	r0, 800b5a2 <_calloc_r+0x18>
 800b59a:	4622      	mov	r2, r4
 800b59c:	2100      	movs	r1, #0
 800b59e:	f7fc ff49 	bl	8008434 <memset>
 800b5a2:	4628      	mov	r0, r5
 800b5a4:	bd38      	pop	{r3, r4, r5, pc}
	...

0800b5a8 <_free_r>:
 800b5a8:	b538      	push	{r3, r4, r5, lr}
 800b5aa:	4605      	mov	r5, r0
 800b5ac:	2900      	cmp	r1, #0
 800b5ae:	d045      	beq.n	800b63c <_free_r+0x94>
 800b5b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b5b4:	1f0c      	subs	r4, r1, #4
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	bfb8      	it	lt
 800b5ba:	18e4      	addlt	r4, r4, r3
 800b5bc:	f000 fa36 	bl	800ba2c <__malloc_lock>
 800b5c0:	4a1f      	ldr	r2, [pc, #124]	; (800b640 <_free_r+0x98>)
 800b5c2:	6813      	ldr	r3, [r2, #0]
 800b5c4:	4610      	mov	r0, r2
 800b5c6:	b933      	cbnz	r3, 800b5d6 <_free_r+0x2e>
 800b5c8:	6063      	str	r3, [r4, #4]
 800b5ca:	6014      	str	r4, [r2, #0]
 800b5cc:	4628      	mov	r0, r5
 800b5ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b5d2:	f000 ba2c 	b.w	800ba2e <__malloc_unlock>
 800b5d6:	42a3      	cmp	r3, r4
 800b5d8:	d90c      	bls.n	800b5f4 <_free_r+0x4c>
 800b5da:	6821      	ldr	r1, [r4, #0]
 800b5dc:	1862      	adds	r2, r4, r1
 800b5de:	4293      	cmp	r3, r2
 800b5e0:	bf04      	itt	eq
 800b5e2:	681a      	ldreq	r2, [r3, #0]
 800b5e4:	685b      	ldreq	r3, [r3, #4]
 800b5e6:	6063      	str	r3, [r4, #4]
 800b5e8:	bf04      	itt	eq
 800b5ea:	1852      	addeq	r2, r2, r1
 800b5ec:	6022      	streq	r2, [r4, #0]
 800b5ee:	6004      	str	r4, [r0, #0]
 800b5f0:	e7ec      	b.n	800b5cc <_free_r+0x24>
 800b5f2:	4613      	mov	r3, r2
 800b5f4:	685a      	ldr	r2, [r3, #4]
 800b5f6:	b10a      	cbz	r2, 800b5fc <_free_r+0x54>
 800b5f8:	42a2      	cmp	r2, r4
 800b5fa:	d9fa      	bls.n	800b5f2 <_free_r+0x4a>
 800b5fc:	6819      	ldr	r1, [r3, #0]
 800b5fe:	1858      	adds	r0, r3, r1
 800b600:	42a0      	cmp	r0, r4
 800b602:	d10b      	bne.n	800b61c <_free_r+0x74>
 800b604:	6820      	ldr	r0, [r4, #0]
 800b606:	4401      	add	r1, r0
 800b608:	1858      	adds	r0, r3, r1
 800b60a:	4282      	cmp	r2, r0
 800b60c:	6019      	str	r1, [r3, #0]
 800b60e:	d1dd      	bne.n	800b5cc <_free_r+0x24>
 800b610:	6810      	ldr	r0, [r2, #0]
 800b612:	6852      	ldr	r2, [r2, #4]
 800b614:	605a      	str	r2, [r3, #4]
 800b616:	4401      	add	r1, r0
 800b618:	6019      	str	r1, [r3, #0]
 800b61a:	e7d7      	b.n	800b5cc <_free_r+0x24>
 800b61c:	d902      	bls.n	800b624 <_free_r+0x7c>
 800b61e:	230c      	movs	r3, #12
 800b620:	602b      	str	r3, [r5, #0]
 800b622:	e7d3      	b.n	800b5cc <_free_r+0x24>
 800b624:	6820      	ldr	r0, [r4, #0]
 800b626:	1821      	adds	r1, r4, r0
 800b628:	428a      	cmp	r2, r1
 800b62a:	bf04      	itt	eq
 800b62c:	6811      	ldreq	r1, [r2, #0]
 800b62e:	6852      	ldreq	r2, [r2, #4]
 800b630:	6062      	str	r2, [r4, #4]
 800b632:	bf04      	itt	eq
 800b634:	1809      	addeq	r1, r1, r0
 800b636:	6021      	streq	r1, [r4, #0]
 800b638:	605c      	str	r4, [r3, #4]
 800b63a:	e7c7      	b.n	800b5cc <_free_r+0x24>
 800b63c:	bd38      	pop	{r3, r4, r5, pc}
 800b63e:	bf00      	nop
 800b640:	2000026c 	.word	0x2000026c

0800b644 <_malloc_r>:
 800b644:	b570      	push	{r4, r5, r6, lr}
 800b646:	1ccd      	adds	r5, r1, #3
 800b648:	f025 0503 	bic.w	r5, r5, #3
 800b64c:	3508      	adds	r5, #8
 800b64e:	2d0c      	cmp	r5, #12
 800b650:	bf38      	it	cc
 800b652:	250c      	movcc	r5, #12
 800b654:	2d00      	cmp	r5, #0
 800b656:	4606      	mov	r6, r0
 800b658:	db01      	blt.n	800b65e <_malloc_r+0x1a>
 800b65a:	42a9      	cmp	r1, r5
 800b65c:	d903      	bls.n	800b666 <_malloc_r+0x22>
 800b65e:	230c      	movs	r3, #12
 800b660:	6033      	str	r3, [r6, #0]
 800b662:	2000      	movs	r0, #0
 800b664:	bd70      	pop	{r4, r5, r6, pc}
 800b666:	f000 f9e1 	bl	800ba2c <__malloc_lock>
 800b66a:	4a21      	ldr	r2, [pc, #132]	; (800b6f0 <_malloc_r+0xac>)
 800b66c:	6814      	ldr	r4, [r2, #0]
 800b66e:	4621      	mov	r1, r4
 800b670:	b991      	cbnz	r1, 800b698 <_malloc_r+0x54>
 800b672:	4c20      	ldr	r4, [pc, #128]	; (800b6f4 <_malloc_r+0xb0>)
 800b674:	6823      	ldr	r3, [r4, #0]
 800b676:	b91b      	cbnz	r3, 800b680 <_malloc_r+0x3c>
 800b678:	4630      	mov	r0, r6
 800b67a:	f000 f98f 	bl	800b99c <_sbrk_r>
 800b67e:	6020      	str	r0, [r4, #0]
 800b680:	4629      	mov	r1, r5
 800b682:	4630      	mov	r0, r6
 800b684:	f000 f98a 	bl	800b99c <_sbrk_r>
 800b688:	1c43      	adds	r3, r0, #1
 800b68a:	d124      	bne.n	800b6d6 <_malloc_r+0x92>
 800b68c:	230c      	movs	r3, #12
 800b68e:	6033      	str	r3, [r6, #0]
 800b690:	4630      	mov	r0, r6
 800b692:	f000 f9cc 	bl	800ba2e <__malloc_unlock>
 800b696:	e7e4      	b.n	800b662 <_malloc_r+0x1e>
 800b698:	680b      	ldr	r3, [r1, #0]
 800b69a:	1b5b      	subs	r3, r3, r5
 800b69c:	d418      	bmi.n	800b6d0 <_malloc_r+0x8c>
 800b69e:	2b0b      	cmp	r3, #11
 800b6a0:	d90f      	bls.n	800b6c2 <_malloc_r+0x7e>
 800b6a2:	600b      	str	r3, [r1, #0]
 800b6a4:	50cd      	str	r5, [r1, r3]
 800b6a6:	18cc      	adds	r4, r1, r3
 800b6a8:	4630      	mov	r0, r6
 800b6aa:	f000 f9c0 	bl	800ba2e <__malloc_unlock>
 800b6ae:	f104 000b 	add.w	r0, r4, #11
 800b6b2:	1d23      	adds	r3, r4, #4
 800b6b4:	f020 0007 	bic.w	r0, r0, #7
 800b6b8:	1ac3      	subs	r3, r0, r3
 800b6ba:	d0d3      	beq.n	800b664 <_malloc_r+0x20>
 800b6bc:	425a      	negs	r2, r3
 800b6be:	50e2      	str	r2, [r4, r3]
 800b6c0:	e7d0      	b.n	800b664 <_malloc_r+0x20>
 800b6c2:	428c      	cmp	r4, r1
 800b6c4:	684b      	ldr	r3, [r1, #4]
 800b6c6:	bf16      	itet	ne
 800b6c8:	6063      	strne	r3, [r4, #4]
 800b6ca:	6013      	streq	r3, [r2, #0]
 800b6cc:	460c      	movne	r4, r1
 800b6ce:	e7eb      	b.n	800b6a8 <_malloc_r+0x64>
 800b6d0:	460c      	mov	r4, r1
 800b6d2:	6849      	ldr	r1, [r1, #4]
 800b6d4:	e7cc      	b.n	800b670 <_malloc_r+0x2c>
 800b6d6:	1cc4      	adds	r4, r0, #3
 800b6d8:	f024 0403 	bic.w	r4, r4, #3
 800b6dc:	42a0      	cmp	r0, r4
 800b6de:	d005      	beq.n	800b6ec <_malloc_r+0xa8>
 800b6e0:	1a21      	subs	r1, r4, r0
 800b6e2:	4630      	mov	r0, r6
 800b6e4:	f000 f95a 	bl	800b99c <_sbrk_r>
 800b6e8:	3001      	adds	r0, #1
 800b6ea:	d0cf      	beq.n	800b68c <_malloc_r+0x48>
 800b6ec:	6025      	str	r5, [r4, #0]
 800b6ee:	e7db      	b.n	800b6a8 <_malloc_r+0x64>
 800b6f0:	2000026c 	.word	0x2000026c
 800b6f4:	20000270 	.word	0x20000270

0800b6f8 <__ssputs_r>:
 800b6f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6fc:	688e      	ldr	r6, [r1, #8]
 800b6fe:	429e      	cmp	r6, r3
 800b700:	4682      	mov	sl, r0
 800b702:	460c      	mov	r4, r1
 800b704:	4690      	mov	r8, r2
 800b706:	4699      	mov	r9, r3
 800b708:	d837      	bhi.n	800b77a <__ssputs_r+0x82>
 800b70a:	898a      	ldrh	r2, [r1, #12]
 800b70c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b710:	d031      	beq.n	800b776 <__ssputs_r+0x7e>
 800b712:	6825      	ldr	r5, [r4, #0]
 800b714:	6909      	ldr	r1, [r1, #16]
 800b716:	1a6f      	subs	r7, r5, r1
 800b718:	6965      	ldr	r5, [r4, #20]
 800b71a:	2302      	movs	r3, #2
 800b71c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b720:	fb95 f5f3 	sdiv	r5, r5, r3
 800b724:	f109 0301 	add.w	r3, r9, #1
 800b728:	443b      	add	r3, r7
 800b72a:	429d      	cmp	r5, r3
 800b72c:	bf38      	it	cc
 800b72e:	461d      	movcc	r5, r3
 800b730:	0553      	lsls	r3, r2, #21
 800b732:	d530      	bpl.n	800b796 <__ssputs_r+0x9e>
 800b734:	4629      	mov	r1, r5
 800b736:	f7ff ff85 	bl	800b644 <_malloc_r>
 800b73a:	4606      	mov	r6, r0
 800b73c:	b950      	cbnz	r0, 800b754 <__ssputs_r+0x5c>
 800b73e:	230c      	movs	r3, #12
 800b740:	f8ca 3000 	str.w	r3, [sl]
 800b744:	89a3      	ldrh	r3, [r4, #12]
 800b746:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b74a:	81a3      	strh	r3, [r4, #12]
 800b74c:	f04f 30ff 	mov.w	r0, #4294967295
 800b750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b754:	463a      	mov	r2, r7
 800b756:	6921      	ldr	r1, [r4, #16]
 800b758:	f7ff fb0e 	bl	800ad78 <memcpy>
 800b75c:	89a3      	ldrh	r3, [r4, #12]
 800b75e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b762:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b766:	81a3      	strh	r3, [r4, #12]
 800b768:	6126      	str	r6, [r4, #16]
 800b76a:	6165      	str	r5, [r4, #20]
 800b76c:	443e      	add	r6, r7
 800b76e:	1bed      	subs	r5, r5, r7
 800b770:	6026      	str	r6, [r4, #0]
 800b772:	60a5      	str	r5, [r4, #8]
 800b774:	464e      	mov	r6, r9
 800b776:	454e      	cmp	r6, r9
 800b778:	d900      	bls.n	800b77c <__ssputs_r+0x84>
 800b77a:	464e      	mov	r6, r9
 800b77c:	4632      	mov	r2, r6
 800b77e:	4641      	mov	r1, r8
 800b780:	6820      	ldr	r0, [r4, #0]
 800b782:	f000 f93a 	bl	800b9fa <memmove>
 800b786:	68a3      	ldr	r3, [r4, #8]
 800b788:	1b9b      	subs	r3, r3, r6
 800b78a:	60a3      	str	r3, [r4, #8]
 800b78c:	6823      	ldr	r3, [r4, #0]
 800b78e:	441e      	add	r6, r3
 800b790:	6026      	str	r6, [r4, #0]
 800b792:	2000      	movs	r0, #0
 800b794:	e7dc      	b.n	800b750 <__ssputs_r+0x58>
 800b796:	462a      	mov	r2, r5
 800b798:	f000 f94a 	bl	800ba30 <_realloc_r>
 800b79c:	4606      	mov	r6, r0
 800b79e:	2800      	cmp	r0, #0
 800b7a0:	d1e2      	bne.n	800b768 <__ssputs_r+0x70>
 800b7a2:	6921      	ldr	r1, [r4, #16]
 800b7a4:	4650      	mov	r0, sl
 800b7a6:	f7ff feff 	bl	800b5a8 <_free_r>
 800b7aa:	e7c8      	b.n	800b73e <__ssputs_r+0x46>

0800b7ac <_svfiprintf_r>:
 800b7ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7b0:	461d      	mov	r5, r3
 800b7b2:	898b      	ldrh	r3, [r1, #12]
 800b7b4:	061f      	lsls	r7, r3, #24
 800b7b6:	b09d      	sub	sp, #116	; 0x74
 800b7b8:	4680      	mov	r8, r0
 800b7ba:	460c      	mov	r4, r1
 800b7bc:	4616      	mov	r6, r2
 800b7be:	d50f      	bpl.n	800b7e0 <_svfiprintf_r+0x34>
 800b7c0:	690b      	ldr	r3, [r1, #16]
 800b7c2:	b96b      	cbnz	r3, 800b7e0 <_svfiprintf_r+0x34>
 800b7c4:	2140      	movs	r1, #64	; 0x40
 800b7c6:	f7ff ff3d 	bl	800b644 <_malloc_r>
 800b7ca:	6020      	str	r0, [r4, #0]
 800b7cc:	6120      	str	r0, [r4, #16]
 800b7ce:	b928      	cbnz	r0, 800b7dc <_svfiprintf_r+0x30>
 800b7d0:	230c      	movs	r3, #12
 800b7d2:	f8c8 3000 	str.w	r3, [r8]
 800b7d6:	f04f 30ff 	mov.w	r0, #4294967295
 800b7da:	e0c8      	b.n	800b96e <_svfiprintf_r+0x1c2>
 800b7dc:	2340      	movs	r3, #64	; 0x40
 800b7de:	6163      	str	r3, [r4, #20]
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	9309      	str	r3, [sp, #36]	; 0x24
 800b7e4:	2320      	movs	r3, #32
 800b7e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b7ea:	2330      	movs	r3, #48	; 0x30
 800b7ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b7f0:	9503      	str	r5, [sp, #12]
 800b7f2:	f04f 0b01 	mov.w	fp, #1
 800b7f6:	4637      	mov	r7, r6
 800b7f8:	463d      	mov	r5, r7
 800b7fa:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b7fe:	b10b      	cbz	r3, 800b804 <_svfiprintf_r+0x58>
 800b800:	2b25      	cmp	r3, #37	; 0x25
 800b802:	d13e      	bne.n	800b882 <_svfiprintf_r+0xd6>
 800b804:	ebb7 0a06 	subs.w	sl, r7, r6
 800b808:	d00b      	beq.n	800b822 <_svfiprintf_r+0x76>
 800b80a:	4653      	mov	r3, sl
 800b80c:	4632      	mov	r2, r6
 800b80e:	4621      	mov	r1, r4
 800b810:	4640      	mov	r0, r8
 800b812:	f7ff ff71 	bl	800b6f8 <__ssputs_r>
 800b816:	3001      	adds	r0, #1
 800b818:	f000 80a4 	beq.w	800b964 <_svfiprintf_r+0x1b8>
 800b81c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b81e:	4453      	add	r3, sl
 800b820:	9309      	str	r3, [sp, #36]	; 0x24
 800b822:	783b      	ldrb	r3, [r7, #0]
 800b824:	2b00      	cmp	r3, #0
 800b826:	f000 809d 	beq.w	800b964 <_svfiprintf_r+0x1b8>
 800b82a:	2300      	movs	r3, #0
 800b82c:	f04f 32ff 	mov.w	r2, #4294967295
 800b830:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b834:	9304      	str	r3, [sp, #16]
 800b836:	9307      	str	r3, [sp, #28]
 800b838:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b83c:	931a      	str	r3, [sp, #104]	; 0x68
 800b83e:	462f      	mov	r7, r5
 800b840:	2205      	movs	r2, #5
 800b842:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b846:	4850      	ldr	r0, [pc, #320]	; (800b988 <_svfiprintf_r+0x1dc>)
 800b848:	f7f4 fcd2 	bl	80001f0 <memchr>
 800b84c:	9b04      	ldr	r3, [sp, #16]
 800b84e:	b9d0      	cbnz	r0, 800b886 <_svfiprintf_r+0xda>
 800b850:	06d9      	lsls	r1, r3, #27
 800b852:	bf44      	itt	mi
 800b854:	2220      	movmi	r2, #32
 800b856:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b85a:	071a      	lsls	r2, r3, #28
 800b85c:	bf44      	itt	mi
 800b85e:	222b      	movmi	r2, #43	; 0x2b
 800b860:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b864:	782a      	ldrb	r2, [r5, #0]
 800b866:	2a2a      	cmp	r2, #42	; 0x2a
 800b868:	d015      	beq.n	800b896 <_svfiprintf_r+0xea>
 800b86a:	9a07      	ldr	r2, [sp, #28]
 800b86c:	462f      	mov	r7, r5
 800b86e:	2000      	movs	r0, #0
 800b870:	250a      	movs	r5, #10
 800b872:	4639      	mov	r1, r7
 800b874:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b878:	3b30      	subs	r3, #48	; 0x30
 800b87a:	2b09      	cmp	r3, #9
 800b87c:	d94d      	bls.n	800b91a <_svfiprintf_r+0x16e>
 800b87e:	b1b8      	cbz	r0, 800b8b0 <_svfiprintf_r+0x104>
 800b880:	e00f      	b.n	800b8a2 <_svfiprintf_r+0xf6>
 800b882:	462f      	mov	r7, r5
 800b884:	e7b8      	b.n	800b7f8 <_svfiprintf_r+0x4c>
 800b886:	4a40      	ldr	r2, [pc, #256]	; (800b988 <_svfiprintf_r+0x1dc>)
 800b888:	1a80      	subs	r0, r0, r2
 800b88a:	fa0b f000 	lsl.w	r0, fp, r0
 800b88e:	4318      	orrs	r0, r3
 800b890:	9004      	str	r0, [sp, #16]
 800b892:	463d      	mov	r5, r7
 800b894:	e7d3      	b.n	800b83e <_svfiprintf_r+0x92>
 800b896:	9a03      	ldr	r2, [sp, #12]
 800b898:	1d11      	adds	r1, r2, #4
 800b89a:	6812      	ldr	r2, [r2, #0]
 800b89c:	9103      	str	r1, [sp, #12]
 800b89e:	2a00      	cmp	r2, #0
 800b8a0:	db01      	blt.n	800b8a6 <_svfiprintf_r+0xfa>
 800b8a2:	9207      	str	r2, [sp, #28]
 800b8a4:	e004      	b.n	800b8b0 <_svfiprintf_r+0x104>
 800b8a6:	4252      	negs	r2, r2
 800b8a8:	f043 0302 	orr.w	r3, r3, #2
 800b8ac:	9207      	str	r2, [sp, #28]
 800b8ae:	9304      	str	r3, [sp, #16]
 800b8b0:	783b      	ldrb	r3, [r7, #0]
 800b8b2:	2b2e      	cmp	r3, #46	; 0x2e
 800b8b4:	d10c      	bne.n	800b8d0 <_svfiprintf_r+0x124>
 800b8b6:	787b      	ldrb	r3, [r7, #1]
 800b8b8:	2b2a      	cmp	r3, #42	; 0x2a
 800b8ba:	d133      	bne.n	800b924 <_svfiprintf_r+0x178>
 800b8bc:	9b03      	ldr	r3, [sp, #12]
 800b8be:	1d1a      	adds	r2, r3, #4
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	9203      	str	r2, [sp, #12]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	bfb8      	it	lt
 800b8c8:	f04f 33ff 	movlt.w	r3, #4294967295
 800b8cc:	3702      	adds	r7, #2
 800b8ce:	9305      	str	r3, [sp, #20]
 800b8d0:	4d2e      	ldr	r5, [pc, #184]	; (800b98c <_svfiprintf_r+0x1e0>)
 800b8d2:	7839      	ldrb	r1, [r7, #0]
 800b8d4:	2203      	movs	r2, #3
 800b8d6:	4628      	mov	r0, r5
 800b8d8:	f7f4 fc8a 	bl	80001f0 <memchr>
 800b8dc:	b138      	cbz	r0, 800b8ee <_svfiprintf_r+0x142>
 800b8de:	2340      	movs	r3, #64	; 0x40
 800b8e0:	1b40      	subs	r0, r0, r5
 800b8e2:	fa03 f000 	lsl.w	r0, r3, r0
 800b8e6:	9b04      	ldr	r3, [sp, #16]
 800b8e8:	4303      	orrs	r3, r0
 800b8ea:	3701      	adds	r7, #1
 800b8ec:	9304      	str	r3, [sp, #16]
 800b8ee:	7839      	ldrb	r1, [r7, #0]
 800b8f0:	4827      	ldr	r0, [pc, #156]	; (800b990 <_svfiprintf_r+0x1e4>)
 800b8f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b8f6:	2206      	movs	r2, #6
 800b8f8:	1c7e      	adds	r6, r7, #1
 800b8fa:	f7f4 fc79 	bl	80001f0 <memchr>
 800b8fe:	2800      	cmp	r0, #0
 800b900:	d038      	beq.n	800b974 <_svfiprintf_r+0x1c8>
 800b902:	4b24      	ldr	r3, [pc, #144]	; (800b994 <_svfiprintf_r+0x1e8>)
 800b904:	bb13      	cbnz	r3, 800b94c <_svfiprintf_r+0x1a0>
 800b906:	9b03      	ldr	r3, [sp, #12]
 800b908:	3307      	adds	r3, #7
 800b90a:	f023 0307 	bic.w	r3, r3, #7
 800b90e:	3308      	adds	r3, #8
 800b910:	9303      	str	r3, [sp, #12]
 800b912:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b914:	444b      	add	r3, r9
 800b916:	9309      	str	r3, [sp, #36]	; 0x24
 800b918:	e76d      	b.n	800b7f6 <_svfiprintf_r+0x4a>
 800b91a:	fb05 3202 	mla	r2, r5, r2, r3
 800b91e:	2001      	movs	r0, #1
 800b920:	460f      	mov	r7, r1
 800b922:	e7a6      	b.n	800b872 <_svfiprintf_r+0xc6>
 800b924:	2300      	movs	r3, #0
 800b926:	3701      	adds	r7, #1
 800b928:	9305      	str	r3, [sp, #20]
 800b92a:	4619      	mov	r1, r3
 800b92c:	250a      	movs	r5, #10
 800b92e:	4638      	mov	r0, r7
 800b930:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b934:	3a30      	subs	r2, #48	; 0x30
 800b936:	2a09      	cmp	r2, #9
 800b938:	d903      	bls.n	800b942 <_svfiprintf_r+0x196>
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d0c8      	beq.n	800b8d0 <_svfiprintf_r+0x124>
 800b93e:	9105      	str	r1, [sp, #20]
 800b940:	e7c6      	b.n	800b8d0 <_svfiprintf_r+0x124>
 800b942:	fb05 2101 	mla	r1, r5, r1, r2
 800b946:	2301      	movs	r3, #1
 800b948:	4607      	mov	r7, r0
 800b94a:	e7f0      	b.n	800b92e <_svfiprintf_r+0x182>
 800b94c:	ab03      	add	r3, sp, #12
 800b94e:	9300      	str	r3, [sp, #0]
 800b950:	4622      	mov	r2, r4
 800b952:	4b11      	ldr	r3, [pc, #68]	; (800b998 <_svfiprintf_r+0x1ec>)
 800b954:	a904      	add	r1, sp, #16
 800b956:	4640      	mov	r0, r8
 800b958:	f7fc fe08 	bl	800856c <_printf_float>
 800b95c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b960:	4681      	mov	r9, r0
 800b962:	d1d6      	bne.n	800b912 <_svfiprintf_r+0x166>
 800b964:	89a3      	ldrh	r3, [r4, #12]
 800b966:	065b      	lsls	r3, r3, #25
 800b968:	f53f af35 	bmi.w	800b7d6 <_svfiprintf_r+0x2a>
 800b96c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b96e:	b01d      	add	sp, #116	; 0x74
 800b970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b974:	ab03      	add	r3, sp, #12
 800b976:	9300      	str	r3, [sp, #0]
 800b978:	4622      	mov	r2, r4
 800b97a:	4b07      	ldr	r3, [pc, #28]	; (800b998 <_svfiprintf_r+0x1ec>)
 800b97c:	a904      	add	r1, sp, #16
 800b97e:	4640      	mov	r0, r8
 800b980:	f7fd f8aa 	bl	8008ad8 <_printf_i>
 800b984:	e7ea      	b.n	800b95c <_svfiprintf_r+0x1b0>
 800b986:	bf00      	nop
 800b988:	0800bfe4 	.word	0x0800bfe4
 800b98c:	0800bfea 	.word	0x0800bfea
 800b990:	0800bfee 	.word	0x0800bfee
 800b994:	0800856d 	.word	0x0800856d
 800b998:	0800b6f9 	.word	0x0800b6f9

0800b99c <_sbrk_r>:
 800b99c:	b538      	push	{r3, r4, r5, lr}
 800b99e:	4c06      	ldr	r4, [pc, #24]	; (800b9b8 <_sbrk_r+0x1c>)
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	4605      	mov	r5, r0
 800b9a4:	4608      	mov	r0, r1
 800b9a6:	6023      	str	r3, [r4, #0]
 800b9a8:	f7f7 fe6c 	bl	8003684 <_sbrk>
 800b9ac:	1c43      	adds	r3, r0, #1
 800b9ae:	d102      	bne.n	800b9b6 <_sbrk_r+0x1a>
 800b9b0:	6823      	ldr	r3, [r4, #0]
 800b9b2:	b103      	cbz	r3, 800b9b6 <_sbrk_r+0x1a>
 800b9b4:	602b      	str	r3, [r5, #0]
 800b9b6:	bd38      	pop	{r3, r4, r5, pc}
 800b9b8:	200005c4 	.word	0x200005c4

0800b9bc <strncmp>:
 800b9bc:	b510      	push	{r4, lr}
 800b9be:	b16a      	cbz	r2, 800b9dc <strncmp+0x20>
 800b9c0:	3901      	subs	r1, #1
 800b9c2:	1884      	adds	r4, r0, r2
 800b9c4:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b9c8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b9cc:	4293      	cmp	r3, r2
 800b9ce:	d103      	bne.n	800b9d8 <strncmp+0x1c>
 800b9d0:	42a0      	cmp	r0, r4
 800b9d2:	d001      	beq.n	800b9d8 <strncmp+0x1c>
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d1f5      	bne.n	800b9c4 <strncmp+0x8>
 800b9d8:	1a98      	subs	r0, r3, r2
 800b9da:	bd10      	pop	{r4, pc}
 800b9dc:	4610      	mov	r0, r2
 800b9de:	e7fc      	b.n	800b9da <strncmp+0x1e>

0800b9e0 <__ascii_wctomb>:
 800b9e0:	b149      	cbz	r1, 800b9f6 <__ascii_wctomb+0x16>
 800b9e2:	2aff      	cmp	r2, #255	; 0xff
 800b9e4:	bf85      	ittet	hi
 800b9e6:	238a      	movhi	r3, #138	; 0x8a
 800b9e8:	6003      	strhi	r3, [r0, #0]
 800b9ea:	700a      	strbls	r2, [r1, #0]
 800b9ec:	f04f 30ff 	movhi.w	r0, #4294967295
 800b9f0:	bf98      	it	ls
 800b9f2:	2001      	movls	r0, #1
 800b9f4:	4770      	bx	lr
 800b9f6:	4608      	mov	r0, r1
 800b9f8:	4770      	bx	lr

0800b9fa <memmove>:
 800b9fa:	4288      	cmp	r0, r1
 800b9fc:	b510      	push	{r4, lr}
 800b9fe:	eb01 0302 	add.w	r3, r1, r2
 800ba02:	d807      	bhi.n	800ba14 <memmove+0x1a>
 800ba04:	1e42      	subs	r2, r0, #1
 800ba06:	4299      	cmp	r1, r3
 800ba08:	d00a      	beq.n	800ba20 <memmove+0x26>
 800ba0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba0e:	f802 4f01 	strb.w	r4, [r2, #1]!
 800ba12:	e7f8      	b.n	800ba06 <memmove+0xc>
 800ba14:	4283      	cmp	r3, r0
 800ba16:	d9f5      	bls.n	800ba04 <memmove+0xa>
 800ba18:	1881      	adds	r1, r0, r2
 800ba1a:	1ad2      	subs	r2, r2, r3
 800ba1c:	42d3      	cmn	r3, r2
 800ba1e:	d100      	bne.n	800ba22 <memmove+0x28>
 800ba20:	bd10      	pop	{r4, pc}
 800ba22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ba26:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800ba2a:	e7f7      	b.n	800ba1c <memmove+0x22>

0800ba2c <__malloc_lock>:
 800ba2c:	4770      	bx	lr

0800ba2e <__malloc_unlock>:
 800ba2e:	4770      	bx	lr

0800ba30 <_realloc_r>:
 800ba30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba32:	4607      	mov	r7, r0
 800ba34:	4614      	mov	r4, r2
 800ba36:	460e      	mov	r6, r1
 800ba38:	b921      	cbnz	r1, 800ba44 <_realloc_r+0x14>
 800ba3a:	4611      	mov	r1, r2
 800ba3c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ba40:	f7ff be00 	b.w	800b644 <_malloc_r>
 800ba44:	b922      	cbnz	r2, 800ba50 <_realloc_r+0x20>
 800ba46:	f7ff fdaf 	bl	800b5a8 <_free_r>
 800ba4a:	4625      	mov	r5, r4
 800ba4c:	4628      	mov	r0, r5
 800ba4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba50:	f000 f814 	bl	800ba7c <_malloc_usable_size_r>
 800ba54:	42a0      	cmp	r0, r4
 800ba56:	d20f      	bcs.n	800ba78 <_realloc_r+0x48>
 800ba58:	4621      	mov	r1, r4
 800ba5a:	4638      	mov	r0, r7
 800ba5c:	f7ff fdf2 	bl	800b644 <_malloc_r>
 800ba60:	4605      	mov	r5, r0
 800ba62:	2800      	cmp	r0, #0
 800ba64:	d0f2      	beq.n	800ba4c <_realloc_r+0x1c>
 800ba66:	4631      	mov	r1, r6
 800ba68:	4622      	mov	r2, r4
 800ba6a:	f7ff f985 	bl	800ad78 <memcpy>
 800ba6e:	4631      	mov	r1, r6
 800ba70:	4638      	mov	r0, r7
 800ba72:	f7ff fd99 	bl	800b5a8 <_free_r>
 800ba76:	e7e9      	b.n	800ba4c <_realloc_r+0x1c>
 800ba78:	4635      	mov	r5, r6
 800ba7a:	e7e7      	b.n	800ba4c <_realloc_r+0x1c>

0800ba7c <_malloc_usable_size_r>:
 800ba7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba80:	1f18      	subs	r0, r3, #4
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	bfbc      	itt	lt
 800ba86:	580b      	ldrlt	r3, [r1, r0]
 800ba88:	18c0      	addlt	r0, r0, r3
 800ba8a:	4770      	bx	lr

0800ba8c <_init>:
 800ba8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba8e:	bf00      	nop
 800ba90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba92:	bc08      	pop	{r3}
 800ba94:	469e      	mov	lr, r3
 800ba96:	4770      	bx	lr

0800ba98 <_fini>:
 800ba98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba9a:	bf00      	nop
 800ba9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba9e:	bc08      	pop	{r3}
 800baa0:	469e      	mov	lr, r3
 800baa2:	4770      	bx	lr
